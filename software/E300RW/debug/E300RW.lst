
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/debug/E300RW.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/debug/E300RW.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00005cd4 memsz 0x00005cd4 flags rwx
    LOAD off    0x00007730 vaddr 0x80001730 paddr 0x80001730 align 2**12
         filesz 0x00000000 memsz 0x00001c88 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405cd8 align 2**12
         filesz 0x00001730 memsz 0x00001730 flags rw-
    LOAD off    0x00008730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00008730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             0000019c  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005500  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           000005d0  20405700  20405700  00006700  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20405cd0  20405cd0  00006cd0  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00001730  80000000  20405cd8  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              00001088  80001730  80001730  00007730  2**3  ALLOC
  6 .stack            00000400  800027b8  800027b8  00007730  2**0  ALLOC
  7 .heap             00000800  80002bb8  80002bb8  00007730  2**0  ALLOC
  8 .debug_info       000146aa  00000000  00000000  00008730  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     00002729  00000000  00000000  0001cdda  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    000008c0  00000000  00000000  0001f508  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000758  00000000  00000000  0001fdc8  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00007b63  00000000  00000000  00020520  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        00003786  00000000  00000000  00028083  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002b809  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002b831  2**0  CONTENTS, READONLY
 16 .debug_frame      00002450  00000000  00000000  0002b85c  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405700 l    d  .rodata	00000000 .rodata
20405cd0 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80001730 l    d  .bss	00000000 .bss
800027b8 l    d  .stack	00000000 .stack
80002bb8 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
2040013e l       .init	00000000 _skip_init
2040597c l       .rodata	00000000 argv
20405980 l       .rodata	00000000 envp
20405984 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 E300RW.c
80000000 l     O .data	000007d0 asso_text.2678
800007d0 l     O .data	000007d0 plain_text.2677
80001740 l     O .bss	000007e0 cipher_text.2679
80000fa0 l     O .data	00000010 Key.2683
80000fb0 l     O .data	00000010 Nonce.2680
80001f20 l     O .bss	00000028 hash.2682
80001730 l     O .bss	00000004 tag_addr.2684
80001f48 l     O .bss	000007e0 dec_text.2681
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400e60 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
204013b0 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80001710 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80002728 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
204020ca l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20402174 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
2040219a l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
204021be l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
204021fa l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
2040235a l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20402892 l     F .text	00000024 __metal_driver_cpu_hartid
204028b6 l     F .text	0000002a __metal_driver_cpu_timebase
204028e0 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20404116 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20404140 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20404168 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20404190 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
204041b8 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404704 l     F .text	00000026 __metal_driver_sifive_gpio0_base
2040472a l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20404754 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20404fbe l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20404fe8 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20405016 l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
2040503e l     F .text	0000002e __metal_driver_sifive_uart0_clock
2040506c l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20405096 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
204050c0 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
204052b2 l     F .text	000000d8 pre_rate_change_callback_func
2040538a l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20405600 l       .text	00000000 IRQ_0
20405604 l       .text	00000000 IRQ_1
20405608 l       .text	00000000 IRQ_2
2040560c l       .text	00000000 IRQ_3
20405610 l       .text	00000000 IRQ_4
20405614 l       .text	00000000 IRQ_5
20405618 l       .text	00000000 IRQ_6
2040561c l       .text	00000000 IRQ_7
20405620 l       .text	00000000 IRQ_8
20405624 l       .text	00000000 IRQ_9
20405628 l       .text	00000000 IRQ_10
2040562c l       .text	00000000 IRQ_11
20405630 l       .text	00000000 IRQ_12
20405634 l       .text	00000000 IRQ_13
20405638 l       .text	00000000 IRQ_14
2040563c l       .text	00000000 IRQ_15
20405640 l       .text	00000000 IRQ_LC0
20405644 l       .text	00000000 IRQ_LC1
20405648 l       .text	00000000 IRQ_LC2
2040564c l       .text	00000000 IRQ_LC3
20405650 l       .text	00000000 IRQ_LC4
20405654 l       .text	00000000 IRQ_LC5
20405658 l       .text	00000000 IRQ_LC6
2040565c l       .text	00000000 IRQ_LC7
20405660 l       .text	00000000 IRQ_LC8
20405664 l       .text	00000000 IRQ_LC9
20405668 l       .text	00000000 IRQ_LC10
2040566c l       .text	00000000 IRQ_LC11
20405670 l       .text	00000000 IRQ_LC12
20405674 l       .text	00000000 IRQ_LC13
20405678 l       .text	00000000 IRQ_LC14
2040567c l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405680 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000fc0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20405cd4 l       .init_array	00000000 __fini_array_end
20405cd4 l       .init_array	00000000 __fini_array_start
20405cd4 l       .init_array	00000000 __init_array_end
20405cd0 l       .init_array	00000000 __preinit_array_end
20405cd0 l       .init_array	00000000 __init_array_start
20405cd0 l       .init_array	00000000 __preinit_array_start
2040094c g     F .text	0000002c putchar
20405cac g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
20401834 g     F .text	00000030 _isatty_r
204030be  w    F .text	00000092 metal_lc4_interrupt_vector_handler
204009fa g     F .text	000000da _puts_r
20401864 g     F .text	00000034 _lseek_r
20405212 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
20402536 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
2040302c  w    F .text	00000092 metal_lc3_interrupt_vector_handler
2040387e g     F .text	00000038 __metal_valid_interrupt_id
20400908 g     F .text	00000044 printf
20403ca4 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80001f08 g       .data	00000000 __global_pointer$
2040548c g     F .text	00000054 _metal_clock_append_to_callbacks
20404208 g     F .text	00000038 __metal_plic0_complete_interrupt
20403afe g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20401762 g     F .text	00000036 __sseek
20400f16 g     F .text	0000006a __sinit
20400ae2 g     F .text	000000c0 __swbuf_r
20400ed2 g     F .text	00000044 __sfmoreglue
204018b4 g     F .text	00000002 __malloc_unlock
20405566 g     F .text	0000002a metal_cpu_get
800016e8 g     O .data	00000020 __metal_dt_serial_10013000
20404b98 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20405990 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
800027b8 g       .bss	00000000 metal_segment_bss_target_end
2040222a g     F .text	0000009a __metal_clint0_mtime_get
204040aa g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20404948 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
20401e4a g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
2040512a g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80001730 g       .bss	00000000 metal_segment_bss_target_start
204022c4 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401802 g     F .text	00000032 _fstat_r
20404de8 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
800027b4 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
204054e0 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20403398  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405be4 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20405ba4 g     O .rodata	00000040 __metal_driver_vtable_cpu
20402146 g     F .text	0000002e metal_uart_set_baud_rate
204053ba g     F .text	000000d2 __metal_driver_sifive_uart0_init
20403d38 g     F .text	00000072 __metal_driver_cpu_mcycle_get
80002bb8 g       .heap	00000000 metal_segment_heap_target_start
20400ec8 g     F .text	0000000a _cleanup_r
80001720 g     O .data	00000004 __metal_dt_cpu_0
20403306  w    F .text	00000092 metal_lc8_interrupt_vector_handler
20400ad4 g     F .text	0000000e puts
204035e0  w    F .text	00000092 metal_lc13_interrupt_vector_handler
20402a74 g     F .text	00000018 __metal_default_exception_handler
20401cba g     F .text	00000026 _fstat
2040285e g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
204042a4 g     F .text	00000062 __metal_plic0_set_priority
20403cc0 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
2040290a g     F .text	0000002c __metal_driver_cpu_get
20405b58 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
20402968 g     F .text	00000018 __metal_interrupt_global_disable
20403274  w    F .text	00000092 metal_lc7_interrupt_vector_handler
2040342a  w    F .text	00000092 metal_lc10_interrupt_vector_handler
204016b4 g     F .text	00000030 _sbrk_r
204046bc g     F .text	00000048 __metal_driver_riscv_plic0_disable
20403972 g     F .text	0000004e __metal_exception_register
20401c64 g     F .text	00000034 _read_r
20403ecc g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20404a2a g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20402b60 g     F .text	00000064 __metal_default_sw_handler
20405510 g     F .text	00000030 metal_clock_register_post_rate_change_callback
204050ea g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
20401ce0 g     F .text	00000020 _isatty
20404af0 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80001728 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000170c g     O .data	00000004 _global_impure_ptr
20402bc4  w    F .text	0000008e metal_timer_interrupt_vector_handler
20401eba g     F .text	0000006a __libc_init_array
20404a6a g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
204034bc  w    F .text	00000092 metal_lc11_interrupt_vector_handler
20403c4c g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
20401d54 g     F .text	0000007e _sbrk
204049e4 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
2040017c g     F .init	00000002 _init
204029ca g     F .text	0000001a __metal_interrupt_timer_disable
20404be2 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20403f82 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20405c70 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20404b30 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20401e82 g     F .text	00000038 __libc_fini_array
20404f70 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403f0c g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20402a1c g     F .text	0000002c __metal_interrupt_local_enable
2040282a g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20402078 g     F .text	0000002c metal_tty_putc
204043c6 g     F .text	00000018 __metal_plic0_default_handler
20400978 g     F .text	00000082 _putc_r
80001020 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
204058e0 g     O .rodata	00000020 __sf_fake_stderr
20402a00 g     F .text	0000001c __metal_interrupt_external_disable
20405108 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20403d1c g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
204039c0 g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
204013da g     F .text	00000042 __sfputs_r
20404064 g     F .text	00000046 __metal_driver_cpu_exception_register
20402980 g     F .text	00000018 __metal_interrupt_software_enable
20402f08  w    F .text	00000092 metal_lc1_interrupt_vector_handler
20401898 g     F .text	0000001a memchr
20401226 g     F .text	000000ac _free_r
8000173c g     O .bss	00000004 _global_atexit
20403796 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401fb0 g     F .text	000000c8 __call_exitprocs
80002bb8 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
20401d00 g     F .text	0000002a _lseek
20404044 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
204040d8 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
204029e4 g     F .text	0000001c __metal_interrupt_external_enable
20401f24 g     F .text	0000008c __register_exitproc
2040515c g     F .text	00000040 __metal_driver_sifive_uart0_putc
2040446e g     F .text	00000144 __metal_driver_riscv_plic0_init
20404674 g     F .text	00000048 __metal_driver_riscv_plic0_enable
204049b8 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20400200 g     F .text	000000b4 printC
204031e2  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20402936 g     F .text	0000001a __metal_myhart_id
20404f90 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
2040051c g     F .text	00000076 HASH
20402ad2  w    F .text	0000008e metal_software_interrupt_vector_handler
20403c78 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
204017d2 g     F .text	00000030 _close_r
204051f2 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20402418 g     F .text	000000da __metal_driver_riscv_clint0_register
80001718 g     O .data	00000008 __metal_dt_clint_2000000
20400ba2 g     F .text	00000110 __swsetup_r
20400f80 g     F .text	0000009e __sfp
204016e4 g     F .text	00000030 __sread
20404908 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
2040017e  w    F .init	00000000 secondary_main
20402aa4  w    F .text	0000002e metal_interrupt_vector_handler
204018b2 g     F .text	00000002 __malloc_lock
20400dfc g     F .text	00000064 _fflush_r
20404278 g     F .text	0000002c __metal_plic0_get_threshold
20405900 g     O .rodata	00000020 __sf_fake_stdin
204038b6 g     F .text	000000bc __metal_local_interrupt_enable
204026f4 g     F .text	00000136 __metal_driver_riscv_clint0_command_request
2040117e g     F .text	000000a8 memset
20403150  w    F .text	00000092 metal_lc5_interrupt_vector_handler
20400592 g     F .text	00000376 main
80001730 g       .data	00000000 metal_segment_data_target_end
20403f20 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20403fe4 g     F .text	00000060 __metal_driver_cpu_get_msip
204055aa g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
204040f6 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
204041da g     F .text	0000002e __metal_plic0_claim_interrupt
20401798 g     F .text	00000006 __sclose
2040354e  w    F .text	00000092 metal_lc12_interrupt_vector_handler
204012d2 g     F .text	000000de _malloc_r
2040251a g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
20403daa g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20405590 g     F .text	0000001a metal_cpu_get_current_hartid
204003d4 g     F .text	00000148 AEAD_DEC
20405600 g       .text	00000000 __metal_vector_table
20405cd8 g       *ABS*	00000000 metal_segment_itim_source_start
80001714  w    O .data	00000004 __metal_cpu_table
80001030 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
2040017c g     F .init	00000002 _fini
20400908 g     F .text	00000044 iprintf
20402950 g     F .text	00000018 __metal_interrupt_global_enable
20401e40 g     F .text	0000000a atexit
204020a4 g     F .text	00000026 metal_tty_putc_raw
2040179e g     F .text	00000034 _write_r
204029b0 g     F .text	0000001a __metal_interrupt_timer_enable
2040519c g     F .text	00000056 __metal_driver_sifive_uart0_getc
2040263c g     F .text	000000b8 __metal_driver_riscv_clint0_disable
204018b6 g     F .text	0000010c _printf_common
80001708 g     O .data	00000004 _impure_ptr
20403e56 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20400cb2 g     F .text	0000014a __sflush_r
204056ae g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
2040258a g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405cd8 g       *ABS*	00000000 metal_segment_data_source_start
800033b8 g       .heap	00000000 metal_segment_heap_target_end
204037e6 g     F .text	00000098 __metal_controller_interrupt_vector
800013e8 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
2040108a g     F .text	00000058 __swhatbuf_r
20404aaa g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20402c52 g     F .text	00000066 __metal_default_timer_handler
20401dd2 g     F .text	0000006e _write
204043de g     F .text	00000090 __metal_plic0_handler
20402f9a  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403704  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20405540 g     F .text	00000026 metal_cpu_interrupt_controller
20401714 g     F .text	0000004e __swrite
20401e56 g     F .text	0000002c exit
2040141c g     F .text	00000298 _vfiprintf_r
2040101e g     F .text	0000006c _fwalk_reent
204056cc g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20405920 g     O .rodata	00000020 __sf_fake_stdout
80001724 g     O .data	00000004 __metal_dt_gpio_10012000
20402a8c g     F .text	00000018 __metal_default_interrupt_handler
20402118 g     F .text	0000002e metal_uart_putc
20401d2a g     F .text	0000002a _read
2040498e g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402d00 g     F .text	00000150 __metal_exception_handler
20402e76  w    F .text	00000092 metal_lc0_interrupt_vector_handler
204056ee g     F .text	00000012 _exit
20403df0 g     F .text	00000066 __metal_driver_cpu_mtime_get
204010e2 g     F .text	0000009c __smakebuf_r
204024f2 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
204019c2 g     F .text	000002a2 _printf_i
80001738 g     O .bss	00000004 __malloc_sbrk_start
20403672  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20402390 g     F .text	00000088 __metal_driver_riscv_clint0_init
80001734 g     O .bss	00000004 __malloc_free_list
204002b4 g     F .text	00000120 AEAD_ENC
2040141c g     F .text	00000298 _vfprintf_r
20403ee2 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
2040433a g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20403ef6 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20402a48 g     F .text	0000002c __metal_interrupt_local_disable
20402998 g     F .text	00000018 __metal_interrupt_software_disable
20404306 g     F .text	00000034 __metal_plic0_get_priority
204020ec g     F .text	0000002c metal_uart_init
20404240 g     F .text	00000038 __metal_plic0_set_threshold
20401c98 g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
204045b2 g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc02197          	auipc	gp,0x5fc02
20400004:	f0818193          	addi	gp,gp,-248 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc02197          	auipc	gp,0x5fc02
20400084:	e8818193          	addi	gp,gp,-376 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	5fc03117          	auipc	sp,0x5fc03
2040008c:	b3010113          	addi	sp,sp,-1232 # 80002bb8 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
20400090:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
20400092:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400096:	00a28563          	beq	t0,a0,204000a0 <_start+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
2040009a:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
2040009c:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009e:	bfe5                	j	20400096 <_start+0x18>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
204000a0:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a4:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a8:	08551b63          	bne	a0,t0,2040013e <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000ac:	00006297          	auipc	t0,0x6
204000b0:	c2c28293          	addi	t0,t0,-980 # 20405cd8 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b4:	5fc00317          	auipc	t1,0x5fc00
204000b8:	f4c30313          	addi	t1,t1,-180 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000bc:	82818393          	addi	t2,gp,-2008 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000c0:	00628c63          	beq	t0,t1,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c4:	00735a63          	bge	t1,t2,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000cc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ce:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000d2:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d4:	fe734ae3          	blt	t1,t2,204000c8 <_start+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d8:	00006297          	auipc	t0,0x6
204000dc:	c0028293          	addi	t0,t0,-1024 # 20405cd8 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000e0:	e7c00317          	auipc	t1,0xe7c00
204000e4:	f2030313          	addi	t1,t1,-224 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e8:	e7c00397          	auipc	t2,0xe7c00
204000ec:	f1838393          	addi	t2,t2,-232 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000f0:	00628c63          	beq	t0,t1,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f4:	00735a63          	bge	t1,t2,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000fc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fe:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
20400102:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400104:	fe734ae3          	blt	t1,t2,204000f8 <_start+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400108:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
2040010c:	5fc01317          	auipc	t1,0x5fc01
20400110:	62430313          	addi	t1,t1,1572 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400114:	5fc02397          	auipc	t2,0x5fc02
20400118:	6a438393          	addi	t2,t2,1700 # 800027b8 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
2040011c:	00735763          	bge	t1,t2,2040012a <_start+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400120:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
20400124:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
20400126:	fe734de3          	blt	t1,t2,20400120 <_start+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2040012a:	c211                	beqz	a2,2040012e <_start+0xb0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
2040012c:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
2040012e:	00002517          	auipc	a0,0x2
20400132:	d5450513          	addi	a0,a0,-684 # 20401e82 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
20400136:	50b010ef          	jal	ra,20401e40 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
2040013a:	581010ef          	jal	ra,20401eba <__libc_init_array>

2040013e <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
2040013e:	3f0d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400140:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
20400144:	00010737          	lui	a4,0x10
20400148:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
2040014c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
2040014e:	cb89                	beqz	a5,20400160 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400150:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
20400154:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
20400156:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400158:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
2040015c:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400160:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
20400162:	00006597          	auipc	a1,0x6
20400166:	81a58593          	addi	a1,a1,-2022 # 2040597c <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
2040016a:	00006617          	auipc	a2,0x6
2040016e:	81660613          	addi	a2,a2,-2026 # 20405980 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
20400172:	2031                	jal	2040017e <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
20400174:	4e3010ef          	jal	ra,20401e56 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400178:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
2040017a:	8082                	ret

2040017c <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
2040017c:	8082                	ret

2040017e <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
2040017e:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400180:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
20400182:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
20400186:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
2040018a:	00628563          	beq	t0,t1,20400194 <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
2040018e:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
20400192:	bff5                	j	2040018e <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
20400194:	2efd                	jal	20400592 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400196:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400198:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
2040019a:	8082                	ret

Disassembly of section .text:

20400200 <printC>:
printC():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:37
             unsigned *d_addr, unsigned *nonce_addr,
             unsigned *key_addr, unsigned *tag_addr);
unsigned HASH(unsigned *m_addr, unsigned m_len,
             unsigned *c_addr );

void printC(unsigned *arr, unsigned a_len, int cipher, int del) {
20400200:	7179                	addi	sp,sp,-48
20400202:	d606                	sw	ra,44(sp)
20400204:	d422                	sw	s0,40(sp)
20400206:	1800                	addi	s0,sp,48
20400208:	fca42e23          	sw	a0,-36(s0)
2040020c:	fcb42c23          	sw	a1,-40(s0)
20400210:	fcc42a23          	sw	a2,-44(s0)
20400214:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:38
    int len = (cipher) ? a_len + 4 : a_len;
20400218:	fd442783          	lw	a5,-44(s0)
2040021c:	c789                	beqz	a5,20400226 <printC+0x26>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:38 (discriminator 1)
2040021e:	fd842783          	lw	a5,-40(s0)
20400222:	0791                	addi	a5,a5,4
20400224:	a019                	j	2040022a <printC+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:38 (discriminator 2)
20400226:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:38 (discriminator 4)
2040022a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:39 (discriminator 4)
    len = (len % 8 == 0)? len : len + 1;
2040022e:	fe842783          	lw	a5,-24(s0)
20400232:	8b9d                	andi	a5,a5,7
20400234:	c789                	beqz	a5,2040023e <printC+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:39 (discriminator 1)
20400236:	fe842783          	lw	a5,-24(s0)
2040023a:	0785                	addi	a5,a5,1
2040023c:	a019                	j	20400242 <printC+0x42>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:39 (discriminator 2)
2040023e:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:39 (discriminator 4)
20400242:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:40 (discriminator 4)
    for (int i = 0; i < len; i++) {
20400246:	fe042623          	sw	zero,-20(s0)
2040024a:	a0b9                	j	20400298 <printC+0x98>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:41
        if (i % 2 == 0) {
2040024c:	fec42783          	lw	a5,-20(s0)
20400250:	8b85                	andi	a5,a5,1
20400252:	e781                	bnez	a5,2040025a <printC+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:42
            printf("\n");
20400254:	4529                	li	a0,10
20400256:	6f6000ef          	jal	ra,2040094c <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:44
        }
        printf("%08x ", arr[i], i);
2040025a:	fec42783          	lw	a5,-20(s0)
2040025e:	078a                	slli	a5,a5,0x2
20400260:	fdc42703          	lw	a4,-36(s0)
20400264:	97ba                	add	a5,a5,a4
20400266:	439c                	lw	a5,0(a5)
20400268:	fec42603          	lw	a2,-20(s0)
2040026c:	85be                	mv	a1,a5
2040026e:	204057b7          	lui	a5,0x20405
20400272:	70078513          	addi	a0,a5,1792 # 20405700 <_exit+0x12>
20400276:	2d49                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:45
        if (del) {
20400278:	fd042783          	lw	a5,-48(s0)
2040027c:	cb89                	beqz	a5,2040028e <printC+0x8e>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:46
            arr[i] = 0;
2040027e:	fec42783          	lw	a5,-20(s0)
20400282:	078a                	slli	a5,a5,0x2
20400284:	fdc42703          	lw	a4,-36(s0)
20400288:	97ba                	add	a5,a5,a4
2040028a:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:40 (discriminator 2)
    for (int i = 0; i < len; i++) {
2040028e:	fec42783          	lw	a5,-20(s0)
20400292:	0785                	addi	a5,a5,1
20400294:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:40 (discriminator 1)
20400298:	fec42703          	lw	a4,-20(s0)
2040029c:	fe842783          	lw	a5,-24(s0)
204002a0:	faf746e3          	blt	a4,a5,2040024c <printC+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:49
        }
    }
    printf("\n");
204002a4:	4529                	li	a0,10
204002a6:	6a6000ef          	jal	ra,2040094c <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:50
}
204002aa:	0001                	nop
204002ac:	50b2                	lw	ra,44(sp)
204002ae:	5422                	lw	s0,40(sp)
204002b0:	6145                	addi	sp,sp,48
204002b2:	8082                	ret

204002b4 <AEAD_ENC>:
AEAD_ENC():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:58
    return mlenU32;
}
unsigned AEAD_ENC(unsigned *ad_addr, unsigned ad_len,
             unsigned *p_addr, unsigned p_len,
             unsigned *c_addr, unsigned *nonce_addr,
             unsigned *key_addr) {
204002b4:	7139                	addi	sp,sp,-64
204002b6:	de06                	sw	ra,60(sp)
204002b8:	dc22                	sw	s0,56(sp)
204002ba:	0080                	addi	s0,sp,64
204002bc:	fca42e23          	sw	a0,-36(s0)
204002c0:	fcb42c23          	sw	a1,-40(s0)
204002c4:	fcc42a23          	sw	a2,-44(s0)
204002c8:	fcd42823          	sw	a3,-48(s0)
204002cc:	fce42623          	sw	a4,-52(s0)
204002d0:	fcf42423          	sw	a5,-56(s0)
204002d4:	fd042223          	sw	a6,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:59
    unsigned rd = 0;
204002d8:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:60
    printf("Init Enc\n");
204002dc:	204057b7          	lui	a5,0x20405
204002e0:	70878513          	addi	a0,a5,1800 # 20405708 <_exit+0x1a>
204002e4:	7f0000ef          	jal	ra,20400ad4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:61
    asm volatile("fence");
204002e8:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:62
    ROCC_INSTRUCTION_DS(0, rd, nonce_addr, Enc_Set_Nonce);
204002ec:	fc842783          	lw	a5,-56(s0)
204002f0:	85be                	mv	a1,a5
204002f2:	2805e50b          	0x2805e50b
204002f6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:63
    asm volatile("fence":: : "memory");
204002fa:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:64
    printf("Set Nonce finish : %08x \n", rd);
204002fe:	fec42583          	lw	a1,-20(s0)
20400302:	204057b7          	lui	a5,0x20405
20400306:	71478513          	addi	a0,a5,1812 # 20405714 <_exit+0x26>
2040030a:	2bfd                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:67


    asm volatile("fence");
2040030c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:68
    ROCC_INSTRUCTION_DS(0, rd, key_addr, Enc_Set_Key);
20400310:	fc442783          	lw	a5,-60(s0)
20400314:	85be                	mv	a1,a5
20400316:	2a05e50b          	0x2a05e50b
2040031a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:69
    asm volatile("fence":: : "memory");
2040031e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:70
    printf("Set Key  finish : %07x \n", rd);
20400322:	fec42583          	lw	a1,-20(s0)
20400326:	204057b7          	lui	a5,0x20405
2040032a:	73078513          	addi	a0,a5,1840 # 20405730 <_exit+0x42>
2040032e:	2be9                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:72

    asm volatile("fence");
20400330:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:73
    ROCC_INSTRUCTION_DSS(0, rd, p_addr, p_len, Enc_Set_P);
20400334:	fd442783          	lw	a5,-44(s0)
20400338:	85be                	mv	a1,a5
2040033a:	fd042603          	lw	a2,-48(s0)
2040033e:	22c5f50b          	0x22c5f50b
20400342:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:74
    asm volatile("fence":: : "memory");
20400346:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:75
    printf("Set Plain text finish length : %08x \n", rd);
2040034a:	fec42583          	lw	a1,-20(s0)
2040034e:	204057b7          	lui	a5,0x20405
20400352:	74c78513          	addi	a0,a5,1868 # 2040574c <_exit+0x5e>
20400356:	2b4d                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:77

    asm volatile("fence");
20400358:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:78
    ROCC_INSTRUCTION_DSS(0, rd, ad_addr, ad_len, Enc_Set_AD);
2040035c:	fdc42783          	lw	a5,-36(s0)
20400360:	85be                	mv	a1,a5
20400362:	fd842603          	lw	a2,-40(s0)
20400366:	24c5f50b          	0x24c5f50b
2040036a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:79
    asm volatile("fence":: : "memory");
2040036e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:80
    printf("Set Associated Data finish length: %08x \n", rd);
20400372:	fec42583          	lw	a1,-20(s0)
20400376:	204057b7          	lui	a5,0x20405
2040037a:	77478513          	addi	a0,a5,1908 # 20405774 <_exit+0x86>
2040037e:	2369                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:82

    asm volatile("fence");
20400380:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:83
    ROCC_INSTRUCTION_DS(0, rd, c_addr, Enc_Set_C_Tag);
20400384:	fcc42783          	lw	a5,-52(s0)
20400388:	85be                	mv	a1,a5
2040038a:	2605e50b          	0x2605e50b
2040038e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:84
    asm volatile("fence":: : "memory");
20400392:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:85
    printf("Set Dec addr: %08x \n", rd);
20400396:	fec42583          	lw	a1,-20(s0)
2040039a:	204057b7          	lui	a5,0x20405
2040039e:	7a078513          	addi	a0,a5,1952 # 204057a0 <_exit+0xb2>
204003a2:	239d                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:87

    asm volatile("fence");
204003a4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:88
    ROCC_INSTRUCTION_DS(0, rd, rd, Enc_Init);
204003a8:	fec42583          	lw	a1,-20(s0)
204003ac:	2c05e50b          	0x2c05e50b
204003b0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:89
    asm volatile("fence":: : "memory");
204003b4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:90
    printf("Finish AEAD Dec %08x \n", rd);
204003b8:	fec42583          	lw	a1,-20(s0)
204003bc:	204057b7          	lui	a5,0x20405
204003c0:	7b878513          	addi	a0,a5,1976 # 204057b8 <_exit+0xca>
204003c4:	2391                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:91
    return rd;
204003c6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:92
}
204003ca:	853e                	mv	a0,a5
204003cc:	50f2                	lw	ra,60(sp)
204003ce:	5462                	lw	s0,56(sp)
204003d0:	6121                	addi	sp,sp,64
204003d2:	8082                	ret

204003d4 <AEAD_DEC>:
AEAD_DEC():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:97

unsigned AEAD_DEC(unsigned *ad_addr, unsigned ad_len,
             unsigned *c_addr, unsigned c_len,
             unsigned *d_addr, unsigned *nonce_addr,
             unsigned *key_addr, unsigned *tag_addr){
204003d4:	7139                	addi	sp,sp,-64
204003d6:	de06                	sw	ra,60(sp)
204003d8:	dc22                	sw	s0,56(sp)
204003da:	0080                	addi	s0,sp,64
204003dc:	fca42e23          	sw	a0,-36(s0)
204003e0:	fcb42c23          	sw	a1,-40(s0)
204003e4:	fcc42a23          	sw	a2,-44(s0)
204003e8:	fcd42823          	sw	a3,-48(s0)
204003ec:	fce42623          	sw	a4,-52(s0)
204003f0:	fcf42423          	sw	a5,-56(s0)
204003f4:	fd042223          	sw	a6,-60(s0)
204003f8:	fd142023          	sw	a7,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:98
    unsigned rd = 0;
204003fc:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:99
    printf("Init DEC\n");
20400400:	204057b7          	lui	a5,0x20405
20400404:	7d078513          	addi	a0,a5,2000 # 204057d0 <_exit+0xe2>
20400408:	6cc000ef          	jal	ra,20400ad4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:100
    asm volatile("fence");
2040040c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:101
    ROCC_INSTRUCTION_DS(0, rd, nonce_addr, Enc_Set_Nonce);
20400410:	fc842783          	lw	a5,-56(s0)
20400414:	85be                	mv	a1,a5
20400416:	2805e50b          	0x2805e50b
2040041a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:102
    asm volatile("fence":: : "memory");
2040041e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:103
    printf("Set Nonce finish : %08x \n", rd);
20400422:	fec42583          	lw	a1,-20(s0)
20400426:	204057b7          	lui	a5,0x20405
2040042a:	71478513          	addi	a0,a5,1812 # 20405714 <_exit+0x26>
2040042e:	29e9                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:105

    asm volatile("fence");
20400430:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:106
    ROCC_INSTRUCTION_DS(0, rd, tag_addr, Dec_Load_Tag);
20400434:	fc042783          	lw	a5,-64(s0)
20400438:	85be                	mv	a1,a5
2040043a:	2e05e50b          	0x2e05e50b
2040043e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:107
    asm volatile("fence":: : "memory");
20400442:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:108
    printf("Load Tag finish : %08x \n", rd);
20400446:	fec42583          	lw	a1,-20(s0)
2040044a:	204057b7          	lui	a5,0x20405
2040044e:	7dc78513          	addi	a0,a5,2012 # 204057dc <_exit+0xee>
20400452:	295d                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:110

    asm volatile("fence");
20400454:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:111
    ROCC_INSTRUCTION_DS(0, rd, key_addr, Enc_Set_Key);
20400458:	fc442783          	lw	a5,-60(s0)
2040045c:	85be                	mv	a1,a5
2040045e:	2a05e50b          	0x2a05e50b
20400462:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:112
    asm volatile("fence":: : "memory");
20400466:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:113
    printf("Set Key  finish : %07x \n", rd);
2040046a:	fec42583          	lw	a1,-20(s0)
2040046e:	204057b7          	lui	a5,0x20405
20400472:	73078513          	addi	a0,a5,1840 # 20405730 <_exit+0x42>
20400476:	2949                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:115

    asm volatile("fence");
20400478:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:116
    ROCC_INSTRUCTION_DSS(0, rd, c_addr, c_len, Enc_Set_P);
2040047c:	fd442783          	lw	a5,-44(s0)
20400480:	85be                	mv	a1,a5
20400482:	fd042603          	lw	a2,-48(s0)
20400486:	22c5f50b          	0x22c5f50b
2040048a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:117
    asm volatile("fence":: : "memory");
2040048e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:118
    printf("Set Plain text finish length : %08x \n", rd);
20400492:	fec42583          	lw	a1,-20(s0)
20400496:	204057b7          	lui	a5,0x20405
2040049a:	74c78513          	addi	a0,a5,1868 # 2040574c <_exit+0x5e>
2040049e:	21ad                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:120

    asm volatile("fence");
204004a0:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:121
    ROCC_INSTRUCTION_DSS(0, rd, ad_addr, ad_len, Enc_Set_AD);
204004a4:	fdc42783          	lw	a5,-36(s0)
204004a8:	85be                	mv	a1,a5
204004aa:	fd842603          	lw	a2,-40(s0)
204004ae:	24c5f50b          	0x24c5f50b
204004b2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:122
    asm volatile("fence":: : "memory");
204004b6:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:123
    printf("Set Associated Data finish length: %08x \n", rd);
204004ba:	fec42583          	lw	a1,-20(s0)
204004be:	204057b7          	lui	a5,0x20405
204004c2:	77478513          	addi	a0,a5,1908 # 20405774 <_exit+0x86>
204004c6:	2189                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:125

    asm volatile("fence");
204004c8:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:126
    ROCC_INSTRUCTION_DS(0, rd, d_addr, Enc_Set_C_Tag);
204004cc:	fcc42783          	lw	a5,-52(s0)
204004d0:	85be                	mv	a1,a5
204004d2:	2605e50b          	0x2605e50b
204004d6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:127
    asm volatile("fence":: : "memory");
204004da:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:128
    printf("Set Dec addr: %08x \n", rd);
204004de:	fec42583          	lw	a1,-20(s0)
204004e2:	204057b7          	lui	a5,0x20405
204004e6:	7a078513          	addi	a0,a5,1952 # 204057a0 <_exit+0xb2>
204004ea:	2939                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:130

    asm volatile("fence");
204004ec:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:131
    ROCC_INSTRUCTION_DS(0, rd, rd, Dec_Init);
204004f0:	fec42583          	lw	a1,-20(s0)
204004f4:	3005e50b          	0x3005e50b
204004f8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:132
    asm volatile("fence":: : "memory");
204004fc:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:133
    printf("Finish AEAD Dec %08x \n", rd);
20400500:	fec42583          	lw	a1,-20(s0)
20400504:	204057b7          	lui	a5,0x20405
20400508:	7b878513          	addi	a0,a5,1976 # 204057b8 <_exit+0xca>
2040050c:	2ef5                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:134
    return rd;
2040050e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:135
}
20400512:	853e                	mv	a0,a5
20400514:	50f2                	lw	ra,60(sp)
20400516:	5462                	lw	s0,56(sp)
20400518:	6121                	addi	sp,sp,64
2040051a:	8082                	ret

2040051c <HASH>:
HASH():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:137
unsigned HASH(unsigned *m_addr, unsigned m_len,
             unsigned *h_addr ){
2040051c:	7179                	addi	sp,sp,-48
2040051e:	d606                	sw	ra,44(sp)
20400520:	d422                	sw	s0,40(sp)
20400522:	1800                	addi	s0,sp,48
20400524:	fca42e23          	sw	a0,-36(s0)
20400528:	fcb42c23          	sw	a1,-40(s0)
2040052c:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:139
    unsigned rd;
    printf("Init Hash\n");
20400530:	204057b7          	lui	a5,0x20405
20400534:	7f878513          	addi	a0,a5,2040 # 204057f8 <_exit+0x10a>
20400538:	2b71                	jal	20400ad4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:140
     asm volatile("fence");
2040053a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:141
    ROCC_INSTRUCTION_DSS(0, rd, m_addr, m_len, Hash_Set_M);
2040053e:	fdc42783          	lw	a5,-36(s0)
20400542:	85be                	mv	a1,a5
20400544:	fd842603          	lw	a2,-40(s0)
20400548:	62c5f50b          	0x62c5f50b
2040054c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:142
    asm volatile("fence":: : "memory");
20400550:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:143
    printf("Set M : %08x \n", rd);
20400554:	fec42583          	lw	a1,-20(s0)
20400558:	204067b7          	lui	a5,0x20406
2040055c:	80478513          	addi	a0,a5,-2044 # 20405804 <_exit+0x116>
20400560:	2665                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:145

    asm volatile("fence");
20400562:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:146
    ROCC_INSTRUCTION_DS(0, rd, h_addr, Hash_Init);
20400566:	fd442783          	lw	a5,-44(s0)
2040056a:	85be                	mv	a1,a5
2040056c:	6405e50b          	0x6405e50b
20400570:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:147
    asm volatile("fence":: : "memory");
20400574:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:148
    printf(" Finish Hash: %08x \n", rd);
20400578:	fec42583          	lw	a1,-20(s0)
2040057c:	204067b7          	lui	a5,0x20406
20400580:	81478513          	addi	a0,a5,-2028 # 20405814 <_exit+0x126>
20400584:	2651                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:149
    return 0;
20400586:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:150
}
20400588:	853e                	mv	a0,a5
2040058a:	50b2                	lw	ra,44(sp)
2040058c:	5422                	lw	s0,40(sp)
2040058e:	6145                	addi	sp,sp,48
20400590:	8082                	ret

20400592 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:7
#include "../RoCCcommon/rocc.h"
#include "AEAD_HW.h"

#include <stdio.h>

int main(void) {
20400592:	7179                	addi	sp,sp,-48
20400594:	d606                	sw	ra,44(sp)
20400596:	d422                	sw	s0,40(sp)
20400598:	1800                	addi	s0,sp,48
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:8
    unsigned plain_len = 32;
2040059a:	02000793          	li	a5,32
2040059e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:9
    unsigned asso_len = 32; /// CReo que asignaste a memoria
204005a2:	02000793          	li	a5,32
204005a6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:10
    unsigned plain_len_int = plain_len / 4;
204005aa:	fec42783          	lw	a5,-20(s0)
204005ae:	8389                	srli	a5,a5,0x2
204005b0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11
    plain_len_int = (plain_len % 4 == 0) ? plain_len_int : plain_len_int + 1;
204005b4:	fec42783          	lw	a5,-20(s0)
204005b8:	8b8d                	andi	a5,a5,3
204005ba:	c789                	beqz	a5,204005c4 <main+0x32>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11 (discriminator 1)
204005bc:	fe442783          	lw	a5,-28(s0)
204005c0:	0785                	addi	a5,a5,1
204005c2:	a019                	j	204005c8 <main+0x36>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11 (discriminator 2)
204005c4:	fe442783          	lw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11 (discriminator 4)
204005c8:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:27 (discriminator 4)

    static unsigned *tag_addr;


    // printf("Init AEAD \n");
    printf("Init Hola2\n");
204005cc:	204067b7          	lui	a5,0x20406
204005d0:	82c78513          	addi	a0,a5,-2004 # 2040582c <_exit+0x13e>
204005d4:	2301                	jal	20400ad4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:28 (discriminator 4)
    printf("Ad addr = %08x\n", asso_text);
204005d6:	800007b7          	lui	a5,0x80000
204005da:	00078593          	mv	a1,a5
204005de:	204067b7          	lui	a5,0x20406
204005e2:	83878513          	addi	a0,a5,-1992 # 20405838 <_exit+0x14a>
204005e6:	260d                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:29 (discriminator 4)
    printf("Pl addr = %08x\n", plain_text);
204005e8:	800007b7          	lui	a5,0x80000
204005ec:	7d078593          	addi	a1,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd418>
204005f0:	204067b7          	lui	a5,0x20406
204005f4:	84878513          	addi	a0,a5,-1976 # 20405848 <_exit+0x15a>
204005f8:	2e01                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:30 (discriminator 4)
    printf("Ct addr = %08x\n", cipher_text);
204005fa:	800017b7          	lui	a5,0x80001
204005fe:	74078593          	addi	a1,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe388>
20400602:	204067b7          	lui	a5,0x20406
20400606:	85878513          	addi	a0,a5,-1960 # 20405858 <_exit+0x16a>
2040060a:	2cfd                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:31 (discriminator 4)
    printf("Ke addr = %08x\n", Key);
2040060c:	800017b7          	lui	a5,0x80001
20400610:	fa078593          	addi	a1,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdbe8>
20400614:	204067b7          	lui	a5,0x20406
20400618:	86878513          	addi	a0,a5,-1944 # 20405868 <_exit+0x17a>
2040061c:	24f5                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:32 (discriminator 4)
    printf("Np addr = %08x\n", Nonce);
2040061e:	800017b7          	lui	a5,0x80001
20400622:	fb078593          	addi	a1,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdbf8>
20400626:	204067b7          	lui	a5,0x20406
2040062a:	87878513          	addi	a0,a5,-1928 # 20405878 <_exit+0x18a>
2040062e:	2ce9                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:33 (discriminator 4)
    printf("hash addr = %08x\n", hash);
20400630:	01818593          	addi	a1,gp,24 # 80001f20 <hash.2682>
20400634:	204067b7          	lui	a5,0x20406
20400638:	88878513          	addi	a0,a5,-1912 # 20405888 <_exit+0x19a>
2040063c:	24f1                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:35 (discriminator 4)
    unsigned start, end, HWcycles;
    int rd = 0;
2040063e:	fe042023          	sw	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:37 (discriminator 4)
    // RoCC
    write_csr(mstatus, MSTATUS_XS); // Always initialize the CSR such that the accelerator is recognized
20400642:	67e1                	lui	a5,0x18
20400644:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:42 (discriminator 4)
    // start = rdcycle();
    // HASH(plain_text,plain_len,hash);
    // end = rdcycle();
    /*printf("Totl time = %d cycles\n",HWcycles);*/
    printf("Init Hash\n");
20400648:	204057b7          	lui	a5,0x20405
2040064c:	7f878513          	addi	a0,a5,2040 # 204057f8 <_exit+0x10a>
20400650:	2151                	jal	20400ad4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:43 (discriminator 4)
    HASH(plain_text,plain_len,hash);
20400652:	01818613          	addi	a2,gp,24 # 80001f20 <hash.2682>
20400656:	fec42583          	lw	a1,-20(s0)
2040065a:	800007b7          	lui	a5,0x80000
2040065e:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd418>
20400662:	3d6d                	jal	2040051c <HASH>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:44 (discriminator 4)
    printf(" Finish Hash: %07x \n", rd);
20400664:	fe042583          	lw	a1,-32(s0)
20400668:	204067b7          	lui	a5,0x20406
2040066c:	89c78513          	addi	a0,a5,-1892 # 2040589c <_exit+0x1ae>
20400670:	2c61                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:45 (discriminator 4)
    printC(hash,9,0,1);
20400672:	4685                	li	a3,1
20400674:	4601                	li	a2,0
20400676:	45a5                	li	a1,9
20400678:	01818513          	addi	a0,gp,24 # 80001f20 <hash.2682>
2040067c:	3651                	jal	20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:47 (discriminator 4)

    printf("Init Hash\n");
2040067e:	204057b7          	lui	a5,0x20405
20400682:	7f878513          	addi	a0,a5,2040 # 204057f8 <_exit+0x10a>
20400686:	21b9                	jal	20400ad4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:48 (discriminator 4)
    HASH(plain_text,plain_len,hash);
20400688:	01818613          	addi	a2,gp,24 # 80001f20 <hash.2682>
2040068c:	fec42583          	lw	a1,-20(s0)
20400690:	800007b7          	lui	a5,0x80000
20400694:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd418>
20400698:	3551                	jal	2040051c <HASH>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:49 (discriminator 4)
    printf(" Finish Hash: %07x \n", rd);
2040069a:	fe042583          	lw	a1,-32(s0)
2040069e:	204067b7          	lui	a5,0x20406
204006a2:	89c78513          	addi	a0,a5,-1892 # 2040589c <_exit+0x1ae>
204006a6:	248d                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:50 (discriminator 4)
    printC(hash,9,0,1);
204006a8:	4685                	li	a3,1
204006aa:	4601                	li	a2,0
204006ac:	45a5                	li	a1,9
204006ae:	01818513          	addi	a0,gp,24 # 80001f20 <hash.2682>
204006b2:	36b9                	jal	20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:52 (discriminator 4)

    printf("First AEAD\n");
204006b4:	204067b7          	lui	a5,0x20406
204006b8:	8b478513          	addi	a0,a5,-1868 # 204058b4 <_exit+0x1c6>
204006bc:	2921                	jal	20400ad4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:53 (discriminator 4)
    plain_len = 32;
204006be:	02000793          	li	a5,32
204006c2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:54 (discriminator 4)
    asso_len = 32;
204006c6:	02000793          	li	a5,32
204006ca:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:56 (discriminator 4)

    AEAD_ENC(asso_text, asso_len, plain_text, plain_len, cipher_text, Nonce, Key);
204006ce:	800017b7          	lui	a5,0x80001
204006d2:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdbe8>
204006d6:	800017b7          	lui	a5,0x80001
204006da:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdbf8>
204006de:	80001737          	lui	a4,0x80001
204006e2:	74070713          	addi	a4,a4,1856 # 80001740 <metal_segment_heap_target_end+0xffffe388>
204006e6:	fec42683          	lw	a3,-20(s0)
204006ea:	80000637          	lui	a2,0x80000
204006ee:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd418>
204006f2:	fe842583          	lw	a1,-24(s0)
204006f6:	80000537          	lui	a0,0x80000
204006fa:	00050513          	mv	a0,a0
204006fe:	3e5d                	jal	204002b4 <AEAD_ENC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:58 (discriminator 4)

    printC(cipher_text, plain_len_int, 1, 1);
20400700:	4685                	li	a3,1
20400702:	4605                	li	a2,1
20400704:	fe442583          	lw	a1,-28(s0)
20400708:	800017b7          	lui	a5,0x80001
2040070c:	74078513          	addi	a0,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe388>
20400710:	3cc5                	jal	20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:59 (discriminator 4)
    printf("Second AEAD\n");
20400712:	204067b7          	lui	a5,0x20406
20400716:	8c078513          	addi	a0,a5,-1856 # 204058c0 <_exit+0x1d2>
2040071a:	2e6d                	jal	20400ad4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:61 (discriminator 4)

    AEAD_ENC(asso_text, asso_len, plain_text, plain_len, cipher_text, Nonce, Key);
2040071c:	800017b7          	lui	a5,0x80001
20400720:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdbe8>
20400724:	800017b7          	lui	a5,0x80001
20400728:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdbf8>
2040072c:	80001737          	lui	a4,0x80001
20400730:	74070713          	addi	a4,a4,1856 # 80001740 <metal_segment_heap_target_end+0xffffe388>
20400734:	fec42683          	lw	a3,-20(s0)
20400738:	80000637          	lui	a2,0x80000
2040073c:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd418>
20400740:	fe842583          	lw	a1,-24(s0)
20400744:	80000537          	lui	a0,0x80000
20400748:	00050513          	mv	a0,a0
2040074c:	36a5                	jal	204002b4 <AEAD_ENC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:62 (discriminator 4)
    printC(cipher_text, plain_len_int, 1, 1);
2040074e:	4685                	li	a3,1
20400750:	4605                	li	a2,1
20400752:	fe442583          	lw	a1,-28(s0)
20400756:	800017b7          	lui	a5,0x80001
2040075a:	74078513          	addi	a0,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe388>
2040075e:	344d                	jal	20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:63 (discriminator 4)
    printf("\nX\n");
20400760:	204067b7          	lui	a5,0x20406
20400764:	8cc78513          	addi	a0,a5,-1844 # 204058cc <_exit+0x1de>
20400768:	26b5                	jal	20400ad4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:66 (discriminator 4)


    plain_len = 10;
2040076a:	47a9                	li	a5,10
2040076c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:67 (discriminator 4)
    asso_len = 10;
20400770:	47a9                	li	a5,10
20400772:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:68 (discriminator 4)
    plain_len_int = plain_len / 4;
20400776:	fec42783          	lw	a5,-20(s0)
2040077a:	8389                	srli	a5,a5,0x2
2040077c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:69 (discriminator 4)
    plain_len_int = (plain_len % 4 == 0) ? plain_len_int : plain_len_int + 1;
20400780:	fec42783          	lw	a5,-20(s0)
20400784:	8b8d                	andi	a5,a5,3
20400786:	c789                	beqz	a5,20400790 <main+0x1fe>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:69 (discriminator 1)
20400788:	fe442783          	lw	a5,-28(s0)
2040078c:	0785                	addi	a5,a5,1
2040078e:	a019                	j	20400794 <main+0x202>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:69 (discriminator 2)
20400790:	fe442783          	lw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:69 (discriminator 4)
20400794:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:70 (discriminator 4)
    tag_addr = cipher_text + plain_len_int + 1;
20400798:	fe442783          	lw	a5,-28(s0)
2040079c:	0785                	addi	a5,a5,1
2040079e:	00279713          	slli	a4,a5,0x2
204007a2:	800017b7          	lui	a5,0x80001
204007a6:	74078793          	addi	a5,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe388>
204007aa:	973e                	add	a4,a4,a5
204007ac:	800017b7          	lui	a5,0x80001
204007b0:	72e7a823          	sw	a4,1840(a5) # 80001730 <metal_segment_heap_target_end+0xffffe378>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:73 (discriminator 4)


    AEAD_ENC(asso_text, asso_len, plain_text, plain_len, cipher_text, Nonce, Key);
204007b4:	800017b7          	lui	a5,0x80001
204007b8:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdbe8>
204007bc:	800017b7          	lui	a5,0x80001
204007c0:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdbf8>
204007c4:	80001737          	lui	a4,0x80001
204007c8:	74070713          	addi	a4,a4,1856 # 80001740 <metal_segment_heap_target_end+0xffffe388>
204007cc:	fec42683          	lw	a3,-20(s0)
204007d0:	80000637          	lui	a2,0x80000
204007d4:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd418>
204007d8:	fe842583          	lw	a1,-24(s0)
204007dc:	80000537          	lui	a0,0x80000
204007e0:	00050513          	mv	a0,a0
204007e4:	3cc1                	jal	204002b4 <AEAD_ENC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:74 (discriminator 4)
    printC(cipher_text, plain_len_int, 1, 0);
204007e6:	4681                	li	a3,0
204007e8:	4605                	li	a2,1
204007ea:	fe442583          	lw	a1,-28(s0)
204007ee:	800017b7          	lui	a5,0x80001
204007f2:	74078513          	addi	a0,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe388>
204007f6:	3429                	jal	20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:75 (discriminator 4)
    printf("\nX\n");
204007f8:	204067b7          	lui	a5,0x20406
204007fc:	8cc78513          	addi	a0,a5,-1844 # 204058cc <_exit+0x1de>
20400800:	2cd1                	jal	20400ad4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:76 (discriminator 4)
    printf("Tag \n");
20400802:	204067b7          	lui	a5,0x20406
20400806:	8d078513          	addi	a0,a5,-1840 # 204058d0 <_exit+0x1e2>
2040080a:	24e9                	jal	20400ad4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:77 (discriminator 4)
    printC(tag_addr, 4, 0, 0);
2040080c:	800017b7          	lui	a5,0x80001
20400810:	7307a783          	lw	a5,1840(a5) # 80001730 <metal_segment_heap_target_end+0xffffe378>
20400814:	4681                	li	a3,0
20400816:	4601                	li	a2,0
20400818:	4591                	li	a1,4
2040081a:	853e                	mv	a0,a5
2040081c:	32d5                	jal	20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:81 (discriminator 4)



    unsigned rd2 = 0;
2040081e:	fc042e23          	sw	zero,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:82 (discriminator 4)
    rd2 = AEAD_DEC(asso_text, asso_len, cipher_text, plain_len, dec_text, Nonce, Key, tag_addr);
20400822:	800017b7          	lui	a5,0x80001
20400826:	7307a783          	lw	a5,1840(a5) # 80001730 <metal_segment_heap_target_end+0xffffe378>
2040082a:	88be                	mv	a7,a5
2040082c:	800017b7          	lui	a5,0x80001
20400830:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdbe8>
20400834:	800017b7          	lui	a5,0x80001
20400838:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdbf8>
2040083c:	80002737          	lui	a4,0x80002
20400840:	f4870713          	addi	a4,a4,-184 # 80001f48 <metal_segment_heap_target_end+0xffffeb90>
20400844:	fec42683          	lw	a3,-20(s0)
20400848:	80001637          	lui	a2,0x80001
2040084c:	74060613          	addi	a2,a2,1856 # 80001740 <metal_segment_heap_target_end+0xffffe388>
20400850:	fe842583          	lw	a1,-24(s0)
20400854:	80000537          	lui	a0,0x80000
20400858:	00050513          	mv	a0,a0
2040085c:	3ea5                	jal	204003d4 <AEAD_DEC>
2040085e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:83 (discriminator 4)
    printC(dec_text, plain_len_int+4, 0, 0);
20400862:	fe442783          	lw	a5,-28(s0)
20400866:	0791                	addi	a5,a5,4
20400868:	4681                	li	a3,0
2040086a:	4601                	li	a2,0
2040086c:	85be                	mv	a1,a5
2040086e:	800027b7          	lui	a5,0x80002
20400872:	f4878513          	addi	a0,a5,-184 # 80001f48 <metal_segment_heap_target_end+0xffffeb90>
20400876:	3269                	jal	20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:84 (discriminator 4)
    printf("\n%08x\n", rd2);
20400878:	fdc42583          	lw	a1,-36(s0)
2040087c:	204067b7          	lui	a5,0x20406
20400880:	8d878513          	addi	a0,a5,-1832 # 204058d8 <_exit+0x1ea>
20400884:	2051                	jal	20400908 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:86 (discriminator 4)
    // tag_addr = cipher_text + plain_len_int + 1;
    printC(tag_addr, 4, 0, 0);
20400886:	800017b7          	lui	a5,0x80001
2040088a:	7307a783          	lw	a5,1840(a5) # 80001730 <metal_segment_heap_target_end+0xffffe378>
2040088e:	4681                	li	a3,0
20400890:	4601                	li	a2,0
20400892:	4591                	li	a1,4
20400894:	853e                	mv	a0,a5
20400896:	32ad                	jal	20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:89 (discriminator 4)


    rd2 = AEAD_DEC(asso_text, asso_len, cipher_text, plain_len, dec_text, Nonce, Key, tag_addr);
20400898:	800017b7          	lui	a5,0x80001
2040089c:	7307a783          	lw	a5,1840(a5) # 80001730 <metal_segment_heap_target_end+0xffffe378>
204008a0:	88be                	mv	a7,a5
204008a2:	800017b7          	lui	a5,0x80001
204008a6:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdbe8>
204008aa:	800017b7          	lui	a5,0x80001
204008ae:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdbf8>
204008b2:	80002737          	lui	a4,0x80002
204008b6:	f4870713          	addi	a4,a4,-184 # 80001f48 <metal_segment_heap_target_end+0xffffeb90>
204008ba:	fec42683          	lw	a3,-20(s0)
204008be:	80001637          	lui	a2,0x80001
204008c2:	74060613          	addi	a2,a2,1856 # 80001740 <metal_segment_heap_target_end+0xffffe388>
204008c6:	fe842583          	lw	a1,-24(s0)
204008ca:	80000537          	lui	a0,0x80000
204008ce:	00050513          	mv	a0,a0
204008d2:	3609                	jal	204003d4 <AEAD_DEC>
204008d4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:90 (discriminator 4)
    printC(dec_text, plain_len_int+4, 0, 0);
204008d8:	fe442783          	lw	a5,-28(s0)
204008dc:	0791                	addi	a5,a5,4
204008de:	4681                	li	a3,0
204008e0:	4601                	li	a2,0
204008e2:	85be                	mv	a1,a5
204008e4:	800027b7          	lui	a5,0x80002
204008e8:	f4878513          	addi	a0,a5,-184 # 80001f48 <metal_segment_heap_target_end+0xffffeb90>
204008ec:	3a11                	jal	20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:91 (discriminator 4)
    printf("\n%08x\n", rd2);
204008ee:	fdc42583          	lw	a1,-36(s0)
204008f2:	204067b7          	lui	a5,0x20406
204008f6:	8d878513          	addi	a0,a5,-1832 # 204058d8 <_exit+0x1ea>
204008fa:	2039                	jal	20400908 <iprintf>
204008fc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:95 (discriminator 4)



204008fe:	853e                	mv	a0,a5
20400900:	50b2                	lw	ra,44(sp)
20400902:	5422                	lw	s0,40(sp)
20400904:	6145                	addi	sp,sp,48
20400906:	8082                	ret

20400908 <iprintf>:
printf():
20400908:	7139                	addi	sp,sp,-64
2040090a:	da3e                	sw	a5,52(sp)
2040090c:	d22e                	sw	a1,36(sp)
2040090e:	d432                	sw	a2,40(sp)
20400910:	d636                	sw	a3,44(sp)
20400912:	d83a                	sw	a4,48(sp)
20400914:	dc42                	sw	a6,56(sp)
20400916:	de46                	sw	a7,60(sp)
20400918:	5fc01797          	auipc	a5,0x5fc01
2040091c:	df078793          	addi	a5,a5,-528 # 80001708 <_impure_ptr>
20400920:	cc22                	sw	s0,24(sp)
20400922:	4380                	lw	s0,0(a5)
20400924:	ca26                	sw	s1,20(sp)
20400926:	ce06                	sw	ra,28(sp)
20400928:	84aa                	mv	s1,a0
2040092a:	c409                	beqz	s0,20400934 <iprintf+0x2c>
2040092c:	4c1c                	lw	a5,24(s0)
2040092e:	e399                	bnez	a5,20400934 <iprintf+0x2c>
20400930:	8522                	mv	a0,s0
20400932:	23d5                	jal	20400f16 <__sinit>
20400934:	440c                	lw	a1,8(s0)
20400936:	1054                	addi	a3,sp,36
20400938:	8626                	mv	a2,s1
2040093a:	8522                	mv	a0,s0
2040093c:	c636                	sw	a3,12(sp)
2040093e:	2df000ef          	jal	ra,2040141c <_vfiprintf_r>
20400942:	40f2                	lw	ra,28(sp)
20400944:	4462                	lw	s0,24(sp)
20400946:	44d2                	lw	s1,20(sp)
20400948:	6121                	addi	sp,sp,64
2040094a:	8082                	ret

2040094c <putchar>:
putchar():
2040094c:	1101                	addi	sp,sp,-32
2040094e:	5fc01797          	auipc	a5,0x5fc01
20400952:	dba78793          	addi	a5,a5,-582 # 80001708 <_impure_ptr>
20400956:	cc22                	sw	s0,24(sp)
20400958:	4380                	lw	s0,0(a5)
2040095a:	ce06                	sw	ra,28(sp)
2040095c:	85aa                	mv	a1,a0
2040095e:	c419                	beqz	s0,2040096c <putchar+0x20>
20400960:	4c1c                	lw	a5,24(s0)
20400962:	e789                	bnez	a5,2040096c <putchar+0x20>
20400964:	c62a                	sw	a0,12(sp)
20400966:	8522                	mv	a0,s0
20400968:	237d                	jal	20400f16 <__sinit>
2040096a:	45b2                	lw	a1,12(sp)
2040096c:	4410                	lw	a2,8(s0)
2040096e:	8522                	mv	a0,s0
20400970:	4462                	lw	s0,24(sp)
20400972:	40f2                	lw	ra,28(sp)
20400974:	6105                	addi	sp,sp,32
20400976:	a009                	j	20400978 <_putc_r>

20400978 <_putc_r>:
_putc_r():
20400978:	1101                	addi	sp,sp,-32
2040097a:	cc22                	sw	s0,24(sp)
2040097c:	ce06                	sw	ra,28(sp)
2040097e:	842a                	mv	s0,a0
20400980:	c901                	beqz	a0,20400990 <_putc_r+0x18>
20400982:	4d1c                	lw	a5,24(a0)
20400984:	e791                	bnez	a5,20400990 <_putc_r+0x18>
20400986:	c632                	sw	a2,12(sp)
20400988:	c42e                	sw	a1,8(sp)
2040098a:	2371                	jal	20400f16 <__sinit>
2040098c:	4632                	lw	a2,12(sp)
2040098e:	45a2                	lw	a1,8(sp)
20400990:	00005797          	auipc	a5,0x5
20400994:	f7078793          	addi	a5,a5,-144 # 20405900 <__sf_fake_stdin>
20400998:	02f61563          	bne	a2,a5,204009c2 <_putc_r+0x4a>
2040099c:	4050                	lw	a2,4(s0)
2040099e:	461c                	lw	a5,8(a2)
204009a0:	17fd                	addi	a5,a5,-1
204009a2:	c61c                	sw	a5,8(a2)
204009a4:	0207df63          	bgez	a5,204009e2 <_putc_r+0x6a>
204009a8:	4e18                	lw	a4,24(a2)
204009aa:	00e7c763          	blt	a5,a4,204009b8 <_putc_r+0x40>
204009ae:	0ff5f793          	andi	a5,a1,255
204009b2:	4729                	li	a4,10
204009b4:	02e79763          	bne	a5,a4,204009e2 <_putc_r+0x6a>
204009b8:	8522                	mv	a0,s0
204009ba:	4462                	lw	s0,24(sp)
204009bc:	40f2                	lw	ra,28(sp)
204009be:	6105                	addi	sp,sp,32
204009c0:	a20d                	j	20400ae2 <__swbuf_r>
204009c2:	00005797          	auipc	a5,0x5
204009c6:	f5e78793          	addi	a5,a5,-162 # 20405920 <__sf_fake_stdout>
204009ca:	00f61463          	bne	a2,a5,204009d2 <_putc_r+0x5a>
204009ce:	4410                	lw	a2,8(s0)
204009d0:	b7f9                	j	2040099e <_putc_r+0x26>
204009d2:	00005797          	auipc	a5,0x5
204009d6:	f0e78793          	addi	a5,a5,-242 # 204058e0 <__sf_fake_stderr>
204009da:	fcf612e3          	bne	a2,a5,2040099e <_putc_r+0x26>
204009de:	4450                	lw	a2,12(s0)
204009e0:	bf7d                	j	2040099e <_putc_r+0x26>
204009e2:	421c                	lw	a5,0(a2)
204009e4:	0ff5f513          	andi	a0,a1,255
204009e8:	00178713          	addi	a4,a5,1
204009ec:	c218                	sw	a4,0(a2)
204009ee:	00b78023          	sb	a1,0(a5)
204009f2:	40f2                	lw	ra,28(sp)
204009f4:	4462                	lw	s0,24(sp)
204009f6:	6105                	addi	sp,sp,32
204009f8:	8082                	ret

204009fa <_puts_r>:
_puts_r():
204009fa:	1101                	addi	sp,sp,-32
204009fc:	ca26                	sw	s1,20(sp)
204009fe:	c84a                	sw	s2,16(sp)
20400a00:	ce06                	sw	ra,28(sp)
20400a02:	cc22                	sw	s0,24(sp)
20400a04:	c64e                	sw	s3,12(sp)
20400a06:	c452                	sw	s4,8(sp)
20400a08:	84aa                	mv	s1,a0
20400a0a:	892e                	mv	s2,a1
20400a0c:	c501                	beqz	a0,20400a14 <_puts_r+0x1a>
20400a0e:	4d1c                	lw	a5,24(a0)
20400a10:	e391                	bnez	a5,20400a14 <_puts_r+0x1a>
20400a12:	2311                	jal	20400f16 <__sinit>
20400a14:	4c9c                	lw	a5,24(s1)
20400a16:	4480                	lw	s0,8(s1)
20400a18:	e399                	bnez	a5,20400a1e <_puts_r+0x24>
20400a1a:	8526                	mv	a0,s1
20400a1c:	29ed                	jal	20400f16 <__sinit>
20400a1e:	00005797          	auipc	a5,0x5
20400a22:	ee278793          	addi	a5,a5,-286 # 20405900 <__sf_fake_stdin>
20400a26:	02f41c63          	bne	s0,a5,20400a5e <_puts_r+0x64>
20400a2a:	40c0                	lw	s0,4(s1)
20400a2c:	00c45783          	lhu	a5,12(s0)
20400a30:	8ba1                	andi	a5,a5,8
20400a32:	c7b1                	beqz	a5,20400a7e <_puts_r+0x84>
20400a34:	481c                	lw	a5,16(s0)
20400a36:	c7a1                	beqz	a5,20400a7e <_puts_r+0x84>
20400a38:	59fd                	li	s3,-1
20400a3a:	4a29                	li	s4,10
20400a3c:	441c                	lw	a5,8(s0)
20400a3e:	00094583          	lbu	a1,0(s2)
20400a42:	17fd                	addi	a5,a5,-1
20400a44:	e9b1                	bnez	a1,20400a98 <_puts_r+0x9e>
20400a46:	c41c                	sw	a5,8(s0)
20400a48:	0607de63          	bgez	a5,20400ac4 <_puts_r+0xca>
20400a4c:	8622                	mv	a2,s0
20400a4e:	45a9                	li	a1,10
20400a50:	8526                	mv	a0,s1
20400a52:	2841                	jal	20400ae2 <__swbuf_r>
20400a54:	57fd                	li	a5,-1
20400a56:	02f50863          	beq	a0,a5,20400a86 <_puts_r+0x8c>
20400a5a:	4529                	li	a0,10
20400a5c:	a035                	j	20400a88 <_puts_r+0x8e>
20400a5e:	00005797          	auipc	a5,0x5
20400a62:	ec278793          	addi	a5,a5,-318 # 20405920 <__sf_fake_stdout>
20400a66:	00f41463          	bne	s0,a5,20400a6e <_puts_r+0x74>
20400a6a:	4480                	lw	s0,8(s1)
20400a6c:	b7c1                	j	20400a2c <_puts_r+0x32>
20400a6e:	00005797          	auipc	a5,0x5
20400a72:	e7278793          	addi	a5,a5,-398 # 204058e0 <__sf_fake_stderr>
20400a76:	faf41be3          	bne	s0,a5,20400a2c <_puts_r+0x32>
20400a7a:	44c0                	lw	s0,12(s1)
20400a7c:	bf45                	j	20400a2c <_puts_r+0x32>
20400a7e:	85a2                	mv	a1,s0
20400a80:	8526                	mv	a0,s1
20400a82:	2205                	jal	20400ba2 <__swsetup_r>
20400a84:	d955                	beqz	a0,20400a38 <_puts_r+0x3e>
20400a86:	557d                	li	a0,-1
20400a88:	40f2                	lw	ra,28(sp)
20400a8a:	4462                	lw	s0,24(sp)
20400a8c:	44d2                	lw	s1,20(sp)
20400a8e:	4942                	lw	s2,16(sp)
20400a90:	49b2                	lw	s3,12(sp)
20400a92:	4a22                	lw	s4,8(sp)
20400a94:	6105                	addi	sp,sp,32
20400a96:	8082                	ret
20400a98:	c41c                	sw	a5,8(s0)
20400a9a:	0905                	addi	s2,s2,1
20400a9c:	0007d763          	bgez	a5,20400aaa <_puts_r+0xb0>
20400aa0:	4c18                	lw	a4,24(s0)
20400aa2:	00e7cb63          	blt	a5,a4,20400ab8 <_puts_r+0xbe>
20400aa6:	01458963          	beq	a1,s4,20400ab8 <_puts_r+0xbe>
20400aaa:	401c                	lw	a5,0(s0)
20400aac:	00178713          	addi	a4,a5,1
20400ab0:	c018                	sw	a4,0(s0)
20400ab2:	00b78023          	sb	a1,0(a5)
20400ab6:	b759                	j	20400a3c <_puts_r+0x42>
20400ab8:	8622                	mv	a2,s0
20400aba:	8526                	mv	a0,s1
20400abc:	201d                	jal	20400ae2 <__swbuf_r>
20400abe:	f7351fe3          	bne	a0,s3,20400a3c <_puts_r+0x42>
20400ac2:	b7d1                	j	20400a86 <_puts_r+0x8c>
20400ac4:	401c                	lw	a5,0(s0)
20400ac6:	00178713          	addi	a4,a5,1
20400aca:	c018                	sw	a4,0(s0)
20400acc:	4729                	li	a4,10
20400ace:	00e78023          	sb	a4,0(a5)
20400ad2:	b761                	j	20400a5a <_puts_r+0x60>

20400ad4 <puts>:
puts():
20400ad4:	5fc01797          	auipc	a5,0x5fc01
20400ad8:	c3478793          	addi	a5,a5,-972 # 80001708 <_impure_ptr>
20400adc:	85aa                	mv	a1,a0
20400ade:	4388                	lw	a0,0(a5)
20400ae0:	bf29                	j	204009fa <_puts_r>

20400ae2 <__swbuf_r>:
__swbuf_r():
20400ae2:	1101                	addi	sp,sp,-32
20400ae4:	cc22                	sw	s0,24(sp)
20400ae6:	ca26                	sw	s1,20(sp)
20400ae8:	c84a                	sw	s2,16(sp)
20400aea:	ce06                	sw	ra,28(sp)
20400aec:	c64e                	sw	s3,12(sp)
20400aee:	84aa                	mv	s1,a0
20400af0:	892e                	mv	s2,a1
20400af2:	8432                	mv	s0,a2
20400af4:	c501                	beqz	a0,20400afc <__swbuf_r+0x1a>
20400af6:	4d1c                	lw	a5,24(a0)
20400af8:	e391                	bnez	a5,20400afc <__swbuf_r+0x1a>
20400afa:	2931                	jal	20400f16 <__sinit>
20400afc:	00005797          	auipc	a5,0x5
20400b00:	e0478793          	addi	a5,a5,-508 # 20405900 <__sf_fake_stdin>
20400b04:	06f41963          	bne	s0,a5,20400b76 <__swbuf_r+0x94>
20400b08:	40c0                	lw	s0,4(s1)
20400b0a:	4c1c                	lw	a5,24(s0)
20400b0c:	c41c                	sw	a5,8(s0)
20400b0e:	00c45783          	lhu	a5,12(s0)
20400b12:	8ba1                	andi	a5,a5,8
20400b14:	c3c9                	beqz	a5,20400b96 <__swbuf_r+0xb4>
20400b16:	481c                	lw	a5,16(s0)
20400b18:	cfbd                	beqz	a5,20400b96 <__swbuf_r+0xb4>
20400b1a:	481c                	lw	a5,16(s0)
20400b1c:	4008                	lw	a0,0(s0)
20400b1e:	0ff97993          	andi	s3,s2,255
20400b22:	0ff97913          	andi	s2,s2,255
20400b26:	8d1d                	sub	a0,a0,a5
20400b28:	485c                	lw	a5,20(s0)
20400b2a:	00f54663          	blt	a0,a5,20400b36 <__swbuf_r+0x54>
20400b2e:	85a2                	mv	a1,s0
20400b30:	8526                	mv	a0,s1
20400b32:	24e9                	jal	20400dfc <_fflush_r>
20400b34:	e52d                	bnez	a0,20400b9e <__swbuf_r+0xbc>
20400b36:	441c                	lw	a5,8(s0)
20400b38:	0505                	addi	a0,a0,1
20400b3a:	17fd                	addi	a5,a5,-1
20400b3c:	c41c                	sw	a5,8(s0)
20400b3e:	401c                	lw	a5,0(s0)
20400b40:	00178713          	addi	a4,a5,1
20400b44:	c018                	sw	a4,0(s0)
20400b46:	01378023          	sb	s3,0(a5)
20400b4a:	485c                	lw	a5,20(s0)
20400b4c:	00a78963          	beq	a5,a0,20400b5e <__swbuf_r+0x7c>
20400b50:	00c45783          	lhu	a5,12(s0)
20400b54:	8b85                	andi	a5,a5,1
20400b56:	cb81                	beqz	a5,20400b66 <__swbuf_r+0x84>
20400b58:	47a9                	li	a5,10
20400b5a:	00f91663          	bne	s2,a5,20400b66 <__swbuf_r+0x84>
20400b5e:	85a2                	mv	a1,s0
20400b60:	8526                	mv	a0,s1
20400b62:	2c69                	jal	20400dfc <_fflush_r>
20400b64:	ed0d                	bnez	a0,20400b9e <__swbuf_r+0xbc>
20400b66:	40f2                	lw	ra,28(sp)
20400b68:	4462                	lw	s0,24(sp)
20400b6a:	854a                	mv	a0,s2
20400b6c:	44d2                	lw	s1,20(sp)
20400b6e:	4942                	lw	s2,16(sp)
20400b70:	49b2                	lw	s3,12(sp)
20400b72:	6105                	addi	sp,sp,32
20400b74:	8082                	ret
20400b76:	00005797          	auipc	a5,0x5
20400b7a:	daa78793          	addi	a5,a5,-598 # 20405920 <__sf_fake_stdout>
20400b7e:	00f41463          	bne	s0,a5,20400b86 <__swbuf_r+0xa4>
20400b82:	4480                	lw	s0,8(s1)
20400b84:	b759                	j	20400b0a <__swbuf_r+0x28>
20400b86:	00005797          	auipc	a5,0x5
20400b8a:	d5a78793          	addi	a5,a5,-678 # 204058e0 <__sf_fake_stderr>
20400b8e:	f6f41ee3          	bne	s0,a5,20400b0a <__swbuf_r+0x28>
20400b92:	44c0                	lw	s0,12(s1)
20400b94:	bf9d                	j	20400b0a <__swbuf_r+0x28>
20400b96:	85a2                	mv	a1,s0
20400b98:	8526                	mv	a0,s1
20400b9a:	2021                	jal	20400ba2 <__swsetup_r>
20400b9c:	dd3d                	beqz	a0,20400b1a <__swbuf_r+0x38>
20400b9e:	597d                	li	s2,-1
20400ba0:	b7d9                	j	20400b66 <__swbuf_r+0x84>

20400ba2 <__swsetup_r>:
__swsetup_r():
20400ba2:	1141                	addi	sp,sp,-16
20400ba4:	5fc01797          	auipc	a5,0x5fc01
20400ba8:	b6478793          	addi	a5,a5,-1180 # 80001708 <_impure_ptr>
20400bac:	c226                	sw	s1,4(sp)
20400bae:	4384                	lw	s1,0(a5)
20400bb0:	c422                	sw	s0,8(sp)
20400bb2:	c04a                	sw	s2,0(sp)
20400bb4:	c606                	sw	ra,12(sp)
20400bb6:	892a                	mv	s2,a0
20400bb8:	842e                	mv	s0,a1
20400bba:	c489                	beqz	s1,20400bc4 <__swsetup_r+0x22>
20400bbc:	4c9c                	lw	a5,24(s1)
20400bbe:	e399                	bnez	a5,20400bc4 <__swsetup_r+0x22>
20400bc0:	8526                	mv	a0,s1
20400bc2:	2e91                	jal	20400f16 <__sinit>
20400bc4:	00005797          	auipc	a5,0x5
20400bc8:	d3c78793          	addi	a5,a5,-708 # 20405900 <__sf_fake_stdin>
20400bcc:	02f41c63          	bne	s0,a5,20400c04 <__swsetup_r+0x62>
20400bd0:	40c0                	lw	s0,4(s1)
20400bd2:	00c41703          	lh	a4,12(s0)
20400bd6:	01071793          	slli	a5,a4,0x10
20400bda:	83c1                	srli	a5,a5,0x10
20400bdc:	0087f693          	andi	a3,a5,8
20400be0:	eeb5                	bnez	a3,20400c5c <__swsetup_r+0xba>
20400be2:	0107f693          	andi	a3,a5,16
20400be6:	ee9d                	bnez	a3,20400c24 <__swsetup_r+0x82>
20400be8:	47a5                	li	a5,9
20400bea:	00f92023          	sw	a5,0(s2)
20400bee:	04076713          	ori	a4,a4,64
20400bf2:	00e41623          	sh	a4,12(s0)
20400bf6:	557d                	li	a0,-1
20400bf8:	40b2                	lw	ra,12(sp)
20400bfa:	4422                	lw	s0,8(sp)
20400bfc:	4492                	lw	s1,4(sp)
20400bfe:	4902                	lw	s2,0(sp)
20400c00:	0141                	addi	sp,sp,16
20400c02:	8082                	ret
20400c04:	00005797          	auipc	a5,0x5
20400c08:	d1c78793          	addi	a5,a5,-740 # 20405920 <__sf_fake_stdout>
20400c0c:	00f41463          	bne	s0,a5,20400c14 <__swsetup_r+0x72>
20400c10:	4480                	lw	s0,8(s1)
20400c12:	b7c1                	j	20400bd2 <__swsetup_r+0x30>
20400c14:	00005797          	auipc	a5,0x5
20400c18:	ccc78793          	addi	a5,a5,-820 # 204058e0 <__sf_fake_stderr>
20400c1c:	faf41be3          	bne	s0,a5,20400bd2 <__swsetup_r+0x30>
20400c20:	44c0                	lw	s0,12(s1)
20400c22:	bf45                	j	20400bd2 <__swsetup_r+0x30>
20400c24:	8b91                	andi	a5,a5,4
20400c26:	c78d                	beqz	a5,20400c50 <__swsetup_r+0xae>
20400c28:	584c                	lw	a1,52(s0)
20400c2a:	c989                	beqz	a1,20400c3c <__swsetup_r+0x9a>
20400c2c:	04440793          	addi	a5,s0,68
20400c30:	00f58463          	beq	a1,a5,20400c38 <__swsetup_r+0x96>
20400c34:	854a                	mv	a0,s2
20400c36:	2bc5                	jal	20401226 <_free_r>
20400c38:	02042a23          	sw	zero,52(s0)
20400c3c:	00c45783          	lhu	a5,12(s0)
20400c40:	00042223          	sw	zero,4(s0)
20400c44:	fdb7f793          	andi	a5,a5,-37
20400c48:	00f41623          	sh	a5,12(s0)
20400c4c:	481c                	lw	a5,16(s0)
20400c4e:	c01c                	sw	a5,0(s0)
20400c50:	00c45783          	lhu	a5,12(s0)
20400c54:	0087e793          	ori	a5,a5,8
20400c58:	00f41623          	sh	a5,12(s0)
20400c5c:	481c                	lw	a5,16(s0)
20400c5e:	ef81                	bnez	a5,20400c76 <__swsetup_r+0xd4>
20400c60:	00c45783          	lhu	a5,12(s0)
20400c64:	20000713          	li	a4,512
20400c68:	2807f793          	andi	a5,a5,640
20400c6c:	00e78563          	beq	a5,a4,20400c76 <__swsetup_r+0xd4>
20400c70:	85a2                	mv	a1,s0
20400c72:	854a                	mv	a0,s2
20400c74:	21bd                	jal	204010e2 <__smakebuf_r>
20400c76:	00c45783          	lhu	a5,12(s0)
20400c7a:	0017f713          	andi	a4,a5,1
20400c7e:	c705                	beqz	a4,20400ca6 <__swsetup_r+0x104>
20400c80:	485c                	lw	a5,20(s0)
20400c82:	00042423          	sw	zero,8(s0)
20400c86:	40f007b3          	neg	a5,a5
20400c8a:	cc1c                	sw	a5,24(s0)
20400c8c:	481c                	lw	a5,16(s0)
20400c8e:	4501                	li	a0,0
20400c90:	f7a5                	bnez	a5,20400bf8 <__swsetup_r+0x56>
20400c92:	00c41783          	lh	a5,12(s0)
20400c96:	0807f713          	andi	a4,a5,128
20400c9a:	df39                	beqz	a4,20400bf8 <__swsetup_r+0x56>
20400c9c:	0407e793          	ori	a5,a5,64
20400ca0:	00f41623          	sh	a5,12(s0)
20400ca4:	bf89                	j	20400bf6 <__swsetup_r+0x54>
20400ca6:	8b89                	andi	a5,a5,2
20400ca8:	4701                	li	a4,0
20400caa:	e391                	bnez	a5,20400cae <__swsetup_r+0x10c>
20400cac:	4858                	lw	a4,20(s0)
20400cae:	c418                	sw	a4,8(s0)
20400cb0:	bff1                	j	20400c8c <__swsetup_r+0xea>

20400cb2 <__sflush_r>:
__sflush_r():
20400cb2:	00c5d783          	lhu	a5,12(a1)
20400cb6:	1101                	addi	sp,sp,-32
20400cb8:	cc22                	sw	s0,24(sp)
20400cba:	ca26                	sw	s1,20(sp)
20400cbc:	ce06                	sw	ra,28(sp)
20400cbe:	c84a                	sw	s2,16(sp)
20400cc0:	c64e                	sw	s3,12(sp)
20400cc2:	0087f713          	andi	a4,a5,8
20400cc6:	84aa                	mv	s1,a0
20400cc8:	842e                	mv	s0,a1
20400cca:	e765                	bnez	a4,20400db2 <__sflush_r+0x100>
20400ccc:	41d8                	lw	a4,4(a1)
20400cce:	00e04763          	bgtz	a4,20400cdc <__sflush_r+0x2a>
20400cd2:	41b8                	lw	a4,64(a1)
20400cd4:	00e04463          	bgtz	a4,20400cdc <__sflush_r+0x2a>
20400cd8:	4501                	li	a0,0
20400cda:	a0c1                	j	20400d9a <__sflush_r+0xe8>
20400cdc:	5458                	lw	a4,44(s0)
20400cde:	df6d                	beqz	a4,20400cd8 <__sflush_r+0x26>
20400ce0:	0004a903          	lw	s2,0(s1)
20400ce4:	01379693          	slli	a3,a5,0x13
20400ce8:	0004a023          	sw	zero,0(s1)
20400cec:	0606de63          	bgez	a3,20400d68 <__sflush_r+0xb6>
20400cf0:	4868                	lw	a0,84(s0)
20400cf2:	00c45783          	lhu	a5,12(s0)
20400cf6:	8b91                	andi	a5,a5,4
20400cf8:	c799                	beqz	a5,20400d06 <__sflush_r+0x54>
20400cfa:	405c                	lw	a5,4(s0)
20400cfc:	8d1d                	sub	a0,a0,a5
20400cfe:	585c                	lw	a5,52(s0)
20400d00:	c399                	beqz	a5,20400d06 <__sflush_r+0x54>
20400d02:	403c                	lw	a5,64(s0)
20400d04:	8d1d                	sub	a0,a0,a5
20400d06:	545c                	lw	a5,44(s0)
20400d08:	500c                	lw	a1,32(s0)
20400d0a:	862a                	mv	a2,a0
20400d0c:	4681                	li	a3,0
20400d0e:	8526                	mv	a0,s1
20400d10:	9782                	jalr	a5
20400d12:	57fd                	li	a5,-1
20400d14:	00c45703          	lhu	a4,12(s0)
20400d18:	00f51d63          	bne	a0,a5,20400d32 <__sflush_r+0x80>
20400d1c:	4094                	lw	a3,0(s1)
20400d1e:	47f5                	li	a5,29
20400d20:	08d7e463          	bltu	a5,a3,20400da8 <__sflush_r+0xf6>
20400d24:	204007b7          	lui	a5,0x20400
20400d28:	0785                	addi	a5,a5,1
20400d2a:	00d7d7b3          	srl	a5,a5,a3
20400d2e:	8b85                	andi	a5,a5,1
20400d30:	cfa5                	beqz	a5,20400da8 <__sflush_r+0xf6>
20400d32:	481c                	lw	a5,16(s0)
20400d34:	00042223          	sw	zero,4(s0)
20400d38:	c01c                	sw	a5,0(s0)
20400d3a:	01371793          	slli	a5,a4,0x13
20400d3e:	0007d863          	bgez	a5,20400d4e <__sflush_r+0x9c>
20400d42:	57fd                	li	a5,-1
20400d44:	00f51463          	bne	a0,a5,20400d4c <__sflush_r+0x9a>
20400d48:	409c                	lw	a5,0(s1)
20400d4a:	e391                	bnez	a5,20400d4e <__sflush_r+0x9c>
20400d4c:	c868                	sw	a0,84(s0)
20400d4e:	584c                	lw	a1,52(s0)
20400d50:	0124a023          	sw	s2,0(s1)
20400d54:	d1d1                	beqz	a1,20400cd8 <__sflush_r+0x26>
20400d56:	04440793          	addi	a5,s0,68
20400d5a:	00f58463          	beq	a1,a5,20400d62 <__sflush_r+0xb0>
20400d5e:	8526                	mv	a0,s1
20400d60:	21d9                	jal	20401226 <_free_r>
20400d62:	02042a23          	sw	zero,52(s0)
20400d66:	bf8d                	j	20400cd8 <__sflush_r+0x26>
20400d68:	500c                	lw	a1,32(s0)
20400d6a:	4685                	li	a3,1
20400d6c:	4601                	li	a2,0
20400d6e:	8526                	mv	a0,s1
20400d70:	9702                	jalr	a4
20400d72:	57fd                	li	a5,-1
20400d74:	f6f51fe3          	bne	a0,a5,20400cf2 <__sflush_r+0x40>
20400d78:	409c                	lw	a5,0(s1)
20400d7a:	dfa5                	beqz	a5,20400cf2 <__sflush_r+0x40>
20400d7c:	4775                	li	a4,29
20400d7e:	00e78563          	beq	a5,a4,20400d88 <__sflush_r+0xd6>
20400d82:	4759                	li	a4,22
20400d84:	00e79563          	bne	a5,a4,20400d8e <__sflush_r+0xdc>
20400d88:	0124a023          	sw	s2,0(s1)
20400d8c:	b7b1                	j	20400cd8 <__sflush_r+0x26>
20400d8e:	00c45783          	lhu	a5,12(s0)
20400d92:	0407e793          	ori	a5,a5,64
20400d96:	00f41623          	sh	a5,12(s0)
20400d9a:	40f2                	lw	ra,28(sp)
20400d9c:	4462                	lw	s0,24(sp)
20400d9e:	44d2                	lw	s1,20(sp)
20400da0:	4942                	lw	s2,16(sp)
20400da2:	49b2                	lw	s3,12(sp)
20400da4:	6105                	addi	sp,sp,32
20400da6:	8082                	ret
20400da8:	04076713          	ori	a4,a4,64
20400dac:	00e41623          	sh	a4,12(s0)
20400db0:	b7ed                	j	20400d9a <__sflush_r+0xe8>
20400db2:	0105a983          	lw	s3,16(a1)
20400db6:	f20981e3          	beqz	s3,20400cd8 <__sflush_r+0x26>
20400dba:	0005a903          	lw	s2,0(a1)
20400dbe:	8b8d                	andi	a5,a5,3
20400dc0:	0135a023          	sw	s3,0(a1)
20400dc4:	41390933          	sub	s2,s2,s3
20400dc8:	4701                	li	a4,0
20400dca:	e391                	bnez	a5,20400dce <__sflush_r+0x11c>
20400dcc:	49d8                	lw	a4,20(a1)
20400dce:	c418                	sw	a4,8(s0)
20400dd0:	f12054e3          	blez	s2,20400cd8 <__sflush_r+0x26>
20400dd4:	541c                	lw	a5,40(s0)
20400dd6:	500c                	lw	a1,32(s0)
20400dd8:	86ca                	mv	a3,s2
20400dda:	864e                	mv	a2,s3
20400ddc:	8526                	mv	a0,s1
20400dde:	9782                	jalr	a5
20400de0:	00a04a63          	bgtz	a0,20400df4 <__sflush_r+0x142>
20400de4:	00c45783          	lhu	a5,12(s0)
20400de8:	557d                	li	a0,-1
20400dea:	0407e793          	ori	a5,a5,64
20400dee:	00f41623          	sh	a5,12(s0)
20400df2:	b765                	j	20400d9a <__sflush_r+0xe8>
20400df4:	99aa                	add	s3,s3,a0
20400df6:	40a90933          	sub	s2,s2,a0
20400dfa:	bfd9                	j	20400dd0 <__sflush_r+0x11e>

20400dfc <_fflush_r>:
_fflush_r():
20400dfc:	499c                	lw	a5,16(a1)
20400dfe:	cfb9                	beqz	a5,20400e5c <_fflush_r+0x60>
20400e00:	1101                	addi	sp,sp,-32
20400e02:	cc22                	sw	s0,24(sp)
20400e04:	ce06                	sw	ra,28(sp)
20400e06:	842a                	mv	s0,a0
20400e08:	c511                	beqz	a0,20400e14 <_fflush_r+0x18>
20400e0a:	4d1c                	lw	a5,24(a0)
20400e0c:	e781                	bnez	a5,20400e14 <_fflush_r+0x18>
20400e0e:	c62e                	sw	a1,12(sp)
20400e10:	2219                	jal	20400f16 <__sinit>
20400e12:	45b2                	lw	a1,12(sp)
20400e14:	00005797          	auipc	a5,0x5
20400e18:	aec78793          	addi	a5,a5,-1300 # 20405900 <__sf_fake_stdin>
20400e1c:	00f59b63          	bne	a1,a5,20400e32 <_fflush_r+0x36>
20400e20:	404c                	lw	a1,4(s0)
20400e22:	00c59783          	lh	a5,12(a1)
20400e26:	c795                	beqz	a5,20400e52 <_fflush_r+0x56>
20400e28:	8522                	mv	a0,s0
20400e2a:	4462                	lw	s0,24(sp)
20400e2c:	40f2                	lw	ra,28(sp)
20400e2e:	6105                	addi	sp,sp,32
20400e30:	b549                	j	20400cb2 <__sflush_r>
20400e32:	00005797          	auipc	a5,0x5
20400e36:	aee78793          	addi	a5,a5,-1298 # 20405920 <__sf_fake_stdout>
20400e3a:	00f59463          	bne	a1,a5,20400e42 <_fflush_r+0x46>
20400e3e:	440c                	lw	a1,8(s0)
20400e40:	b7cd                	j	20400e22 <_fflush_r+0x26>
20400e42:	00005797          	auipc	a5,0x5
20400e46:	a9e78793          	addi	a5,a5,-1378 # 204058e0 <__sf_fake_stderr>
20400e4a:	fcf59ce3          	bne	a1,a5,20400e22 <_fflush_r+0x26>
20400e4e:	444c                	lw	a1,12(s0)
20400e50:	bfc9                	j	20400e22 <_fflush_r+0x26>
20400e52:	40f2                	lw	ra,28(sp)
20400e54:	4462                	lw	s0,24(sp)
20400e56:	4501                	li	a0,0
20400e58:	6105                	addi	sp,sp,32
20400e5a:	8082                	ret
20400e5c:	4501                	li	a0,0
20400e5e:	8082                	ret

20400e60 <std>:
std():
20400e60:	1141                	addi	sp,sp,-16
20400e62:	c422                	sw	s0,8(sp)
20400e64:	c606                	sw	ra,12(sp)
20400e66:	842a                	mv	s0,a0
20400e68:	00b51623          	sh	a1,12(a0) # 8000000c <metal_segment_heap_target_end+0xffffcc54>
20400e6c:	00c51723          	sh	a2,14(a0)
20400e70:	00052023          	sw	zero,0(a0)
20400e74:	00052223          	sw	zero,4(a0)
20400e78:	00052423          	sw	zero,8(a0)
20400e7c:	06052223          	sw	zero,100(a0)
20400e80:	00052823          	sw	zero,16(a0)
20400e84:	00052a23          	sw	zero,20(a0)
20400e88:	00052c23          	sw	zero,24(a0)
20400e8c:	4621                	li	a2,8
20400e8e:	4581                	li	a1,0
20400e90:	05c50513          	addi	a0,a0,92
20400e94:	24ed                	jal	2040117e <memset>
20400e96:	00001797          	auipc	a5,0x1
20400e9a:	84e78793          	addi	a5,a5,-1970 # 204016e4 <__sread>
20400e9e:	d05c                	sw	a5,36(s0)
20400ea0:	00001797          	auipc	a5,0x1
20400ea4:	87478793          	addi	a5,a5,-1932 # 20401714 <__swrite>
20400ea8:	d41c                	sw	a5,40(s0)
20400eaa:	00001797          	auipc	a5,0x1
20400eae:	8b878793          	addi	a5,a5,-1864 # 20401762 <__sseek>
20400eb2:	d45c                	sw	a5,44(s0)
20400eb4:	00001797          	auipc	a5,0x1
20400eb8:	8e478793          	addi	a5,a5,-1820 # 20401798 <__sclose>
20400ebc:	d000                	sw	s0,32(s0)
20400ebe:	d81c                	sw	a5,48(s0)
20400ec0:	40b2                	lw	ra,12(sp)
20400ec2:	4422                	lw	s0,8(sp)
20400ec4:	0141                	addi	sp,sp,16
20400ec6:	8082                	ret

20400ec8 <_cleanup_r>:
_cleanup_r():
20400ec8:	00000597          	auipc	a1,0x0
20400ecc:	f3458593          	addi	a1,a1,-204 # 20400dfc <_fflush_r>
20400ed0:	a2b9                	j	2040101e <_fwalk_reent>

20400ed2 <__sfmoreglue>:
__sfmoreglue():
20400ed2:	1141                	addi	sp,sp,-16
20400ed4:	c226                	sw	s1,4(sp)
20400ed6:	06800613          	li	a2,104
20400eda:	fff58493          	addi	s1,a1,-1
20400ede:	02c484b3          	mul	s1,s1,a2
20400ee2:	c04a                	sw	s2,0(sp)
20400ee4:	892e                	mv	s2,a1
20400ee6:	c422                	sw	s0,8(sp)
20400ee8:	c606                	sw	ra,12(sp)
20400eea:	07448593          	addi	a1,s1,116
20400eee:	26d5                	jal	204012d2 <_malloc_r>
20400ef0:	842a                	mv	s0,a0
20400ef2:	c919                	beqz	a0,20400f08 <__sfmoreglue+0x36>
20400ef4:	00052023          	sw	zero,0(a0)
20400ef8:	01252223          	sw	s2,4(a0)
20400efc:	0531                	addi	a0,a0,12
20400efe:	c408                	sw	a0,8(s0)
20400f00:	06848613          	addi	a2,s1,104
20400f04:	4581                	li	a1,0
20400f06:	2ca5                	jal	2040117e <memset>
20400f08:	8522                	mv	a0,s0
20400f0a:	40b2                	lw	ra,12(sp)
20400f0c:	4422                	lw	s0,8(sp)
20400f0e:	4492                	lw	s1,4(sp)
20400f10:	4902                	lw	s2,0(sp)
20400f12:	0141                	addi	sp,sp,16
20400f14:	8082                	ret

20400f16 <__sinit>:
__sinit():
20400f16:	4d1c                	lw	a5,24(a0)
20400f18:	e3bd                	bnez	a5,20400f7e <__sinit+0x68>
20400f1a:	1141                	addi	sp,sp,-16
20400f1c:	c606                	sw	ra,12(sp)
20400f1e:	c422                	sw	s0,8(sp)
20400f20:	00000797          	auipc	a5,0x0
20400f24:	fa878793          	addi	a5,a5,-88 # 20400ec8 <_cleanup_r>
20400f28:	d51c                	sw	a5,40(a0)
20400f2a:	5fc00797          	auipc	a5,0x5fc00
20400f2e:	7e278793          	addi	a5,a5,2018 # 8000170c <_global_impure_ptr>
20400f32:	439c                	lw	a5,0(a5)
20400f34:	04052423          	sw	zero,72(a0)
20400f38:	04052623          	sw	zero,76(a0)
20400f3c:	04052823          	sw	zero,80(a0)
20400f40:	00f51463          	bne	a0,a5,20400f48 <__sinit+0x32>
20400f44:	4785                	li	a5,1
20400f46:	cd1c                	sw	a5,24(a0)
20400f48:	842a                	mv	s0,a0
20400f4a:	281d                	jal	20400f80 <__sfp>
20400f4c:	c048                	sw	a0,4(s0)
20400f4e:	8522                	mv	a0,s0
20400f50:	2805                	jal	20400f80 <__sfp>
20400f52:	c408                	sw	a0,8(s0)
20400f54:	8522                	mv	a0,s0
20400f56:	202d                	jal	20400f80 <__sfp>
20400f58:	c448                	sw	a0,12(s0)
20400f5a:	4048                	lw	a0,4(s0)
20400f5c:	4601                	li	a2,0
20400f5e:	4591                	li	a1,4
20400f60:	3701                	jal	20400e60 <std>
20400f62:	4408                	lw	a0,8(s0)
20400f64:	4605                	li	a2,1
20400f66:	45a5                	li	a1,9
20400f68:	3de5                	jal	20400e60 <std>
20400f6a:	4448                	lw	a0,12(s0)
20400f6c:	4609                	li	a2,2
20400f6e:	45c9                	li	a1,18
20400f70:	3dc5                	jal	20400e60 <std>
20400f72:	4785                	li	a5,1
20400f74:	cc1c                	sw	a5,24(s0)
20400f76:	40b2                	lw	ra,12(sp)
20400f78:	4422                	lw	s0,8(sp)
20400f7a:	0141                	addi	sp,sp,16
20400f7c:	8082                	ret
20400f7e:	8082                	ret

20400f80 <__sfp>:
__sfp():
20400f80:	1141                	addi	sp,sp,-16
20400f82:	5fc00797          	auipc	a5,0x5fc00
20400f86:	78a78793          	addi	a5,a5,1930 # 8000170c <_global_impure_ptr>
20400f8a:	c226                	sw	s1,4(sp)
20400f8c:	4384                	lw	s1,0(a5)
20400f8e:	c04a                	sw	s2,0(sp)
20400f90:	c606                	sw	ra,12(sp)
20400f92:	4c9c                	lw	a5,24(s1)
20400f94:	c422                	sw	s0,8(sp)
20400f96:	892a                	mv	s2,a0
20400f98:	e399                	bnez	a5,20400f9e <__sfp+0x1e>
20400f9a:	8526                	mv	a0,s1
20400f9c:	3fad                	jal	20400f16 <__sinit>
20400f9e:	04848493          	addi	s1,s1,72
20400fa2:	4480                	lw	s0,8(s1)
20400fa4:	40dc                	lw	a5,4(s1)
20400fa6:	17fd                	addi	a5,a5,-1
20400fa8:	0007d663          	bgez	a5,20400fb4 <__sfp+0x34>
20400fac:	409c                	lw	a5,0(s1)
20400fae:	cfb1                	beqz	a5,2040100a <__sfp+0x8a>
20400fb0:	4084                	lw	s1,0(s1)
20400fb2:	bfc5                	j	20400fa2 <__sfp+0x22>
20400fb4:	00c41703          	lh	a4,12(s0)
20400fb8:	e731                	bnez	a4,20401004 <__sfp+0x84>
20400fba:	77c1                	lui	a5,0xffff0
20400fbc:	0785                	addi	a5,a5,1
20400fbe:	06042223          	sw	zero,100(s0)
20400fc2:	00042023          	sw	zero,0(s0)
20400fc6:	00042223          	sw	zero,4(s0)
20400fca:	00042423          	sw	zero,8(s0)
20400fce:	c45c                	sw	a5,12(s0)
20400fd0:	00042823          	sw	zero,16(s0)
20400fd4:	00042a23          	sw	zero,20(s0)
20400fd8:	00042c23          	sw	zero,24(s0)
20400fdc:	4621                	li	a2,8
20400fde:	4581                	li	a1,0
20400fe0:	05c40513          	addi	a0,s0,92
20400fe4:	2a69                	jal	2040117e <memset>
20400fe6:	02042a23          	sw	zero,52(s0)
20400fea:	02042c23          	sw	zero,56(s0)
20400fee:	04042423          	sw	zero,72(s0)
20400ff2:	04042623          	sw	zero,76(s0)
20400ff6:	8522                	mv	a0,s0
20400ff8:	40b2                	lw	ra,12(sp)
20400ffa:	4422                	lw	s0,8(sp)
20400ffc:	4492                	lw	s1,4(sp)
20400ffe:	4902                	lw	s2,0(sp)
20401000:	0141                	addi	sp,sp,16
20401002:	8082                	ret
20401004:	06840413          	addi	s0,s0,104
20401008:	bf79                	j	20400fa6 <__sfp+0x26>
2040100a:	4591                	li	a1,4
2040100c:	854a                	mv	a0,s2
2040100e:	35d1                	jal	20400ed2 <__sfmoreglue>
20401010:	c088                	sw	a0,0(s1)
20401012:	842a                	mv	s0,a0
20401014:	fd51                	bnez	a0,20400fb0 <__sfp+0x30>
20401016:	47b1                	li	a5,12
20401018:	00f92023          	sw	a5,0(s2)
2040101c:	bfe9                	j	20400ff6 <__sfp+0x76>

2040101e <_fwalk_reent>:
_fwalk_reent():
2040101e:	7179                	addi	sp,sp,-48
20401020:	d422                	sw	s0,40(sp)
20401022:	d04a                	sw	s2,32(sp)
20401024:	cc52                	sw	s4,24(sp)
20401026:	ca56                	sw	s5,20(sp)
20401028:	c85a                	sw	s6,16(sp)
2040102a:	c65e                	sw	s7,12(sp)
2040102c:	d606                	sw	ra,44(sp)
2040102e:	d226                	sw	s1,36(sp)
20401030:	ce4e                	sw	s3,28(sp)
20401032:	8a2a                	mv	s4,a0
20401034:	8aae                	mv	s5,a1
20401036:	04850413          	addi	s0,a0,72
2040103a:	4901                	li	s2,0
2040103c:	4b05                	li	s6,1
2040103e:	5bfd                	li	s7,-1
20401040:	ec09                	bnez	s0,2040105a <_fwalk_reent+0x3c>
20401042:	50b2                	lw	ra,44(sp)
20401044:	5422                	lw	s0,40(sp)
20401046:	854a                	mv	a0,s2
20401048:	5492                	lw	s1,36(sp)
2040104a:	5902                	lw	s2,32(sp)
2040104c:	49f2                	lw	s3,28(sp)
2040104e:	4a62                	lw	s4,24(sp)
20401050:	4ad2                	lw	s5,20(sp)
20401052:	4b42                	lw	s6,16(sp)
20401054:	4bb2                	lw	s7,12(sp)
20401056:	6145                	addi	sp,sp,48
20401058:	8082                	ret
2040105a:	4404                	lw	s1,8(s0)
2040105c:	00442983          	lw	s3,4(s0)
20401060:	19fd                	addi	s3,s3,-1
20401062:	0009d463          	bgez	s3,2040106a <_fwalk_reent+0x4c>
20401066:	4000                	lw	s0,0(s0)
20401068:	bfe1                	j	20401040 <_fwalk_reent+0x22>
2040106a:	00c4d783          	lhu	a5,12(s1)
2040106e:	00fb7b63          	bgeu	s6,a5,20401084 <_fwalk_reent+0x66>
20401072:	00e49783          	lh	a5,14(s1)
20401076:	01778763          	beq	a5,s7,20401084 <_fwalk_reent+0x66>
2040107a:	85a6                	mv	a1,s1
2040107c:	8552                	mv	a0,s4
2040107e:	9a82                	jalr	s5
20401080:	00a96933          	or	s2,s2,a0
20401084:	06848493          	addi	s1,s1,104
20401088:	bfe1                	j	20401060 <_fwalk_reent+0x42>

2040108a <__swhatbuf_r>:
__swhatbuf_r():
2040108a:	7119                	addi	sp,sp,-128
2040108c:	daa6                	sw	s1,116(sp)
2040108e:	84ae                	mv	s1,a1
20401090:	00e59583          	lh	a1,14(a1)
20401094:	dca2                	sw	s0,120(sp)
20401096:	de86                	sw	ra,124(sp)
20401098:	8432                	mv	s0,a2
2040109a:	0005dc63          	bgez	a1,204010b2 <__swhatbuf_r+0x28>
2040109e:	00c4d783          	lhu	a5,12(s1)
204010a2:	0006a023          	sw	zero,0(a3)
204010a6:	0807f793          	andi	a5,a5,128
204010aa:	e39d                	bnez	a5,204010d0 <__swhatbuf_r+0x46>
204010ac:	40000793          	li	a5,1024
204010b0:	a015                	j	204010d4 <__swhatbuf_r+0x4a>
204010b2:	0830                	addi	a2,sp,24
204010b4:	c636                	sw	a3,12(sp)
204010b6:	27b1                	jal	20401802 <_fstat_r>
204010b8:	46b2                	lw	a3,12(sp)
204010ba:	fe0542e3          	bltz	a0,2040109e <__swhatbuf_r+0x14>
204010be:	4772                	lw	a4,28(sp)
204010c0:	67bd                	lui	a5,0xf
204010c2:	8ff9                	and	a5,a5,a4
204010c4:	7779                	lui	a4,0xffffe
204010c6:	97ba                	add	a5,a5,a4
204010c8:	0017b793          	seqz	a5,a5
204010cc:	c29c                	sw	a5,0(a3)
204010ce:	bff9                	j	204010ac <__swhatbuf_r+0x22>
204010d0:	04000793          	li	a5,64
204010d4:	c01c                	sw	a5,0(s0)
204010d6:	50f6                	lw	ra,124(sp)
204010d8:	5466                	lw	s0,120(sp)
204010da:	54d6                	lw	s1,116(sp)
204010dc:	4501                	li	a0,0
204010de:	6109                	addi	sp,sp,128
204010e0:	8082                	ret

204010e2 <__smakebuf_r>:
__smakebuf_r():
204010e2:	00c5d783          	lhu	a5,12(a1)
204010e6:	1101                	addi	sp,sp,-32
204010e8:	cc22                	sw	s0,24(sp)
204010ea:	ce06                	sw	ra,28(sp)
204010ec:	ca26                	sw	s1,20(sp)
204010ee:	c84a                	sw	s2,16(sp)
204010f0:	8b89                	andi	a5,a5,2
204010f2:	842e                	mv	s0,a1
204010f4:	cf89                	beqz	a5,2040110e <__smakebuf_r+0x2c>
204010f6:	04740793          	addi	a5,s0,71
204010fa:	c01c                	sw	a5,0(s0)
204010fc:	c81c                	sw	a5,16(s0)
204010fe:	4785                	li	a5,1
20401100:	c85c                	sw	a5,20(s0)
20401102:	40f2                	lw	ra,28(sp)
20401104:	4462                	lw	s0,24(sp)
20401106:	44d2                	lw	s1,20(sp)
20401108:	4942                	lw	s2,16(sp)
2040110a:	6105                	addi	sp,sp,32
2040110c:	8082                	ret
2040110e:	0074                	addi	a3,sp,12
20401110:	0030                	addi	a2,sp,8
20401112:	84aa                	mv	s1,a0
20401114:	3f9d                	jal	2040108a <__swhatbuf_r>
20401116:	45a2                	lw	a1,8(sp)
20401118:	892a                	mv	s2,a0
2040111a:	8526                	mv	a0,s1
2040111c:	2a5d                	jal	204012d2 <_malloc_r>
2040111e:	ed01                	bnez	a0,20401136 <__smakebuf_r+0x54>
20401120:	00c41783          	lh	a5,12(s0)
20401124:	2007f713          	andi	a4,a5,512
20401128:	ff69                	bnez	a4,20401102 <__smakebuf_r+0x20>
2040112a:	9bf1                	andi	a5,a5,-4
2040112c:	0027e793          	ori	a5,a5,2
20401130:	00f41623          	sh	a5,12(s0)
20401134:	b7c9                	j	204010f6 <__smakebuf_r+0x14>
20401136:	00000797          	auipc	a5,0x0
2040113a:	d9278793          	addi	a5,a5,-622 # 20400ec8 <_cleanup_r>
2040113e:	d49c                	sw	a5,40(s1)
20401140:	00c45783          	lhu	a5,12(s0)
20401144:	c008                	sw	a0,0(s0)
20401146:	c808                	sw	a0,16(s0)
20401148:	0807e793          	ori	a5,a5,128
2040114c:	00f41623          	sh	a5,12(s0)
20401150:	47a2                	lw	a5,8(sp)
20401152:	c85c                	sw	a5,20(s0)
20401154:	47b2                	lw	a5,12(sp)
20401156:	cf89                	beqz	a5,20401170 <__smakebuf_r+0x8e>
20401158:	00e41583          	lh	a1,14(s0)
2040115c:	8526                	mv	a0,s1
2040115e:	2dd9                	jal	20401834 <_isatty_r>
20401160:	c901                	beqz	a0,20401170 <__smakebuf_r+0x8e>
20401162:	00c45783          	lhu	a5,12(s0)
20401166:	9bf1                	andi	a5,a5,-4
20401168:	0017e793          	ori	a5,a5,1
2040116c:	00f41623          	sh	a5,12(s0)
20401170:	00c45783          	lhu	a5,12(s0)
20401174:	00f96933          	or	s2,s2,a5
20401178:	01241623          	sh	s2,12(s0)
2040117c:	b759                	j	20401102 <__smakebuf_r+0x20>

2040117e <memset>:
memset():
2040117e:	433d                	li	t1,15
20401180:	872a                	mv	a4,a0
20401182:	02c37363          	bgeu	t1,a2,204011a8 <memset+0x2a>
20401186:	00f77793          	andi	a5,a4,15
2040118a:	efbd                	bnez	a5,20401208 <memset+0x8a>
2040118c:	e5ad                	bnez	a1,204011f6 <memset+0x78>
2040118e:	ff067693          	andi	a3,a2,-16
20401192:	8a3d                	andi	a2,a2,15
20401194:	96ba                	add	a3,a3,a4
20401196:	c30c                	sw	a1,0(a4)
20401198:	c34c                	sw	a1,4(a4)
2040119a:	c70c                	sw	a1,8(a4)
2040119c:	c74c                	sw	a1,12(a4)
2040119e:	0741                	addi	a4,a4,16
204011a0:	fed76be3          	bltu	a4,a3,20401196 <memset+0x18>
204011a4:	e211                	bnez	a2,204011a8 <memset+0x2a>
204011a6:	8082                	ret
204011a8:	40c306b3          	sub	a3,t1,a2
204011ac:	068a                	slli	a3,a3,0x2
204011ae:	00000297          	auipc	t0,0x0
204011b2:	9696                	add	a3,a3,t0
204011b4:	00a68067          	jr	10(a3)
204011b8:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffac56>
204011bc:	00b706a3          	sb	a1,13(a4)
204011c0:	00b70623          	sb	a1,12(a4)
204011c4:	00b705a3          	sb	a1,11(a4)
204011c8:	00b70523          	sb	a1,10(a4)
204011cc:	00b704a3          	sb	a1,9(a4)
204011d0:	00b70423          	sb	a1,8(a4)
204011d4:	00b703a3          	sb	a1,7(a4)
204011d8:	00b70323          	sb	a1,6(a4)
204011dc:	00b702a3          	sb	a1,5(a4)
204011e0:	00b70223          	sb	a1,4(a4)
204011e4:	00b701a3          	sb	a1,3(a4)
204011e8:	00b70123          	sb	a1,2(a4)
204011ec:	00b700a3          	sb	a1,1(a4)
204011f0:	00b70023          	sb	a1,0(a4)
204011f4:	8082                	ret
204011f6:	0ff5f593          	andi	a1,a1,255
204011fa:	00859693          	slli	a3,a1,0x8
204011fe:	8dd5                	or	a1,a1,a3
20401200:	01059693          	slli	a3,a1,0x10
20401204:	8dd5                	or	a1,a1,a3
20401206:	b761                	j	2040118e <memset+0x10>
20401208:	00279693          	slli	a3,a5,0x2
2040120c:	00000297          	auipc	t0,0x0
20401210:	9696                	add	a3,a3,t0
20401212:	8286                	mv	t0,ra
20401214:	fa8680e7          	jalr	-88(a3)
20401218:	8096                	mv	ra,t0
2040121a:	17c1                	addi	a5,a5,-16
2040121c:	8f1d                	sub	a4,a4,a5
2040121e:	963e                	add	a2,a2,a5
20401220:	f8c374e3          	bgeu	t1,a2,204011a8 <memset+0x2a>
20401224:	b7a5                	j	2040118c <memset+0xe>

20401226 <_free_r>:
_free_r():
20401226:	c5cd                	beqz	a1,204012d0 <_free_r+0xaa>
20401228:	ffc5a783          	lw	a5,-4(a1)
2040122c:	1141                	addi	sp,sp,-16
2040122e:	c422                	sw	s0,8(sp)
20401230:	c606                	sw	ra,12(sp)
20401232:	c226                	sw	s1,4(sp)
20401234:	ffc58413          	addi	s0,a1,-4
20401238:	0007d363          	bgez	a5,2040123e <_free_r+0x18>
2040123c:	943e                	add	s0,s0,a5
2040123e:	84aa                	mv	s1,a0
20401240:	2d8d                	jal	204018b2 <__malloc_lock>
20401242:	5fc00797          	auipc	a5,0x5fc00
20401246:	4f278793          	addi	a5,a5,1266 # 80001734 <__malloc_free_list>
2040124a:	439c                	lw	a5,0(a5)
2040124c:	ef89                	bnez	a5,20401266 <_free_r+0x40>
2040124e:	00042223          	sw	zero,4(s0)
20401252:	5fc00797          	auipc	a5,0x5fc00
20401256:	4e87a123          	sw	s0,1250(a5) # 80001734 <__malloc_free_list>
2040125a:	4422                	lw	s0,8(sp)
2040125c:	40b2                	lw	ra,12(sp)
2040125e:	8526                	mv	a0,s1
20401260:	4492                	lw	s1,4(sp)
20401262:	0141                	addi	sp,sp,16
20401264:	ad81                	j	204018b4 <__malloc_unlock>
20401266:	00f47e63          	bgeu	s0,a5,20401282 <_free_r+0x5c>
2040126a:	4014                	lw	a3,0(s0)
2040126c:	00d40733          	add	a4,s0,a3
20401270:	00e79663          	bne	a5,a4,2040127c <_free_r+0x56>
20401274:	4398                	lw	a4,0(a5)
20401276:	43dc                	lw	a5,4(a5)
20401278:	9736                	add	a4,a4,a3
2040127a:	c018                	sw	a4,0(s0)
2040127c:	c05c                	sw	a5,4(s0)
2040127e:	bfd1                	j	20401252 <_free_r+0x2c>
20401280:	87ba                	mv	a5,a4
20401282:	43d8                	lw	a4,4(a5)
20401284:	c319                	beqz	a4,2040128a <_free_r+0x64>
20401286:	fee47de3          	bgeu	s0,a4,20401280 <_free_r+0x5a>
2040128a:	4394                	lw	a3,0(a5)
2040128c:	00d78633          	add	a2,a5,a3
20401290:	00861f63          	bne	a2,s0,204012ae <_free_r+0x88>
20401294:	4010                	lw	a2,0(s0)
20401296:	96b2                	add	a3,a3,a2
20401298:	c394                	sw	a3,0(a5)
2040129a:	00d78633          	add	a2,a5,a3
2040129e:	fac71ee3          	bne	a4,a2,2040125a <_free_r+0x34>
204012a2:	4310                	lw	a2,0(a4)
204012a4:	4358                	lw	a4,4(a4)
204012a6:	96b2                	add	a3,a3,a2
204012a8:	c394                	sw	a3,0(a5)
204012aa:	c3d8                	sw	a4,4(a5)
204012ac:	b77d                	j	2040125a <_free_r+0x34>
204012ae:	00c47563          	bgeu	s0,a2,204012b8 <_free_r+0x92>
204012b2:	47b1                	li	a5,12
204012b4:	c09c                	sw	a5,0(s1)
204012b6:	b755                	j	2040125a <_free_r+0x34>
204012b8:	4010                	lw	a2,0(s0)
204012ba:	00c406b3          	add	a3,s0,a2
204012be:	00d71663          	bne	a4,a3,204012ca <_free_r+0xa4>
204012c2:	4314                	lw	a3,0(a4)
204012c4:	4358                	lw	a4,4(a4)
204012c6:	96b2                	add	a3,a3,a2
204012c8:	c014                	sw	a3,0(s0)
204012ca:	c058                	sw	a4,4(s0)
204012cc:	c3c0                	sw	s0,4(a5)
204012ce:	b771                	j	2040125a <_free_r+0x34>
204012d0:	8082                	ret

204012d2 <_malloc_r>:
_malloc_r():
204012d2:	1101                	addi	sp,sp,-32
204012d4:	ca26                	sw	s1,20(sp)
204012d6:	00358493          	addi	s1,a1,3
204012da:	98f1                	andi	s1,s1,-4
204012dc:	ce06                	sw	ra,28(sp)
204012de:	cc22                	sw	s0,24(sp)
204012e0:	c84a                	sw	s2,16(sp)
204012e2:	c64e                	sw	s3,12(sp)
204012e4:	04a1                	addi	s1,s1,8
204012e6:	47b1                	li	a5,12
204012e8:	04f4f763          	bgeu	s1,a5,20401336 <_malloc_r+0x64>
204012ec:	44b1                	li	s1,12
204012ee:	04b4e663          	bltu	s1,a1,2040133a <_malloc_r+0x68>
204012f2:	892a                	mv	s2,a0
204012f4:	2b7d                	jal	204018b2 <__malloc_lock>
204012f6:	5fc00797          	auipc	a5,0x5fc00
204012fa:	43e78793          	addi	a5,a5,1086 # 80001734 <__malloc_free_list>
204012fe:	4398                	lw	a4,0(a5)
20401300:	843a                	mv	s0,a4
20401302:	e431                	bnez	s0,2040134e <_malloc_r+0x7c>
20401304:	5fc00797          	auipc	a5,0x5fc00
20401308:	43478793          	addi	a5,a5,1076 # 80001738 <__malloc_sbrk_start>
2040130c:	439c                	lw	a5,0(a5)
2040130e:	eb81                	bnez	a5,2040131e <_malloc_r+0x4c>
20401310:	4581                	li	a1,0
20401312:	854a                	mv	a0,s2
20401314:	2645                	jal	204016b4 <_sbrk_r>
20401316:	5fc00797          	auipc	a5,0x5fc00
2040131a:	42a7a123          	sw	a0,1058(a5) # 80001738 <__malloc_sbrk_start>
2040131e:	85a6                	mv	a1,s1
20401320:	854a                	mv	a0,s2
20401322:	2e49                	jal	204016b4 <_sbrk_r>
20401324:	59fd                	li	s3,-1
20401326:	07351963          	bne	a0,s3,20401398 <_malloc_r+0xc6>
2040132a:	47b1                	li	a5,12
2040132c:	00f92023          	sw	a5,0(s2)
20401330:	854a                	mv	a0,s2
20401332:	2349                	jal	204018b4 <__malloc_unlock>
20401334:	a029                	j	2040133e <_malloc_r+0x6c>
20401336:	fa04dce3          	bgez	s1,204012ee <_malloc_r+0x1c>
2040133a:	47b1                	li	a5,12
2040133c:	c11c                	sw	a5,0(a0)
2040133e:	4501                	li	a0,0
20401340:	40f2                	lw	ra,28(sp)
20401342:	4462                	lw	s0,24(sp)
20401344:	44d2                	lw	s1,20(sp)
20401346:	4942                	lw	s2,16(sp)
20401348:	49b2                	lw	s3,12(sp)
2040134a:	6105                	addi	sp,sp,32
2040134c:	8082                	ret
2040134e:	401c                	lw	a5,0(s0)
20401350:	8f85                	sub	a5,a5,s1
20401352:	0407c063          	bltz	a5,20401392 <_malloc_r+0xc0>
20401356:	46ad                	li	a3,11
20401358:	00f6f663          	bgeu	a3,a5,20401364 <_malloc_r+0x92>
2040135c:	c01c                	sw	a5,0(s0)
2040135e:	943e                	add	s0,s0,a5
20401360:	c004                	sw	s1,0(s0)
20401362:	a801                	j	20401372 <_malloc_r+0xa0>
20401364:	405c                	lw	a5,4(s0)
20401366:	02871463          	bne	a4,s0,2040138e <_malloc_r+0xbc>
2040136a:	5fc00717          	auipc	a4,0x5fc00
2040136e:	3cf72523          	sw	a5,970(a4) # 80001734 <__malloc_free_list>
20401372:	854a                	mv	a0,s2
20401374:	2381                	jal	204018b4 <__malloc_unlock>
20401376:	00b40513          	addi	a0,s0,11
2040137a:	00440793          	addi	a5,s0,4
2040137e:	9961                	andi	a0,a0,-8
20401380:	40f50733          	sub	a4,a0,a5
20401384:	df55                	beqz	a4,20401340 <_malloc_r+0x6e>
20401386:	943a                	add	s0,s0,a4
20401388:	8f89                	sub	a5,a5,a0
2040138a:	c01c                	sw	a5,0(s0)
2040138c:	bf55                	j	20401340 <_malloc_r+0x6e>
2040138e:	c35c                	sw	a5,4(a4)
20401390:	b7cd                	j	20401372 <_malloc_r+0xa0>
20401392:	8722                	mv	a4,s0
20401394:	4040                	lw	s0,4(s0)
20401396:	b7b5                	j	20401302 <_malloc_r+0x30>
20401398:	00350413          	addi	s0,a0,3
2040139c:	9871                	andi	s0,s0,-4
2040139e:	fc8501e3          	beq	a0,s0,20401360 <_malloc_r+0x8e>
204013a2:	40a405b3          	sub	a1,s0,a0
204013a6:	854a                	mv	a0,s2
204013a8:	2631                	jal	204016b4 <_sbrk_r>
204013aa:	fb351be3          	bne	a0,s3,20401360 <_malloc_r+0x8e>
204013ae:	bfb5                	j	2040132a <_malloc_r+0x58>

204013b0 <__sfputc_r>:
__sfputc_r():
204013b0:	461c                	lw	a5,8(a2)
204013b2:	17fd                	addi	a5,a5,-1
204013b4:	c61c                	sw	a5,8(a2)
204013b6:	0007da63          	bgez	a5,204013ca <__sfputc_r+0x1a>
204013ba:	4e18                	lw	a4,24(a2)
204013bc:	00e7c563          	blt	a5,a4,204013c6 <__sfputc_r+0x16>
204013c0:	47a9                	li	a5,10
204013c2:	00f59463          	bne	a1,a5,204013ca <__sfputc_r+0x1a>
204013c6:	f1cff06f          	j	20400ae2 <__swbuf_r>
204013ca:	421c                	lw	a5,0(a2)
204013cc:	852e                	mv	a0,a1
204013ce:	00178713          	addi	a4,a5,1
204013d2:	c218                	sw	a4,0(a2)
204013d4:	00b78023          	sb	a1,0(a5)
204013d8:	8082                	ret

204013da <__sfputs_r>:
__sfputs_r():
204013da:	1101                	addi	sp,sp,-32
204013dc:	cc22                	sw	s0,24(sp)
204013de:	ca26                	sw	s1,20(sp)
204013e0:	c84a                	sw	s2,16(sp)
204013e2:	c64e                	sw	s3,12(sp)
204013e4:	c452                	sw	s4,8(sp)
204013e6:	ce06                	sw	ra,28(sp)
204013e8:	892a                	mv	s2,a0
204013ea:	89ae                	mv	s3,a1
204013ec:	8432                	mv	s0,a2
204013ee:	00d604b3          	add	s1,a2,a3
204013f2:	5a7d                	li	s4,-1
204013f4:	00941463          	bne	s0,s1,204013fc <__sfputs_r+0x22>
204013f8:	4501                	li	a0,0
204013fa:	a809                	j	2040140c <__sfputs_r+0x32>
204013fc:	00044583          	lbu	a1,0(s0)
20401400:	864e                	mv	a2,s3
20401402:	854a                	mv	a0,s2
20401404:	3775                	jal	204013b0 <__sfputc_r>
20401406:	0405                	addi	s0,s0,1
20401408:	ff4516e3          	bne	a0,s4,204013f4 <__sfputs_r+0x1a>
2040140c:	40f2                	lw	ra,28(sp)
2040140e:	4462                	lw	s0,24(sp)
20401410:	44d2                	lw	s1,20(sp)
20401412:	4942                	lw	s2,16(sp)
20401414:	49b2                	lw	s3,12(sp)
20401416:	4a22                	lw	s4,8(sp)
20401418:	6105                	addi	sp,sp,32
2040141a:	8082                	ret

2040141c <_vfiprintf_r>:
_vfiprintf_r():
2040141c:	7135                	addi	sp,sp,-160
2040141e:	cd22                	sw	s0,152(sp)
20401420:	cb26                	sw	s1,148(sp)
20401422:	c94a                	sw	s2,144(sp)
20401424:	c74e                	sw	s3,140(sp)
20401426:	cf06                	sw	ra,156(sp)
20401428:	c552                	sw	s4,136(sp)
2040142a:	c356                	sw	s5,132(sp)
2040142c:	c15a                	sw	s6,128(sp)
2040142e:	dede                	sw	s7,124(sp)
20401430:	dce2                	sw	s8,120(sp)
20401432:	dae6                	sw	s9,116(sp)
20401434:	89aa                	mv	s3,a0
20401436:	84ae                	mv	s1,a1
20401438:	8932                	mv	s2,a2
2040143a:	8436                	mv	s0,a3
2040143c:	c501                	beqz	a0,20401444 <_vfiprintf_r+0x28>
2040143e:	4d1c                	lw	a5,24(a0)
20401440:	e391                	bnez	a5,20401444 <_vfiprintf_r+0x28>
20401442:	3cd1                	jal	20400f16 <__sinit>
20401444:	00004797          	auipc	a5,0x4
20401448:	4bc78793          	addi	a5,a5,1212 # 20405900 <__sf_fake_stdin>
2040144c:	0cf49b63          	bne	s1,a5,20401522 <_vfiprintf_r+0x106>
20401450:	0049a483          	lw	s1,4(s3)
20401454:	00c4d783          	lhu	a5,12(s1)
20401458:	8ba1                	andi	a5,a5,8
2040145a:	c7f5                	beqz	a5,20401546 <_vfiprintf_r+0x12a>
2040145c:	489c                	lw	a5,16(s1)
2040145e:	c7e5                	beqz	a5,20401546 <_vfiprintf_r+0x12a>
20401460:	02000793          	li	a5,32
20401464:	02f104a3          	sb	a5,41(sp)
20401468:	03000793          	li	a5,48
2040146c:	d202                	sw	zero,36(sp)
2040146e:	02f10523          	sb	a5,42(sp)
20401472:	c622                	sw	s0,12(sp)
20401474:	02500b93          	li	s7,37
20401478:	00004a97          	auipc	s5,0x4
2040147c:	4c8a8a93          	addi	s5,s5,1224 # 20405940 <__sf_fake_stdout+0x20>
20401480:	4c05                	li	s8,1
20401482:	4b29                	li	s6,10
20401484:	844a                	mv	s0,s2
20401486:	00044783          	lbu	a5,0(s0)
2040148a:	c399                	beqz	a5,20401490 <_vfiprintf_r+0x74>
2040148c:	0f779063          	bne	a5,s7,2040156c <_vfiprintf_r+0x150>
20401490:	41240cb3          	sub	s9,s0,s2
20401494:	000c8d63          	beqz	s9,204014ae <_vfiprintf_r+0x92>
20401498:	86e6                	mv	a3,s9
2040149a:	864a                	mv	a2,s2
2040149c:	85a6                	mv	a1,s1
2040149e:	854e                	mv	a0,s3
204014a0:	3f2d                	jal	204013da <__sfputs_r>
204014a2:	57fd                	li	a5,-1
204014a4:	1ef50663          	beq	a0,a5,20401690 <_vfiprintf_r+0x274>
204014a8:	5692                	lw	a3,36(sp)
204014aa:	96e6                	add	a3,a3,s9
204014ac:	d236                	sw	a3,36(sp)
204014ae:	00044783          	lbu	a5,0(s0)
204014b2:	1c078f63          	beqz	a5,20401690 <_vfiprintf_r+0x274>
204014b6:	57fd                	li	a5,-1
204014b8:	00140913          	addi	s2,s0,1
204014bc:	c802                	sw	zero,16(sp)
204014be:	ce02                	sw	zero,28(sp)
204014c0:	ca3e                	sw	a5,20(sp)
204014c2:	cc02                	sw	zero,24(sp)
204014c4:	040109a3          	sb	zero,83(sp)
204014c8:	d482                	sw	zero,104(sp)
204014ca:	00094583          	lbu	a1,0(s2)
204014ce:	4615                	li	a2,5
204014d0:	8556                	mv	a0,s5
204014d2:	26d9                	jal	20401898 <memchr>
204014d4:	00190413          	addi	s0,s2,1
204014d8:	47c2                	lw	a5,16(sp)
204014da:	e959                	bnez	a0,20401570 <_vfiprintf_r+0x154>
204014dc:	0107f713          	andi	a4,a5,16
204014e0:	c709                	beqz	a4,204014ea <_vfiprintf_r+0xce>
204014e2:	02000713          	li	a4,32
204014e6:	04e109a3          	sb	a4,83(sp)
204014ea:	0087f713          	andi	a4,a5,8
204014ee:	c709                	beqz	a4,204014f8 <_vfiprintf_r+0xdc>
204014f0:	02b00713          	li	a4,43
204014f4:	04e109a3          	sb	a4,83(sp)
204014f8:	00094683          	lbu	a3,0(s2)
204014fc:	02a00713          	li	a4,42
20401500:	08e68063          	beq	a3,a4,20401580 <_vfiprintf_r+0x164>
20401504:	47f2                	lw	a5,28(sp)
20401506:	844a                	mv	s0,s2
20401508:	4681                	li	a3,0
2040150a:	4625                	li	a2,9
2040150c:	00044703          	lbu	a4,0(s0)
20401510:	00140593          	addi	a1,s0,1
20401514:	fd070713          	addi	a4,a4,-48
20401518:	0ae67963          	bgeu	a2,a4,204015ca <_vfiprintf_r+0x1ae>
2040151c:	cab5                	beqz	a3,20401590 <_vfiprintf_r+0x174>
2040151e:	ce3e                	sw	a5,28(sp)
20401520:	a885                	j	20401590 <_vfiprintf_r+0x174>
20401522:	00004797          	auipc	a5,0x4
20401526:	3fe78793          	addi	a5,a5,1022 # 20405920 <__sf_fake_stdout>
2040152a:	00f49563          	bne	s1,a5,20401534 <_vfiprintf_r+0x118>
2040152e:	0089a483          	lw	s1,8(s3)
20401532:	b70d                	j	20401454 <_vfiprintf_r+0x38>
20401534:	00004797          	auipc	a5,0x4
20401538:	3ac78793          	addi	a5,a5,940 # 204058e0 <__sf_fake_stderr>
2040153c:	f0f49ce3          	bne	s1,a5,20401454 <_vfiprintf_r+0x38>
20401540:	00c9a483          	lw	s1,12(s3)
20401544:	bf01                	j	20401454 <_vfiprintf_r+0x38>
20401546:	85a6                	mv	a1,s1
20401548:	854e                	mv	a0,s3
2040154a:	e58ff0ef          	jal	ra,20400ba2 <__swsetup_r>
2040154e:	d909                	beqz	a0,20401460 <_vfiprintf_r+0x44>
20401550:	557d                	li	a0,-1
20401552:	40fa                	lw	ra,156(sp)
20401554:	446a                	lw	s0,152(sp)
20401556:	44da                	lw	s1,148(sp)
20401558:	494a                	lw	s2,144(sp)
2040155a:	49ba                	lw	s3,140(sp)
2040155c:	4a2a                	lw	s4,136(sp)
2040155e:	4a9a                	lw	s5,132(sp)
20401560:	4b0a                	lw	s6,128(sp)
20401562:	5bf6                	lw	s7,124(sp)
20401564:	5c66                	lw	s8,120(sp)
20401566:	5cd6                	lw	s9,116(sp)
20401568:	610d                	addi	sp,sp,160
2040156a:	8082                	ret
2040156c:	0405                	addi	s0,s0,1
2040156e:	bf21                	j	20401486 <_vfiprintf_r+0x6a>
20401570:	41550533          	sub	a0,a0,s5
20401574:	00ac1533          	sll	a0,s8,a0
20401578:	8fc9                	or	a5,a5,a0
2040157a:	c83e                	sw	a5,16(sp)
2040157c:	8922                	mv	s2,s0
2040157e:	b7b1                	j	204014ca <_vfiprintf_r+0xae>
20401580:	4732                	lw	a4,12(sp)
20401582:	00470693          	addi	a3,a4,4
20401586:	4318                	lw	a4,0(a4)
20401588:	c636                	sw	a3,12(sp)
2040158a:	02074963          	bltz	a4,204015bc <_vfiprintf_r+0x1a0>
2040158e:	ce3a                	sw	a4,28(sp)
20401590:	00044703          	lbu	a4,0(s0)
20401594:	02e00793          	li	a5,46
20401598:	04f71f63          	bne	a4,a5,204015f6 <_vfiprintf_r+0x1da>
2040159c:	00144703          	lbu	a4,1(s0)
204015a0:	02a00793          	li	a5,42
204015a4:	02f71b63          	bne	a4,a5,204015da <_vfiprintf_r+0x1be>
204015a8:	47b2                	lw	a5,12(sp)
204015aa:	0409                	addi	s0,s0,2
204015ac:	00478713          	addi	a4,a5,4
204015b0:	439c                	lw	a5,0(a5)
204015b2:	c63a                	sw	a4,12(sp)
204015b4:	0207c163          	bltz	a5,204015d6 <_vfiprintf_r+0x1ba>
204015b8:	ca3e                	sw	a5,20(sp)
204015ba:	a835                	j	204015f6 <_vfiprintf_r+0x1da>
204015bc:	40e00733          	neg	a4,a4
204015c0:	0027e793          	ori	a5,a5,2
204015c4:	ce3a                	sw	a4,28(sp)
204015c6:	c83e                	sw	a5,16(sp)
204015c8:	b7e1                	j	20401590 <_vfiprintf_r+0x174>
204015ca:	036787b3          	mul	a5,a5,s6
204015ce:	4685                	li	a3,1
204015d0:	842e                	mv	s0,a1
204015d2:	97ba                	add	a5,a5,a4
204015d4:	bf25                	j	2040150c <_vfiprintf_r+0xf0>
204015d6:	57fd                	li	a5,-1
204015d8:	b7c5                	j	204015b8 <_vfiprintf_r+0x19c>
204015da:	0405                	addi	s0,s0,1
204015dc:	ca02                	sw	zero,20(sp)
204015de:	4681                	li	a3,0
204015e0:	4781                	li	a5,0
204015e2:	4625                	li	a2,9
204015e4:	00044703          	lbu	a4,0(s0)
204015e8:	00140593          	addi	a1,s0,1
204015ec:	fd070713          	addi	a4,a4,-48
204015f0:	06e67663          	bgeu	a2,a4,2040165c <_vfiprintf_r+0x240>
204015f4:	f2f1                	bnez	a3,204015b8 <_vfiprintf_r+0x19c>
204015f6:	00044583          	lbu	a1,0(s0)
204015fa:	460d                	li	a2,3
204015fc:	00004517          	auipc	a0,0x4
20401600:	34c50513          	addi	a0,a0,844 # 20405948 <__sf_fake_stdout+0x28>
20401604:	2c51                	jal	20401898 <memchr>
20401606:	cd11                	beqz	a0,20401622 <_vfiprintf_r+0x206>
20401608:	00004797          	auipc	a5,0x4
2040160c:	34078793          	addi	a5,a5,832 # 20405948 <__sf_fake_stdout+0x28>
20401610:	8d1d                	sub	a0,a0,a5
20401612:	04000793          	li	a5,64
20401616:	00a797b3          	sll	a5,a5,a0
2040161a:	4542                	lw	a0,16(sp)
2040161c:	0405                	addi	s0,s0,1
2040161e:	8d5d                	or	a0,a0,a5
20401620:	c82a                	sw	a0,16(sp)
20401622:	00044583          	lbu	a1,0(s0)
20401626:	4619                	li	a2,6
20401628:	00004517          	auipc	a0,0x4
2040162c:	32450513          	addi	a0,a0,804 # 2040594c <__sf_fake_stdout+0x2c>
20401630:	00140913          	addi	s2,s0,1
20401634:	02b10423          	sb	a1,40(sp)
20401638:	2485                	jal	20401898 <memchr>
2040163a:	c13d                	beqz	a0,204016a0 <_vfiprintf_r+0x284>
2040163c:	dfbff797          	auipc	a5,0xdfbff
20401640:	9c478793          	addi	a5,a5,-1596 # 0 <__metal_boot_hart>
20401644:	e795                	bnez	a5,20401670 <_vfiprintf_r+0x254>
20401646:	4742                	lw	a4,16(sp)
20401648:	47b2                	lw	a5,12(sp)
2040164a:	10077713          	andi	a4,a4,256
2040164e:	cf09                	beqz	a4,20401668 <_vfiprintf_r+0x24c>
20401650:	0791                	addi	a5,a5,4
20401652:	c63e                	sw	a5,12(sp)
20401654:	5792                	lw	a5,36(sp)
20401656:	97d2                	add	a5,a5,s4
20401658:	d23e                	sw	a5,36(sp)
2040165a:	b52d                	j	20401484 <_vfiprintf_r+0x68>
2040165c:	036787b3          	mul	a5,a5,s6
20401660:	4685                	li	a3,1
20401662:	842e                	mv	s0,a1
20401664:	97ba                	add	a5,a5,a4
20401666:	bfbd                	j	204015e4 <_vfiprintf_r+0x1c8>
20401668:	079d                	addi	a5,a5,7
2040166a:	9be1                	andi	a5,a5,-8
2040166c:	07a1                	addi	a5,a5,8
2040166e:	b7d5                	j	20401652 <_vfiprintf_r+0x236>
20401670:	0078                	addi	a4,sp,12
20401672:	00000697          	auipc	a3,0x0
20401676:	d6868693          	addi	a3,a3,-664 # 204013da <__sfputs_r>
2040167a:	8626                	mv	a2,s1
2040167c:	080c                	addi	a1,sp,16
2040167e:	854e                	mv	a0,s3
20401680:	00000097          	auipc	ra,0x0
20401684:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
20401688:	57fd                	li	a5,-1
2040168a:	8a2a                	mv	s4,a0
2040168c:	fcf514e3          	bne	a0,a5,20401654 <_vfiprintf_r+0x238>
20401690:	00c4d783          	lhu	a5,12(s1)
20401694:	0407f793          	andi	a5,a5,64
20401698:	ea079ce3          	bnez	a5,20401550 <_vfiprintf_r+0x134>
2040169c:	5512                	lw	a0,36(sp)
2040169e:	bd55                	j	20401552 <_vfiprintf_r+0x136>
204016a0:	0078                	addi	a4,sp,12
204016a2:	00000697          	auipc	a3,0x0
204016a6:	d3868693          	addi	a3,a3,-712 # 204013da <__sfputs_r>
204016aa:	8626                	mv	a2,s1
204016ac:	080c                	addi	a1,sp,16
204016ae:	854e                	mv	a0,s3
204016b0:	2e09                	jal	204019c2 <_printf_i>
204016b2:	bfd9                	j	20401688 <_vfiprintf_r+0x26c>

204016b4 <_sbrk_r>:
_sbrk_r():
204016b4:	1141                	addi	sp,sp,-16
204016b6:	c422                	sw	s0,8(sp)
204016b8:	842a                	mv	s0,a0
204016ba:	852e                	mv	a0,a1
204016bc:	5fc01797          	auipc	a5,0x5fc01
204016c0:	0e07ac23          	sw	zero,248(a5) # 800027b4 <errno>
204016c4:	c606                	sw	ra,12(sp)
204016c6:	2579                	jal	20401d54 <_sbrk>
204016c8:	57fd                	li	a5,-1
204016ca:	00f51963          	bne	a0,a5,204016dc <_sbrk_r+0x28>
204016ce:	5fc01797          	auipc	a5,0x5fc01
204016d2:	0e678793          	addi	a5,a5,230 # 800027b4 <errno>
204016d6:	439c                	lw	a5,0(a5)
204016d8:	c391                	beqz	a5,204016dc <_sbrk_r+0x28>
204016da:	c01c                	sw	a5,0(s0)
204016dc:	40b2                	lw	ra,12(sp)
204016de:	4422                	lw	s0,8(sp)
204016e0:	0141                	addi	sp,sp,16
204016e2:	8082                	ret

204016e4 <__sread>:
__sread():
204016e4:	1141                	addi	sp,sp,-16
204016e6:	c422                	sw	s0,8(sp)
204016e8:	842e                	mv	s0,a1
204016ea:	00e59583          	lh	a1,14(a1)
204016ee:	c606                	sw	ra,12(sp)
204016f0:	2b95                	jal	20401c64 <_read_r>
204016f2:	00054963          	bltz	a0,20401704 <__sread+0x20>
204016f6:	487c                	lw	a5,84(s0)
204016f8:	97aa                	add	a5,a5,a0
204016fa:	c87c                	sw	a5,84(s0)
204016fc:	40b2                	lw	ra,12(sp)
204016fe:	4422                	lw	s0,8(sp)
20401700:	0141                	addi	sp,sp,16
20401702:	8082                	ret
20401704:	00c45783          	lhu	a5,12(s0)
20401708:	777d                	lui	a4,0xfffff
2040170a:	177d                	addi	a4,a4,-1
2040170c:	8ff9                	and	a5,a5,a4
2040170e:	00f41623          	sh	a5,12(s0)
20401712:	b7ed                	j	204016fc <__sread+0x18>

20401714 <__swrite>:
__swrite():
20401714:	00c5d783          	lhu	a5,12(a1)
20401718:	1101                	addi	sp,sp,-32
2040171a:	cc22                	sw	s0,24(sp)
2040171c:	ca26                	sw	s1,20(sp)
2040171e:	c84a                	sw	s2,16(sp)
20401720:	c64e                	sw	s3,12(sp)
20401722:	ce06                	sw	ra,28(sp)
20401724:	1007f793          	andi	a5,a5,256
20401728:	84aa                	mv	s1,a0
2040172a:	842e                	mv	s0,a1
2040172c:	8932                	mv	s2,a2
2040172e:	89b6                	mv	s3,a3
20401730:	c791                	beqz	a5,2040173c <__swrite+0x28>
20401732:	00e59583          	lh	a1,14(a1)
20401736:	4689                	li	a3,2
20401738:	4601                	li	a2,0
2040173a:	222d                	jal	20401864 <_lseek_r>
2040173c:	00c45783          	lhu	a5,12(s0)
20401740:	777d                	lui	a4,0xfffff
20401742:	177d                	addi	a4,a4,-1
20401744:	8ff9                	and	a5,a5,a4
20401746:	00f41623          	sh	a5,12(s0)
2040174a:	00e41583          	lh	a1,14(s0)
2040174e:	4462                	lw	s0,24(sp)
20401750:	40f2                	lw	ra,28(sp)
20401752:	86ce                	mv	a3,s3
20401754:	864a                	mv	a2,s2
20401756:	49b2                	lw	s3,12(sp)
20401758:	4942                	lw	s2,16(sp)
2040175a:	8526                	mv	a0,s1
2040175c:	44d2                	lw	s1,20(sp)
2040175e:	6105                	addi	sp,sp,32
20401760:	a83d                	j	2040179e <_write_r>

20401762 <__sseek>:
__sseek():
20401762:	1141                	addi	sp,sp,-16
20401764:	c422                	sw	s0,8(sp)
20401766:	842e                	mv	s0,a1
20401768:	00e59583          	lh	a1,14(a1)
2040176c:	c606                	sw	ra,12(sp)
2040176e:	28dd                	jal	20401864 <_lseek_r>
20401770:	57fd                	li	a5,-1
20401772:	00c45703          	lhu	a4,12(s0)
20401776:	00f51b63          	bne	a0,a5,2040178c <__sseek+0x2a>
2040177a:	77fd                	lui	a5,0xfffff
2040177c:	17fd                	addi	a5,a5,-1
2040177e:	8ff9                	and	a5,a5,a4
20401780:	00f41623          	sh	a5,12(s0)
20401784:	40b2                	lw	ra,12(sp)
20401786:	4422                	lw	s0,8(sp)
20401788:	0141                	addi	sp,sp,16
2040178a:	8082                	ret
2040178c:	6785                	lui	a5,0x1
2040178e:	8fd9                	or	a5,a5,a4
20401790:	00f41623          	sh	a5,12(s0)
20401794:	c868                	sw	a0,84(s0)
20401796:	b7fd                	j	20401784 <__sseek+0x22>

20401798 <__sclose>:
__sclose():
20401798:	00e59583          	lh	a1,14(a1)
2040179c:	a81d                	j	204017d2 <_close_r>

2040179e <_write_r>:
_write_r():
2040179e:	1141                	addi	sp,sp,-16
204017a0:	c422                	sw	s0,8(sp)
204017a2:	842a                	mv	s0,a0
204017a4:	852e                	mv	a0,a1
204017a6:	85b2                	mv	a1,a2
204017a8:	8636                	mv	a2,a3
204017aa:	5fc01797          	auipc	a5,0x5fc01
204017ae:	0007a523          	sw	zero,10(a5) # 800027b4 <errno>
204017b2:	c606                	sw	ra,12(sp)
204017b4:	2d39                	jal	20401dd2 <_write>
204017b6:	57fd                	li	a5,-1
204017b8:	00f51963          	bne	a0,a5,204017ca <_write_r+0x2c>
204017bc:	5fc01797          	auipc	a5,0x5fc01
204017c0:	ff878793          	addi	a5,a5,-8 # 800027b4 <errno>
204017c4:	439c                	lw	a5,0(a5)
204017c6:	c391                	beqz	a5,204017ca <_write_r+0x2c>
204017c8:	c01c                	sw	a5,0(s0)
204017ca:	40b2                	lw	ra,12(sp)
204017cc:	4422                	lw	s0,8(sp)
204017ce:	0141                	addi	sp,sp,16
204017d0:	8082                	ret

204017d2 <_close_r>:
_close_r():
204017d2:	1141                	addi	sp,sp,-16
204017d4:	c422                	sw	s0,8(sp)
204017d6:	842a                	mv	s0,a0
204017d8:	852e                	mv	a0,a1
204017da:	5fc01797          	auipc	a5,0x5fc01
204017de:	fc07ad23          	sw	zero,-38(a5) # 800027b4 <errno>
204017e2:	c606                	sw	ra,12(sp)
204017e4:	2955                	jal	20401c98 <_close>
204017e6:	57fd                	li	a5,-1
204017e8:	00f51963          	bne	a0,a5,204017fa <_close_r+0x28>
204017ec:	5fc01797          	auipc	a5,0x5fc01
204017f0:	fc878793          	addi	a5,a5,-56 # 800027b4 <errno>
204017f4:	439c                	lw	a5,0(a5)
204017f6:	c391                	beqz	a5,204017fa <_close_r+0x28>
204017f8:	c01c                	sw	a5,0(s0)
204017fa:	40b2                	lw	ra,12(sp)
204017fc:	4422                	lw	s0,8(sp)
204017fe:	0141                	addi	sp,sp,16
20401800:	8082                	ret

20401802 <_fstat_r>:
_fstat_r():
20401802:	1141                	addi	sp,sp,-16
20401804:	c422                	sw	s0,8(sp)
20401806:	842a                	mv	s0,a0
20401808:	852e                	mv	a0,a1
2040180a:	85b2                	mv	a1,a2
2040180c:	5fc01797          	auipc	a5,0x5fc01
20401810:	fa07a423          	sw	zero,-88(a5) # 800027b4 <errno>
20401814:	c606                	sw	ra,12(sp)
20401816:	2155                	jal	20401cba <_fstat>
20401818:	57fd                	li	a5,-1
2040181a:	00f51963          	bne	a0,a5,2040182c <_fstat_r+0x2a>
2040181e:	5fc01797          	auipc	a5,0x5fc01
20401822:	f9678793          	addi	a5,a5,-106 # 800027b4 <errno>
20401826:	439c                	lw	a5,0(a5)
20401828:	c391                	beqz	a5,2040182c <_fstat_r+0x2a>
2040182a:	c01c                	sw	a5,0(s0)
2040182c:	40b2                	lw	ra,12(sp)
2040182e:	4422                	lw	s0,8(sp)
20401830:	0141                	addi	sp,sp,16
20401832:	8082                	ret

20401834 <_isatty_r>:
_isatty_r():
20401834:	1141                	addi	sp,sp,-16
20401836:	c422                	sw	s0,8(sp)
20401838:	842a                	mv	s0,a0
2040183a:	852e                	mv	a0,a1
2040183c:	5fc01797          	auipc	a5,0x5fc01
20401840:	f607ac23          	sw	zero,-136(a5) # 800027b4 <errno>
20401844:	c606                	sw	ra,12(sp)
20401846:	2969                	jal	20401ce0 <_isatty>
20401848:	57fd                	li	a5,-1
2040184a:	00f51963          	bne	a0,a5,2040185c <_isatty_r+0x28>
2040184e:	5fc01797          	auipc	a5,0x5fc01
20401852:	f6678793          	addi	a5,a5,-154 # 800027b4 <errno>
20401856:	439c                	lw	a5,0(a5)
20401858:	c391                	beqz	a5,2040185c <_isatty_r+0x28>
2040185a:	c01c                	sw	a5,0(s0)
2040185c:	40b2                	lw	ra,12(sp)
2040185e:	4422                	lw	s0,8(sp)
20401860:	0141                	addi	sp,sp,16
20401862:	8082                	ret

20401864 <_lseek_r>:
_lseek_r():
20401864:	1141                	addi	sp,sp,-16
20401866:	c422                	sw	s0,8(sp)
20401868:	842a                	mv	s0,a0
2040186a:	852e                	mv	a0,a1
2040186c:	85b2                	mv	a1,a2
2040186e:	8636                	mv	a2,a3
20401870:	5fc01797          	auipc	a5,0x5fc01
20401874:	f407a223          	sw	zero,-188(a5) # 800027b4 <errno>
20401878:	c606                	sw	ra,12(sp)
2040187a:	2159                	jal	20401d00 <_lseek>
2040187c:	57fd                	li	a5,-1
2040187e:	00f51963          	bne	a0,a5,20401890 <_lseek_r+0x2c>
20401882:	5fc01797          	auipc	a5,0x5fc01
20401886:	f3278793          	addi	a5,a5,-206 # 800027b4 <errno>
2040188a:	439c                	lw	a5,0(a5)
2040188c:	c391                	beqz	a5,20401890 <_lseek_r+0x2c>
2040188e:	c01c                	sw	a5,0(s0)
20401890:	40b2                	lw	ra,12(sp)
20401892:	4422                	lw	s0,8(sp)
20401894:	0141                	addi	sp,sp,16
20401896:	8082                	ret

20401898 <memchr>:
memchr():
20401898:	0ff5f593          	andi	a1,a1,255
2040189c:	962a                	add	a2,a2,a0
2040189e:	00c51463          	bne	a0,a2,204018a6 <memchr+0xe>
204018a2:	4501                	li	a0,0
204018a4:	8082                	ret
204018a6:	00054783          	lbu	a5,0(a0)
204018aa:	feb78de3          	beq	a5,a1,204018a4 <memchr+0xc>
204018ae:	0505                	addi	a0,a0,1
204018b0:	b7fd                	j	2040189e <memchr+0x6>

204018b2 <__malloc_lock>:
__malloc_lock():
204018b2:	8082                	ret

204018b4 <__malloc_unlock>:
__malloc_unlock():
204018b4:	8082                	ret

204018b6 <_printf_common>:
_printf_common():
204018b6:	7179                	addi	sp,sp,-48
204018b8:	ca56                	sw	s5,20(sp)
204018ba:	499c                	lw	a5,16(a1)
204018bc:	8aba                	mv	s5,a4
204018be:	4598                	lw	a4,8(a1)
204018c0:	d422                	sw	s0,40(sp)
204018c2:	d226                	sw	s1,36(sp)
204018c4:	ce4e                	sw	s3,28(sp)
204018c6:	cc52                	sw	s4,24(sp)
204018c8:	d606                	sw	ra,44(sp)
204018ca:	d04a                	sw	s2,32(sp)
204018cc:	c85a                	sw	s6,16(sp)
204018ce:	c65e                	sw	s7,12(sp)
204018d0:	89aa                	mv	s3,a0
204018d2:	842e                	mv	s0,a1
204018d4:	84b2                	mv	s1,a2
204018d6:	8a36                	mv	s4,a3
204018d8:	00e7d363          	bge	a5,a4,204018de <_printf_common+0x28>
204018dc:	87ba                	mv	a5,a4
204018de:	c09c                	sw	a5,0(s1)
204018e0:	04344703          	lbu	a4,67(s0)
204018e4:	c319                	beqz	a4,204018ea <_printf_common+0x34>
204018e6:	0785                	addi	a5,a5,1
204018e8:	c09c                	sw	a5,0(s1)
204018ea:	401c                	lw	a5,0(s0)
204018ec:	0207f793          	andi	a5,a5,32
204018f0:	c781                	beqz	a5,204018f8 <_printf_common+0x42>
204018f2:	409c                	lw	a5,0(s1)
204018f4:	0789                	addi	a5,a5,2
204018f6:	c09c                	sw	a5,0(s1)
204018f8:	00042903          	lw	s2,0(s0)
204018fc:	00697913          	andi	s2,s2,6
20401900:	00091a63          	bnez	s2,20401914 <_printf_common+0x5e>
20401904:	01940b13          	addi	s6,s0,25
20401908:	5bfd                	li	s7,-1
2040190a:	445c                	lw	a5,12(s0)
2040190c:	4098                	lw	a4,0(s1)
2040190e:	8f99                	sub	a5,a5,a4
20401910:	04f94c63          	blt	s2,a5,20401968 <_printf_common+0xb2>
20401914:	401c                	lw	a5,0(s0)
20401916:	04344683          	lbu	a3,67(s0)
2040191a:	0207f793          	andi	a5,a5,32
2040191e:	00d036b3          	snez	a3,a3
20401922:	eba5                	bnez	a5,20401992 <_printf_common+0xdc>
20401924:	04340613          	addi	a2,s0,67
20401928:	85d2                	mv	a1,s4
2040192a:	854e                	mv	a0,s3
2040192c:	9a82                	jalr	s5
2040192e:	57fd                	li	a5,-1
20401930:	04f50363          	beq	a0,a5,20401976 <_printf_common+0xc0>
20401934:	401c                	lw	a5,0(s0)
20401936:	4611                	li	a2,4
20401938:	4098                	lw	a4,0(s1)
2040193a:	8b99                	andi	a5,a5,6
2040193c:	4454                	lw	a3,12(s0)
2040193e:	4481                	li	s1,0
20401940:	00c79763          	bne	a5,a2,2040194e <_printf_common+0x98>
20401944:	40e684b3          	sub	s1,a3,a4
20401948:	0004d363          	bgez	s1,2040194e <_printf_common+0x98>
2040194c:	4481                	li	s1,0
2040194e:	441c                	lw	a5,8(s0)
20401950:	4818                	lw	a4,16(s0)
20401952:	00f75463          	bge	a4,a5,2040195a <_printf_common+0xa4>
20401956:	8f99                	sub	a5,a5,a4
20401958:	94be                	add	s1,s1,a5
2040195a:	4901                	li	s2,0
2040195c:	0469                	addi	s0,s0,26
2040195e:	5b7d                	li	s6,-1
20401960:	05249863          	bne	s1,s2,204019b0 <_printf_common+0xfa>
20401964:	4501                	li	a0,0
20401966:	a809                	j	20401978 <_printf_common+0xc2>
20401968:	4685                	li	a3,1
2040196a:	865a                	mv	a2,s6
2040196c:	85d2                	mv	a1,s4
2040196e:	854e                	mv	a0,s3
20401970:	9a82                	jalr	s5
20401972:	01751e63          	bne	a0,s7,2040198e <_printf_common+0xd8>
20401976:	557d                	li	a0,-1
20401978:	50b2                	lw	ra,44(sp)
2040197a:	5422                	lw	s0,40(sp)
2040197c:	5492                	lw	s1,36(sp)
2040197e:	5902                	lw	s2,32(sp)
20401980:	49f2                	lw	s3,28(sp)
20401982:	4a62                	lw	s4,24(sp)
20401984:	4ad2                	lw	s5,20(sp)
20401986:	4b42                	lw	s6,16(sp)
20401988:	4bb2                	lw	s7,12(sp)
2040198a:	6145                	addi	sp,sp,48
2040198c:	8082                	ret
2040198e:	0905                	addi	s2,s2,1
20401990:	bfad                	j	2040190a <_printf_common+0x54>
20401992:	00d40733          	add	a4,s0,a3
20401996:	03000613          	li	a2,48
2040199a:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffbc8b>
2040199e:	04544703          	lbu	a4,69(s0)
204019a2:	00168793          	addi	a5,a3,1
204019a6:	97a2                	add	a5,a5,s0
204019a8:	0689                	addi	a3,a3,2
204019aa:	04e781a3          	sb	a4,67(a5)
204019ae:	bf9d                	j	20401924 <_printf_common+0x6e>
204019b0:	4685                	li	a3,1
204019b2:	8622                	mv	a2,s0
204019b4:	85d2                	mv	a1,s4
204019b6:	854e                	mv	a0,s3
204019b8:	9a82                	jalr	s5
204019ba:	fb650ee3          	beq	a0,s6,20401976 <_printf_common+0xc0>
204019be:	0905                	addi	s2,s2,1
204019c0:	b745                	j	20401960 <_printf_common+0xaa>

204019c2 <_printf_i>:
_printf_i():
204019c2:	7179                	addi	sp,sp,-48
204019c4:	d422                	sw	s0,40(sp)
204019c6:	d226                	sw	s1,36(sp)
204019c8:	d04a                	sw	s2,32(sp)
204019ca:	ce4e                	sw	s3,28(sp)
204019cc:	d606                	sw	ra,44(sp)
204019ce:	cc52                	sw	s4,24(sp)
204019d0:	ca56                	sw	s5,20(sp)
204019d2:	c85a                	sw	s6,16(sp)
204019d4:	89b6                	mv	s3,a3
204019d6:	0185c683          	lbu	a3,24(a1)
204019da:	06e00793          	li	a5,110
204019de:	8932                	mv	s2,a2
204019e0:	84aa                	mv	s1,a0
204019e2:	842e                	mv	s0,a1
204019e4:	04358613          	addi	a2,a1,67
204019e8:	1ef68063          	beq	a3,a5,20401bc8 <_printf_i+0x206>
204019ec:	06d7e263          	bltu	a5,a3,20401a50 <_printf_i+0x8e>
204019f0:	06300793          	li	a5,99
204019f4:	0af68263          	beq	a3,a5,20401a98 <_printf_i+0xd6>
204019f8:	00d7ed63          	bltu	a5,a3,20401a12 <_printf_i+0x50>
204019fc:	1e068a63          	beqz	a3,20401bf0 <_printf_i+0x22e>
20401a00:	05800793          	li	a5,88
20401a04:	16f68663          	beq	a3,a5,20401b70 <_printf_i+0x1ae>
20401a08:	04240a93          	addi	s5,s0,66
20401a0c:	04d40123          	sb	a3,66(s0)
20401a10:	a869                	j	20401aaa <_printf_i+0xe8>
20401a12:	06400793          	li	a5,100
20401a16:	00f68663          	beq	a3,a5,20401a22 <_printf_i+0x60>
20401a1a:	06900793          	li	a5,105
20401a1e:	fef695e3          	bne	a3,a5,20401a08 <_printf_i+0x46>
20401a22:	401c                	lw	a5,0(s0)
20401a24:	4308                	lw	a0,0(a4)
20401a26:	0807f693          	andi	a3,a5,128
20401a2a:	00450593          	addi	a1,a0,4
20401a2e:	c2c1                	beqz	a3,20401aae <_printf_i+0xec>
20401a30:	411c                	lw	a5,0(a0)
20401a32:	c30c                	sw	a1,0(a4)
20401a34:	0007d863          	bgez	a5,20401a44 <_printf_i+0x82>
20401a38:	02d00713          	li	a4,45
20401a3c:	40f007b3          	neg	a5,a5
20401a40:	04e401a3          	sb	a4,67(s0)
20401a44:	00004697          	auipc	a3,0x4
20401a48:	f1068693          	addi	a3,a3,-240 # 20405954 <__sf_fake_stdout+0x34>
20401a4c:	4729                	li	a4,10
20401a4e:	a065                	j	20401af6 <_printf_i+0x134>
20401a50:	07300793          	li	a5,115
20401a54:	1af68263          	beq	a3,a5,20401bf8 <_printf_i+0x236>
20401a58:	00d7ef63          	bltu	a5,a3,20401a76 <_printf_i+0xb4>
20401a5c:	06f00793          	li	a5,111
20401a60:	04f68f63          	beq	a3,a5,20401abe <_printf_i+0xfc>
20401a64:	07000793          	li	a5,112
20401a68:	faf690e3          	bne	a3,a5,20401a08 <_printf_i+0x46>
20401a6c:	419c                	lw	a5,0(a1)
20401a6e:	0207e793          	ori	a5,a5,32
20401a72:	c19c                	sw	a5,0(a1)
20401a74:	a809                	j	20401a86 <_printf_i+0xc4>
20401a76:	07500793          	li	a5,117
20401a7a:	04f68263          	beq	a3,a5,20401abe <_printf_i+0xfc>
20401a7e:	07800793          	li	a5,120
20401a82:	f8f693e3          	bne	a3,a5,20401a08 <_printf_i+0x46>
20401a86:	07800793          	li	a5,120
20401a8a:	04f402a3          	sb	a5,69(s0)
20401a8e:	00004697          	auipc	a3,0x4
20401a92:	eda68693          	addi	a3,a3,-294 # 20405968 <__sf_fake_stdout+0x48>
20401a96:	a0dd                	j	20401b7c <_printf_i+0x1ba>
20401a98:	431c                	lw	a5,0(a4)
20401a9a:	04258a93          	addi	s5,a1,66
20401a9e:	00478693          	addi	a3,a5,4
20401aa2:	439c                	lw	a5,0(a5)
20401aa4:	c314                	sw	a3,0(a4)
20401aa6:	04f58123          	sb	a5,66(a1)
20401aaa:	4785                	li	a5,1
20401aac:	a2ad                	j	20401c16 <_printf_i+0x254>
20401aae:	0407f693          	andi	a3,a5,64
20401ab2:	411c                	lw	a5,0(a0)
20401ab4:	c30c                	sw	a1,0(a4)
20401ab6:	debd                	beqz	a3,20401a34 <_printf_i+0x72>
20401ab8:	07c2                	slli	a5,a5,0x10
20401aba:	87c1                	srai	a5,a5,0x10
20401abc:	bfa5                	j	20401a34 <_printf_i+0x72>
20401abe:	400c                	lw	a1,0(s0)
20401ac0:	431c                	lw	a5,0(a4)
20401ac2:	0805f813          	andi	a6,a1,128
20401ac6:	00478513          	addi	a0,a5,4
20401aca:	00080563          	beqz	a6,20401ad4 <_printf_i+0x112>
20401ace:	c308                	sw	a0,0(a4)
20401ad0:	439c                	lw	a5,0(a5)
20401ad2:	a039                	j	20401ae0 <_printf_i+0x11e>
20401ad4:	0405f593          	andi	a1,a1,64
20401ad8:	c308                	sw	a0,0(a4)
20401ada:	d9fd                	beqz	a1,20401ad0 <_printf_i+0x10e>
20401adc:	0007d783          	lhu	a5,0(a5)
20401ae0:	06f00713          	li	a4,111
20401ae4:	0ce68a63          	beq	a3,a4,20401bb8 <_printf_i+0x1f6>
20401ae8:	00004697          	auipc	a3,0x4
20401aec:	e6c68693          	addi	a3,a3,-404 # 20405954 <__sf_fake_stdout+0x34>
20401af0:	4729                	li	a4,10
20401af2:	040401a3          	sb	zero,67(s0)
20401af6:	404c                	lw	a1,4(s0)
20401af8:	c40c                	sw	a1,8(s0)
20401afa:	0005c563          	bltz	a1,20401b04 <_printf_i+0x142>
20401afe:	4008                	lw	a0,0(s0)
20401b00:	996d                	andi	a0,a0,-5
20401b02:	c008                	sw	a0,0(s0)
20401b04:	e399                	bnez	a5,20401b0a <_printf_i+0x148>
20401b06:	8ab2                	mv	s5,a2
20401b08:	cd91                	beqz	a1,20401b24 <_printf_i+0x162>
20401b0a:	8ab2                	mv	s5,a2
20401b0c:	02e7f5b3          	remu	a1,a5,a4
20401b10:	1afd                	addi	s5,s5,-1
20401b12:	95b6                	add	a1,a1,a3
20401b14:	0005c583          	lbu	a1,0(a1)
20401b18:	00ba8023          	sb	a1,0(s5)
20401b1c:	02e7d5b3          	divu	a1,a5,a4
20401b20:	0ae7f263          	bgeu	a5,a4,20401bc4 <_printf_i+0x202>
20401b24:	47a1                	li	a5,8
20401b26:	00f71e63          	bne	a4,a5,20401b42 <_printf_i+0x180>
20401b2a:	401c                	lw	a5,0(s0)
20401b2c:	8b85                	andi	a5,a5,1
20401b2e:	cb91                	beqz	a5,20401b42 <_printf_i+0x180>
20401b30:	4058                	lw	a4,4(s0)
20401b32:	481c                	lw	a5,16(s0)
20401b34:	00e7c763          	blt	a5,a4,20401b42 <_printf_i+0x180>
20401b38:	03000793          	li	a5,48
20401b3c:	fefa8fa3          	sb	a5,-1(s5)
20401b40:	1afd                	addi	s5,s5,-1
20401b42:	41560633          	sub	a2,a2,s5
20401b46:	c810                	sw	a2,16(s0)
20401b48:	874e                	mv	a4,s3
20401b4a:	86ca                	mv	a3,s2
20401b4c:	0070                	addi	a2,sp,12
20401b4e:	85a2                	mv	a1,s0
20401b50:	8526                	mv	a0,s1
20401b52:	3395                	jal	204018b6 <_printf_common>
20401b54:	5a7d                	li	s4,-1
20401b56:	0d451463          	bne	a0,s4,20401c1e <_printf_i+0x25c>
20401b5a:	557d                	li	a0,-1
20401b5c:	50b2                	lw	ra,44(sp)
20401b5e:	5422                	lw	s0,40(sp)
20401b60:	5492                	lw	s1,36(sp)
20401b62:	5902                	lw	s2,32(sp)
20401b64:	49f2                	lw	s3,28(sp)
20401b66:	4a62                	lw	s4,24(sp)
20401b68:	4ad2                	lw	s5,20(sp)
20401b6a:	4b42                	lw	s6,16(sp)
20401b6c:	6145                	addi	sp,sp,48
20401b6e:	8082                	ret
20401b70:	04d582a3          	sb	a3,69(a1)
20401b74:	00004697          	auipc	a3,0x4
20401b78:	de068693          	addi	a3,a3,-544 # 20405954 <__sf_fake_stdout+0x34>
20401b7c:	400c                	lw	a1,0(s0)
20401b7e:	4308                	lw	a0,0(a4)
20401b80:	0805f813          	andi	a6,a1,128
20401b84:	411c                	lw	a5,0(a0)
20401b86:	0511                	addi	a0,a0,4
20401b88:	02080063          	beqz	a6,20401ba8 <_printf_i+0x1e6>
20401b8c:	c308                	sw	a0,0(a4)
20401b8e:	0015f713          	andi	a4,a1,1
20401b92:	c701                	beqz	a4,20401b9a <_printf_i+0x1d8>
20401b94:	0205e593          	ori	a1,a1,32
20401b98:	c00c                	sw	a1,0(s0)
20401b9a:	4741                	li	a4,16
20401b9c:	fbb9                	bnez	a5,20401af2 <_printf_i+0x130>
20401b9e:	400c                	lw	a1,0(s0)
20401ba0:	fdf5f593          	andi	a1,a1,-33
20401ba4:	c00c                	sw	a1,0(s0)
20401ba6:	b7b1                	j	20401af2 <_printf_i+0x130>
20401ba8:	0405f813          	andi	a6,a1,64
20401bac:	c308                	sw	a0,0(a4)
20401bae:	fe0800e3          	beqz	a6,20401b8e <_printf_i+0x1cc>
20401bb2:	07c2                	slli	a5,a5,0x10
20401bb4:	83c1                	srli	a5,a5,0x10
20401bb6:	bfe1                	j	20401b8e <_printf_i+0x1cc>
20401bb8:	00004697          	auipc	a3,0x4
20401bbc:	d9c68693          	addi	a3,a3,-612 # 20405954 <__sf_fake_stdout+0x34>
20401bc0:	4721                	li	a4,8
20401bc2:	bf05                	j	20401af2 <_printf_i+0x130>
20401bc4:	87ae                	mv	a5,a1
20401bc6:	b799                	j	20401b0c <_printf_i+0x14a>
20401bc8:	4194                	lw	a3,0(a1)
20401bca:	431c                	lw	a5,0(a4)
20401bcc:	49cc                	lw	a1,20(a1)
20401bce:	0806f813          	andi	a6,a3,128
20401bd2:	00478513          	addi	a0,a5,4
20401bd6:	00080663          	beqz	a6,20401be2 <_printf_i+0x220>
20401bda:	c308                	sw	a0,0(a4)
20401bdc:	439c                	lw	a5,0(a5)
20401bde:	c38c                	sw	a1,0(a5)
20401be0:	a801                	j	20401bf0 <_printf_i+0x22e>
20401be2:	c308                	sw	a0,0(a4)
20401be4:	0406f693          	andi	a3,a3,64
20401be8:	439c                	lw	a5,0(a5)
20401bea:	daf5                	beqz	a3,20401bde <_printf_i+0x21c>
20401bec:	00b79023          	sh	a1,0(a5)
20401bf0:	00042823          	sw	zero,16(s0)
20401bf4:	8ab2                	mv	s5,a2
20401bf6:	bf89                	j	20401b48 <_printf_i+0x186>
20401bf8:	431c                	lw	a5,0(a4)
20401bfa:	41d0                	lw	a2,4(a1)
20401bfc:	4581                	li	a1,0
20401bfe:	00478693          	addi	a3,a5,4
20401c02:	c314                	sw	a3,0(a4)
20401c04:	0007aa83          	lw	s5,0(a5)
20401c08:	8556                	mv	a0,s5
20401c0a:	3179                	jal	20401898 <memchr>
20401c0c:	c501                	beqz	a0,20401c14 <_printf_i+0x252>
20401c0e:	41550533          	sub	a0,a0,s5
20401c12:	c048                	sw	a0,4(s0)
20401c14:	405c                	lw	a5,4(s0)
20401c16:	c81c                	sw	a5,16(s0)
20401c18:	040401a3          	sb	zero,67(s0)
20401c1c:	b735                	j	20401b48 <_printf_i+0x186>
20401c1e:	4814                	lw	a3,16(s0)
20401c20:	8656                	mv	a2,s5
20401c22:	85ca                	mv	a1,s2
20401c24:	8526                	mv	a0,s1
20401c26:	9982                	jalr	s3
20401c28:	f34509e3          	beq	a0,s4,20401b5a <_printf_i+0x198>
20401c2c:	401c                	lw	a5,0(s0)
20401c2e:	8b89                	andi	a5,a5,2
20401c30:	e78d                	bnez	a5,20401c5a <_printf_i+0x298>
20401c32:	47b2                	lw	a5,12(sp)
20401c34:	4448                	lw	a0,12(s0)
20401c36:	f2f553e3          	bge	a0,a5,20401b5c <_printf_i+0x19a>
20401c3a:	853e                	mv	a0,a5
20401c3c:	b705                	j	20401b5c <_printf_i+0x19a>
20401c3e:	4685                	li	a3,1
20401c40:	8656                	mv	a2,s5
20401c42:	85ca                	mv	a1,s2
20401c44:	8526                	mv	a0,s1
20401c46:	9982                	jalr	s3
20401c48:	f16509e3          	beq	a0,s6,20401b5a <_printf_i+0x198>
20401c4c:	0a05                	addi	s4,s4,1
20401c4e:	445c                	lw	a5,12(s0)
20401c50:	4732                	lw	a4,12(sp)
20401c52:	8f99                	sub	a5,a5,a4
20401c54:	fefa45e3          	blt	s4,a5,20401c3e <_printf_i+0x27c>
20401c58:	bfe9                	j	20401c32 <_printf_i+0x270>
20401c5a:	4a01                	li	s4,0
20401c5c:	01940a93          	addi	s5,s0,25
20401c60:	5b7d                	li	s6,-1
20401c62:	b7f5                	j	20401c4e <_printf_i+0x28c>

20401c64 <_read_r>:
_read_r():
20401c64:	1141                	addi	sp,sp,-16
20401c66:	c422                	sw	s0,8(sp)
20401c68:	842a                	mv	s0,a0
20401c6a:	852e                	mv	a0,a1
20401c6c:	85b2                	mv	a1,a2
20401c6e:	8636                	mv	a2,a3
20401c70:	5fc01797          	auipc	a5,0x5fc01
20401c74:	b407a223          	sw	zero,-1212(a5) # 800027b4 <errno>
20401c78:	c606                	sw	ra,12(sp)
20401c7a:	2845                	jal	20401d2a <_read>
20401c7c:	57fd                	li	a5,-1
20401c7e:	00f51963          	bne	a0,a5,20401c90 <_read_r+0x2c>
20401c82:	5fc01797          	auipc	a5,0x5fc01
20401c86:	b3278793          	addi	a5,a5,-1230 # 800027b4 <errno>
20401c8a:	439c                	lw	a5,0(a5)
20401c8c:	c391                	beqz	a5,20401c90 <_read_r+0x2c>
20401c8e:	c01c                	sw	a5,0(s0)
20401c90:	40b2                	lw	ra,12(sp)
20401c92:	4422                	lw	s0,8(sp)
20401c94:	0141                	addi	sp,sp,16
20401c96:	8082                	ret

20401c98 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20401c98:	1101                	addi	sp,sp,-32
20401c9a:	ce06                	sw	ra,28(sp)
20401c9c:	cc22                	sw	s0,24(sp)
20401c9e:	1000                	addi	s0,sp,32
20401ca0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20401ca4:	225d                	jal	20401e4a <__errno>
20401ca6:	872a                	mv	a4,a0
20401ca8:	05800793          	li	a5,88
20401cac:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20401cae:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20401cb0:	853e                	mv	a0,a5
20401cb2:	40f2                	lw	ra,28(sp)
20401cb4:	4462                	lw	s0,24(sp)
20401cb6:	6105                	addi	sp,sp,32
20401cb8:	8082                	ret

20401cba <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20401cba:	1101                	addi	sp,sp,-32
20401cbc:	ce06                	sw	ra,28(sp)
20401cbe:	cc22                	sw	s0,24(sp)
20401cc0:	1000                	addi	s0,sp,32
20401cc2:	fea42623          	sw	a0,-20(s0)
20401cc6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401cca:	2241                	jal	20401e4a <__errno>
20401ccc:	872a                	mv	a4,a0
20401cce:	fa800793          	li	a5,-88
20401cd2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20401cd4:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20401cd6:	853e                	mv	a0,a5
20401cd8:	40f2                	lw	ra,28(sp)
20401cda:	4462                	lw	s0,24(sp)
20401cdc:	6105                	addi	sp,sp,32
20401cde:	8082                	ret

20401ce0 <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20401ce0:	1101                	addi	sp,sp,-32
20401ce2:	ce22                	sw	s0,28(sp)
20401ce4:	1000                	addi	s0,sp,32
20401ce6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401cea:	fec42783          	lw	a5,-20(s0)
20401cee:	17fd                	addi	a5,a5,-1
20401cf0:	0017b793          	seqz	a5,a5
20401cf4:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20401cf8:	853e                	mv	a0,a5
20401cfa:	4472                	lw	s0,28(sp)
20401cfc:	6105                	addi	sp,sp,32
20401cfe:	8082                	ret

20401d00 <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20401d00:	1101                	addi	sp,sp,-32
20401d02:	ce06                	sw	ra,28(sp)
20401d04:	cc22                	sw	s0,24(sp)
20401d06:	1000                	addi	s0,sp,32
20401d08:	fea42623          	sw	a0,-20(s0)
20401d0c:	feb42423          	sw	a1,-24(s0)
20401d10:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20401d14:	2a1d                	jal	20401e4a <__errno>
20401d16:	872a                	mv	a4,a0
20401d18:	05800793          	li	a5,88
20401d1c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20401d1e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20401d20:	853e                	mv	a0,a5
20401d22:	40f2                	lw	ra,28(sp)
20401d24:	4462                	lw	s0,24(sp)
20401d26:	6105                	addi	sp,sp,32
20401d28:	8082                	ret

20401d2a <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20401d2a:	1101                	addi	sp,sp,-32
20401d2c:	ce06                	sw	ra,28(sp)
20401d2e:	cc22                	sw	s0,24(sp)
20401d30:	1000                	addi	s0,sp,32
20401d32:	fea42623          	sw	a0,-20(s0)
20401d36:	feb42423          	sw	a1,-24(s0)
20401d3a:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20401d3e:	2231                	jal	20401e4a <__errno>
20401d40:	872a                	mv	a4,a0
20401d42:	05800793          	li	a5,88
20401d46:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20401d48:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20401d4a:	853e                	mv	a0,a5
20401d4c:	40f2                	lw	ra,28(sp)
20401d4e:	4462                	lw	s0,24(sp)
20401d50:	6105                	addi	sp,sp,32
20401d52:	8082                	ret

20401d54 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20401d54:	7179                	addi	sp,sp,-48
20401d56:	d622                	sw	s0,44(sp)
20401d58:	1800                	addi	s0,sp,48
20401d5a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20401d5e:	800017b7          	lui	a5,0x80001
20401d62:	7107a783          	lw	a5,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe358>
20401d66:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20401d6a:	800037b7          	lui	a5,0x80003
20401d6e:	bb878713          	addi	a4,a5,-1096 # 80002bb8 <metal_segment_heap_target_end+0xfffff800>
20401d72:	800037b7          	lui	a5,0x80003
20401d76:	3b878793          	addi	a5,a5,952 # 800033b8 <metal_segment_heap_target_end+0x0>
20401d7a:	00f71463          	bne	a4,a5,20401d82 <_sbrk+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20401d7e:	57fd                	li	a5,-1
20401d80:	a0a9                	j	20401dca <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20401d82:	800017b7          	lui	a5,0x80001
20401d86:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe358>
20401d8a:	fdc42783          	lw	a5,-36(s0)
20401d8e:	973e                	add	a4,a4,a5
20401d90:	800037b7          	lui	a5,0x80003
20401d94:	3b878793          	addi	a5,a5,952 # 800033b8 <metal_segment_heap_target_end+0x0>
20401d98:	02f77063          	bgeu	a4,a5,20401db8 <_sbrk+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20401d9c:	800017b7          	lui	a5,0x80001
20401da0:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe358>
20401da4:	fdc42783          	lw	a5,-36(s0)
20401da8:	973e                	add	a4,a4,a5
20401daa:	800017b7          	lui	a5,0x80001
20401dae:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe358>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20401db2:	fec42783          	lw	a5,-20(s0)
20401db6:	a811                	j	20401dca <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20401db8:	800017b7          	lui	a5,0x80001
20401dbc:	80003737          	lui	a4,0x80003
20401dc0:	3b870713          	addi	a4,a4,952 # 800033b8 <metal_segment_heap_target_end+0x0>
20401dc4:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe358>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20401dc8:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20401dca:	853e                	mv	a0,a5
20401dcc:	5432                	lw	s0,44(sp)
20401dce:	6145                	addi	sp,sp,48
20401dd0:	8082                	ret

20401dd2 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20401dd2:	7179                	addi	sp,sp,-48
20401dd4:	d606                	sw	ra,44(sp)
20401dd6:	d422                	sw	s0,40(sp)
20401dd8:	1800                	addi	s0,sp,48
20401dda:	fca42e23          	sw	a0,-36(s0)
20401dde:	fcb42c23          	sw	a1,-40(s0)
20401de2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20401de6:	fdc42703          	lw	a4,-36(s0)
20401dea:	4785                	li	a5,1
20401dec:	00f70963          	beq	a4,a5,20401dfe <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20401df0:	28a9                	jal	20401e4a <__errno>
20401df2:	872a                	mv	a4,a0
20401df4:	05800793          	li	a5,88
20401df8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20401dfa:	57fd                	li	a5,-1
20401dfc:	a82d                	j	20401e36 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20401dfe:	fd842783          	lw	a5,-40(s0)
20401e02:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20401e06:	fe042623          	sw	zero,-20(s0)
20401e0a:	a839                	j	20401e28 <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20401e0c:	fe842703          	lw	a4,-24(s0)
20401e10:	fec42783          	lw	a5,-20(s0)
20401e14:	97ba                	add	a5,a5,a4
20401e16:	0007c783          	lbu	a5,0(a5)
20401e1a:	853e                	mv	a0,a5
20401e1c:	2cb1                	jal	20402078 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20401e1e:	fec42783          	lw	a5,-20(s0)
20401e22:	0785                	addi	a5,a5,1
20401e24:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20401e28:	fec42703          	lw	a4,-20(s0)
20401e2c:	fd442783          	lw	a5,-44(s0)
20401e30:	fcf76ee3          	bltu	a4,a5,20401e0c <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20401e34:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20401e36:	853e                	mv	a0,a5
20401e38:	50b2                	lw	ra,44(sp)
20401e3a:	5422                	lw	s0,40(sp)
20401e3c:	6145                	addi	sp,sp,48
20401e3e:	8082                	ret

20401e40 <atexit>:
atexit():
20401e40:	85aa                	mv	a1,a0
20401e42:	4681                	li	a3,0
20401e44:	4601                	li	a2,0
20401e46:	4501                	li	a0,0
20401e48:	a8f1                	j	20401f24 <__register_exitproc>

20401e4a <__errno>:
__errno():
20401e4a:	5fc00797          	auipc	a5,0x5fc00
20401e4e:	8be78793          	addi	a5,a5,-1858 # 80001708 <_impure_ptr>
20401e52:	4388                	lw	a0,0(a5)
20401e54:	8082                	ret

20401e56 <exit>:
exit():
20401e56:	1141                	addi	sp,sp,-16
20401e58:	c422                	sw	s0,8(sp)
20401e5a:	c606                	sw	ra,12(sp)
20401e5c:	00000797          	auipc	a5,0x0
20401e60:	15478793          	addi	a5,a5,340 # 20401fb0 <__call_exitprocs>
20401e64:	842a                	mv	s0,a0
20401e66:	c399                	beqz	a5,20401e6c <exit+0x16>
20401e68:	4581                	li	a1,0
20401e6a:	2299                	jal	20401fb0 <__call_exitprocs>
20401e6c:	5fc00797          	auipc	a5,0x5fc00
20401e70:	8a078793          	addi	a5,a5,-1888 # 8000170c <_global_impure_ptr>
20401e74:	4388                	lw	a0,0(a5)
20401e76:	551c                	lw	a5,40(a0)
20401e78:	c391                	beqz	a5,20401e7c <exit+0x26>
20401e7a:	9782                	jalr	a5
20401e7c:	8522                	mv	a0,s0
20401e7e:	071030ef          	jal	ra,204056ee <_exit>

20401e82 <__libc_fini_array>:
__libc_fini_array():
20401e82:	1141                	addi	sp,sp,-16
20401e84:	00004797          	auipc	a5,0x4
20401e88:	e5078793          	addi	a5,a5,-432 # 20405cd4 <__fini_array_end>
20401e8c:	c422                	sw	s0,8(sp)
20401e8e:	00004417          	auipc	s0,0x4
20401e92:	e4640413          	addi	s0,s0,-442 # 20405cd4 <__fini_array_end>
20401e96:	8c1d                	sub	s0,s0,a5
20401e98:	c226                	sw	s1,4(sp)
20401e9a:	c606                	sw	ra,12(sp)
20401e9c:	8409                	srai	s0,s0,0x2
20401e9e:	84be                	mv	s1,a5
20401ea0:	e411                	bnez	s0,20401eac <__libc_fini_array+0x2a>
20401ea2:	40b2                	lw	ra,12(sp)
20401ea4:	4422                	lw	s0,8(sp)
20401ea6:	4492                	lw	s1,4(sp)
20401ea8:	0141                	addi	sp,sp,16
20401eaa:	8082                	ret
20401eac:	147d                	addi	s0,s0,-1
20401eae:	00241793          	slli	a5,s0,0x2
20401eb2:	97a6                	add	a5,a5,s1
20401eb4:	439c                	lw	a5,0(a5)
20401eb6:	9782                	jalr	a5
20401eb8:	b7e5                	j	20401ea0 <__libc_fini_array+0x1e>

20401eba <__libc_init_array>:
__libc_init_array():
20401eba:	1141                	addi	sp,sp,-16
20401ebc:	00004797          	auipc	a5,0x4
20401ec0:	e1478793          	addi	a5,a5,-492 # 20405cd0 <__init_array_start>
20401ec4:	c422                	sw	s0,8(sp)
20401ec6:	00004417          	auipc	s0,0x4
20401eca:	e0a40413          	addi	s0,s0,-502 # 20405cd0 <__init_array_start>
20401ece:	8c1d                	sub	s0,s0,a5
20401ed0:	c226                	sw	s1,4(sp)
20401ed2:	c04a                	sw	s2,0(sp)
20401ed4:	c606                	sw	ra,12(sp)
20401ed6:	8409                	srai	s0,s0,0x2
20401ed8:	4481                	li	s1,0
20401eda:	893e                	mv	s2,a5
20401edc:	02849663          	bne	s1,s0,20401f08 <__libc_init_array+0x4e>
20401ee0:	00004797          	auipc	a5,0x4
20401ee4:	df078793          	addi	a5,a5,-528 # 20405cd0 <__init_array_start>
20401ee8:	00004417          	auipc	s0,0x4
20401eec:	dec40413          	addi	s0,s0,-532 # 20405cd4 <__fini_array_end>
20401ef0:	8c1d                	sub	s0,s0,a5
20401ef2:	8409                	srai	s0,s0,0x2
20401ef4:	4481                	li	s1,0
20401ef6:	893e                	mv	s2,a5
20401ef8:	00849f63          	bne	s1,s0,20401f16 <__libc_init_array+0x5c>
20401efc:	40b2                	lw	ra,12(sp)
20401efe:	4422                	lw	s0,8(sp)
20401f00:	4492                	lw	s1,4(sp)
20401f02:	4902                	lw	s2,0(sp)
20401f04:	0141                	addi	sp,sp,16
20401f06:	8082                	ret
20401f08:	00249793          	slli	a5,s1,0x2
20401f0c:	97ca                	add	a5,a5,s2
20401f0e:	439c                	lw	a5,0(a5)
20401f10:	0485                	addi	s1,s1,1
20401f12:	9782                	jalr	a5
20401f14:	b7e1                	j	20401edc <__libc_init_array+0x22>
20401f16:	00249793          	slli	a5,s1,0x2
20401f1a:	97ca                	add	a5,a5,s2
20401f1c:	439c                	lw	a5,0(a5)
20401f1e:	0485                	addi	s1,s1,1
20401f20:	9782                	jalr	a5
20401f22:	bfd9                	j	20401ef8 <__libc_init_array+0x3e>

20401f24 <__register_exitproc>:
__register_exitproc():
20401f24:	5fc00797          	auipc	a5,0x5fc00
20401f28:	81878793          	addi	a5,a5,-2024 # 8000173c <_global_atexit>
20401f2c:	439c                	lw	a5,0(a5)
20401f2e:	8e2a                	mv	t3,a0
20401f30:	e78d                	bnez	a5,20401f5a <__register_exitproc+0x36>
20401f32:	5fc00717          	auipc	a4,0x5fc00
20401f36:	7f670713          	addi	a4,a4,2038 # 80002728 <_global_atexit0>
20401f3a:	5fc00797          	auipc	a5,0x5fc00
20401f3e:	80e7a123          	sw	a4,-2046(a5) # 8000173c <_global_atexit>
20401f42:	dfbfe517          	auipc	a0,0xdfbfe
20401f46:	0be50513          	addi	a0,a0,190 # 0 <__metal_boot_hart>
20401f4a:	87ba                	mv	a5,a4
20401f4c:	c519                	beqz	a0,20401f5a <__register_exitproc+0x36>
20401f4e:	411c                	lw	a5,0(a0)
20401f50:	5fc01517          	auipc	a0,0x5fc01
20401f54:	86f52023          	sw	a5,-1952(a0) # 800027b0 <_global_atexit0+0x88>
20401f58:	87ba                	mv	a5,a4
20401f5a:	43d8                	lw	a4,4(a5)
20401f5c:	487d                	li	a6,31
20401f5e:	557d                	li	a0,-1
20401f60:	04e84763          	blt	a6,a4,20401fae <__register_exitproc+0x8a>
20401f64:	020e0e63          	beqz	t3,20401fa0 <__register_exitproc+0x7c>
20401f68:	0887a803          	lw	a6,136(a5)
20401f6c:	04080163          	beqz	a6,20401fae <__register_exitproc+0x8a>
20401f70:	00271893          	slli	a7,a4,0x2
20401f74:	98c2                	add	a7,a7,a6
20401f76:	00c8a023          	sw	a2,0(a7)
20401f7a:	10082303          	lw	t1,256(a6)
20401f7e:	4605                	li	a2,1
20401f80:	00e61633          	sll	a2,a2,a4
20401f84:	00c36333          	or	t1,t1,a2
20401f88:	10682023          	sw	t1,256(a6)
20401f8c:	08d8a023          	sw	a3,128(a7)
20401f90:	4689                	li	a3,2
20401f92:	00de1763          	bne	t3,a3,20401fa0 <__register_exitproc+0x7c>
20401f96:	10482683          	lw	a3,260(a6)
20401f9a:	8e55                	or	a2,a2,a3
20401f9c:	10c82223          	sw	a2,260(a6)
20401fa0:	00170693          	addi	a3,a4,1
20401fa4:	070a                	slli	a4,a4,0x2
20401fa6:	c3d4                	sw	a3,4(a5)
20401fa8:	97ba                	add	a5,a5,a4
20401faa:	c78c                	sw	a1,8(a5)
20401fac:	4501                	li	a0,0
20401fae:	8082                	ret

20401fb0 <__call_exitprocs>:
__call_exitprocs():
20401fb0:	7179                	addi	sp,sp,-48
20401fb2:	cc52                	sw	s4,24(sp)
20401fb4:	ca56                	sw	s5,20(sp)
20401fb6:	c85a                	sw	s6,16(sp)
20401fb8:	c65e                	sw	s7,12(sp)
20401fba:	d606                	sw	ra,44(sp)
20401fbc:	d422                	sw	s0,40(sp)
20401fbe:	d226                	sw	s1,36(sp)
20401fc0:	d04a                	sw	s2,32(sp)
20401fc2:	ce4e                	sw	s3,28(sp)
20401fc4:	c462                	sw	s8,8(sp)
20401fc6:	8b2a                	mv	s6,a0
20401fc8:	8a2e                	mv	s4,a1
20401fca:	5fbffa97          	auipc	s5,0x5fbff
20401fce:	772a8a93          	addi	s5,s5,1906 # 8000173c <_global_atexit>
20401fd2:	4b85                	li	s7,1
20401fd4:	000aa403          	lw	s0,0(s5)
20401fd8:	c811                	beqz	s0,20401fec <__call_exitprocs+0x3c>
20401fda:	4044                	lw	s1,4(s0)
20401fdc:	08842983          	lw	s3,136(s0)
20401fe0:	fff48913          	addi	s2,s1,-1
20401fe4:	048a                	slli	s1,s1,0x2
20401fe6:	94a2                	add	s1,s1,s0
20401fe8:	00095e63          	bgez	s2,20402004 <__call_exitprocs+0x54>
20401fec:	50b2                	lw	ra,44(sp)
20401fee:	5422                	lw	s0,40(sp)
20401ff0:	5492                	lw	s1,36(sp)
20401ff2:	5902                	lw	s2,32(sp)
20401ff4:	49f2                	lw	s3,28(sp)
20401ff6:	4a62                	lw	s4,24(sp)
20401ff8:	4ad2                	lw	s5,20(sp)
20401ffa:	4b42                	lw	s6,16(sp)
20401ffc:	4bb2                	lw	s7,12(sp)
20401ffe:	4c22                	lw	s8,8(sp)
20402000:	6145                	addi	sp,sp,48
20402002:	8082                	ret
20402004:	000a0e63          	beqz	s4,20402020 <__call_exitprocs+0x70>
20402008:	00099563          	bnez	s3,20402012 <__call_exitprocs+0x62>
2040200c:	197d                	addi	s2,s2,-1
2040200e:	14f1                	addi	s1,s1,-4
20402010:	bfe1                	j	20401fe8 <__call_exitprocs+0x38>
20402012:	00291793          	slli	a5,s2,0x2
20402016:	97ce                	add	a5,a5,s3
20402018:	0807a783          	lw	a5,128(a5)
2040201c:	ff4798e3          	bne	a5,s4,2040200c <__call_exitprocs+0x5c>
20402020:	4058                	lw	a4,4(s0)
20402022:	40dc                	lw	a5,4(s1)
20402024:	177d                	addi	a4,a4,-1
20402026:	03271863          	bne	a4,s2,20402056 <__call_exitprocs+0xa6>
2040202a:	01242223          	sw	s2,4(s0)
2040202e:	dff9                	beqz	a5,2040200c <__call_exitprocs+0x5c>
20402030:	00442c03          	lw	s8,4(s0)
20402034:	00098863          	beqz	s3,20402044 <__call_exitprocs+0x94>
20402038:	1009a683          	lw	a3,256(s3)
2040203c:	012b9733          	sll	a4,s7,s2
20402040:	8ef9                	and	a3,a3,a4
20402042:	ee89                	bnez	a3,2040205c <__call_exitprocs+0xac>
20402044:	9782                	jalr	a5
20402046:	4058                	lw	a4,4(s0)
20402048:	000aa783          	lw	a5,0(s5)
2040204c:	f98714e3          	bne	a4,s8,20401fd4 <__call_exitprocs+0x24>
20402050:	faf40ee3          	beq	s0,a5,2040200c <__call_exitprocs+0x5c>
20402054:	b741                	j	20401fd4 <__call_exitprocs+0x24>
20402056:	0004a223          	sw	zero,4(s1)
2040205a:	bfd1                	j	2040202e <__call_exitprocs+0x7e>
2040205c:	00291693          	slli	a3,s2,0x2
20402060:	96ce                	add	a3,a3,s3
20402062:	428c                	lw	a1,0(a3)
20402064:	1049a683          	lw	a3,260(s3)
20402068:	8f75                	and	a4,a4,a3
2040206a:	e701                	bnez	a4,20402072 <__call_exitprocs+0xc2>
2040206c:	855a                	mv	a0,s6
2040206e:	9782                	jalr	a5
20402070:	bfd9                	j	20402046 <__call_exitprocs+0x96>
20402072:	852e                	mv	a0,a1
20402074:	9782                	jalr	a5
20402076:	bfc1                	j	20402046 <__call_exitprocs+0x96>

20402078 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20402078:	1101                	addi	sp,sp,-32
2040207a:	ce06                	sw	ra,28(sp)
2040207c:	cc22                	sw	s0,24(sp)
2040207e:	1000                	addi	s0,sp,32
20402080:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20402084:	fec42703          	lw	a4,-20(s0)
20402088:	47a9                	li	a5,10
2040208a:	00f71463          	bne	a4,a5,20402092 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
2040208e:	4535                	li	a0,13
20402090:	2811                	jal	204020a4 <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20402092:	fec42503          	lw	a0,-20(s0)
20402096:	2039                	jal	204020a4 <metal_tty_putc_raw>
20402098:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
2040209a:	853e                	mv	a0,a5
2040209c:	40f2                	lw	ra,28(sp)
2040209e:	4462                	lw	s0,24(sp)
204020a0:	6105                	addi	sp,sp,32
204020a2:	8082                	ret

204020a4 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
204020a4:	1101                	addi	sp,sp,-32
204020a6:	ce06                	sw	ra,28(sp)
204020a8:	cc22                	sw	s0,24(sp)
204020aa:	1000                	addi	s0,sp,32
204020ac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
204020b0:	fec42583          	lw	a1,-20(s0)
204020b4:	800017b7          	lui	a5,0x80001
204020b8:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe330>
204020bc:	28b1                	jal	20402118 <metal_uart_putc>
204020be:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
204020c0:	853e                	mv	a0,a5
204020c2:	40f2                	lw	ra,28(sp)
204020c4:	4462                	lw	s0,24(sp)
204020c6:	6105                	addi	sp,sp,32
204020c8:	8082                	ret

204020ca <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
204020ca:	1141                	addi	sp,sp,-16
204020cc:	c606                	sw	ra,12(sp)
204020ce:	c422                	sw	s0,8(sp)
204020d0:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
204020d2:	67f1                	lui	a5,0x1c
204020d4:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
204020d8:	800017b7          	lui	a5,0x80001
204020dc:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe330>
204020e0:	2031                	jal	204020ec <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
204020e2:	0001                	nop
204020e4:	40b2                	lw	ra,12(sp)
204020e6:	4422                	lw	s0,8(sp)
204020e8:	0141                	addi	sp,sp,16
204020ea:	8082                	ret

204020ec <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
204020ec:	1101                	addi	sp,sp,-32
204020ee:	ce06                	sw	ra,28(sp)
204020f0:	cc22                	sw	s0,24(sp)
204020f2:	1000                	addi	s0,sp,32
204020f4:	fea42623          	sw	a0,-20(s0)
204020f8:	feb42423          	sw	a1,-24(s0)
204020fc:	fec42783          	lw	a5,-20(s0)
20402100:	439c                	lw	a5,0(a5)
20402102:	439c                	lw	a5,0(a5)
20402104:	fe842583          	lw	a1,-24(s0)
20402108:	fec42503          	lw	a0,-20(s0)
2040210c:	9782                	jalr	a5
2040210e:	0001                	nop
20402110:	40f2                	lw	ra,28(sp)
20402112:	4462                	lw	s0,24(sp)
20402114:	6105                	addi	sp,sp,32
20402116:	8082                	ret

20402118 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20402118:	1101                	addi	sp,sp,-32
2040211a:	ce06                	sw	ra,28(sp)
2040211c:	cc22                	sw	s0,24(sp)
2040211e:	1000                	addi	s0,sp,32
20402120:	fea42623          	sw	a0,-20(s0)
20402124:	feb42423          	sw	a1,-24(s0)
20402128:	fec42783          	lw	a5,-20(s0)
2040212c:	439c                	lw	a5,0(a5)
2040212e:	43dc                	lw	a5,4(a5)
20402130:	fe842583          	lw	a1,-24(s0)
20402134:	fec42503          	lw	a0,-20(s0)
20402138:	9782                	jalr	a5
2040213a:	87aa                	mv	a5,a0
2040213c:	853e                	mv	a0,a5
2040213e:	40f2                	lw	ra,28(sp)
20402140:	4462                	lw	s0,24(sp)
20402142:	6105                	addi	sp,sp,32
20402144:	8082                	ret

20402146 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20402146:	1101                	addi	sp,sp,-32
20402148:	ce06                	sw	ra,28(sp)
2040214a:	cc22                	sw	s0,24(sp)
2040214c:	1000                	addi	s0,sp,32
2040214e:	fea42623          	sw	a0,-20(s0)
20402152:	feb42423          	sw	a1,-24(s0)
20402156:	fec42783          	lw	a5,-20(s0)
2040215a:	439c                	lw	a5,0(a5)
2040215c:	4bdc                	lw	a5,20(a5)
2040215e:	fe842583          	lw	a1,-24(s0)
20402162:	fec42503          	lw	a0,-20(s0)
20402166:	9782                	jalr	a5
20402168:	87aa                	mv	a5,a0
2040216a:	853e                	mv	a0,a5
2040216c:	40f2                	lw	ra,28(sp)
2040216e:	4462                	lw	s0,24(sp)
20402170:	6105                	addi	sp,sp,32
20402172:	8082                	ret

20402174 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20402174:	1101                	addi	sp,sp,-32
20402176:	ce22                	sw	s0,28(sp)
20402178:	1000                	addi	s0,sp,32
2040217a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
2040217e:	fec42703          	lw	a4,-20(s0)
20402182:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
20402186:	00f71563          	bne	a4,a5,20402190 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
2040218a:	020007b7          	lui	a5,0x2000
2040218e:	a011                	j	20402192 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
20402190:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
20402192:	853e                	mv	a0,a5
20402194:	4472                	lw	s0,28(sp)
20402196:	6105                	addi	sp,sp,32
20402198:	8082                	ret

2040219a <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
2040219a:	1101                	addi	sp,sp,-32
2040219c:	ce22                	sw	s0,28(sp)
2040219e:	1000                	addi	s0,sp,32
204021a0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204021a4:	fec42703          	lw	a4,-20(s0)
204021a8:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
204021ac:	00f71463          	bne	a4,a5,204021b4 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
204021b0:	4789                	li	a5,2
204021b2:	a011                	j	204021b6 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
204021b4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
204021b6:	853e                	mv	a0,a5
204021b8:	4472                	lw	s0,28(sp)
204021ba:	6105                	addi	sp,sp,32
204021bc:	8082                	ret

204021be <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
204021be:	1101                	addi	sp,sp,-32
204021c0:	ce22                	sw	s0,28(sp)
204021c2:	1000                	addi	s0,sp,32
204021c4:	fea42623          	sw	a0,-20(s0)
204021c8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
204021cc:	fe842783          	lw	a5,-24(s0)
204021d0:	e791                	bnez	a5,204021dc <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
204021d2:	800017b7          	lui	a5,0x80001
204021d6:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdc78>
204021da:	a821                	j	204021f2 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
204021dc:	fe842703          	lw	a4,-24(s0)
204021e0:	4785                	li	a5,1
204021e2:	00f71763          	bne	a4,a5,204021f0 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
204021e6:	800017b7          	lui	a5,0x80001
204021ea:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdc78>
204021ee:	a011                	j	204021f2 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
204021f0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
204021f2:	853e                	mv	a0,a5
204021f4:	4472                	lw	s0,28(sp)
204021f6:	6105                	addi	sp,sp,32
204021f8:	8082                	ret

204021fa <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
204021fa:	1101                	addi	sp,sp,-32
204021fc:	ce22                	sw	s0,28(sp)
204021fe:	1000                	addi	s0,sp,32
20402200:	fea42623          	sw	a0,-20(s0)
20402204:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
20402208:	fe842783          	lw	a5,-24(s0)
2040220c:	e399                	bnez	a5,20402212 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
2040220e:	478d                	li	a5,3
20402210:	a809                	j	20402222 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
20402212:	fe842703          	lw	a4,-24(s0)
20402216:	4785                	li	a5,1
20402218:	00f71463          	bne	a4,a5,20402220 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
2040221c:	479d                	li	a5,7
2040221e:	a011                	j	20402222 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
20402220:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
20402222:	853e                	mv	a0,a5
20402224:	4472                	lw	s0,28(sp)
20402226:	6105                	addi	sp,sp,32
20402228:	8082                	ret

2040222a <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
2040222a:	715d                	addi	sp,sp,-80
2040222c:	c686                	sw	ra,76(sp)
2040222e:	c4a2                	sw	s0,72(sp)
20402230:	c2ca                	sw	s2,68(sp)
20402232:	c0ce                	sw	s3,64(sp)
20402234:	de52                	sw	s4,60(sp)
20402236:	dc56                	sw	s5,56(sp)
20402238:	da5a                	sw	s6,52(sp)
2040223a:	d85e                	sw	s7,48(sp)
2040223c:	d662                	sw	s8,44(sp)
2040223e:	d466                	sw	s9,40(sp)
20402240:	0880                	addi	s0,sp,80
20402242:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402246:	fbc42783          	lw	a5,-68(s0)
2040224a:	853e                	mv	a0,a5
2040224c:	3725                	jal	20402174 <__metal_driver_sifive_clint0_control_base>
2040224e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20402252:	fcc42703          	lw	a4,-52(s0)
20402256:	67b1                	lui	a5,0xc
20402258:	17f1                	addi	a5,a5,-4
2040225a:	97ba                	add	a5,a5,a4
2040225c:	439c                	lw	a5,0(a5)
2040225e:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20402262:	fcc42703          	lw	a4,-52(s0)
20402266:	67b1                	lui	a5,0xc
20402268:	17e1                	addi	a5,a5,-8
2040226a:	97ba                	add	a5,a5,a4
2040226c:	439c                	lw	a5,0(a5)
2040226e:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20402272:	fcc42703          	lw	a4,-52(s0)
20402276:	67b1                	lui	a5,0xc
20402278:	17f1                	addi	a5,a5,-4
2040227a:	97ba                	add	a5,a5,a4
2040227c:	439c                	lw	a5,0(a5)
2040227e:	fc842703          	lw	a4,-56(s0)
20402282:	fcf718e3          	bne	a4,a5,20402252 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20402286:	fc842783          	lw	a5,-56(s0)
2040228a:	8c3e                	mv	s8,a5
2040228c:	4c81                	li	s9,0
2040228e:	000c1993          	slli	s3,s8,0x0
20402292:	4901                	li	s2,0
20402294:	fc442783          	lw	a5,-60(s0)
20402298:	8a3e                	mv	s4,a5
2040229a:	4a81                	li	s5,0
2040229c:	01496b33          	or	s6,s2,s4
204022a0:	0159ebb3          	or	s7,s3,s5
204022a4:	87da                	mv	a5,s6
204022a6:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
204022a8:	853e                	mv	a0,a5
204022aa:	85c2                	mv	a1,a6
204022ac:	40b6                	lw	ra,76(sp)
204022ae:	4426                	lw	s0,72(sp)
204022b0:	4916                	lw	s2,68(sp)
204022b2:	4986                	lw	s3,64(sp)
204022b4:	5a72                	lw	s4,60(sp)
204022b6:	5ae2                	lw	s5,56(sp)
204022b8:	5b52                	lw	s6,52(sp)
204022ba:	5bc2                	lw	s7,48(sp)
204022bc:	5c32                	lw	s8,44(sp)
204022be:	5ca2                	lw	s9,40(sp)
204022c0:	6161                	addi	sp,sp,80
204022c2:	8082                	ret

204022c4 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
204022c4:	7179                	addi	sp,sp,-48
204022c6:	d606                	sw	ra,44(sp)
204022c8:	d422                	sw	s0,40(sp)
204022ca:	d24a                	sw	s2,36(sp)
204022cc:	d04e                	sw	s3,32(sp)
204022ce:	1800                	addi	s0,sp,48
204022d0:	fca42e23          	sw	a0,-36(s0)
204022d4:	fcb42c23          	sw	a1,-40(s0)
204022d8:	fcc42823          	sw	a2,-48(s0)
204022dc:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
204022e0:	fdc42783          	lw	a5,-36(s0)
204022e4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
204022e8:	fec42783          	lw	a5,-20(s0)
204022ec:	853e                	mv	a0,a5
204022ee:	3559                	jal	20402174 <__metal_driver_sifive_clint0_control_base>
204022f0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
204022f4:	fd842783          	lw	a5,-40(s0)
204022f8:	078e                	slli	a5,a5,0x3
204022fa:	873e                	mv	a4,a5
204022fc:	fe842783          	lw	a5,-24(s0)
20402300:	973e                	add	a4,a4,a5
20402302:	6791                	lui	a5,0x4
20402304:	0791                	addi	a5,a5,4
20402306:	97ba                	add	a5,a5,a4
20402308:	873e                	mv	a4,a5
2040230a:	57fd                	li	a5,-1
2040230c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
2040230e:	fd842783          	lw	a5,-40(s0)
20402312:	078e                	slli	a5,a5,0x3
20402314:	873e                	mv	a4,a5
20402316:	fe842783          	lw	a5,-24(s0)
2040231a:	973e                	add	a4,a4,a5
2040231c:	6791                	lui	a5,0x4
2040231e:	97ba                	add	a5,a5,a4
20402320:	873e                	mv	a4,a5
20402322:	fd042783          	lw	a5,-48(s0)
20402326:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20402328:	fd442783          	lw	a5,-44(s0)
2040232c:	0007d913          	srli	s2,a5,0x0
20402330:	4981                	li	s3,0
20402332:	fd842783          	lw	a5,-40(s0)
20402336:	078e                	slli	a5,a5,0x3
20402338:	873e                	mv	a4,a5
2040233a:	fe842783          	lw	a5,-24(s0)
2040233e:	973e                	add	a4,a4,a5
20402340:	6791                	lui	a5,0x4
20402342:	0791                	addi	a5,a5,4
20402344:	97ba                	add	a5,a5,a4
20402346:	874a                	mv	a4,s2
20402348:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
2040234a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
2040234c:	853e                	mv	a0,a5
2040234e:	50b2                	lw	ra,44(sp)
20402350:	5422                	lw	s0,40(sp)
20402352:	5912                	lw	s2,36(sp)
20402354:	5982                	lw	s3,32(sp)
20402356:	6145                	addi	sp,sp,48
20402358:	8082                	ret

2040235a <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
2040235a:	1101                	addi	sp,sp,-32
2040235c:	ce06                	sw	ra,28(sp)
2040235e:	cc22                	sw	s0,24(sp)
20402360:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20402362:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20402366:	f14027f3          	csrr	a5,mhartid
2040236a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
2040236e:	fec42783          	lw	a5,-20(s0)
20402372:	853e                	mv	a0,a5
20402374:	1f2030ef          	jal	ra,20405566 <metal_cpu_get>
20402378:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
2040237c:	fe842503          	lw	a0,-24(s0)
20402380:	1c0030ef          	jal	ra,20405540 <metal_cpu_interrupt_controller>
20402384:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20402386:	853e                	mv	a0,a5
20402388:	40f2                	lw	ra,28(sp)
2040238a:	4462                	lw	s0,24(sp)
2040238c:	6105                	addi	sp,sp,32
2040238e:	8082                	ret

20402390 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20402390:	7139                	addi	sp,sp,-64
20402392:	de06                	sw	ra,60(sp)
20402394:	dc22                	sw	s0,56(sp)
20402396:	0080                	addi	s0,sp,64
20402398:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
2040239c:	fcc42503          	lw	a0,-52(s0)
204023a0:	3bed                	jal	2040219a <__metal_driver_sifive_clint0_num_interrupts>
204023a2:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
204023a6:	fcc42783          	lw	a5,-52(s0)
204023aa:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
204023ae:	fe442783          	lw	a5,-28(s0)
204023b2:	43dc                	lw	a5,4(a5)
204023b4:	efa9                	bnez	a5,2040240e <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
204023b6:	fe042623          	sw	zero,-20(s0)
204023ba:	a081                	j	204023fa <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204023bc:	fec42583          	lw	a1,-20(s0)
204023c0:	fcc42503          	lw	a0,-52(s0)
204023c4:	3bed                	jal	204021be <__metal_driver_sifive_clint0_interrupt_parents>
204023c6:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204023ca:	fec42583          	lw	a1,-20(s0)
204023ce:	fcc42503          	lw	a0,-52(s0)
204023d2:	3525                	jal	204021fa <__metal_driver_sifive_clint0_interrupt_lines>
204023d4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
204023d8:	fe042783          	lw	a5,-32(s0)
204023dc:	439c                	lw	a5,0(a5)
204023de:	4fdc                	lw	a5,28(a5)
204023e0:	fcc42683          	lw	a3,-52(s0)
204023e4:	4601                	li	a2,0
204023e6:	fdc42583          	lw	a1,-36(s0)
204023ea:	fe042503          	lw	a0,-32(s0)
204023ee:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
204023f0:	fec42783          	lw	a5,-20(s0)
204023f4:	0785                	addi	a5,a5,1
204023f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
204023fa:	fec42703          	lw	a4,-20(s0)
204023fe:	fe842783          	lw	a5,-24(s0)
20402402:	faf74de3          	blt	a4,a5,204023bc <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20402406:	fe442783          	lw	a5,-28(s0)
2040240a:	4705                	li	a4,1
2040240c:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
2040240e:	0001                	nop
20402410:	50f2                	lw	ra,60(sp)
20402412:	5462                	lw	s0,56(sp)
20402414:	6121                	addi	sp,sp,64
20402416:	8082                	ret

20402418 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20402418:	7139                	addi	sp,sp,-64
2040241a:	de06                	sw	ra,60(sp)
2040241c:	dc22                	sw	s0,56(sp)
2040241e:	0080                	addi	s0,sp,64
20402420:	fca42623          	sw	a0,-52(s0)
20402424:	fcb42423          	sw	a1,-56(s0)
20402428:	fcc42223          	sw	a2,-60(s0)
2040242c:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20402430:	57fd                	li	a5,-1
20402432:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20402436:	360010ef          	jal	ra,20403796 <__metal_controller_interrupt_vector_mode>
2040243a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
2040243e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402442:	3f21                	jal	2040235a <_get_cpu_intc>
20402444:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402448:	fcc42503          	lw	a0,-52(s0)
2040244c:	33b9                	jal	2040219a <__metal_driver_sifive_clint0_num_interrupts>
2040244e:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20402452:	fe042703          	lw	a4,-32(s0)
20402456:	4785                	li	a5,1
20402458:	00f70863          	beq	a4,a5,20402468 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
2040245c:	fe042783          	lw	a5,-32(s0)
20402460:	c781                	beqz	a5,20402468 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20402462:	fec42783          	lw	a5,-20(s0)
20402466:	a049                	j	204024e8 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20402468:	fe042223          	sw	zero,-28(s0)
2040246c:	a091                	j	204024b0 <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040246e:	fe442583          	lw	a1,-28(s0)
20402472:	fcc42503          	lw	a0,-52(s0)
20402476:	3351                	jal	204021fa <__metal_driver_sifive_clint0_interrupt_lines>
20402478:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040247c:	fe442583          	lw	a1,-28(s0)
20402480:	fcc42503          	lw	a0,-52(s0)
20402484:	3b2d                	jal	204021be <__metal_driver_sifive_clint0_interrupt_parents>
20402486:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
2040248a:	fdc42703          	lw	a4,-36(s0)
2040248e:	fe842783          	lw	a5,-24(s0)
20402492:	00f71863          	bne	a4,a5,204024a2 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20402496:	fc842703          	lw	a4,-56(s0)
2040249a:	fd442783          	lw	a5,-44(s0)
2040249e:	02f70063          	beq	a4,a5,204024be <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
204024a2:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
204024a6:	fe442783          	lw	a5,-28(s0)
204024aa:	0785                	addi	a5,a5,1
204024ac:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
204024b0:	fe442703          	lw	a4,-28(s0)
204024b4:	fd842783          	lw	a5,-40(s0)
204024b8:	faf74be3          	blt	a4,a5,2040246e <__metal_driver_riscv_clint0_register+0x56>
204024bc:	a011                	j	204024c0 <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
204024be:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
204024c0:	fe842783          	lw	a5,-24(s0)
204024c4:	c385                	beqz	a5,204024e4 <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
204024c6:	fe842783          	lw	a5,-24(s0)
204024ca:	439c                	lw	a5,0(a5)
204024cc:	4fdc                	lw	a5,28(a5)
204024ce:	fc042683          	lw	a3,-64(s0)
204024d2:	fc442603          	lw	a2,-60(s0)
204024d6:	fc842583          	lw	a1,-56(s0)
204024da:	fe842503          	lw	a0,-24(s0)
204024de:	9782                	jalr	a5
204024e0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
204024e4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
204024e8:	853e                	mv	a0,a5
204024ea:	50f2                	lw	ra,60(sp)
204024ec:	5462                	lw	s0,56(sp)
204024ee:	6121                	addi	sp,sp,64
204024f0:	8082                	ret

204024f2 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
204024f2:	7179                	addi	sp,sp,-48
204024f4:	d622                	sw	s0,44(sp)
204024f6:	1800                	addi	s0,sp,48
204024f8:	fca42e23          	sw	a0,-36(s0)
204024fc:	fcb42c23          	sw	a1,-40(s0)
20402500:	fcc42a23          	sw	a2,-44(s0)
20402504:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20402508:	57fd                	li	a5,-1
2040250a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
2040250e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20402512:	853e                	mv	a0,a5
20402514:	5432                	lw	s0,44(sp)
20402516:	6145                	addi	sp,sp,48
20402518:	8082                	ret

2040251a <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
2040251a:	1101                	addi	sp,sp,-32
2040251c:	ce06                	sw	ra,28(sp)
2040251e:	cc22                	sw	s0,24(sp)
20402520:	1000                	addi	s0,sp,32
20402522:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20402526:	270010ef          	jal	ra,20403796 <__metal_controller_interrupt_vector_mode>
2040252a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
2040252c:	853e                	mv	a0,a5
2040252e:	40f2                	lw	ra,28(sp)
20402530:	4462                	lw	s0,24(sp)
20402532:	6105                	addi	sp,sp,32
20402534:	8082                	ret

20402536 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20402536:	7179                	addi	sp,sp,-48
20402538:	d606                	sw	ra,44(sp)
2040253a:	d422                	sw	s0,40(sp)
2040253c:	1800                	addi	s0,sp,48
2040253e:	fca42e23          	sw	a0,-36(s0)
20402542:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20402546:	57fd                	li	a5,-1
20402548:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
2040254c:	3539                	jal	2040235a <_get_cpu_intc>
2040254e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20402552:	fe842783          	lw	a5,-24(s0)
20402556:	c395                	beqz	a5,2040257a <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20402558:	fd842703          	lw	a4,-40(s0)
2040255c:	4785                	li	a5,1
2040255e:	00e7ef63          	bltu	a5,a4,2040257c <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20402562:	fe842783          	lw	a5,-24(s0)
20402566:	439c                	lw	a5,0(a5)
20402568:	43dc                	lw	a5,4(a5)
2040256a:	fd842583          	lw	a1,-40(s0)
2040256e:	fe842503          	lw	a0,-24(s0)
20402572:	9782                	jalr	a5
20402574:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
20402578:	a011                	j	2040257c <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
2040257a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
2040257c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20402580:	853e                	mv	a0,a5
20402582:	50b2                	lw	ra,44(sp)
20402584:	5422                	lw	s0,40(sp)
20402586:	6145                	addi	sp,sp,48
20402588:	8082                	ret

2040258a <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
2040258a:	7139                	addi	sp,sp,-64
2040258c:	de06                	sw	ra,60(sp)
2040258e:	dc22                	sw	s0,56(sp)
20402590:	0080                	addi	s0,sp,64
20402592:	fca42623          	sw	a0,-52(s0)
20402596:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
2040259a:	57fd                	li	a5,-1
2040259c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
204025a0:	fc842783          	lw	a5,-56(s0)
204025a4:	c7c9                	beqz	a5,2040262e <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
204025a6:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
204025aa:	3b45                	jal	2040235a <_get_cpu_intc>
204025ac:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204025b0:	fcc42503          	lw	a0,-52(s0)
204025b4:	36dd                	jal	2040219a <__metal_driver_sifive_clint0_num_interrupts>
204025b6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
204025ba:	fe042223          	sw	zero,-28(s0)
204025be:	a091                	j	20402602 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204025c0:	fe442583          	lw	a1,-28(s0)
204025c4:	fcc42503          	lw	a0,-52(s0)
204025c8:	390d                	jal	204021fa <__metal_driver_sifive_clint0_interrupt_lines>
204025ca:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204025ce:	fe442583          	lw	a1,-28(s0)
204025d2:	fcc42503          	lw	a0,-52(s0)
204025d6:	36e5                	jal	204021be <__metal_driver_sifive_clint0_interrupt_parents>
204025d8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
204025dc:	fe042703          	lw	a4,-32(s0)
204025e0:	fe842783          	lw	a5,-24(s0)
204025e4:	00f71863          	bne	a4,a5,204025f4 <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
204025e8:	fc842703          	lw	a4,-56(s0)
204025ec:	fd842783          	lw	a5,-40(s0)
204025f0:	02f70063          	beq	a4,a5,20402610 <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
204025f4:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
204025f8:	fe442783          	lw	a5,-28(s0)
204025fc:	0785                	addi	a5,a5,1
204025fe:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20402602:	fe442703          	lw	a4,-28(s0)
20402606:	fdc42783          	lw	a5,-36(s0)
2040260a:	faf74be3          	blt	a4,a5,204025c0 <__metal_driver_riscv_clint0_enable+0x36>
2040260e:	a011                	j	20402612 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20402610:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20402612:	fe842783          	lw	a5,-24(s0)
20402616:	cf81                	beqz	a5,2040262e <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20402618:	fe842783          	lw	a5,-24(s0)
2040261c:	439c                	lw	a5,0(a5)
2040261e:	53dc                	lw	a5,36(a5)
20402620:	fc842583          	lw	a1,-56(s0)
20402624:	fe842503          	lw	a0,-24(s0)
20402628:	9782                	jalr	a5
2040262a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
2040262e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20402632:	853e                	mv	a0,a5
20402634:	50f2                	lw	ra,60(sp)
20402636:	5462                	lw	s0,56(sp)
20402638:	6121                	addi	sp,sp,64
2040263a:	8082                	ret

2040263c <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
2040263c:	7139                	addi	sp,sp,-64
2040263e:	de06                	sw	ra,60(sp)
20402640:	dc22                	sw	s0,56(sp)
20402642:	0080                	addi	s0,sp,64
20402644:	fca42623          	sw	a0,-52(s0)
20402648:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
2040264c:	57fd                	li	a5,-1
2040264e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20402652:	fc842783          	lw	a5,-56(s0)
20402656:	cbc1                	beqz	a5,204026e6 <__metal_driver_riscv_clint0_disable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20402658:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
2040265c:	39fd                	jal	2040235a <_get_cpu_intc>
2040265e:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402662:	fcc42503          	lw	a0,-52(s0)
20402666:	b35ff0ef          	jal	ra,2040219a <__metal_driver_sifive_clint0_num_interrupts>
2040266a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
2040266e:	fe042223          	sw	zero,-28(s0)
20402672:	a0a1                	j	204026ba <__metal_driver_riscv_clint0_disable+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402674:	fe442583          	lw	a1,-28(s0)
20402678:	fcc42503          	lw	a0,-52(s0)
2040267c:	b7fff0ef          	jal	ra,204021fa <__metal_driver_sifive_clint0_interrupt_lines>
20402680:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402684:	fe442583          	lw	a1,-28(s0)
20402688:	fcc42503          	lw	a0,-52(s0)
2040268c:	b33ff0ef          	jal	ra,204021be <__metal_driver_sifive_clint0_interrupt_parents>
20402690:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20402694:	fe042703          	lw	a4,-32(s0)
20402698:	fe842783          	lw	a5,-24(s0)
2040269c:	00f71863          	bne	a4,a5,204026ac <__metal_driver_riscv_clint0_disable+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
204026a0:	fc842703          	lw	a4,-56(s0)
204026a4:	fd842783          	lw	a5,-40(s0)
204026a8:	02f70063          	beq	a4,a5,204026c8 <__metal_driver_riscv_clint0_disable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
204026ac:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
204026b0:	fe442783          	lw	a5,-28(s0)
204026b4:	0785                	addi	a5,a5,1
204026b6:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
204026ba:	fe442703          	lw	a4,-28(s0)
204026be:	fdc42783          	lw	a5,-36(s0)
204026c2:	faf749e3          	blt	a4,a5,20402674 <__metal_driver_riscv_clint0_disable+0x38>
204026c6:	a011                	j	204026ca <__metal_driver_riscv_clint0_disable+0x8e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
204026c8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
204026ca:	fe842783          	lw	a5,-24(s0)
204026ce:	cf81                	beqz	a5,204026e6 <__metal_driver_riscv_clint0_disable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
204026d0:	fe842783          	lw	a5,-24(s0)
204026d4:	439c                	lw	a5,0(a5)
204026d6:	579c                	lw	a5,40(a5)
204026d8:	fc842583          	lw	a1,-56(s0)
204026dc:	fe842503          	lw	a0,-24(s0)
204026e0:	9782                	jalr	a5
204026e2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
204026e6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
204026ea:	853e                	mv	a0,a5
204026ec:	50f2                	lw	ra,60(sp)
204026ee:	5462                	lw	s0,56(sp)
204026f0:	6121                	addi	sp,sp,64
204026f2:	8082                	ret

204026f4 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
204026f4:	7179                	addi	sp,sp,-48
204026f6:	d606                	sw	ra,44(sp)
204026f8:	d422                	sw	s0,40(sp)
204026fa:	1800                	addi	s0,sp,48
204026fc:	fca42e23          	sw	a0,-36(s0)
20402700:	fcb42c23          	sw	a1,-40(s0)
20402704:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
20402708:	57fd                	li	a5,-1
2040270a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
2040270e:	fdc42783          	lw	a5,-36(s0)
20402712:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20402716:	fdc42503          	lw	a0,-36(s0)
2040271a:	a5bff0ef          	jal	ra,20402174 <__metal_driver_sifive_clint0_control_base>
2040271e:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20402722:	fd842703          	lw	a4,-40(s0)
20402726:	4789                	li	a5,2
20402728:	04f70963          	beq	a4,a5,2040277a <__metal_driver_riscv_clint0_command_request+0x86>
2040272c:	fd842703          	lw	a4,-40(s0)
20402730:	4789                	li	a5,2
20402732:	00e7c863          	blt	a5,a4,20402742 <__metal_driver_riscv_clint0_command_request+0x4e>
20402736:	fd842703          	lw	a4,-40(s0)
2040273a:	4785                	li	a5,1
2040273c:	00f70e63          	beq	a4,a5,20402758 <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20402740:	a8f1                	j	2040281c <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20402742:	fd842703          	lw	a4,-40(s0)
20402746:	478d                	li	a5,3
20402748:	04f70d63          	beq	a4,a5,204027a2 <__metal_driver_riscv_clint0_command_request+0xae>
2040274c:	fd842703          	lw	a4,-40(s0)
20402750:	4791                	li	a5,4
20402752:	08f70963          	beq	a4,a5,204027e4 <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20402756:	a0d9                	j	2040281c <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20402758:	fd442783          	lw	a5,-44(s0)
2040275c:	cbcd                	beqz	a5,2040280e <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
2040275e:	fe842503          	lw	a0,-24(s0)
20402762:	ac9ff0ef          	jal	ra,2040222a <__metal_clint0_mtime_get>
20402766:	87aa                	mv	a5,a0
20402768:	882e                	mv	a6,a1
2040276a:	fd442703          	lw	a4,-44(s0)
2040276e:	c31c                	sw	a5,0(a4)
20402770:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20402774:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402778:	a859                	j	2040280e <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
2040277a:	fd442783          	lw	a5,-44(s0)
2040277e:	cbd1                	beqz	a5,20402812 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20402780:	fd442783          	lw	a5,-44(s0)
20402784:	439c                	lw	a5,0(a5)
20402786:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040278a:	fe042783          	lw	a5,-32(s0)
2040278e:	078a                	slli	a5,a5,0x2
20402790:	873e                	mv	a4,a5
20402792:	fe442783          	lw	a5,-28(s0)
20402796:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20402798:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
2040279c:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
204027a0:	a88d                	j	20402812 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
204027a2:	fd442783          	lw	a5,-44(s0)
204027a6:	cba5                	beqz	a5,20402816 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
204027a8:	fd442783          	lw	a5,-44(s0)
204027ac:	439c                	lw	a5,0(a5)
204027ae:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204027b2:	fe042783          	lw	a5,-32(s0)
204027b6:	078a                	slli	a5,a5,0x2
204027b8:	873e                	mv	a4,a5
204027ba:	fe442783          	lw	a5,-28(s0)
204027be:	97ba                	add	a5,a5,a4
204027c0:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
204027c2:	4785                	li	a5,1
204027c4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
204027c6:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204027ca:	fe042783          	lw	a5,-32(s0)
204027ce:	078a                	slli	a5,a5,0x2
204027d0:	873e                	mv	a4,a5
204027d2:	fe442783          	lw	a5,-28(s0)
204027d6:	97ba                	add	a5,a5,a4
204027d8:	439c                	lw	a5,0(a5)
204027da:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
204027de:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
204027e2:	a815                	j	20402816 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
204027e4:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
204027e8:	fd442783          	lw	a5,-44(s0)
204027ec:	c79d                	beqz	a5,2040281a <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
204027ee:	fd442783          	lw	a5,-44(s0)
204027f2:	439c                	lw	a5,0(a5)
204027f4:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204027f8:	fe042783          	lw	a5,-32(s0)
204027fc:	078a                	slli	a5,a5,0x2
204027fe:	873e                	mv	a4,a5
20402800:	fe442783          	lw	a5,-28(s0)
20402804:	97ba                	add	a5,a5,a4
20402806:	439c                	lw	a5,0(a5)
20402808:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
2040280c:	a039                	j	2040281a <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
2040280e:	0001                	nop
20402810:	a031                	j	2040281c <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402812:	0001                	nop
20402814:	a021                	j	2040281c <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402816:	0001                	nop
20402818:	a011                	j	2040281c <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
2040281a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
2040281c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
20402820:	853e                	mv	a0,a5
20402822:	50b2                	lw	ra,44(sp)
20402824:	5422                	lw	s0,40(sp)
20402826:	6145                	addi	sp,sp,48
20402828:	8082                	ret

2040282a <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
2040282a:	7179                	addi	sp,sp,-48
2040282c:	d606                	sw	ra,44(sp)
2040282e:	d422                	sw	s0,40(sp)
20402830:	1800                	addi	s0,sp,48
20402832:	fca42e23          	sw	a0,-36(s0)
20402836:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
2040283a:	557020ef          	jal	ra,20405590 <metal_cpu_get_current_hartid>
2040283e:	87aa                	mv	a5,a0
20402840:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20402844:	fec40793          	addi	a5,s0,-20
20402848:	863e                	mv	a2,a5
2040284a:	4589                	li	a1,2
2040284c:	fdc42503          	lw	a0,-36(s0)
20402850:	3555                	jal	204026f4 <__metal_driver_riscv_clint0_command_request>
20402852:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20402854:	853e                	mv	a0,a5
20402856:	50b2                	lw	ra,44(sp)
20402858:	5422                	lw	s0,40(sp)
2040285a:	6145                	addi	sp,sp,48
2040285c:	8082                	ret

2040285e <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
2040285e:	7179                	addi	sp,sp,-48
20402860:	d606                	sw	ra,44(sp)
20402862:	d422                	sw	s0,40(sp)
20402864:	1800                	addi	s0,sp,48
20402866:	fca42e23          	sw	a0,-36(s0)
2040286a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
2040286e:	523020ef          	jal	ra,20405590 <metal_cpu_get_current_hartid>
20402872:	87aa                	mv	a5,a0
20402874:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
20402878:	fec40793          	addi	a5,s0,-20
2040287c:	863e                	mv	a2,a5
2040287e:	458d                	li	a1,3
20402880:	fdc42503          	lw	a0,-36(s0)
20402884:	3d85                	jal	204026f4 <__metal_driver_riscv_clint0_command_request>
20402886:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20402888:	853e                	mv	a0,a5
2040288a:	50b2                	lw	ra,44(sp)
2040288c:	5422                	lw	s0,40(sp)
2040288e:	6145                	addi	sp,sp,48
20402890:	8082                	ret

20402892 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20402892:	1101                	addi	sp,sp,-32
20402894:	ce22                	sw	s0,28(sp)
20402896:	1000                	addi	s0,sp,32
20402898:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2040289c:	fec42703          	lw	a4,-20(s0)
204028a0:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
204028a4:	00f71463          	bne	a4,a5,204028ac <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
204028a8:	4781                	li	a5,0
204028aa:	a011                	j	204028ae <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
204028ac:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
204028ae:	853e                	mv	a0,a5
204028b0:	4472                	lw	s0,28(sp)
204028b2:	6105                	addi	sp,sp,32
204028b4:	8082                	ret

204028b6 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
204028b6:	1101                	addi	sp,sp,-32
204028b8:	ce22                	sw	s0,28(sp)
204028ba:	1000                	addi	s0,sp,32
204028bc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204028c0:	fec42703          	lw	a4,-20(s0)
204028c4:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
204028c8:	00f71763          	bne	a4,a5,204028d6 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
204028cc:	000f47b7          	lui	a5,0xf4
204028d0:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
204028d4:	a011                	j	204028d8 <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
204028d6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
204028d8:	853e                	mv	a0,a5
204028da:	4472                	lw	s0,28(sp)
204028dc:	6105                	addi	sp,sp,32
204028de:	8082                	ret

204028e0 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
204028e0:	1101                	addi	sp,sp,-32
204028e2:	ce22                	sw	s0,28(sp)
204028e4:	1000                	addi	s0,sp,32
204028e6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204028ea:	fec42703          	lw	a4,-20(s0)
204028ee:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
204028f2:	00f71763          	bne	a4,a5,20402900 <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
204028f6:	800017b7          	lui	a5,0x80001
204028fa:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdc78>
204028fe:	a011                	j	20402902 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
20402900:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
20402902:	853e                	mv	a0,a5
20402904:	4472                	lw	s0,28(sp)
20402906:	6105                	addi	sp,sp,32
20402908:	8082                	ret

2040290a <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
2040290a:	1101                	addi	sp,sp,-32
2040290c:	ce22                	sw	s0,28(sp)
2040290e:	1000                	addi	s0,sp,32
20402910:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20402914:	fec42783          	lw	a5,-20(s0)
20402918:	00f04a63          	bgtz	a5,2040292c <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
2040291c:	fec42703          	lw	a4,-20(s0)
20402920:	070a                	slli	a4,a4,0x2
20402922:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402926:	97ba                	add	a5,a5,a4
20402928:	439c                	lw	a5,0(a5)
2040292a:	a011                	j	2040292e <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
2040292c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
2040292e:	853e                	mv	a0,a5
20402930:	4472                	lw	s0,28(sp)
20402932:	6105                	addi	sp,sp,32
20402934:	8082                	ret

20402936 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20402936:	1101                	addi	sp,sp,-32
20402938:	ce22                	sw	s0,28(sp)
2040293a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
2040293c:	f14027f3          	csrr	a5,mhartid
20402940:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20402944:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20402948:	853e                	mv	a0,a5
2040294a:	4472                	lw	s0,28(sp)
2040294c:	6105                	addi	sp,sp,32
2040294e:	8082                	ret

20402950 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20402950:	1101                	addi	sp,sp,-32
20402952:	ce22                	sw	s0,28(sp)
20402954:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402956:	47a1                	li	a5,8
20402958:	3007a7f3          	csrrs	a5,mstatus,a5
2040295c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
20402960:	0001                	nop
20402962:	4472                	lw	s0,28(sp)
20402964:	6105                	addi	sp,sp,32
20402966:	8082                	ret

20402968 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20402968:	1101                	addi	sp,sp,-32
2040296a:	ce22                	sw	s0,28(sp)
2040296c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
2040296e:	47a1                	li	a5,8
20402970:	3007b7f3          	csrrc	a5,mstatus,a5
20402974:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
20402978:	0001                	nop
2040297a:	4472                	lw	s0,28(sp)
2040297c:	6105                	addi	sp,sp,32
2040297e:	8082                	ret

20402980 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
20402980:	1101                	addi	sp,sp,-32
20402982:	ce22                	sw	s0,28(sp)
20402984:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402986:	47a1                	li	a5,8
20402988:	3047a7f3          	csrrs	a5,mie,a5
2040298c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
20402990:	0001                	nop
20402992:	4472                	lw	s0,28(sp)
20402994:	6105                	addi	sp,sp,32
20402996:	8082                	ret

20402998 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20402998:	1101                	addi	sp,sp,-32
2040299a:	ce22                	sw	s0,28(sp)
2040299c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
2040299e:	47a1                	li	a5,8
204029a0:	3047b7f3          	csrrc	a5,mie,a5
204029a4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
204029a8:	0001                	nop
204029aa:	4472                	lw	s0,28(sp)
204029ac:	6105                	addi	sp,sp,32
204029ae:	8082                	ret

204029b0 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
204029b0:	1101                	addi	sp,sp,-32
204029b2:	ce22                	sw	s0,28(sp)
204029b4:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204029b6:	08000793          	li	a5,128
204029ba:	3047a7f3          	csrrs	a5,mie,a5
204029be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
204029c2:	0001                	nop
204029c4:	4472                	lw	s0,28(sp)
204029c6:	6105                	addi	sp,sp,32
204029c8:	8082                	ret

204029ca <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
204029ca:	1101                	addi	sp,sp,-32
204029cc:	ce22                	sw	s0,28(sp)
204029ce:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204029d0:	08000793          	li	a5,128
204029d4:	3047b7f3          	csrrc	a5,mie,a5
204029d8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
204029dc:	0001                	nop
204029de:	4472                	lw	s0,28(sp)
204029e0:	6105                	addi	sp,sp,32
204029e2:	8082                	ret

204029e4 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
204029e4:	1101                	addi	sp,sp,-32
204029e6:	ce22                	sw	s0,28(sp)
204029e8:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
204029ea:	6785                	lui	a5,0x1
204029ec:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
204029f0:	3047a7f3          	csrrs	a5,mie,a5
204029f4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
204029f8:	0001                	nop
204029fa:	4472                	lw	s0,28(sp)
204029fc:	6105                	addi	sp,sp,32
204029fe:	8082                	ret

20402a00 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
20402a00:	1101                	addi	sp,sp,-32
20402a02:	ce22                	sw	s0,28(sp)
20402a04:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402a06:	6785                	lui	a5,0x1
20402a08:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402a0c:	3047b7f3          	csrrc	a5,mie,a5
20402a10:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20402a14:	0001                	nop
20402a16:	4472                	lw	s0,28(sp)
20402a18:	6105                	addi	sp,sp,32
20402a1a:	8082                	ret

20402a1c <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20402a1c:	7179                	addi	sp,sp,-48
20402a1e:	d622                	sw	s0,44(sp)
20402a20:	1800                	addi	s0,sp,48
20402a22:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20402a26:	fdc42783          	lw	a5,-36(s0)
20402a2a:	4705                	li	a4,1
20402a2c:	00f717b3          	sll	a5,a4,a5
20402a30:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20402a34:	fec42783          	lw	a5,-20(s0)
20402a38:	3047a7f3          	csrrs	a5,mie,a5
20402a3c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
20402a40:	0001                	nop
20402a42:	5432                	lw	s0,44(sp)
20402a44:	6145                	addi	sp,sp,48
20402a46:	8082                	ret

20402a48 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20402a48:	7179                	addi	sp,sp,-48
20402a4a:	d622                	sw	s0,44(sp)
20402a4c:	1800                	addi	s0,sp,48
20402a4e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
20402a52:	fdc42783          	lw	a5,-36(s0)
20402a56:	4705                	li	a4,1
20402a58:	00f717b3          	sll	a5,a4,a5
20402a5c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20402a60:	fec42783          	lw	a5,-20(s0)
20402a64:	3047b7f3          	csrrc	a5,mie,a5
20402a68:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20402a6c:	0001                	nop
20402a6e:	5432                	lw	s0,44(sp)
20402a70:	6145                	addi	sp,sp,48
20402a72:	8082                	ret

20402a74 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20402a74:	1101                	addi	sp,sp,-32
20402a76:	ce06                	sw	ra,28(sp)
20402a78:	cc22                	sw	s0,24(sp)
20402a7a:	1000                	addi	s0,sp,32
20402a7c:	fea42623          	sw	a0,-20(s0)
20402a80:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20402a84:	06400513          	li	a0,100
20402a88:	323020ef          	jal	ra,204055aa <metal_shutdown>

20402a8c <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20402a8c:	1101                	addi	sp,sp,-32
20402a8e:	ce06                	sw	ra,28(sp)
20402a90:	cc22                	sw	s0,24(sp)
20402a92:	1000                	addi	s0,sp,32
20402a94:	fea42623          	sw	a0,-20(s0)
20402a98:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20402a9c:	0c800513          	li	a0,200
20402aa0:	30b020ef          	jal	ra,204055aa <metal_shutdown>

20402aa4 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20402aa4:	715d                	addi	sp,sp,-80
20402aa6:	c686                	sw	ra,76(sp)
20402aa8:	c496                	sw	t0,72(sp)
20402aaa:	c29a                	sw	t1,68(sp)
20402aac:	c09e                	sw	t2,64(sp)
20402aae:	de22                	sw	s0,60(sp)
20402ab0:	dc2a                	sw	a0,56(sp)
20402ab2:	da2e                	sw	a1,52(sp)
20402ab4:	d832                	sw	a2,48(sp)
20402ab6:	d636                	sw	a3,44(sp)
20402ab8:	d43a                	sw	a4,40(sp)
20402aba:	d23e                	sw	a5,36(sp)
20402abc:	d042                	sw	a6,32(sp)
20402abe:	ce46                	sw	a7,28(sp)
20402ac0:	cc72                	sw	t3,24(sp)
20402ac2:	ca76                	sw	t4,20(sp)
20402ac4:	c87a                	sw	t5,16(sp)
20402ac6:	c67e                	sw	t6,12(sp)
20402ac8:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20402aca:	12c00513          	li	a0,300
20402ace:	2dd020ef          	jal	ra,204055aa <metal_shutdown>

20402ad2 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20402ad2:	711d                	addi	sp,sp,-96
20402ad4:	ce86                	sw	ra,92(sp)
20402ad6:	cc96                	sw	t0,88(sp)
20402ad8:	ca9a                	sw	t1,84(sp)
20402ada:	c89e                	sw	t2,80(sp)
20402adc:	c6a2                	sw	s0,76(sp)
20402ade:	c4aa                	sw	a0,72(sp)
20402ae0:	c2ae                	sw	a1,68(sp)
20402ae2:	c0b2                	sw	a2,64(sp)
20402ae4:	de36                	sw	a3,60(sp)
20402ae6:	dc3a                	sw	a4,56(sp)
20402ae8:	da3e                	sw	a5,52(sp)
20402aea:	d842                	sw	a6,48(sp)
20402aec:	d646                	sw	a7,44(sp)
20402aee:	d472                	sw	t3,40(sp)
20402af0:	d276                	sw	t4,36(sp)
20402af2:	d07a                	sw	t5,32(sp)
20402af4:	ce7e                	sw	t6,28(sp)
20402af6:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402af8:	3d3d                	jal	20402936 <__metal_myhart_id>
20402afa:	872a                	mv	a4,a0
20402afc:	070a                	slli	a4,a4,0x2
20402afe:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402b02:	97ba                	add	a5,a5,a4
20402b04:	439c                	lw	a5,0(a5)
20402b06:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20402b0a:	fac42783          	lw	a5,-84(s0)
20402b0e:	c785                	beqz	a5,20402b36 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b10:	fac42503          	lw	a0,-84(s0)
20402b14:	33f1                	jal	204028e0 <__metal_driver_cpu_interrupt_controller>
20402b16:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20402b1a:	fa842783          	lw	a5,-88(s0)
20402b1e:	0e07a783          	lw	a5,224(a5)
20402b22:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20402b26:	fa842783          	lw	a5,-88(s0)
20402b2a:	0d87a783          	lw	a5,216(a5)
20402b2e:	fa442583          	lw	a1,-92(s0)
20402b32:	450d                	li	a0,3
20402b34:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20402b36:	0001                	nop
20402b38:	40f6                	lw	ra,92(sp)
20402b3a:	42e6                	lw	t0,88(sp)
20402b3c:	4356                	lw	t1,84(sp)
20402b3e:	43c6                	lw	t2,80(sp)
20402b40:	4436                	lw	s0,76(sp)
20402b42:	4526                	lw	a0,72(sp)
20402b44:	4596                	lw	a1,68(sp)
20402b46:	4606                	lw	a2,64(sp)
20402b48:	56f2                	lw	a3,60(sp)
20402b4a:	5762                	lw	a4,56(sp)
20402b4c:	57d2                	lw	a5,52(sp)
20402b4e:	5842                	lw	a6,48(sp)
20402b50:	58b2                	lw	a7,44(sp)
20402b52:	5e22                	lw	t3,40(sp)
20402b54:	5e92                	lw	t4,36(sp)
20402b56:	5f02                	lw	t5,32(sp)
20402b58:	4ff2                	lw	t6,28(sp)
20402b5a:	6125                	addi	sp,sp,96
20402b5c:	30200073          	mret

20402b60 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20402b60:	7179                	addi	sp,sp,-48
20402b62:	d606                	sw	ra,44(sp)
20402b64:	d422                	sw	s0,40(sp)
20402b66:	1800                	addi	s0,sp,48
20402b68:	fca42e23          	sw	a0,-36(s0)
20402b6c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402b70:	33d9                	jal	20402936 <__metal_myhart_id>
20402b72:	872a                	mv	a4,a0
20402b74:	070a                	slli	a4,a4,0x2
20402b76:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402b7a:	97ba                	add	a5,a5,a4
20402b7c:	439c                	lw	a5,0(a5)
20402b7e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402b82:	342027f3          	csrr	a5,mcause
20402b86:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20402b8a:	fec42783          	lw	a5,-20(s0)
20402b8e:	c795                	beqz	a5,20402bba <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b90:	fec42503          	lw	a0,-20(s0)
20402b94:	33b1                	jal	204028e0 <__metal_driver_cpu_interrupt_controller>
20402b96:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20402b9a:	fe842783          	lw	a5,-24(s0)
20402b9e:	3ff7f793          	andi	a5,a5,1023
20402ba2:	fe442703          	lw	a4,-28(s0)
20402ba6:	0e078793          	addi	a5,a5,224
20402baa:	078a                	slli	a5,a5,0x2
20402bac:	97ba                	add	a5,a5,a4
20402bae:	479c                	lw	a5,8(a5)
20402bb0:	fdc42583          	lw	a1,-36(s0)
20402bb4:	fec42503          	lw	a0,-20(s0)
20402bb8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20402bba:	0001                	nop
20402bbc:	50b2                	lw	ra,44(sp)
20402bbe:	5422                	lw	s0,40(sp)
20402bc0:	6145                	addi	sp,sp,48
20402bc2:	8082                	ret

20402bc4 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20402bc4:	711d                	addi	sp,sp,-96
20402bc6:	ce86                	sw	ra,92(sp)
20402bc8:	cc96                	sw	t0,88(sp)
20402bca:	ca9a                	sw	t1,84(sp)
20402bcc:	c89e                	sw	t2,80(sp)
20402bce:	c6a2                	sw	s0,76(sp)
20402bd0:	c4aa                	sw	a0,72(sp)
20402bd2:	c2ae                	sw	a1,68(sp)
20402bd4:	c0b2                	sw	a2,64(sp)
20402bd6:	de36                	sw	a3,60(sp)
20402bd8:	dc3a                	sw	a4,56(sp)
20402bda:	da3e                	sw	a5,52(sp)
20402bdc:	d842                	sw	a6,48(sp)
20402bde:	d646                	sw	a7,44(sp)
20402be0:	d472                	sw	t3,40(sp)
20402be2:	d276                	sw	t4,36(sp)
20402be4:	d07a                	sw	t5,32(sp)
20402be6:	ce7e                	sw	t6,28(sp)
20402be8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402bea:	33b1                	jal	20402936 <__metal_myhart_id>
20402bec:	872a                	mv	a4,a0
20402bee:	070a                	slli	a4,a4,0x2
20402bf0:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402bf4:	97ba                	add	a5,a5,a4
20402bf6:	439c                	lw	a5,0(a5)
20402bf8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20402bfc:	fac42783          	lw	a5,-84(s0)
20402c00:	c785                	beqz	a5,20402c28 <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402c02:	fac42503          	lw	a0,-84(s0)
20402c06:	39e9                	jal	204028e0 <__metal_driver_cpu_interrupt_controller>
20402c08:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20402c0c:	fa842783          	lw	a5,-88(s0)
20402c10:	1407a783          	lw	a5,320(a5)
20402c14:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20402c18:	fa842783          	lw	a5,-88(s0)
20402c1c:	1387a783          	lw	a5,312(a5)
20402c20:	fa442583          	lw	a1,-92(s0)
20402c24:	451d                	li	a0,7
20402c26:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20402c28:	0001                	nop
20402c2a:	40f6                	lw	ra,92(sp)
20402c2c:	42e6                	lw	t0,88(sp)
20402c2e:	4356                	lw	t1,84(sp)
20402c30:	43c6                	lw	t2,80(sp)
20402c32:	4436                	lw	s0,76(sp)
20402c34:	4526                	lw	a0,72(sp)
20402c36:	4596                	lw	a1,68(sp)
20402c38:	4606                	lw	a2,64(sp)
20402c3a:	56f2                	lw	a3,60(sp)
20402c3c:	5762                	lw	a4,56(sp)
20402c3e:	57d2                	lw	a5,52(sp)
20402c40:	5842                	lw	a6,48(sp)
20402c42:	58b2                	lw	a7,44(sp)
20402c44:	5e22                	lw	t3,40(sp)
20402c46:	5e92                	lw	t4,36(sp)
20402c48:	5f02                	lw	t5,32(sp)
20402c4a:	4ff2                	lw	t6,28(sp)
20402c4c:	6125                	addi	sp,sp,96
20402c4e:	30200073          	mret

20402c52 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20402c52:	7179                	addi	sp,sp,-48
20402c54:	d606                	sw	ra,44(sp)
20402c56:	d422                	sw	s0,40(sp)
20402c58:	1800                	addi	s0,sp,48
20402c5a:	fca42e23          	sw	a0,-36(s0)
20402c5e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20402c62:	39d1                	jal	20402936 <__metal_myhart_id>
20402c64:	87aa                	mv	a5,a0
20402c66:	853e                	mv	a0,a5
20402c68:	314d                	jal	2040290a <__metal_driver_cpu_get>
20402c6a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20402c6e:	fec42503          	lw	a0,-20(s0)
20402c72:	17e010ef          	jal	ra,20403df0 <__metal_driver_cpu_mtime_get>
20402c76:	fea42023          	sw	a0,-32(s0)
20402c7a:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20402c7e:	fe042783          	lw	a5,-32(s0)
20402c82:	fe442803          	lw	a6,-28(s0)
20402c86:	45a9                	li	a1,10
20402c88:	4601                	li	a2,0
20402c8a:	00b786b3          	add	a3,a5,a1
20402c8e:	8536                	mv	a0,a3
20402c90:	00f53533          	sltu	a0,a0,a5
20402c94:	00c80733          	add	a4,a6,a2
20402c98:	00e507b3          	add	a5,a0,a4
20402c9c:	873e                	mv	a4,a5
20402c9e:	87b6                	mv	a5,a3
20402ca0:	883a                	mv	a6,a4
20402ca2:	85be                	mv	a1,a5
20402ca4:	8642                	mv	a2,a6
20402ca6:	fec42503          	lw	a0,-20(s0)
20402caa:	1ac010ef          	jal	ra,20403e56 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20402cae:	0001                	nop
20402cb0:	50b2                	lw	ra,44(sp)
20402cb2:	5422                	lw	s0,40(sp)
20402cb4:	6145                	addi	sp,sp,48
20402cb6:	8082                	ret
	...

20402d00 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402d00:	7119                	addi	sp,sp,-128
20402d02:	de86                	sw	ra,124(sp)
20402d04:	dc96                	sw	t0,120(sp)
20402d06:	da9a                	sw	t1,116(sp)
20402d08:	d89e                	sw	t2,112(sp)
20402d0a:	d6a2                	sw	s0,108(sp)
20402d0c:	d4aa                	sw	a0,104(sp)
20402d0e:	d2ae                	sw	a1,100(sp)
20402d10:	d0b2                	sw	a2,96(sp)
20402d12:	ceb6                	sw	a3,92(sp)
20402d14:	ccba                	sw	a4,88(sp)
20402d16:	cabe                	sw	a5,84(sp)
20402d18:	c8c2                	sw	a6,80(sp)
20402d1a:	c6c6                	sw	a7,76(sp)
20402d1c:	c4f2                	sw	t3,72(sp)
20402d1e:	c2f6                	sw	t4,68(sp)
20402d20:	c0fa                	sw	t5,64(sp)
20402d22:	de7e                	sw	t6,60(sp)
20402d24:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d26:	c11ff0ef          	jal	ra,20402936 <__metal_myhart_id>
20402d2a:	872a                	mv	a4,a0
20402d2c:	070a                	slli	a4,a4,0x2
20402d2e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402d32:	97ba                	add	a5,a5,a4
20402d34:	439c                	lw	a5,0(a5)
20402d36:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402d3a:	342027f3          	csrr	a5,mcause
20402d3e:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20402d42:	341027f3          	csrr	a5,mepc
20402d46:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
20402d4a:	343027f3          	csrr	a5,mtval
20402d4e:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20402d52:	305027f3          	csrr	a5,mtvec
20402d56:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
20402d5a:	fac42783          	lw	a5,-84(s0)
20402d5e:	c7e9                	beqz	a5,20402e28 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402d60:	fac42503          	lw	a0,-84(s0)
20402d64:	b7dff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20402d68:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
20402d6c:	fa842783          	lw	a5,-88(s0)
20402d70:	3ff7f793          	andi	a5,a5,1023
20402d74:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20402d78:	fa842783          	lw	a5,-88(s0)
20402d7c:	0807d863          	bgez	a5,20402e0c <__metal_exception_handler+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402d80:	f9442703          	lw	a4,-108(s0)
20402d84:	47ad                	li	a5,11
20402d86:	00e7d763          	bge	a5,a4,20402d94 <__metal_exception_handler+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402d8a:	f9c42783          	lw	a5,-100(s0)
20402d8e:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402d92:	ef9d                	bnez	a5,20402dd0 <__metal_exception_handler+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402d94:	f9842683          	lw	a3,-104(s0)
20402d98:	f9442703          	lw	a4,-108(s0)
20402d9c:	87ba                	mv	a5,a4
20402d9e:	0786                	slli	a5,a5,0x1
20402da0:	97ba                	add	a5,a5,a4
20402da2:	078e                	slli	a5,a5,0x3
20402da4:	97b6                	add	a5,a5,a3
20402da6:	0987a783          	lw	a5,152(a5)
20402daa:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
20402dae:	f9842683          	lw	a3,-104(s0)
20402db2:	f9442703          	lw	a4,-108(s0)
20402db6:	87ba                	mv	a5,a4
20402db8:	0786                	slli	a5,a5,0x1
20402dba:	97ba                	add	a5,a5,a4
20402dbc:	078e                	slli	a5,a5,0x3
20402dbe:	97b6                	add	a5,a5,a3
20402dc0:	0907a783          	lw	a5,144(a5)
20402dc4:	f8c42583          	lw	a1,-116(s0)
20402dc8:	f9442503          	lw	a0,-108(s0)
20402dcc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
20402dce:	a8a9                	j	20402e28 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20402dd0:	f9c42783          	lw	a5,-100(s0)
20402dd4:	03f7f713          	andi	a4,a5,63
20402dd8:	4789                	li	a5,2
20402dda:	04f71763          	bne	a4,a5,20402e28 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
20402dde:	307027f3          	csrr	a5,mtvt
20402de2:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402de6:	f9842783          	lw	a5,-104(s0)
20402dea:	0dc7a783          	lw	a5,220(a5)
20402dee:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20402df2:	f9042783          	lw	a5,-112(s0)
20402df6:	439c                	lw	a5,0(a5)
20402df8:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
20402dfc:	f8842783          	lw	a5,-120(s0)
20402e00:	f8c42583          	lw	a1,-116(s0)
20402e04:	f9442503          	lw	a0,-108(s0)
20402e08:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402e0a:	a839                	j	20402e28 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402e0c:	f9842703          	lw	a4,-104(s0)
20402e10:	f9442783          	lw	a5,-108(s0)
20402e14:	0e078793          	addi	a5,a5,224
20402e18:	078a                	slli	a5,a5,0x2
20402e1a:	97ba                	add	a5,a5,a4
20402e1c:	479c                	lw	a5,8(a5)
20402e1e:	f9442583          	lw	a1,-108(s0)
20402e22:	fac42503          	lw	a0,-84(s0)
20402e26:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20402e28:	50f6                	lw	ra,124(sp)
20402e2a:	52e6                	lw	t0,120(sp)
20402e2c:	5356                	lw	t1,116(sp)
20402e2e:	53c6                	lw	t2,112(sp)
20402e30:	5436                	lw	s0,108(sp)
20402e32:	5526                	lw	a0,104(sp)
20402e34:	5596                	lw	a1,100(sp)
20402e36:	5606                	lw	a2,96(sp)
20402e38:	46f6                	lw	a3,92(sp)
20402e3a:	4766                	lw	a4,88(sp)
20402e3c:	47d6                	lw	a5,84(sp)
20402e3e:	4846                	lw	a6,80(sp)
20402e40:	48b6                	lw	a7,76(sp)
20402e42:	4e26                	lw	t3,72(sp)
20402e44:	4e96                	lw	t4,68(sp)
20402e46:	4f06                	lw	t5,64(sp)
20402e48:	5ff2                	lw	t6,60(sp)
20402e4a:	6109                	addi	sp,sp,128
20402e4c:	30200073          	mret
	...

20402e76 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20402e76:	711d                	addi	sp,sp,-96
20402e78:	ce86                	sw	ra,92(sp)
20402e7a:	cc96                	sw	t0,88(sp)
20402e7c:	ca9a                	sw	t1,84(sp)
20402e7e:	c89e                	sw	t2,80(sp)
20402e80:	c6a2                	sw	s0,76(sp)
20402e82:	c4aa                	sw	a0,72(sp)
20402e84:	c2ae                	sw	a1,68(sp)
20402e86:	c0b2                	sw	a2,64(sp)
20402e88:	de36                	sw	a3,60(sp)
20402e8a:	dc3a                	sw	a4,56(sp)
20402e8c:	da3e                	sw	a5,52(sp)
20402e8e:	d842                	sw	a6,48(sp)
20402e90:	d646                	sw	a7,44(sp)
20402e92:	d472                	sw	t3,40(sp)
20402e94:	d276                	sw	t4,36(sp)
20402e96:	d07a                	sw	t5,32(sp)
20402e98:	ce7e                	sw	t6,28(sp)
20402e9a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e9c:	a9bff0ef          	jal	ra,20402936 <__metal_myhart_id>
20402ea0:	872a                	mv	a4,a0
20402ea2:	070a                	slli	a4,a4,0x2
20402ea4:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402ea8:	97ba                	add	a5,a5,a4
20402eaa:	439c                	lw	a5,0(a5)
20402eac:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20402eb0:	fac42783          	lw	a5,-84(s0)
20402eb4:	c78d                	beqz	a5,20402ede <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402eb6:	fac42503          	lw	a0,-84(s0)
20402eba:	a27ff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20402ebe:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20402ec2:	fa842783          	lw	a5,-88(s0)
20402ec6:	2187a783          	lw	a5,536(a5)
20402eca:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
20402ece:	fa842783          	lw	a5,-88(s0)
20402ed2:	2107a783          	lw	a5,528(a5)
20402ed6:	fa442583          	lw	a1,-92(s0)
20402eda:	4541                	li	a0,16
20402edc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
20402ede:	0001                	nop
20402ee0:	40f6                	lw	ra,92(sp)
20402ee2:	42e6                	lw	t0,88(sp)
20402ee4:	4356                	lw	t1,84(sp)
20402ee6:	43c6                	lw	t2,80(sp)
20402ee8:	4436                	lw	s0,76(sp)
20402eea:	4526                	lw	a0,72(sp)
20402eec:	4596                	lw	a1,68(sp)
20402eee:	4606                	lw	a2,64(sp)
20402ef0:	56f2                	lw	a3,60(sp)
20402ef2:	5762                	lw	a4,56(sp)
20402ef4:	57d2                	lw	a5,52(sp)
20402ef6:	5842                	lw	a6,48(sp)
20402ef8:	58b2                	lw	a7,44(sp)
20402efa:	5e22                	lw	t3,40(sp)
20402efc:	5e92                	lw	t4,36(sp)
20402efe:	5f02                	lw	t5,32(sp)
20402f00:	4ff2                	lw	t6,28(sp)
20402f02:	6125                	addi	sp,sp,96
20402f04:	30200073          	mret

20402f08 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402f08:	711d                	addi	sp,sp,-96
20402f0a:	ce86                	sw	ra,92(sp)
20402f0c:	cc96                	sw	t0,88(sp)
20402f0e:	ca9a                	sw	t1,84(sp)
20402f10:	c89e                	sw	t2,80(sp)
20402f12:	c6a2                	sw	s0,76(sp)
20402f14:	c4aa                	sw	a0,72(sp)
20402f16:	c2ae                	sw	a1,68(sp)
20402f18:	c0b2                	sw	a2,64(sp)
20402f1a:	de36                	sw	a3,60(sp)
20402f1c:	dc3a                	sw	a4,56(sp)
20402f1e:	da3e                	sw	a5,52(sp)
20402f20:	d842                	sw	a6,48(sp)
20402f22:	d646                	sw	a7,44(sp)
20402f24:	d472                	sw	t3,40(sp)
20402f26:	d276                	sw	t4,36(sp)
20402f28:	d07a                	sw	t5,32(sp)
20402f2a:	ce7e                	sw	t6,28(sp)
20402f2c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f2e:	a09ff0ef          	jal	ra,20402936 <__metal_myhart_id>
20402f32:	872a                	mv	a4,a0
20402f34:	070a                	slli	a4,a4,0x2
20402f36:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402f3a:	97ba                	add	a5,a5,a4
20402f3c:	439c                	lw	a5,0(a5)
20402f3e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20402f42:	fac42783          	lw	a5,-84(s0)
20402f46:	c78d                	beqz	a5,20402f70 <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f48:	fac42503          	lw	a0,-84(s0)
20402f4c:	995ff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20402f50:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20402f54:	fa842783          	lw	a5,-88(s0)
20402f58:	2307a783          	lw	a5,560(a5)
20402f5c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20402f60:	fa842783          	lw	a5,-88(s0)
20402f64:	2287a783          	lw	a5,552(a5)
20402f68:	fa442583          	lw	a1,-92(s0)
20402f6c:	4545                	li	a0,17
20402f6e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20402f70:	0001                	nop
20402f72:	40f6                	lw	ra,92(sp)
20402f74:	42e6                	lw	t0,88(sp)
20402f76:	4356                	lw	t1,84(sp)
20402f78:	43c6                	lw	t2,80(sp)
20402f7a:	4436                	lw	s0,76(sp)
20402f7c:	4526                	lw	a0,72(sp)
20402f7e:	4596                	lw	a1,68(sp)
20402f80:	4606                	lw	a2,64(sp)
20402f82:	56f2                	lw	a3,60(sp)
20402f84:	5762                	lw	a4,56(sp)
20402f86:	57d2                	lw	a5,52(sp)
20402f88:	5842                	lw	a6,48(sp)
20402f8a:	58b2                	lw	a7,44(sp)
20402f8c:	5e22                	lw	t3,40(sp)
20402f8e:	5e92                	lw	t4,36(sp)
20402f90:	5f02                	lw	t5,32(sp)
20402f92:	4ff2                	lw	t6,28(sp)
20402f94:	6125                	addi	sp,sp,96
20402f96:	30200073          	mret

20402f9a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402f9a:	711d                	addi	sp,sp,-96
20402f9c:	ce86                	sw	ra,92(sp)
20402f9e:	cc96                	sw	t0,88(sp)
20402fa0:	ca9a                	sw	t1,84(sp)
20402fa2:	c89e                	sw	t2,80(sp)
20402fa4:	c6a2                	sw	s0,76(sp)
20402fa6:	c4aa                	sw	a0,72(sp)
20402fa8:	c2ae                	sw	a1,68(sp)
20402faa:	c0b2                	sw	a2,64(sp)
20402fac:	de36                	sw	a3,60(sp)
20402fae:	dc3a                	sw	a4,56(sp)
20402fb0:	da3e                	sw	a5,52(sp)
20402fb2:	d842                	sw	a6,48(sp)
20402fb4:	d646                	sw	a7,44(sp)
20402fb6:	d472                	sw	t3,40(sp)
20402fb8:	d276                	sw	t4,36(sp)
20402fba:	d07a                	sw	t5,32(sp)
20402fbc:	ce7e                	sw	t6,28(sp)
20402fbe:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402fc0:	977ff0ef          	jal	ra,20402936 <__metal_myhart_id>
20402fc4:	872a                	mv	a4,a0
20402fc6:	070a                	slli	a4,a4,0x2
20402fc8:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402fcc:	97ba                	add	a5,a5,a4
20402fce:	439c                	lw	a5,0(a5)
20402fd0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402fd4:	fac42783          	lw	a5,-84(s0)
20402fd8:	c78d                	beqz	a5,20403002 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402fda:	fac42503          	lw	a0,-84(s0)
20402fde:	903ff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20402fe2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402fe6:	fa842783          	lw	a5,-88(s0)
20402fea:	2487a783          	lw	a5,584(a5)
20402fee:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20402ff2:	fa842783          	lw	a5,-88(s0)
20402ff6:	2407a783          	lw	a5,576(a5)
20402ffa:	fa442583          	lw	a1,-92(s0)
20402ffe:	4549                	li	a0,18
20403000:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20403002:	0001                	nop
20403004:	40f6                	lw	ra,92(sp)
20403006:	42e6                	lw	t0,88(sp)
20403008:	4356                	lw	t1,84(sp)
2040300a:	43c6                	lw	t2,80(sp)
2040300c:	4436                	lw	s0,76(sp)
2040300e:	4526                	lw	a0,72(sp)
20403010:	4596                	lw	a1,68(sp)
20403012:	4606                	lw	a2,64(sp)
20403014:	56f2                	lw	a3,60(sp)
20403016:	5762                	lw	a4,56(sp)
20403018:	57d2                	lw	a5,52(sp)
2040301a:	5842                	lw	a6,48(sp)
2040301c:	58b2                	lw	a7,44(sp)
2040301e:	5e22                	lw	t3,40(sp)
20403020:	5e92                	lw	t4,36(sp)
20403022:	5f02                	lw	t5,32(sp)
20403024:	4ff2                	lw	t6,28(sp)
20403026:	6125                	addi	sp,sp,96
20403028:	30200073          	mret

2040302c <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
2040302c:	711d                	addi	sp,sp,-96
2040302e:	ce86                	sw	ra,92(sp)
20403030:	cc96                	sw	t0,88(sp)
20403032:	ca9a                	sw	t1,84(sp)
20403034:	c89e                	sw	t2,80(sp)
20403036:	c6a2                	sw	s0,76(sp)
20403038:	c4aa                	sw	a0,72(sp)
2040303a:	c2ae                	sw	a1,68(sp)
2040303c:	c0b2                	sw	a2,64(sp)
2040303e:	de36                	sw	a3,60(sp)
20403040:	dc3a                	sw	a4,56(sp)
20403042:	da3e                	sw	a5,52(sp)
20403044:	d842                	sw	a6,48(sp)
20403046:	d646                	sw	a7,44(sp)
20403048:	d472                	sw	t3,40(sp)
2040304a:	d276                	sw	t4,36(sp)
2040304c:	d07a                	sw	t5,32(sp)
2040304e:	ce7e                	sw	t6,28(sp)
20403050:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403052:	8e5ff0ef          	jal	ra,20402936 <__metal_myhart_id>
20403056:	872a                	mv	a4,a0
20403058:	070a                	slli	a4,a4,0x2
2040305a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040305e:	97ba                	add	a5,a5,a4
20403060:	439c                	lw	a5,0(a5)
20403062:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20403066:	fac42783          	lw	a5,-84(s0)
2040306a:	c78d                	beqz	a5,20403094 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040306c:	fac42503          	lw	a0,-84(s0)
20403070:	871ff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20403074:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20403078:	fa842783          	lw	a5,-88(s0)
2040307c:	2607a783          	lw	a5,608(a5)
20403080:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20403084:	fa842783          	lw	a5,-88(s0)
20403088:	2587a783          	lw	a5,600(a5)
2040308c:	fa442583          	lw	a1,-92(s0)
20403090:	454d                	li	a0,19
20403092:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20403094:	0001                	nop
20403096:	40f6                	lw	ra,92(sp)
20403098:	42e6                	lw	t0,88(sp)
2040309a:	4356                	lw	t1,84(sp)
2040309c:	43c6                	lw	t2,80(sp)
2040309e:	4436                	lw	s0,76(sp)
204030a0:	4526                	lw	a0,72(sp)
204030a2:	4596                	lw	a1,68(sp)
204030a4:	4606                	lw	a2,64(sp)
204030a6:	56f2                	lw	a3,60(sp)
204030a8:	5762                	lw	a4,56(sp)
204030aa:	57d2                	lw	a5,52(sp)
204030ac:	5842                	lw	a6,48(sp)
204030ae:	58b2                	lw	a7,44(sp)
204030b0:	5e22                	lw	t3,40(sp)
204030b2:	5e92                	lw	t4,36(sp)
204030b4:	5f02                	lw	t5,32(sp)
204030b6:	4ff2                	lw	t6,28(sp)
204030b8:	6125                	addi	sp,sp,96
204030ba:	30200073          	mret

204030be <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
204030be:	711d                	addi	sp,sp,-96
204030c0:	ce86                	sw	ra,92(sp)
204030c2:	cc96                	sw	t0,88(sp)
204030c4:	ca9a                	sw	t1,84(sp)
204030c6:	c89e                	sw	t2,80(sp)
204030c8:	c6a2                	sw	s0,76(sp)
204030ca:	c4aa                	sw	a0,72(sp)
204030cc:	c2ae                	sw	a1,68(sp)
204030ce:	c0b2                	sw	a2,64(sp)
204030d0:	de36                	sw	a3,60(sp)
204030d2:	dc3a                	sw	a4,56(sp)
204030d4:	da3e                	sw	a5,52(sp)
204030d6:	d842                	sw	a6,48(sp)
204030d8:	d646                	sw	a7,44(sp)
204030da:	d472                	sw	t3,40(sp)
204030dc:	d276                	sw	t4,36(sp)
204030de:	d07a                	sw	t5,32(sp)
204030e0:	ce7e                	sw	t6,28(sp)
204030e2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204030e4:	853ff0ef          	jal	ra,20402936 <__metal_myhart_id>
204030e8:	872a                	mv	a4,a0
204030ea:	070a                	slli	a4,a4,0x2
204030ec:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204030f0:	97ba                	add	a5,a5,a4
204030f2:	439c                	lw	a5,0(a5)
204030f4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
204030f8:	fac42783          	lw	a5,-84(s0)
204030fc:	c78d                	beqz	a5,20403126 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204030fe:	fac42503          	lw	a0,-84(s0)
20403102:	fdeff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20403106:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
2040310a:	fa842783          	lw	a5,-88(s0)
2040310e:	2787a783          	lw	a5,632(a5)
20403112:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20403116:	fa842783          	lw	a5,-88(s0)
2040311a:	2707a783          	lw	a5,624(a5)
2040311e:	fa442583          	lw	a1,-92(s0)
20403122:	4551                	li	a0,20
20403124:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20403126:	0001                	nop
20403128:	40f6                	lw	ra,92(sp)
2040312a:	42e6                	lw	t0,88(sp)
2040312c:	4356                	lw	t1,84(sp)
2040312e:	43c6                	lw	t2,80(sp)
20403130:	4436                	lw	s0,76(sp)
20403132:	4526                	lw	a0,72(sp)
20403134:	4596                	lw	a1,68(sp)
20403136:	4606                	lw	a2,64(sp)
20403138:	56f2                	lw	a3,60(sp)
2040313a:	5762                	lw	a4,56(sp)
2040313c:	57d2                	lw	a5,52(sp)
2040313e:	5842                	lw	a6,48(sp)
20403140:	58b2                	lw	a7,44(sp)
20403142:	5e22                	lw	t3,40(sp)
20403144:	5e92                	lw	t4,36(sp)
20403146:	5f02                	lw	t5,32(sp)
20403148:	4ff2                	lw	t6,28(sp)
2040314a:	6125                	addi	sp,sp,96
2040314c:	30200073          	mret

20403150 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20403150:	711d                	addi	sp,sp,-96
20403152:	ce86                	sw	ra,92(sp)
20403154:	cc96                	sw	t0,88(sp)
20403156:	ca9a                	sw	t1,84(sp)
20403158:	c89e                	sw	t2,80(sp)
2040315a:	c6a2                	sw	s0,76(sp)
2040315c:	c4aa                	sw	a0,72(sp)
2040315e:	c2ae                	sw	a1,68(sp)
20403160:	c0b2                	sw	a2,64(sp)
20403162:	de36                	sw	a3,60(sp)
20403164:	dc3a                	sw	a4,56(sp)
20403166:	da3e                	sw	a5,52(sp)
20403168:	d842                	sw	a6,48(sp)
2040316a:	d646                	sw	a7,44(sp)
2040316c:	d472                	sw	t3,40(sp)
2040316e:	d276                	sw	t4,36(sp)
20403170:	d07a                	sw	t5,32(sp)
20403172:	ce7e                	sw	t6,28(sp)
20403174:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403176:	fc0ff0ef          	jal	ra,20402936 <__metal_myhart_id>
2040317a:	872a                	mv	a4,a0
2040317c:	070a                	slli	a4,a4,0x2
2040317e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403182:	97ba                	add	a5,a5,a4
20403184:	439c                	lw	a5,0(a5)
20403186:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
2040318a:	fac42783          	lw	a5,-84(s0)
2040318e:	c78d                	beqz	a5,204031b8 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403190:	fac42503          	lw	a0,-84(s0)
20403194:	f4cff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20403198:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
2040319c:	fa842783          	lw	a5,-88(s0)
204031a0:	2907a783          	lw	a5,656(a5)
204031a4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
204031a8:	fa842783          	lw	a5,-88(s0)
204031ac:	2887a783          	lw	a5,648(a5)
204031b0:	fa442583          	lw	a1,-92(s0)
204031b4:	4555                	li	a0,21
204031b6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
204031b8:	0001                	nop
204031ba:	40f6                	lw	ra,92(sp)
204031bc:	42e6                	lw	t0,88(sp)
204031be:	4356                	lw	t1,84(sp)
204031c0:	43c6                	lw	t2,80(sp)
204031c2:	4436                	lw	s0,76(sp)
204031c4:	4526                	lw	a0,72(sp)
204031c6:	4596                	lw	a1,68(sp)
204031c8:	4606                	lw	a2,64(sp)
204031ca:	56f2                	lw	a3,60(sp)
204031cc:	5762                	lw	a4,56(sp)
204031ce:	57d2                	lw	a5,52(sp)
204031d0:	5842                	lw	a6,48(sp)
204031d2:	58b2                	lw	a7,44(sp)
204031d4:	5e22                	lw	t3,40(sp)
204031d6:	5e92                	lw	t4,36(sp)
204031d8:	5f02                	lw	t5,32(sp)
204031da:	4ff2                	lw	t6,28(sp)
204031dc:	6125                	addi	sp,sp,96
204031de:	30200073          	mret

204031e2 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
204031e2:	711d                	addi	sp,sp,-96
204031e4:	ce86                	sw	ra,92(sp)
204031e6:	cc96                	sw	t0,88(sp)
204031e8:	ca9a                	sw	t1,84(sp)
204031ea:	c89e                	sw	t2,80(sp)
204031ec:	c6a2                	sw	s0,76(sp)
204031ee:	c4aa                	sw	a0,72(sp)
204031f0:	c2ae                	sw	a1,68(sp)
204031f2:	c0b2                	sw	a2,64(sp)
204031f4:	de36                	sw	a3,60(sp)
204031f6:	dc3a                	sw	a4,56(sp)
204031f8:	da3e                	sw	a5,52(sp)
204031fa:	d842                	sw	a6,48(sp)
204031fc:	d646                	sw	a7,44(sp)
204031fe:	d472                	sw	t3,40(sp)
20403200:	d276                	sw	t4,36(sp)
20403202:	d07a                	sw	t5,32(sp)
20403204:	ce7e                	sw	t6,28(sp)
20403206:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403208:	f2eff0ef          	jal	ra,20402936 <__metal_myhart_id>
2040320c:	872a                	mv	a4,a0
2040320e:	070a                	slli	a4,a4,0x2
20403210:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403214:	97ba                	add	a5,a5,a4
20403216:	439c                	lw	a5,0(a5)
20403218:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
2040321c:	fac42783          	lw	a5,-84(s0)
20403220:	c78d                	beqz	a5,2040324a <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403222:	fac42503          	lw	a0,-84(s0)
20403226:	ebaff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
2040322a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
2040322e:	fa842783          	lw	a5,-88(s0)
20403232:	2a87a783          	lw	a5,680(a5)
20403236:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
2040323a:	fa842783          	lw	a5,-88(s0)
2040323e:	2a07a783          	lw	a5,672(a5)
20403242:	fa442583          	lw	a1,-92(s0)
20403246:	4559                	li	a0,22
20403248:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
2040324a:	0001                	nop
2040324c:	40f6                	lw	ra,92(sp)
2040324e:	42e6                	lw	t0,88(sp)
20403250:	4356                	lw	t1,84(sp)
20403252:	43c6                	lw	t2,80(sp)
20403254:	4436                	lw	s0,76(sp)
20403256:	4526                	lw	a0,72(sp)
20403258:	4596                	lw	a1,68(sp)
2040325a:	4606                	lw	a2,64(sp)
2040325c:	56f2                	lw	a3,60(sp)
2040325e:	5762                	lw	a4,56(sp)
20403260:	57d2                	lw	a5,52(sp)
20403262:	5842                	lw	a6,48(sp)
20403264:	58b2                	lw	a7,44(sp)
20403266:	5e22                	lw	t3,40(sp)
20403268:	5e92                	lw	t4,36(sp)
2040326a:	5f02                	lw	t5,32(sp)
2040326c:	4ff2                	lw	t6,28(sp)
2040326e:	6125                	addi	sp,sp,96
20403270:	30200073          	mret

20403274 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20403274:	711d                	addi	sp,sp,-96
20403276:	ce86                	sw	ra,92(sp)
20403278:	cc96                	sw	t0,88(sp)
2040327a:	ca9a                	sw	t1,84(sp)
2040327c:	c89e                	sw	t2,80(sp)
2040327e:	c6a2                	sw	s0,76(sp)
20403280:	c4aa                	sw	a0,72(sp)
20403282:	c2ae                	sw	a1,68(sp)
20403284:	c0b2                	sw	a2,64(sp)
20403286:	de36                	sw	a3,60(sp)
20403288:	dc3a                	sw	a4,56(sp)
2040328a:	da3e                	sw	a5,52(sp)
2040328c:	d842                	sw	a6,48(sp)
2040328e:	d646                	sw	a7,44(sp)
20403290:	d472                	sw	t3,40(sp)
20403292:	d276                	sw	t4,36(sp)
20403294:	d07a                	sw	t5,32(sp)
20403296:	ce7e                	sw	t6,28(sp)
20403298:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040329a:	e9cff0ef          	jal	ra,20402936 <__metal_myhart_id>
2040329e:	872a                	mv	a4,a0
204032a0:	070a                	slli	a4,a4,0x2
204032a2:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204032a6:	97ba                	add	a5,a5,a4
204032a8:	439c                	lw	a5,0(a5)
204032aa:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
204032ae:	fac42783          	lw	a5,-84(s0)
204032b2:	c78d                	beqz	a5,204032dc <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204032b4:	fac42503          	lw	a0,-84(s0)
204032b8:	e28ff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
204032bc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
204032c0:	fa842783          	lw	a5,-88(s0)
204032c4:	2c07a783          	lw	a5,704(a5)
204032c8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
204032cc:	fa842783          	lw	a5,-88(s0)
204032d0:	2b87a783          	lw	a5,696(a5)
204032d4:	fa442583          	lw	a1,-92(s0)
204032d8:	455d                	li	a0,23
204032da:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
204032dc:	0001                	nop
204032de:	40f6                	lw	ra,92(sp)
204032e0:	42e6                	lw	t0,88(sp)
204032e2:	4356                	lw	t1,84(sp)
204032e4:	43c6                	lw	t2,80(sp)
204032e6:	4436                	lw	s0,76(sp)
204032e8:	4526                	lw	a0,72(sp)
204032ea:	4596                	lw	a1,68(sp)
204032ec:	4606                	lw	a2,64(sp)
204032ee:	56f2                	lw	a3,60(sp)
204032f0:	5762                	lw	a4,56(sp)
204032f2:	57d2                	lw	a5,52(sp)
204032f4:	5842                	lw	a6,48(sp)
204032f6:	58b2                	lw	a7,44(sp)
204032f8:	5e22                	lw	t3,40(sp)
204032fa:	5e92                	lw	t4,36(sp)
204032fc:	5f02                	lw	t5,32(sp)
204032fe:	4ff2                	lw	t6,28(sp)
20403300:	6125                	addi	sp,sp,96
20403302:	30200073          	mret

20403306 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20403306:	711d                	addi	sp,sp,-96
20403308:	ce86                	sw	ra,92(sp)
2040330a:	cc96                	sw	t0,88(sp)
2040330c:	ca9a                	sw	t1,84(sp)
2040330e:	c89e                	sw	t2,80(sp)
20403310:	c6a2                	sw	s0,76(sp)
20403312:	c4aa                	sw	a0,72(sp)
20403314:	c2ae                	sw	a1,68(sp)
20403316:	c0b2                	sw	a2,64(sp)
20403318:	de36                	sw	a3,60(sp)
2040331a:	dc3a                	sw	a4,56(sp)
2040331c:	da3e                	sw	a5,52(sp)
2040331e:	d842                	sw	a6,48(sp)
20403320:	d646                	sw	a7,44(sp)
20403322:	d472                	sw	t3,40(sp)
20403324:	d276                	sw	t4,36(sp)
20403326:	d07a                	sw	t5,32(sp)
20403328:	ce7e                	sw	t6,28(sp)
2040332a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040332c:	e0aff0ef          	jal	ra,20402936 <__metal_myhart_id>
20403330:	872a                	mv	a4,a0
20403332:	070a                	slli	a4,a4,0x2
20403334:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403338:	97ba                	add	a5,a5,a4
2040333a:	439c                	lw	a5,0(a5)
2040333c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20403340:	fac42783          	lw	a5,-84(s0)
20403344:	c78d                	beqz	a5,2040336e <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403346:	fac42503          	lw	a0,-84(s0)
2040334a:	d96ff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
2040334e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20403352:	fa842783          	lw	a5,-88(s0)
20403356:	2d87a783          	lw	a5,728(a5)
2040335a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
2040335e:	fa842783          	lw	a5,-88(s0)
20403362:	2d07a783          	lw	a5,720(a5)
20403366:	fa442583          	lw	a1,-92(s0)
2040336a:	4561                	li	a0,24
2040336c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
2040336e:	0001                	nop
20403370:	40f6                	lw	ra,92(sp)
20403372:	42e6                	lw	t0,88(sp)
20403374:	4356                	lw	t1,84(sp)
20403376:	43c6                	lw	t2,80(sp)
20403378:	4436                	lw	s0,76(sp)
2040337a:	4526                	lw	a0,72(sp)
2040337c:	4596                	lw	a1,68(sp)
2040337e:	4606                	lw	a2,64(sp)
20403380:	56f2                	lw	a3,60(sp)
20403382:	5762                	lw	a4,56(sp)
20403384:	57d2                	lw	a5,52(sp)
20403386:	5842                	lw	a6,48(sp)
20403388:	58b2                	lw	a7,44(sp)
2040338a:	5e22                	lw	t3,40(sp)
2040338c:	5e92                	lw	t4,36(sp)
2040338e:	5f02                	lw	t5,32(sp)
20403390:	4ff2                	lw	t6,28(sp)
20403392:	6125                	addi	sp,sp,96
20403394:	30200073          	mret

20403398 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20403398:	711d                	addi	sp,sp,-96
2040339a:	ce86                	sw	ra,92(sp)
2040339c:	cc96                	sw	t0,88(sp)
2040339e:	ca9a                	sw	t1,84(sp)
204033a0:	c89e                	sw	t2,80(sp)
204033a2:	c6a2                	sw	s0,76(sp)
204033a4:	c4aa                	sw	a0,72(sp)
204033a6:	c2ae                	sw	a1,68(sp)
204033a8:	c0b2                	sw	a2,64(sp)
204033aa:	de36                	sw	a3,60(sp)
204033ac:	dc3a                	sw	a4,56(sp)
204033ae:	da3e                	sw	a5,52(sp)
204033b0:	d842                	sw	a6,48(sp)
204033b2:	d646                	sw	a7,44(sp)
204033b4:	d472                	sw	t3,40(sp)
204033b6:	d276                	sw	t4,36(sp)
204033b8:	d07a                	sw	t5,32(sp)
204033ba:	ce7e                	sw	t6,28(sp)
204033bc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204033be:	d78ff0ef          	jal	ra,20402936 <__metal_myhart_id>
204033c2:	872a                	mv	a4,a0
204033c4:	070a                	slli	a4,a4,0x2
204033c6:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204033ca:	97ba                	add	a5,a5,a4
204033cc:	439c                	lw	a5,0(a5)
204033ce:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
204033d2:	fac42783          	lw	a5,-84(s0)
204033d6:	c78d                	beqz	a5,20403400 <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204033d8:	fac42503          	lw	a0,-84(s0)
204033dc:	d04ff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
204033e0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
204033e4:	fa842783          	lw	a5,-88(s0)
204033e8:	2f07a783          	lw	a5,752(a5)
204033ec:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
204033f0:	fa842783          	lw	a5,-88(s0)
204033f4:	2e87a783          	lw	a5,744(a5)
204033f8:	fa442583          	lw	a1,-92(s0)
204033fc:	4565                	li	a0,25
204033fe:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20403400:	0001                	nop
20403402:	40f6                	lw	ra,92(sp)
20403404:	42e6                	lw	t0,88(sp)
20403406:	4356                	lw	t1,84(sp)
20403408:	43c6                	lw	t2,80(sp)
2040340a:	4436                	lw	s0,76(sp)
2040340c:	4526                	lw	a0,72(sp)
2040340e:	4596                	lw	a1,68(sp)
20403410:	4606                	lw	a2,64(sp)
20403412:	56f2                	lw	a3,60(sp)
20403414:	5762                	lw	a4,56(sp)
20403416:	57d2                	lw	a5,52(sp)
20403418:	5842                	lw	a6,48(sp)
2040341a:	58b2                	lw	a7,44(sp)
2040341c:	5e22                	lw	t3,40(sp)
2040341e:	5e92                	lw	t4,36(sp)
20403420:	5f02                	lw	t5,32(sp)
20403422:	4ff2                	lw	t6,28(sp)
20403424:	6125                	addi	sp,sp,96
20403426:	30200073          	mret

2040342a <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
2040342a:	711d                	addi	sp,sp,-96
2040342c:	ce86                	sw	ra,92(sp)
2040342e:	cc96                	sw	t0,88(sp)
20403430:	ca9a                	sw	t1,84(sp)
20403432:	c89e                	sw	t2,80(sp)
20403434:	c6a2                	sw	s0,76(sp)
20403436:	c4aa                	sw	a0,72(sp)
20403438:	c2ae                	sw	a1,68(sp)
2040343a:	c0b2                	sw	a2,64(sp)
2040343c:	de36                	sw	a3,60(sp)
2040343e:	dc3a                	sw	a4,56(sp)
20403440:	da3e                	sw	a5,52(sp)
20403442:	d842                	sw	a6,48(sp)
20403444:	d646                	sw	a7,44(sp)
20403446:	d472                	sw	t3,40(sp)
20403448:	d276                	sw	t4,36(sp)
2040344a:	d07a                	sw	t5,32(sp)
2040344c:	ce7e                	sw	t6,28(sp)
2040344e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403450:	ce6ff0ef          	jal	ra,20402936 <__metal_myhart_id>
20403454:	872a                	mv	a4,a0
20403456:	070a                	slli	a4,a4,0x2
20403458:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040345c:	97ba                	add	a5,a5,a4
2040345e:	439c                	lw	a5,0(a5)
20403460:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20403464:	fac42783          	lw	a5,-84(s0)
20403468:	c78d                	beqz	a5,20403492 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040346a:	fac42503          	lw	a0,-84(s0)
2040346e:	c72ff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20403472:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20403476:	fa842783          	lw	a5,-88(s0)
2040347a:	3087a783          	lw	a5,776(a5)
2040347e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403482:	fa842783          	lw	a5,-88(s0)
20403486:	3007a783          	lw	a5,768(a5)
2040348a:	fa442583          	lw	a1,-92(s0)
2040348e:	4569                	li	a0,26
20403490:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403492:	0001                	nop
20403494:	40f6                	lw	ra,92(sp)
20403496:	42e6                	lw	t0,88(sp)
20403498:	4356                	lw	t1,84(sp)
2040349a:	43c6                	lw	t2,80(sp)
2040349c:	4436                	lw	s0,76(sp)
2040349e:	4526                	lw	a0,72(sp)
204034a0:	4596                	lw	a1,68(sp)
204034a2:	4606                	lw	a2,64(sp)
204034a4:	56f2                	lw	a3,60(sp)
204034a6:	5762                	lw	a4,56(sp)
204034a8:	57d2                	lw	a5,52(sp)
204034aa:	5842                	lw	a6,48(sp)
204034ac:	58b2                	lw	a7,44(sp)
204034ae:	5e22                	lw	t3,40(sp)
204034b0:	5e92                	lw	t4,36(sp)
204034b2:	5f02                	lw	t5,32(sp)
204034b4:	4ff2                	lw	t6,28(sp)
204034b6:	6125                	addi	sp,sp,96
204034b8:	30200073          	mret

204034bc <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
204034bc:	711d                	addi	sp,sp,-96
204034be:	ce86                	sw	ra,92(sp)
204034c0:	cc96                	sw	t0,88(sp)
204034c2:	ca9a                	sw	t1,84(sp)
204034c4:	c89e                	sw	t2,80(sp)
204034c6:	c6a2                	sw	s0,76(sp)
204034c8:	c4aa                	sw	a0,72(sp)
204034ca:	c2ae                	sw	a1,68(sp)
204034cc:	c0b2                	sw	a2,64(sp)
204034ce:	de36                	sw	a3,60(sp)
204034d0:	dc3a                	sw	a4,56(sp)
204034d2:	da3e                	sw	a5,52(sp)
204034d4:	d842                	sw	a6,48(sp)
204034d6:	d646                	sw	a7,44(sp)
204034d8:	d472                	sw	t3,40(sp)
204034da:	d276                	sw	t4,36(sp)
204034dc:	d07a                	sw	t5,32(sp)
204034de:	ce7e                	sw	t6,28(sp)
204034e0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204034e2:	c54ff0ef          	jal	ra,20402936 <__metal_myhart_id>
204034e6:	872a                	mv	a4,a0
204034e8:	070a                	slli	a4,a4,0x2
204034ea:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204034ee:	97ba                	add	a5,a5,a4
204034f0:	439c                	lw	a5,0(a5)
204034f2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
204034f6:	fac42783          	lw	a5,-84(s0)
204034fa:	c78d                	beqz	a5,20403524 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204034fc:	fac42503          	lw	a0,-84(s0)
20403500:	be0ff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20403504:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403508:	fa842783          	lw	a5,-88(s0)
2040350c:	3207a783          	lw	a5,800(a5)
20403510:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403514:	fa842783          	lw	a5,-88(s0)
20403518:	3187a783          	lw	a5,792(a5)
2040351c:	fa442583          	lw	a1,-92(s0)
20403520:	456d                	li	a0,27
20403522:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20403524:	0001                	nop
20403526:	40f6                	lw	ra,92(sp)
20403528:	42e6                	lw	t0,88(sp)
2040352a:	4356                	lw	t1,84(sp)
2040352c:	43c6                	lw	t2,80(sp)
2040352e:	4436                	lw	s0,76(sp)
20403530:	4526                	lw	a0,72(sp)
20403532:	4596                	lw	a1,68(sp)
20403534:	4606                	lw	a2,64(sp)
20403536:	56f2                	lw	a3,60(sp)
20403538:	5762                	lw	a4,56(sp)
2040353a:	57d2                	lw	a5,52(sp)
2040353c:	5842                	lw	a6,48(sp)
2040353e:	58b2                	lw	a7,44(sp)
20403540:	5e22                	lw	t3,40(sp)
20403542:	5e92                	lw	t4,36(sp)
20403544:	5f02                	lw	t5,32(sp)
20403546:	4ff2                	lw	t6,28(sp)
20403548:	6125                	addi	sp,sp,96
2040354a:	30200073          	mret

2040354e <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
2040354e:	711d                	addi	sp,sp,-96
20403550:	ce86                	sw	ra,92(sp)
20403552:	cc96                	sw	t0,88(sp)
20403554:	ca9a                	sw	t1,84(sp)
20403556:	c89e                	sw	t2,80(sp)
20403558:	c6a2                	sw	s0,76(sp)
2040355a:	c4aa                	sw	a0,72(sp)
2040355c:	c2ae                	sw	a1,68(sp)
2040355e:	c0b2                	sw	a2,64(sp)
20403560:	de36                	sw	a3,60(sp)
20403562:	dc3a                	sw	a4,56(sp)
20403564:	da3e                	sw	a5,52(sp)
20403566:	d842                	sw	a6,48(sp)
20403568:	d646                	sw	a7,44(sp)
2040356a:	d472                	sw	t3,40(sp)
2040356c:	d276                	sw	t4,36(sp)
2040356e:	d07a                	sw	t5,32(sp)
20403570:	ce7e                	sw	t6,28(sp)
20403572:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403574:	bc2ff0ef          	jal	ra,20402936 <__metal_myhart_id>
20403578:	872a                	mv	a4,a0
2040357a:	070a                	slli	a4,a4,0x2
2040357c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403580:	97ba                	add	a5,a5,a4
20403582:	439c                	lw	a5,0(a5)
20403584:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403588:	fac42783          	lw	a5,-84(s0)
2040358c:	c78d                	beqz	a5,204035b6 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040358e:	fac42503          	lw	a0,-84(s0)
20403592:	b4eff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20403596:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
2040359a:	fa842783          	lw	a5,-88(s0)
2040359e:	3387a783          	lw	a5,824(a5)
204035a2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
204035a6:	fa842783          	lw	a5,-88(s0)
204035aa:	3307a783          	lw	a5,816(a5)
204035ae:	fa442583          	lw	a1,-92(s0)
204035b2:	4571                	li	a0,28
204035b4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
204035b6:	0001                	nop
204035b8:	40f6                	lw	ra,92(sp)
204035ba:	42e6                	lw	t0,88(sp)
204035bc:	4356                	lw	t1,84(sp)
204035be:	43c6                	lw	t2,80(sp)
204035c0:	4436                	lw	s0,76(sp)
204035c2:	4526                	lw	a0,72(sp)
204035c4:	4596                	lw	a1,68(sp)
204035c6:	4606                	lw	a2,64(sp)
204035c8:	56f2                	lw	a3,60(sp)
204035ca:	5762                	lw	a4,56(sp)
204035cc:	57d2                	lw	a5,52(sp)
204035ce:	5842                	lw	a6,48(sp)
204035d0:	58b2                	lw	a7,44(sp)
204035d2:	5e22                	lw	t3,40(sp)
204035d4:	5e92                	lw	t4,36(sp)
204035d6:	5f02                	lw	t5,32(sp)
204035d8:	4ff2                	lw	t6,28(sp)
204035da:	6125                	addi	sp,sp,96
204035dc:	30200073          	mret

204035e0 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
204035e0:	711d                	addi	sp,sp,-96
204035e2:	ce86                	sw	ra,92(sp)
204035e4:	cc96                	sw	t0,88(sp)
204035e6:	ca9a                	sw	t1,84(sp)
204035e8:	c89e                	sw	t2,80(sp)
204035ea:	c6a2                	sw	s0,76(sp)
204035ec:	c4aa                	sw	a0,72(sp)
204035ee:	c2ae                	sw	a1,68(sp)
204035f0:	c0b2                	sw	a2,64(sp)
204035f2:	de36                	sw	a3,60(sp)
204035f4:	dc3a                	sw	a4,56(sp)
204035f6:	da3e                	sw	a5,52(sp)
204035f8:	d842                	sw	a6,48(sp)
204035fa:	d646                	sw	a7,44(sp)
204035fc:	d472                	sw	t3,40(sp)
204035fe:	d276                	sw	t4,36(sp)
20403600:	d07a                	sw	t5,32(sp)
20403602:	ce7e                	sw	t6,28(sp)
20403604:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403606:	b30ff0ef          	jal	ra,20402936 <__metal_myhart_id>
2040360a:	872a                	mv	a4,a0
2040360c:	070a                	slli	a4,a4,0x2
2040360e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403612:	97ba                	add	a5,a5,a4
20403614:	439c                	lw	a5,0(a5)
20403616:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
2040361a:	fac42783          	lw	a5,-84(s0)
2040361e:	c78d                	beqz	a5,20403648 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403620:	fac42503          	lw	a0,-84(s0)
20403624:	abcff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20403628:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
2040362c:	fa842783          	lw	a5,-88(s0)
20403630:	3507a783          	lw	a5,848(a5)
20403634:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20403638:	fa842783          	lw	a5,-88(s0)
2040363c:	3487a783          	lw	a5,840(a5)
20403640:	fa442583          	lw	a1,-92(s0)
20403644:	4575                	li	a0,29
20403646:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20403648:	0001                	nop
2040364a:	40f6                	lw	ra,92(sp)
2040364c:	42e6                	lw	t0,88(sp)
2040364e:	4356                	lw	t1,84(sp)
20403650:	43c6                	lw	t2,80(sp)
20403652:	4436                	lw	s0,76(sp)
20403654:	4526                	lw	a0,72(sp)
20403656:	4596                	lw	a1,68(sp)
20403658:	4606                	lw	a2,64(sp)
2040365a:	56f2                	lw	a3,60(sp)
2040365c:	5762                	lw	a4,56(sp)
2040365e:	57d2                	lw	a5,52(sp)
20403660:	5842                	lw	a6,48(sp)
20403662:	58b2                	lw	a7,44(sp)
20403664:	5e22                	lw	t3,40(sp)
20403666:	5e92                	lw	t4,36(sp)
20403668:	5f02                	lw	t5,32(sp)
2040366a:	4ff2                	lw	t6,28(sp)
2040366c:	6125                	addi	sp,sp,96
2040366e:	30200073          	mret

20403672 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20403672:	711d                	addi	sp,sp,-96
20403674:	ce86                	sw	ra,92(sp)
20403676:	cc96                	sw	t0,88(sp)
20403678:	ca9a                	sw	t1,84(sp)
2040367a:	c89e                	sw	t2,80(sp)
2040367c:	c6a2                	sw	s0,76(sp)
2040367e:	c4aa                	sw	a0,72(sp)
20403680:	c2ae                	sw	a1,68(sp)
20403682:	c0b2                	sw	a2,64(sp)
20403684:	de36                	sw	a3,60(sp)
20403686:	dc3a                	sw	a4,56(sp)
20403688:	da3e                	sw	a5,52(sp)
2040368a:	d842                	sw	a6,48(sp)
2040368c:	d646                	sw	a7,44(sp)
2040368e:	d472                	sw	t3,40(sp)
20403690:	d276                	sw	t4,36(sp)
20403692:	d07a                	sw	t5,32(sp)
20403694:	ce7e                	sw	t6,28(sp)
20403696:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403698:	a9eff0ef          	jal	ra,20402936 <__metal_myhart_id>
2040369c:	872a                	mv	a4,a0
2040369e:	070a                	slli	a4,a4,0x2
204036a0:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204036a4:	97ba                	add	a5,a5,a4
204036a6:	439c                	lw	a5,0(a5)
204036a8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
204036ac:	fac42783          	lw	a5,-84(s0)
204036b0:	c78d                	beqz	a5,204036da <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204036b2:	fac42503          	lw	a0,-84(s0)
204036b6:	a2aff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
204036ba:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
204036be:	fa842783          	lw	a5,-88(s0)
204036c2:	3687a783          	lw	a5,872(a5)
204036c6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
204036ca:	fa842783          	lw	a5,-88(s0)
204036ce:	3607a783          	lw	a5,864(a5)
204036d2:	fa442583          	lw	a1,-92(s0)
204036d6:	4579                	li	a0,30
204036d8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
204036da:	0001                	nop
204036dc:	40f6                	lw	ra,92(sp)
204036de:	42e6                	lw	t0,88(sp)
204036e0:	4356                	lw	t1,84(sp)
204036e2:	43c6                	lw	t2,80(sp)
204036e4:	4436                	lw	s0,76(sp)
204036e6:	4526                	lw	a0,72(sp)
204036e8:	4596                	lw	a1,68(sp)
204036ea:	4606                	lw	a2,64(sp)
204036ec:	56f2                	lw	a3,60(sp)
204036ee:	5762                	lw	a4,56(sp)
204036f0:	57d2                	lw	a5,52(sp)
204036f2:	5842                	lw	a6,48(sp)
204036f4:	58b2                	lw	a7,44(sp)
204036f6:	5e22                	lw	t3,40(sp)
204036f8:	5e92                	lw	t4,36(sp)
204036fa:	5f02                	lw	t5,32(sp)
204036fc:	4ff2                	lw	t6,28(sp)
204036fe:	6125                	addi	sp,sp,96
20403700:	30200073          	mret

20403704 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403704:	711d                	addi	sp,sp,-96
20403706:	ce86                	sw	ra,92(sp)
20403708:	cc96                	sw	t0,88(sp)
2040370a:	ca9a                	sw	t1,84(sp)
2040370c:	c89e                	sw	t2,80(sp)
2040370e:	c6a2                	sw	s0,76(sp)
20403710:	c4aa                	sw	a0,72(sp)
20403712:	c2ae                	sw	a1,68(sp)
20403714:	c0b2                	sw	a2,64(sp)
20403716:	de36                	sw	a3,60(sp)
20403718:	dc3a                	sw	a4,56(sp)
2040371a:	da3e                	sw	a5,52(sp)
2040371c:	d842                	sw	a6,48(sp)
2040371e:	d646                	sw	a7,44(sp)
20403720:	d472                	sw	t3,40(sp)
20403722:	d276                	sw	t4,36(sp)
20403724:	d07a                	sw	t5,32(sp)
20403726:	ce7e                	sw	t6,28(sp)
20403728:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040372a:	a0cff0ef          	jal	ra,20402936 <__metal_myhart_id>
2040372e:	872a                	mv	a4,a0
20403730:	070a                	slli	a4,a4,0x2
20403732:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403736:	97ba                	add	a5,a5,a4
20403738:	439c                	lw	a5,0(a5)
2040373a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
2040373e:	fac42783          	lw	a5,-84(s0)
20403742:	c78d                	beqz	a5,2040376c <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403744:	fac42503          	lw	a0,-84(s0)
20403748:	998ff0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
2040374c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
20403750:	fa842783          	lw	a5,-88(s0)
20403754:	3807a783          	lw	a5,896(a5)
20403758:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
2040375c:	fa842783          	lw	a5,-88(s0)
20403760:	3787a783          	lw	a5,888(a5)
20403764:	fa442583          	lw	a1,-92(s0)
20403768:	457d                	li	a0,31
2040376a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
2040376c:	0001                	nop
2040376e:	40f6                	lw	ra,92(sp)
20403770:	42e6                	lw	t0,88(sp)
20403772:	4356                	lw	t1,84(sp)
20403774:	43c6                	lw	t2,80(sp)
20403776:	4436                	lw	s0,76(sp)
20403778:	4526                	lw	a0,72(sp)
2040377a:	4596                	lw	a1,68(sp)
2040377c:	4606                	lw	a2,64(sp)
2040377e:	56f2                	lw	a3,60(sp)
20403780:	5762                	lw	a4,56(sp)
20403782:	57d2                	lw	a5,52(sp)
20403784:	5842                	lw	a6,48(sp)
20403786:	58b2                	lw	a7,44(sp)
20403788:	5e22                	lw	t3,40(sp)
2040378a:	5e92                	lw	t4,36(sp)
2040378c:	5f02                	lw	t5,32(sp)
2040378e:	4ff2                	lw	t6,28(sp)
20403790:	6125                	addi	sp,sp,96
20403792:	30200073          	mret

20403796 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403796:	1101                	addi	sp,sp,-32
20403798:	ce22                	sw	s0,28(sp)
2040379a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2040379c:	305027f3          	csrr	a5,mtvec
204037a0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
204037a4:	fec42783          	lw	a5,-20(s0)
204037a8:	03f7f793          	andi	a5,a5,63
204037ac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
204037b0:	fec42703          	lw	a4,-20(s0)
204037b4:	4789                	li	a5,2
204037b6:	00f70d63          	beq	a4,a5,204037d0 <__metal_controller_interrupt_vector_mode+0x3a>
204037ba:	fec42703          	lw	a4,-20(s0)
204037be:	478d                	li	a5,3
204037c0:	00f70a63          	beq	a4,a5,204037d4 <__metal_controller_interrupt_vector_mode+0x3e>
204037c4:	fec42703          	lw	a4,-20(s0)
204037c8:	4785                	li	a5,1
204037ca:	00f70763          	beq	a4,a5,204037d8 <__metal_controller_interrupt_vector_mode+0x42>
204037ce:	a039                	j	204037dc <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
204037d0:	478d                	li	a5,3
204037d2:	a031                	j	204037de <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
204037d4:	4791                	li	a5,4
204037d6:	a021                	j	204037de <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
204037d8:	4785                	li	a5,1
204037da:	a011                	j	204037de <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
204037dc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
204037de:	853e                	mv	a0,a5
204037e0:	4472                	lw	s0,28(sp)
204037e2:	6105                	addi	sp,sp,32
204037e4:	8082                	ret

204037e6 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
204037e6:	7179                	addi	sp,sp,-48
204037e8:	d622                	sw	s0,44(sp)
204037ea:	1800                	addi	s0,sp,48
204037ec:	fca42e23          	sw	a0,-36(s0)
204037f0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
204037f4:	305027f3          	csrr	a5,mtvec
204037f8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
204037fc:	fec42783          	lw	a5,-20(s0)
20403800:	fc07f793          	andi	a5,a5,-64
20403804:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403808:	fd842783          	lw	a5,-40(s0)
2040380c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20403810:	fdc42703          	lw	a4,-36(s0)
20403814:	4791                	li	a5,4
20403816:	06e7e063          	bltu	a5,a4,20403876 <__metal_controller_interrupt_vector+0x90>
2040381a:	fdc42783          	lw	a5,-36(s0)
2040381e:	00279713          	slli	a4,a5,0x2
20403822:	204067b7          	lui	a5,0x20406
20403826:	9dc78793          	addi	a5,a5,-1572 # 204059dc <__metal_driver_vtable_riscv_clint0+0x4c>
2040382a:	97ba                	add	a5,a5,a4
2040382c:	439c                	lw	a5,0(a5)
2040382e:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403830:	fe842783          	lw	a5,-24(s0)
20403834:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20403838:	fec42783          	lw	a5,-20(s0)
2040383c:	0027e793          	ori	a5,a5,2
20403840:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20403844:	a80d                	j	20403876 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403846:	fe842783          	lw	a5,-24(s0)
2040384a:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
2040384e:	fec42783          	lw	a5,-20(s0)
20403852:	0037e793          	ori	a5,a5,3
20403856:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
2040385a:	a831                	j	20403876 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
2040385c:	fe842783          	lw	a5,-24(s0)
20403860:	0017e793          	ori	a5,a5,1
20403864:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20403868:	a039                	j	20403876 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
2040386a:	fe842783          	lw	a5,-24(s0)
2040386e:	9bf1                	andi	a5,a5,-4
20403870:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20403874:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20403876:	0001                	nop
20403878:	5432                	lw	s0,44(sp)
2040387a:	6145                	addi	sp,sp,48
2040387c:	8082                	ret

2040387e <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
2040387e:	1101                	addi	sp,sp,-32
20403880:	ce22                	sw	s0,28(sp)
20403882:	1000                	addi	s0,sp,32
20403884:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403888:	fec42783          	lw	a5,-20(s0)
2040388c:	17f5                	addi	a5,a5,-3
2040388e:	4771                	li	a4,28
20403890:	00f76d63          	bltu	a4,a5,204038aa <__metal_valid_interrupt_id+0x2c>
20403894:	00279713          	slli	a4,a5,0x2
20403898:	204067b7          	lui	a5,0x20406
2040389c:	9f078793          	addi	a5,a5,-1552 # 204059f0 <__metal_driver_vtable_riscv_clint0+0x60>
204038a0:	97ba                	add	a5,a5,a4
204038a2:	439c                	lw	a5,0(a5)
204038a4:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
204038a6:	4785                	li	a5,1
204038a8:	a019                	j	204038ae <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
204038aa:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
204038ac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
204038ae:	853e                	mv	a0,a5
204038b0:	4472                	lw	s0,28(sp)
204038b2:	6105                	addi	sp,sp,32
204038b4:	8082                	ret

204038b6 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
204038b6:	7179                	addi	sp,sp,-48
204038b8:	d606                	sw	ra,44(sp)
204038ba:	d422                	sw	s0,40(sp)
204038bc:	1800                	addi	s0,sp,48
204038be:	fca42e23          	sw	a0,-36(s0)
204038c2:	fcb42c23          	sw	a1,-40(s0)
204038c6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
204038ca:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
204038ce:	fdc42783          	lw	a5,-36(s0)
204038d2:	e399                	bnez	a5,204038d8 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
204038d4:	57fd                	li	a5,-1
204038d6:	a849                	j	20403968 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
204038d8:	fd842703          	lw	a4,-40(s0)
204038dc:	47fd                	li	a5,31
204038de:	08e7e063          	bltu	a5,a4,2040395e <__metal_local_interrupt_enable+0xa8>
204038e2:	fd842783          	lw	a5,-40(s0)
204038e6:	00279713          	slli	a4,a5,0x2
204038ea:	204067b7          	lui	a5,0x20406
204038ee:	a6478793          	addi	a5,a5,-1436 # 20405a64 <__metal_driver_vtable_riscv_clint0+0xd4>
204038f2:	97ba                	add	a5,a5,a4
204038f4:	439c                	lw	a5,0(a5)
204038f6:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
204038f8:	fd442783          	lw	a5,-44(s0)
204038fc:	c781                	beqz	a5,20403904 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
204038fe:	852ff0ef          	jal	ra,20402950 <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403902:	a08d                	j	20403964 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403904:	864ff0ef          	jal	ra,20402968 <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403908:	a8b1                	j	20403964 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
2040390a:	fd442783          	lw	a5,-44(s0)
2040390e:	c781                	beqz	a5,20403916 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20403910:	870ff0ef          	jal	ra,20402980 <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403914:	a881                	j	20403964 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403916:	882ff0ef          	jal	ra,20402998 <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
2040391a:	a0a9                	j	20403964 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040391c:	fd442783          	lw	a5,-44(s0)
20403920:	c781                	beqz	a5,20403928 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20403922:	88eff0ef          	jal	ra,204029b0 <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20403926:	a83d                	j	20403964 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20403928:	8a2ff0ef          	jal	ra,204029ca <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
2040392c:	a825                	j	20403964 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
2040392e:	fd442783          	lw	a5,-44(s0)
20403932:	c781                	beqz	a5,2040393a <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20403934:	8b0ff0ef          	jal	ra,204029e4 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20403938:	a035                	j	20403964 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
2040393a:	8c6ff0ef          	jal	ra,20402a00 <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
2040393e:	a01d                	j	20403964 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20403940:	fd442783          	lw	a5,-44(s0)
20403944:	c799                	beqz	a5,20403952 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20403946:	fd842783          	lw	a5,-40(s0)
2040394a:	853e                	mv	a0,a5
2040394c:	8d0ff0ef          	jal	ra,20402a1c <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20403950:	a811                	j	20403964 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20403952:	fd842783          	lw	a5,-40(s0)
20403956:	853e                	mv	a0,a5
20403958:	8f0ff0ef          	jal	ra,20402a48 <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
2040395c:	a021                	j	20403964 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
2040395e:	57fd                	li	a5,-1
20403960:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20403964:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20403968:	853e                	mv	a0,a5
2040396a:	50b2                	lw	ra,44(sp)
2040396c:	5422                	lw	s0,40(sp)
2040396e:	6145                	addi	sp,sp,48
20403970:	8082                	ret

20403972 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20403972:	7179                	addi	sp,sp,-48
20403974:	d622                	sw	s0,44(sp)
20403976:	1800                	addi	s0,sp,48
20403978:	fca42e23          	sw	a0,-36(s0)
2040397c:	fcb42c23          	sw	a1,-40(s0)
20403980:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403984:	fdc42783          	lw	a5,-36(s0)
20403988:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040398c:	fd842703          	lw	a4,-40(s0)
20403990:	47ad                	li	a5,11
20403992:	02e7c263          	blt	a5,a4,204039b6 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403996:	fd442783          	lw	a5,-44(s0)
2040399a:	cf91                	beqz	a5,204039b6 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040399c:	fec42703          	lw	a4,-20(s0)
204039a0:	fd842783          	lw	a5,-40(s0)
204039a4:	0e078793          	addi	a5,a5,224
204039a8:	078a                	slli	a5,a5,0x2
204039aa:	97ba                	add	a5,a5,a4
204039ac:	fd442703          	lw	a4,-44(s0)
204039b0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
204039b2:	4781                	li	a5,0
204039b4:	a011                	j	204039b8 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
204039b6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
204039b8:	853e                	mv	a0,a5
204039ba:	5432                	lw	s0,44(sp)
204039bc:	6145                	addi	sp,sp,48
204039be:	8082                	ret

204039c0 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
204039c0:	7139                	addi	sp,sp,-64
204039c2:	de06                	sw	ra,60(sp)
204039c4:	dc22                	sw	s0,56(sp)
204039c6:	0080                	addi	s0,sp,64
204039c8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204039cc:	fcc42783          	lw	a5,-52(s0)
204039d0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
204039d4:	fe442783          	lw	a5,-28(s0)
204039d8:	43dc                	lw	a5,4(a5)
204039da:	10079d63          	bnez	a5,20403af4 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
204039de:	57fd                	li	a5,-1
204039e0:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
204039e4:	57fd                	li	a5,-1
204039e6:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
204039ea:	301027f3          	csrr	a5,misa
204039ee:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
204039f2:	fe042703          	lw	a4,-32(s0)
204039f6:	6789                	lui	a5,0x2
204039f8:	8ff9                	and	a5,a5,a4
204039fa:	e799                	bnez	a5,20403a08 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
204039fc:	fe042703          	lw	a4,-32(s0)
20403a00:	000407b7          	lui	a5,0x40
20403a04:	8ff9                	and	a5,a5,a4
20403a06:	c799                	beqz	a5,20403a14 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403a08:	57fd                	li	a5,-1
20403a0a:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
20403a0e:	57fd                	li	a5,-1
20403a10:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403a14:	fe042703          	lw	a4,-32(s0)
20403a18:	000407b7          	lui	a5,0x40
20403a1c:	8ff9                	and	a5,a5,a4
20403a1e:	c781                	beqz	a5,20403a26 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20403a20:	57fd                	li	a5,-1
20403a22:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403a26:	fe042623          	sw	zero,-20(s0)
20403a2a:	a0b9                	j	20403a78 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
20403a2c:	fe442683          	lw	a3,-28(s0)
20403a30:	fec42703          	lw	a4,-20(s0)
20403a34:	87ba                	mv	a5,a4
20403a36:	0786                	slli	a5,a5,0x1
20403a38:	97ba                	add	a5,a5,a4
20403a3a:	078e                	slli	a5,a5,0x3
20403a3c:	97b6                	add	a5,a5,a3
20403a3e:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20403a42:	fe442683          	lw	a3,-28(s0)
20403a46:	fec42703          	lw	a4,-20(s0)
20403a4a:	87ba                	mv	a5,a4
20403a4c:	0786                	slli	a5,a5,0x1
20403a4e:	97ba                	add	a5,a5,a4
20403a50:	078e                	slli	a5,a5,0x3
20403a52:	97b6                	add	a5,a5,a3
20403a54:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20403a58:	fe442683          	lw	a3,-28(s0)
20403a5c:	fec42703          	lw	a4,-20(s0)
20403a60:	87ba                	mv	a5,a4
20403a62:	0786                	slli	a5,a5,0x1
20403a64:	97ba                	add	a5,a5,a4
20403a66:	078e                	slli	a5,a5,0x3
20403a68:	97b6                	add	a5,a5,a3
20403a6a:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403a6e:	fec42783          	lw	a5,-20(s0)
20403a72:	0785                	addi	a5,a5,1
20403a74:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20403a78:	fec42703          	lw	a4,-20(s0)
20403a7c:	47fd                	li	a5,31
20403a7e:	fae7d7e3          	bge	a5,a4,20403a2c <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403a82:	fe042423          	sw	zero,-24(s0)
20403a86:	a01d                	j	20403aac <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403a88:	fe442703          	lw	a4,-28(s0)
20403a8c:	fe842783          	lw	a5,-24(s0)
20403a90:	0e078793          	addi	a5,a5,224
20403a94:	078a                	slli	a5,a5,0x2
20403a96:	97ba                	add	a5,a5,a4
20403a98:	20403737          	lui	a4,0x20403
20403a9c:	a7470713          	addi	a4,a4,-1420 # 20402a74 <__metal_default_exception_handler>
20403aa0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403aa2:	fe842783          	lw	a5,-24(s0)
20403aa6:	0785                	addi	a5,a5,1
20403aa8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
20403aac:	fe842703          	lw	a4,-24(s0)
20403ab0:	47ad                	li	a5,11
20403ab2:	fce7dbe3          	bge	a5,a4,20403a88 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20403ab6:	204037b7          	lui	a5,0x20403
20403aba:	d0078593          	addi	a1,a5,-768 # 20402d00 <__metal_exception_handler>
20403abe:	4501                	li	a0,0
20403ac0:	331d                	jal	204037e6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20403ac2:	301027f3          	csrr	a5,misa
20403ac6:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20403aca:	fdc42703          	lw	a4,-36(s0)
20403ace:	67c1                	lui	a5,0x10
20403ad0:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20403ad4:	8ff9                	and	a5,a5,a4
20403ad6:	cb99                	beqz	a5,20403aec <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20403ad8:	300027f3          	csrr	a5,mstatus
20403adc:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20403ae0:	fdc42703          	lw	a4,-36(s0)
20403ae4:	6789                	lui	a5,0x2
20403ae6:	8fd9                	or	a5,a5,a4
20403ae8:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
20403aec:	fe442783          	lw	a5,-28(s0)
20403af0:	4705                	li	a4,1
20403af2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20403af4:	0001                	nop
20403af6:	50f2                	lw	ra,60(sp)
20403af8:	5462                	lw	s0,56(sp)
20403afa:	6121                	addi	sp,sp,64
20403afc:	8082                	ret

20403afe <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20403afe:	7179                	addi	sp,sp,-48
20403b00:	d606                	sw	ra,44(sp)
20403b02:	d422                	sw	s0,40(sp)
20403b04:	1800                	addi	s0,sp,48
20403b06:	fca42e23          	sw	a0,-36(s0)
20403b0a:	fcb42c23          	sw	a1,-40(s0)
20403b0e:	fcc42a23          	sw	a2,-44(s0)
20403b12:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403b16:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403b1a:	fdc42783          	lw	a5,-36(s0)
20403b1e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20403b22:	fd842503          	lw	a0,-40(s0)
20403b26:	3ba1                	jal	2040387e <__metal_valid_interrupt_id>
20403b28:	87aa                	mv	a5,a0
20403b2a:	e399                	bnez	a5,20403b30 <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
20403b2c:	57d5                	li	a5,-11
20403b2e:	aa11                	j	20403c42 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20403b30:	fd442783          	lw	a5,-44(s0)
20403b34:	cf85                	beqz	a5,20403b6c <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20403b36:	fe842683          	lw	a3,-24(s0)
20403b3a:	fd842703          	lw	a4,-40(s0)
20403b3e:	87ba                	mv	a5,a4
20403b40:	0786                	slli	a5,a5,0x1
20403b42:	97ba                	add	a5,a5,a4
20403b44:	078e                	slli	a5,a5,0x3
20403b46:	97b6                	add	a5,a5,a3
20403b48:	fd442703          	lw	a4,-44(s0)
20403b4c:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20403b50:	fe842683          	lw	a3,-24(s0)
20403b54:	fd842703          	lw	a4,-40(s0)
20403b58:	87ba                	mv	a5,a4
20403b5a:	0786                	slli	a5,a5,0x1
20403b5c:	97ba                	add	a5,a5,a4
20403b5e:	078e                	slli	a5,a5,0x3
20403b60:	97b6                	add	a5,a5,a3
20403b62:	fd042703          	lw	a4,-48(s0)
20403b66:	08e7ac23          	sw	a4,152(a5)
20403b6a:	a8d1                	j	20403c3e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
20403b6c:	fd842783          	lw	a5,-40(s0)
20403b70:	17f5                	addi	a5,a5,-3
20403b72:	4771                	li	a4,28
20403b74:	0cf76263          	bltu	a4,a5,20403c38 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20403b78:	00279713          	slli	a4,a5,0x2
20403b7c:	204067b7          	lui	a5,0x20406
20403b80:	ae478793          	addi	a5,a5,-1308 # 20405ae4 <__metal_driver_vtable_riscv_clint0+0x154>
20403b84:	97ba                	add	a5,a5,a4
20403b86:	439c                	lw	a5,0(a5)
20403b88:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403b8a:	fe842683          	lw	a3,-24(s0)
20403b8e:	fd842703          	lw	a4,-40(s0)
20403b92:	87ba                	mv	a5,a4
20403b94:	0786                	slli	a5,a5,0x1
20403b96:	97ba                	add	a5,a5,a4
20403b98:	078e                	slli	a5,a5,0x3
20403b9a:	97b6                	add	a5,a5,a3
20403b9c:	20403737          	lui	a4,0x20403
20403ba0:	b6070713          	addi	a4,a4,-1184 # 20402b60 <__metal_default_sw_handler>
20403ba4:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20403ba8:	fe842683          	lw	a3,-24(s0)
20403bac:	fd842703          	lw	a4,-40(s0)
20403bb0:	87ba                	mv	a5,a4
20403bb2:	0786                	slli	a5,a5,0x1
20403bb4:	97ba                	add	a5,a5,a4
20403bb6:	078e                	slli	a5,a5,0x3
20403bb8:	97b6                	add	a5,a5,a3
20403bba:	fd042703          	lw	a4,-48(s0)
20403bbe:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20403bc2:	a8b5                	j	20403c3e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20403bc4:	fe842683          	lw	a3,-24(s0)
20403bc8:	fd842703          	lw	a4,-40(s0)
20403bcc:	87ba                	mv	a5,a4
20403bce:	0786                	slli	a5,a5,0x1
20403bd0:	97ba                	add	a5,a5,a4
20403bd2:	078e                	slli	a5,a5,0x3
20403bd4:	97b6                	add	a5,a5,a3
20403bd6:	20403737          	lui	a4,0x20403
20403bda:	c5270713          	addi	a4,a4,-942 # 20402c52 <__metal_default_timer_handler>
20403bde:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20403be2:	fe842683          	lw	a3,-24(s0)
20403be6:	fd842703          	lw	a4,-40(s0)
20403bea:	87ba                	mv	a5,a4
20403bec:	0786                	slli	a5,a5,0x1
20403bee:	97ba                	add	a5,a5,a4
20403bf0:	078e                	slli	a5,a5,0x3
20403bf2:	97b6                	add	a5,a5,a3
20403bf4:	fd042703          	lw	a4,-48(s0)
20403bf8:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20403bfc:	a089                	j	20403c3e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20403bfe:	fe842683          	lw	a3,-24(s0)
20403c02:	fd842703          	lw	a4,-40(s0)
20403c06:	87ba                	mv	a5,a4
20403c08:	0786                	slli	a5,a5,0x1
20403c0a:	97ba                	add	a5,a5,a4
20403c0c:	078e                	slli	a5,a5,0x3
20403c0e:	97b6                	add	a5,a5,a3
20403c10:	20403737          	lui	a4,0x20403
20403c14:	a8c70713          	addi	a4,a4,-1396 # 20402a8c <__metal_default_interrupt_handler>
20403c18:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20403c1c:	fe842683          	lw	a3,-24(s0)
20403c20:	fd842703          	lw	a4,-40(s0)
20403c24:	87ba                	mv	a5,a4
20403c26:	0786                	slli	a5,a5,0x1
20403c28:	97ba                	add	a5,a5,a4
20403c2a:	078e                	slli	a5,a5,0x3
20403c2c:	97b6                	add	a5,a5,a3
20403c2e:	fd042703          	lw	a4,-48(s0)
20403c32:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20403c36:	a021                	j	20403c3e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20403c38:	57d1                	li	a5,-12
20403c3a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
20403c3e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20403c42:	853e                	mv	a0,a5
20403c44:	50b2                	lw	ra,44(sp)
20403c46:	5422                	lw	s0,40(sp)
20403c48:	6145                	addi	sp,sp,48
20403c4a:	8082                	ret

20403c4c <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20403c4c:	1101                	addi	sp,sp,-32
20403c4e:	ce06                	sw	ra,28(sp)
20403c50:	cc22                	sw	s0,24(sp)
20403c52:	1000                	addi	s0,sp,32
20403c54:	fea42623          	sw	a0,-20(s0)
20403c58:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20403c5c:	fe842783          	lw	a5,-24(s0)
20403c60:	4605                	li	a2,1
20403c62:	85be                	mv	a1,a5
20403c64:	fec42503          	lw	a0,-20(s0)
20403c68:	c4fff0ef          	jal	ra,204038b6 <__metal_local_interrupt_enable>
20403c6c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
20403c6e:	853e                	mv	a0,a5
20403c70:	40f2                	lw	ra,28(sp)
20403c72:	4462                	lw	s0,24(sp)
20403c74:	6105                	addi	sp,sp,32
20403c76:	8082                	ret

20403c78 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20403c78:	1101                	addi	sp,sp,-32
20403c7a:	ce06                	sw	ra,28(sp)
20403c7c:	cc22                	sw	s0,24(sp)
20403c7e:	1000                	addi	s0,sp,32
20403c80:	fea42623          	sw	a0,-20(s0)
20403c84:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403c88:	fe842783          	lw	a5,-24(s0)
20403c8c:	4601                	li	a2,0
20403c8e:	85be                	mv	a1,a5
20403c90:	fec42503          	lw	a0,-20(s0)
20403c94:	c23ff0ef          	jal	ra,204038b6 <__metal_local_interrupt_enable>
20403c98:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403c9a:	853e                	mv	a0,a5
20403c9c:	40f2                	lw	ra,28(sp)
20403c9e:	4462                	lw	s0,24(sp)
20403ca0:	6105                	addi	sp,sp,32
20403ca2:	8082                	ret

20403ca4 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20403ca4:	1101                	addi	sp,sp,-32
20403ca6:	ce06                	sw	ra,28(sp)
20403ca8:	cc22                	sw	s0,24(sp)
20403caa:	1000                	addi	s0,sp,32
20403cac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20403cb0:	ae7ff0ef          	jal	ra,20403796 <__metal_controller_interrupt_vector_mode>
20403cb4:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20403cb6:	853e                	mv	a0,a5
20403cb8:	40f2                	lw	ra,28(sp)
20403cba:	4462                	lw	s0,24(sp)
20403cbc:	6105                	addi	sp,sp,32
20403cbe:	8082                	ret

20403cc0 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20403cc0:	7179                	addi	sp,sp,-48
20403cc2:	d606                	sw	ra,44(sp)
20403cc4:	d422                	sw	s0,40(sp)
20403cc6:	1800                	addi	s0,sp,48
20403cc8:	fca42e23          	sw	a0,-36(s0)
20403ccc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403cd0:	fdc42783          	lw	a5,-36(s0)
20403cd4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20403cd8:	fd842783          	lw	a5,-40(s0)
20403cdc:	eb99                	bnez	a5,20403cf2 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20403cde:	204037b7          	lui	a5,0x20403
20403ce2:	d0078593          	addi	a1,a5,-768 # 20402d00 <__metal_exception_handler>
20403ce6:	fd842503          	lw	a0,-40(s0)
20403cea:	afdff0ef          	jal	ra,204037e6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20403cee:	4781                	li	a5,0
20403cf0:	a00d                	j	20403d12 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20403cf2:	fd842703          	lw	a4,-40(s0)
20403cf6:	4785                	li	a5,1
20403cf8:	00f71c63          	bne	a4,a5,20403d10 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20403cfc:	204057b7          	lui	a5,0x20405
20403d00:	60078593          	addi	a1,a5,1536 # 20405600 <__metal_vector_table>
20403d04:	fd842503          	lw	a0,-40(s0)
20403d08:	adfff0ef          	jal	ra,204037e6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20403d0c:	4781                	li	a5,0
20403d0e:	a011                	j	20403d12 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20403d10:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20403d12:	853e                	mv	a0,a5
20403d14:	50b2                	lw	ra,44(sp)
20403d16:	5422                	lw	s0,40(sp)
20403d18:	6145                	addi	sp,sp,48
20403d1a:	8082                	ret

20403d1c <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20403d1c:	1101                	addi	sp,sp,-32
20403d1e:	ce22                	sw	s0,28(sp)
20403d20:	1000                	addi	s0,sp,32
20403d22:	fea42623          	sw	a0,-20(s0)
20403d26:	feb42423          	sw	a1,-24(s0)
20403d2a:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20403d2e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
20403d30:	853e                	mv	a0,a5
20403d32:	4472                	lw	s0,28(sp)
20403d34:	6105                	addi	sp,sp,32
20403d36:	8082                	ret

20403d38 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20403d38:	7139                	addi	sp,sp,-64
20403d3a:	de22                	sw	s0,60(sp)
20403d3c:	0080                	addi	s0,sp,64
20403d3e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20403d42:	4301                	li	t1,0
20403d44:	4381                	li	t2,0
20403d46:	fe642423          	sw	t1,-24(s0)
20403d4a:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20403d4e:	b8002573          	csrr	a0,mcycleh
20403d52:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20403d56:	b0002573          	csrr	a0,mcycle
20403d5a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20403d5e:	b8002573          	csrr	a0,mcycleh
20403d62:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20403d66:	fe442883          	lw	a7,-28(s0)
20403d6a:	fdc42503          	lw	a0,-36(s0)
20403d6e:	02a89563          	bne	a7,a0,20403d98 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20403d72:	fe442503          	lw	a0,-28(s0)
20403d76:	85aa                	mv	a1,a0
20403d78:	4601                	li	a2,0
20403d7a:	00059813          	slli	a6,a1,0x0
20403d7e:	4781                	li	a5,0
20403d80:	fe042603          	lw	a2,-32(s0)
20403d84:	86b2                	mv	a3,a2
20403d86:	4701                	li	a4,0
20403d88:	00d7e633          	or	a2,a5,a3
20403d8c:	fec42423          	sw	a2,-24(s0)
20403d90:	00e867b3          	or	a5,a6,a4
20403d94:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403d98:	fe842783          	lw	a5,-24(s0)
20403d9c:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20403da0:	853e                	mv	a0,a5
20403da2:	85c2                	mv	a1,a6
20403da4:	5472                	lw	s0,60(sp)
20403da6:	6121                	addi	sp,sp,64
20403da8:	8082                	ret

20403daa <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20403daa:	7179                	addi	sp,sp,-48
20403dac:	d606                	sw	ra,44(sp)
20403dae:	d422                	sw	s0,40(sp)
20403db0:	d24a                	sw	s2,36(sp)
20403db2:	d04e                	sw	s3,32(sp)
20403db4:	1800                	addi	s0,sp,48
20403db6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20403dba:	fdc42783          	lw	a5,-36(s0)
20403dbe:	e781                	bnez	a5,20403dc6 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20403dc0:	4901                	li	s2,0
20403dc2:	4981                	li	s3,0
20403dc4:	a821                	j	20403ddc <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20403dc6:	fdc42503          	lw	a0,-36(s0)
20403dca:	aedfe0ef          	jal	ra,204028b6 <__metal_driver_cpu_timebase>
20403dce:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20403dd2:	fec42783          	lw	a5,-20(s0)
20403dd6:	893e                	mv	s2,a5
20403dd8:	87fd                	srai	a5,a5,0x1f
20403dda:	89be                	mv	s3,a5
20403ddc:	87ca                	mv	a5,s2
20403dde:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20403de0:	853e                	mv	a0,a5
20403de2:	85c2                	mv	a1,a6
20403de4:	50b2                	lw	ra,44(sp)
20403de6:	5422                	lw	s0,40(sp)
20403de8:	5912                	lw	s2,36(sp)
20403dea:	5982                	lw	s3,32(sp)
20403dec:	6145                	addi	sp,sp,48
20403dee:	8082                	ret

20403df0 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20403df0:	7179                	addi	sp,sp,-48
20403df2:	d606                	sw	ra,44(sp)
20403df4:	d422                	sw	s0,40(sp)
20403df6:	1800                	addi	s0,sp,48
20403df8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20403dfc:	4781                	li	a5,0
20403dfe:	4801                	li	a6,0
20403e00:	fef42023          	sw	a5,-32(s0)
20403e04:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403e08:	fdc42503          	lw	a0,-36(s0)
20403e0c:	ad5fe0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20403e10:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20403e14:	fec42783          	lw	a5,-20(s0)
20403e18:	c78d                	beqz	a5,20403e42 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403e1a:	fec42783          	lw	a5,-20(s0)
20403e1e:	13c7a783          	lw	a5,316(a5)
20403e22:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20403e26:	fe842783          	lw	a5,-24(s0)
20403e2a:	cf81                	beqz	a5,20403e42 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20403e2c:	fe842783          	lw	a5,-24(s0)
20403e30:	439c                	lw	a5,0(a5)
20403e32:	43f8                	lw	a4,68(a5)
20403e34:	fe040793          	addi	a5,s0,-32
20403e38:	863e                	mv	a2,a5
20403e3a:	4585                	li	a1,1
20403e3c:	fe842503          	lw	a0,-24(s0)
20403e40:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20403e42:	fe042783          	lw	a5,-32(s0)
20403e46:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
20403e4a:	853e                	mv	a0,a5
20403e4c:	85c2                	mv	a1,a6
20403e4e:	50b2                	lw	ra,44(sp)
20403e50:	5422                	lw	s0,40(sp)
20403e52:	6145                	addi	sp,sp,48
20403e54:	8082                	ret

20403e56 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20403e56:	7179                	addi	sp,sp,-48
20403e58:	d606                	sw	ra,44(sp)
20403e5a:	d422                	sw	s0,40(sp)
20403e5c:	d226                	sw	s1,36(sp)
20403e5e:	1800                	addi	s0,sp,48
20403e60:	fca42e23          	sw	a0,-36(s0)
20403e64:	fcb42823          	sw	a1,-48(s0)
20403e68:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20403e6c:	57fd                	li	a5,-1
20403e6e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403e72:	fdc42503          	lw	a0,-36(s0)
20403e76:	a6bfe0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20403e7a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20403e7e:	fe842783          	lw	a5,-24(s0)
20403e82:	cf8d                	beqz	a5,20403ebc <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403e84:	fe842783          	lw	a5,-24(s0)
20403e88:	13c7a783          	lw	a5,316(a5)
20403e8c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20403e90:	fe442783          	lw	a5,-28(s0)
20403e94:	c785                	beqz	a5,20403ebc <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20403e96:	fe442783          	lw	a5,-28(s0)
20403e9a:	439c                	lw	a5,0(a5)
20403e9c:	47a4                	lw	s1,72(a5)
20403e9e:	fdc42503          	lw	a0,-36(s0)
20403ea2:	9f1fe0ef          	jal	ra,20402892 <__metal_driver_cpu_hartid>
20403ea6:	87aa                	mv	a5,a0
20403ea8:	fd042603          	lw	a2,-48(s0)
20403eac:	fd442683          	lw	a3,-44(s0)
20403eb0:	85be                	mv	a1,a5
20403eb2:	fe442503          	lw	a0,-28(s0)
20403eb6:	9482                	jalr	s1
20403eb8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20403ebc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20403ec0:	853e                	mv	a0,a5
20403ec2:	50b2                	lw	ra,44(sp)
20403ec4:	5422                	lw	s0,40(sp)
20403ec6:	5492                	lw	s1,36(sp)
20403ec8:	6145                	addi	sp,sp,48
20403eca:	8082                	ret

20403ecc <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20403ecc:	1101                	addi	sp,sp,-32
20403ece:	ce22                	sw	s0,28(sp)
20403ed0:	1000                	addi	s0,sp,32
20403ed2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403ed6:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403eda:	853e                	mv	a0,a5
20403edc:	4472                	lw	s0,28(sp)
20403ede:	6105                	addi	sp,sp,32
20403ee0:	8082                	ret

20403ee2 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20403ee2:	1101                	addi	sp,sp,-32
20403ee4:	ce22                	sw	s0,28(sp)
20403ee6:	1000                	addi	s0,sp,32
20403ee8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20403eec:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20403eee:	853e                	mv	a0,a5
20403ef0:	4472                	lw	s0,28(sp)
20403ef2:	6105                	addi	sp,sp,32
20403ef4:	8082                	ret

20403ef6 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20403ef6:	1101                	addi	sp,sp,-32
20403ef8:	ce22                	sw	s0,28(sp)
20403efa:	1000                	addi	s0,sp,32
20403efc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403f00:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20403f04:	853e                	mv	a0,a5
20403f06:	4472                	lw	s0,28(sp)
20403f08:	6105                	addi	sp,sp,32
20403f0a:	8082                	ret

20403f0c <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403f0c:	1101                	addi	sp,sp,-32
20403f0e:	ce22                	sw	s0,28(sp)
20403f10:	1000                	addi	s0,sp,32
20403f12:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20403f16:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403f18:	853e                	mv	a0,a5
20403f1a:	4472                	lw	s0,28(sp)
20403f1c:	6105                	addi	sp,sp,32
20403f1e:	8082                	ret

20403f20 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403f20:	7179                	addi	sp,sp,-48
20403f22:	d606                	sw	ra,44(sp)
20403f24:	d422                	sw	s0,40(sp)
20403f26:	1800                	addi	s0,sp,48
20403f28:	fca42e23          	sw	a0,-36(s0)
20403f2c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20403f30:	57fd                	li	a5,-1
20403f32:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403f36:	fdc42503          	lw	a0,-36(s0)
20403f3a:	9a7fe0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20403f3e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20403f42:	fe842783          	lw	a5,-24(s0)
20403f46:	c79d                	beqz	a5,20403f74 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403f48:	fe842783          	lw	a5,-24(s0)
20403f4c:	0dc7a783          	lw	a5,220(a5)
20403f50:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20403f54:	fe442783          	lw	a5,-28(s0)
20403f58:	cf91                	beqz	a5,20403f74 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
20403f5a:	fe442783          	lw	a5,-28(s0)
20403f5e:	439c                	lw	a5,0(a5)
20403f60:	43f8                	lw	a4,68(a5)
20403f62:	fd840793          	addi	a5,s0,-40
20403f66:	863e                	mv	a2,a5
20403f68:	458d                	li	a1,3
20403f6a:	fe442503          	lw	a0,-28(s0)
20403f6e:	9702                	jalr	a4
20403f70:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20403f74:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20403f78:	853e                	mv	a0,a5
20403f7a:	50b2                	lw	ra,44(sp)
20403f7c:	5422                	lw	s0,40(sp)
20403f7e:	6145                	addi	sp,sp,48
20403f80:	8082                	ret

20403f82 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403f82:	7179                	addi	sp,sp,-48
20403f84:	d606                	sw	ra,44(sp)
20403f86:	d422                	sw	s0,40(sp)
20403f88:	1800                	addi	s0,sp,48
20403f8a:	fca42e23          	sw	a0,-36(s0)
20403f8e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20403f92:	57fd                	li	a5,-1
20403f94:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403f98:	fdc42503          	lw	a0,-36(s0)
20403f9c:	945fe0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20403fa0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20403fa4:	fe842783          	lw	a5,-24(s0)
20403fa8:	c79d                	beqz	a5,20403fd6 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403faa:	fe842783          	lw	a5,-24(s0)
20403fae:	0dc7a783          	lw	a5,220(a5)
20403fb2:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20403fb6:	fe442783          	lw	a5,-28(s0)
20403fba:	cf91                	beqz	a5,20403fd6 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20403fbc:	fe442783          	lw	a5,-28(s0)
20403fc0:	439c                	lw	a5,0(a5)
20403fc2:	43f8                	lw	a4,68(a5)
20403fc4:	fd840793          	addi	a5,s0,-40
20403fc8:	863e                	mv	a2,a5
20403fca:	4589                	li	a1,2
20403fcc:	fe442503          	lw	a0,-28(s0)
20403fd0:	9702                	jalr	a4
20403fd2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20403fd6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20403fda:	853e                	mv	a0,a5
20403fdc:	50b2                	lw	ra,44(sp)
20403fde:	5422                	lw	s0,40(sp)
20403fe0:	6145                	addi	sp,sp,48
20403fe2:	8082                	ret

20403fe4 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20403fe4:	7179                	addi	sp,sp,-48
20403fe6:	d606                	sw	ra,44(sp)
20403fe8:	d422                	sw	s0,40(sp)
20403fea:	1800                	addi	s0,sp,48
20403fec:	fca42e23          	sw	a0,-36(s0)
20403ff0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20403ff4:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403ff8:	fdc42503          	lw	a0,-36(s0)
20403ffc:	8e5fe0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20404000:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20404004:	fe842783          	lw	a5,-24(s0)
20404008:	c79d                	beqz	a5,20404036 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040400a:	fe842783          	lw	a5,-24(s0)
2040400e:	0dc7a783          	lw	a5,220(a5)
20404012:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20404016:	fe442783          	lw	a5,-28(s0)
2040401a:	cf91                	beqz	a5,20404036 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
2040401c:	fe442783          	lw	a5,-28(s0)
20404020:	439c                	lw	a5,0(a5)
20404022:	43f8                	lw	a4,68(a5)
20404024:	fd840793          	addi	a5,s0,-40
20404028:	863e                	mv	a2,a5
2040402a:	4591                	li	a1,4
2040402c:	fe442503          	lw	a0,-28(s0)
20404030:	9702                	jalr	a4
20404032:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20404036:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
2040403a:	853e                	mv	a0,a5
2040403c:	50b2                	lw	ra,44(sp)
2040403e:	5422                	lw	s0,40(sp)
20404040:	6145                	addi	sp,sp,48
20404042:	8082                	ret

20404044 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20404044:	1101                	addi	sp,sp,-32
20404046:	ce06                	sw	ra,28(sp)
20404048:	cc22                	sw	s0,24(sp)
2040404a:	1000                	addi	s0,sp,32
2040404c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20404050:	fec42503          	lw	a0,-20(s0)
20404054:	88dfe0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20404058:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
2040405a:	853e                	mv	a0,a5
2040405c:	40f2                	lw	ra,28(sp)
2040405e:	4462                	lw	s0,24(sp)
20404060:	6105                	addi	sp,sp,32
20404062:	8082                	ret

20404064 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20404064:	7179                	addi	sp,sp,-48
20404066:	d606                	sw	ra,44(sp)
20404068:	d422                	sw	s0,40(sp)
2040406a:	1800                	addi	s0,sp,48
2040406c:	fca42e23          	sw	a0,-36(s0)
20404070:	fcb42c23          	sw	a1,-40(s0)
20404074:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404078:	fdc42503          	lw	a0,-36(s0)
2040407c:	865fe0ef          	jal	ra,204028e0 <__metal_driver_cpu_interrupt_controller>
20404080:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20404084:	fec42783          	lw	a5,-20(s0)
20404088:	cb99                	beqz	a5,2040409e <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
2040408a:	fd442603          	lw	a2,-44(s0)
2040408e:	fd842583          	lw	a1,-40(s0)
20404092:	fec42503          	lw	a0,-20(s0)
20404096:	8ddff0ef          	jal	ra,20403972 <__metal_exception_register>
2040409a:	87aa                	mv	a5,a0
2040409c:	a011                	j	204040a0 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
2040409e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
204040a0:	853e                	mv	a0,a5
204040a2:	50b2                	lw	ra,44(sp)
204040a4:	5422                	lw	s0,40(sp)
204040a6:	6145                	addi	sp,sp,48
204040a8:	8082                	ret

204040aa <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
204040aa:	1101                	addi	sp,sp,-32
204040ac:	ce22                	sw	s0,28(sp)
204040ae:	1000                	addi	s0,sp,32
204040b0:	fea42623          	sw	a0,-20(s0)
204040b4:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
204040b8:	fe842783          	lw	a5,-24(s0)
204040bc:	0007d783          	lhu	a5,0(a5)
204040c0:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
204040c4:	478d                	li	a5,3
204040c6:	00f71463          	bne	a4,a5,204040ce <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
204040ca:	4791                	li	a5,4
204040cc:	a011                	j	204040d0 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
204040ce:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
204040d0:	853e                	mv	a0,a5
204040d2:	4472                	lw	s0,28(sp)
204040d4:	6105                	addi	sp,sp,32
204040d6:	8082                	ret

204040d8 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
204040d8:	7179                	addi	sp,sp,-48
204040da:	d622                	sw	s0,44(sp)
204040dc:	1800                	addi	s0,sp,48
204040de:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204040e2:	341027f3          	csrr	a5,mepc
204040e6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
204040ea:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
204040ee:	853e                	mv	a0,a5
204040f0:	5432                	lw	s0,44(sp)
204040f2:	6145                	addi	sp,sp,48
204040f4:	8082                	ret

204040f6 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
204040f6:	1101                	addi	sp,sp,-32
204040f8:	ce22                	sw	s0,28(sp)
204040fa:	1000                	addi	s0,sp,32
204040fc:	fea42623          	sw	a0,-20(s0)
20404100:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20404104:	fe842783          	lw	a5,-24(s0)
20404108:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
2040410c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
2040410e:	853e                	mv	a0,a5
20404110:	4472                	lw	s0,28(sp)
20404112:	6105                	addi	sp,sp,32
20404114:	8082                	ret

20404116 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20404116:	1101                	addi	sp,sp,-32
20404118:	ce22                	sw	s0,28(sp)
2040411a:	1000                	addi	s0,sp,32
2040411c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20404120:	fec42703          	lw	a4,-20(s0)
20404124:	800017b7          	lui	a5,0x80001
20404128:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe030>
2040412c:	00f71563          	bne	a4,a5,20404136 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20404130:	0c0007b7          	lui	a5,0xc000
20404134:	a011                	j	20404138 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20404136:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
20404138:	853e                	mv	a0,a5
2040413a:	4472                	lw	s0,28(sp)
2040413c:	6105                	addi	sp,sp,32
2040413e:	8082                	ret

20404140 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20404140:	1101                	addi	sp,sp,-32
20404142:	ce22                	sw	s0,28(sp)
20404144:	1000                	addi	s0,sp,32
20404146:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
2040414a:	fec42703          	lw	a4,-20(s0)
2040414e:	800017b7          	lui	a5,0x80001
20404152:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe030>
20404156:	00f71463          	bne	a4,a5,2040415e <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
2040415a:	47ed                	li	a5,27
2040415c:	a011                	j	20404160 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
2040415e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
20404160:	853e                	mv	a0,a5
20404162:	4472                	lw	s0,28(sp)
20404164:	6105                	addi	sp,sp,32
20404166:	8082                	ret

20404168 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20404168:	1101                	addi	sp,sp,-32
2040416a:	ce22                	sw	s0,28(sp)
2040416c:	1000                	addi	s0,sp,32
2040416e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20404172:	fec42703          	lw	a4,-20(s0)
20404176:	800017b7          	lui	a5,0x80001
2040417a:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe030>
2040417e:	00f71463          	bne	a4,a5,20404186 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20404182:	479d                	li	a5,7
20404184:	a011                	j	20404188 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20404186:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
20404188:	853e                	mv	a0,a5
2040418a:	4472                	lw	s0,28(sp)
2040418c:	6105                	addi	sp,sp,32
2040418e:	8082                	ret

20404190 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20404190:	1101                	addi	sp,sp,-32
20404192:	ce22                	sw	s0,28(sp)
20404194:	1000                	addi	s0,sp,32
20404196:	fea42623          	sw	a0,-20(s0)
2040419a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
2040419e:	fe842783          	lw	a5,-24(s0)
204041a2:	e791                	bnez	a5,204041ae <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
204041a4:	800017b7          	lui	a5,0x80001
204041a8:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdc78>
204041ac:	a011                	j	204041b0 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
204041ae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
204041b0:	853e                	mv	a0,a5
204041b2:	4472                	lw	s0,28(sp)
204041b4:	6105                	addi	sp,sp,32
204041b6:	8082                	ret

204041b8 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
204041b8:	1101                	addi	sp,sp,-32
204041ba:	ce22                	sw	s0,28(sp)
204041bc:	1000                	addi	s0,sp,32
204041be:	fea42623          	sw	a0,-20(s0)
204041c2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
204041c6:	fe842783          	lw	a5,-24(s0)
204041ca:	e399                	bnez	a5,204041d0 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
204041cc:	47ad                	li	a5,11
204041ce:	a011                	j	204041d2 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
204041d0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
204041d2:	853e                	mv	a0,a5
204041d4:	4472                	lw	s0,28(sp)
204041d6:	6105                	addi	sp,sp,32
204041d8:	8082                	ret

204041da <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
204041da:	7179                	addi	sp,sp,-48
204041dc:	d606                	sw	ra,44(sp)
204041de:	d422                	sw	s0,40(sp)
204041e0:	1800                	addi	s0,sp,48
204041e2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204041e6:	fdc42503          	lw	a0,-36(s0)
204041ea:	3735                	jal	20404116 <__metal_driver_sifive_plic0_control_base>
204041ec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204041f0:	fec42703          	lw	a4,-20(s0)
204041f4:	002007b7          	lui	a5,0x200
204041f8:	0791                	addi	a5,a5,4
204041fa:	97ba                	add	a5,a5,a4
204041fc:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
204041fe:	853e                	mv	a0,a5
20404200:	50b2                	lw	ra,44(sp)
20404202:	5422                	lw	s0,40(sp)
20404204:	6145                	addi	sp,sp,48
20404206:	8082                	ret

20404208 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20404208:	7179                	addi	sp,sp,-48
2040420a:	d606                	sw	ra,44(sp)
2040420c:	d422                	sw	s0,40(sp)
2040420e:	1800                	addi	s0,sp,48
20404210:	fca42e23          	sw	a0,-36(s0)
20404214:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404218:	fdc42503          	lw	a0,-36(s0)
2040421c:	3ded                	jal	20404116 <__metal_driver_sifive_plic0_control_base>
2040421e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404222:	fec42703          	lw	a4,-20(s0)
20404226:	002007b7          	lui	a5,0x200
2040422a:	0791                	addi	a5,a5,4
2040422c:	97ba                	add	a5,a5,a4
2040422e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20404230:	fd842783          	lw	a5,-40(s0)
20404234:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20404236:	0001                	nop
20404238:	50b2                	lw	ra,44(sp)
2040423a:	5422                	lw	s0,40(sp)
2040423c:	6145                	addi	sp,sp,48
2040423e:	8082                	ret

20404240 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20404240:	7179                	addi	sp,sp,-48
20404242:	d606                	sw	ra,44(sp)
20404244:	d422                	sw	s0,40(sp)
20404246:	1800                	addi	s0,sp,48
20404248:	fca42e23          	sw	a0,-36(s0)
2040424c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404250:	fdc42503          	lw	a0,-36(s0)
20404254:	35c9                	jal	20404116 <__metal_driver_sifive_plic0_control_base>
20404256:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040425a:	fec42703          	lw	a4,-20(s0)
2040425e:	002007b7          	lui	a5,0x200
20404262:	97ba                	add	a5,a5,a4
20404264:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20404266:	fd842783          	lw	a5,-40(s0)
2040426a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
2040426c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
2040426e:	853e                	mv	a0,a5
20404270:	50b2                	lw	ra,44(sp)
20404272:	5422                	lw	s0,40(sp)
20404274:	6145                	addi	sp,sp,48
20404276:	8082                	ret

20404278 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20404278:	7179                	addi	sp,sp,-48
2040427a:	d606                	sw	ra,44(sp)
2040427c:	d422                	sw	s0,40(sp)
2040427e:	1800                	addi	s0,sp,48
20404280:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404284:	fdc42503          	lw	a0,-36(s0)
20404288:	3579                	jal	20404116 <__metal_driver_sifive_plic0_control_base>
2040428a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040428e:	fec42703          	lw	a4,-20(s0)
20404292:	002007b7          	lui	a5,0x200
20404296:	97ba                	add	a5,a5,a4
20404298:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
2040429a:	853e                	mv	a0,a5
2040429c:	50b2                	lw	ra,44(sp)
2040429e:	5422                	lw	s0,40(sp)
204042a0:	6145                	addi	sp,sp,48
204042a2:	8082                	ret

204042a4 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
204042a4:	7179                	addi	sp,sp,-48
204042a6:	d606                	sw	ra,44(sp)
204042a8:	d422                	sw	s0,40(sp)
204042aa:	1800                	addi	s0,sp,48
204042ac:	fca42e23          	sw	a0,-36(s0)
204042b0:	fcb42c23          	sw	a1,-40(s0)
204042b4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
204042b8:	fdc42503          	lw	a0,-36(s0)
204042bc:	3da9                	jal	20404116 <__metal_driver_sifive_plic0_control_base>
204042be:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
204042c2:	fdc42503          	lw	a0,-36(s0)
204042c6:	354d                	jal	20404168 <__metal_driver_sifive_plic0_max_priority>
204042c8:	87aa                	mv	a5,a0
204042ca:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
204042ce:	fe842783          	lw	a5,-24(s0)
204042d2:	c785                	beqz	a5,204042fa <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
204042d4:	fd442703          	lw	a4,-44(s0)
204042d8:	fe842783          	lw	a5,-24(s0)
204042dc:	00f77f63          	bgeu	a4,a5,204042fa <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204042e0:	fd842783          	lw	a5,-40(s0)
204042e4:	078a                	slli	a5,a5,0x2
204042e6:	873e                	mv	a4,a5
204042e8:	fec42783          	lw	a5,-20(s0)
204042ec:	97ba                	add	a5,a5,a4
204042ee:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
204042f0:	fd442783          	lw	a5,-44(s0)
204042f4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
204042f6:	4781                	li	a5,0
204042f8:	a011                	j	204042fc <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
204042fa:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
204042fc:	853e                	mv	a0,a5
204042fe:	50b2                	lw	ra,44(sp)
20404300:	5422                	lw	s0,40(sp)
20404302:	6145                	addi	sp,sp,48
20404304:	8082                	ret

20404306 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20404306:	7179                	addi	sp,sp,-48
20404308:	d606                	sw	ra,44(sp)
2040430a:	d422                	sw	s0,40(sp)
2040430c:	1800                	addi	s0,sp,48
2040430e:	fca42e23          	sw	a0,-36(s0)
20404312:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404316:	fdc42503          	lw	a0,-36(s0)
2040431a:	3bf5                	jal	20404116 <__metal_driver_sifive_plic0_control_base>
2040431c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404320:	fd842783          	lw	a5,-40(s0)
20404324:	078a                	slli	a5,a5,0x2
20404326:	873e                	mv	a4,a5
20404328:	fec42783          	lw	a5,-20(s0)
2040432c:	97ba                	add	a5,a5,a4
2040432e:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20404330:	853e                	mv	a0,a5
20404332:	50b2                	lw	ra,44(sp)
20404334:	5422                	lw	s0,40(sp)
20404336:	6145                	addi	sp,sp,48
20404338:	8082                	ret

2040433a <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
2040433a:	7179                	addi	sp,sp,-48
2040433c:	d606                	sw	ra,44(sp)
2040433e:	d422                	sw	s0,40(sp)
20404340:	1800                	addi	s0,sp,48
20404342:	fca42e23          	sw	a0,-36(s0)
20404346:	fcb42c23          	sw	a1,-40(s0)
2040434a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
2040434e:	fdc42503          	lw	a0,-36(s0)
20404352:	33d1                	jal	20404116 <__metal_driver_sifive_plic0_control_base>
20404354:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404358:	fd842783          	lw	a5,-40(s0)
2040435c:	8795                	srai	a5,a5,0x5
2040435e:	078a                	slli	a5,a5,0x2
20404360:	873e                	mv	a4,a5
20404362:	fec42783          	lw	a5,-20(s0)
20404366:	973e                	add	a4,a4,a5
20404368:	6789                	lui	a5,0x2
2040436a:	97ba                	add	a5,a5,a4
2040436c:	439c                	lw	a5,0(a5)
2040436e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404372:	fd442783          	lw	a5,-44(s0)
20404376:	cf81                	beqz	a5,2040438e <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20404378:	fd842783          	lw	a5,-40(s0)
2040437c:	8bfd                	andi	a5,a5,31
2040437e:	4705                	li	a4,1
20404380:	00f717b3          	sll	a5,a4,a5
20404384:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404386:	fe842783          	lw	a5,-24(s0)
2040438a:	8fd9                	or	a5,a5,a4
2040438c:	a829                	j	204043a6 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
2040438e:	fd842783          	lw	a5,-40(s0)
20404392:	8bfd                	andi	a5,a5,31
20404394:	4705                	li	a4,1
20404396:	00f717b3          	sll	a5,a4,a5
2040439a:	fff7c793          	not	a5,a5
2040439e:	873e                	mv	a4,a5
204043a0:	fe842783          	lw	a5,-24(s0)
204043a4:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204043a6:	fd842703          	lw	a4,-40(s0)
204043aa:	8715                	srai	a4,a4,0x5
204043ac:	070a                	slli	a4,a4,0x2
204043ae:	86ba                	mv	a3,a4
204043b0:	fec42703          	lw	a4,-20(s0)
204043b4:	96ba                	add	a3,a3,a4
204043b6:	6709                	lui	a4,0x2
204043b8:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
204043ba:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
204043bc:	0001                	nop
204043be:	50b2                	lw	ra,44(sp)
204043c0:	5422                	lw	s0,40(sp)
204043c2:	6145                	addi	sp,sp,48
204043c4:	8082                	ret

204043c6 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
204043c6:	1101                	addi	sp,sp,-32
204043c8:	ce06                	sw	ra,28(sp)
204043ca:	cc22                	sw	s0,24(sp)
204043cc:	1000                	addi	s0,sp,32
204043ce:	fea42623          	sw	a0,-20(s0)
204043d2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
204043d6:	12c00513          	li	a0,300
204043da:	1d0010ef          	jal	ra,204055aa <metal_shutdown>

204043de <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
204043de:	7179                	addi	sp,sp,-48
204043e0:	d606                	sw	ra,44(sp)
204043e2:	d422                	sw	s0,40(sp)
204043e4:	1800                	addi	s0,sp,48
204043e6:	fca42e23          	sw	a0,-36(s0)
204043ea:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
204043ee:	fd842783          	lw	a5,-40(s0)
204043f2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
204043f6:	fec42503          	lw	a0,-20(s0)
204043fa:	33c5                	jal	204041da <__metal_plic0_claim_interrupt>
204043fc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20404400:	fec42503          	lw	a0,-20(s0)
20404404:	d3dff0ef          	jal	ra,20404140 <__metal_driver_sifive_plic0_num_interrupts>
20404408:	87aa                	mv	a5,a0
2040440a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
2040440e:	fe842703          	lw	a4,-24(s0)
20404412:	fe442783          	lw	a5,-28(s0)
20404416:	04f77263          	bgeu	a4,a5,2040445a <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
2040441a:	fec42703          	lw	a4,-20(s0)
2040441e:	fe842783          	lw	a5,-24(s0)
20404422:	078a                	slli	a5,a5,0x2
20404424:	97ba                	add	a5,a5,a4
20404426:	479c                	lw	a5,8(a5)
20404428:	cb8d                	beqz	a5,2040445a <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
2040442a:	fec42703          	lw	a4,-20(s0)
2040442e:	fe842783          	lw	a5,-24(s0)
20404432:	078a                	slli	a5,a5,0x2
20404434:	97ba                	add	a5,a5,a4
20404436:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
2040443a:	fe842603          	lw	a2,-24(s0)
2040443e:	fec42683          	lw	a3,-20(s0)
20404442:	fe842703          	lw	a4,-24(s0)
20404446:	87ba                	mv	a5,a4
20404448:	0786                	slli	a5,a5,0x1
2040444a:	97ba                	add	a5,a5,a4
2040444c:	078e                	slli	a5,a5,0x3
2040444e:	97b6                	add	a5,a5,a3
20404450:	0887a783          	lw	a5,136(a5)
20404454:	85be                	mv	a1,a5
20404456:	8532                	mv	a0,a2
20404458:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
2040445a:	fe842583          	lw	a1,-24(s0)
2040445e:	fec42503          	lw	a0,-20(s0)
20404462:	335d                	jal	20404208 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
20404464:	0001                	nop
20404466:	50b2                	lw	ra,44(sp)
20404468:	5422                	lw	s0,40(sp)
2040446a:	6145                	addi	sp,sp,48
2040446c:	8082                	ret

2040446e <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
2040446e:	7139                	addi	sp,sp,-64
20404470:	de06                	sw	ra,60(sp)
20404472:	dc22                	sw	s0,56(sp)
20404474:	0080                	addi	s0,sp,64
20404476:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040447a:	fcc42783          	lw	a5,-52(s0)
2040447e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20404482:	fe442783          	lw	a5,-28(s0)
20404486:	43dc                	lw	a5,4(a5)
20404488:	12079063          	bnez	a5,204045a8 <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040448c:	fe042623          	sw	zero,-20(s0)
20404490:	a221                	j	20404598 <__metal_driver_riscv_plic0_init+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20404492:	fcc42503          	lw	a0,-52(s0)
20404496:	cabff0ef          	jal	ra,20404140 <__metal_driver_sifive_plic0_num_interrupts>
2040449a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
2040449e:	fec42583          	lw	a1,-20(s0)
204044a2:	fcc42503          	lw	a0,-52(s0)
204044a6:	cebff0ef          	jal	ra,20404190 <__metal_driver_sifive_plic0_interrupt_parents>
204044aa:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
204044ae:	fec42583          	lw	a1,-20(s0)
204044b2:	fcc42503          	lw	a0,-52(s0)
204044b6:	d03ff0ef          	jal	ra,204041b8 <__metal_driver_sifive_plic0_interrupt_lines>
204044ba:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
204044be:	fdc42783          	lw	a5,-36(s0)
204044c2:	439c                	lw	a5,0(a5)
204044c4:	439c                	lw	a5,0(a5)
204044c6:	fdc42503          	lw	a0,-36(s0)
204044ca:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
204044cc:	fe042423          	sw	zero,-24(s0)
204044d0:	a085                	j	20404530 <__metal_driver_riscv_plic0_init+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
204044d2:	4601                	li	a2,0
204044d4:	fe842583          	lw	a1,-24(s0)
204044d8:	fe442503          	lw	a0,-28(s0)
204044dc:	3db9                	jal	2040433a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
204044de:	4601                	li	a2,0
204044e0:	fe842583          	lw	a1,-24(s0)
204044e4:	fcc42503          	lw	a0,-52(s0)
204044e8:	3b75                	jal	204042a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
204044ea:	fe442703          	lw	a4,-28(s0)
204044ee:	fe842783          	lw	a5,-24(s0)
204044f2:	078a                	slli	a5,a5,0x2
204044f4:	97ba                	add	a5,a5,a4
204044f6:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
204044fa:	fe442683          	lw	a3,-28(s0)
204044fe:	fe842703          	lw	a4,-24(s0)
20404502:	87ba                	mv	a5,a4
20404504:	0786                	slli	a5,a5,0x1
20404506:	97ba                	add	a5,a5,a4
20404508:	078e                	slli	a5,a5,0x3
2040450a:	97b6                	add	a5,a5,a3
2040450c:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20404510:	fe442683          	lw	a3,-28(s0)
20404514:	fe842703          	lw	a4,-24(s0)
20404518:	87ba                	mv	a5,a4
2040451a:	0786                	slli	a5,a5,0x1
2040451c:	97ba                	add	a5,a5,a4
2040451e:	078e                	slli	a5,a5,0x3
20404520:	97b6                	add	a5,a5,a3
20404522:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20404526:	fe842783          	lw	a5,-24(s0)
2040452a:	0785                	addi	a5,a5,1
2040452c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20404530:	fe842703          	lw	a4,-24(s0)
20404534:	fe042783          	lw	a5,-32(s0)
20404538:	f8f74de3          	blt	a4,a5,204044d2 <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
2040453c:	4581                	li	a1,0
2040453e:	fcc42503          	lw	a0,-52(s0)
20404542:	cffff0ef          	jal	ra,20404240 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20404546:	fdc42783          	lw	a5,-36(s0)
2040454a:	439c                	lw	a5,0(a5)
2040454c:	4fdc                	lw	a5,28(a5)
2040454e:	fe442683          	lw	a3,-28(s0)
20404552:	4601                	li	a2,0
20404554:	fd842583          	lw	a1,-40(s0)
20404558:	fdc42503          	lw	a0,-36(s0)
2040455c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
2040455e:	fdc42783          	lw	a5,-36(s0)
20404562:	439c                	lw	a5,0(a5)
20404564:	4fd8                	lw	a4,28(a5)
20404566:	fe442683          	lw	a3,-28(s0)
2040456a:	204047b7          	lui	a5,0x20404
2040456e:	3de78613          	addi	a2,a5,990 # 204043de <__metal_plic0_handler>
20404572:	fd842583          	lw	a1,-40(s0)
20404576:	fdc42503          	lw	a0,-36(s0)
2040457a:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
2040457c:	fdc42783          	lw	a5,-36(s0)
20404580:	439c                	lw	a5,0(a5)
20404582:	53dc                	lw	a5,36(a5)
20404584:	fd842583          	lw	a1,-40(s0)
20404588:	fdc42503          	lw	a0,-36(s0)
2040458c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040458e:	fec42783          	lw	a5,-20(s0)
20404592:	0785                	addi	a5,a5,1
20404594:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404598:	fec42783          	lw	a5,-20(s0)
2040459c:	eef05be3          	blez	a5,20404492 <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
204045a0:	fe442783          	lw	a5,-28(s0)
204045a4:	4705                	li	a4,1
204045a6:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
204045a8:	0001                	nop
204045aa:	50f2                	lw	ra,60(sp)
204045ac:	5462                	lw	s0,56(sp)
204045ae:	6121                	addi	sp,sp,64
204045b0:	8082                	ret

204045b2 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
204045b2:	7179                	addi	sp,sp,-48
204045b4:	d606                	sw	ra,44(sp)
204045b6:	d422                	sw	s0,40(sp)
204045b8:	1800                	addi	s0,sp,48
204045ba:	fca42e23          	sw	a0,-36(s0)
204045be:	fcb42c23          	sw	a1,-40(s0)
204045c2:	fcc42a23          	sw	a2,-44(s0)
204045c6:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204045ca:	fdc42783          	lw	a5,-36(s0)
204045ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204045d2:	fdc42503          	lw	a0,-36(s0)
204045d6:	b6bff0ef          	jal	ra,20404140 <__metal_driver_sifive_plic0_num_interrupts>
204045da:	872a                	mv	a4,a0
204045dc:	fd842783          	lw	a5,-40(s0)
204045e0:	00e7c463          	blt	a5,a4,204045e8 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
204045e4:	57fd                	li	a5,-1
204045e6:	a051                	j	2040466a <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
204045e8:	fd442783          	lw	a5,-44(s0)
204045ec:	cf9d                	beqz	a5,2040462a <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
204045ee:	4609                	li	a2,2
204045f0:	fd842583          	lw	a1,-40(s0)
204045f4:	fdc42503          	lw	a0,-36(s0)
204045f8:	cadff0ef          	jal	ra,204042a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
204045fc:	fec42703          	lw	a4,-20(s0)
20404600:	fd842783          	lw	a5,-40(s0)
20404604:	078a                	slli	a5,a5,0x2
20404606:	97ba                	add	a5,a5,a4
20404608:	fd442703          	lw	a4,-44(s0)
2040460c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
2040460e:	fec42683          	lw	a3,-20(s0)
20404612:	fd842703          	lw	a4,-40(s0)
20404616:	87ba                	mv	a5,a4
20404618:	0786                	slli	a5,a5,0x1
2040461a:	97ba                	add	a5,a5,a4
2040461c:	078e                	slli	a5,a5,0x3
2040461e:	97b6                	add	a5,a5,a3
20404620:	fd042703          	lw	a4,-48(s0)
20404624:	08e7a423          	sw	a4,136(a5)
20404628:	a081                	j	20404668 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
2040462a:	4605                	li	a2,1
2040462c:	fd842583          	lw	a1,-40(s0)
20404630:	fdc42503          	lw	a0,-36(s0)
20404634:	c71ff0ef          	jal	ra,204042a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20404638:	fec42703          	lw	a4,-20(s0)
2040463c:	fd842783          	lw	a5,-40(s0)
20404640:	078a                	slli	a5,a5,0x2
20404642:	97ba                	add	a5,a5,a4
20404644:	20404737          	lui	a4,0x20404
20404648:	3c670713          	addi	a4,a4,966 # 204043c6 <__metal_plic0_default_handler>
2040464c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
2040464e:	fec42683          	lw	a3,-20(s0)
20404652:	fd842703          	lw	a4,-40(s0)
20404656:	87ba                	mv	a5,a4
20404658:	0786                	slli	a5,a5,0x1
2040465a:	97ba                	add	a5,a5,a4
2040465c:	078e                	slli	a5,a5,0x3
2040465e:	97b6                	add	a5,a5,a3
20404660:	fd042703          	lw	a4,-48(s0)
20404664:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20404668:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
2040466a:	853e                	mv	a0,a5
2040466c:	50b2                	lw	ra,44(sp)
2040466e:	5422                	lw	s0,40(sp)
20404670:	6145                	addi	sp,sp,48
20404672:	8082                	ret

20404674 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20404674:	7179                	addi	sp,sp,-48
20404676:	d606                	sw	ra,44(sp)
20404678:	d422                	sw	s0,40(sp)
2040467a:	1800                	addi	s0,sp,48
2040467c:	fca42e23          	sw	a0,-36(s0)
20404680:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404684:	fdc42783          	lw	a5,-36(s0)
20404688:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2040468c:	fdc42503          	lw	a0,-36(s0)
20404690:	ab1ff0ef          	jal	ra,20404140 <__metal_driver_sifive_plic0_num_interrupts>
20404694:	872a                	mv	a4,a0
20404696:	fd842783          	lw	a5,-40(s0)
2040469a:	00e7c463          	blt	a5,a4,204046a2 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040469e:	57fd                	li	a5,-1
204046a0:	a809                	j	204046b2 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
204046a2:	4605                	li	a2,1
204046a4:	fd842583          	lw	a1,-40(s0)
204046a8:	fec42503          	lw	a0,-20(s0)
204046ac:	c8fff0ef          	jal	ra,2040433a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
204046b0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
204046b2:	853e                	mv	a0,a5
204046b4:	50b2                	lw	ra,44(sp)
204046b6:	5422                	lw	s0,40(sp)
204046b8:	6145                	addi	sp,sp,48
204046ba:	8082                	ret

204046bc <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
204046bc:	7179                	addi	sp,sp,-48
204046be:	d606                	sw	ra,44(sp)
204046c0:	d422                	sw	s0,40(sp)
204046c2:	1800                	addi	s0,sp,48
204046c4:	fca42e23          	sw	a0,-36(s0)
204046c8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204046cc:	fdc42783          	lw	a5,-36(s0)
204046d0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204046d4:	fdc42503          	lw	a0,-36(s0)
204046d8:	a69ff0ef          	jal	ra,20404140 <__metal_driver_sifive_plic0_num_interrupts>
204046dc:	872a                	mv	a4,a0
204046de:	fd842783          	lw	a5,-40(s0)
204046e2:	00e7c463          	blt	a5,a4,204046ea <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
204046e6:	57fd                	li	a5,-1
204046e8:	a809                	j	204046fa <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
204046ea:	4601                	li	a2,0
204046ec:	fd842583          	lw	a1,-40(s0)
204046f0:	fec42503          	lw	a0,-20(s0)
204046f4:	c47ff0ef          	jal	ra,2040433a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
204046f8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
204046fa:	853e                	mv	a0,a5
204046fc:	50b2                	lw	ra,44(sp)
204046fe:	5422                	lw	s0,40(sp)
20404700:	6145                	addi	sp,sp,48
20404702:	8082                	ret

20404704 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404704:	1101                	addi	sp,sp,-32
20404706:	ce22                	sw	s0,28(sp)
20404708:	1000                	addi	s0,sp,32
2040470a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040470e:	fec42703          	lw	a4,-20(s0)
20404712:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404716:	00f71563          	bne	a4,a5,20404720 <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
2040471a:	100127b7          	lui	a5,0x10012
2040471e:	a011                	j	20404722 <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
20404720:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
20404722:	853e                	mv	a0,a5
20404724:	4472                	lw	s0,28(sp)
20404726:	6105                	addi	sp,sp,32
20404728:	8082                	ret

2040472a <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
2040472a:	1101                	addi	sp,sp,-32
2040472c:	ce22                	sw	s0,28(sp)
2040472e:	1000                	addi	s0,sp,32
20404730:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404734:	fec42703          	lw	a4,-20(s0)
20404738:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040473c:	00f71763          	bne	a4,a5,2040474a <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404740:	800017b7          	lui	a5,0x80001
20404744:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe030>
20404748:	a011                	j	2040474c <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
2040474a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
2040474c:	853e                	mv	a0,a5
2040474e:	4472                	lw	s0,28(sp)
20404750:	6105                	addi	sp,sp,32
20404752:	8082                	ret

20404754 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
20404754:	1101                	addi	sp,sp,-32
20404756:	ce22                	sw	s0,28(sp)
20404758:	1000                	addi	s0,sp,32
2040475a:	fea42623          	sw	a0,-20(s0)
2040475e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20404762:	fec42703          	lw	a4,-20(s0)
20404766:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040476a:	00f71763          	bne	a4,a5,20404778 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
2040476e:	fe842783          	lw	a5,-24(s0)
20404772:	e399                	bnez	a5,20404778 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
20404774:	479d                	li	a5,7
20404776:	a269                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20404778:	fec42703          	lw	a4,-20(s0)
2040477c:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404780:	00f71963          	bne	a4,a5,20404792 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
20404784:	fe842703          	lw	a4,-24(s0)
20404788:	4785                	li	a5,1
2040478a:	00f71463          	bne	a4,a5,20404792 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
2040478e:	47a1                	li	a5,8
20404790:	aa85                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404792:	fec42703          	lw	a4,-20(s0)
20404796:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040479a:	00f71963          	bne	a4,a5,204047ac <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
2040479e:	fe842703          	lw	a4,-24(s0)
204047a2:	4789                	li	a5,2
204047a4:	00f71463          	bne	a4,a5,204047ac <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
204047a8:	47a5                	li	a5,9
204047aa:	aa99                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
204047ac:	fec42703          	lw	a4,-20(s0)
204047b0:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204047b4:	00f71963          	bne	a4,a5,204047c6 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
204047b8:	fe842703          	lw	a4,-24(s0)
204047bc:	478d                	li	a5,3
204047be:	00f71463          	bne	a4,a5,204047c6 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
204047c2:	47a9                	li	a5,10
204047c4:	aa35                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
204047c6:	fec42703          	lw	a4,-20(s0)
204047ca:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204047ce:	00f71963          	bne	a4,a5,204047e0 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
204047d2:	fe842703          	lw	a4,-24(s0)
204047d6:	4791                	li	a5,4
204047d8:	00f71463          	bne	a4,a5,204047e0 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
204047dc:	47ad                	li	a5,11
204047de:	a20d                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
204047e0:	fec42703          	lw	a4,-20(s0)
204047e4:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204047e8:	00f71963          	bne	a4,a5,204047fa <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
204047ec:	fe842703          	lw	a4,-24(s0)
204047f0:	4795                	li	a5,5
204047f2:	00f71463          	bne	a4,a5,204047fa <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
204047f6:	47b1                	li	a5,12
204047f8:	a221                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
204047fa:	fec42703          	lw	a4,-20(s0)
204047fe:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404802:	00f71963          	bne	a4,a5,20404814 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
20404806:	fe842703          	lw	a4,-24(s0)
2040480a:	4799                	li	a5,6
2040480c:	00f71463          	bne	a4,a5,20404814 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
20404810:	47b5                	li	a5,13
20404812:	a0fd                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404814:	fec42703          	lw	a4,-20(s0)
20404818:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040481c:	00f71963          	bne	a4,a5,2040482e <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
20404820:	fe842703          	lw	a4,-24(s0)
20404824:	479d                	li	a5,7
20404826:	00f71463          	bne	a4,a5,2040482e <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
2040482a:	47b9                	li	a5,14
2040482c:	a8d1                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
2040482e:	fec42703          	lw	a4,-20(s0)
20404832:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404836:	00f71963          	bne	a4,a5,20404848 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
2040483a:	fe842703          	lw	a4,-24(s0)
2040483e:	47a1                	li	a5,8
20404840:	00f71463          	bne	a4,a5,20404848 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
20404844:	47bd                	li	a5,15
20404846:	a86d                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20404848:	fec42703          	lw	a4,-20(s0)
2040484c:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404850:	00f71963          	bne	a4,a5,20404862 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
20404854:	fe842703          	lw	a4,-24(s0)
20404858:	47a5                	li	a5,9
2040485a:	00f71463          	bne	a4,a5,20404862 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
2040485e:	47c1                	li	a5,16
20404860:	a045                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20404862:	fec42703          	lw	a4,-20(s0)
20404866:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040486a:	00f71963          	bne	a4,a5,2040487c <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
2040486e:	fe842703          	lw	a4,-24(s0)
20404872:	47a9                	li	a5,10
20404874:	00f71463          	bne	a4,a5,2040487c <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
20404878:	47c5                	li	a5,17
2040487a:	a059                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
2040487c:	fec42703          	lw	a4,-20(s0)
20404880:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404884:	00f71963          	bne	a4,a5,20404896 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
20404888:	fe842703          	lw	a4,-24(s0)
2040488c:	47ad                	li	a5,11
2040488e:	00f71463          	bne	a4,a5,20404896 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
20404892:	47c9                	li	a5,18
20404894:	a0b5                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404896:	fec42703          	lw	a4,-20(s0)
2040489a:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040489e:	00f71963          	bne	a4,a5,204048b0 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
204048a2:	fe842703          	lw	a4,-24(s0)
204048a6:	47b1                	li	a5,12
204048a8:	00f71463          	bne	a4,a5,204048b0 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
204048ac:	47cd                	li	a5,19
204048ae:	a889                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
204048b0:	fec42703          	lw	a4,-20(s0)
204048b4:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204048b8:	00f71963          	bne	a4,a5,204048ca <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
204048bc:	fe842703          	lw	a4,-24(s0)
204048c0:	47b5                	li	a5,13
204048c2:	00f71463          	bne	a4,a5,204048ca <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
204048c6:	47d1                	li	a5,20
204048c8:	a825                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
204048ca:	fec42703          	lw	a4,-20(s0)
204048ce:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204048d2:	00f71963          	bne	a4,a5,204048e4 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
204048d6:	fe842703          	lw	a4,-24(s0)
204048da:	47b9                	li	a5,14
204048dc:	00f71463          	bne	a4,a5,204048e4 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
204048e0:	47d5                	li	a5,21
204048e2:	a839                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
204048e4:	fec42703          	lw	a4,-20(s0)
204048e8:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204048ec:	00f71963          	bne	a4,a5,204048fe <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
204048f0:	fe842703          	lw	a4,-24(s0)
204048f4:	47bd                	li	a5,15
204048f6:	00f71463          	bne	a4,a5,204048fe <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
204048fa:	47d9                	li	a5,22
204048fc:	a011                	j	20404900 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
204048fe:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
20404900:	853e                	mv	a0,a5
20404902:	4472                	lw	s0,28(sp)
20404904:	6105                	addi	sp,sp,32
20404906:	8082                	ret

20404908 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404908:	7179                	addi	sp,sp,-48
2040490a:	d606                	sw	ra,44(sp)
2040490c:	d422                	sw	s0,40(sp)
2040490e:	1800                	addi	s0,sp,48
20404910:	fca42e23          	sw	a0,-36(s0)
20404914:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404918:	fdc42503          	lw	a0,-36(s0)
2040491c:	de9ff0ef          	jal	ra,20404704 <__metal_driver_sifive_gpio0_base>
20404920:	87aa                	mv	a5,a0
20404922:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20404926:	fec42783          	lw	a5,-20(s0)
2040492a:	0791                	addi	a5,a5,4
2040492c:	4398                	lw	a4,0(a5)
2040492e:	fd842783          	lw	a5,-40(s0)
20404932:	fec42683          	lw	a3,-20(s0)
20404936:	0691                	addi	a3,a3,4
20404938:	8fd9                	or	a5,a5,a4
2040493a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
2040493c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
2040493e:	853e                	mv	a0,a5
20404940:	50b2                	lw	ra,44(sp)
20404942:	5422                	lw	s0,40(sp)
20404944:	6145                	addi	sp,sp,48
20404946:	8082                	ret

20404948 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20404948:	7179                	addi	sp,sp,-48
2040494a:	d606                	sw	ra,44(sp)
2040494c:	d422                	sw	s0,40(sp)
2040494e:	1800                	addi	s0,sp,48
20404950:	fca42e23          	sw	a0,-36(s0)
20404954:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404958:	fdc42503          	lw	a0,-36(s0)
2040495c:	da9ff0ef          	jal	ra,20404704 <__metal_driver_sifive_gpio0_base>
20404960:	87aa                	mv	a5,a0
20404962:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
20404966:	fec42783          	lw	a5,-20(s0)
2040496a:	0791                	addi	a5,a5,4
2040496c:	439c                	lw	a5,0(a5)
2040496e:	fd842703          	lw	a4,-40(s0)
20404972:	fff74713          	not	a4,a4
20404976:	86ba                	mv	a3,a4
20404978:	fec42703          	lw	a4,-20(s0)
2040497c:	0711                	addi	a4,a4,4
2040497e:	8ff5                	and	a5,a5,a3
20404980:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
20404982:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
20404984:	853e                	mv	a0,a5
20404986:	50b2                	lw	ra,44(sp)
20404988:	5422                	lw	s0,40(sp)
2040498a:	6145                	addi	sp,sp,48
2040498c:	8082                	ret

2040498e <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
2040498e:	7179                	addi	sp,sp,-48
20404990:	d606                	sw	ra,44(sp)
20404992:	d422                	sw	s0,40(sp)
20404994:	1800                	addi	s0,sp,48
20404996:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040499a:	fdc42503          	lw	a0,-36(s0)
2040499e:	d67ff0ef          	jal	ra,20404704 <__metal_driver_sifive_gpio0_base>
204049a2:	87aa                	mv	a5,a0
204049a4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
204049a8:	fec42783          	lw	a5,-20(s0)
204049ac:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
204049ae:	853e                	mv	a0,a5
204049b0:	50b2                	lw	ra,44(sp)
204049b2:	5422                	lw	s0,40(sp)
204049b4:	6145                	addi	sp,sp,48
204049b6:	8082                	ret

204049b8 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
204049b8:	7179                	addi	sp,sp,-48
204049ba:	d606                	sw	ra,44(sp)
204049bc:	d422                	sw	s0,40(sp)
204049be:	1800                	addi	s0,sp,48
204049c0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204049c4:	fdc42503          	lw	a0,-36(s0)
204049c8:	d3dff0ef          	jal	ra,20404704 <__metal_driver_sifive_gpio0_base>
204049cc:	87aa                	mv	a5,a0
204049ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
204049d2:	fec42783          	lw	a5,-20(s0)
204049d6:	07b1                	addi	a5,a5,12
204049d8:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
204049da:	853e                	mv	a0,a5
204049dc:	50b2                	lw	ra,44(sp)
204049de:	5422                	lw	s0,40(sp)
204049e0:	6145                	addi	sp,sp,48
204049e2:	8082                	ret

204049e4 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
204049e4:	7179                	addi	sp,sp,-48
204049e6:	d606                	sw	ra,44(sp)
204049e8:	d422                	sw	s0,40(sp)
204049ea:	1800                	addi	s0,sp,48
204049ec:	fca42e23          	sw	a0,-36(s0)
204049f0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204049f4:	fdc42503          	lw	a0,-36(s0)
204049f8:	d0dff0ef          	jal	ra,20404704 <__metal_driver_sifive_gpio0_base>
204049fc:	87aa                	mv	a5,a0
204049fe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20404a02:	fec42783          	lw	a5,-20(s0)
20404a06:	07a1                	addi	a5,a5,8
20404a08:	439c                	lw	a5,0(a5)
20404a0a:	fd842703          	lw	a4,-40(s0)
20404a0e:	fff74713          	not	a4,a4
20404a12:	86ba                	mv	a3,a4
20404a14:	fec42703          	lw	a4,-20(s0)
20404a18:	0721                	addi	a4,a4,8
20404a1a:	8ff5                	and	a5,a5,a3
20404a1c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404a1e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404a20:	853e                	mv	a0,a5
20404a22:	50b2                	lw	ra,44(sp)
20404a24:	5422                	lw	s0,40(sp)
20404a26:	6145                	addi	sp,sp,48
20404a28:	8082                	ret

20404a2a <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20404a2a:	7179                	addi	sp,sp,-48
20404a2c:	d606                	sw	ra,44(sp)
20404a2e:	d422                	sw	s0,40(sp)
20404a30:	1800                	addi	s0,sp,48
20404a32:	fca42e23          	sw	a0,-36(s0)
20404a36:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a3a:	fdc42503          	lw	a0,-36(s0)
20404a3e:	cc7ff0ef          	jal	ra,20404704 <__metal_driver_sifive_gpio0_base>
20404a42:	87aa                	mv	a5,a0
20404a44:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
20404a48:	fec42783          	lw	a5,-20(s0)
20404a4c:	07a1                	addi	a5,a5,8
20404a4e:	4398                	lw	a4,0(a5)
20404a50:	fd842783          	lw	a5,-40(s0)
20404a54:	fec42683          	lw	a3,-20(s0)
20404a58:	06a1                	addi	a3,a3,8
20404a5a:	8fd9                	or	a5,a5,a4
20404a5c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
20404a5e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20404a60:	853e                	mv	a0,a5
20404a62:	50b2                	lw	ra,44(sp)
20404a64:	5422                	lw	s0,40(sp)
20404a66:	6145                	addi	sp,sp,48
20404a68:	8082                	ret

20404a6a <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20404a6a:	7179                	addi	sp,sp,-48
20404a6c:	d606                	sw	ra,44(sp)
20404a6e:	d422                	sw	s0,40(sp)
20404a70:	1800                	addi	s0,sp,48
20404a72:	fca42e23          	sw	a0,-36(s0)
20404a76:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a7a:	fdc42503          	lw	a0,-36(s0)
20404a7e:	c87ff0ef          	jal	ra,20404704 <__metal_driver_sifive_gpio0_base>
20404a82:	87aa                	mv	a5,a0
20404a84:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20404a88:	fec42783          	lw	a5,-20(s0)
20404a8c:	07b1                	addi	a5,a5,12
20404a8e:	4398                	lw	a4,0(a5)
20404a90:	fd842783          	lw	a5,-40(s0)
20404a94:	fec42683          	lw	a3,-20(s0)
20404a98:	06b1                	addi	a3,a3,12
20404a9a:	8fd9                	or	a5,a5,a4
20404a9c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20404a9e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404aa0:	853e                	mv	a0,a5
20404aa2:	50b2                	lw	ra,44(sp)
20404aa4:	5422                	lw	s0,40(sp)
20404aa6:	6145                	addi	sp,sp,48
20404aa8:	8082                	ret

20404aaa <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20404aaa:	7179                	addi	sp,sp,-48
20404aac:	d606                	sw	ra,44(sp)
20404aae:	d422                	sw	s0,40(sp)
20404ab0:	1800                	addi	s0,sp,48
20404ab2:	fca42e23          	sw	a0,-36(s0)
20404ab6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404aba:	fdc42503          	lw	a0,-36(s0)
20404abe:	c47ff0ef          	jal	ra,20404704 <__metal_driver_sifive_gpio0_base>
20404ac2:	87aa                	mv	a5,a0
20404ac4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
20404ac8:	fec42783          	lw	a5,-20(s0)
20404acc:	07b1                	addi	a5,a5,12
20404ace:	439c                	lw	a5,0(a5)
20404ad0:	fd842703          	lw	a4,-40(s0)
20404ad4:	fff74713          	not	a4,a4
20404ad8:	86ba                	mv	a3,a4
20404ada:	fec42703          	lw	a4,-20(s0)
20404ade:	0731                	addi	a4,a4,12
20404ae0:	8ff5                	and	a5,a5,a3
20404ae2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
20404ae4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
20404ae6:	853e                	mv	a0,a5
20404ae8:	50b2                	lw	ra,44(sp)
20404aea:	5422                	lw	s0,40(sp)
20404aec:	6145                	addi	sp,sp,48
20404aee:	8082                	ret

20404af0 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20404af0:	7179                	addi	sp,sp,-48
20404af2:	d606                	sw	ra,44(sp)
20404af4:	d422                	sw	s0,40(sp)
20404af6:	1800                	addi	s0,sp,48
20404af8:	fca42e23          	sw	a0,-36(s0)
20404afc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404b00:	fdc42503          	lw	a0,-36(s0)
20404b04:	c01ff0ef          	jal	ra,20404704 <__metal_driver_sifive_gpio0_base>
20404b08:	87aa                	mv	a5,a0
20404b0a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404b0e:	fec42783          	lw	a5,-20(s0)
20404b12:	07b1                	addi	a5,a5,12
20404b14:	4398                	lw	a4,0(a5)
20404b16:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404b1a:	fec42683          	lw	a3,-20(s0)
20404b1e:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404b20:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404b22:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20404b24:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
20404b26:	853e                	mv	a0,a5
20404b28:	50b2                	lw	ra,44(sp)
20404b2a:	5422                	lw	s0,40(sp)
20404b2c:	6145                	addi	sp,sp,48
20404b2e:	8082                	ret

20404b30 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20404b30:	7179                	addi	sp,sp,-48
20404b32:	d606                	sw	ra,44(sp)
20404b34:	d422                	sw	s0,40(sp)
20404b36:	1800                	addi	s0,sp,48
20404b38:	fca42e23          	sw	a0,-36(s0)
20404b3c:	fcb42c23          	sw	a1,-40(s0)
20404b40:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404b44:	fdc42503          	lw	a0,-36(s0)
20404b48:	bbdff0ef          	jal	ra,20404704 <__metal_driver_sifive_gpio0_base>
20404b4c:	87aa                	mv	a5,a0
20404b4e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20404b52:	fec42783          	lw	a5,-20(s0)
20404b56:	03c78793          	addi	a5,a5,60
20404b5a:	439c                	lw	a5,0(a5)
20404b5c:	fd842703          	lw	a4,-40(s0)
20404b60:	fff74713          	not	a4,a4
20404b64:	86ba                	mv	a3,a4
20404b66:	fec42703          	lw	a4,-20(s0)
20404b6a:	03c70713          	addi	a4,a4,60
20404b6e:	8ff5                	and	a5,a5,a3
20404b70:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
20404b72:	fec42783          	lw	a5,-20(s0)
20404b76:	03878793          	addi	a5,a5,56
20404b7a:	4398                	lw	a4,0(a5)
20404b7c:	fd442783          	lw	a5,-44(s0)
20404b80:	fec42683          	lw	a3,-20(s0)
20404b84:	03868693          	addi	a3,a3,56
20404b88:	8fd9                	or	a5,a5,a4
20404b8a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20404b8c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20404b8e:	853e                	mv	a0,a5
20404b90:	50b2                	lw	ra,44(sp)
20404b92:	5422                	lw	s0,40(sp)
20404b94:	6145                	addi	sp,sp,48
20404b96:	8082                	ret

20404b98 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20404b98:	7179                	addi	sp,sp,-48
20404b9a:	d606                	sw	ra,44(sp)
20404b9c:	d422                	sw	s0,40(sp)
20404b9e:	1800                	addi	s0,sp,48
20404ba0:	fca42e23          	sw	a0,-36(s0)
20404ba4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404ba8:	fdc42503          	lw	a0,-36(s0)
20404bac:	b59ff0ef          	jal	ra,20404704 <__metal_driver_sifive_gpio0_base>
20404bb0:	87aa                	mv	a5,a0
20404bb2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
20404bb6:	fec42783          	lw	a5,-20(s0)
20404bba:	03878793          	addi	a5,a5,56
20404bbe:	439c                	lw	a5,0(a5)
20404bc0:	fd842703          	lw	a4,-40(s0)
20404bc4:	fff74713          	not	a4,a4
20404bc8:	86ba                	mv	a3,a4
20404bca:	fec42703          	lw	a4,-20(s0)
20404bce:	03870713          	addi	a4,a4,56
20404bd2:	8ff5                	and	a5,a5,a3
20404bd4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
20404bd6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20404bd8:	853e                	mv	a0,a5
20404bda:	50b2                	lw	ra,44(sp)
20404bdc:	5422                	lw	s0,40(sp)
20404bde:	6145                	addi	sp,sp,48
20404be0:	8082                	ret

20404be2 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404be2:	7179                	addi	sp,sp,-48
20404be4:	d606                	sw	ra,44(sp)
20404be6:	d422                	sw	s0,40(sp)
20404be8:	1800                	addi	s0,sp,48
20404bea:	fca42e23          	sw	a0,-36(s0)
20404bee:	fcb42c23          	sw	a1,-40(s0)
20404bf2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404bf6:	fdc42503          	lw	a0,-36(s0)
20404bfa:	b0bff0ef          	jal	ra,20404704 <__metal_driver_sifive_gpio0_base>
20404bfe:	87aa                	mv	a5,a0
20404c00:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20404c04:	fd442703          	lw	a4,-44(s0)
20404c08:	479d                	li	a5,7
20404c0a:	1ce7e963          	bltu	a5,a4,20404ddc <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404c0e:	fd442783          	lw	a5,-44(s0)
20404c12:	00279713          	slli	a4,a5,0x2
20404c16:	204067b7          	lui	a5,0x20406
20404c1a:	c3078793          	addi	a5,a5,-976 # 20405c30 <__metal_driver_vtable_riscv_plic0+0x4c>
20404c1e:	97ba                	add	a5,a5,a4
20404c20:	439c                	lw	a5,0(a5)
20404c22:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20404c24:	fec42783          	lw	a5,-20(s0)
20404c28:	07e1                	addi	a5,a5,24
20404c2a:	439c                	lw	a5,0(a5)
20404c2c:	fd842703          	lw	a4,-40(s0)
20404c30:	fff74713          	not	a4,a4
20404c34:	86ba                	mv	a3,a4
20404c36:	fec42703          	lw	a4,-20(s0)
20404c3a:	0761                	addi	a4,a4,24
20404c3c:	8ff5                	and	a5,a5,a3
20404c3e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20404c40:	fec42783          	lw	a5,-20(s0)
20404c44:	02078793          	addi	a5,a5,32
20404c48:	439c                	lw	a5,0(a5)
20404c4a:	fd842703          	lw	a4,-40(s0)
20404c4e:	fff74713          	not	a4,a4
20404c52:	86ba                	mv	a3,a4
20404c54:	fec42703          	lw	a4,-20(s0)
20404c58:	02070713          	addi	a4,a4,32
20404c5c:	8ff5                	and	a5,a5,a3
20404c5e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20404c60:	fec42783          	lw	a5,-20(s0)
20404c64:	02878793          	addi	a5,a5,40
20404c68:	439c                	lw	a5,0(a5)
20404c6a:	fd842703          	lw	a4,-40(s0)
20404c6e:	fff74713          	not	a4,a4
20404c72:	86ba                	mv	a3,a4
20404c74:	fec42703          	lw	a4,-20(s0)
20404c78:	02870713          	addi	a4,a4,40
20404c7c:	8ff5                	and	a5,a5,a3
20404c7e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20404c80:	fec42783          	lw	a5,-20(s0)
20404c84:	03078793          	addi	a5,a5,48
20404c88:	439c                	lw	a5,0(a5)
20404c8a:	fd842703          	lw	a4,-40(s0)
20404c8e:	fff74713          	not	a4,a4
20404c92:	86ba                	mv	a3,a4
20404c94:	fec42703          	lw	a4,-20(s0)
20404c98:	03070713          	addi	a4,a4,48
20404c9c:	8ff5                	and	a5,a5,a3
20404c9e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404ca0:	aa35                	j	20404ddc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404ca2:	fec42783          	lw	a5,-20(s0)
20404ca6:	07e1                	addi	a5,a5,24
20404ca8:	4398                	lw	a4,0(a5)
20404caa:	fd842783          	lw	a5,-40(s0)
20404cae:	fec42683          	lw	a3,-20(s0)
20404cb2:	06e1                	addi	a3,a3,24
20404cb4:	8fd9                	or	a5,a5,a4
20404cb6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20404cb8:	a215                	j	20404ddc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404cba:	fec42783          	lw	a5,-20(s0)
20404cbe:	02078793          	addi	a5,a5,32
20404cc2:	4398                	lw	a4,0(a5)
20404cc4:	fd842783          	lw	a5,-40(s0)
20404cc8:	fec42683          	lw	a3,-20(s0)
20404ccc:	02068693          	addi	a3,a3,32
20404cd0:	8fd9                	or	a5,a5,a4
20404cd2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20404cd4:	a221                	j	20404ddc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404cd6:	fec42783          	lw	a5,-20(s0)
20404cda:	07e1                	addi	a5,a5,24
20404cdc:	4398                	lw	a4,0(a5)
20404cde:	fd842783          	lw	a5,-40(s0)
20404ce2:	fec42683          	lw	a3,-20(s0)
20404ce6:	06e1                	addi	a3,a3,24
20404ce8:	8fd9                	or	a5,a5,a4
20404cea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404cec:	fec42783          	lw	a5,-20(s0)
20404cf0:	02078793          	addi	a5,a5,32
20404cf4:	4398                	lw	a4,0(a5)
20404cf6:	fd842783          	lw	a5,-40(s0)
20404cfa:	fec42683          	lw	a3,-20(s0)
20404cfe:	02068693          	addi	a3,a3,32
20404d02:	8fd9                	or	a5,a5,a4
20404d04:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20404d06:	a8d9                	j	20404ddc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404d08:	fec42783          	lw	a5,-20(s0)
20404d0c:	02878793          	addi	a5,a5,40
20404d10:	4398                	lw	a4,0(a5)
20404d12:	fd842783          	lw	a5,-40(s0)
20404d16:	fec42683          	lw	a3,-20(s0)
20404d1a:	02868693          	addi	a3,a3,40
20404d1e:	8fd9                	or	a5,a5,a4
20404d20:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20404d22:	a86d                	j	20404ddc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404d24:	fec42783          	lw	a5,-20(s0)
20404d28:	03078793          	addi	a5,a5,48
20404d2c:	4398                	lw	a4,0(a5)
20404d2e:	fd842783          	lw	a5,-40(s0)
20404d32:	fec42683          	lw	a3,-20(s0)
20404d36:	03068693          	addi	a3,a3,48
20404d3a:	8fd9                	or	a5,a5,a4
20404d3c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20404d3e:	a879                	j	20404ddc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404d40:	fec42783          	lw	a5,-20(s0)
20404d44:	02878793          	addi	a5,a5,40
20404d48:	4398                	lw	a4,0(a5)
20404d4a:	fd842783          	lw	a5,-40(s0)
20404d4e:	fec42683          	lw	a3,-20(s0)
20404d52:	02868693          	addi	a3,a3,40
20404d56:	8fd9                	or	a5,a5,a4
20404d58:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404d5a:	fec42783          	lw	a5,-20(s0)
20404d5e:	03078793          	addi	a5,a5,48
20404d62:	4398                	lw	a4,0(a5)
20404d64:	fd842783          	lw	a5,-40(s0)
20404d68:	fec42683          	lw	a3,-20(s0)
20404d6c:	03068693          	addi	a3,a3,48
20404d70:	8fd9                	or	a5,a5,a4
20404d72:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20404d74:	a0a5                	j	20404ddc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404d76:	fec42783          	lw	a5,-20(s0)
20404d7a:	07e1                	addi	a5,a5,24
20404d7c:	4398                	lw	a4,0(a5)
20404d7e:	fd842783          	lw	a5,-40(s0)
20404d82:	fec42683          	lw	a3,-20(s0)
20404d86:	06e1                	addi	a3,a3,24
20404d88:	8fd9                	or	a5,a5,a4
20404d8a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404d8c:	fec42783          	lw	a5,-20(s0)
20404d90:	02078793          	addi	a5,a5,32
20404d94:	4398                	lw	a4,0(a5)
20404d96:	fd842783          	lw	a5,-40(s0)
20404d9a:	fec42683          	lw	a3,-20(s0)
20404d9e:	02068693          	addi	a3,a3,32
20404da2:	8fd9                	or	a5,a5,a4
20404da4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404da6:	fec42783          	lw	a5,-20(s0)
20404daa:	02878793          	addi	a5,a5,40
20404dae:	4398                	lw	a4,0(a5)
20404db0:	fd842783          	lw	a5,-40(s0)
20404db4:	fec42683          	lw	a3,-20(s0)
20404db8:	02868693          	addi	a3,a3,40
20404dbc:	8fd9                	or	a5,a5,a4
20404dbe:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404dc0:	fec42783          	lw	a5,-20(s0)
20404dc4:	03078793          	addi	a5,a5,48
20404dc8:	4398                	lw	a4,0(a5)
20404dca:	fd842783          	lw	a5,-40(s0)
20404dce:	fec42683          	lw	a3,-20(s0)
20404dd2:	03068693          	addi	a3,a3,48
20404dd6:	8fd9                	or	a5,a5,a4
20404dd8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20404dda:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20404ddc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20404dde:	853e                	mv	a0,a5
20404de0:	50b2                	lw	ra,44(sp)
20404de2:	5422                	lw	s0,40(sp)
20404de4:	6145                	addi	sp,sp,48
20404de6:	8082                	ret

20404de8 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404de8:	7179                	addi	sp,sp,-48
20404dea:	d606                	sw	ra,44(sp)
20404dec:	d422                	sw	s0,40(sp)
20404dee:	1800                	addi	s0,sp,48
20404df0:	fca42e23          	sw	a0,-36(s0)
20404df4:	fcb42c23          	sw	a1,-40(s0)
20404df8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404dfc:	fdc42503          	lw	a0,-36(s0)
20404e00:	905ff0ef          	jal	ra,20404704 <__metal_driver_sifive_gpio0_base>
20404e04:	87aa                	mv	a5,a0
20404e06:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20404e0a:	fd442703          	lw	a4,-44(s0)
20404e0e:	479d                	li	a5,7
20404e10:	14e7ea63          	bltu	a5,a4,20404f64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
20404e14:	fd442783          	lw	a5,-44(s0)
20404e18:	00279713          	slli	a4,a5,0x2
20404e1c:	204067b7          	lui	a5,0x20406
20404e20:	c5078793          	addi	a5,a5,-944 # 20405c50 <__metal_driver_vtable_riscv_plic0+0x6c>
20404e24:	97ba                	add	a5,a5,a4
20404e26:	439c                	lw	a5,0(a5)
20404e28:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404e2a:	fec42783          	lw	a5,-20(s0)
20404e2e:	07f1                	addi	a5,a5,28
20404e30:	4398                	lw	a4,0(a5)
20404e32:	fd842783          	lw	a5,-40(s0)
20404e36:	fec42683          	lw	a3,-20(s0)
20404e3a:	06f1                	addi	a3,a3,28
20404e3c:	8fd9                	or	a5,a5,a4
20404e3e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20404e40:	a215                	j	20404f64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404e42:	fec42783          	lw	a5,-20(s0)
20404e46:	02478793          	addi	a5,a5,36
20404e4a:	4398                	lw	a4,0(a5)
20404e4c:	fd842783          	lw	a5,-40(s0)
20404e50:	fec42683          	lw	a3,-20(s0)
20404e54:	02468693          	addi	a3,a3,36
20404e58:	8fd9                	or	a5,a5,a4
20404e5a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20404e5c:	a221                	j	20404f64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404e5e:	fec42783          	lw	a5,-20(s0)
20404e62:	07f1                	addi	a5,a5,28
20404e64:	4398                	lw	a4,0(a5)
20404e66:	fd842783          	lw	a5,-40(s0)
20404e6a:	fec42683          	lw	a3,-20(s0)
20404e6e:	06f1                	addi	a3,a3,28
20404e70:	8fd9                	or	a5,a5,a4
20404e72:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404e74:	fec42783          	lw	a5,-20(s0)
20404e78:	02478793          	addi	a5,a5,36
20404e7c:	4398                	lw	a4,0(a5)
20404e7e:	fd842783          	lw	a5,-40(s0)
20404e82:	fec42683          	lw	a3,-20(s0)
20404e86:	02468693          	addi	a3,a3,36
20404e8a:	8fd9                	or	a5,a5,a4
20404e8c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20404e8e:	a8d9                	j	20404f64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404e90:	fec42783          	lw	a5,-20(s0)
20404e94:	02c78793          	addi	a5,a5,44
20404e98:	4398                	lw	a4,0(a5)
20404e9a:	fd842783          	lw	a5,-40(s0)
20404e9e:	fec42683          	lw	a3,-20(s0)
20404ea2:	02c68693          	addi	a3,a3,44
20404ea6:	8fd9                	or	a5,a5,a4
20404ea8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20404eaa:	a86d                	j	20404f64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404eac:	fec42783          	lw	a5,-20(s0)
20404eb0:	03478793          	addi	a5,a5,52
20404eb4:	4398                	lw	a4,0(a5)
20404eb6:	fd842783          	lw	a5,-40(s0)
20404eba:	fec42683          	lw	a3,-20(s0)
20404ebe:	03468693          	addi	a3,a3,52
20404ec2:	8fd9                	or	a5,a5,a4
20404ec4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20404ec6:	a879                	j	20404f64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404ec8:	fec42783          	lw	a5,-20(s0)
20404ecc:	02c78793          	addi	a5,a5,44
20404ed0:	4398                	lw	a4,0(a5)
20404ed2:	fd842783          	lw	a5,-40(s0)
20404ed6:	fec42683          	lw	a3,-20(s0)
20404eda:	02c68693          	addi	a3,a3,44
20404ede:	8fd9                	or	a5,a5,a4
20404ee0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404ee2:	fec42783          	lw	a5,-20(s0)
20404ee6:	03478793          	addi	a5,a5,52
20404eea:	4398                	lw	a4,0(a5)
20404eec:	fd842783          	lw	a5,-40(s0)
20404ef0:	fec42683          	lw	a3,-20(s0)
20404ef4:	03468693          	addi	a3,a3,52
20404ef8:	8fd9                	or	a5,a5,a4
20404efa:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20404efc:	a0a5                	j	20404f64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404efe:	fec42783          	lw	a5,-20(s0)
20404f02:	07f1                	addi	a5,a5,28
20404f04:	4398                	lw	a4,0(a5)
20404f06:	fd842783          	lw	a5,-40(s0)
20404f0a:	fec42683          	lw	a3,-20(s0)
20404f0e:	06f1                	addi	a3,a3,28
20404f10:	8fd9                	or	a5,a5,a4
20404f12:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404f14:	fec42783          	lw	a5,-20(s0)
20404f18:	02478793          	addi	a5,a5,36
20404f1c:	4398                	lw	a4,0(a5)
20404f1e:	fd842783          	lw	a5,-40(s0)
20404f22:	fec42683          	lw	a3,-20(s0)
20404f26:	02468693          	addi	a3,a3,36
20404f2a:	8fd9                	or	a5,a5,a4
20404f2c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404f2e:	fec42783          	lw	a5,-20(s0)
20404f32:	02c78793          	addi	a5,a5,44
20404f36:	4398                	lw	a4,0(a5)
20404f38:	fd842783          	lw	a5,-40(s0)
20404f3c:	fec42683          	lw	a3,-20(s0)
20404f40:	02c68693          	addi	a3,a3,44
20404f44:	8fd9                	or	a5,a5,a4
20404f46:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404f48:	fec42783          	lw	a5,-20(s0)
20404f4c:	03478793          	addi	a5,a5,52
20404f50:	4398                	lw	a4,0(a5)
20404f52:	fd842783          	lw	a5,-40(s0)
20404f56:	fec42683          	lw	a3,-20(s0)
20404f5a:	03468693          	addi	a3,a3,52
20404f5e:	8fd9                	or	a5,a5,a4
20404f60:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20404f62:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20404f64:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20404f66:	853e                	mv	a0,a5
20404f68:	50b2                	lw	ra,44(sp)
20404f6a:	5422                	lw	s0,40(sp)
20404f6c:	6145                	addi	sp,sp,48
20404f6e:	8082                	ret

20404f70 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20404f70:	1101                	addi	sp,sp,-32
20404f72:	ce06                	sw	ra,28(sp)
20404f74:	cc22                	sw	s0,24(sp)
20404f76:	1000                	addi	s0,sp,32
20404f78:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20404f7c:	fec42503          	lw	a0,-20(s0)
20404f80:	faaff0ef          	jal	ra,2040472a <__metal_driver_sifive_gpio0_interrupt_parent>
20404f84:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20404f86:	853e                	mv	a0,a5
20404f88:	40f2                	lw	ra,28(sp)
20404f8a:	4462                	lw	s0,24(sp)
20404f8c:	6105                	addi	sp,sp,32
20404f8e:	8082                	ret

20404f90 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20404f90:	7179                	addi	sp,sp,-48
20404f92:	d606                	sw	ra,44(sp)
20404f94:	d422                	sw	s0,40(sp)
20404f96:	1800                	addi	s0,sp,48
20404f98:	fca42e23          	sw	a0,-36(s0)
20404f9c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404fa0:	fd842583          	lw	a1,-40(s0)
20404fa4:	fdc42503          	lw	a0,-36(s0)
20404fa8:	facff0ef          	jal	ra,20404754 <__metal_driver_sifive_gpio0_interrupt_lines>
20404fac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404fb0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20404fb4:	853e                	mv	a0,a5
20404fb6:	50b2                	lw	ra,44(sp)
20404fb8:	5422                	lw	s0,40(sp)
20404fba:	6145                	addi	sp,sp,48
20404fbc:	8082                	ret

20404fbe <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
20404fbe:	1101                	addi	sp,sp,-32
20404fc0:	ce22                	sw	s0,28(sp)
20404fc2:	1000                	addi	s0,sp,32
20404fc4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404fc8:	fec42703          	lw	a4,-20(s0)
20404fcc:	800017b7          	lui	a5,0x80001
20404fd0:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe330>
20404fd4:	00f71563          	bne	a4,a5,20404fde <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20404fd8:	100137b7          	lui	a5,0x10013
20404fdc:	a011                	j	20404fe0 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
20404fde:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
20404fe0:	853e                	mv	a0,a5
20404fe2:	4472                	lw	s0,28(sp)
20404fe4:	6105                	addi	sp,sp,32
20404fe6:	8082                	ret

20404fe8 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20404fe8:	1101                	addi	sp,sp,-32
20404fea:	ce22                	sw	s0,28(sp)
20404fec:	1000                	addi	s0,sp,32
20404fee:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404ff2:	fec42703          	lw	a4,-20(s0)
20404ff6:	800017b7          	lui	a5,0x80001
20404ffa:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe330>
20404ffe:	00f71763          	bne	a4,a5,2040500c <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20405002:	800017b7          	lui	a5,0x80001
20405006:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe030>
2040500a:	a011                	j	2040500e <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
2040500c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
2040500e:	853e                	mv	a0,a5
20405010:	4472                	lw	s0,28(sp)
20405012:	6105                	addi	sp,sp,32
20405014:	8082                	ret

20405016 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20405016:	1101                	addi	sp,sp,-32
20405018:	ce22                	sw	s0,28(sp)
2040501a:	1000                	addi	s0,sp,32
2040501c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405020:	fec42703          	lw	a4,-20(s0)
20405024:	800017b7          	lui	a5,0x80001
20405028:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe330>
2040502c:	00f71463          	bne	a4,a5,20405034 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
20405030:	4795                	li	a5,5
20405032:	a011                	j	20405036 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20405034:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
20405036:	853e                	mv	a0,a5
20405038:	4472                	lw	s0,28(sp)
2040503a:	6105                	addi	sp,sp,32
2040503c:	8082                	ret

2040503e <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
2040503e:	1101                	addi	sp,sp,-32
20405040:	ce22                	sw	s0,28(sp)
20405042:	1000                	addi	s0,sp,32
20405044:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405048:	fec42703          	lw	a4,-20(s0)
2040504c:	800017b7          	lui	a5,0x80001
20405050:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe330>
20405054:	00f71763          	bne	a4,a5,20405062 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20405058:	800017b7          	lui	a5,0x80001
2040505c:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffdc68>
20405060:	a011                	j	20405064 <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
20405062:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
20405064:	853e                	mv	a0,a5
20405066:	4472                	lw	s0,28(sp)
20405068:	6105                	addi	sp,sp,32
2040506a:	8082                	ret

2040506c <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
2040506c:	1101                	addi	sp,sp,-32
2040506e:	ce22                	sw	s0,28(sp)
20405070:	1000                	addi	s0,sp,32
20405072:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405076:	fec42703          	lw	a4,-20(s0)
2040507a:	800017b7          	lui	a5,0x80001
2040507e:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe330>
20405082:	00f71563          	bne	a4,a5,2040508c <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20405086:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040508a:	a011                	j	2040508e <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
2040508c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
2040508e:	853e                	mv	a0,a5
20405090:	4472                	lw	s0,28(sp)
20405092:	6105                	addi	sp,sp,32
20405094:	8082                	ret

20405096 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20405096:	1101                	addi	sp,sp,-32
20405098:	ce22                	sw	s0,28(sp)
2040509a:	1000                	addi	s0,sp,32
2040509c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204050a0:	fec42703          	lw	a4,-20(s0)
204050a4:	800017b7          	lui	a5,0x80001
204050a8:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe330>
204050ac:	00f71563          	bne	a4,a5,204050b6 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
204050b0:	000307b7          	lui	a5,0x30
204050b4:	a011                	j	204050b8 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
204050b6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
204050b8:	853e                	mv	a0,a5
204050ba:	4472                	lw	s0,28(sp)
204050bc:	6105                	addi	sp,sp,32
204050be:	8082                	ret

204050c0 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
204050c0:	1101                	addi	sp,sp,-32
204050c2:	ce22                	sw	s0,28(sp)
204050c4:	1000                	addi	s0,sp,32
204050c6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204050ca:	fec42703          	lw	a4,-20(s0)
204050ce:	800017b7          	lui	a5,0x80001
204050d2:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe330>
204050d6:	00f71563          	bne	a4,a5,204050e0 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
204050da:	000307b7          	lui	a5,0x30
204050de:	a011                	j	204050e2 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
204050e0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
204050e2:	853e                	mv	a0,a5
204050e4:	4472                	lw	s0,28(sp)
204050e6:	6105                	addi	sp,sp,32
204050e8:	8082                	ret

204050ea <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
204050ea:	1101                	addi	sp,sp,-32
204050ec:	ce06                	sw	ra,28(sp)
204050ee:	cc22                	sw	s0,24(sp)
204050f0:	1000                	addi	s0,sp,32
204050f2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
204050f6:	fec42503          	lw	a0,-20(s0)
204050fa:	35fd                	jal	20404fe8 <__metal_driver_sifive_uart0_interrupt_parent>
204050fc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
204050fe:	853e                	mv	a0,a5
20405100:	40f2                	lw	ra,28(sp)
20405102:	4462                	lw	s0,24(sp)
20405104:	6105                	addi	sp,sp,32
20405106:	8082                	ret

20405108 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20405108:	1101                	addi	sp,sp,-32
2040510a:	ce06                	sw	ra,28(sp)
2040510c:	cc22                	sw	s0,24(sp)
2040510e:	1000                	addi	s0,sp,32
20405110:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20405114:	fec42503          	lw	a0,-20(s0)
20405118:	3dfd                	jal	20405016 <__metal_driver_sifive_uart0_interrupt_line>
2040511a:	87aa                	mv	a5,a0
2040511c:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20405120:	853e                	mv	a0,a5
20405122:	40f2                	lw	ra,28(sp)
20405124:	4462                	lw	s0,24(sp)
20405126:	6105                	addi	sp,sp,32
20405128:	8082                	ret

2040512a <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
2040512a:	7179                	addi	sp,sp,-48
2040512c:	d606                	sw	ra,44(sp)
2040512e:	d422                	sw	s0,40(sp)
20405130:	1800                	addi	s0,sp,48
20405132:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405136:	fdc42503          	lw	a0,-36(s0)
2040513a:	3551                	jal	20404fbe <__metal_driver_sifive_uart0_control_base>
2040513c:	87aa                	mv	a5,a0
2040513e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20405142:	fec42783          	lw	a5,-20(s0)
20405146:	439c                	lw	a5,0(a5)
20405148:	fff7c793          	not	a5,a5
2040514c:	83fd                	srli	a5,a5,0x1f
2040514e:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20405152:	853e                	mv	a0,a5
20405154:	50b2                	lw	ra,44(sp)
20405156:	5422                	lw	s0,40(sp)
20405158:	6145                	addi	sp,sp,48
2040515a:	8082                	ret

2040515c <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
2040515c:	7179                	addi	sp,sp,-48
2040515e:	d606                	sw	ra,44(sp)
20405160:	d422                	sw	s0,40(sp)
20405162:	1800                	addi	s0,sp,48
20405164:	fca42e23          	sw	a0,-36(s0)
20405168:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040516c:	fdc42503          	lw	a0,-36(s0)
20405170:	e4fff0ef          	jal	ra,20404fbe <__metal_driver_sifive_uart0_control_base>
20405174:	87aa                	mv	a5,a0
20405176:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
2040517a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
2040517c:	fdc42503          	lw	a0,-36(s0)
20405180:	376d                	jal	2040512a <__metal_driver_sifive_uart0_txready>
20405182:	87aa                	mv	a5,a0
20405184:	dfe5                	beqz	a5,2040517c <__metal_driver_sifive_uart0_putc+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20405186:	fec42783          	lw	a5,-20(s0)
2040518a:	fd842703          	lw	a4,-40(s0)
2040518e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20405190:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20405192:	853e                	mv	a0,a5
20405194:	50b2                	lw	ra,44(sp)
20405196:	5422                	lw	s0,40(sp)
20405198:	6145                	addi	sp,sp,48
2040519a:	8082                	ret

2040519c <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
2040519c:	7179                	addi	sp,sp,-48
2040519e:	d606                	sw	ra,44(sp)
204051a0:	d422                	sw	s0,40(sp)
204051a2:	1800                	addi	s0,sp,48
204051a4:	fca42e23          	sw	a0,-36(s0)
204051a8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204051ac:	fdc42503          	lw	a0,-36(s0)
204051b0:	e0fff0ef          	jal	ra,20404fbe <__metal_driver_sifive_uart0_control_base>
204051b4:	87aa                	mv	a5,a0
204051b6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
204051ba:	fec42783          	lw	a5,-20(s0)
204051be:	0791                	addi	a5,a5,4
204051c0:	439c                	lw	a5,0(a5)
204051c2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
204051c6:	fe842783          	lw	a5,-24(s0)
204051ca:	0007d763          	bgez	a5,204051d8 <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
204051ce:	fd842783          	lw	a5,-40(s0)
204051d2:	577d                	li	a4,-1
204051d4:	c398                	sw	a4,0(a5)
204051d6:	a801                	j	204051e6 <__metal_driver_sifive_uart0_getc+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
204051d8:	fe842783          	lw	a5,-24(s0)
204051dc:	0ff7f713          	andi	a4,a5,255
204051e0:	fd842783          	lw	a5,-40(s0)
204051e4:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
204051e6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
204051e8:	853e                	mv	a0,a5
204051ea:	50b2                	lw	ra,44(sp)
204051ec:	5422                	lw	s0,40(sp)
204051ee:	6145                	addi	sp,sp,48
204051f0:	8082                	ret

204051f2 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
204051f2:	7179                	addi	sp,sp,-48
204051f4:	d622                	sw	s0,44(sp)
204051f6:	1800                	addi	s0,sp,48
204051f8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
204051fc:	fdc42783          	lw	a5,-36(s0)
20405200:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20405204:	fec42783          	lw	a5,-20(s0)
20405208:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
2040520a:	853e                	mv	a0,a5
2040520c:	5432                	lw	s0,44(sp)
2040520e:	6145                	addi	sp,sp,48
20405210:	8082                	ret

20405212 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20405212:	7179                	addi	sp,sp,-48
20405214:	d606                	sw	ra,44(sp)
20405216:	d422                	sw	s0,40(sp)
20405218:	1800                	addi	s0,sp,48
2040521a:	fca42e23          	sw	a0,-36(s0)
2040521e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20405222:	fdc42783          	lw	a5,-36(s0)
20405226:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
2040522a:	fdc42503          	lw	a0,-36(s0)
2040522e:	d91ff0ef          	jal	ra,20404fbe <__metal_driver_sifive_uart0_control_base>
20405232:	87aa                	mv	a5,a0
20405234:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405238:	fdc42503          	lw	a0,-36(s0)
2040523c:	e03ff0ef          	jal	ra,2040503e <__metal_driver_sifive_uart0_clock>
20405240:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20405244:	fd842703          	lw	a4,-40(s0)
20405248:	fec42783          	lw	a5,-20(s0)
2040524c:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
2040524e:	fe442783          	lw	a5,-28(s0)
20405252:	cbb1                	beqz	a5,204052a6 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20405254:	fe442783          	lw	a5,-28(s0)
20405258:	439c                	lw	a5,0(a5)
2040525a:	439c                	lw	a5,0(a5)
2040525c:	fe442503          	lw	a0,-28(s0)
20405260:	9782                	jalr	a5
20405262:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20405266:	fe042703          	lw	a4,-32(s0)
2040526a:	fd842783          	lw	a5,-40(s0)
2040526e:	02f747b3          	div	a5,a4,a5
20405272:	fff78713          	addi	a4,a5,-1
20405276:	fe842783          	lw	a5,-24(s0)
2040527a:	07e1                	addi	a5,a5,24
2040527c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
2040527e:	fe842783          	lw	a5,-24(s0)
20405282:	07a1                	addi	a5,a5,8
20405284:	439c                	lw	a5,0(a5)
20405286:	fe842703          	lw	a4,-24(s0)
2040528a:	0721                	addi	a4,a4,8
2040528c:	0017e793          	ori	a5,a5,1
20405290:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20405292:	fe842783          	lw	a5,-24(s0)
20405296:	07b1                	addi	a5,a5,12
20405298:	439c                	lw	a5,0(a5)
2040529a:	fe842703          	lw	a4,-24(s0)
2040529e:	0731                	addi	a4,a4,12
204052a0:	0017e793          	ori	a5,a5,1
204052a4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
204052a6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
204052a8:	853e                	mv	a0,a5
204052aa:	50b2                	lw	ra,44(sp)
204052ac:	5422                	lw	s0,40(sp)
204052ae:	6145                	addi	sp,sp,48
204052b0:	8082                	ret

204052b2 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
204052b2:	7139                	addi	sp,sp,-64
204052b4:	de06                	sw	ra,60(sp)
204052b6:	dc22                	sw	s0,56(sp)
204052b8:	0080                	addi	s0,sp,64
204052ba:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
204052be:	fcc42783          	lw	a5,-52(s0)
204052c2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
204052c6:	fcc42503          	lw	a0,-52(s0)
204052ca:	cf5ff0ef          	jal	ra,20404fbe <__metal_driver_sifive_uart0_control_base>
204052ce:	87aa                	mv	a5,a0
204052d0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
204052d4:	fcc42503          	lw	a0,-52(s0)
204052d8:	d67ff0ef          	jal	ra,2040503e <__metal_driver_sifive_uart0_clock>
204052dc:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
204052e0:	fe842783          	lw	a5,-24(s0)
204052e4:	07a1                	addi	a5,a5,8
204052e6:	4398                	lw	a4,0(a5)
204052e8:	fe842783          	lw	a5,-24(s0)
204052ec:	07a1                	addi	a5,a5,8
204052ee:	86be                	mv	a3,a5
204052f0:	fff907b7          	lui	a5,0xfff90
204052f4:	17fd                	addi	a5,a5,-1
204052f6:	8ff9                	and	a5,a5,a4
204052f8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
204052fa:	fe842783          	lw	a5,-24(s0)
204052fe:	07a1                	addi	a5,a5,8
20405300:	4398                	lw	a4,0(a5)
20405302:	fe842783          	lw	a5,-24(s0)
20405306:	07a1                	addi	a5,a5,8
20405308:	86be                	mv	a3,a5
2040530a:	67c1                	lui	a5,0x10
2040530c:	8fd9                	or	a5,a5,a4
2040530e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20405310:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20405312:	fe842783          	lw	a5,-24(s0)
20405316:	07d1                	addi	a5,a5,20
20405318:	439c                	lw	a5,0(a5)
2040531a:	8b85                	andi	a5,a5,1
2040531c:	dbfd                	beqz	a5,20405312 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
2040531e:	fe842783          	lw	a5,-24(s0)
20405322:	07a1                	addi	a5,a5,8
20405324:	439c                	lw	a5,0(a5)
20405326:	8b89                	andi	a5,a5,2
20405328:	c399                	beqz	a5,2040532e <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
2040532a:	47a5                	li	a5,9
2040532c:	a011                	j	20405330 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
2040532e:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20405330:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20405334:	fe442783          	lw	a5,-28(s0)
20405338:	439c                	lw	a5,0(a5)
2040533a:	439c                	lw	a5,0(a5)
2040533c:	fe442503          	lw	a0,-28(s0)
20405340:	9782                	jalr	a5
20405342:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20405346:	fe042703          	lw	a4,-32(s0)
2040534a:	fdc42783          	lw	a5,-36(s0)
2040534e:	02f707b3          	mul	a5,a4,a5
20405352:	873e                	mv	a4,a5
20405354:	fec42783          	lw	a5,-20(s0)
20405358:	43dc                	lw	a5,4(a5)
2040535a:	02f757b3          	divu	a5,a4,a5
2040535e:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20405362:	fc042a23          	sw	zero,-44(s0)
20405366:	a039                	j	20405374 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20405368:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
2040536a:	fd442783          	lw	a5,-44(s0)
2040536e:	0785                	addi	a5,a5,1
20405370:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20405374:	fd442783          	lw	a5,-44(s0)
20405378:	fd842703          	lw	a4,-40(s0)
2040537c:	fee7c6e3          	blt	a5,a4,20405368 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20405380:	0001                	nop
20405382:	50f2                	lw	ra,60(sp)
20405384:	5462                	lw	s0,56(sp)
20405386:	6121                	addi	sp,sp,64
20405388:	8082                	ret

2040538a <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
2040538a:	7179                	addi	sp,sp,-48
2040538c:	d606                	sw	ra,44(sp)
2040538e:	d422                	sw	s0,40(sp)
20405390:	1800                	addi	s0,sp,48
20405392:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20405396:	fdc42783          	lw	a5,-36(s0)
2040539a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
2040539e:	fec42703          	lw	a4,-20(s0)
204053a2:	fec42783          	lw	a5,-20(s0)
204053a6:	43dc                	lw	a5,4(a5)
204053a8:	85be                	mv	a1,a5
204053aa:	853a                	mv	a0,a4
204053ac:	d9bfc0ef          	jal	ra,20402146 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
204053b0:	0001                	nop
204053b2:	50b2                	lw	ra,44(sp)
204053b4:	5422                	lw	s0,40(sp)
204053b6:	6145                	addi	sp,sp,48
204053b8:	8082                	ret

204053ba <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
204053ba:	7139                	addi	sp,sp,-64
204053bc:	de06                	sw	ra,60(sp)
204053be:	dc22                	sw	s0,56(sp)
204053c0:	0080                	addi	s0,sp,64
204053c2:	fca42623          	sw	a0,-52(s0)
204053c6:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
204053ca:	fcc42783          	lw	a5,-52(s0)
204053ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
204053d2:	fcc42503          	lw	a0,-52(s0)
204053d6:	c69ff0ef          	jal	ra,2040503e <__metal_driver_sifive_uart0_clock>
204053da:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
204053de:	fcc42503          	lw	a0,-52(s0)
204053e2:	c8bff0ef          	jal	ra,2040506c <__metal_driver_sifive_uart0_pinmux>
204053e6:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
204053ea:	fe842783          	lw	a5,-24(s0)
204053ee:	c7b9                	beqz	a5,2040543c <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
204053f0:	fec42783          	lw	a5,-20(s0)
204053f4:	20405737          	lui	a4,0x20405
204053f8:	2b270713          	addi	a4,a4,690 # 204052b2 <pre_rate_change_callback_func>
204053fc:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
204053fe:	fec42783          	lw	a5,-20(s0)
20405402:	fcc42703          	lw	a4,-52(s0)
20405406:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20405408:	fec42783          	lw	a5,-20(s0)
2040540c:	07a1                	addi	a5,a5,8
2040540e:	85be                	mv	a1,a5
20405410:	fe842503          	lw	a0,-24(s0)
20405414:	20f1                	jal	204054e0 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20405416:	fec42783          	lw	a5,-20(s0)
2040541a:	20405737          	lui	a4,0x20405
2040541e:	38a70713          	addi	a4,a4,906 # 2040538a <post_rate_change_callback_func>
20405422:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20405424:	fec42783          	lw	a5,-20(s0)
20405428:	fcc42703          	lw	a4,-52(s0)
2040542c:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
2040542e:	fec42783          	lw	a5,-20(s0)
20405432:	07d1                	addi	a5,a5,20
20405434:	85be                	mv	a1,a5
20405436:	fe842503          	lw	a0,-24(s0)
2040543a:	28d9                	jal	20405510 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
2040543c:	fec42783          	lw	a5,-20(s0)
20405440:	fc842583          	lw	a1,-56(s0)
20405444:	853e                	mv	a0,a5
20405446:	d01fc0ef          	jal	ra,20402146 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
2040544a:	fe442783          	lw	a5,-28(s0)
2040544e:	cb95                	beqz	a5,20405482 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20405450:	fcc42503          	lw	a0,-52(s0)
20405454:	c43ff0ef          	jal	ra,20405096 <__metal_driver_sifive_uart0_pinmux_output_selector>
20405458:	87aa                	mv	a5,a0
2040545a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
2040545e:	fcc42503          	lw	a0,-52(s0)
20405462:	c5fff0ef          	jal	ra,204050c0 <__metal_driver_sifive_uart0_pinmux_source_selector>
20405466:	87aa                	mv	a5,a0
20405468:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
2040546c:	fe442783          	lw	a5,-28(s0)
20405470:	439c                	lw	a5,0(a5)
20405472:	53dc                	lw	a5,36(a5)
20405474:	fdc42603          	lw	a2,-36(s0)
20405478:	fe042583          	lw	a1,-32(s0)
2040547c:	fe442503          	lw	a0,-28(s0)
20405480:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20405482:	0001                	nop
20405484:	50f2                	lw	ra,60(sp)
20405486:	5462                	lw	s0,56(sp)
20405488:	6121                	addi	sp,sp,64
2040548a:	8082                	ret

2040548c <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
2040548c:	7179                	addi	sp,sp,-48
2040548e:	d622                	sw	s0,44(sp)
20405490:	1800                	addi	s0,sp,48
20405492:	fca42e23          	sw	a0,-36(s0)
20405496:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
2040549a:	fd842783          	lw	a5,-40(s0)
2040549e:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
204054a2:	fdc42783          	lw	a5,-36(s0)
204054a6:	e781                	bnez	a5,204054ae <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
204054a8:	fd842783          	lw	a5,-40(s0)
204054ac:	a035                	j	204054d8 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
204054ae:	fdc42783          	lw	a5,-36(s0)
204054b2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
204054b6:	a031                	j	204054c2 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
204054b8:	fec42783          	lw	a5,-20(s0)
204054bc:	479c                	lw	a5,8(a5)
204054be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
204054c2:	fec42783          	lw	a5,-20(s0)
204054c6:	479c                	lw	a5,8(a5)
204054c8:	fbe5                	bnez	a5,204054b8 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
204054ca:	fec42783          	lw	a5,-20(s0)
204054ce:	fd842703          	lw	a4,-40(s0)
204054d2:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
204054d4:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
204054d8:	853e                	mv	a0,a5
204054da:	5432                	lw	s0,44(sp)
204054dc:	6145                	addi	sp,sp,48
204054de:	8082                	ret

204054e0 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
204054e0:	1101                	addi	sp,sp,-32
204054e2:	ce06                	sw	ra,28(sp)
204054e4:	cc22                	sw	s0,24(sp)
204054e6:	1000                	addi	s0,sp,32
204054e8:	fea42623          	sw	a0,-20(s0)
204054ec:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
204054f0:	fec42783          	lw	a5,-20(s0)
204054f4:	43dc                	lw	a5,4(a5)
204054f6:	fe842583          	lw	a1,-24(s0)
204054fa:	853e                	mv	a0,a5
204054fc:	3f41                	jal	2040548c <_metal_clock_append_to_callbacks>
204054fe:	872a                	mv	a4,a0
20405500:	fec42783          	lw	a5,-20(s0)
20405504:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20405506:	0001                	nop
20405508:	40f2                	lw	ra,28(sp)
2040550a:	4462                	lw	s0,24(sp)
2040550c:	6105                	addi	sp,sp,32
2040550e:	8082                	ret

20405510 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405510:	1101                	addi	sp,sp,-32
20405512:	ce06                	sw	ra,28(sp)
20405514:	cc22                	sw	s0,24(sp)
20405516:	1000                	addi	s0,sp,32
20405518:	fea42623          	sw	a0,-20(s0)
2040551c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20405520:	fec42783          	lw	a5,-20(s0)
20405524:	479c                	lw	a5,8(a5)
20405526:	fe842583          	lw	a1,-24(s0)
2040552a:	853e                	mv	a0,a5
2040552c:	3785                	jal	2040548c <_metal_clock_append_to_callbacks>
2040552e:	872a                	mv	a4,a0
20405530:	fec42783          	lw	a5,-20(s0)
20405534:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20405536:	0001                	nop
20405538:	40f2                	lw	ra,28(sp)
2040553a:	4462                	lw	s0,24(sp)
2040553c:	6105                	addi	sp,sp,32
2040553e:	8082                	ret

20405540 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20405540:	1101                	addi	sp,sp,-32
20405542:	ce06                	sw	ra,28(sp)
20405544:	cc22                	sw	s0,24(sp)
20405546:	1000                	addi	s0,sp,32
20405548:	fea42623          	sw	a0,-20(s0)
2040554c:	fec42783          	lw	a5,-20(s0)
20405550:	439c                	lw	a5,0(a5)
20405552:	57dc                	lw	a5,44(a5)
20405554:	fec42503          	lw	a0,-20(s0)
20405558:	9782                	jalr	a5
2040555a:	87aa                	mv	a5,a0
2040555c:	853e                	mv	a0,a5
2040555e:	40f2                	lw	ra,28(sp)
20405560:	4462                	lw	s0,24(sp)
20405562:	6105                	addi	sp,sp,32
20405564:	8082                	ret

20405566 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20405566:	1101                	addi	sp,sp,-32
20405568:	ce22                	sw	s0,28(sp)
2040556a:	1000                	addi	s0,sp,32
2040556c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20405570:	fec42783          	lw	a5,-20(s0)
20405574:	eb89                	bnez	a5,20405586 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20405576:	fec42703          	lw	a4,-20(s0)
2040557a:	070a                	slli	a4,a4,0x2
2040557c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20405580:	97ba                	add	a5,a5,a4
20405582:	439c                	lw	a5,0(a5)
20405584:	a011                	j	20405588 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20405586:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20405588:	853e                	mv	a0,a5
2040558a:	4472                	lw	s0,28(sp)
2040558c:	6105                	addi	sp,sp,32
2040558e:	8082                	ret

20405590 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20405590:	1101                	addi	sp,sp,-32
20405592:	ce22                	sw	s0,28(sp)
20405594:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405596:	f14027f3          	csrr	a5,mhartid
2040559a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
2040559e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
204055a2:	853e                	mv	a0,a5
204055a4:	4472                	lw	s0,28(sp)
204055a6:	6105                	addi	sp,sp,32
204055a8:	8082                	ret

204055aa <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
204055aa:	1101                	addi	sp,sp,-32
204055ac:	ce22                	sw	s0,28(sp)
204055ae:	1000                	addi	s0,sp,32
204055b0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
204055b4:	0001                	nop
204055b6:	bffd                	j	204055b4 <metal_shutdown+0xa>
	...

20405600 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405600:	ca4fd06f          	j	20402aa4 <metal_interrupt_vector_handler>

20405604 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405604:	ca0fd06f          	j	20402aa4 <metal_interrupt_vector_handler>

20405608 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405608:	c9cfd06f          	j	20402aa4 <metal_interrupt_vector_handler>

2040560c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040560c:	cc6fd06f          	j	20402ad2 <metal_software_interrupt_vector_handler>

20405610 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405610:	c94fd06f          	j	20402aa4 <metal_interrupt_vector_handler>

20405614 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405614:	c90fd06f          	j	20402aa4 <metal_interrupt_vector_handler>

20405618 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405618:	c8cfd06f          	j	20402aa4 <metal_interrupt_vector_handler>

2040561c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040561c:	da8fd06f          	j	20402bc4 <metal_timer_interrupt_vector_handler>

20405620 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20405620:	c84fd06f          	j	20402aa4 <metal_interrupt_vector_handler>

20405624 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20405624:	c80fd06f          	j	20402aa4 <metal_interrupt_vector_handler>

20405628 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20405628:	c7cfd06f          	j	20402aa4 <metal_interrupt_vector_handler>

2040562c <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
2040562c:	c78fd06f          	j	20402aa4 <metal_interrupt_vector_handler>

20405630 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20405630:	c74fd06f          	j	20402aa4 <metal_interrupt_vector_handler>

20405634 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20405634:	c70fd06f          	j	20402aa4 <metal_interrupt_vector_handler>

20405638 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20405638:	c6cfd06f          	j	20402aa4 <metal_interrupt_vector_handler>

2040563c <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
2040563c:	c68fd06f          	j	20402aa4 <metal_interrupt_vector_handler>

20405640 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20405640:	837fd06f          	j	20402e76 <metal_lc0_interrupt_vector_handler>

20405644 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20405644:	8c5fd06f          	j	20402f08 <metal_lc1_interrupt_vector_handler>

20405648 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20405648:	953fd06f          	j	20402f9a <metal_lc2_interrupt_vector_handler>

2040564c <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
2040564c:	9e1fd06f          	j	2040302c <metal_lc3_interrupt_vector_handler>

20405650 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20405650:	a6ffd06f          	j	204030be <metal_lc4_interrupt_vector_handler>

20405654 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20405654:	afdfd06f          	j	20403150 <metal_lc5_interrupt_vector_handler>

20405658 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20405658:	b8bfd06f          	j	204031e2 <metal_lc6_interrupt_vector_handler>

2040565c <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
2040565c:	c19fd06f          	j	20403274 <metal_lc7_interrupt_vector_handler>

20405660 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20405660:	ca7fd06f          	j	20403306 <metal_lc8_interrupt_vector_handler>

20405664 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20405664:	d35fd06f          	j	20403398 <metal_lc9_interrupt_vector_handler>

20405668 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20405668:	dc3fd06f          	j	2040342a <metal_lc10_interrupt_vector_handler>

2040566c <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
2040566c:	e51fd06f          	j	204034bc <metal_lc11_interrupt_vector_handler>

20405670 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20405670:	edffd06f          	j	2040354e <metal_lc12_interrupt_vector_handler>

20405674 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20405674:	f6dfd06f          	j	204035e0 <metal_lc13_interrupt_vector_handler>

20405678 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20405678:	ffbfd06f          	j	20403672 <metal_lc14_interrupt_vector_handler>

2040567c <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
2040567c:	888fe06f          	j	20403704 <metal_lc15_interrupt_vector_handler>

20405680 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405680:	1101                	addi	sp,sp,-32
20405682:	ce22                	sw	s0,28(sp)
20405684:	1000                	addi	s0,sp,32
20405686:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040568a:	fec42703          	lw	a4,-20(s0)
2040568e:	800017b7          	lui	a5,0x80001
20405692:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffdc68>
20405696:	00f71763          	bne	a4,a5,204056a4 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040569a:	03dfd7b7          	lui	a5,0x3dfd
2040569e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
204056a2:	a011                	j	204056a6 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
204056a4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
204056a6:	853e                	mv	a0,a5
204056a8:	4472                	lw	s0,28(sp)
204056aa:	6105                	addi	sp,sp,32
204056ac:	8082                	ret

204056ae <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
204056ae:	1101                	addi	sp,sp,-32
204056b0:	ce06                	sw	ra,28(sp)
204056b2:	cc22                	sw	s0,24(sp)
204056b4:	1000                	addi	s0,sp,32
204056b6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
204056ba:	fec42503          	lw	a0,-20(s0)
204056be:	37c9                	jal	20405680 <__metal_driver_fixed_clock_rate>
204056c0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
204056c2:	853e                	mv	a0,a5
204056c4:	40f2                	lw	ra,28(sp)
204056c6:	4462                	lw	s0,24(sp)
204056c8:	6105                	addi	sp,sp,32
204056ca:	8082                	ret

204056cc <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
204056cc:	1101                	addi	sp,sp,-32
204056ce:	ce06                	sw	ra,28(sp)
204056d0:	cc22                	sw	s0,24(sp)
204056d2:	1000                	addi	s0,sp,32
204056d4:	fea42623          	sw	a0,-20(s0)
204056d8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
204056dc:	fec42503          	lw	a0,-20(s0)
204056e0:	37f9                	jal	204056ae <__metal_driver_fixed_clock_get_rate_hz>
204056e2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
204056e4:	853e                	mv	a0,a5
204056e6:	40f2                	lw	ra,28(sp)
204056e8:	4462                	lw	s0,24(sp)
204056ea:	6105                	addi	sp,sp,32
204056ec:	8082                	ret

204056ee <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
204056ee:	1101                	addi	sp,sp,-32
204056f0:	ce06                	sw	ra,28(sp)
204056f2:	cc22                	sw	s0,24(sp)
204056f4:	1000                	addi	s0,sp,32
204056f6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
204056fa:	fec42503          	lw	a0,-20(s0)
204056fe:	3575                	jal	204055aa <metal_shutdown>
