
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/debug/E300RW.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/debug/E300RW.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00005b5c memsz 0x00005b5c flags rwx
    LOAD off    0x00007730 vaddr 0x80001730 paddr 0x80001730 align 2**12
         filesz 0x00000000 memsz 0x00001c60 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405b60 align 2**12
         filesz 0x00001730 memsz 0x00001730 flags rw-
    LOAD off    0x00008730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00008730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             0000019c  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005400  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000558  20405600  20405600  00006600  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20405b58  20405b58  00006b58  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00001730  80000000  20405b60  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              00001060  80001730  80001730  00007730  2**3  ALLOC
  6 .stack            00000400  80002790  80002790  00007730  2**0  ALLOC
  7 .heap             00000800  80002b90  80002b90  00007730  2**0  ALLOC
  8 .debug_info       000145a4  00000000  00000000  00008730  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     000026ed  00000000  00000000  0001ccd4  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    000008b0  00000000  00000000  0001f3c8  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000748  00000000  00000000  0001fc78  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00007a56  00000000  00000000  000203c0  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        0000374e  00000000  00000000  00027e16  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002b564  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002b58c  2**0  CONTENTS, READONLY
 16 .debug_frame      00002404  00000000  00000000  0002b5b8  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405600 l    d  .rodata	00000000 .rodata
20405b58 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80001730 l    d  .bss	00000000 .bss
80002790 l    d  .stack	00000000 .stack
80002b90 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
2040013e l       .init	00000000 _skip_init
20405804 l       .rodata	00000000 argv
20405808 l       .rodata	00000000 envp
2040580c l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 E300RW.c
80000000 l     O .data	000007d0 asso_text.2659
800007d0 l     O .data	000007d0 plain_text.2658
80001740 l     O .bss	000007e0 cipher_text.2660
80000fa0 l     O .data	00000010 Key.2663
80000fb0 l     O .data	00000010 Nonce.2661
80001730 l     O .bss	00000004 tag_addr.2664
80001f20 l     O .bss	000007e0 dec_text.2662
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400d98 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
204012e8 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80001710 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80002700 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20402002 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
204020ac l     F .text	00000026 __metal_driver_sifive_clint0_control_base
204020d2 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
204020f6 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20402132 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20402292 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
204027c8 l     F .text	00000024 __metal_driver_cpu_hartid
204027ec l     F .text	0000002a __metal_driver_cpu_timebase
20402816 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20404016 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20404040 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20404068 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20404090 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
204040b8 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404604 l     F .text	00000026 __metal_driver_sifive_gpio0_base
2040462a l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20404654 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20404ebe l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20404ee8 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20404f16 l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20404f3e l     F .text	0000002e __metal_driver_sifive_uart0_clock
20404f6c l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20404f96 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20404fc0 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
204051b2 l     F .text	000000d8 pre_rate_change_callback_func
2040528a l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20405500 l       .text	00000000 IRQ_0
20405504 l       .text	00000000 IRQ_1
20405508 l       .text	00000000 IRQ_2
2040550c l       .text	00000000 IRQ_3
20405510 l       .text	00000000 IRQ_4
20405514 l       .text	00000000 IRQ_5
20405518 l       .text	00000000 IRQ_6
2040551c l       .text	00000000 IRQ_7
20405520 l       .text	00000000 IRQ_8
20405524 l       .text	00000000 IRQ_9
20405528 l       .text	00000000 IRQ_10
2040552c l       .text	00000000 IRQ_11
20405530 l       .text	00000000 IRQ_12
20405534 l       .text	00000000 IRQ_13
20405538 l       .text	00000000 IRQ_14
2040553c l       .text	00000000 IRQ_15
20405540 l       .text	00000000 IRQ_LC0
20405544 l       .text	00000000 IRQ_LC1
20405548 l       .text	00000000 IRQ_LC2
2040554c l       .text	00000000 IRQ_LC3
20405550 l       .text	00000000 IRQ_LC4
20405554 l       .text	00000000 IRQ_LC5
20405558 l       .text	00000000 IRQ_LC6
2040555c l       .text	00000000 IRQ_LC7
20405560 l       .text	00000000 IRQ_LC8
20405564 l       .text	00000000 IRQ_LC9
20405568 l       .text	00000000 IRQ_LC10
2040556c l       .text	00000000 IRQ_LC11
20405570 l       .text	00000000 IRQ_LC12
20405574 l       .text	00000000 IRQ_LC13
20405578 l       .text	00000000 IRQ_LC14
2040557c l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405580 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000fc0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20405b5c l       .init_array	00000000 __fini_array_end
20405b5c l       .init_array	00000000 __fini_array_start
20405b5c l       .init_array	00000000 __init_array_end
20405b58 l       .init_array	00000000 __preinit_array_end
20405b58 l       .init_array	00000000 __init_array_start
20405b58 l       .init_array	00000000 __preinit_array_start
20400884 g     F .text	0000002c putchar
20405b34 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
2040176c g     F .text	00000030 _isatty_r
20402fbe  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20400932 g     F .text	000000da _puts_r
2040179c g     F .text	00000034 _lseek_r
20405112 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
2040246e g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
20402f2c  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400200 g     F .text	0000001e rdcycle
2040377e g     F .text	00000038 __metal_valid_interrupt_id
20400840 g     F .text	00000044 printf
20403ba4 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80001f08 g       .data	00000000 __global_pointer$
2040538c g     F .text	00000054 _metal_clock_append_to_callbacks
20404108 g     F .text	00000038 __metal_plic0_complete_interrupt
204039fe g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
2040169a g     F .text	00000036 __sseek
20400e4e g     F .text	0000006a __sinit
20400a1a g     F .text	000000c0 __swbuf_r
20400e0a g     F .text	00000044 __sfmoreglue
204017ec g     F .text	00000002 __malloc_unlock
20405466 g     F .text	0000002a metal_cpu_get
800016e8 g     O .data	00000020 __metal_dt_serial_10013000
20404a98 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20405818 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80002790 g       .bss	00000000 metal_segment_bss_target_end
20402162 g     F .text	0000009a __metal_clint0_mtime_get
20403faa g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20404848 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
20401d82 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
2040502a g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80001730 g       .bss	00000000 metal_segment_bss_target_start
204021fc g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
2040173a g     F .text	00000032 _fstat_r
20404ce8 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
8000278c g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
204053e0 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20403298  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405a6c g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20405a2c g     O .rodata	00000040 __metal_driver_vtable_cpu
2040207e g     F .text	0000002e metal_uart_set_baud_rate
204052ba g     F .text	000000d2 __metal_driver_sifive_uart0_init
20403c38 g     F .text	00000072 __metal_driver_cpu_mcycle_get
80002b90 g       .heap	00000000 metal_segment_heap_target_start
20400e00 g     F .text	0000000a _cleanup_r
80001720 g     O .data	00000004 __metal_dt_cpu_0
20403206  w    F .text	00000092 metal_lc8_interrupt_vector_handler
20400a0c g     F .text	0000000e puts
204034e0  w    F .text	00000092 metal_lc13_interrupt_vector_handler
204029aa g     F .text	00000018 __metal_default_exception_handler
20401bf2 g     F .text	00000026 _fstat
20402794 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
204041a4 g     F .text	00000062 __metal_plic0_set_priority
20403bc0 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20402840 g     F .text	0000002c __metal_driver_cpu_get
204059e0 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
2040289e g     F .text	00000018 __metal_interrupt_global_disable
20403174  w    F .text	00000092 metal_lc7_interrupt_vector_handler
2040332a  w    F .text	00000092 metal_lc10_interrupt_vector_handler
204015ec g     F .text	00000030 _sbrk_r
204045bc g     F .text	00000048 __metal_driver_riscv_plic0_disable
20403872 g     F .text	0000004e __metal_exception_register
20401b9c g     F .text	00000034 _read_r
20403dcc g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
2040492a g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20402a96 g     F .text	00000064 __metal_default_sw_handler
20405410 g     F .text	00000030 metal_clock_register_post_rate_change_callback
20404fea g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
20401c18 g     F .text	00000020 _isatty
204049f0 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80001728 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000170c g     O .data	00000004 _global_impure_ptr
20402afa  w    F .text	0000008e metal_timer_interrupt_vector_handler
20401df2 g     F .text	0000006a __libc_init_array
2040496a g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
204033bc  w    F .text	00000092 metal_lc11_interrupt_vector_handler
20403b4c g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
20401c8c g     F .text	0000007e _sbrk
204048e4 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
2040017c g     F .init	00000002 _init
20402900 g     F .text	0000001a __metal_interrupt_timer_disable
20404ae2 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20403e82 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20405af8 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20404a30 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20401dba g     F .text	00000038 __libc_fini_array
20404e70 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403e0c g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20402952 g     F .text	0000002c __metal_interrupt_local_enable
20402760 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20401fb0 g     F .text	0000002c metal_tty_putc
204042c6 g     F .text	00000018 __metal_plic0_default_handler
204008b0 g     F .text	00000082 _putc_r
80001020 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20405768 g     O .rodata	00000020 __sf_fake_stderr
20402936 g     F .text	0000001c __metal_interrupt_external_disable
20405008 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20403c1c g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
204038c0 g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20401312 g     F .text	00000042 __sfputs_r
20403f64 g     F .text	00000046 __metal_driver_cpu_exception_register
204028b6 g     F .text	00000018 __metal_interrupt_software_enable
20402e08  w    F .text	00000092 metal_lc1_interrupt_vector_handler
204017d0 g     F .text	0000001a memchr
2040115e g     F .text	000000ac _free_r
8000173c g     O .bss	00000004 _global_atexit
20403696 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401ee8 g     F .text	000000c8 __call_exitprocs
80002b90 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
20401c38 g     F .text	0000002a _lseek
20403f44 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403fd8 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
2040291a g     F .text	0000001c __metal_interrupt_external_enable
20401e5c g     F .text	0000008c __register_exitproc
2040505c g     F .text	00000040 __metal_driver_sifive_uart0_putc
2040436e g     F .text	00000144 __metal_driver_riscv_plic0_init
20404574 g     F .text	00000048 __metal_driver_riscv_plic0_enable
204048b8 g     F .text	0000002c __metal_driver_sifive_gpio0_output
2040021e g     F .text	000000b0 printC
204030e2  w    F .text	00000092 metal_lc6_interrupt_vector_handler
2040286c g     F .text	0000001a __metal_myhart_id
20404e90 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20402a08  w    F .text	0000008e metal_software_interrupt_vector_handler
20403b78 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
2040170a g     F .text	00000030 _close_r
204050f2 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20402350 g     F .text	000000da __metal_driver_riscv_clint0_register
80001718 g     O .data	00000008 __metal_dt_clint_2000000
20400ada g     F .text	00000110 __swsetup_r
20400eb8 g     F .text	0000009e __sfp
2040161c g     F .text	00000030 __sread
20404808 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
2040017e  w    F .init	00000000 secondary_main
204029da  w    F .text	0000002e metal_interrupt_vector_handler
204017ea g     F .text	00000002 __malloc_lock
20400d34 g     F .text	00000064 _fflush_r
20404178 g     F .text	0000002c __metal_plic0_get_threshold
20405788 g     O .rodata	00000020 __sf_fake_stdin
204037b6 g     F .text	000000bc __metal_local_interrupt_enable
2040262a g     F .text	00000136 __metal_driver_riscv_clint0_command_request
204010b6 g     F .text	000000a8 memset
20403050  w    F .text	00000092 metal_lc5_interrupt_vector_handler
20400542 g     F .text	000002fe main
80001730 g       .data	00000000 metal_segment_data_target_end
20403e20 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20403ee4 g     F .text	00000060 __metal_driver_cpu_get_msip
204054aa g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20403ff6 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
204040da g     F .text	0000002e __metal_plic0_claim_interrupt
204016d0 g     F .text	00000006 __sclose
2040344e  w    F .text	00000092 metal_lc12_interrupt_vector_handler
2040120a g     F .text	000000de _malloc_r
20402452 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
20403caa g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20405490 g     F .text	0000001a metal_cpu_get_current_hartid
204003fc g     F .text	00000146 AEAD_DEC
20405500 g       .text	00000000 __metal_vector_table
20405b60 g       *ABS*	00000000 metal_segment_itim_source_start
80001714  w    O .data	00000004 __metal_cpu_table
80001030 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
2040017c g     F .init	00000002 _fini
20400840 g     F .text	00000044 iprintf
20402886 g     F .text	00000018 __metal_interrupt_global_enable
20401d78 g     F .text	0000000a atexit
20401fdc g     F .text	00000026 metal_tty_putc_raw
204016d6 g     F .text	00000034 _write_r
204028e6 g     F .text	0000001a __metal_interrupt_timer_enable
2040509c g     F .text	00000056 __metal_driver_sifive_uart0_getc
20402574 g     F .text	000000b6 __metal_driver_riscv_clint0_disable
204017ee g     F .text	0000010c _printf_common
80001708 g     O .data	00000004 _impure_ptr
20403d56 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20400bea g     F .text	0000014a __sflush_r
204055ae g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
204024c2 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405b60 g       *ABS*	00000000 metal_segment_data_source_start
80003390 g       .heap	00000000 metal_segment_heap_target_end
204036e6 g     F .text	00000098 __metal_controller_interrupt_vector
800013e8 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400fc2 g     F .text	00000058 __swhatbuf_r
204049aa g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20402b88 g     F .text	00000066 __metal_default_timer_handler
20401d0a g     F .text	0000006e _write
204042de g     F .text	00000090 __metal_plic0_handler
20402e9a  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403604  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20405440 g     F .text	00000026 metal_cpu_interrupt_controller
2040164c g     F .text	0000004e __swrite
20401d8e g     F .text	0000002c exit
20401354 g     F .text	00000298 _vfiprintf_r
20400f56 g     F .text	0000006c _fwalk_reent
204055cc g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
204057a8 g     O .rodata	00000020 __sf_fake_stdout
80001724 g     O .data	00000004 __metal_dt_gpio_10012000
204029c2 g     F .text	00000018 __metal_default_interrupt_handler
20402050 g     F .text	0000002e metal_uart_putc
20401c62 g     F .text	0000002a _read
2040488e g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402c00 g     F .text	00000150 __metal_exception_handler
20402d76  w    F .text	00000092 metal_lc0_interrupt_vector_handler
204055ee g     F .text	00000012 _exit
20403cf0 g     F .text	00000066 __metal_driver_cpu_mtime_get
2040101a g     F .text	0000009c __smakebuf_r
2040242a g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
204018fa g     F .text	000002a2 _printf_i
80001738 g     O .bss	00000004 __malloc_sbrk_start
20403572  w    F .text	00000092 metal_lc14_interrupt_vector_handler
204022c8 g     F .text	00000088 __metal_driver_riscv_clint0_init
80001734 g     O .bss	00000004 __malloc_free_list
204002ce g     F .text	0000012e AEAD_ENC
20401354 g     F .text	00000298 _vfprintf_r
20403de2 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
2040423a g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20403df6 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
2040297e g     F .text	0000002c __metal_interrupt_local_disable
204028ce g     F .text	00000018 __metal_interrupt_software_disable
20404206 g     F .text	00000034 __metal_plic0_get_priority
20402024 g     F .text	0000002c metal_uart_init
20404140 g     F .text	00000038 __metal_plic0_set_threshold
20401bd0 g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
204044b2 g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc02197          	auipc	gp,0x5fc02
20400004:	f0818193          	addi	gp,gp,-248 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc02197          	auipc	gp,0x5fc02
20400084:	e8818193          	addi	gp,gp,-376 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	5fc03117          	auipc	sp,0x5fc03
2040008c:	b0810113          	addi	sp,sp,-1272 # 80002b90 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
20400090:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
20400092:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400096:	00a28563          	beq	t0,a0,204000a0 <_start+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
2040009a:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
2040009c:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009e:	bfe5                	j	20400096 <_start+0x18>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
204000a0:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a4:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a8:	08551b63          	bne	a0,t0,2040013e <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000ac:	00006297          	auipc	t0,0x6
204000b0:	ab428293          	addi	t0,t0,-1356 # 20405b60 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b4:	5fc00317          	auipc	t1,0x5fc00
204000b8:	f4c30313          	addi	t1,t1,-180 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000bc:	82818393          	addi	t2,gp,-2008 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000c0:	00628c63          	beq	t0,t1,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c4:	00735a63          	bge	t1,t2,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000cc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ce:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000d2:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d4:	fe734ae3          	blt	t1,t2,204000c8 <_start+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d8:	00006297          	auipc	t0,0x6
204000dc:	a8828293          	addi	t0,t0,-1400 # 20405b60 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000e0:	e7c00317          	auipc	t1,0xe7c00
204000e4:	f2030313          	addi	t1,t1,-224 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e8:	e7c00397          	auipc	t2,0xe7c00
204000ec:	f1838393          	addi	t2,t2,-232 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000f0:	00628c63          	beq	t0,t1,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f4:	00735a63          	bge	t1,t2,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000fc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fe:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
20400102:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400104:	fe734ae3          	blt	t1,t2,204000f8 <_start+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400108:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
2040010c:	5fc01317          	auipc	t1,0x5fc01
20400110:	62430313          	addi	t1,t1,1572 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400114:	5fc02397          	auipc	t2,0x5fc02
20400118:	67c38393          	addi	t2,t2,1660 # 80002790 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
2040011c:	00735763          	bge	t1,t2,2040012a <_start+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400120:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
20400124:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
20400126:	fe734de3          	blt	t1,t2,20400120 <_start+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2040012a:	c211                	beqz	a2,2040012e <_start+0xb0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
2040012c:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
2040012e:	00002517          	auipc	a0,0x2
20400132:	c8c50513          	addi	a0,a0,-884 # 20401dba <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
20400136:	443010ef          	jal	ra,20401d78 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
2040013a:	4b9010ef          	jal	ra,20401df2 <__libc_init_array>

2040013e <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
2040013e:	3f0d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400140:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
20400144:	00010737          	lui	a4,0x10
20400148:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
2040014c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
2040014e:	cb89                	beqz	a5,20400160 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400150:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
20400154:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
20400156:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400158:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
2040015c:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400160:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
20400162:	00005597          	auipc	a1,0x5
20400166:	6a258593          	addi	a1,a1,1698 # 20405804 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
2040016a:	00005617          	auipc	a2,0x5
2040016e:	69e60613          	addi	a2,a2,1694 # 20405808 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
20400172:	2031                	jal	2040017e <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
20400174:	41b010ef          	jal	ra,20401d8e <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400178:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
2040017a:	8082                	ret

2040017c <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
2040017c:	8082                	ret

2040017e <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
2040017e:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400180:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
20400182:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
20400186:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
2040018a:	00628563          	beq	t0,t1,20400194 <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
2040018e:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
20400192:	bff5                	j	2040018e <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
20400194:	267d                	jal	20400542 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400196:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400198:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
2040019a:	8082                	ret

Disassembly of section .text:

20400200 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:49

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
20400200:	1101                	addi	sp,sp,-32
20400202:	ce22                	sw	s0,28(sp)
20400204:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:50
    int tmp = 0;
20400206:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:51
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
2040020a:	b00027f3          	csrr	a5,mcycle
2040020e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:52
    return tmp;
20400212:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:53
}
20400216:	853e                	mv	a0,a5
20400218:	4472                	lw	s0,28(sp)
2040021a:	6105                	addi	sp,sp,32
2040021c:	8082                	ret

2040021e <printC>:
printC():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:33
unsigned AEAD_DEC(unsigned *ad_addr, unsigned ad_len,
             unsigned *c_addr, unsigned c_len,
             unsigned *d_addr, unsigned *nonce_addr,
             unsigned *key_addr, unsigned *tag_addr);

void printC(unsigned *arr, unsigned a_len, int cipher, int del) {
2040021e:	7179                	addi	sp,sp,-48
20400220:	d606                	sw	ra,44(sp)
20400222:	d422                	sw	s0,40(sp)
20400224:	1800                	addi	s0,sp,48
20400226:	fca42e23          	sw	a0,-36(s0)
2040022a:	fcb42c23          	sw	a1,-40(s0)
2040022e:	fcc42a23          	sw	a2,-44(s0)
20400232:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:34
    int len = (cipher) ? a_len + 4 : a_len;
20400236:	fd442783          	lw	a5,-44(s0)
2040023a:	c789                	beqz	a5,20400244 <printC+0x26>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:34 (discriminator 1)
2040023c:	fd842783          	lw	a5,-40(s0)
20400240:	0791                	addi	a5,a5,4
20400242:	a019                	j	20400248 <printC+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:34 (discriminator 2)
20400244:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:34 (discriminator 4)
20400248:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:35 (discriminator 4)
    len = (len % 8 == 0)? len : len + 1;
2040024c:	fe842783          	lw	a5,-24(s0)
20400250:	8b9d                	andi	a5,a5,7
20400252:	c789                	beqz	a5,2040025c <printC+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:35 (discriminator 1)
20400254:	fe842783          	lw	a5,-24(s0)
20400258:	0785                	addi	a5,a5,1
2040025a:	a019                	j	20400260 <printC+0x42>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:35 (discriminator 2)
2040025c:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:35 (discriminator 4)
20400260:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:36 (discriminator 4)
    for (int i = 0; i < len; i++) {
20400264:	fe042623          	sw	zero,-20(s0)
20400268:	a0b1                	j	204002b4 <printC+0x96>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:37
        if (i % 2 == 0) {
2040026a:	fec42783          	lw	a5,-20(s0)
2040026e:	8b85                	andi	a5,a5,1
20400270:	e399                	bnez	a5,20400276 <printC+0x58>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:38
            printf("\n");
20400272:	4529                	li	a0,10
20400274:	2d01                	jal	20400884 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:40
        }
        printf("%08x ", arr[i], i);
20400276:	fec42783          	lw	a5,-20(s0)
2040027a:	078a                	slli	a5,a5,0x2
2040027c:	fdc42703          	lw	a4,-36(s0)
20400280:	97ba                	add	a5,a5,a4
20400282:	439c                	lw	a5,0(a5)
20400284:	fec42603          	lw	a2,-20(s0)
20400288:	85be                	mv	a1,a5
2040028a:	204057b7          	lui	a5,0x20405
2040028e:	60078513          	addi	a0,a5,1536 # 20405600 <_exit+0x12>
20400292:	237d                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:41
        if (del) {
20400294:	fd042783          	lw	a5,-48(s0)
20400298:	cb89                	beqz	a5,204002aa <printC+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:42
            arr[i] = 0;
2040029a:	fec42783          	lw	a5,-20(s0)
2040029e:	078a                	slli	a5,a5,0x2
204002a0:	fdc42703          	lw	a4,-36(s0)
204002a4:	97ba                	add	a5,a5,a4
204002a6:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:36 (discriminator 2)
    for (int i = 0; i < len; i++) {
204002aa:	fec42783          	lw	a5,-20(s0)
204002ae:	0785                	addi	a5,a5,1
204002b0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:36 (discriminator 1)
204002b4:	fec42703          	lw	a4,-20(s0)
204002b8:	fe842783          	lw	a5,-24(s0)
204002bc:	faf747e3          	blt	a4,a5,2040026a <printC+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:45
        }
    }
    printf("\n");
204002c0:	4529                	li	a0,10
204002c2:	23c9                	jal	20400884 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:46
}
204002c4:	0001                	nop
204002c6:	50b2                	lw	ra,44(sp)
204002c8:	5422                	lw	s0,40(sp)
204002ca:	6145                	addi	sp,sp,48
204002cc:	8082                	ret

204002ce <AEAD_ENC>:
AEAD_ENC():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:50
int AEAD_ENC(unsigned *ad_addr, unsigned ad_len,
             unsigned *p_addr, unsigned p_len,
             unsigned *c_addr, unsigned *nonce_addr,
             unsigned *key_addr) {
204002ce:	7139                	addi	sp,sp,-64
204002d0:	de06                	sw	ra,60(sp)
204002d2:	dc22                	sw	s0,56(sp)
204002d4:	0080                	addi	s0,sp,64
204002d6:	fca42e23          	sw	a0,-36(s0)
204002da:	fcb42c23          	sw	a1,-40(s0)
204002de:	fcc42a23          	sw	a2,-44(s0)
204002e2:	fcd42823          	sw	a3,-48(s0)
204002e6:	fce42623          	sw	a4,-52(s0)
204002ea:	fcf42423          	sw	a5,-56(s0)
204002ee:	fd042223          	sw	a6,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:51
    int rd = 0;
204002f2:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:52
    printf("Init Enc\n");
204002f6:	204057b7          	lui	a5,0x20405
204002fa:	60878513          	addi	a0,a5,1544 # 20405608 <_exit+0x1a>
204002fe:	70e000ef          	jal	ra,20400a0c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:53
    asm volatile("fence");
20400302:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:54
    ROCC_INSTRUCTION_DS(0, rd, nonce_addr, Enc_Set_Nonce);
20400306:	fc842783          	lw	a5,-56(s0)
2040030a:	85be                	mv	a1,a5
2040030c:	2805e50b          	0x2805e50b
20400310:	87aa                	mv	a5,a0
20400312:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:55
    asm volatile("fence":: : "memory");
20400316:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:56
    printf("Set Nonce finish : %08x \n", rd);
2040031a:	fec42583          	lw	a1,-20(s0)
2040031e:	204057b7          	lui	a5,0x20405
20400322:	61478513          	addi	a0,a5,1556 # 20405614 <_exit+0x26>
20400326:	2b29                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:59


    asm volatile("fence");
20400328:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:60
    ROCC_INSTRUCTION_DS(0, rd, key_addr, Enc_Set_Key);
2040032c:	fc442783          	lw	a5,-60(s0)
20400330:	85be                	mv	a1,a5
20400332:	2a05e50b          	0x2a05e50b
20400336:	87aa                	mv	a5,a0
20400338:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:61
    asm volatile("fence":: : "memory");
2040033c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:62
    printf("Set Key  finish : %07x \n", rd);
20400340:	fec42583          	lw	a1,-20(s0)
20400344:	204057b7          	lui	a5,0x20405
20400348:	63078513          	addi	a0,a5,1584 # 20405630 <_exit+0x42>
2040034c:	29d5                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:64

    asm volatile("fence");
2040034e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:65
    ROCC_INSTRUCTION_DSS(0, rd, p_addr, p_len, Enc_Set_P);
20400352:	fd442783          	lw	a5,-44(s0)
20400356:	85be                	mv	a1,a5
20400358:	fd042603          	lw	a2,-48(s0)
2040035c:	22c5f50b          	0x22c5f50b
20400360:	87aa                	mv	a5,a0
20400362:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:66
    asm volatile("fence":: : "memory");
20400366:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:67
    printf("Set Plain text finish length : %08x \n", rd);
2040036a:	fec42583          	lw	a1,-20(s0)
2040036e:	204057b7          	lui	a5,0x20405
20400372:	64c78513          	addi	a0,a5,1612 # 2040564c <_exit+0x5e>
20400376:	21e9                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:69

    asm volatile("fence");
20400378:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:70
    ROCC_INSTRUCTION_DSS(0, rd, ad_addr, ad_len, Enc_Set_AD);
2040037c:	fdc42783          	lw	a5,-36(s0)
20400380:	85be                	mv	a1,a5
20400382:	fd842603          	lw	a2,-40(s0)
20400386:	24c5f50b          	0x24c5f50b
2040038a:	87aa                	mv	a5,a0
2040038c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:71
    asm volatile("fence":: : "memory");
20400390:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:72
    printf("Set Associated Data finish length: %08x \n", rd);
20400394:	fec42583          	lw	a1,-20(s0)
20400398:	204057b7          	lui	a5,0x20405
2040039c:	67478513          	addi	a0,a5,1652 # 20405674 <_exit+0x86>
204003a0:	2145                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:74

    asm volatile("fence");
204003a2:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:75
    ROCC_INSTRUCTION_DS(0, rd, c_addr, Enc_Set_C_Tag);
204003a6:	fcc42783          	lw	a5,-52(s0)
204003aa:	85be                	mv	a1,a5
204003ac:	2605e50b          	0x2605e50b
204003b0:	87aa                	mv	a5,a0
204003b2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:76
    asm volatile("fence":: : "memory");
204003b6:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:77
    printf("Set Dec addr: %08x \n", rd);
204003ba:	fec42583          	lw	a1,-20(s0)
204003be:	204057b7          	lui	a5,0x20405
204003c2:	6a078513          	addi	a0,a5,1696 # 204056a0 <_exit+0xb2>
204003c6:	29ad                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:79

    asm volatile("fence");
204003c8:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:80
    ROCC_INSTRUCTION_DS(0, rd, rd, Enc_Init);
204003cc:	fec42783          	lw	a5,-20(s0)
204003d0:	85be                	mv	a1,a5
204003d2:	2c05e50b          	0x2c05e50b
204003d6:	87aa                	mv	a5,a0
204003d8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:81
    asm volatile("fence":: : "memory");
204003dc:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:82
    printf("Finish AEAD Dec %08x \n", rd);
204003e0:	fec42583          	lw	a1,-20(s0)
204003e4:	204057b7          	lui	a5,0x20405
204003e8:	6b878513          	addi	a0,a5,1720 # 204056b8 <_exit+0xca>
204003ec:	2991                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:83
    return rd;
204003ee:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:84
}
204003f2:	853e                	mv	a0,a5
204003f4:	50f2                	lw	ra,60(sp)
204003f6:	5462                	lw	s0,56(sp)
204003f8:	6121                	addi	sp,sp,64
204003fa:	8082                	ret

204003fc <AEAD_DEC>:
AEAD_DEC():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:89

unsigned AEAD_DEC(unsigned *ad_addr, unsigned ad_len,
             unsigned *c_addr, unsigned c_len,
             unsigned *d_addr, unsigned *nonce_addr,
             unsigned *key_addr, unsigned *tag_addr){
204003fc:	7139                	addi	sp,sp,-64
204003fe:	de06                	sw	ra,60(sp)
20400400:	dc22                	sw	s0,56(sp)
20400402:	0080                	addi	s0,sp,64
20400404:	fca42e23          	sw	a0,-36(s0)
20400408:	fcb42c23          	sw	a1,-40(s0)
2040040c:	fcc42a23          	sw	a2,-44(s0)
20400410:	fcd42823          	sw	a3,-48(s0)
20400414:	fce42623          	sw	a4,-52(s0)
20400418:	fcf42423          	sw	a5,-56(s0)
2040041c:	fd042223          	sw	a6,-60(s0)
20400420:	fd142023          	sw	a7,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:90
    unsigned rd = 0;
20400424:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:91
    printf("Init DEC\n");
20400428:	204057b7          	lui	a5,0x20405
2040042c:	6d078513          	addi	a0,a5,1744 # 204056d0 <_exit+0xe2>
20400430:	2bf1                	jal	20400a0c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:92
    asm volatile("fence");
20400432:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:93
    ROCC_INSTRUCTION_DS(0, rd, nonce_addr, Enc_Set_Nonce);
20400436:	fc842783          	lw	a5,-56(s0)
2040043a:	85be                	mv	a1,a5
2040043c:	2805e50b          	0x2805e50b
20400440:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:94
    asm volatile("fence":: : "memory");
20400444:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:95
    printf("Set Nonce finish : %08x \n", rd);
20400448:	fec42583          	lw	a1,-20(s0)
2040044c:	204057b7          	lui	a5,0x20405
20400450:	61478513          	addi	a0,a5,1556 # 20405614 <_exit+0x26>
20400454:	26f5                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:97

    asm volatile("fence");
20400456:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:98
    ROCC_INSTRUCTION_DS(0, rd, tag_addr, Dec_Load_Tag);
2040045a:	fc042783          	lw	a5,-64(s0)
2040045e:	85be                	mv	a1,a5
20400460:	2e05e50b          	0x2e05e50b
20400464:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:99
    asm volatile("fence":: : "memory");
20400468:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:100
    printf("Load Tag finish : %08x \n", rd);
2040046c:	fec42583          	lw	a1,-20(s0)
20400470:	204057b7          	lui	a5,0x20405
20400474:	6dc78513          	addi	a0,a5,1756 # 204056dc <_exit+0xee>
20400478:	26e1                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:102

    asm volatile("fence");
2040047a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:103
    ROCC_INSTRUCTION_DS(0, rd, key_addr, Enc_Set_Key);
2040047e:	fc442783          	lw	a5,-60(s0)
20400482:	85be                	mv	a1,a5
20400484:	2a05e50b          	0x2a05e50b
20400488:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:104
    asm volatile("fence":: : "memory");
2040048c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:105
    printf("Set Key  finish : %07x \n", rd);
20400490:	fec42583          	lw	a1,-20(s0)
20400494:	204057b7          	lui	a5,0x20405
20400498:	63078513          	addi	a0,a5,1584 # 20405630 <_exit+0x42>
2040049c:	2655                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:107

    asm volatile("fence");
2040049e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:108
    ROCC_INSTRUCTION_DSS(0, rd, c_addr, c_len, Enc_Set_P);
204004a2:	fd442783          	lw	a5,-44(s0)
204004a6:	85be                	mv	a1,a5
204004a8:	fd042603          	lw	a2,-48(s0)
204004ac:	22c5f50b          	0x22c5f50b
204004b0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:109
    asm volatile("fence":: : "memory");
204004b4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:110
    printf("Set Plain text finish length : %08x \n", rd);
204004b8:	fec42583          	lw	a1,-20(s0)
204004bc:	204057b7          	lui	a5,0x20405
204004c0:	64c78513          	addi	a0,a5,1612 # 2040564c <_exit+0x5e>
204004c4:	2eb5                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:112

    asm volatile("fence");
204004c6:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:113
    ROCC_INSTRUCTION_DSS(0, rd, ad_addr, ad_len, Enc_Set_AD);
204004ca:	fdc42783          	lw	a5,-36(s0)
204004ce:	85be                	mv	a1,a5
204004d0:	fd842603          	lw	a2,-40(s0)
204004d4:	24c5f50b          	0x24c5f50b
204004d8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:114
    asm volatile("fence":: : "memory");
204004dc:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:115
    printf("Set Associated Data finish length: %08x \n", rd);
204004e0:	fec42583          	lw	a1,-20(s0)
204004e4:	204057b7          	lui	a5,0x20405
204004e8:	67478513          	addi	a0,a5,1652 # 20405674 <_exit+0x86>
204004ec:	2e91                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:117

    asm volatile("fence");
204004ee:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:118
    ROCC_INSTRUCTION_DS(0, rd, d_addr, Enc_Set_C_Tag);
204004f2:	fcc42783          	lw	a5,-52(s0)
204004f6:	85be                	mv	a1,a5
204004f8:	2605e50b          	0x2605e50b
204004fc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:119
    asm volatile("fence":: : "memory");
20400500:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:120
    printf("Set Dec addr: %08x \n", rd);
20400504:	fec42583          	lw	a1,-20(s0)
20400508:	204057b7          	lui	a5,0x20405
2040050c:	6a078513          	addi	a0,a5,1696 # 204056a0 <_exit+0xb2>
20400510:	2e05                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:122

    asm volatile("fence");
20400512:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:123
    ROCC_INSTRUCTION_DS(0, rd, rd, Dec_Init);
20400516:	fec42583          	lw	a1,-20(s0)
2040051a:	3005e50b          	0x3005e50b
2040051e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:124
    asm volatile("fence":: : "memory");
20400522:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:125
    printf("Finish AEAD Dec %08x \n", rd);
20400526:	fec42583          	lw	a1,-20(s0)
2040052a:	204057b7          	lui	a5,0x20405
2040052e:	6b878513          	addi	a0,a5,1720 # 204056b8 <_exit+0xca>
20400532:	2639                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:126
    return rd;
20400534:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:127
}
20400538:	853e                	mv	a0,a5
2040053a:	50f2                	lw	ra,60(sp)
2040053c:	5462                	lw	s0,56(sp)
2040053e:	6121                	addi	sp,sp,64
20400540:	8082                	ret

20400542 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:7
#include "../RoCCcommon/rocc.h"
#include "AEAD_HW.h"

#include <stdio.h>

int main(void) {
20400542:	7179                	addi	sp,sp,-48
20400544:	d606                	sw	ra,44(sp)
20400546:	d422                	sw	s0,40(sp)
20400548:	1800                	addi	s0,sp,48
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:8
    unsigned plain_len = 32;
2040054a:	02000793          	li	a5,32
2040054e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:9
    unsigned asso_len = 32; /// CReo que asignaste a memoria
20400552:	02000793          	li	a5,32
20400556:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:10
    unsigned plain_len_int = plain_len / 4;
2040055a:	fec42783          	lw	a5,-20(s0)
2040055e:	8389                	srli	a5,a5,0x2
20400560:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11
    plain_len_int = (plain_len % 4 == 0) ? plain_len_int : plain_len_int + 1;
20400564:	fec42783          	lw	a5,-20(s0)
20400568:	8b8d                	andi	a5,a5,3
2040056a:	c789                	beqz	a5,20400574 <main+0x32>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11 (discriminator 1)
2040056c:	fe442783          	lw	a5,-28(s0)
20400570:	0785                	addi	a5,a5,1
20400572:	a019                	j	20400578 <main+0x36>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11 (discriminator 2)
20400574:	fe442783          	lw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11 (discriminator 4)
20400578:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:26 (discriminator 4)

    static unsigned *tag_addr;


    // printf("Init AEAD \n");
    printf("Init Hola2\n");
2040057c:	204057b7          	lui	a5,0x20405
20400580:	6f878513          	addi	a0,a5,1784 # 204056f8 <_exit+0x10a>
20400584:	2161                	jal	20400a0c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:27 (discriminator 4)
    printf("Ad addr = %08x\n", asso_text);
20400586:	800007b7          	lui	a5,0x80000
2040058a:	00078593          	mv	a1,a5
2040058e:	204057b7          	lui	a5,0x20405
20400592:	70478513          	addi	a0,a5,1796 # 20405704 <_exit+0x116>
20400596:	246d                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:28 (discriminator 4)
    printf("Pl addr = %08x\n", plain_text);
20400598:	800007b7          	lui	a5,0x80000
2040059c:	7d078593          	addi	a1,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd440>
204005a0:	204057b7          	lui	a5,0x20405
204005a4:	71478513          	addi	a0,a5,1812 # 20405714 <_exit+0x126>
204005a8:	2c61                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:29 (discriminator 4)
    printf("Ct addr = %08x\n", cipher_text);
204005aa:	800017b7          	lui	a5,0x80001
204005ae:	74078593          	addi	a1,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
204005b2:	204057b7          	lui	a5,0x20405
204005b6:	72478513          	addi	a0,a5,1828 # 20405724 <_exit+0x136>
204005ba:	2459                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:30 (discriminator 4)
    printf("Ke addr = %08x\n", Key);
204005bc:	800017b7          	lui	a5,0x80001
204005c0:	fa078593          	addi	a1,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdc10>
204005c4:	204057b7          	lui	a5,0x20405
204005c8:	73478513          	addi	a0,a5,1844 # 20405734 <_exit+0x146>
204005cc:	2c95                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:31 (discriminator 4)
    printf("Np addr = %08x\n", Nonce);
204005ce:	800017b7          	lui	a5,0x80001
204005d2:	fb078593          	addi	a1,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdc20>
204005d6:	204057b7          	lui	a5,0x20405
204005da:	74478513          	addi	a0,a5,1860 # 20405744 <_exit+0x156>
204005de:	248d                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:33 (discriminator 4)
    unsigned start, end, HWcycles;
    int rd = 0;
204005e0:	fe042023          	sw	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:35 (discriminator 4)
    // RoCC
    start = rdcycle();
204005e4:	3931                	jal	20400200 <rdcycle>
204005e6:	87aa                	mv	a5,a0
204005e8:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:36 (discriminator 4)
    write_csr(mstatus, MSTATUS_XS); // Always initialize the CSR such that the accelerator is recognized
204005ec:	67e1                	lui	a5,0x18
204005ee:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:38 (discriminator 4)

    AEAD_ENC(asso_text, asso_len, plain_text, plain_len, cipher_text, Nonce, Key);
204005f2:	800017b7          	lui	a5,0x80001
204005f6:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdc10>
204005fa:	800017b7          	lui	a5,0x80001
204005fe:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdc20>
20400602:	80001737          	lui	a4,0x80001
20400606:	74070713          	addi	a4,a4,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
2040060a:	fec42683          	lw	a3,-20(s0)
2040060e:	80000637          	lui	a2,0x80000
20400612:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd440>
20400616:	fe842583          	lw	a1,-24(s0)
2040061a:	80000537          	lui	a0,0x80000
2040061e:	00050513          	mv	a0,a0
20400622:	3175                	jal	204002ce <AEAD_ENC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:40 (discriminator 4)

    end = rdcycle();
20400624:	3ef1                	jal	20400200 <rdcycle>
20400626:	87aa                	mv	a5,a0
20400628:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:41 (discriminator 4)
    HWcycles = end - start;
2040062c:	fd842703          	lw	a4,-40(s0)
20400630:	fdc42783          	lw	a5,-36(s0)
20400634:	40f707b3          	sub	a5,a4,a5
20400638:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:43 (discriminator 4)
    //  printf("Total time = %d cycles\n",HWcycles);
    printC(cipher_text, plain_len_int, 1, 1);
2040063c:	4685                	li	a3,1
2040063e:	4605                	li	a2,1
20400640:	fe442583          	lw	a1,-28(s0)
20400644:	800017b7          	lui	a5,0x80001
20400648:	74078513          	addi	a0,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
2040064c:	3ec9                	jal	2040021e <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:44 (discriminator 4)
    printf("\nX\n");
2040064e:	204057b7          	lui	a5,0x20405
20400652:	75478513          	addi	a0,a5,1876 # 20405754 <_exit+0x166>
20400656:	2e5d                	jal	20400a0c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:47 (discriminator 4)


    AEAD_ENC(asso_text, asso_len, plain_text, plain_len, cipher_text, Nonce, Key);
20400658:	800017b7          	lui	a5,0x80001
2040065c:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdc10>
20400660:	800017b7          	lui	a5,0x80001
20400664:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdc20>
20400668:	80001737          	lui	a4,0x80001
2040066c:	74070713          	addi	a4,a4,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
20400670:	fec42683          	lw	a3,-20(s0)
20400674:	80000637          	lui	a2,0x80000
20400678:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd440>
2040067c:	fe842583          	lw	a1,-24(s0)
20400680:	80000537          	lui	a0,0x80000
20400684:	00050513          	mv	a0,a0
20400688:	3199                	jal	204002ce <AEAD_ENC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:48 (discriminator 4)
    printC(cipher_text, plain_len_int, 1, 1);
2040068a:	4685                	li	a3,1
2040068c:	4605                	li	a2,1
2040068e:	fe442583          	lw	a1,-28(s0)
20400692:	800017b7          	lui	a5,0x80001
20400696:	74078513          	addi	a0,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
2040069a:	3651                	jal	2040021e <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:49 (discriminator 4)
    printf("\nX\n");
2040069c:	204057b7          	lui	a5,0x20405
204006a0:	75478513          	addi	a0,a5,1876 # 20405754 <_exit+0x166>
204006a4:	26a5                	jal	20400a0c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:50 (discriminator 4)
    plain_len = 1000;
204006a6:	3e800793          	li	a5,1000
204006aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:51 (discriminator 4)
    asso_len = 1000;
204006ae:	3e800793          	li	a5,1000
204006b2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:52 (discriminator 4)
    plain_len_int = plain_len / 4;
204006b6:	fec42783          	lw	a5,-20(s0)
204006ba:	8389                	srli	a5,a5,0x2
204006bc:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:53 (discriminator 4)
    plain_len_int = (plain_len % 4 == 0) ? plain_len_int : plain_len_int + 1;
204006c0:	fec42783          	lw	a5,-20(s0)
204006c4:	8b8d                	andi	a5,a5,3
204006c6:	c789                	beqz	a5,204006d0 <main+0x18e>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:53 (discriminator 1)
204006c8:	fe442783          	lw	a5,-28(s0)
204006cc:	0785                	addi	a5,a5,1
204006ce:	a019                	j	204006d4 <main+0x192>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:53 (discriminator 2)
204006d0:	fe442783          	lw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:53 (discriminator 4)
204006d4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:54 (discriminator 4)
    tag_addr = cipher_text + plain_len_int + 1;
204006d8:	fe442783          	lw	a5,-28(s0)
204006dc:	0785                	addi	a5,a5,1
204006de:	00279713          	slli	a4,a5,0x2
204006e2:	800017b7          	lui	a5,0x80001
204006e6:	74078793          	addi	a5,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
204006ea:	973e                	add	a4,a4,a5
204006ec:	800017b7          	lui	a5,0x80001
204006f0:	72e7a823          	sw	a4,1840(a5) # 80001730 <metal_segment_heap_target_end+0xffffe3a0>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:57 (discriminator 4)


    AEAD_ENC(asso_text, asso_len, plain_text, plain_len, cipher_text, Nonce, Key);
204006f4:	800017b7          	lui	a5,0x80001
204006f8:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdc10>
204006fc:	800017b7          	lui	a5,0x80001
20400700:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdc20>
20400704:	80001737          	lui	a4,0x80001
20400708:	74070713          	addi	a4,a4,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
2040070c:	fec42683          	lw	a3,-20(s0)
20400710:	80000637          	lui	a2,0x80000
20400714:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd440>
20400718:	fe842583          	lw	a1,-24(s0)
2040071c:	80000537          	lui	a0,0x80000
20400720:	00050513          	mv	a0,a0
20400724:	366d                	jal	204002ce <AEAD_ENC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:58 (discriminator 4)
    printC(cipher_text, plain_len_int, 1, 0);
20400726:	4681                	li	a3,0
20400728:	4605                	li	a2,1
2040072a:	fe442583          	lw	a1,-28(s0)
2040072e:	800017b7          	lui	a5,0x80001
20400732:	74078513          	addi	a0,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
20400736:	34e5                	jal	2040021e <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:59 (discriminator 4)
    printf("\nX\n");
20400738:	204057b7          	lui	a5,0x20405
2040073c:	75478513          	addi	a0,a5,1876 # 20405754 <_exit+0x166>
20400740:	24f1                	jal	20400a0c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:60 (discriminator 4)
    printf("Tag \n");
20400742:	204057b7          	lui	a5,0x20405
20400746:	75878513          	addi	a0,a5,1880 # 20405758 <_exit+0x16a>
2040074a:	24c9                	jal	20400a0c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:61 (discriminator 4)
    printC(tag_addr, 4, 0, 0);
2040074c:	800017b7          	lui	a5,0x80001
20400750:	7307a783          	lw	a5,1840(a5) # 80001730 <metal_segment_heap_target_end+0xffffe3a0>
20400754:	4681                	li	a3,0
20400756:	4601                	li	a2,0
20400758:	4591                	li	a1,4
2040075a:	853e                	mv	a0,a5
2040075c:	34c9                	jal	2040021e <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:63 (discriminator 4)

    unsigned rd2 = 0;
2040075e:	fc042823          	sw	zero,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:64 (discriminator 4)
    rd2 = AEAD_DEC(asso_text, asso_len, cipher_text, plain_len, dec_text, Nonce, Key, tag_addr);
20400762:	800017b7          	lui	a5,0x80001
20400766:	7307a783          	lw	a5,1840(a5) # 80001730 <metal_segment_heap_target_end+0xffffe3a0>
2040076a:	88be                	mv	a7,a5
2040076c:	800017b7          	lui	a5,0x80001
20400770:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdc10>
20400774:	800017b7          	lui	a5,0x80001
20400778:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdc20>
2040077c:	80002737          	lui	a4,0x80002
20400780:	f2070713          	addi	a4,a4,-224 # 80001f20 <metal_segment_heap_target_end+0xffffeb90>
20400784:	fec42683          	lw	a3,-20(s0)
20400788:	80001637          	lui	a2,0x80001
2040078c:	74060613          	addi	a2,a2,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
20400790:	fe842583          	lw	a1,-24(s0)
20400794:	80000537          	lui	a0,0x80000
20400798:	00050513          	mv	a0,a0
2040079c:	3185                	jal	204003fc <AEAD_DEC>
2040079e:	fca42823          	sw	a0,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:65 (discriminator 4)
    printC(dec_text, plain_len_int, 0, 0);
204007a2:	4681                	li	a3,0
204007a4:	4601                	li	a2,0
204007a6:	fe442583          	lw	a1,-28(s0)
204007aa:	800027b7          	lui	a5,0x80002
204007ae:	f2078513          	addi	a0,a5,-224 # 80001f20 <metal_segment_heap_target_end+0xffffeb90>
204007b2:	34b5                	jal	2040021e <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:66 (discriminator 4)
    printf("\n%08x\n", rd2);
204007b4:	fd042583          	lw	a1,-48(s0)
204007b8:	204057b7          	lui	a5,0x20405
204007bc:	76078513          	addi	a0,a5,1888 # 20405760 <_exit+0x172>
204007c0:	2041                	jal	20400840 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:68 (discriminator 4)
    // tag_addr = cipher_text + plain_len_int + 1;
    printC(tag_addr, 4, 0, 0);
204007c2:	800017b7          	lui	a5,0x80001
204007c6:	7307a783          	lw	a5,1840(a5) # 80001730 <metal_segment_heap_target_end+0xffffe3a0>
204007ca:	4681                	li	a3,0
204007cc:	4601                	li	a2,0
204007ce:	4591                	li	a1,4
204007d0:	853e                	mv	a0,a5
204007d2:	34b1                	jal	2040021e <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:71 (discriminator 4)


    rd2 = AEAD_DEC(asso_text, asso_len, cipher_text, plain_len, dec_text, Nonce, Key, tag_addr);
204007d4:	800017b7          	lui	a5,0x80001
204007d8:	7307a783          	lw	a5,1840(a5) # 80001730 <metal_segment_heap_target_end+0xffffe3a0>
204007dc:	88be                	mv	a7,a5
204007de:	800017b7          	lui	a5,0x80001
204007e2:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdc10>
204007e6:	800017b7          	lui	a5,0x80001
204007ea:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdc20>
204007ee:	80002737          	lui	a4,0x80002
204007f2:	f2070713          	addi	a4,a4,-224 # 80001f20 <metal_segment_heap_target_end+0xffffeb90>
204007f6:	fec42683          	lw	a3,-20(s0)
204007fa:	80001637          	lui	a2,0x80001
204007fe:	74060613          	addi	a2,a2,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
20400802:	fe842583          	lw	a1,-24(s0)
20400806:	80000537          	lui	a0,0x80000
2040080a:	00050513          	mv	a0,a0
2040080e:	36fd                	jal	204003fc <AEAD_DEC>
20400810:	fca42823          	sw	a0,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:72 (discriminator 4)
    printC(dec_text, plain_len_int, 0, 0);
20400814:	4681                	li	a3,0
20400816:	4601                	li	a2,0
20400818:	fe442583          	lw	a1,-28(s0)
2040081c:	800027b7          	lui	a5,0x80002
20400820:	f2078513          	addi	a0,a5,-224 # 80001f20 <metal_segment_heap_target_end+0xffffeb90>
20400824:	3aed                	jal	2040021e <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:73 (discriminator 4)
    printf("\n%08x\n", rd2);
20400826:	fd042583          	lw	a1,-48(s0)
2040082a:	204057b7          	lui	a5,0x20405
2040082e:	76078513          	addi	a0,a5,1888 # 20405760 <_exit+0x172>
20400832:	2039                	jal	20400840 <iprintf>
20400834:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:75 (discriminator 4)

20400836:	853e                	mv	a0,a5
20400838:	50b2                	lw	ra,44(sp)
2040083a:	5422                	lw	s0,40(sp)
2040083c:	6145                	addi	sp,sp,48
2040083e:	8082                	ret

20400840 <iprintf>:
printf():
20400840:	7139                	addi	sp,sp,-64
20400842:	da3e                	sw	a5,52(sp)
20400844:	d22e                	sw	a1,36(sp)
20400846:	d432                	sw	a2,40(sp)
20400848:	d636                	sw	a3,44(sp)
2040084a:	d83a                	sw	a4,48(sp)
2040084c:	dc42                	sw	a6,56(sp)
2040084e:	de46                	sw	a7,60(sp)
20400850:	5fc01797          	auipc	a5,0x5fc01
20400854:	eb878793          	addi	a5,a5,-328 # 80001708 <_impure_ptr>
20400858:	cc22                	sw	s0,24(sp)
2040085a:	4380                	lw	s0,0(a5)
2040085c:	ca26                	sw	s1,20(sp)
2040085e:	ce06                	sw	ra,28(sp)
20400860:	84aa                	mv	s1,a0
20400862:	c409                	beqz	s0,2040086c <iprintf+0x2c>
20400864:	4c1c                	lw	a5,24(s0)
20400866:	e399                	bnez	a5,2040086c <iprintf+0x2c>
20400868:	8522                	mv	a0,s0
2040086a:	23d5                	jal	20400e4e <__sinit>
2040086c:	440c                	lw	a1,8(s0)
2040086e:	1054                	addi	a3,sp,36
20400870:	8626                	mv	a2,s1
20400872:	8522                	mv	a0,s0
20400874:	c636                	sw	a3,12(sp)
20400876:	2df000ef          	jal	ra,20401354 <_vfiprintf_r>
2040087a:	40f2                	lw	ra,28(sp)
2040087c:	4462                	lw	s0,24(sp)
2040087e:	44d2                	lw	s1,20(sp)
20400880:	6121                	addi	sp,sp,64
20400882:	8082                	ret

20400884 <putchar>:
putchar():
20400884:	1101                	addi	sp,sp,-32
20400886:	5fc01797          	auipc	a5,0x5fc01
2040088a:	e8278793          	addi	a5,a5,-382 # 80001708 <_impure_ptr>
2040088e:	cc22                	sw	s0,24(sp)
20400890:	4380                	lw	s0,0(a5)
20400892:	ce06                	sw	ra,28(sp)
20400894:	85aa                	mv	a1,a0
20400896:	c419                	beqz	s0,204008a4 <putchar+0x20>
20400898:	4c1c                	lw	a5,24(s0)
2040089a:	e789                	bnez	a5,204008a4 <putchar+0x20>
2040089c:	c62a                	sw	a0,12(sp)
2040089e:	8522                	mv	a0,s0
204008a0:	237d                	jal	20400e4e <__sinit>
204008a2:	45b2                	lw	a1,12(sp)
204008a4:	4410                	lw	a2,8(s0)
204008a6:	8522                	mv	a0,s0
204008a8:	4462                	lw	s0,24(sp)
204008aa:	40f2                	lw	ra,28(sp)
204008ac:	6105                	addi	sp,sp,32
204008ae:	a009                	j	204008b0 <_putc_r>

204008b0 <_putc_r>:
_putc_r():
204008b0:	1101                	addi	sp,sp,-32
204008b2:	cc22                	sw	s0,24(sp)
204008b4:	ce06                	sw	ra,28(sp)
204008b6:	842a                	mv	s0,a0
204008b8:	c901                	beqz	a0,204008c8 <_putc_r+0x18>
204008ba:	4d1c                	lw	a5,24(a0)
204008bc:	e791                	bnez	a5,204008c8 <_putc_r+0x18>
204008be:	c632                	sw	a2,12(sp)
204008c0:	c42e                	sw	a1,8(sp)
204008c2:	2371                	jal	20400e4e <__sinit>
204008c4:	4632                	lw	a2,12(sp)
204008c6:	45a2                	lw	a1,8(sp)
204008c8:	00005797          	auipc	a5,0x5
204008cc:	ec078793          	addi	a5,a5,-320 # 20405788 <__sf_fake_stdin>
204008d0:	02f61563          	bne	a2,a5,204008fa <_putc_r+0x4a>
204008d4:	4050                	lw	a2,4(s0)
204008d6:	461c                	lw	a5,8(a2)
204008d8:	17fd                	addi	a5,a5,-1
204008da:	c61c                	sw	a5,8(a2)
204008dc:	0207df63          	bgez	a5,2040091a <_putc_r+0x6a>
204008e0:	4e18                	lw	a4,24(a2)
204008e2:	00e7c763          	blt	a5,a4,204008f0 <_putc_r+0x40>
204008e6:	0ff5f793          	andi	a5,a1,255
204008ea:	4729                	li	a4,10
204008ec:	02e79763          	bne	a5,a4,2040091a <_putc_r+0x6a>
204008f0:	8522                	mv	a0,s0
204008f2:	4462                	lw	s0,24(sp)
204008f4:	40f2                	lw	ra,28(sp)
204008f6:	6105                	addi	sp,sp,32
204008f8:	a20d                	j	20400a1a <__swbuf_r>
204008fa:	00005797          	auipc	a5,0x5
204008fe:	eae78793          	addi	a5,a5,-338 # 204057a8 <__sf_fake_stdout>
20400902:	00f61463          	bne	a2,a5,2040090a <_putc_r+0x5a>
20400906:	4410                	lw	a2,8(s0)
20400908:	b7f9                	j	204008d6 <_putc_r+0x26>
2040090a:	00005797          	auipc	a5,0x5
2040090e:	e5e78793          	addi	a5,a5,-418 # 20405768 <__sf_fake_stderr>
20400912:	fcf612e3          	bne	a2,a5,204008d6 <_putc_r+0x26>
20400916:	4450                	lw	a2,12(s0)
20400918:	bf7d                	j	204008d6 <_putc_r+0x26>
2040091a:	421c                	lw	a5,0(a2)
2040091c:	0ff5f513          	andi	a0,a1,255
20400920:	00178713          	addi	a4,a5,1
20400924:	c218                	sw	a4,0(a2)
20400926:	00b78023          	sb	a1,0(a5)
2040092a:	40f2                	lw	ra,28(sp)
2040092c:	4462                	lw	s0,24(sp)
2040092e:	6105                	addi	sp,sp,32
20400930:	8082                	ret

20400932 <_puts_r>:
_puts_r():
20400932:	1101                	addi	sp,sp,-32
20400934:	ca26                	sw	s1,20(sp)
20400936:	c84a                	sw	s2,16(sp)
20400938:	ce06                	sw	ra,28(sp)
2040093a:	cc22                	sw	s0,24(sp)
2040093c:	c64e                	sw	s3,12(sp)
2040093e:	c452                	sw	s4,8(sp)
20400940:	84aa                	mv	s1,a0
20400942:	892e                	mv	s2,a1
20400944:	c501                	beqz	a0,2040094c <_puts_r+0x1a>
20400946:	4d1c                	lw	a5,24(a0)
20400948:	e391                	bnez	a5,2040094c <_puts_r+0x1a>
2040094a:	2311                	jal	20400e4e <__sinit>
2040094c:	4c9c                	lw	a5,24(s1)
2040094e:	4480                	lw	s0,8(s1)
20400950:	e399                	bnez	a5,20400956 <_puts_r+0x24>
20400952:	8526                	mv	a0,s1
20400954:	29ed                	jal	20400e4e <__sinit>
20400956:	00005797          	auipc	a5,0x5
2040095a:	e3278793          	addi	a5,a5,-462 # 20405788 <__sf_fake_stdin>
2040095e:	02f41c63          	bne	s0,a5,20400996 <_puts_r+0x64>
20400962:	40c0                	lw	s0,4(s1)
20400964:	00c45783          	lhu	a5,12(s0)
20400968:	8ba1                	andi	a5,a5,8
2040096a:	c7b1                	beqz	a5,204009b6 <_puts_r+0x84>
2040096c:	481c                	lw	a5,16(s0)
2040096e:	c7a1                	beqz	a5,204009b6 <_puts_r+0x84>
20400970:	59fd                	li	s3,-1
20400972:	4a29                	li	s4,10
20400974:	441c                	lw	a5,8(s0)
20400976:	00094583          	lbu	a1,0(s2)
2040097a:	17fd                	addi	a5,a5,-1
2040097c:	e9b1                	bnez	a1,204009d0 <_puts_r+0x9e>
2040097e:	c41c                	sw	a5,8(s0)
20400980:	0607de63          	bgez	a5,204009fc <_puts_r+0xca>
20400984:	8622                	mv	a2,s0
20400986:	45a9                	li	a1,10
20400988:	8526                	mv	a0,s1
2040098a:	2841                	jal	20400a1a <__swbuf_r>
2040098c:	57fd                	li	a5,-1
2040098e:	02f50863          	beq	a0,a5,204009be <_puts_r+0x8c>
20400992:	4529                	li	a0,10
20400994:	a035                	j	204009c0 <_puts_r+0x8e>
20400996:	00005797          	auipc	a5,0x5
2040099a:	e1278793          	addi	a5,a5,-494 # 204057a8 <__sf_fake_stdout>
2040099e:	00f41463          	bne	s0,a5,204009a6 <_puts_r+0x74>
204009a2:	4480                	lw	s0,8(s1)
204009a4:	b7c1                	j	20400964 <_puts_r+0x32>
204009a6:	00005797          	auipc	a5,0x5
204009aa:	dc278793          	addi	a5,a5,-574 # 20405768 <__sf_fake_stderr>
204009ae:	faf41be3          	bne	s0,a5,20400964 <_puts_r+0x32>
204009b2:	44c0                	lw	s0,12(s1)
204009b4:	bf45                	j	20400964 <_puts_r+0x32>
204009b6:	85a2                	mv	a1,s0
204009b8:	8526                	mv	a0,s1
204009ba:	2205                	jal	20400ada <__swsetup_r>
204009bc:	d955                	beqz	a0,20400970 <_puts_r+0x3e>
204009be:	557d                	li	a0,-1
204009c0:	40f2                	lw	ra,28(sp)
204009c2:	4462                	lw	s0,24(sp)
204009c4:	44d2                	lw	s1,20(sp)
204009c6:	4942                	lw	s2,16(sp)
204009c8:	49b2                	lw	s3,12(sp)
204009ca:	4a22                	lw	s4,8(sp)
204009cc:	6105                	addi	sp,sp,32
204009ce:	8082                	ret
204009d0:	c41c                	sw	a5,8(s0)
204009d2:	0905                	addi	s2,s2,1
204009d4:	0007d763          	bgez	a5,204009e2 <_puts_r+0xb0>
204009d8:	4c18                	lw	a4,24(s0)
204009da:	00e7cb63          	blt	a5,a4,204009f0 <_puts_r+0xbe>
204009de:	01458963          	beq	a1,s4,204009f0 <_puts_r+0xbe>
204009e2:	401c                	lw	a5,0(s0)
204009e4:	00178713          	addi	a4,a5,1
204009e8:	c018                	sw	a4,0(s0)
204009ea:	00b78023          	sb	a1,0(a5)
204009ee:	b759                	j	20400974 <_puts_r+0x42>
204009f0:	8622                	mv	a2,s0
204009f2:	8526                	mv	a0,s1
204009f4:	201d                	jal	20400a1a <__swbuf_r>
204009f6:	f7351fe3          	bne	a0,s3,20400974 <_puts_r+0x42>
204009fa:	b7d1                	j	204009be <_puts_r+0x8c>
204009fc:	401c                	lw	a5,0(s0)
204009fe:	00178713          	addi	a4,a5,1
20400a02:	c018                	sw	a4,0(s0)
20400a04:	4729                	li	a4,10
20400a06:	00e78023          	sb	a4,0(a5)
20400a0a:	b761                	j	20400992 <_puts_r+0x60>

20400a0c <puts>:
puts():
20400a0c:	5fc01797          	auipc	a5,0x5fc01
20400a10:	cfc78793          	addi	a5,a5,-772 # 80001708 <_impure_ptr>
20400a14:	85aa                	mv	a1,a0
20400a16:	4388                	lw	a0,0(a5)
20400a18:	bf29                	j	20400932 <_puts_r>

20400a1a <__swbuf_r>:
__swbuf_r():
20400a1a:	1101                	addi	sp,sp,-32
20400a1c:	cc22                	sw	s0,24(sp)
20400a1e:	ca26                	sw	s1,20(sp)
20400a20:	c84a                	sw	s2,16(sp)
20400a22:	ce06                	sw	ra,28(sp)
20400a24:	c64e                	sw	s3,12(sp)
20400a26:	84aa                	mv	s1,a0
20400a28:	892e                	mv	s2,a1
20400a2a:	8432                	mv	s0,a2
20400a2c:	c501                	beqz	a0,20400a34 <__swbuf_r+0x1a>
20400a2e:	4d1c                	lw	a5,24(a0)
20400a30:	e391                	bnez	a5,20400a34 <__swbuf_r+0x1a>
20400a32:	2931                	jal	20400e4e <__sinit>
20400a34:	00005797          	auipc	a5,0x5
20400a38:	d5478793          	addi	a5,a5,-684 # 20405788 <__sf_fake_stdin>
20400a3c:	06f41963          	bne	s0,a5,20400aae <__swbuf_r+0x94>
20400a40:	40c0                	lw	s0,4(s1)
20400a42:	4c1c                	lw	a5,24(s0)
20400a44:	c41c                	sw	a5,8(s0)
20400a46:	00c45783          	lhu	a5,12(s0)
20400a4a:	8ba1                	andi	a5,a5,8
20400a4c:	c3c9                	beqz	a5,20400ace <__swbuf_r+0xb4>
20400a4e:	481c                	lw	a5,16(s0)
20400a50:	cfbd                	beqz	a5,20400ace <__swbuf_r+0xb4>
20400a52:	481c                	lw	a5,16(s0)
20400a54:	4008                	lw	a0,0(s0)
20400a56:	0ff97993          	andi	s3,s2,255
20400a5a:	0ff97913          	andi	s2,s2,255
20400a5e:	8d1d                	sub	a0,a0,a5
20400a60:	485c                	lw	a5,20(s0)
20400a62:	00f54663          	blt	a0,a5,20400a6e <__swbuf_r+0x54>
20400a66:	85a2                	mv	a1,s0
20400a68:	8526                	mv	a0,s1
20400a6a:	24e9                	jal	20400d34 <_fflush_r>
20400a6c:	e52d                	bnez	a0,20400ad6 <__swbuf_r+0xbc>
20400a6e:	441c                	lw	a5,8(s0)
20400a70:	0505                	addi	a0,a0,1
20400a72:	17fd                	addi	a5,a5,-1
20400a74:	c41c                	sw	a5,8(s0)
20400a76:	401c                	lw	a5,0(s0)
20400a78:	00178713          	addi	a4,a5,1
20400a7c:	c018                	sw	a4,0(s0)
20400a7e:	01378023          	sb	s3,0(a5)
20400a82:	485c                	lw	a5,20(s0)
20400a84:	00a78963          	beq	a5,a0,20400a96 <__swbuf_r+0x7c>
20400a88:	00c45783          	lhu	a5,12(s0)
20400a8c:	8b85                	andi	a5,a5,1
20400a8e:	cb81                	beqz	a5,20400a9e <__swbuf_r+0x84>
20400a90:	47a9                	li	a5,10
20400a92:	00f91663          	bne	s2,a5,20400a9e <__swbuf_r+0x84>
20400a96:	85a2                	mv	a1,s0
20400a98:	8526                	mv	a0,s1
20400a9a:	2c69                	jal	20400d34 <_fflush_r>
20400a9c:	ed0d                	bnez	a0,20400ad6 <__swbuf_r+0xbc>
20400a9e:	40f2                	lw	ra,28(sp)
20400aa0:	4462                	lw	s0,24(sp)
20400aa2:	854a                	mv	a0,s2
20400aa4:	44d2                	lw	s1,20(sp)
20400aa6:	4942                	lw	s2,16(sp)
20400aa8:	49b2                	lw	s3,12(sp)
20400aaa:	6105                	addi	sp,sp,32
20400aac:	8082                	ret
20400aae:	00005797          	auipc	a5,0x5
20400ab2:	cfa78793          	addi	a5,a5,-774 # 204057a8 <__sf_fake_stdout>
20400ab6:	00f41463          	bne	s0,a5,20400abe <__swbuf_r+0xa4>
20400aba:	4480                	lw	s0,8(s1)
20400abc:	b759                	j	20400a42 <__swbuf_r+0x28>
20400abe:	00005797          	auipc	a5,0x5
20400ac2:	caa78793          	addi	a5,a5,-854 # 20405768 <__sf_fake_stderr>
20400ac6:	f6f41ee3          	bne	s0,a5,20400a42 <__swbuf_r+0x28>
20400aca:	44c0                	lw	s0,12(s1)
20400acc:	bf9d                	j	20400a42 <__swbuf_r+0x28>
20400ace:	85a2                	mv	a1,s0
20400ad0:	8526                	mv	a0,s1
20400ad2:	2021                	jal	20400ada <__swsetup_r>
20400ad4:	dd3d                	beqz	a0,20400a52 <__swbuf_r+0x38>
20400ad6:	597d                	li	s2,-1
20400ad8:	b7d9                	j	20400a9e <__swbuf_r+0x84>

20400ada <__swsetup_r>:
__swsetup_r():
20400ada:	1141                	addi	sp,sp,-16
20400adc:	5fc01797          	auipc	a5,0x5fc01
20400ae0:	c2c78793          	addi	a5,a5,-980 # 80001708 <_impure_ptr>
20400ae4:	c226                	sw	s1,4(sp)
20400ae6:	4384                	lw	s1,0(a5)
20400ae8:	c422                	sw	s0,8(sp)
20400aea:	c04a                	sw	s2,0(sp)
20400aec:	c606                	sw	ra,12(sp)
20400aee:	892a                	mv	s2,a0
20400af0:	842e                	mv	s0,a1
20400af2:	c489                	beqz	s1,20400afc <__swsetup_r+0x22>
20400af4:	4c9c                	lw	a5,24(s1)
20400af6:	e399                	bnez	a5,20400afc <__swsetup_r+0x22>
20400af8:	8526                	mv	a0,s1
20400afa:	2e91                	jal	20400e4e <__sinit>
20400afc:	00005797          	auipc	a5,0x5
20400b00:	c8c78793          	addi	a5,a5,-884 # 20405788 <__sf_fake_stdin>
20400b04:	02f41c63          	bne	s0,a5,20400b3c <__swsetup_r+0x62>
20400b08:	40c0                	lw	s0,4(s1)
20400b0a:	00c41703          	lh	a4,12(s0)
20400b0e:	01071793          	slli	a5,a4,0x10
20400b12:	83c1                	srli	a5,a5,0x10
20400b14:	0087f693          	andi	a3,a5,8
20400b18:	eeb5                	bnez	a3,20400b94 <__swsetup_r+0xba>
20400b1a:	0107f693          	andi	a3,a5,16
20400b1e:	ee9d                	bnez	a3,20400b5c <__swsetup_r+0x82>
20400b20:	47a5                	li	a5,9
20400b22:	00f92023          	sw	a5,0(s2)
20400b26:	04076713          	ori	a4,a4,64
20400b2a:	00e41623          	sh	a4,12(s0)
20400b2e:	557d                	li	a0,-1
20400b30:	40b2                	lw	ra,12(sp)
20400b32:	4422                	lw	s0,8(sp)
20400b34:	4492                	lw	s1,4(sp)
20400b36:	4902                	lw	s2,0(sp)
20400b38:	0141                	addi	sp,sp,16
20400b3a:	8082                	ret
20400b3c:	00005797          	auipc	a5,0x5
20400b40:	c6c78793          	addi	a5,a5,-916 # 204057a8 <__sf_fake_stdout>
20400b44:	00f41463          	bne	s0,a5,20400b4c <__swsetup_r+0x72>
20400b48:	4480                	lw	s0,8(s1)
20400b4a:	b7c1                	j	20400b0a <__swsetup_r+0x30>
20400b4c:	00005797          	auipc	a5,0x5
20400b50:	c1c78793          	addi	a5,a5,-996 # 20405768 <__sf_fake_stderr>
20400b54:	faf41be3          	bne	s0,a5,20400b0a <__swsetup_r+0x30>
20400b58:	44c0                	lw	s0,12(s1)
20400b5a:	bf45                	j	20400b0a <__swsetup_r+0x30>
20400b5c:	8b91                	andi	a5,a5,4
20400b5e:	c78d                	beqz	a5,20400b88 <__swsetup_r+0xae>
20400b60:	584c                	lw	a1,52(s0)
20400b62:	c989                	beqz	a1,20400b74 <__swsetup_r+0x9a>
20400b64:	04440793          	addi	a5,s0,68
20400b68:	00f58463          	beq	a1,a5,20400b70 <__swsetup_r+0x96>
20400b6c:	854a                	mv	a0,s2
20400b6e:	2bc5                	jal	2040115e <_free_r>
20400b70:	02042a23          	sw	zero,52(s0)
20400b74:	00c45783          	lhu	a5,12(s0)
20400b78:	00042223          	sw	zero,4(s0)
20400b7c:	fdb7f793          	andi	a5,a5,-37
20400b80:	00f41623          	sh	a5,12(s0)
20400b84:	481c                	lw	a5,16(s0)
20400b86:	c01c                	sw	a5,0(s0)
20400b88:	00c45783          	lhu	a5,12(s0)
20400b8c:	0087e793          	ori	a5,a5,8
20400b90:	00f41623          	sh	a5,12(s0)
20400b94:	481c                	lw	a5,16(s0)
20400b96:	ef81                	bnez	a5,20400bae <__swsetup_r+0xd4>
20400b98:	00c45783          	lhu	a5,12(s0)
20400b9c:	20000713          	li	a4,512
20400ba0:	2807f793          	andi	a5,a5,640
20400ba4:	00e78563          	beq	a5,a4,20400bae <__swsetup_r+0xd4>
20400ba8:	85a2                	mv	a1,s0
20400baa:	854a                	mv	a0,s2
20400bac:	21bd                	jal	2040101a <__smakebuf_r>
20400bae:	00c45783          	lhu	a5,12(s0)
20400bb2:	0017f713          	andi	a4,a5,1
20400bb6:	c705                	beqz	a4,20400bde <__swsetup_r+0x104>
20400bb8:	485c                	lw	a5,20(s0)
20400bba:	00042423          	sw	zero,8(s0)
20400bbe:	40f007b3          	neg	a5,a5
20400bc2:	cc1c                	sw	a5,24(s0)
20400bc4:	481c                	lw	a5,16(s0)
20400bc6:	4501                	li	a0,0
20400bc8:	f7a5                	bnez	a5,20400b30 <__swsetup_r+0x56>
20400bca:	00c41783          	lh	a5,12(s0)
20400bce:	0807f713          	andi	a4,a5,128
20400bd2:	df39                	beqz	a4,20400b30 <__swsetup_r+0x56>
20400bd4:	0407e793          	ori	a5,a5,64
20400bd8:	00f41623          	sh	a5,12(s0)
20400bdc:	bf89                	j	20400b2e <__swsetup_r+0x54>
20400bde:	8b89                	andi	a5,a5,2
20400be0:	4701                	li	a4,0
20400be2:	e391                	bnez	a5,20400be6 <__swsetup_r+0x10c>
20400be4:	4858                	lw	a4,20(s0)
20400be6:	c418                	sw	a4,8(s0)
20400be8:	bff1                	j	20400bc4 <__swsetup_r+0xea>

20400bea <__sflush_r>:
__sflush_r():
20400bea:	00c5d783          	lhu	a5,12(a1)
20400bee:	1101                	addi	sp,sp,-32
20400bf0:	cc22                	sw	s0,24(sp)
20400bf2:	ca26                	sw	s1,20(sp)
20400bf4:	ce06                	sw	ra,28(sp)
20400bf6:	c84a                	sw	s2,16(sp)
20400bf8:	c64e                	sw	s3,12(sp)
20400bfa:	0087f713          	andi	a4,a5,8
20400bfe:	84aa                	mv	s1,a0
20400c00:	842e                	mv	s0,a1
20400c02:	e765                	bnez	a4,20400cea <__sflush_r+0x100>
20400c04:	41d8                	lw	a4,4(a1)
20400c06:	00e04763          	bgtz	a4,20400c14 <__sflush_r+0x2a>
20400c0a:	41b8                	lw	a4,64(a1)
20400c0c:	00e04463          	bgtz	a4,20400c14 <__sflush_r+0x2a>
20400c10:	4501                	li	a0,0
20400c12:	a0c1                	j	20400cd2 <__sflush_r+0xe8>
20400c14:	5458                	lw	a4,44(s0)
20400c16:	df6d                	beqz	a4,20400c10 <__sflush_r+0x26>
20400c18:	0004a903          	lw	s2,0(s1)
20400c1c:	01379693          	slli	a3,a5,0x13
20400c20:	0004a023          	sw	zero,0(s1)
20400c24:	0606de63          	bgez	a3,20400ca0 <__sflush_r+0xb6>
20400c28:	4868                	lw	a0,84(s0)
20400c2a:	00c45783          	lhu	a5,12(s0)
20400c2e:	8b91                	andi	a5,a5,4
20400c30:	c799                	beqz	a5,20400c3e <__sflush_r+0x54>
20400c32:	405c                	lw	a5,4(s0)
20400c34:	8d1d                	sub	a0,a0,a5
20400c36:	585c                	lw	a5,52(s0)
20400c38:	c399                	beqz	a5,20400c3e <__sflush_r+0x54>
20400c3a:	403c                	lw	a5,64(s0)
20400c3c:	8d1d                	sub	a0,a0,a5
20400c3e:	545c                	lw	a5,44(s0)
20400c40:	500c                	lw	a1,32(s0)
20400c42:	862a                	mv	a2,a0
20400c44:	4681                	li	a3,0
20400c46:	8526                	mv	a0,s1
20400c48:	9782                	jalr	a5
20400c4a:	57fd                	li	a5,-1
20400c4c:	00c45703          	lhu	a4,12(s0)
20400c50:	00f51d63          	bne	a0,a5,20400c6a <__sflush_r+0x80>
20400c54:	4094                	lw	a3,0(s1)
20400c56:	47f5                	li	a5,29
20400c58:	08d7e463          	bltu	a5,a3,20400ce0 <__sflush_r+0xf6>
20400c5c:	204007b7          	lui	a5,0x20400
20400c60:	0785                	addi	a5,a5,1
20400c62:	00d7d7b3          	srl	a5,a5,a3
20400c66:	8b85                	andi	a5,a5,1
20400c68:	cfa5                	beqz	a5,20400ce0 <__sflush_r+0xf6>
20400c6a:	481c                	lw	a5,16(s0)
20400c6c:	00042223          	sw	zero,4(s0)
20400c70:	c01c                	sw	a5,0(s0)
20400c72:	01371793          	slli	a5,a4,0x13
20400c76:	0007d863          	bgez	a5,20400c86 <__sflush_r+0x9c>
20400c7a:	57fd                	li	a5,-1
20400c7c:	00f51463          	bne	a0,a5,20400c84 <__sflush_r+0x9a>
20400c80:	409c                	lw	a5,0(s1)
20400c82:	e391                	bnez	a5,20400c86 <__sflush_r+0x9c>
20400c84:	c868                	sw	a0,84(s0)
20400c86:	584c                	lw	a1,52(s0)
20400c88:	0124a023          	sw	s2,0(s1)
20400c8c:	d1d1                	beqz	a1,20400c10 <__sflush_r+0x26>
20400c8e:	04440793          	addi	a5,s0,68
20400c92:	00f58463          	beq	a1,a5,20400c9a <__sflush_r+0xb0>
20400c96:	8526                	mv	a0,s1
20400c98:	21d9                	jal	2040115e <_free_r>
20400c9a:	02042a23          	sw	zero,52(s0)
20400c9e:	bf8d                	j	20400c10 <__sflush_r+0x26>
20400ca0:	500c                	lw	a1,32(s0)
20400ca2:	4685                	li	a3,1
20400ca4:	4601                	li	a2,0
20400ca6:	8526                	mv	a0,s1
20400ca8:	9702                	jalr	a4
20400caa:	57fd                	li	a5,-1
20400cac:	f6f51fe3          	bne	a0,a5,20400c2a <__sflush_r+0x40>
20400cb0:	409c                	lw	a5,0(s1)
20400cb2:	dfa5                	beqz	a5,20400c2a <__sflush_r+0x40>
20400cb4:	4775                	li	a4,29
20400cb6:	00e78563          	beq	a5,a4,20400cc0 <__sflush_r+0xd6>
20400cba:	4759                	li	a4,22
20400cbc:	00e79563          	bne	a5,a4,20400cc6 <__sflush_r+0xdc>
20400cc0:	0124a023          	sw	s2,0(s1)
20400cc4:	b7b1                	j	20400c10 <__sflush_r+0x26>
20400cc6:	00c45783          	lhu	a5,12(s0)
20400cca:	0407e793          	ori	a5,a5,64
20400cce:	00f41623          	sh	a5,12(s0)
20400cd2:	40f2                	lw	ra,28(sp)
20400cd4:	4462                	lw	s0,24(sp)
20400cd6:	44d2                	lw	s1,20(sp)
20400cd8:	4942                	lw	s2,16(sp)
20400cda:	49b2                	lw	s3,12(sp)
20400cdc:	6105                	addi	sp,sp,32
20400cde:	8082                	ret
20400ce0:	04076713          	ori	a4,a4,64
20400ce4:	00e41623          	sh	a4,12(s0)
20400ce8:	b7ed                	j	20400cd2 <__sflush_r+0xe8>
20400cea:	0105a983          	lw	s3,16(a1)
20400cee:	f20981e3          	beqz	s3,20400c10 <__sflush_r+0x26>
20400cf2:	0005a903          	lw	s2,0(a1)
20400cf6:	8b8d                	andi	a5,a5,3
20400cf8:	0135a023          	sw	s3,0(a1)
20400cfc:	41390933          	sub	s2,s2,s3
20400d00:	4701                	li	a4,0
20400d02:	e391                	bnez	a5,20400d06 <__sflush_r+0x11c>
20400d04:	49d8                	lw	a4,20(a1)
20400d06:	c418                	sw	a4,8(s0)
20400d08:	f12054e3          	blez	s2,20400c10 <__sflush_r+0x26>
20400d0c:	541c                	lw	a5,40(s0)
20400d0e:	500c                	lw	a1,32(s0)
20400d10:	86ca                	mv	a3,s2
20400d12:	864e                	mv	a2,s3
20400d14:	8526                	mv	a0,s1
20400d16:	9782                	jalr	a5
20400d18:	00a04a63          	bgtz	a0,20400d2c <__sflush_r+0x142>
20400d1c:	00c45783          	lhu	a5,12(s0)
20400d20:	557d                	li	a0,-1
20400d22:	0407e793          	ori	a5,a5,64
20400d26:	00f41623          	sh	a5,12(s0)
20400d2a:	b765                	j	20400cd2 <__sflush_r+0xe8>
20400d2c:	99aa                	add	s3,s3,a0
20400d2e:	40a90933          	sub	s2,s2,a0
20400d32:	bfd9                	j	20400d08 <__sflush_r+0x11e>

20400d34 <_fflush_r>:
_fflush_r():
20400d34:	499c                	lw	a5,16(a1)
20400d36:	cfb9                	beqz	a5,20400d94 <_fflush_r+0x60>
20400d38:	1101                	addi	sp,sp,-32
20400d3a:	cc22                	sw	s0,24(sp)
20400d3c:	ce06                	sw	ra,28(sp)
20400d3e:	842a                	mv	s0,a0
20400d40:	c511                	beqz	a0,20400d4c <_fflush_r+0x18>
20400d42:	4d1c                	lw	a5,24(a0)
20400d44:	e781                	bnez	a5,20400d4c <_fflush_r+0x18>
20400d46:	c62e                	sw	a1,12(sp)
20400d48:	2219                	jal	20400e4e <__sinit>
20400d4a:	45b2                	lw	a1,12(sp)
20400d4c:	00005797          	auipc	a5,0x5
20400d50:	a3c78793          	addi	a5,a5,-1476 # 20405788 <__sf_fake_stdin>
20400d54:	00f59b63          	bne	a1,a5,20400d6a <_fflush_r+0x36>
20400d58:	404c                	lw	a1,4(s0)
20400d5a:	00c59783          	lh	a5,12(a1)
20400d5e:	c795                	beqz	a5,20400d8a <_fflush_r+0x56>
20400d60:	8522                	mv	a0,s0
20400d62:	4462                	lw	s0,24(sp)
20400d64:	40f2                	lw	ra,28(sp)
20400d66:	6105                	addi	sp,sp,32
20400d68:	b549                	j	20400bea <__sflush_r>
20400d6a:	00005797          	auipc	a5,0x5
20400d6e:	a3e78793          	addi	a5,a5,-1474 # 204057a8 <__sf_fake_stdout>
20400d72:	00f59463          	bne	a1,a5,20400d7a <_fflush_r+0x46>
20400d76:	440c                	lw	a1,8(s0)
20400d78:	b7cd                	j	20400d5a <_fflush_r+0x26>
20400d7a:	00005797          	auipc	a5,0x5
20400d7e:	9ee78793          	addi	a5,a5,-1554 # 20405768 <__sf_fake_stderr>
20400d82:	fcf59ce3          	bne	a1,a5,20400d5a <_fflush_r+0x26>
20400d86:	444c                	lw	a1,12(s0)
20400d88:	bfc9                	j	20400d5a <_fflush_r+0x26>
20400d8a:	40f2                	lw	ra,28(sp)
20400d8c:	4462                	lw	s0,24(sp)
20400d8e:	4501                	li	a0,0
20400d90:	6105                	addi	sp,sp,32
20400d92:	8082                	ret
20400d94:	4501                	li	a0,0
20400d96:	8082                	ret

20400d98 <std>:
std():
20400d98:	1141                	addi	sp,sp,-16
20400d9a:	c422                	sw	s0,8(sp)
20400d9c:	c606                	sw	ra,12(sp)
20400d9e:	842a                	mv	s0,a0
20400da0:	00b51623          	sh	a1,12(a0) # 8000000c <metal_segment_heap_target_end+0xffffcc7c>
20400da4:	00c51723          	sh	a2,14(a0)
20400da8:	00052023          	sw	zero,0(a0)
20400dac:	00052223          	sw	zero,4(a0)
20400db0:	00052423          	sw	zero,8(a0)
20400db4:	06052223          	sw	zero,100(a0)
20400db8:	00052823          	sw	zero,16(a0)
20400dbc:	00052a23          	sw	zero,20(a0)
20400dc0:	00052c23          	sw	zero,24(a0)
20400dc4:	4621                	li	a2,8
20400dc6:	4581                	li	a1,0
20400dc8:	05c50513          	addi	a0,a0,92
20400dcc:	24ed                	jal	204010b6 <memset>
20400dce:	00001797          	auipc	a5,0x1
20400dd2:	84e78793          	addi	a5,a5,-1970 # 2040161c <__sread>
20400dd6:	d05c                	sw	a5,36(s0)
20400dd8:	00001797          	auipc	a5,0x1
20400ddc:	87478793          	addi	a5,a5,-1932 # 2040164c <__swrite>
20400de0:	d41c                	sw	a5,40(s0)
20400de2:	00001797          	auipc	a5,0x1
20400de6:	8b878793          	addi	a5,a5,-1864 # 2040169a <__sseek>
20400dea:	d45c                	sw	a5,44(s0)
20400dec:	00001797          	auipc	a5,0x1
20400df0:	8e478793          	addi	a5,a5,-1820 # 204016d0 <__sclose>
20400df4:	d000                	sw	s0,32(s0)
20400df6:	d81c                	sw	a5,48(s0)
20400df8:	40b2                	lw	ra,12(sp)
20400dfa:	4422                	lw	s0,8(sp)
20400dfc:	0141                	addi	sp,sp,16
20400dfe:	8082                	ret

20400e00 <_cleanup_r>:
_cleanup_r():
20400e00:	00000597          	auipc	a1,0x0
20400e04:	f3458593          	addi	a1,a1,-204 # 20400d34 <_fflush_r>
20400e08:	a2b9                	j	20400f56 <_fwalk_reent>

20400e0a <__sfmoreglue>:
__sfmoreglue():
20400e0a:	1141                	addi	sp,sp,-16
20400e0c:	c226                	sw	s1,4(sp)
20400e0e:	06800613          	li	a2,104
20400e12:	fff58493          	addi	s1,a1,-1
20400e16:	02c484b3          	mul	s1,s1,a2
20400e1a:	c04a                	sw	s2,0(sp)
20400e1c:	892e                	mv	s2,a1
20400e1e:	c422                	sw	s0,8(sp)
20400e20:	c606                	sw	ra,12(sp)
20400e22:	07448593          	addi	a1,s1,116
20400e26:	26d5                	jal	2040120a <_malloc_r>
20400e28:	842a                	mv	s0,a0
20400e2a:	c919                	beqz	a0,20400e40 <__sfmoreglue+0x36>
20400e2c:	00052023          	sw	zero,0(a0)
20400e30:	01252223          	sw	s2,4(a0)
20400e34:	0531                	addi	a0,a0,12
20400e36:	c408                	sw	a0,8(s0)
20400e38:	06848613          	addi	a2,s1,104
20400e3c:	4581                	li	a1,0
20400e3e:	2ca5                	jal	204010b6 <memset>
20400e40:	8522                	mv	a0,s0
20400e42:	40b2                	lw	ra,12(sp)
20400e44:	4422                	lw	s0,8(sp)
20400e46:	4492                	lw	s1,4(sp)
20400e48:	4902                	lw	s2,0(sp)
20400e4a:	0141                	addi	sp,sp,16
20400e4c:	8082                	ret

20400e4e <__sinit>:
__sinit():
20400e4e:	4d1c                	lw	a5,24(a0)
20400e50:	e3bd                	bnez	a5,20400eb6 <__sinit+0x68>
20400e52:	1141                	addi	sp,sp,-16
20400e54:	c606                	sw	ra,12(sp)
20400e56:	c422                	sw	s0,8(sp)
20400e58:	00000797          	auipc	a5,0x0
20400e5c:	fa878793          	addi	a5,a5,-88 # 20400e00 <_cleanup_r>
20400e60:	d51c                	sw	a5,40(a0)
20400e62:	5fc01797          	auipc	a5,0x5fc01
20400e66:	8aa78793          	addi	a5,a5,-1878 # 8000170c <_global_impure_ptr>
20400e6a:	439c                	lw	a5,0(a5)
20400e6c:	04052423          	sw	zero,72(a0)
20400e70:	04052623          	sw	zero,76(a0)
20400e74:	04052823          	sw	zero,80(a0)
20400e78:	00f51463          	bne	a0,a5,20400e80 <__sinit+0x32>
20400e7c:	4785                	li	a5,1
20400e7e:	cd1c                	sw	a5,24(a0)
20400e80:	842a                	mv	s0,a0
20400e82:	281d                	jal	20400eb8 <__sfp>
20400e84:	c048                	sw	a0,4(s0)
20400e86:	8522                	mv	a0,s0
20400e88:	2805                	jal	20400eb8 <__sfp>
20400e8a:	c408                	sw	a0,8(s0)
20400e8c:	8522                	mv	a0,s0
20400e8e:	202d                	jal	20400eb8 <__sfp>
20400e90:	c448                	sw	a0,12(s0)
20400e92:	4048                	lw	a0,4(s0)
20400e94:	4601                	li	a2,0
20400e96:	4591                	li	a1,4
20400e98:	3701                	jal	20400d98 <std>
20400e9a:	4408                	lw	a0,8(s0)
20400e9c:	4605                	li	a2,1
20400e9e:	45a5                	li	a1,9
20400ea0:	3de5                	jal	20400d98 <std>
20400ea2:	4448                	lw	a0,12(s0)
20400ea4:	4609                	li	a2,2
20400ea6:	45c9                	li	a1,18
20400ea8:	3dc5                	jal	20400d98 <std>
20400eaa:	4785                	li	a5,1
20400eac:	cc1c                	sw	a5,24(s0)
20400eae:	40b2                	lw	ra,12(sp)
20400eb0:	4422                	lw	s0,8(sp)
20400eb2:	0141                	addi	sp,sp,16
20400eb4:	8082                	ret
20400eb6:	8082                	ret

20400eb8 <__sfp>:
__sfp():
20400eb8:	1141                	addi	sp,sp,-16
20400eba:	5fc01797          	auipc	a5,0x5fc01
20400ebe:	85278793          	addi	a5,a5,-1966 # 8000170c <_global_impure_ptr>
20400ec2:	c226                	sw	s1,4(sp)
20400ec4:	4384                	lw	s1,0(a5)
20400ec6:	c04a                	sw	s2,0(sp)
20400ec8:	c606                	sw	ra,12(sp)
20400eca:	4c9c                	lw	a5,24(s1)
20400ecc:	c422                	sw	s0,8(sp)
20400ece:	892a                	mv	s2,a0
20400ed0:	e399                	bnez	a5,20400ed6 <__sfp+0x1e>
20400ed2:	8526                	mv	a0,s1
20400ed4:	3fad                	jal	20400e4e <__sinit>
20400ed6:	04848493          	addi	s1,s1,72
20400eda:	4480                	lw	s0,8(s1)
20400edc:	40dc                	lw	a5,4(s1)
20400ede:	17fd                	addi	a5,a5,-1
20400ee0:	0007d663          	bgez	a5,20400eec <__sfp+0x34>
20400ee4:	409c                	lw	a5,0(s1)
20400ee6:	cfb1                	beqz	a5,20400f42 <__sfp+0x8a>
20400ee8:	4084                	lw	s1,0(s1)
20400eea:	bfc5                	j	20400eda <__sfp+0x22>
20400eec:	00c41703          	lh	a4,12(s0)
20400ef0:	e731                	bnez	a4,20400f3c <__sfp+0x84>
20400ef2:	77c1                	lui	a5,0xffff0
20400ef4:	0785                	addi	a5,a5,1
20400ef6:	06042223          	sw	zero,100(s0)
20400efa:	00042023          	sw	zero,0(s0)
20400efe:	00042223          	sw	zero,4(s0)
20400f02:	00042423          	sw	zero,8(s0)
20400f06:	c45c                	sw	a5,12(s0)
20400f08:	00042823          	sw	zero,16(s0)
20400f0c:	00042a23          	sw	zero,20(s0)
20400f10:	00042c23          	sw	zero,24(s0)
20400f14:	4621                	li	a2,8
20400f16:	4581                	li	a1,0
20400f18:	05c40513          	addi	a0,s0,92
20400f1c:	2a69                	jal	204010b6 <memset>
20400f1e:	02042a23          	sw	zero,52(s0)
20400f22:	02042c23          	sw	zero,56(s0)
20400f26:	04042423          	sw	zero,72(s0)
20400f2a:	04042623          	sw	zero,76(s0)
20400f2e:	8522                	mv	a0,s0
20400f30:	40b2                	lw	ra,12(sp)
20400f32:	4422                	lw	s0,8(sp)
20400f34:	4492                	lw	s1,4(sp)
20400f36:	4902                	lw	s2,0(sp)
20400f38:	0141                	addi	sp,sp,16
20400f3a:	8082                	ret
20400f3c:	06840413          	addi	s0,s0,104
20400f40:	bf79                	j	20400ede <__sfp+0x26>
20400f42:	4591                	li	a1,4
20400f44:	854a                	mv	a0,s2
20400f46:	35d1                	jal	20400e0a <__sfmoreglue>
20400f48:	c088                	sw	a0,0(s1)
20400f4a:	842a                	mv	s0,a0
20400f4c:	fd51                	bnez	a0,20400ee8 <__sfp+0x30>
20400f4e:	47b1                	li	a5,12
20400f50:	00f92023          	sw	a5,0(s2)
20400f54:	bfe9                	j	20400f2e <__sfp+0x76>

20400f56 <_fwalk_reent>:
_fwalk_reent():
20400f56:	7179                	addi	sp,sp,-48
20400f58:	d422                	sw	s0,40(sp)
20400f5a:	d04a                	sw	s2,32(sp)
20400f5c:	cc52                	sw	s4,24(sp)
20400f5e:	ca56                	sw	s5,20(sp)
20400f60:	c85a                	sw	s6,16(sp)
20400f62:	c65e                	sw	s7,12(sp)
20400f64:	d606                	sw	ra,44(sp)
20400f66:	d226                	sw	s1,36(sp)
20400f68:	ce4e                	sw	s3,28(sp)
20400f6a:	8a2a                	mv	s4,a0
20400f6c:	8aae                	mv	s5,a1
20400f6e:	04850413          	addi	s0,a0,72
20400f72:	4901                	li	s2,0
20400f74:	4b05                	li	s6,1
20400f76:	5bfd                	li	s7,-1
20400f78:	ec09                	bnez	s0,20400f92 <_fwalk_reent+0x3c>
20400f7a:	50b2                	lw	ra,44(sp)
20400f7c:	5422                	lw	s0,40(sp)
20400f7e:	854a                	mv	a0,s2
20400f80:	5492                	lw	s1,36(sp)
20400f82:	5902                	lw	s2,32(sp)
20400f84:	49f2                	lw	s3,28(sp)
20400f86:	4a62                	lw	s4,24(sp)
20400f88:	4ad2                	lw	s5,20(sp)
20400f8a:	4b42                	lw	s6,16(sp)
20400f8c:	4bb2                	lw	s7,12(sp)
20400f8e:	6145                	addi	sp,sp,48
20400f90:	8082                	ret
20400f92:	4404                	lw	s1,8(s0)
20400f94:	00442983          	lw	s3,4(s0)
20400f98:	19fd                	addi	s3,s3,-1
20400f9a:	0009d463          	bgez	s3,20400fa2 <_fwalk_reent+0x4c>
20400f9e:	4000                	lw	s0,0(s0)
20400fa0:	bfe1                	j	20400f78 <_fwalk_reent+0x22>
20400fa2:	00c4d783          	lhu	a5,12(s1)
20400fa6:	00fb7b63          	bgeu	s6,a5,20400fbc <_fwalk_reent+0x66>
20400faa:	00e49783          	lh	a5,14(s1)
20400fae:	01778763          	beq	a5,s7,20400fbc <_fwalk_reent+0x66>
20400fb2:	85a6                	mv	a1,s1
20400fb4:	8552                	mv	a0,s4
20400fb6:	9a82                	jalr	s5
20400fb8:	00a96933          	or	s2,s2,a0
20400fbc:	06848493          	addi	s1,s1,104
20400fc0:	bfe1                	j	20400f98 <_fwalk_reent+0x42>

20400fc2 <__swhatbuf_r>:
__swhatbuf_r():
20400fc2:	7119                	addi	sp,sp,-128
20400fc4:	daa6                	sw	s1,116(sp)
20400fc6:	84ae                	mv	s1,a1
20400fc8:	00e59583          	lh	a1,14(a1)
20400fcc:	dca2                	sw	s0,120(sp)
20400fce:	de86                	sw	ra,124(sp)
20400fd0:	8432                	mv	s0,a2
20400fd2:	0005dc63          	bgez	a1,20400fea <__swhatbuf_r+0x28>
20400fd6:	00c4d783          	lhu	a5,12(s1)
20400fda:	0006a023          	sw	zero,0(a3)
20400fde:	0807f793          	andi	a5,a5,128
20400fe2:	e39d                	bnez	a5,20401008 <__swhatbuf_r+0x46>
20400fe4:	40000793          	li	a5,1024
20400fe8:	a015                	j	2040100c <__swhatbuf_r+0x4a>
20400fea:	0830                	addi	a2,sp,24
20400fec:	c636                	sw	a3,12(sp)
20400fee:	27b1                	jal	2040173a <_fstat_r>
20400ff0:	46b2                	lw	a3,12(sp)
20400ff2:	fe0542e3          	bltz	a0,20400fd6 <__swhatbuf_r+0x14>
20400ff6:	4772                	lw	a4,28(sp)
20400ff8:	67bd                	lui	a5,0xf
20400ffa:	8ff9                	and	a5,a5,a4
20400ffc:	7779                	lui	a4,0xffffe
20400ffe:	97ba                	add	a5,a5,a4
20401000:	0017b793          	seqz	a5,a5
20401004:	c29c                	sw	a5,0(a3)
20401006:	bff9                	j	20400fe4 <__swhatbuf_r+0x22>
20401008:	04000793          	li	a5,64
2040100c:	c01c                	sw	a5,0(s0)
2040100e:	50f6                	lw	ra,124(sp)
20401010:	5466                	lw	s0,120(sp)
20401012:	54d6                	lw	s1,116(sp)
20401014:	4501                	li	a0,0
20401016:	6109                	addi	sp,sp,128
20401018:	8082                	ret

2040101a <__smakebuf_r>:
__smakebuf_r():
2040101a:	00c5d783          	lhu	a5,12(a1)
2040101e:	1101                	addi	sp,sp,-32
20401020:	cc22                	sw	s0,24(sp)
20401022:	ce06                	sw	ra,28(sp)
20401024:	ca26                	sw	s1,20(sp)
20401026:	c84a                	sw	s2,16(sp)
20401028:	8b89                	andi	a5,a5,2
2040102a:	842e                	mv	s0,a1
2040102c:	cf89                	beqz	a5,20401046 <__smakebuf_r+0x2c>
2040102e:	04740793          	addi	a5,s0,71
20401032:	c01c                	sw	a5,0(s0)
20401034:	c81c                	sw	a5,16(s0)
20401036:	4785                	li	a5,1
20401038:	c85c                	sw	a5,20(s0)
2040103a:	40f2                	lw	ra,28(sp)
2040103c:	4462                	lw	s0,24(sp)
2040103e:	44d2                	lw	s1,20(sp)
20401040:	4942                	lw	s2,16(sp)
20401042:	6105                	addi	sp,sp,32
20401044:	8082                	ret
20401046:	0074                	addi	a3,sp,12
20401048:	0030                	addi	a2,sp,8
2040104a:	84aa                	mv	s1,a0
2040104c:	3f9d                	jal	20400fc2 <__swhatbuf_r>
2040104e:	45a2                	lw	a1,8(sp)
20401050:	892a                	mv	s2,a0
20401052:	8526                	mv	a0,s1
20401054:	2a5d                	jal	2040120a <_malloc_r>
20401056:	ed01                	bnez	a0,2040106e <__smakebuf_r+0x54>
20401058:	00c41783          	lh	a5,12(s0)
2040105c:	2007f713          	andi	a4,a5,512
20401060:	ff69                	bnez	a4,2040103a <__smakebuf_r+0x20>
20401062:	9bf1                	andi	a5,a5,-4
20401064:	0027e793          	ori	a5,a5,2
20401068:	00f41623          	sh	a5,12(s0)
2040106c:	b7c9                	j	2040102e <__smakebuf_r+0x14>
2040106e:	00000797          	auipc	a5,0x0
20401072:	d9278793          	addi	a5,a5,-622 # 20400e00 <_cleanup_r>
20401076:	d49c                	sw	a5,40(s1)
20401078:	00c45783          	lhu	a5,12(s0)
2040107c:	c008                	sw	a0,0(s0)
2040107e:	c808                	sw	a0,16(s0)
20401080:	0807e793          	ori	a5,a5,128
20401084:	00f41623          	sh	a5,12(s0)
20401088:	47a2                	lw	a5,8(sp)
2040108a:	c85c                	sw	a5,20(s0)
2040108c:	47b2                	lw	a5,12(sp)
2040108e:	cf89                	beqz	a5,204010a8 <__smakebuf_r+0x8e>
20401090:	00e41583          	lh	a1,14(s0)
20401094:	8526                	mv	a0,s1
20401096:	2dd9                	jal	2040176c <_isatty_r>
20401098:	c901                	beqz	a0,204010a8 <__smakebuf_r+0x8e>
2040109a:	00c45783          	lhu	a5,12(s0)
2040109e:	9bf1                	andi	a5,a5,-4
204010a0:	0017e793          	ori	a5,a5,1
204010a4:	00f41623          	sh	a5,12(s0)
204010a8:	00c45783          	lhu	a5,12(s0)
204010ac:	00f96933          	or	s2,s2,a5
204010b0:	01241623          	sh	s2,12(s0)
204010b4:	b759                	j	2040103a <__smakebuf_r+0x20>

204010b6 <memset>:
memset():
204010b6:	433d                	li	t1,15
204010b8:	872a                	mv	a4,a0
204010ba:	02c37363          	bgeu	t1,a2,204010e0 <memset+0x2a>
204010be:	00f77793          	andi	a5,a4,15
204010c2:	efbd                	bnez	a5,20401140 <memset+0x8a>
204010c4:	e5ad                	bnez	a1,2040112e <memset+0x78>
204010c6:	ff067693          	andi	a3,a2,-16
204010ca:	8a3d                	andi	a2,a2,15
204010cc:	96ba                	add	a3,a3,a4
204010ce:	c30c                	sw	a1,0(a4)
204010d0:	c34c                	sw	a1,4(a4)
204010d2:	c70c                	sw	a1,8(a4)
204010d4:	c74c                	sw	a1,12(a4)
204010d6:	0741                	addi	a4,a4,16
204010d8:	fed76be3          	bltu	a4,a3,204010ce <memset+0x18>
204010dc:	e211                	bnez	a2,204010e0 <memset+0x2a>
204010de:	8082                	ret
204010e0:	40c306b3          	sub	a3,t1,a2
204010e4:	068a                	slli	a3,a3,0x2
204010e6:	00000297          	auipc	t0,0x0
204010ea:	9696                	add	a3,a3,t0
204010ec:	00a68067          	jr	10(a3)
204010f0:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffac7e>
204010f4:	00b706a3          	sb	a1,13(a4)
204010f8:	00b70623          	sb	a1,12(a4)
204010fc:	00b705a3          	sb	a1,11(a4)
20401100:	00b70523          	sb	a1,10(a4)
20401104:	00b704a3          	sb	a1,9(a4)
20401108:	00b70423          	sb	a1,8(a4)
2040110c:	00b703a3          	sb	a1,7(a4)
20401110:	00b70323          	sb	a1,6(a4)
20401114:	00b702a3          	sb	a1,5(a4)
20401118:	00b70223          	sb	a1,4(a4)
2040111c:	00b701a3          	sb	a1,3(a4)
20401120:	00b70123          	sb	a1,2(a4)
20401124:	00b700a3          	sb	a1,1(a4)
20401128:	00b70023          	sb	a1,0(a4)
2040112c:	8082                	ret
2040112e:	0ff5f593          	andi	a1,a1,255
20401132:	00859693          	slli	a3,a1,0x8
20401136:	8dd5                	or	a1,a1,a3
20401138:	01059693          	slli	a3,a1,0x10
2040113c:	8dd5                	or	a1,a1,a3
2040113e:	b761                	j	204010c6 <memset+0x10>
20401140:	00279693          	slli	a3,a5,0x2
20401144:	00000297          	auipc	t0,0x0
20401148:	9696                	add	a3,a3,t0
2040114a:	8286                	mv	t0,ra
2040114c:	fa8680e7          	jalr	-88(a3)
20401150:	8096                	mv	ra,t0
20401152:	17c1                	addi	a5,a5,-16
20401154:	8f1d                	sub	a4,a4,a5
20401156:	963e                	add	a2,a2,a5
20401158:	f8c374e3          	bgeu	t1,a2,204010e0 <memset+0x2a>
2040115c:	b7a5                	j	204010c4 <memset+0xe>

2040115e <_free_r>:
_free_r():
2040115e:	c5cd                	beqz	a1,20401208 <_free_r+0xaa>
20401160:	ffc5a783          	lw	a5,-4(a1)
20401164:	1141                	addi	sp,sp,-16
20401166:	c422                	sw	s0,8(sp)
20401168:	c606                	sw	ra,12(sp)
2040116a:	c226                	sw	s1,4(sp)
2040116c:	ffc58413          	addi	s0,a1,-4
20401170:	0007d363          	bgez	a5,20401176 <_free_r+0x18>
20401174:	943e                	add	s0,s0,a5
20401176:	84aa                	mv	s1,a0
20401178:	2d8d                	jal	204017ea <__malloc_lock>
2040117a:	5fc00797          	auipc	a5,0x5fc00
2040117e:	5ba78793          	addi	a5,a5,1466 # 80001734 <__malloc_free_list>
20401182:	439c                	lw	a5,0(a5)
20401184:	ef89                	bnez	a5,2040119e <_free_r+0x40>
20401186:	00042223          	sw	zero,4(s0)
2040118a:	5fc00797          	auipc	a5,0x5fc00
2040118e:	5a87a523          	sw	s0,1450(a5) # 80001734 <__malloc_free_list>
20401192:	4422                	lw	s0,8(sp)
20401194:	40b2                	lw	ra,12(sp)
20401196:	8526                	mv	a0,s1
20401198:	4492                	lw	s1,4(sp)
2040119a:	0141                	addi	sp,sp,16
2040119c:	ad81                	j	204017ec <__malloc_unlock>
2040119e:	00f47e63          	bgeu	s0,a5,204011ba <_free_r+0x5c>
204011a2:	4014                	lw	a3,0(s0)
204011a4:	00d40733          	add	a4,s0,a3
204011a8:	00e79663          	bne	a5,a4,204011b4 <_free_r+0x56>
204011ac:	4398                	lw	a4,0(a5)
204011ae:	43dc                	lw	a5,4(a5)
204011b0:	9736                	add	a4,a4,a3
204011b2:	c018                	sw	a4,0(s0)
204011b4:	c05c                	sw	a5,4(s0)
204011b6:	bfd1                	j	2040118a <_free_r+0x2c>
204011b8:	87ba                	mv	a5,a4
204011ba:	43d8                	lw	a4,4(a5)
204011bc:	c319                	beqz	a4,204011c2 <_free_r+0x64>
204011be:	fee47de3          	bgeu	s0,a4,204011b8 <_free_r+0x5a>
204011c2:	4394                	lw	a3,0(a5)
204011c4:	00d78633          	add	a2,a5,a3
204011c8:	00861f63          	bne	a2,s0,204011e6 <_free_r+0x88>
204011cc:	4010                	lw	a2,0(s0)
204011ce:	96b2                	add	a3,a3,a2
204011d0:	c394                	sw	a3,0(a5)
204011d2:	00d78633          	add	a2,a5,a3
204011d6:	fac71ee3          	bne	a4,a2,20401192 <_free_r+0x34>
204011da:	4310                	lw	a2,0(a4)
204011dc:	4358                	lw	a4,4(a4)
204011de:	96b2                	add	a3,a3,a2
204011e0:	c394                	sw	a3,0(a5)
204011e2:	c3d8                	sw	a4,4(a5)
204011e4:	b77d                	j	20401192 <_free_r+0x34>
204011e6:	00c47563          	bgeu	s0,a2,204011f0 <_free_r+0x92>
204011ea:	47b1                	li	a5,12
204011ec:	c09c                	sw	a5,0(s1)
204011ee:	b755                	j	20401192 <_free_r+0x34>
204011f0:	4010                	lw	a2,0(s0)
204011f2:	00c406b3          	add	a3,s0,a2
204011f6:	00d71663          	bne	a4,a3,20401202 <_free_r+0xa4>
204011fa:	4314                	lw	a3,0(a4)
204011fc:	4358                	lw	a4,4(a4)
204011fe:	96b2                	add	a3,a3,a2
20401200:	c014                	sw	a3,0(s0)
20401202:	c058                	sw	a4,4(s0)
20401204:	c3c0                	sw	s0,4(a5)
20401206:	b771                	j	20401192 <_free_r+0x34>
20401208:	8082                	ret

2040120a <_malloc_r>:
_malloc_r():
2040120a:	1101                	addi	sp,sp,-32
2040120c:	ca26                	sw	s1,20(sp)
2040120e:	00358493          	addi	s1,a1,3
20401212:	98f1                	andi	s1,s1,-4
20401214:	ce06                	sw	ra,28(sp)
20401216:	cc22                	sw	s0,24(sp)
20401218:	c84a                	sw	s2,16(sp)
2040121a:	c64e                	sw	s3,12(sp)
2040121c:	04a1                	addi	s1,s1,8
2040121e:	47b1                	li	a5,12
20401220:	04f4f763          	bgeu	s1,a5,2040126e <_malloc_r+0x64>
20401224:	44b1                	li	s1,12
20401226:	04b4e663          	bltu	s1,a1,20401272 <_malloc_r+0x68>
2040122a:	892a                	mv	s2,a0
2040122c:	2b7d                	jal	204017ea <__malloc_lock>
2040122e:	5fc00797          	auipc	a5,0x5fc00
20401232:	50678793          	addi	a5,a5,1286 # 80001734 <__malloc_free_list>
20401236:	4398                	lw	a4,0(a5)
20401238:	843a                	mv	s0,a4
2040123a:	e431                	bnez	s0,20401286 <_malloc_r+0x7c>
2040123c:	5fc00797          	auipc	a5,0x5fc00
20401240:	4fc78793          	addi	a5,a5,1276 # 80001738 <__malloc_sbrk_start>
20401244:	439c                	lw	a5,0(a5)
20401246:	eb81                	bnez	a5,20401256 <_malloc_r+0x4c>
20401248:	4581                	li	a1,0
2040124a:	854a                	mv	a0,s2
2040124c:	2645                	jal	204015ec <_sbrk_r>
2040124e:	5fc00797          	auipc	a5,0x5fc00
20401252:	4ea7a523          	sw	a0,1258(a5) # 80001738 <__malloc_sbrk_start>
20401256:	85a6                	mv	a1,s1
20401258:	854a                	mv	a0,s2
2040125a:	2e49                	jal	204015ec <_sbrk_r>
2040125c:	59fd                	li	s3,-1
2040125e:	07351963          	bne	a0,s3,204012d0 <_malloc_r+0xc6>
20401262:	47b1                	li	a5,12
20401264:	00f92023          	sw	a5,0(s2)
20401268:	854a                	mv	a0,s2
2040126a:	2349                	jal	204017ec <__malloc_unlock>
2040126c:	a029                	j	20401276 <_malloc_r+0x6c>
2040126e:	fa04dce3          	bgez	s1,20401226 <_malloc_r+0x1c>
20401272:	47b1                	li	a5,12
20401274:	c11c                	sw	a5,0(a0)
20401276:	4501                	li	a0,0
20401278:	40f2                	lw	ra,28(sp)
2040127a:	4462                	lw	s0,24(sp)
2040127c:	44d2                	lw	s1,20(sp)
2040127e:	4942                	lw	s2,16(sp)
20401280:	49b2                	lw	s3,12(sp)
20401282:	6105                	addi	sp,sp,32
20401284:	8082                	ret
20401286:	401c                	lw	a5,0(s0)
20401288:	8f85                	sub	a5,a5,s1
2040128a:	0407c063          	bltz	a5,204012ca <_malloc_r+0xc0>
2040128e:	46ad                	li	a3,11
20401290:	00f6f663          	bgeu	a3,a5,2040129c <_malloc_r+0x92>
20401294:	c01c                	sw	a5,0(s0)
20401296:	943e                	add	s0,s0,a5
20401298:	c004                	sw	s1,0(s0)
2040129a:	a801                	j	204012aa <_malloc_r+0xa0>
2040129c:	405c                	lw	a5,4(s0)
2040129e:	02871463          	bne	a4,s0,204012c6 <_malloc_r+0xbc>
204012a2:	5fc00717          	auipc	a4,0x5fc00
204012a6:	48f72923          	sw	a5,1170(a4) # 80001734 <__malloc_free_list>
204012aa:	854a                	mv	a0,s2
204012ac:	2381                	jal	204017ec <__malloc_unlock>
204012ae:	00b40513          	addi	a0,s0,11
204012b2:	00440793          	addi	a5,s0,4
204012b6:	9961                	andi	a0,a0,-8
204012b8:	40f50733          	sub	a4,a0,a5
204012bc:	df55                	beqz	a4,20401278 <_malloc_r+0x6e>
204012be:	943a                	add	s0,s0,a4
204012c0:	8f89                	sub	a5,a5,a0
204012c2:	c01c                	sw	a5,0(s0)
204012c4:	bf55                	j	20401278 <_malloc_r+0x6e>
204012c6:	c35c                	sw	a5,4(a4)
204012c8:	b7cd                	j	204012aa <_malloc_r+0xa0>
204012ca:	8722                	mv	a4,s0
204012cc:	4040                	lw	s0,4(s0)
204012ce:	b7b5                	j	2040123a <_malloc_r+0x30>
204012d0:	00350413          	addi	s0,a0,3
204012d4:	9871                	andi	s0,s0,-4
204012d6:	fc8501e3          	beq	a0,s0,20401298 <_malloc_r+0x8e>
204012da:	40a405b3          	sub	a1,s0,a0
204012de:	854a                	mv	a0,s2
204012e0:	2631                	jal	204015ec <_sbrk_r>
204012e2:	fb351be3          	bne	a0,s3,20401298 <_malloc_r+0x8e>
204012e6:	bfb5                	j	20401262 <_malloc_r+0x58>

204012e8 <__sfputc_r>:
__sfputc_r():
204012e8:	461c                	lw	a5,8(a2)
204012ea:	17fd                	addi	a5,a5,-1
204012ec:	c61c                	sw	a5,8(a2)
204012ee:	0007da63          	bgez	a5,20401302 <__sfputc_r+0x1a>
204012f2:	4e18                	lw	a4,24(a2)
204012f4:	00e7c563          	blt	a5,a4,204012fe <__sfputc_r+0x16>
204012f8:	47a9                	li	a5,10
204012fa:	00f59463          	bne	a1,a5,20401302 <__sfputc_r+0x1a>
204012fe:	f1cff06f          	j	20400a1a <__swbuf_r>
20401302:	421c                	lw	a5,0(a2)
20401304:	852e                	mv	a0,a1
20401306:	00178713          	addi	a4,a5,1
2040130a:	c218                	sw	a4,0(a2)
2040130c:	00b78023          	sb	a1,0(a5)
20401310:	8082                	ret

20401312 <__sfputs_r>:
__sfputs_r():
20401312:	1101                	addi	sp,sp,-32
20401314:	cc22                	sw	s0,24(sp)
20401316:	ca26                	sw	s1,20(sp)
20401318:	c84a                	sw	s2,16(sp)
2040131a:	c64e                	sw	s3,12(sp)
2040131c:	c452                	sw	s4,8(sp)
2040131e:	ce06                	sw	ra,28(sp)
20401320:	892a                	mv	s2,a0
20401322:	89ae                	mv	s3,a1
20401324:	8432                	mv	s0,a2
20401326:	00d604b3          	add	s1,a2,a3
2040132a:	5a7d                	li	s4,-1
2040132c:	00941463          	bne	s0,s1,20401334 <__sfputs_r+0x22>
20401330:	4501                	li	a0,0
20401332:	a809                	j	20401344 <__sfputs_r+0x32>
20401334:	00044583          	lbu	a1,0(s0)
20401338:	864e                	mv	a2,s3
2040133a:	854a                	mv	a0,s2
2040133c:	3775                	jal	204012e8 <__sfputc_r>
2040133e:	0405                	addi	s0,s0,1
20401340:	ff4516e3          	bne	a0,s4,2040132c <__sfputs_r+0x1a>
20401344:	40f2                	lw	ra,28(sp)
20401346:	4462                	lw	s0,24(sp)
20401348:	44d2                	lw	s1,20(sp)
2040134a:	4942                	lw	s2,16(sp)
2040134c:	49b2                	lw	s3,12(sp)
2040134e:	4a22                	lw	s4,8(sp)
20401350:	6105                	addi	sp,sp,32
20401352:	8082                	ret

20401354 <_vfiprintf_r>:
_vfiprintf_r():
20401354:	7135                	addi	sp,sp,-160
20401356:	cd22                	sw	s0,152(sp)
20401358:	cb26                	sw	s1,148(sp)
2040135a:	c94a                	sw	s2,144(sp)
2040135c:	c74e                	sw	s3,140(sp)
2040135e:	cf06                	sw	ra,156(sp)
20401360:	c552                	sw	s4,136(sp)
20401362:	c356                	sw	s5,132(sp)
20401364:	c15a                	sw	s6,128(sp)
20401366:	dede                	sw	s7,124(sp)
20401368:	dce2                	sw	s8,120(sp)
2040136a:	dae6                	sw	s9,116(sp)
2040136c:	89aa                	mv	s3,a0
2040136e:	84ae                	mv	s1,a1
20401370:	8932                	mv	s2,a2
20401372:	8436                	mv	s0,a3
20401374:	c501                	beqz	a0,2040137c <_vfiprintf_r+0x28>
20401376:	4d1c                	lw	a5,24(a0)
20401378:	e391                	bnez	a5,2040137c <_vfiprintf_r+0x28>
2040137a:	3cd1                	jal	20400e4e <__sinit>
2040137c:	00004797          	auipc	a5,0x4
20401380:	40c78793          	addi	a5,a5,1036 # 20405788 <__sf_fake_stdin>
20401384:	0cf49b63          	bne	s1,a5,2040145a <_vfiprintf_r+0x106>
20401388:	0049a483          	lw	s1,4(s3)
2040138c:	00c4d783          	lhu	a5,12(s1)
20401390:	8ba1                	andi	a5,a5,8
20401392:	c7f5                	beqz	a5,2040147e <_vfiprintf_r+0x12a>
20401394:	489c                	lw	a5,16(s1)
20401396:	c7e5                	beqz	a5,2040147e <_vfiprintf_r+0x12a>
20401398:	02000793          	li	a5,32
2040139c:	02f104a3          	sb	a5,41(sp)
204013a0:	03000793          	li	a5,48
204013a4:	d202                	sw	zero,36(sp)
204013a6:	02f10523          	sb	a5,42(sp)
204013aa:	c622                	sw	s0,12(sp)
204013ac:	02500b93          	li	s7,37
204013b0:	00004a97          	auipc	s5,0x4
204013b4:	418a8a93          	addi	s5,s5,1048 # 204057c8 <__sf_fake_stdout+0x20>
204013b8:	4c05                	li	s8,1
204013ba:	4b29                	li	s6,10
204013bc:	844a                	mv	s0,s2
204013be:	00044783          	lbu	a5,0(s0)
204013c2:	c399                	beqz	a5,204013c8 <_vfiprintf_r+0x74>
204013c4:	0f779063          	bne	a5,s7,204014a4 <_vfiprintf_r+0x150>
204013c8:	41240cb3          	sub	s9,s0,s2
204013cc:	000c8d63          	beqz	s9,204013e6 <_vfiprintf_r+0x92>
204013d0:	86e6                	mv	a3,s9
204013d2:	864a                	mv	a2,s2
204013d4:	85a6                	mv	a1,s1
204013d6:	854e                	mv	a0,s3
204013d8:	3f2d                	jal	20401312 <__sfputs_r>
204013da:	57fd                	li	a5,-1
204013dc:	1ef50663          	beq	a0,a5,204015c8 <_vfiprintf_r+0x274>
204013e0:	5692                	lw	a3,36(sp)
204013e2:	96e6                	add	a3,a3,s9
204013e4:	d236                	sw	a3,36(sp)
204013e6:	00044783          	lbu	a5,0(s0)
204013ea:	1c078f63          	beqz	a5,204015c8 <_vfiprintf_r+0x274>
204013ee:	57fd                	li	a5,-1
204013f0:	00140913          	addi	s2,s0,1
204013f4:	c802                	sw	zero,16(sp)
204013f6:	ce02                	sw	zero,28(sp)
204013f8:	ca3e                	sw	a5,20(sp)
204013fa:	cc02                	sw	zero,24(sp)
204013fc:	040109a3          	sb	zero,83(sp)
20401400:	d482                	sw	zero,104(sp)
20401402:	00094583          	lbu	a1,0(s2)
20401406:	4615                	li	a2,5
20401408:	8556                	mv	a0,s5
2040140a:	26d9                	jal	204017d0 <memchr>
2040140c:	00190413          	addi	s0,s2,1
20401410:	47c2                	lw	a5,16(sp)
20401412:	e959                	bnez	a0,204014a8 <_vfiprintf_r+0x154>
20401414:	0107f713          	andi	a4,a5,16
20401418:	c709                	beqz	a4,20401422 <_vfiprintf_r+0xce>
2040141a:	02000713          	li	a4,32
2040141e:	04e109a3          	sb	a4,83(sp)
20401422:	0087f713          	andi	a4,a5,8
20401426:	c709                	beqz	a4,20401430 <_vfiprintf_r+0xdc>
20401428:	02b00713          	li	a4,43
2040142c:	04e109a3          	sb	a4,83(sp)
20401430:	00094683          	lbu	a3,0(s2)
20401434:	02a00713          	li	a4,42
20401438:	08e68063          	beq	a3,a4,204014b8 <_vfiprintf_r+0x164>
2040143c:	47f2                	lw	a5,28(sp)
2040143e:	844a                	mv	s0,s2
20401440:	4681                	li	a3,0
20401442:	4625                	li	a2,9
20401444:	00044703          	lbu	a4,0(s0)
20401448:	00140593          	addi	a1,s0,1
2040144c:	fd070713          	addi	a4,a4,-48
20401450:	0ae67963          	bgeu	a2,a4,20401502 <_vfiprintf_r+0x1ae>
20401454:	cab5                	beqz	a3,204014c8 <_vfiprintf_r+0x174>
20401456:	ce3e                	sw	a5,28(sp)
20401458:	a885                	j	204014c8 <_vfiprintf_r+0x174>
2040145a:	00004797          	auipc	a5,0x4
2040145e:	34e78793          	addi	a5,a5,846 # 204057a8 <__sf_fake_stdout>
20401462:	00f49563          	bne	s1,a5,2040146c <_vfiprintf_r+0x118>
20401466:	0089a483          	lw	s1,8(s3)
2040146a:	b70d                	j	2040138c <_vfiprintf_r+0x38>
2040146c:	00004797          	auipc	a5,0x4
20401470:	2fc78793          	addi	a5,a5,764 # 20405768 <__sf_fake_stderr>
20401474:	f0f49ce3          	bne	s1,a5,2040138c <_vfiprintf_r+0x38>
20401478:	00c9a483          	lw	s1,12(s3)
2040147c:	bf01                	j	2040138c <_vfiprintf_r+0x38>
2040147e:	85a6                	mv	a1,s1
20401480:	854e                	mv	a0,s3
20401482:	e58ff0ef          	jal	ra,20400ada <__swsetup_r>
20401486:	d909                	beqz	a0,20401398 <_vfiprintf_r+0x44>
20401488:	557d                	li	a0,-1
2040148a:	40fa                	lw	ra,156(sp)
2040148c:	446a                	lw	s0,152(sp)
2040148e:	44da                	lw	s1,148(sp)
20401490:	494a                	lw	s2,144(sp)
20401492:	49ba                	lw	s3,140(sp)
20401494:	4a2a                	lw	s4,136(sp)
20401496:	4a9a                	lw	s5,132(sp)
20401498:	4b0a                	lw	s6,128(sp)
2040149a:	5bf6                	lw	s7,124(sp)
2040149c:	5c66                	lw	s8,120(sp)
2040149e:	5cd6                	lw	s9,116(sp)
204014a0:	610d                	addi	sp,sp,160
204014a2:	8082                	ret
204014a4:	0405                	addi	s0,s0,1
204014a6:	bf21                	j	204013be <_vfiprintf_r+0x6a>
204014a8:	41550533          	sub	a0,a0,s5
204014ac:	00ac1533          	sll	a0,s8,a0
204014b0:	8fc9                	or	a5,a5,a0
204014b2:	c83e                	sw	a5,16(sp)
204014b4:	8922                	mv	s2,s0
204014b6:	b7b1                	j	20401402 <_vfiprintf_r+0xae>
204014b8:	4732                	lw	a4,12(sp)
204014ba:	00470693          	addi	a3,a4,4
204014be:	4318                	lw	a4,0(a4)
204014c0:	c636                	sw	a3,12(sp)
204014c2:	02074963          	bltz	a4,204014f4 <_vfiprintf_r+0x1a0>
204014c6:	ce3a                	sw	a4,28(sp)
204014c8:	00044703          	lbu	a4,0(s0)
204014cc:	02e00793          	li	a5,46
204014d0:	04f71f63          	bne	a4,a5,2040152e <_vfiprintf_r+0x1da>
204014d4:	00144703          	lbu	a4,1(s0)
204014d8:	02a00793          	li	a5,42
204014dc:	02f71b63          	bne	a4,a5,20401512 <_vfiprintf_r+0x1be>
204014e0:	47b2                	lw	a5,12(sp)
204014e2:	0409                	addi	s0,s0,2
204014e4:	00478713          	addi	a4,a5,4
204014e8:	439c                	lw	a5,0(a5)
204014ea:	c63a                	sw	a4,12(sp)
204014ec:	0207c163          	bltz	a5,2040150e <_vfiprintf_r+0x1ba>
204014f0:	ca3e                	sw	a5,20(sp)
204014f2:	a835                	j	2040152e <_vfiprintf_r+0x1da>
204014f4:	40e00733          	neg	a4,a4
204014f8:	0027e793          	ori	a5,a5,2
204014fc:	ce3a                	sw	a4,28(sp)
204014fe:	c83e                	sw	a5,16(sp)
20401500:	b7e1                	j	204014c8 <_vfiprintf_r+0x174>
20401502:	036787b3          	mul	a5,a5,s6
20401506:	4685                	li	a3,1
20401508:	842e                	mv	s0,a1
2040150a:	97ba                	add	a5,a5,a4
2040150c:	bf25                	j	20401444 <_vfiprintf_r+0xf0>
2040150e:	57fd                	li	a5,-1
20401510:	b7c5                	j	204014f0 <_vfiprintf_r+0x19c>
20401512:	0405                	addi	s0,s0,1
20401514:	ca02                	sw	zero,20(sp)
20401516:	4681                	li	a3,0
20401518:	4781                	li	a5,0
2040151a:	4625                	li	a2,9
2040151c:	00044703          	lbu	a4,0(s0)
20401520:	00140593          	addi	a1,s0,1
20401524:	fd070713          	addi	a4,a4,-48
20401528:	06e67663          	bgeu	a2,a4,20401594 <_vfiprintf_r+0x240>
2040152c:	f2f1                	bnez	a3,204014f0 <_vfiprintf_r+0x19c>
2040152e:	00044583          	lbu	a1,0(s0)
20401532:	460d                	li	a2,3
20401534:	00004517          	auipc	a0,0x4
20401538:	29c50513          	addi	a0,a0,668 # 204057d0 <__sf_fake_stdout+0x28>
2040153c:	2c51                	jal	204017d0 <memchr>
2040153e:	cd11                	beqz	a0,2040155a <_vfiprintf_r+0x206>
20401540:	00004797          	auipc	a5,0x4
20401544:	29078793          	addi	a5,a5,656 # 204057d0 <__sf_fake_stdout+0x28>
20401548:	8d1d                	sub	a0,a0,a5
2040154a:	04000793          	li	a5,64
2040154e:	00a797b3          	sll	a5,a5,a0
20401552:	4542                	lw	a0,16(sp)
20401554:	0405                	addi	s0,s0,1
20401556:	8d5d                	or	a0,a0,a5
20401558:	c82a                	sw	a0,16(sp)
2040155a:	00044583          	lbu	a1,0(s0)
2040155e:	4619                	li	a2,6
20401560:	00004517          	auipc	a0,0x4
20401564:	27450513          	addi	a0,a0,628 # 204057d4 <__sf_fake_stdout+0x2c>
20401568:	00140913          	addi	s2,s0,1
2040156c:	02b10423          	sb	a1,40(sp)
20401570:	2485                	jal	204017d0 <memchr>
20401572:	c13d                	beqz	a0,204015d8 <_vfiprintf_r+0x284>
20401574:	dfbff797          	auipc	a5,0xdfbff
20401578:	a8c78793          	addi	a5,a5,-1396 # 0 <__metal_boot_hart>
2040157c:	e795                	bnez	a5,204015a8 <_vfiprintf_r+0x254>
2040157e:	4742                	lw	a4,16(sp)
20401580:	47b2                	lw	a5,12(sp)
20401582:	10077713          	andi	a4,a4,256
20401586:	cf09                	beqz	a4,204015a0 <_vfiprintf_r+0x24c>
20401588:	0791                	addi	a5,a5,4
2040158a:	c63e                	sw	a5,12(sp)
2040158c:	5792                	lw	a5,36(sp)
2040158e:	97d2                	add	a5,a5,s4
20401590:	d23e                	sw	a5,36(sp)
20401592:	b52d                	j	204013bc <_vfiprintf_r+0x68>
20401594:	036787b3          	mul	a5,a5,s6
20401598:	4685                	li	a3,1
2040159a:	842e                	mv	s0,a1
2040159c:	97ba                	add	a5,a5,a4
2040159e:	bfbd                	j	2040151c <_vfiprintf_r+0x1c8>
204015a0:	079d                	addi	a5,a5,7
204015a2:	9be1                	andi	a5,a5,-8
204015a4:	07a1                	addi	a5,a5,8
204015a6:	b7d5                	j	2040158a <_vfiprintf_r+0x236>
204015a8:	0078                	addi	a4,sp,12
204015aa:	00000697          	auipc	a3,0x0
204015ae:	d6868693          	addi	a3,a3,-664 # 20401312 <__sfputs_r>
204015b2:	8626                	mv	a2,s1
204015b4:	080c                	addi	a1,sp,16
204015b6:	854e                	mv	a0,s3
204015b8:	00000097          	auipc	ra,0x0
204015bc:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
204015c0:	57fd                	li	a5,-1
204015c2:	8a2a                	mv	s4,a0
204015c4:	fcf514e3          	bne	a0,a5,2040158c <_vfiprintf_r+0x238>
204015c8:	00c4d783          	lhu	a5,12(s1)
204015cc:	0407f793          	andi	a5,a5,64
204015d0:	ea079ce3          	bnez	a5,20401488 <_vfiprintf_r+0x134>
204015d4:	5512                	lw	a0,36(sp)
204015d6:	bd55                	j	2040148a <_vfiprintf_r+0x136>
204015d8:	0078                	addi	a4,sp,12
204015da:	00000697          	auipc	a3,0x0
204015de:	d3868693          	addi	a3,a3,-712 # 20401312 <__sfputs_r>
204015e2:	8626                	mv	a2,s1
204015e4:	080c                	addi	a1,sp,16
204015e6:	854e                	mv	a0,s3
204015e8:	2e09                	jal	204018fa <_printf_i>
204015ea:	bfd9                	j	204015c0 <_vfiprintf_r+0x26c>

204015ec <_sbrk_r>:
_sbrk_r():
204015ec:	1141                	addi	sp,sp,-16
204015ee:	c422                	sw	s0,8(sp)
204015f0:	842a                	mv	s0,a0
204015f2:	852e                	mv	a0,a1
204015f4:	5fc01797          	auipc	a5,0x5fc01
204015f8:	1807ac23          	sw	zero,408(a5) # 8000278c <errno>
204015fc:	c606                	sw	ra,12(sp)
204015fe:	2579                	jal	20401c8c <_sbrk>
20401600:	57fd                	li	a5,-1
20401602:	00f51963          	bne	a0,a5,20401614 <_sbrk_r+0x28>
20401606:	5fc01797          	auipc	a5,0x5fc01
2040160a:	18678793          	addi	a5,a5,390 # 8000278c <errno>
2040160e:	439c                	lw	a5,0(a5)
20401610:	c391                	beqz	a5,20401614 <_sbrk_r+0x28>
20401612:	c01c                	sw	a5,0(s0)
20401614:	40b2                	lw	ra,12(sp)
20401616:	4422                	lw	s0,8(sp)
20401618:	0141                	addi	sp,sp,16
2040161a:	8082                	ret

2040161c <__sread>:
__sread():
2040161c:	1141                	addi	sp,sp,-16
2040161e:	c422                	sw	s0,8(sp)
20401620:	842e                	mv	s0,a1
20401622:	00e59583          	lh	a1,14(a1)
20401626:	c606                	sw	ra,12(sp)
20401628:	2b95                	jal	20401b9c <_read_r>
2040162a:	00054963          	bltz	a0,2040163c <__sread+0x20>
2040162e:	487c                	lw	a5,84(s0)
20401630:	97aa                	add	a5,a5,a0
20401632:	c87c                	sw	a5,84(s0)
20401634:	40b2                	lw	ra,12(sp)
20401636:	4422                	lw	s0,8(sp)
20401638:	0141                	addi	sp,sp,16
2040163a:	8082                	ret
2040163c:	00c45783          	lhu	a5,12(s0)
20401640:	777d                	lui	a4,0xfffff
20401642:	177d                	addi	a4,a4,-1
20401644:	8ff9                	and	a5,a5,a4
20401646:	00f41623          	sh	a5,12(s0)
2040164a:	b7ed                	j	20401634 <__sread+0x18>

2040164c <__swrite>:
__swrite():
2040164c:	00c5d783          	lhu	a5,12(a1)
20401650:	1101                	addi	sp,sp,-32
20401652:	cc22                	sw	s0,24(sp)
20401654:	ca26                	sw	s1,20(sp)
20401656:	c84a                	sw	s2,16(sp)
20401658:	c64e                	sw	s3,12(sp)
2040165a:	ce06                	sw	ra,28(sp)
2040165c:	1007f793          	andi	a5,a5,256
20401660:	84aa                	mv	s1,a0
20401662:	842e                	mv	s0,a1
20401664:	8932                	mv	s2,a2
20401666:	89b6                	mv	s3,a3
20401668:	c791                	beqz	a5,20401674 <__swrite+0x28>
2040166a:	00e59583          	lh	a1,14(a1)
2040166e:	4689                	li	a3,2
20401670:	4601                	li	a2,0
20401672:	222d                	jal	2040179c <_lseek_r>
20401674:	00c45783          	lhu	a5,12(s0)
20401678:	777d                	lui	a4,0xfffff
2040167a:	177d                	addi	a4,a4,-1
2040167c:	8ff9                	and	a5,a5,a4
2040167e:	00f41623          	sh	a5,12(s0)
20401682:	00e41583          	lh	a1,14(s0)
20401686:	4462                	lw	s0,24(sp)
20401688:	40f2                	lw	ra,28(sp)
2040168a:	86ce                	mv	a3,s3
2040168c:	864a                	mv	a2,s2
2040168e:	49b2                	lw	s3,12(sp)
20401690:	4942                	lw	s2,16(sp)
20401692:	8526                	mv	a0,s1
20401694:	44d2                	lw	s1,20(sp)
20401696:	6105                	addi	sp,sp,32
20401698:	a83d                	j	204016d6 <_write_r>

2040169a <__sseek>:
__sseek():
2040169a:	1141                	addi	sp,sp,-16
2040169c:	c422                	sw	s0,8(sp)
2040169e:	842e                	mv	s0,a1
204016a0:	00e59583          	lh	a1,14(a1)
204016a4:	c606                	sw	ra,12(sp)
204016a6:	28dd                	jal	2040179c <_lseek_r>
204016a8:	57fd                	li	a5,-1
204016aa:	00c45703          	lhu	a4,12(s0)
204016ae:	00f51b63          	bne	a0,a5,204016c4 <__sseek+0x2a>
204016b2:	77fd                	lui	a5,0xfffff
204016b4:	17fd                	addi	a5,a5,-1
204016b6:	8ff9                	and	a5,a5,a4
204016b8:	00f41623          	sh	a5,12(s0)
204016bc:	40b2                	lw	ra,12(sp)
204016be:	4422                	lw	s0,8(sp)
204016c0:	0141                	addi	sp,sp,16
204016c2:	8082                	ret
204016c4:	6785                	lui	a5,0x1
204016c6:	8fd9                	or	a5,a5,a4
204016c8:	00f41623          	sh	a5,12(s0)
204016cc:	c868                	sw	a0,84(s0)
204016ce:	b7fd                	j	204016bc <__sseek+0x22>

204016d0 <__sclose>:
__sclose():
204016d0:	00e59583          	lh	a1,14(a1)
204016d4:	a81d                	j	2040170a <_close_r>

204016d6 <_write_r>:
_write_r():
204016d6:	1141                	addi	sp,sp,-16
204016d8:	c422                	sw	s0,8(sp)
204016da:	842a                	mv	s0,a0
204016dc:	852e                	mv	a0,a1
204016de:	85b2                	mv	a1,a2
204016e0:	8636                	mv	a2,a3
204016e2:	5fc01797          	auipc	a5,0x5fc01
204016e6:	0a07a523          	sw	zero,170(a5) # 8000278c <errno>
204016ea:	c606                	sw	ra,12(sp)
204016ec:	2d39                	jal	20401d0a <_write>
204016ee:	57fd                	li	a5,-1
204016f0:	00f51963          	bne	a0,a5,20401702 <_write_r+0x2c>
204016f4:	5fc01797          	auipc	a5,0x5fc01
204016f8:	09878793          	addi	a5,a5,152 # 8000278c <errno>
204016fc:	439c                	lw	a5,0(a5)
204016fe:	c391                	beqz	a5,20401702 <_write_r+0x2c>
20401700:	c01c                	sw	a5,0(s0)
20401702:	40b2                	lw	ra,12(sp)
20401704:	4422                	lw	s0,8(sp)
20401706:	0141                	addi	sp,sp,16
20401708:	8082                	ret

2040170a <_close_r>:
_close_r():
2040170a:	1141                	addi	sp,sp,-16
2040170c:	c422                	sw	s0,8(sp)
2040170e:	842a                	mv	s0,a0
20401710:	852e                	mv	a0,a1
20401712:	5fc01797          	auipc	a5,0x5fc01
20401716:	0607ad23          	sw	zero,122(a5) # 8000278c <errno>
2040171a:	c606                	sw	ra,12(sp)
2040171c:	2955                	jal	20401bd0 <_close>
2040171e:	57fd                	li	a5,-1
20401720:	00f51963          	bne	a0,a5,20401732 <_close_r+0x28>
20401724:	5fc01797          	auipc	a5,0x5fc01
20401728:	06878793          	addi	a5,a5,104 # 8000278c <errno>
2040172c:	439c                	lw	a5,0(a5)
2040172e:	c391                	beqz	a5,20401732 <_close_r+0x28>
20401730:	c01c                	sw	a5,0(s0)
20401732:	40b2                	lw	ra,12(sp)
20401734:	4422                	lw	s0,8(sp)
20401736:	0141                	addi	sp,sp,16
20401738:	8082                	ret

2040173a <_fstat_r>:
_fstat_r():
2040173a:	1141                	addi	sp,sp,-16
2040173c:	c422                	sw	s0,8(sp)
2040173e:	842a                	mv	s0,a0
20401740:	852e                	mv	a0,a1
20401742:	85b2                	mv	a1,a2
20401744:	5fc01797          	auipc	a5,0x5fc01
20401748:	0407a423          	sw	zero,72(a5) # 8000278c <errno>
2040174c:	c606                	sw	ra,12(sp)
2040174e:	2155                	jal	20401bf2 <_fstat>
20401750:	57fd                	li	a5,-1
20401752:	00f51963          	bne	a0,a5,20401764 <_fstat_r+0x2a>
20401756:	5fc01797          	auipc	a5,0x5fc01
2040175a:	03678793          	addi	a5,a5,54 # 8000278c <errno>
2040175e:	439c                	lw	a5,0(a5)
20401760:	c391                	beqz	a5,20401764 <_fstat_r+0x2a>
20401762:	c01c                	sw	a5,0(s0)
20401764:	40b2                	lw	ra,12(sp)
20401766:	4422                	lw	s0,8(sp)
20401768:	0141                	addi	sp,sp,16
2040176a:	8082                	ret

2040176c <_isatty_r>:
_isatty_r():
2040176c:	1141                	addi	sp,sp,-16
2040176e:	c422                	sw	s0,8(sp)
20401770:	842a                	mv	s0,a0
20401772:	852e                	mv	a0,a1
20401774:	5fc01797          	auipc	a5,0x5fc01
20401778:	0007ac23          	sw	zero,24(a5) # 8000278c <errno>
2040177c:	c606                	sw	ra,12(sp)
2040177e:	2969                	jal	20401c18 <_isatty>
20401780:	57fd                	li	a5,-1
20401782:	00f51963          	bne	a0,a5,20401794 <_isatty_r+0x28>
20401786:	5fc01797          	auipc	a5,0x5fc01
2040178a:	00678793          	addi	a5,a5,6 # 8000278c <errno>
2040178e:	439c                	lw	a5,0(a5)
20401790:	c391                	beqz	a5,20401794 <_isatty_r+0x28>
20401792:	c01c                	sw	a5,0(s0)
20401794:	40b2                	lw	ra,12(sp)
20401796:	4422                	lw	s0,8(sp)
20401798:	0141                	addi	sp,sp,16
2040179a:	8082                	ret

2040179c <_lseek_r>:
_lseek_r():
2040179c:	1141                	addi	sp,sp,-16
2040179e:	c422                	sw	s0,8(sp)
204017a0:	842a                	mv	s0,a0
204017a2:	852e                	mv	a0,a1
204017a4:	85b2                	mv	a1,a2
204017a6:	8636                	mv	a2,a3
204017a8:	5fc01797          	auipc	a5,0x5fc01
204017ac:	fe07a223          	sw	zero,-28(a5) # 8000278c <errno>
204017b0:	c606                	sw	ra,12(sp)
204017b2:	2159                	jal	20401c38 <_lseek>
204017b4:	57fd                	li	a5,-1
204017b6:	00f51963          	bne	a0,a5,204017c8 <_lseek_r+0x2c>
204017ba:	5fc01797          	auipc	a5,0x5fc01
204017be:	fd278793          	addi	a5,a5,-46 # 8000278c <errno>
204017c2:	439c                	lw	a5,0(a5)
204017c4:	c391                	beqz	a5,204017c8 <_lseek_r+0x2c>
204017c6:	c01c                	sw	a5,0(s0)
204017c8:	40b2                	lw	ra,12(sp)
204017ca:	4422                	lw	s0,8(sp)
204017cc:	0141                	addi	sp,sp,16
204017ce:	8082                	ret

204017d0 <memchr>:
memchr():
204017d0:	0ff5f593          	andi	a1,a1,255
204017d4:	962a                	add	a2,a2,a0
204017d6:	00c51463          	bne	a0,a2,204017de <memchr+0xe>
204017da:	4501                	li	a0,0
204017dc:	8082                	ret
204017de:	00054783          	lbu	a5,0(a0)
204017e2:	feb78de3          	beq	a5,a1,204017dc <memchr+0xc>
204017e6:	0505                	addi	a0,a0,1
204017e8:	b7fd                	j	204017d6 <memchr+0x6>

204017ea <__malloc_lock>:
__malloc_lock():
204017ea:	8082                	ret

204017ec <__malloc_unlock>:
__malloc_unlock():
204017ec:	8082                	ret

204017ee <_printf_common>:
_printf_common():
204017ee:	7179                	addi	sp,sp,-48
204017f0:	ca56                	sw	s5,20(sp)
204017f2:	499c                	lw	a5,16(a1)
204017f4:	8aba                	mv	s5,a4
204017f6:	4598                	lw	a4,8(a1)
204017f8:	d422                	sw	s0,40(sp)
204017fa:	d226                	sw	s1,36(sp)
204017fc:	ce4e                	sw	s3,28(sp)
204017fe:	cc52                	sw	s4,24(sp)
20401800:	d606                	sw	ra,44(sp)
20401802:	d04a                	sw	s2,32(sp)
20401804:	c85a                	sw	s6,16(sp)
20401806:	c65e                	sw	s7,12(sp)
20401808:	89aa                	mv	s3,a0
2040180a:	842e                	mv	s0,a1
2040180c:	84b2                	mv	s1,a2
2040180e:	8a36                	mv	s4,a3
20401810:	00e7d363          	bge	a5,a4,20401816 <_printf_common+0x28>
20401814:	87ba                	mv	a5,a4
20401816:	c09c                	sw	a5,0(s1)
20401818:	04344703          	lbu	a4,67(s0)
2040181c:	c319                	beqz	a4,20401822 <_printf_common+0x34>
2040181e:	0785                	addi	a5,a5,1
20401820:	c09c                	sw	a5,0(s1)
20401822:	401c                	lw	a5,0(s0)
20401824:	0207f793          	andi	a5,a5,32
20401828:	c781                	beqz	a5,20401830 <_printf_common+0x42>
2040182a:	409c                	lw	a5,0(s1)
2040182c:	0789                	addi	a5,a5,2
2040182e:	c09c                	sw	a5,0(s1)
20401830:	00042903          	lw	s2,0(s0)
20401834:	00697913          	andi	s2,s2,6
20401838:	00091a63          	bnez	s2,2040184c <_printf_common+0x5e>
2040183c:	01940b13          	addi	s6,s0,25
20401840:	5bfd                	li	s7,-1
20401842:	445c                	lw	a5,12(s0)
20401844:	4098                	lw	a4,0(s1)
20401846:	8f99                	sub	a5,a5,a4
20401848:	04f94c63          	blt	s2,a5,204018a0 <_printf_common+0xb2>
2040184c:	401c                	lw	a5,0(s0)
2040184e:	04344683          	lbu	a3,67(s0)
20401852:	0207f793          	andi	a5,a5,32
20401856:	00d036b3          	snez	a3,a3
2040185a:	eba5                	bnez	a5,204018ca <_printf_common+0xdc>
2040185c:	04340613          	addi	a2,s0,67
20401860:	85d2                	mv	a1,s4
20401862:	854e                	mv	a0,s3
20401864:	9a82                	jalr	s5
20401866:	57fd                	li	a5,-1
20401868:	04f50363          	beq	a0,a5,204018ae <_printf_common+0xc0>
2040186c:	401c                	lw	a5,0(s0)
2040186e:	4611                	li	a2,4
20401870:	4098                	lw	a4,0(s1)
20401872:	8b99                	andi	a5,a5,6
20401874:	4454                	lw	a3,12(s0)
20401876:	4481                	li	s1,0
20401878:	00c79763          	bne	a5,a2,20401886 <_printf_common+0x98>
2040187c:	40e684b3          	sub	s1,a3,a4
20401880:	0004d363          	bgez	s1,20401886 <_printf_common+0x98>
20401884:	4481                	li	s1,0
20401886:	441c                	lw	a5,8(s0)
20401888:	4818                	lw	a4,16(s0)
2040188a:	00f75463          	bge	a4,a5,20401892 <_printf_common+0xa4>
2040188e:	8f99                	sub	a5,a5,a4
20401890:	94be                	add	s1,s1,a5
20401892:	4901                	li	s2,0
20401894:	0469                	addi	s0,s0,26
20401896:	5b7d                	li	s6,-1
20401898:	05249863          	bne	s1,s2,204018e8 <_printf_common+0xfa>
2040189c:	4501                	li	a0,0
2040189e:	a809                	j	204018b0 <_printf_common+0xc2>
204018a0:	4685                	li	a3,1
204018a2:	865a                	mv	a2,s6
204018a4:	85d2                	mv	a1,s4
204018a6:	854e                	mv	a0,s3
204018a8:	9a82                	jalr	s5
204018aa:	01751e63          	bne	a0,s7,204018c6 <_printf_common+0xd8>
204018ae:	557d                	li	a0,-1
204018b0:	50b2                	lw	ra,44(sp)
204018b2:	5422                	lw	s0,40(sp)
204018b4:	5492                	lw	s1,36(sp)
204018b6:	5902                	lw	s2,32(sp)
204018b8:	49f2                	lw	s3,28(sp)
204018ba:	4a62                	lw	s4,24(sp)
204018bc:	4ad2                	lw	s5,20(sp)
204018be:	4b42                	lw	s6,16(sp)
204018c0:	4bb2                	lw	s7,12(sp)
204018c2:	6145                	addi	sp,sp,48
204018c4:	8082                	ret
204018c6:	0905                	addi	s2,s2,1
204018c8:	bfad                	j	20401842 <_printf_common+0x54>
204018ca:	00d40733          	add	a4,s0,a3
204018ce:	03000613          	li	a2,48
204018d2:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffbcb3>
204018d6:	04544703          	lbu	a4,69(s0)
204018da:	00168793          	addi	a5,a3,1
204018de:	97a2                	add	a5,a5,s0
204018e0:	0689                	addi	a3,a3,2
204018e2:	04e781a3          	sb	a4,67(a5)
204018e6:	bf9d                	j	2040185c <_printf_common+0x6e>
204018e8:	4685                	li	a3,1
204018ea:	8622                	mv	a2,s0
204018ec:	85d2                	mv	a1,s4
204018ee:	854e                	mv	a0,s3
204018f0:	9a82                	jalr	s5
204018f2:	fb650ee3          	beq	a0,s6,204018ae <_printf_common+0xc0>
204018f6:	0905                	addi	s2,s2,1
204018f8:	b745                	j	20401898 <_printf_common+0xaa>

204018fa <_printf_i>:
_printf_i():
204018fa:	7179                	addi	sp,sp,-48
204018fc:	d422                	sw	s0,40(sp)
204018fe:	d226                	sw	s1,36(sp)
20401900:	d04a                	sw	s2,32(sp)
20401902:	ce4e                	sw	s3,28(sp)
20401904:	d606                	sw	ra,44(sp)
20401906:	cc52                	sw	s4,24(sp)
20401908:	ca56                	sw	s5,20(sp)
2040190a:	c85a                	sw	s6,16(sp)
2040190c:	89b6                	mv	s3,a3
2040190e:	0185c683          	lbu	a3,24(a1)
20401912:	06e00793          	li	a5,110
20401916:	8932                	mv	s2,a2
20401918:	84aa                	mv	s1,a0
2040191a:	842e                	mv	s0,a1
2040191c:	04358613          	addi	a2,a1,67
20401920:	1ef68063          	beq	a3,a5,20401b00 <_printf_i+0x206>
20401924:	06d7e263          	bltu	a5,a3,20401988 <_printf_i+0x8e>
20401928:	06300793          	li	a5,99
2040192c:	0af68263          	beq	a3,a5,204019d0 <_printf_i+0xd6>
20401930:	00d7ed63          	bltu	a5,a3,2040194a <_printf_i+0x50>
20401934:	1e068a63          	beqz	a3,20401b28 <_printf_i+0x22e>
20401938:	05800793          	li	a5,88
2040193c:	16f68663          	beq	a3,a5,20401aa8 <_printf_i+0x1ae>
20401940:	04240a93          	addi	s5,s0,66
20401944:	04d40123          	sb	a3,66(s0)
20401948:	a869                	j	204019e2 <_printf_i+0xe8>
2040194a:	06400793          	li	a5,100
2040194e:	00f68663          	beq	a3,a5,2040195a <_printf_i+0x60>
20401952:	06900793          	li	a5,105
20401956:	fef695e3          	bne	a3,a5,20401940 <_printf_i+0x46>
2040195a:	401c                	lw	a5,0(s0)
2040195c:	4308                	lw	a0,0(a4)
2040195e:	0807f693          	andi	a3,a5,128
20401962:	00450593          	addi	a1,a0,4
20401966:	c2c1                	beqz	a3,204019e6 <_printf_i+0xec>
20401968:	411c                	lw	a5,0(a0)
2040196a:	c30c                	sw	a1,0(a4)
2040196c:	0007d863          	bgez	a5,2040197c <_printf_i+0x82>
20401970:	02d00713          	li	a4,45
20401974:	40f007b3          	neg	a5,a5
20401978:	04e401a3          	sb	a4,67(s0)
2040197c:	00004697          	auipc	a3,0x4
20401980:	e6068693          	addi	a3,a3,-416 # 204057dc <__sf_fake_stdout+0x34>
20401984:	4729                	li	a4,10
20401986:	a065                	j	20401a2e <_printf_i+0x134>
20401988:	07300793          	li	a5,115
2040198c:	1af68263          	beq	a3,a5,20401b30 <_printf_i+0x236>
20401990:	00d7ef63          	bltu	a5,a3,204019ae <_printf_i+0xb4>
20401994:	06f00793          	li	a5,111
20401998:	04f68f63          	beq	a3,a5,204019f6 <_printf_i+0xfc>
2040199c:	07000793          	li	a5,112
204019a0:	faf690e3          	bne	a3,a5,20401940 <_printf_i+0x46>
204019a4:	419c                	lw	a5,0(a1)
204019a6:	0207e793          	ori	a5,a5,32
204019aa:	c19c                	sw	a5,0(a1)
204019ac:	a809                	j	204019be <_printf_i+0xc4>
204019ae:	07500793          	li	a5,117
204019b2:	04f68263          	beq	a3,a5,204019f6 <_printf_i+0xfc>
204019b6:	07800793          	li	a5,120
204019ba:	f8f693e3          	bne	a3,a5,20401940 <_printf_i+0x46>
204019be:	07800793          	li	a5,120
204019c2:	04f402a3          	sb	a5,69(s0)
204019c6:	00004697          	auipc	a3,0x4
204019ca:	e2a68693          	addi	a3,a3,-470 # 204057f0 <__sf_fake_stdout+0x48>
204019ce:	a0dd                	j	20401ab4 <_printf_i+0x1ba>
204019d0:	431c                	lw	a5,0(a4)
204019d2:	04258a93          	addi	s5,a1,66
204019d6:	00478693          	addi	a3,a5,4
204019da:	439c                	lw	a5,0(a5)
204019dc:	c314                	sw	a3,0(a4)
204019de:	04f58123          	sb	a5,66(a1)
204019e2:	4785                	li	a5,1
204019e4:	a2ad                	j	20401b4e <_printf_i+0x254>
204019e6:	0407f693          	andi	a3,a5,64
204019ea:	411c                	lw	a5,0(a0)
204019ec:	c30c                	sw	a1,0(a4)
204019ee:	debd                	beqz	a3,2040196c <_printf_i+0x72>
204019f0:	07c2                	slli	a5,a5,0x10
204019f2:	87c1                	srai	a5,a5,0x10
204019f4:	bfa5                	j	2040196c <_printf_i+0x72>
204019f6:	400c                	lw	a1,0(s0)
204019f8:	431c                	lw	a5,0(a4)
204019fa:	0805f813          	andi	a6,a1,128
204019fe:	00478513          	addi	a0,a5,4
20401a02:	00080563          	beqz	a6,20401a0c <_printf_i+0x112>
20401a06:	c308                	sw	a0,0(a4)
20401a08:	439c                	lw	a5,0(a5)
20401a0a:	a039                	j	20401a18 <_printf_i+0x11e>
20401a0c:	0405f593          	andi	a1,a1,64
20401a10:	c308                	sw	a0,0(a4)
20401a12:	d9fd                	beqz	a1,20401a08 <_printf_i+0x10e>
20401a14:	0007d783          	lhu	a5,0(a5)
20401a18:	06f00713          	li	a4,111
20401a1c:	0ce68a63          	beq	a3,a4,20401af0 <_printf_i+0x1f6>
20401a20:	00004697          	auipc	a3,0x4
20401a24:	dbc68693          	addi	a3,a3,-580 # 204057dc <__sf_fake_stdout+0x34>
20401a28:	4729                	li	a4,10
20401a2a:	040401a3          	sb	zero,67(s0)
20401a2e:	404c                	lw	a1,4(s0)
20401a30:	c40c                	sw	a1,8(s0)
20401a32:	0005c563          	bltz	a1,20401a3c <_printf_i+0x142>
20401a36:	4008                	lw	a0,0(s0)
20401a38:	996d                	andi	a0,a0,-5
20401a3a:	c008                	sw	a0,0(s0)
20401a3c:	e399                	bnez	a5,20401a42 <_printf_i+0x148>
20401a3e:	8ab2                	mv	s5,a2
20401a40:	cd91                	beqz	a1,20401a5c <_printf_i+0x162>
20401a42:	8ab2                	mv	s5,a2
20401a44:	02e7f5b3          	remu	a1,a5,a4
20401a48:	1afd                	addi	s5,s5,-1
20401a4a:	95b6                	add	a1,a1,a3
20401a4c:	0005c583          	lbu	a1,0(a1)
20401a50:	00ba8023          	sb	a1,0(s5)
20401a54:	02e7d5b3          	divu	a1,a5,a4
20401a58:	0ae7f263          	bgeu	a5,a4,20401afc <_printf_i+0x202>
20401a5c:	47a1                	li	a5,8
20401a5e:	00f71e63          	bne	a4,a5,20401a7a <_printf_i+0x180>
20401a62:	401c                	lw	a5,0(s0)
20401a64:	8b85                	andi	a5,a5,1
20401a66:	cb91                	beqz	a5,20401a7a <_printf_i+0x180>
20401a68:	4058                	lw	a4,4(s0)
20401a6a:	481c                	lw	a5,16(s0)
20401a6c:	00e7c763          	blt	a5,a4,20401a7a <_printf_i+0x180>
20401a70:	03000793          	li	a5,48
20401a74:	fefa8fa3          	sb	a5,-1(s5)
20401a78:	1afd                	addi	s5,s5,-1
20401a7a:	41560633          	sub	a2,a2,s5
20401a7e:	c810                	sw	a2,16(s0)
20401a80:	874e                	mv	a4,s3
20401a82:	86ca                	mv	a3,s2
20401a84:	0070                	addi	a2,sp,12
20401a86:	85a2                	mv	a1,s0
20401a88:	8526                	mv	a0,s1
20401a8a:	3395                	jal	204017ee <_printf_common>
20401a8c:	5a7d                	li	s4,-1
20401a8e:	0d451463          	bne	a0,s4,20401b56 <_printf_i+0x25c>
20401a92:	557d                	li	a0,-1
20401a94:	50b2                	lw	ra,44(sp)
20401a96:	5422                	lw	s0,40(sp)
20401a98:	5492                	lw	s1,36(sp)
20401a9a:	5902                	lw	s2,32(sp)
20401a9c:	49f2                	lw	s3,28(sp)
20401a9e:	4a62                	lw	s4,24(sp)
20401aa0:	4ad2                	lw	s5,20(sp)
20401aa2:	4b42                	lw	s6,16(sp)
20401aa4:	6145                	addi	sp,sp,48
20401aa6:	8082                	ret
20401aa8:	04d582a3          	sb	a3,69(a1)
20401aac:	00004697          	auipc	a3,0x4
20401ab0:	d3068693          	addi	a3,a3,-720 # 204057dc <__sf_fake_stdout+0x34>
20401ab4:	400c                	lw	a1,0(s0)
20401ab6:	4308                	lw	a0,0(a4)
20401ab8:	0805f813          	andi	a6,a1,128
20401abc:	411c                	lw	a5,0(a0)
20401abe:	0511                	addi	a0,a0,4
20401ac0:	02080063          	beqz	a6,20401ae0 <_printf_i+0x1e6>
20401ac4:	c308                	sw	a0,0(a4)
20401ac6:	0015f713          	andi	a4,a1,1
20401aca:	c701                	beqz	a4,20401ad2 <_printf_i+0x1d8>
20401acc:	0205e593          	ori	a1,a1,32
20401ad0:	c00c                	sw	a1,0(s0)
20401ad2:	4741                	li	a4,16
20401ad4:	fbb9                	bnez	a5,20401a2a <_printf_i+0x130>
20401ad6:	400c                	lw	a1,0(s0)
20401ad8:	fdf5f593          	andi	a1,a1,-33
20401adc:	c00c                	sw	a1,0(s0)
20401ade:	b7b1                	j	20401a2a <_printf_i+0x130>
20401ae0:	0405f813          	andi	a6,a1,64
20401ae4:	c308                	sw	a0,0(a4)
20401ae6:	fe0800e3          	beqz	a6,20401ac6 <_printf_i+0x1cc>
20401aea:	07c2                	slli	a5,a5,0x10
20401aec:	83c1                	srli	a5,a5,0x10
20401aee:	bfe1                	j	20401ac6 <_printf_i+0x1cc>
20401af0:	00004697          	auipc	a3,0x4
20401af4:	cec68693          	addi	a3,a3,-788 # 204057dc <__sf_fake_stdout+0x34>
20401af8:	4721                	li	a4,8
20401afa:	bf05                	j	20401a2a <_printf_i+0x130>
20401afc:	87ae                	mv	a5,a1
20401afe:	b799                	j	20401a44 <_printf_i+0x14a>
20401b00:	4194                	lw	a3,0(a1)
20401b02:	431c                	lw	a5,0(a4)
20401b04:	49cc                	lw	a1,20(a1)
20401b06:	0806f813          	andi	a6,a3,128
20401b0a:	00478513          	addi	a0,a5,4
20401b0e:	00080663          	beqz	a6,20401b1a <_printf_i+0x220>
20401b12:	c308                	sw	a0,0(a4)
20401b14:	439c                	lw	a5,0(a5)
20401b16:	c38c                	sw	a1,0(a5)
20401b18:	a801                	j	20401b28 <_printf_i+0x22e>
20401b1a:	c308                	sw	a0,0(a4)
20401b1c:	0406f693          	andi	a3,a3,64
20401b20:	439c                	lw	a5,0(a5)
20401b22:	daf5                	beqz	a3,20401b16 <_printf_i+0x21c>
20401b24:	00b79023          	sh	a1,0(a5)
20401b28:	00042823          	sw	zero,16(s0)
20401b2c:	8ab2                	mv	s5,a2
20401b2e:	bf89                	j	20401a80 <_printf_i+0x186>
20401b30:	431c                	lw	a5,0(a4)
20401b32:	41d0                	lw	a2,4(a1)
20401b34:	4581                	li	a1,0
20401b36:	00478693          	addi	a3,a5,4
20401b3a:	c314                	sw	a3,0(a4)
20401b3c:	0007aa83          	lw	s5,0(a5)
20401b40:	8556                	mv	a0,s5
20401b42:	3179                	jal	204017d0 <memchr>
20401b44:	c501                	beqz	a0,20401b4c <_printf_i+0x252>
20401b46:	41550533          	sub	a0,a0,s5
20401b4a:	c048                	sw	a0,4(s0)
20401b4c:	405c                	lw	a5,4(s0)
20401b4e:	c81c                	sw	a5,16(s0)
20401b50:	040401a3          	sb	zero,67(s0)
20401b54:	b735                	j	20401a80 <_printf_i+0x186>
20401b56:	4814                	lw	a3,16(s0)
20401b58:	8656                	mv	a2,s5
20401b5a:	85ca                	mv	a1,s2
20401b5c:	8526                	mv	a0,s1
20401b5e:	9982                	jalr	s3
20401b60:	f34509e3          	beq	a0,s4,20401a92 <_printf_i+0x198>
20401b64:	401c                	lw	a5,0(s0)
20401b66:	8b89                	andi	a5,a5,2
20401b68:	e78d                	bnez	a5,20401b92 <_printf_i+0x298>
20401b6a:	47b2                	lw	a5,12(sp)
20401b6c:	4448                	lw	a0,12(s0)
20401b6e:	f2f553e3          	bge	a0,a5,20401a94 <_printf_i+0x19a>
20401b72:	853e                	mv	a0,a5
20401b74:	b705                	j	20401a94 <_printf_i+0x19a>
20401b76:	4685                	li	a3,1
20401b78:	8656                	mv	a2,s5
20401b7a:	85ca                	mv	a1,s2
20401b7c:	8526                	mv	a0,s1
20401b7e:	9982                	jalr	s3
20401b80:	f16509e3          	beq	a0,s6,20401a92 <_printf_i+0x198>
20401b84:	0a05                	addi	s4,s4,1
20401b86:	445c                	lw	a5,12(s0)
20401b88:	4732                	lw	a4,12(sp)
20401b8a:	8f99                	sub	a5,a5,a4
20401b8c:	fefa45e3          	blt	s4,a5,20401b76 <_printf_i+0x27c>
20401b90:	bfe9                	j	20401b6a <_printf_i+0x270>
20401b92:	4a01                	li	s4,0
20401b94:	01940a93          	addi	s5,s0,25
20401b98:	5b7d                	li	s6,-1
20401b9a:	b7f5                	j	20401b86 <_printf_i+0x28c>

20401b9c <_read_r>:
_read_r():
20401b9c:	1141                	addi	sp,sp,-16
20401b9e:	c422                	sw	s0,8(sp)
20401ba0:	842a                	mv	s0,a0
20401ba2:	852e                	mv	a0,a1
20401ba4:	85b2                	mv	a1,a2
20401ba6:	8636                	mv	a2,a3
20401ba8:	5fc01797          	auipc	a5,0x5fc01
20401bac:	be07a223          	sw	zero,-1052(a5) # 8000278c <errno>
20401bb0:	c606                	sw	ra,12(sp)
20401bb2:	2845                	jal	20401c62 <_read>
20401bb4:	57fd                	li	a5,-1
20401bb6:	00f51963          	bne	a0,a5,20401bc8 <_read_r+0x2c>
20401bba:	5fc01797          	auipc	a5,0x5fc01
20401bbe:	bd278793          	addi	a5,a5,-1070 # 8000278c <errno>
20401bc2:	439c                	lw	a5,0(a5)
20401bc4:	c391                	beqz	a5,20401bc8 <_read_r+0x2c>
20401bc6:	c01c                	sw	a5,0(s0)
20401bc8:	40b2                	lw	ra,12(sp)
20401bca:	4422                	lw	s0,8(sp)
20401bcc:	0141                	addi	sp,sp,16
20401bce:	8082                	ret

20401bd0 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20401bd0:	1101                	addi	sp,sp,-32
20401bd2:	ce06                	sw	ra,28(sp)
20401bd4:	cc22                	sw	s0,24(sp)
20401bd6:	1000                	addi	s0,sp,32
20401bd8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20401bdc:	225d                	jal	20401d82 <__errno>
20401bde:	872a                	mv	a4,a0
20401be0:	05800793          	li	a5,88
20401be4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20401be6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20401be8:	853e                	mv	a0,a5
20401bea:	40f2                	lw	ra,28(sp)
20401bec:	4462                	lw	s0,24(sp)
20401bee:	6105                	addi	sp,sp,32
20401bf0:	8082                	ret

20401bf2 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20401bf2:	1101                	addi	sp,sp,-32
20401bf4:	ce06                	sw	ra,28(sp)
20401bf6:	cc22                	sw	s0,24(sp)
20401bf8:	1000                	addi	s0,sp,32
20401bfa:	fea42623          	sw	a0,-20(s0)
20401bfe:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401c02:	2241                	jal	20401d82 <__errno>
20401c04:	872a                	mv	a4,a0
20401c06:	fa800793          	li	a5,-88
20401c0a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20401c0c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20401c0e:	853e                	mv	a0,a5
20401c10:	40f2                	lw	ra,28(sp)
20401c12:	4462                	lw	s0,24(sp)
20401c14:	6105                	addi	sp,sp,32
20401c16:	8082                	ret

20401c18 <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20401c18:	1101                	addi	sp,sp,-32
20401c1a:	ce22                	sw	s0,28(sp)
20401c1c:	1000                	addi	s0,sp,32
20401c1e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401c22:	fec42783          	lw	a5,-20(s0)
20401c26:	17fd                	addi	a5,a5,-1
20401c28:	0017b793          	seqz	a5,a5
20401c2c:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20401c30:	853e                	mv	a0,a5
20401c32:	4472                	lw	s0,28(sp)
20401c34:	6105                	addi	sp,sp,32
20401c36:	8082                	ret

20401c38 <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20401c38:	1101                	addi	sp,sp,-32
20401c3a:	ce06                	sw	ra,28(sp)
20401c3c:	cc22                	sw	s0,24(sp)
20401c3e:	1000                	addi	s0,sp,32
20401c40:	fea42623          	sw	a0,-20(s0)
20401c44:	feb42423          	sw	a1,-24(s0)
20401c48:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20401c4c:	2a1d                	jal	20401d82 <__errno>
20401c4e:	872a                	mv	a4,a0
20401c50:	05800793          	li	a5,88
20401c54:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20401c56:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20401c58:	853e                	mv	a0,a5
20401c5a:	40f2                	lw	ra,28(sp)
20401c5c:	4462                	lw	s0,24(sp)
20401c5e:	6105                	addi	sp,sp,32
20401c60:	8082                	ret

20401c62 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20401c62:	1101                	addi	sp,sp,-32
20401c64:	ce06                	sw	ra,28(sp)
20401c66:	cc22                	sw	s0,24(sp)
20401c68:	1000                	addi	s0,sp,32
20401c6a:	fea42623          	sw	a0,-20(s0)
20401c6e:	feb42423          	sw	a1,-24(s0)
20401c72:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20401c76:	2231                	jal	20401d82 <__errno>
20401c78:	872a                	mv	a4,a0
20401c7a:	05800793          	li	a5,88
20401c7e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20401c80:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20401c82:	853e                	mv	a0,a5
20401c84:	40f2                	lw	ra,28(sp)
20401c86:	4462                	lw	s0,24(sp)
20401c88:	6105                	addi	sp,sp,32
20401c8a:	8082                	ret

20401c8c <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20401c8c:	7179                	addi	sp,sp,-48
20401c8e:	d622                	sw	s0,44(sp)
20401c90:	1800                	addi	s0,sp,48
20401c92:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20401c96:	800017b7          	lui	a5,0x80001
20401c9a:	7107a783          	lw	a5,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe380>
20401c9e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20401ca2:	800037b7          	lui	a5,0x80003
20401ca6:	b9078713          	addi	a4,a5,-1136 # 80002b90 <metal_segment_heap_target_end+0xfffff800>
20401caa:	800037b7          	lui	a5,0x80003
20401cae:	39078793          	addi	a5,a5,912 # 80003390 <metal_segment_heap_target_end+0x0>
20401cb2:	00f71463          	bne	a4,a5,20401cba <_sbrk+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20401cb6:	57fd                	li	a5,-1
20401cb8:	a0a9                	j	20401d02 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20401cba:	800017b7          	lui	a5,0x80001
20401cbe:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe380>
20401cc2:	fdc42783          	lw	a5,-36(s0)
20401cc6:	973e                	add	a4,a4,a5
20401cc8:	800037b7          	lui	a5,0x80003
20401ccc:	39078793          	addi	a5,a5,912 # 80003390 <metal_segment_heap_target_end+0x0>
20401cd0:	02f77063          	bgeu	a4,a5,20401cf0 <_sbrk+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20401cd4:	800017b7          	lui	a5,0x80001
20401cd8:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe380>
20401cdc:	fdc42783          	lw	a5,-36(s0)
20401ce0:	973e                	add	a4,a4,a5
20401ce2:	800017b7          	lui	a5,0x80001
20401ce6:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe380>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20401cea:	fec42783          	lw	a5,-20(s0)
20401cee:	a811                	j	20401d02 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20401cf0:	800017b7          	lui	a5,0x80001
20401cf4:	80003737          	lui	a4,0x80003
20401cf8:	39070713          	addi	a4,a4,912 # 80003390 <metal_segment_heap_target_end+0x0>
20401cfc:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe380>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20401d00:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20401d02:	853e                	mv	a0,a5
20401d04:	5432                	lw	s0,44(sp)
20401d06:	6145                	addi	sp,sp,48
20401d08:	8082                	ret

20401d0a <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20401d0a:	7179                	addi	sp,sp,-48
20401d0c:	d606                	sw	ra,44(sp)
20401d0e:	d422                	sw	s0,40(sp)
20401d10:	1800                	addi	s0,sp,48
20401d12:	fca42e23          	sw	a0,-36(s0)
20401d16:	fcb42c23          	sw	a1,-40(s0)
20401d1a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20401d1e:	fdc42703          	lw	a4,-36(s0)
20401d22:	4785                	li	a5,1
20401d24:	00f70963          	beq	a4,a5,20401d36 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20401d28:	28a9                	jal	20401d82 <__errno>
20401d2a:	872a                	mv	a4,a0
20401d2c:	05800793          	li	a5,88
20401d30:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20401d32:	57fd                	li	a5,-1
20401d34:	a82d                	j	20401d6e <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20401d36:	fd842783          	lw	a5,-40(s0)
20401d3a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20401d3e:	fe042623          	sw	zero,-20(s0)
20401d42:	a839                	j	20401d60 <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20401d44:	fe842703          	lw	a4,-24(s0)
20401d48:	fec42783          	lw	a5,-20(s0)
20401d4c:	97ba                	add	a5,a5,a4
20401d4e:	0007c783          	lbu	a5,0(a5)
20401d52:	853e                	mv	a0,a5
20401d54:	2cb1                	jal	20401fb0 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20401d56:	fec42783          	lw	a5,-20(s0)
20401d5a:	0785                	addi	a5,a5,1
20401d5c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20401d60:	fec42703          	lw	a4,-20(s0)
20401d64:	fd442783          	lw	a5,-44(s0)
20401d68:	fcf76ee3          	bltu	a4,a5,20401d44 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20401d6c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20401d6e:	853e                	mv	a0,a5
20401d70:	50b2                	lw	ra,44(sp)
20401d72:	5422                	lw	s0,40(sp)
20401d74:	6145                	addi	sp,sp,48
20401d76:	8082                	ret

20401d78 <atexit>:
atexit():
20401d78:	85aa                	mv	a1,a0
20401d7a:	4681                	li	a3,0
20401d7c:	4601                	li	a2,0
20401d7e:	4501                	li	a0,0
20401d80:	a8f1                	j	20401e5c <__register_exitproc>

20401d82 <__errno>:
__errno():
20401d82:	5fc00797          	auipc	a5,0x5fc00
20401d86:	98678793          	addi	a5,a5,-1658 # 80001708 <_impure_ptr>
20401d8a:	4388                	lw	a0,0(a5)
20401d8c:	8082                	ret

20401d8e <exit>:
exit():
20401d8e:	1141                	addi	sp,sp,-16
20401d90:	c422                	sw	s0,8(sp)
20401d92:	c606                	sw	ra,12(sp)
20401d94:	00000797          	auipc	a5,0x0
20401d98:	15478793          	addi	a5,a5,340 # 20401ee8 <__call_exitprocs>
20401d9c:	842a                	mv	s0,a0
20401d9e:	c399                	beqz	a5,20401da4 <exit+0x16>
20401da0:	4581                	li	a1,0
20401da2:	2299                	jal	20401ee8 <__call_exitprocs>
20401da4:	5fc00797          	auipc	a5,0x5fc00
20401da8:	96878793          	addi	a5,a5,-1688 # 8000170c <_global_impure_ptr>
20401dac:	4388                	lw	a0,0(a5)
20401dae:	551c                	lw	a5,40(a0)
20401db0:	c391                	beqz	a5,20401db4 <exit+0x26>
20401db2:	9782                	jalr	a5
20401db4:	8522                	mv	a0,s0
20401db6:	039030ef          	jal	ra,204055ee <_exit>

20401dba <__libc_fini_array>:
__libc_fini_array():
20401dba:	1141                	addi	sp,sp,-16
20401dbc:	00004797          	auipc	a5,0x4
20401dc0:	da078793          	addi	a5,a5,-608 # 20405b5c <__fini_array_end>
20401dc4:	c422                	sw	s0,8(sp)
20401dc6:	00004417          	auipc	s0,0x4
20401dca:	d9640413          	addi	s0,s0,-618 # 20405b5c <__fini_array_end>
20401dce:	8c1d                	sub	s0,s0,a5
20401dd0:	c226                	sw	s1,4(sp)
20401dd2:	c606                	sw	ra,12(sp)
20401dd4:	8409                	srai	s0,s0,0x2
20401dd6:	84be                	mv	s1,a5
20401dd8:	e411                	bnez	s0,20401de4 <__libc_fini_array+0x2a>
20401dda:	40b2                	lw	ra,12(sp)
20401ddc:	4422                	lw	s0,8(sp)
20401dde:	4492                	lw	s1,4(sp)
20401de0:	0141                	addi	sp,sp,16
20401de2:	8082                	ret
20401de4:	147d                	addi	s0,s0,-1
20401de6:	00241793          	slli	a5,s0,0x2
20401dea:	97a6                	add	a5,a5,s1
20401dec:	439c                	lw	a5,0(a5)
20401dee:	9782                	jalr	a5
20401df0:	b7e5                	j	20401dd8 <__libc_fini_array+0x1e>

20401df2 <__libc_init_array>:
__libc_init_array():
20401df2:	1141                	addi	sp,sp,-16
20401df4:	00004797          	auipc	a5,0x4
20401df8:	d6478793          	addi	a5,a5,-668 # 20405b58 <__init_array_start>
20401dfc:	c422                	sw	s0,8(sp)
20401dfe:	00004417          	auipc	s0,0x4
20401e02:	d5a40413          	addi	s0,s0,-678 # 20405b58 <__init_array_start>
20401e06:	8c1d                	sub	s0,s0,a5
20401e08:	c226                	sw	s1,4(sp)
20401e0a:	c04a                	sw	s2,0(sp)
20401e0c:	c606                	sw	ra,12(sp)
20401e0e:	8409                	srai	s0,s0,0x2
20401e10:	4481                	li	s1,0
20401e12:	893e                	mv	s2,a5
20401e14:	02849663          	bne	s1,s0,20401e40 <__libc_init_array+0x4e>
20401e18:	00004797          	auipc	a5,0x4
20401e1c:	d4078793          	addi	a5,a5,-704 # 20405b58 <__init_array_start>
20401e20:	00004417          	auipc	s0,0x4
20401e24:	d3c40413          	addi	s0,s0,-708 # 20405b5c <__fini_array_end>
20401e28:	8c1d                	sub	s0,s0,a5
20401e2a:	8409                	srai	s0,s0,0x2
20401e2c:	4481                	li	s1,0
20401e2e:	893e                	mv	s2,a5
20401e30:	00849f63          	bne	s1,s0,20401e4e <__libc_init_array+0x5c>
20401e34:	40b2                	lw	ra,12(sp)
20401e36:	4422                	lw	s0,8(sp)
20401e38:	4492                	lw	s1,4(sp)
20401e3a:	4902                	lw	s2,0(sp)
20401e3c:	0141                	addi	sp,sp,16
20401e3e:	8082                	ret
20401e40:	00249793          	slli	a5,s1,0x2
20401e44:	97ca                	add	a5,a5,s2
20401e46:	439c                	lw	a5,0(a5)
20401e48:	0485                	addi	s1,s1,1
20401e4a:	9782                	jalr	a5
20401e4c:	b7e1                	j	20401e14 <__libc_init_array+0x22>
20401e4e:	00249793          	slli	a5,s1,0x2
20401e52:	97ca                	add	a5,a5,s2
20401e54:	439c                	lw	a5,0(a5)
20401e56:	0485                	addi	s1,s1,1
20401e58:	9782                	jalr	a5
20401e5a:	bfd9                	j	20401e30 <__libc_init_array+0x3e>

20401e5c <__register_exitproc>:
__register_exitproc():
20401e5c:	5fc00797          	auipc	a5,0x5fc00
20401e60:	8e078793          	addi	a5,a5,-1824 # 8000173c <_global_atexit>
20401e64:	439c                	lw	a5,0(a5)
20401e66:	8e2a                	mv	t3,a0
20401e68:	e78d                	bnez	a5,20401e92 <__register_exitproc+0x36>
20401e6a:	5fc01717          	auipc	a4,0x5fc01
20401e6e:	89670713          	addi	a4,a4,-1898 # 80002700 <_global_atexit0>
20401e72:	5fc00797          	auipc	a5,0x5fc00
20401e76:	8ce7a523          	sw	a4,-1846(a5) # 8000173c <_global_atexit>
20401e7a:	dfbfe517          	auipc	a0,0xdfbfe
20401e7e:	18650513          	addi	a0,a0,390 # 0 <__metal_boot_hart>
20401e82:	87ba                	mv	a5,a4
20401e84:	c519                	beqz	a0,20401e92 <__register_exitproc+0x36>
20401e86:	411c                	lw	a5,0(a0)
20401e88:	5fc01517          	auipc	a0,0x5fc01
20401e8c:	90f52023          	sw	a5,-1792(a0) # 80002788 <_global_atexit0+0x88>
20401e90:	87ba                	mv	a5,a4
20401e92:	43d8                	lw	a4,4(a5)
20401e94:	487d                	li	a6,31
20401e96:	557d                	li	a0,-1
20401e98:	04e84763          	blt	a6,a4,20401ee6 <__register_exitproc+0x8a>
20401e9c:	020e0e63          	beqz	t3,20401ed8 <__register_exitproc+0x7c>
20401ea0:	0887a803          	lw	a6,136(a5)
20401ea4:	04080163          	beqz	a6,20401ee6 <__register_exitproc+0x8a>
20401ea8:	00271893          	slli	a7,a4,0x2
20401eac:	98c2                	add	a7,a7,a6
20401eae:	00c8a023          	sw	a2,0(a7)
20401eb2:	10082303          	lw	t1,256(a6)
20401eb6:	4605                	li	a2,1
20401eb8:	00e61633          	sll	a2,a2,a4
20401ebc:	00c36333          	or	t1,t1,a2
20401ec0:	10682023          	sw	t1,256(a6)
20401ec4:	08d8a023          	sw	a3,128(a7)
20401ec8:	4689                	li	a3,2
20401eca:	00de1763          	bne	t3,a3,20401ed8 <__register_exitproc+0x7c>
20401ece:	10482683          	lw	a3,260(a6)
20401ed2:	8e55                	or	a2,a2,a3
20401ed4:	10c82223          	sw	a2,260(a6)
20401ed8:	00170693          	addi	a3,a4,1
20401edc:	070a                	slli	a4,a4,0x2
20401ede:	c3d4                	sw	a3,4(a5)
20401ee0:	97ba                	add	a5,a5,a4
20401ee2:	c78c                	sw	a1,8(a5)
20401ee4:	4501                	li	a0,0
20401ee6:	8082                	ret

20401ee8 <__call_exitprocs>:
__call_exitprocs():
20401ee8:	7179                	addi	sp,sp,-48
20401eea:	cc52                	sw	s4,24(sp)
20401eec:	ca56                	sw	s5,20(sp)
20401eee:	c85a                	sw	s6,16(sp)
20401ef0:	c65e                	sw	s7,12(sp)
20401ef2:	d606                	sw	ra,44(sp)
20401ef4:	d422                	sw	s0,40(sp)
20401ef6:	d226                	sw	s1,36(sp)
20401ef8:	d04a                	sw	s2,32(sp)
20401efa:	ce4e                	sw	s3,28(sp)
20401efc:	c462                	sw	s8,8(sp)
20401efe:	8b2a                	mv	s6,a0
20401f00:	8a2e                	mv	s4,a1
20401f02:	5fc00a97          	auipc	s5,0x5fc00
20401f06:	83aa8a93          	addi	s5,s5,-1990 # 8000173c <_global_atexit>
20401f0a:	4b85                	li	s7,1
20401f0c:	000aa403          	lw	s0,0(s5)
20401f10:	c811                	beqz	s0,20401f24 <__call_exitprocs+0x3c>
20401f12:	4044                	lw	s1,4(s0)
20401f14:	08842983          	lw	s3,136(s0)
20401f18:	fff48913          	addi	s2,s1,-1
20401f1c:	048a                	slli	s1,s1,0x2
20401f1e:	94a2                	add	s1,s1,s0
20401f20:	00095e63          	bgez	s2,20401f3c <__call_exitprocs+0x54>
20401f24:	50b2                	lw	ra,44(sp)
20401f26:	5422                	lw	s0,40(sp)
20401f28:	5492                	lw	s1,36(sp)
20401f2a:	5902                	lw	s2,32(sp)
20401f2c:	49f2                	lw	s3,28(sp)
20401f2e:	4a62                	lw	s4,24(sp)
20401f30:	4ad2                	lw	s5,20(sp)
20401f32:	4b42                	lw	s6,16(sp)
20401f34:	4bb2                	lw	s7,12(sp)
20401f36:	4c22                	lw	s8,8(sp)
20401f38:	6145                	addi	sp,sp,48
20401f3a:	8082                	ret
20401f3c:	000a0e63          	beqz	s4,20401f58 <__call_exitprocs+0x70>
20401f40:	00099563          	bnez	s3,20401f4a <__call_exitprocs+0x62>
20401f44:	197d                	addi	s2,s2,-1
20401f46:	14f1                	addi	s1,s1,-4
20401f48:	bfe1                	j	20401f20 <__call_exitprocs+0x38>
20401f4a:	00291793          	slli	a5,s2,0x2
20401f4e:	97ce                	add	a5,a5,s3
20401f50:	0807a783          	lw	a5,128(a5)
20401f54:	ff4798e3          	bne	a5,s4,20401f44 <__call_exitprocs+0x5c>
20401f58:	4058                	lw	a4,4(s0)
20401f5a:	40dc                	lw	a5,4(s1)
20401f5c:	177d                	addi	a4,a4,-1
20401f5e:	03271863          	bne	a4,s2,20401f8e <__call_exitprocs+0xa6>
20401f62:	01242223          	sw	s2,4(s0)
20401f66:	dff9                	beqz	a5,20401f44 <__call_exitprocs+0x5c>
20401f68:	00442c03          	lw	s8,4(s0)
20401f6c:	00098863          	beqz	s3,20401f7c <__call_exitprocs+0x94>
20401f70:	1009a683          	lw	a3,256(s3)
20401f74:	012b9733          	sll	a4,s7,s2
20401f78:	8ef9                	and	a3,a3,a4
20401f7a:	ee89                	bnez	a3,20401f94 <__call_exitprocs+0xac>
20401f7c:	9782                	jalr	a5
20401f7e:	4058                	lw	a4,4(s0)
20401f80:	000aa783          	lw	a5,0(s5)
20401f84:	f98714e3          	bne	a4,s8,20401f0c <__call_exitprocs+0x24>
20401f88:	faf40ee3          	beq	s0,a5,20401f44 <__call_exitprocs+0x5c>
20401f8c:	b741                	j	20401f0c <__call_exitprocs+0x24>
20401f8e:	0004a223          	sw	zero,4(s1)
20401f92:	bfd1                	j	20401f66 <__call_exitprocs+0x7e>
20401f94:	00291693          	slli	a3,s2,0x2
20401f98:	96ce                	add	a3,a3,s3
20401f9a:	428c                	lw	a1,0(a3)
20401f9c:	1049a683          	lw	a3,260(s3)
20401fa0:	8f75                	and	a4,a4,a3
20401fa2:	e701                	bnez	a4,20401faa <__call_exitprocs+0xc2>
20401fa4:	855a                	mv	a0,s6
20401fa6:	9782                	jalr	a5
20401fa8:	bfd9                	j	20401f7e <__call_exitprocs+0x96>
20401faa:	852e                	mv	a0,a1
20401fac:	9782                	jalr	a5
20401fae:	bfc1                	j	20401f7e <__call_exitprocs+0x96>

20401fb0 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20401fb0:	1101                	addi	sp,sp,-32
20401fb2:	ce06                	sw	ra,28(sp)
20401fb4:	cc22                	sw	s0,24(sp)
20401fb6:	1000                	addi	s0,sp,32
20401fb8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20401fbc:	fec42703          	lw	a4,-20(s0)
20401fc0:	47a9                	li	a5,10
20401fc2:	00f71463          	bne	a4,a5,20401fca <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20401fc6:	4535                	li	a0,13
20401fc8:	2811                	jal	20401fdc <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20401fca:	fec42503          	lw	a0,-20(s0)
20401fce:	2039                	jal	20401fdc <metal_tty_putc_raw>
20401fd0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20401fd2:	853e                	mv	a0,a5
20401fd4:	40f2                	lw	ra,28(sp)
20401fd6:	4462                	lw	s0,24(sp)
20401fd8:	6105                	addi	sp,sp,32
20401fda:	8082                	ret

20401fdc <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20401fdc:	1101                	addi	sp,sp,-32
20401fde:	ce06                	sw	ra,28(sp)
20401fe0:	cc22                	sw	s0,24(sp)
20401fe2:	1000                	addi	s0,sp,32
20401fe4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401fe8:	fec42583          	lw	a1,-20(s0)
20401fec:	800017b7          	lui	a5,0x80001
20401ff0:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20401ff4:	28b1                	jal	20402050 <metal_uart_putc>
20401ff6:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20401ff8:	853e                	mv	a0,a5
20401ffa:	40f2                	lw	ra,28(sp)
20401ffc:	4462                	lw	s0,24(sp)
20401ffe:	6105                	addi	sp,sp,32
20402000:	8082                	ret

20402002 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20402002:	1141                	addi	sp,sp,-16
20402004:	c606                	sw	ra,12(sp)
20402006:	c422                	sw	s0,8(sp)
20402008:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
2040200a:	67f1                	lui	a5,0x1c
2040200c:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20402010:	800017b7          	lui	a5,0x80001
20402014:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20402018:	2031                	jal	20402024 <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
2040201a:	0001                	nop
2040201c:	40b2                	lw	ra,12(sp)
2040201e:	4422                	lw	s0,8(sp)
20402020:	0141                	addi	sp,sp,16
20402022:	8082                	ret

20402024 <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20402024:	1101                	addi	sp,sp,-32
20402026:	ce06                	sw	ra,28(sp)
20402028:	cc22                	sw	s0,24(sp)
2040202a:	1000                	addi	s0,sp,32
2040202c:	fea42623          	sw	a0,-20(s0)
20402030:	feb42423          	sw	a1,-24(s0)
20402034:	fec42783          	lw	a5,-20(s0)
20402038:	439c                	lw	a5,0(a5)
2040203a:	439c                	lw	a5,0(a5)
2040203c:	fe842583          	lw	a1,-24(s0)
20402040:	fec42503          	lw	a0,-20(s0)
20402044:	9782                	jalr	a5
20402046:	0001                	nop
20402048:	40f2                	lw	ra,28(sp)
2040204a:	4462                	lw	s0,24(sp)
2040204c:	6105                	addi	sp,sp,32
2040204e:	8082                	ret

20402050 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20402050:	1101                	addi	sp,sp,-32
20402052:	ce06                	sw	ra,28(sp)
20402054:	cc22                	sw	s0,24(sp)
20402056:	1000                	addi	s0,sp,32
20402058:	fea42623          	sw	a0,-20(s0)
2040205c:	feb42423          	sw	a1,-24(s0)
20402060:	fec42783          	lw	a5,-20(s0)
20402064:	439c                	lw	a5,0(a5)
20402066:	43dc                	lw	a5,4(a5)
20402068:	fe842583          	lw	a1,-24(s0)
2040206c:	fec42503          	lw	a0,-20(s0)
20402070:	9782                	jalr	a5
20402072:	87aa                	mv	a5,a0
20402074:	853e                	mv	a0,a5
20402076:	40f2                	lw	ra,28(sp)
20402078:	4462                	lw	s0,24(sp)
2040207a:	6105                	addi	sp,sp,32
2040207c:	8082                	ret

2040207e <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
2040207e:	1101                	addi	sp,sp,-32
20402080:	ce06                	sw	ra,28(sp)
20402082:	cc22                	sw	s0,24(sp)
20402084:	1000                	addi	s0,sp,32
20402086:	fea42623          	sw	a0,-20(s0)
2040208a:	feb42423          	sw	a1,-24(s0)
2040208e:	fec42783          	lw	a5,-20(s0)
20402092:	439c                	lw	a5,0(a5)
20402094:	4bdc                	lw	a5,20(a5)
20402096:	fe842583          	lw	a1,-24(s0)
2040209a:	fec42503          	lw	a0,-20(s0)
2040209e:	9782                	jalr	a5
204020a0:	87aa                	mv	a5,a0
204020a2:	853e                	mv	a0,a5
204020a4:	40f2                	lw	ra,28(sp)
204020a6:	4462                	lw	s0,24(sp)
204020a8:	6105                	addi	sp,sp,32
204020aa:	8082                	ret

204020ac <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
204020ac:	1101                	addi	sp,sp,-32
204020ae:	ce22                	sw	s0,28(sp)
204020b0:	1000                	addi	s0,sp,32
204020b2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204020b6:	fec42703          	lw	a4,-20(s0)
204020ba:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
204020be:	00f71563          	bne	a4,a5,204020c8 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
204020c2:	020007b7          	lui	a5,0x2000
204020c6:	a011                	j	204020ca <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
204020c8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
204020ca:	853e                	mv	a0,a5
204020cc:	4472                	lw	s0,28(sp)
204020ce:	6105                	addi	sp,sp,32
204020d0:	8082                	ret

204020d2 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
204020d2:	1101                	addi	sp,sp,-32
204020d4:	ce22                	sw	s0,28(sp)
204020d6:	1000                	addi	s0,sp,32
204020d8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204020dc:	fec42703          	lw	a4,-20(s0)
204020e0:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
204020e4:	00f71463          	bne	a4,a5,204020ec <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
204020e8:	4789                	li	a5,2
204020ea:	a011                	j	204020ee <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
204020ec:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
204020ee:	853e                	mv	a0,a5
204020f0:	4472                	lw	s0,28(sp)
204020f2:	6105                	addi	sp,sp,32
204020f4:	8082                	ret

204020f6 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
204020f6:	1101                	addi	sp,sp,-32
204020f8:	ce22                	sw	s0,28(sp)
204020fa:	1000                	addi	s0,sp,32
204020fc:	fea42623          	sw	a0,-20(s0)
20402100:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
20402104:	fe842783          	lw	a5,-24(s0)
20402108:	e791                	bnez	a5,20402114 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
2040210a:	800017b7          	lui	a5,0x80001
2040210e:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdca0>
20402112:	a821                	j	2040212a <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20402114:	fe842703          	lw	a4,-24(s0)
20402118:	4785                	li	a5,1
2040211a:	00f71763          	bne	a4,a5,20402128 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
2040211e:	800017b7          	lui	a5,0x80001
20402122:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdca0>
20402126:	a011                	j	2040212a <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
20402128:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
2040212a:	853e                	mv	a0,a5
2040212c:	4472                	lw	s0,28(sp)
2040212e:	6105                	addi	sp,sp,32
20402130:	8082                	ret

20402132 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20402132:	1101                	addi	sp,sp,-32
20402134:	ce22                	sw	s0,28(sp)
20402136:	1000                	addi	s0,sp,32
20402138:	fea42623          	sw	a0,-20(s0)
2040213c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
20402140:	fe842783          	lw	a5,-24(s0)
20402144:	e399                	bnez	a5,2040214a <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
20402146:	478d                	li	a5,3
20402148:	a809                	j	2040215a <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
2040214a:	fe842703          	lw	a4,-24(s0)
2040214e:	4785                	li	a5,1
20402150:	00f71463          	bne	a4,a5,20402158 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
20402154:	479d                	li	a5,7
20402156:	a011                	j	2040215a <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
20402158:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
2040215a:	853e                	mv	a0,a5
2040215c:	4472                	lw	s0,28(sp)
2040215e:	6105                	addi	sp,sp,32
20402160:	8082                	ret

20402162 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20402162:	715d                	addi	sp,sp,-80
20402164:	c686                	sw	ra,76(sp)
20402166:	c4a2                	sw	s0,72(sp)
20402168:	c2ca                	sw	s2,68(sp)
2040216a:	c0ce                	sw	s3,64(sp)
2040216c:	de52                	sw	s4,60(sp)
2040216e:	dc56                	sw	s5,56(sp)
20402170:	da5a                	sw	s6,52(sp)
20402172:	d85e                	sw	s7,48(sp)
20402174:	d662                	sw	s8,44(sp)
20402176:	d466                	sw	s9,40(sp)
20402178:	0880                	addi	s0,sp,80
2040217a:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
2040217e:	fbc42783          	lw	a5,-68(s0)
20402182:	853e                	mv	a0,a5
20402184:	3725                	jal	204020ac <__metal_driver_sifive_clint0_control_base>
20402186:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
2040218a:	fcc42703          	lw	a4,-52(s0)
2040218e:	67b1                	lui	a5,0xc
20402190:	17f1                	addi	a5,a5,-4
20402192:	97ba                	add	a5,a5,a4
20402194:	439c                	lw	a5,0(a5)
20402196:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
2040219a:	fcc42703          	lw	a4,-52(s0)
2040219e:	67b1                	lui	a5,0xc
204021a0:	17e1                	addi	a5,a5,-8
204021a2:	97ba                	add	a5,a5,a4
204021a4:	439c                	lw	a5,0(a5)
204021a6:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
204021aa:	fcc42703          	lw	a4,-52(s0)
204021ae:	67b1                	lui	a5,0xc
204021b0:	17f1                	addi	a5,a5,-4
204021b2:	97ba                	add	a5,a5,a4
204021b4:	439c                	lw	a5,0(a5)
204021b6:	fc842703          	lw	a4,-56(s0)
204021ba:	fcf718e3          	bne	a4,a5,2040218a <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
204021be:	fc842783          	lw	a5,-56(s0)
204021c2:	8c3e                	mv	s8,a5
204021c4:	4c81                	li	s9,0
204021c6:	000c1993          	slli	s3,s8,0x0
204021ca:	4901                	li	s2,0
204021cc:	fc442783          	lw	a5,-60(s0)
204021d0:	8a3e                	mv	s4,a5
204021d2:	4a81                	li	s5,0
204021d4:	01496b33          	or	s6,s2,s4
204021d8:	0159ebb3          	or	s7,s3,s5
204021dc:	87da                	mv	a5,s6
204021de:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
204021e0:	853e                	mv	a0,a5
204021e2:	85c2                	mv	a1,a6
204021e4:	40b6                	lw	ra,76(sp)
204021e6:	4426                	lw	s0,72(sp)
204021e8:	4916                	lw	s2,68(sp)
204021ea:	4986                	lw	s3,64(sp)
204021ec:	5a72                	lw	s4,60(sp)
204021ee:	5ae2                	lw	s5,56(sp)
204021f0:	5b52                	lw	s6,52(sp)
204021f2:	5bc2                	lw	s7,48(sp)
204021f4:	5c32                	lw	s8,44(sp)
204021f6:	5ca2                	lw	s9,40(sp)
204021f8:	6161                	addi	sp,sp,80
204021fa:	8082                	ret

204021fc <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
204021fc:	7179                	addi	sp,sp,-48
204021fe:	d606                	sw	ra,44(sp)
20402200:	d422                	sw	s0,40(sp)
20402202:	d24a                	sw	s2,36(sp)
20402204:	d04e                	sw	s3,32(sp)
20402206:	1800                	addi	s0,sp,48
20402208:	fca42e23          	sw	a0,-36(s0)
2040220c:	fcb42c23          	sw	a1,-40(s0)
20402210:	fcc42823          	sw	a2,-48(s0)
20402214:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20402218:	fdc42783          	lw	a5,-36(s0)
2040221c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402220:	fec42783          	lw	a5,-20(s0)
20402224:	853e                	mv	a0,a5
20402226:	3559                	jal	204020ac <__metal_driver_sifive_clint0_control_base>
20402228:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
2040222c:	fd842783          	lw	a5,-40(s0)
20402230:	078e                	slli	a5,a5,0x3
20402232:	873e                	mv	a4,a5
20402234:	fe842783          	lw	a5,-24(s0)
20402238:	973e                	add	a4,a4,a5
2040223a:	6791                	lui	a5,0x4
2040223c:	0791                	addi	a5,a5,4
2040223e:	97ba                	add	a5,a5,a4
20402240:	873e                	mv	a4,a5
20402242:	57fd                	li	a5,-1
20402244:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20402246:	fd842783          	lw	a5,-40(s0)
2040224a:	078e                	slli	a5,a5,0x3
2040224c:	873e                	mv	a4,a5
2040224e:	fe842783          	lw	a5,-24(s0)
20402252:	973e                	add	a4,a4,a5
20402254:	6791                	lui	a5,0x4
20402256:	97ba                	add	a5,a5,a4
20402258:	873e                	mv	a4,a5
2040225a:	fd042783          	lw	a5,-48(s0)
2040225e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20402260:	fd442783          	lw	a5,-44(s0)
20402264:	0007d913          	srli	s2,a5,0x0
20402268:	4981                	li	s3,0
2040226a:	fd842783          	lw	a5,-40(s0)
2040226e:	078e                	slli	a5,a5,0x3
20402270:	873e                	mv	a4,a5
20402272:	fe842783          	lw	a5,-24(s0)
20402276:	973e                	add	a4,a4,a5
20402278:	6791                	lui	a5,0x4
2040227a:	0791                	addi	a5,a5,4
2040227c:	97ba                	add	a5,a5,a4
2040227e:	874a                	mv	a4,s2
20402280:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20402282:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20402284:	853e                	mv	a0,a5
20402286:	50b2                	lw	ra,44(sp)
20402288:	5422                	lw	s0,40(sp)
2040228a:	5912                	lw	s2,36(sp)
2040228c:	5982                	lw	s3,32(sp)
2040228e:	6145                	addi	sp,sp,48
20402290:	8082                	ret

20402292 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20402292:	1101                	addi	sp,sp,-32
20402294:	ce06                	sw	ra,28(sp)
20402296:	cc22                	sw	s0,24(sp)
20402298:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
2040229a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
2040229e:	f14027f3          	csrr	a5,mhartid
204022a2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
204022a6:	fec42783          	lw	a5,-20(s0)
204022aa:	853e                	mv	a0,a5
204022ac:	1ba030ef          	jal	ra,20405466 <metal_cpu_get>
204022b0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
204022b4:	fe842503          	lw	a0,-24(s0)
204022b8:	188030ef          	jal	ra,20405440 <metal_cpu_interrupt_controller>
204022bc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
204022be:	853e                	mv	a0,a5
204022c0:	40f2                	lw	ra,28(sp)
204022c2:	4462                	lw	s0,24(sp)
204022c4:	6105                	addi	sp,sp,32
204022c6:	8082                	ret

204022c8 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
204022c8:	7139                	addi	sp,sp,-64
204022ca:	de06                	sw	ra,60(sp)
204022cc:	dc22                	sw	s0,56(sp)
204022ce:	0080                	addi	s0,sp,64
204022d0:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204022d4:	fcc42503          	lw	a0,-52(s0)
204022d8:	3bed                	jal	204020d2 <__metal_driver_sifive_clint0_num_interrupts>
204022da:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
204022de:	fcc42783          	lw	a5,-52(s0)
204022e2:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
204022e6:	fe442783          	lw	a5,-28(s0)
204022ea:	43dc                	lw	a5,4(a5)
204022ec:	efa9                	bnez	a5,20402346 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
204022ee:	fe042623          	sw	zero,-20(s0)
204022f2:	a081                	j	20402332 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204022f4:	fec42583          	lw	a1,-20(s0)
204022f8:	fcc42503          	lw	a0,-52(s0)
204022fc:	3bed                	jal	204020f6 <__metal_driver_sifive_clint0_interrupt_parents>
204022fe:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402302:	fec42583          	lw	a1,-20(s0)
20402306:	fcc42503          	lw	a0,-52(s0)
2040230a:	3525                	jal	20402132 <__metal_driver_sifive_clint0_interrupt_lines>
2040230c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20402310:	fe042783          	lw	a5,-32(s0)
20402314:	439c                	lw	a5,0(a5)
20402316:	4fdc                	lw	a5,28(a5)
20402318:	fcc42683          	lw	a3,-52(s0)
2040231c:	4601                	li	a2,0
2040231e:	fdc42583          	lw	a1,-36(s0)
20402322:	fe042503          	lw	a0,-32(s0)
20402326:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20402328:	fec42783          	lw	a5,-20(s0)
2040232c:	0785                	addi	a5,a5,1
2040232e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20402332:	fec42703          	lw	a4,-20(s0)
20402336:	fe842783          	lw	a5,-24(s0)
2040233a:	faf74de3          	blt	a4,a5,204022f4 <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
2040233e:	fe442783          	lw	a5,-28(s0)
20402342:	4705                	li	a4,1
20402344:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20402346:	0001                	nop
20402348:	50f2                	lw	ra,60(sp)
2040234a:	5462                	lw	s0,56(sp)
2040234c:	6121                	addi	sp,sp,64
2040234e:	8082                	ret

20402350 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20402350:	7139                	addi	sp,sp,-64
20402352:	de06                	sw	ra,60(sp)
20402354:	dc22                	sw	s0,56(sp)
20402356:	0080                	addi	s0,sp,64
20402358:	fca42623          	sw	a0,-52(s0)
2040235c:	fcb42423          	sw	a1,-56(s0)
20402360:	fcc42223          	sw	a2,-60(s0)
20402364:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20402368:	57fd                	li	a5,-1
2040236a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
2040236e:	328010ef          	jal	ra,20403696 <__metal_controller_interrupt_vector_mode>
20402372:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
20402376:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
2040237a:	3f21                	jal	20402292 <_get_cpu_intc>
2040237c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402380:	fcc42503          	lw	a0,-52(s0)
20402384:	33b9                	jal	204020d2 <__metal_driver_sifive_clint0_num_interrupts>
20402386:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
2040238a:	fe042703          	lw	a4,-32(s0)
2040238e:	4785                	li	a5,1
20402390:	00f70863          	beq	a4,a5,204023a0 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20402394:	fe042783          	lw	a5,-32(s0)
20402398:	c781                	beqz	a5,204023a0 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
2040239a:	fec42783          	lw	a5,-20(s0)
2040239e:	a049                	j	20402420 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
204023a0:	fe042223          	sw	zero,-28(s0)
204023a4:	a091                	j	204023e8 <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204023a6:	fe442583          	lw	a1,-28(s0)
204023aa:	fcc42503          	lw	a0,-52(s0)
204023ae:	3351                	jal	20402132 <__metal_driver_sifive_clint0_interrupt_lines>
204023b0:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204023b4:	fe442583          	lw	a1,-28(s0)
204023b8:	fcc42503          	lw	a0,-52(s0)
204023bc:	3b2d                	jal	204020f6 <__metal_driver_sifive_clint0_interrupt_parents>
204023be:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
204023c2:	fdc42703          	lw	a4,-36(s0)
204023c6:	fe842783          	lw	a5,-24(s0)
204023ca:	00f71863          	bne	a4,a5,204023da <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
204023ce:	fc842703          	lw	a4,-56(s0)
204023d2:	fd442783          	lw	a5,-44(s0)
204023d6:	02f70063          	beq	a4,a5,204023f6 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
204023da:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
204023de:	fe442783          	lw	a5,-28(s0)
204023e2:	0785                	addi	a5,a5,1
204023e4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
204023e8:	fe442703          	lw	a4,-28(s0)
204023ec:	fd842783          	lw	a5,-40(s0)
204023f0:	faf74be3          	blt	a4,a5,204023a6 <__metal_driver_riscv_clint0_register+0x56>
204023f4:	a011                	j	204023f8 <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
204023f6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
204023f8:	fe842783          	lw	a5,-24(s0)
204023fc:	c385                	beqz	a5,2040241c <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
204023fe:	fe842783          	lw	a5,-24(s0)
20402402:	439c                	lw	a5,0(a5)
20402404:	4fdc                	lw	a5,28(a5)
20402406:	fc042683          	lw	a3,-64(s0)
2040240a:	fc442603          	lw	a2,-60(s0)
2040240e:	fc842583          	lw	a1,-56(s0)
20402412:	fe842503          	lw	a0,-24(s0)
20402416:	9782                	jalr	a5
20402418:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
2040241c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20402420:	853e                	mv	a0,a5
20402422:	50f2                	lw	ra,60(sp)
20402424:	5462                	lw	s0,56(sp)
20402426:	6121                	addi	sp,sp,64
20402428:	8082                	ret

2040242a <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
2040242a:	7179                	addi	sp,sp,-48
2040242c:	d622                	sw	s0,44(sp)
2040242e:	1800                	addi	s0,sp,48
20402430:	fca42e23          	sw	a0,-36(s0)
20402434:	fcb42c23          	sw	a1,-40(s0)
20402438:	fcc42a23          	sw	a2,-44(s0)
2040243c:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20402440:	57fd                	li	a5,-1
20402442:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20402446:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
2040244a:	853e                	mv	a0,a5
2040244c:	5432                	lw	s0,44(sp)
2040244e:	6145                	addi	sp,sp,48
20402450:	8082                	ret

20402452 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20402452:	1101                	addi	sp,sp,-32
20402454:	ce06                	sw	ra,28(sp)
20402456:	cc22                	sw	s0,24(sp)
20402458:	1000                	addi	s0,sp,32
2040245a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
2040245e:	238010ef          	jal	ra,20403696 <__metal_controller_interrupt_vector_mode>
20402462:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
20402464:	853e                	mv	a0,a5
20402466:	40f2                	lw	ra,28(sp)
20402468:	4462                	lw	s0,24(sp)
2040246a:	6105                	addi	sp,sp,32
2040246c:	8082                	ret

2040246e <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
2040246e:	7179                	addi	sp,sp,-48
20402470:	d606                	sw	ra,44(sp)
20402472:	d422                	sw	s0,40(sp)
20402474:	1800                	addi	s0,sp,48
20402476:	fca42e23          	sw	a0,-36(s0)
2040247a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
2040247e:	57fd                	li	a5,-1
20402480:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20402484:	3539                	jal	20402292 <_get_cpu_intc>
20402486:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
2040248a:	fe842783          	lw	a5,-24(s0)
2040248e:	c395                	beqz	a5,204024b2 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20402490:	fd842703          	lw	a4,-40(s0)
20402494:	4785                	li	a5,1
20402496:	00e7ef63          	bltu	a5,a4,204024b4 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
2040249a:	fe842783          	lw	a5,-24(s0)
2040249e:	439c                	lw	a5,0(a5)
204024a0:	43dc                	lw	a5,4(a5)
204024a2:	fd842583          	lw	a1,-40(s0)
204024a6:	fe842503          	lw	a0,-24(s0)
204024aa:	9782                	jalr	a5
204024ac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
204024b0:	a011                	j	204024b4 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
204024b2:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
204024b4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
204024b8:	853e                	mv	a0,a5
204024ba:	50b2                	lw	ra,44(sp)
204024bc:	5422                	lw	s0,40(sp)
204024be:	6145                	addi	sp,sp,48
204024c0:	8082                	ret

204024c2 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
204024c2:	7139                	addi	sp,sp,-64
204024c4:	de06                	sw	ra,60(sp)
204024c6:	dc22                	sw	s0,56(sp)
204024c8:	0080                	addi	s0,sp,64
204024ca:	fca42623          	sw	a0,-52(s0)
204024ce:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
204024d2:	57fd                	li	a5,-1
204024d4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
204024d8:	fc842783          	lw	a5,-56(s0)
204024dc:	c7c9                	beqz	a5,20402566 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
204024de:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
204024e2:	3b45                	jal	20402292 <_get_cpu_intc>
204024e4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204024e8:	fcc42503          	lw	a0,-52(s0)
204024ec:	36dd                	jal	204020d2 <__metal_driver_sifive_clint0_num_interrupts>
204024ee:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
204024f2:	fe042223          	sw	zero,-28(s0)
204024f6:	a091                	j	2040253a <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204024f8:	fe442583          	lw	a1,-28(s0)
204024fc:	fcc42503          	lw	a0,-52(s0)
20402500:	390d                	jal	20402132 <__metal_driver_sifive_clint0_interrupt_lines>
20402502:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402506:	fe442583          	lw	a1,-28(s0)
2040250a:	fcc42503          	lw	a0,-52(s0)
2040250e:	36e5                	jal	204020f6 <__metal_driver_sifive_clint0_interrupt_parents>
20402510:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20402514:	fe042703          	lw	a4,-32(s0)
20402518:	fe842783          	lw	a5,-24(s0)
2040251c:	00f71863          	bne	a4,a5,2040252c <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20402520:	fc842703          	lw	a4,-56(s0)
20402524:	fd842783          	lw	a5,-40(s0)
20402528:	02f70063          	beq	a4,a5,20402548 <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
2040252c:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402530:	fe442783          	lw	a5,-28(s0)
20402534:	0785                	addi	a5,a5,1
20402536:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
2040253a:	fe442703          	lw	a4,-28(s0)
2040253e:	fdc42783          	lw	a5,-36(s0)
20402542:	faf74be3          	blt	a4,a5,204024f8 <__metal_driver_riscv_clint0_enable+0x36>
20402546:	a011                	j	2040254a <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20402548:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
2040254a:	fe842783          	lw	a5,-24(s0)
2040254e:	cf81                	beqz	a5,20402566 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20402550:	fe842783          	lw	a5,-24(s0)
20402554:	439c                	lw	a5,0(a5)
20402556:	53dc                	lw	a5,36(a5)
20402558:	fc842583          	lw	a1,-56(s0)
2040255c:	fe842503          	lw	a0,-24(s0)
20402560:	9782                	jalr	a5
20402562:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20402566:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
2040256a:	853e                	mv	a0,a5
2040256c:	50f2                	lw	ra,60(sp)
2040256e:	5462                	lw	s0,56(sp)
20402570:	6121                	addi	sp,sp,64
20402572:	8082                	ret

20402574 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20402574:	7139                	addi	sp,sp,-64
20402576:	de06                	sw	ra,60(sp)
20402578:	dc22                	sw	s0,56(sp)
2040257a:	0080                	addi	s0,sp,64
2040257c:	fca42623          	sw	a0,-52(s0)
20402580:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20402584:	57fd                	li	a5,-1
20402586:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
2040258a:	fc842783          	lw	a5,-56(s0)
2040258e:	c7d9                	beqz	a5,2040261c <__metal_driver_riscv_clint0_disable+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20402590:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402594:	39fd                	jal	20402292 <_get_cpu_intc>
20402596:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
2040259a:	fcc42503          	lw	a0,-52(s0)
2040259e:	b35ff0ef          	jal	ra,204020d2 <__metal_driver_sifive_clint0_num_interrupts>
204025a2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
204025a6:	fe042223          	sw	zero,-28(s0)
204025aa:	a099                	j	204025f0 <__metal_driver_riscv_clint0_disable+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204025ac:	fe442583          	lw	a1,-28(s0)
204025b0:	fcc42503          	lw	a0,-52(s0)
204025b4:	3ebd                	jal	20402132 <__metal_driver_sifive_clint0_interrupt_lines>
204025b6:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204025ba:	fe442583          	lw	a1,-28(s0)
204025be:	fcc42503          	lw	a0,-52(s0)
204025c2:	b35ff0ef          	jal	ra,204020f6 <__metal_driver_sifive_clint0_interrupt_parents>
204025c6:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
204025ca:	fe042703          	lw	a4,-32(s0)
204025ce:	fe842783          	lw	a5,-24(s0)
204025d2:	00f71863          	bne	a4,a5,204025e2 <__metal_driver_riscv_clint0_disable+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
204025d6:	fc842703          	lw	a4,-56(s0)
204025da:	fd842783          	lw	a5,-40(s0)
204025de:	02f70063          	beq	a4,a5,204025fe <__metal_driver_riscv_clint0_disable+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
204025e2:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
204025e6:	fe442783          	lw	a5,-28(s0)
204025ea:	0785                	addi	a5,a5,1
204025ec:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
204025f0:	fe442703          	lw	a4,-28(s0)
204025f4:	fdc42783          	lw	a5,-36(s0)
204025f8:	faf74ae3          	blt	a4,a5,204025ac <__metal_driver_riscv_clint0_disable+0x38>
204025fc:	a011                	j	20402600 <__metal_driver_riscv_clint0_disable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
204025fe:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20402600:	fe842783          	lw	a5,-24(s0)
20402604:	cf81                	beqz	a5,2040261c <__metal_driver_riscv_clint0_disable+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20402606:	fe842783          	lw	a5,-24(s0)
2040260a:	439c                	lw	a5,0(a5)
2040260c:	579c                	lw	a5,40(a5)
2040260e:	fc842583          	lw	a1,-56(s0)
20402612:	fe842503          	lw	a0,-24(s0)
20402616:	9782                	jalr	a5
20402618:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
2040261c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
20402620:	853e                	mv	a0,a5
20402622:	50f2                	lw	ra,60(sp)
20402624:	5462                	lw	s0,56(sp)
20402626:	6121                	addi	sp,sp,64
20402628:	8082                	ret

2040262a <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
2040262a:	7179                	addi	sp,sp,-48
2040262c:	d606                	sw	ra,44(sp)
2040262e:	d422                	sw	s0,40(sp)
20402630:	1800                	addi	s0,sp,48
20402632:	fca42e23          	sw	a0,-36(s0)
20402636:	fcb42c23          	sw	a1,-40(s0)
2040263a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
2040263e:	57fd                	li	a5,-1
20402640:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20402644:	fdc42783          	lw	a5,-36(s0)
20402648:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
2040264c:	fdc42503          	lw	a0,-36(s0)
20402650:	a5dff0ef          	jal	ra,204020ac <__metal_driver_sifive_clint0_control_base>
20402654:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20402658:	fd842703          	lw	a4,-40(s0)
2040265c:	4789                	li	a5,2
2040265e:	04f70963          	beq	a4,a5,204026b0 <__metal_driver_riscv_clint0_command_request+0x86>
20402662:	fd842703          	lw	a4,-40(s0)
20402666:	4789                	li	a5,2
20402668:	00e7c863          	blt	a5,a4,20402678 <__metal_driver_riscv_clint0_command_request+0x4e>
2040266c:	fd842703          	lw	a4,-40(s0)
20402670:	4785                	li	a5,1
20402672:	00f70e63          	beq	a4,a5,2040268e <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20402676:	a8f1                	j	20402752 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20402678:	fd842703          	lw	a4,-40(s0)
2040267c:	478d                	li	a5,3
2040267e:	04f70d63          	beq	a4,a5,204026d8 <__metal_driver_riscv_clint0_command_request+0xae>
20402682:	fd842703          	lw	a4,-40(s0)
20402686:	4791                	li	a5,4
20402688:	08f70963          	beq	a4,a5,2040271a <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
2040268c:	a0d9                	j	20402752 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
2040268e:	fd442783          	lw	a5,-44(s0)
20402692:	cbcd                	beqz	a5,20402744 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20402694:	fe842503          	lw	a0,-24(s0)
20402698:	acbff0ef          	jal	ra,20402162 <__metal_clint0_mtime_get>
2040269c:	87aa                	mv	a5,a0
2040269e:	882e                	mv	a6,a1
204026a0:	fd442703          	lw	a4,-44(s0)
204026a4:	c31c                	sw	a5,0(a4)
204026a6:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
204026aa:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
204026ae:	a859                	j	20402744 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
204026b0:	fd442783          	lw	a5,-44(s0)
204026b4:	cbd1                	beqz	a5,20402748 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
204026b6:	fd442783          	lw	a5,-44(s0)
204026ba:	439c                	lw	a5,0(a5)
204026bc:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204026c0:	fe042783          	lw	a5,-32(s0)
204026c4:	078a                	slli	a5,a5,0x2
204026c6:	873e                	mv	a4,a5
204026c8:	fe442783          	lw	a5,-28(s0)
204026cc:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
204026ce:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
204026d2:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
204026d6:	a88d                	j	20402748 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
204026d8:	fd442783          	lw	a5,-44(s0)
204026dc:	cba5                	beqz	a5,2040274c <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
204026de:	fd442783          	lw	a5,-44(s0)
204026e2:	439c                	lw	a5,0(a5)
204026e4:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204026e8:	fe042783          	lw	a5,-32(s0)
204026ec:	078a                	slli	a5,a5,0x2
204026ee:	873e                	mv	a4,a5
204026f0:	fe442783          	lw	a5,-28(s0)
204026f4:	97ba                	add	a5,a5,a4
204026f6:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
204026f8:	4785                	li	a5,1
204026fa:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
204026fc:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402700:	fe042783          	lw	a5,-32(s0)
20402704:	078a                	slli	a5,a5,0x2
20402706:	873e                	mv	a4,a5
20402708:	fe442783          	lw	a5,-28(s0)
2040270c:	97ba                	add	a5,a5,a4
2040270e:	439c                	lw	a5,0(a5)
20402710:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20402714:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402718:	a815                	j	2040274c <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
2040271a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
2040271e:	fd442783          	lw	a5,-44(s0)
20402722:	c79d                	beqz	a5,20402750 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20402724:	fd442783          	lw	a5,-44(s0)
20402728:	439c                	lw	a5,0(a5)
2040272a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040272e:	fe042783          	lw	a5,-32(s0)
20402732:	078a                	slli	a5,a5,0x2
20402734:	873e                	mv	a4,a5
20402736:	fe442783          	lw	a5,-28(s0)
2040273a:	97ba                	add	a5,a5,a4
2040273c:	439c                	lw	a5,0(a5)
2040273e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402742:	a039                	j	20402750 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402744:	0001                	nop
20402746:	a031                	j	20402752 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402748:	0001                	nop
2040274a:	a021                	j	20402752 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
2040274c:	0001                	nop
2040274e:	a011                	j	20402752 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402750:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20402752:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
20402756:	853e                	mv	a0,a5
20402758:	50b2                	lw	ra,44(sp)
2040275a:	5422                	lw	s0,40(sp)
2040275c:	6145                	addi	sp,sp,48
2040275e:	8082                	ret

20402760 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20402760:	7179                	addi	sp,sp,-48
20402762:	d606                	sw	ra,44(sp)
20402764:	d422                	sw	s0,40(sp)
20402766:	1800                	addi	s0,sp,48
20402768:	fca42e23          	sw	a0,-36(s0)
2040276c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20402770:	521020ef          	jal	ra,20405490 <metal_cpu_get_current_hartid>
20402774:	87aa                	mv	a5,a0
20402776:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
2040277a:	fec40793          	addi	a5,s0,-20
2040277e:	863e                	mv	a2,a5
20402780:	4589                	li	a1,2
20402782:	fdc42503          	lw	a0,-36(s0)
20402786:	3555                	jal	2040262a <__metal_driver_riscv_clint0_command_request>
20402788:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
2040278a:	853e                	mv	a0,a5
2040278c:	50b2                	lw	ra,44(sp)
2040278e:	5422                	lw	s0,40(sp)
20402790:	6145                	addi	sp,sp,48
20402792:	8082                	ret

20402794 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20402794:	7179                	addi	sp,sp,-48
20402796:	d606                	sw	ra,44(sp)
20402798:	d422                	sw	s0,40(sp)
2040279a:	1800                	addi	s0,sp,48
2040279c:	fca42e23          	sw	a0,-36(s0)
204027a0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
204027a4:	4ed020ef          	jal	ra,20405490 <metal_cpu_get_current_hartid>
204027a8:	87aa                	mv	a5,a0
204027aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
204027ae:	fec40793          	addi	a5,s0,-20
204027b2:	863e                	mv	a2,a5
204027b4:	458d                	li	a1,3
204027b6:	fdc42503          	lw	a0,-36(s0)
204027ba:	3d85                	jal	2040262a <__metal_driver_riscv_clint0_command_request>
204027bc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
204027be:	853e                	mv	a0,a5
204027c0:	50b2                	lw	ra,44(sp)
204027c2:	5422                	lw	s0,40(sp)
204027c4:	6145                	addi	sp,sp,48
204027c6:	8082                	ret

204027c8 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
204027c8:	1101                	addi	sp,sp,-32
204027ca:	ce22                	sw	s0,28(sp)
204027cc:	1000                	addi	s0,sp,32
204027ce:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204027d2:	fec42703          	lw	a4,-20(s0)
204027d6:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
204027da:	00f71463          	bne	a4,a5,204027e2 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
204027de:	4781                	li	a5,0
204027e0:	a011                	j	204027e4 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
204027e2:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
204027e4:	853e                	mv	a0,a5
204027e6:	4472                	lw	s0,28(sp)
204027e8:	6105                	addi	sp,sp,32
204027ea:	8082                	ret

204027ec <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
204027ec:	1101                	addi	sp,sp,-32
204027ee:	ce22                	sw	s0,28(sp)
204027f0:	1000                	addi	s0,sp,32
204027f2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204027f6:	fec42703          	lw	a4,-20(s0)
204027fa:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
204027fe:	00f71763          	bne	a4,a5,2040280c <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
20402802:	000f47b7          	lui	a5,0xf4
20402806:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
2040280a:	a011                	j	2040280e <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
2040280c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
2040280e:	853e                	mv	a0,a5
20402810:	4472                	lw	s0,28(sp)
20402812:	6105                	addi	sp,sp,32
20402814:	8082                	ret

20402816 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
20402816:	1101                	addi	sp,sp,-32
20402818:	ce22                	sw	s0,28(sp)
2040281a:	1000                	addi	s0,sp,32
2040281c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402820:	fec42703          	lw	a4,-20(s0)
20402824:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20402828:	00f71763          	bne	a4,a5,20402836 <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
2040282c:	800017b7          	lui	a5,0x80001
20402830:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdca0>
20402834:	a011                	j	20402838 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
20402836:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
20402838:	853e                	mv	a0,a5
2040283a:	4472                	lw	s0,28(sp)
2040283c:	6105                	addi	sp,sp,32
2040283e:	8082                	ret

20402840 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20402840:	1101                	addi	sp,sp,-32
20402842:	ce22                	sw	s0,28(sp)
20402844:	1000                	addi	s0,sp,32
20402846:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
2040284a:	fec42783          	lw	a5,-20(s0)
2040284e:	00f04a63          	bgtz	a5,20402862 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20402852:	fec42703          	lw	a4,-20(s0)
20402856:	070a                	slli	a4,a4,0x2
20402858:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040285c:	97ba                	add	a5,a5,a4
2040285e:	439c                	lw	a5,0(a5)
20402860:	a011                	j	20402864 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20402862:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20402864:	853e                	mv	a0,a5
20402866:	4472                	lw	s0,28(sp)
20402868:	6105                	addi	sp,sp,32
2040286a:	8082                	ret

2040286c <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
2040286c:	1101                	addi	sp,sp,-32
2040286e:	ce22                	sw	s0,28(sp)
20402870:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20402872:	f14027f3          	csrr	a5,mhartid
20402876:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
2040287a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
2040287e:	853e                	mv	a0,a5
20402880:	4472                	lw	s0,28(sp)
20402882:	6105                	addi	sp,sp,32
20402884:	8082                	ret

20402886 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20402886:	1101                	addi	sp,sp,-32
20402888:	ce22                	sw	s0,28(sp)
2040288a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
2040288c:	47a1                	li	a5,8
2040288e:	3007a7f3          	csrrs	a5,mstatus,a5
20402892:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
20402896:	0001                	nop
20402898:	4472                	lw	s0,28(sp)
2040289a:	6105                	addi	sp,sp,32
2040289c:	8082                	ret

2040289e <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
2040289e:	1101                	addi	sp,sp,-32
204028a0:	ce22                	sw	s0,28(sp)
204028a2:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204028a4:	47a1                	li	a5,8
204028a6:	3007b7f3          	csrrc	a5,mstatus,a5
204028aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
204028ae:	0001                	nop
204028b0:	4472                	lw	s0,28(sp)
204028b2:	6105                	addi	sp,sp,32
204028b4:	8082                	ret

204028b6 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
204028b6:	1101                	addi	sp,sp,-32
204028b8:	ce22                	sw	s0,28(sp)
204028ba:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204028bc:	47a1                	li	a5,8
204028be:	3047a7f3          	csrrs	a5,mie,a5
204028c2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
204028c6:	0001                	nop
204028c8:	4472                	lw	s0,28(sp)
204028ca:	6105                	addi	sp,sp,32
204028cc:	8082                	ret

204028ce <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
204028ce:	1101                	addi	sp,sp,-32
204028d0:	ce22                	sw	s0,28(sp)
204028d2:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204028d4:	47a1                	li	a5,8
204028d6:	3047b7f3          	csrrc	a5,mie,a5
204028da:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
204028de:	0001                	nop
204028e0:	4472                	lw	s0,28(sp)
204028e2:	6105                	addi	sp,sp,32
204028e4:	8082                	ret

204028e6 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
204028e6:	1101                	addi	sp,sp,-32
204028e8:	ce22                	sw	s0,28(sp)
204028ea:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204028ec:	08000793          	li	a5,128
204028f0:	3047a7f3          	csrrs	a5,mie,a5
204028f4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
204028f8:	0001                	nop
204028fa:	4472                	lw	s0,28(sp)
204028fc:	6105                	addi	sp,sp,32
204028fe:	8082                	ret

20402900 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20402900:	1101                	addi	sp,sp,-32
20402902:	ce22                	sw	s0,28(sp)
20402904:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402906:	08000793          	li	a5,128
2040290a:	3047b7f3          	csrrc	a5,mie,a5
2040290e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20402912:	0001                	nop
20402914:	4472                	lw	s0,28(sp)
20402916:	6105                	addi	sp,sp,32
20402918:	8082                	ret

2040291a <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
2040291a:	1101                	addi	sp,sp,-32
2040291c:	ce22                	sw	s0,28(sp)
2040291e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402920:	6785                	lui	a5,0x1
20402922:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402926:	3047a7f3          	csrrs	a5,mie,a5
2040292a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
2040292e:	0001                	nop
20402930:	4472                	lw	s0,28(sp)
20402932:	6105                	addi	sp,sp,32
20402934:	8082                	ret

20402936 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
20402936:	1101                	addi	sp,sp,-32
20402938:	ce22                	sw	s0,28(sp)
2040293a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
2040293c:	6785                	lui	a5,0x1
2040293e:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402942:	3047b7f3          	csrrc	a5,mie,a5
20402946:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
2040294a:	0001                	nop
2040294c:	4472                	lw	s0,28(sp)
2040294e:	6105                	addi	sp,sp,32
20402950:	8082                	ret

20402952 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20402952:	7179                	addi	sp,sp,-48
20402954:	d622                	sw	s0,44(sp)
20402956:	1800                	addi	s0,sp,48
20402958:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
2040295c:	fdc42783          	lw	a5,-36(s0)
20402960:	4705                	li	a4,1
20402962:	00f717b3          	sll	a5,a4,a5
20402966:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
2040296a:	fec42783          	lw	a5,-20(s0)
2040296e:	3047a7f3          	csrrs	a5,mie,a5
20402972:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
20402976:	0001                	nop
20402978:	5432                	lw	s0,44(sp)
2040297a:	6145                	addi	sp,sp,48
2040297c:	8082                	ret

2040297e <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
2040297e:	7179                	addi	sp,sp,-48
20402980:	d622                	sw	s0,44(sp)
20402982:	1800                	addi	s0,sp,48
20402984:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
20402988:	fdc42783          	lw	a5,-36(s0)
2040298c:	4705                	li	a4,1
2040298e:	00f717b3          	sll	a5,a4,a5
20402992:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20402996:	fec42783          	lw	a5,-20(s0)
2040299a:	3047b7f3          	csrrc	a5,mie,a5
2040299e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
204029a2:	0001                	nop
204029a4:	5432                	lw	s0,44(sp)
204029a6:	6145                	addi	sp,sp,48
204029a8:	8082                	ret

204029aa <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
204029aa:	1101                	addi	sp,sp,-32
204029ac:	ce06                	sw	ra,28(sp)
204029ae:	cc22                	sw	s0,24(sp)
204029b0:	1000                	addi	s0,sp,32
204029b2:	fea42623          	sw	a0,-20(s0)
204029b6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
204029ba:	06400513          	li	a0,100
204029be:	2ed020ef          	jal	ra,204054aa <metal_shutdown>

204029c2 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
204029c2:	1101                	addi	sp,sp,-32
204029c4:	ce06                	sw	ra,28(sp)
204029c6:	cc22                	sw	s0,24(sp)
204029c8:	1000                	addi	s0,sp,32
204029ca:	fea42623          	sw	a0,-20(s0)
204029ce:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
204029d2:	0c800513          	li	a0,200
204029d6:	2d5020ef          	jal	ra,204054aa <metal_shutdown>

204029da <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
204029da:	715d                	addi	sp,sp,-80
204029dc:	c686                	sw	ra,76(sp)
204029de:	c496                	sw	t0,72(sp)
204029e0:	c29a                	sw	t1,68(sp)
204029e2:	c09e                	sw	t2,64(sp)
204029e4:	de22                	sw	s0,60(sp)
204029e6:	dc2a                	sw	a0,56(sp)
204029e8:	da2e                	sw	a1,52(sp)
204029ea:	d832                	sw	a2,48(sp)
204029ec:	d636                	sw	a3,44(sp)
204029ee:	d43a                	sw	a4,40(sp)
204029f0:	d23e                	sw	a5,36(sp)
204029f2:	d042                	sw	a6,32(sp)
204029f4:	ce46                	sw	a7,28(sp)
204029f6:	cc72                	sw	t3,24(sp)
204029f8:	ca76                	sw	t4,20(sp)
204029fa:	c87a                	sw	t5,16(sp)
204029fc:	c67e                	sw	t6,12(sp)
204029fe:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20402a00:	12c00513          	li	a0,300
20402a04:	2a7020ef          	jal	ra,204054aa <metal_shutdown>

20402a08 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20402a08:	711d                	addi	sp,sp,-96
20402a0a:	ce86                	sw	ra,92(sp)
20402a0c:	cc96                	sw	t0,88(sp)
20402a0e:	ca9a                	sw	t1,84(sp)
20402a10:	c89e                	sw	t2,80(sp)
20402a12:	c6a2                	sw	s0,76(sp)
20402a14:	c4aa                	sw	a0,72(sp)
20402a16:	c2ae                	sw	a1,68(sp)
20402a18:	c0b2                	sw	a2,64(sp)
20402a1a:	de36                	sw	a3,60(sp)
20402a1c:	dc3a                	sw	a4,56(sp)
20402a1e:	da3e                	sw	a5,52(sp)
20402a20:	d842                	sw	a6,48(sp)
20402a22:	d646                	sw	a7,44(sp)
20402a24:	d472                	sw	t3,40(sp)
20402a26:	d276                	sw	t4,36(sp)
20402a28:	d07a                	sw	t5,32(sp)
20402a2a:	ce7e                	sw	t6,28(sp)
20402a2c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a2e:	3d3d                	jal	2040286c <__metal_myhart_id>
20402a30:	872a                	mv	a4,a0
20402a32:	070a                	slli	a4,a4,0x2
20402a34:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402a38:	97ba                	add	a5,a5,a4
20402a3a:	439c                	lw	a5,0(a5)
20402a3c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20402a40:	fac42783          	lw	a5,-84(s0)
20402a44:	c785                	beqz	a5,20402a6c <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402a46:	fac42503          	lw	a0,-84(s0)
20402a4a:	33f1                	jal	20402816 <__metal_driver_cpu_interrupt_controller>
20402a4c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20402a50:	fa842783          	lw	a5,-88(s0)
20402a54:	0e07a783          	lw	a5,224(a5)
20402a58:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20402a5c:	fa842783          	lw	a5,-88(s0)
20402a60:	0d87a783          	lw	a5,216(a5)
20402a64:	fa442583          	lw	a1,-92(s0)
20402a68:	450d                	li	a0,3
20402a6a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20402a6c:	0001                	nop
20402a6e:	40f6                	lw	ra,92(sp)
20402a70:	42e6                	lw	t0,88(sp)
20402a72:	4356                	lw	t1,84(sp)
20402a74:	43c6                	lw	t2,80(sp)
20402a76:	4436                	lw	s0,76(sp)
20402a78:	4526                	lw	a0,72(sp)
20402a7a:	4596                	lw	a1,68(sp)
20402a7c:	4606                	lw	a2,64(sp)
20402a7e:	56f2                	lw	a3,60(sp)
20402a80:	5762                	lw	a4,56(sp)
20402a82:	57d2                	lw	a5,52(sp)
20402a84:	5842                	lw	a6,48(sp)
20402a86:	58b2                	lw	a7,44(sp)
20402a88:	5e22                	lw	t3,40(sp)
20402a8a:	5e92                	lw	t4,36(sp)
20402a8c:	5f02                	lw	t5,32(sp)
20402a8e:	4ff2                	lw	t6,28(sp)
20402a90:	6125                	addi	sp,sp,96
20402a92:	30200073          	mret

20402a96 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20402a96:	7179                	addi	sp,sp,-48
20402a98:	d606                	sw	ra,44(sp)
20402a9a:	d422                	sw	s0,40(sp)
20402a9c:	1800                	addi	s0,sp,48
20402a9e:	fca42e23          	sw	a0,-36(s0)
20402aa2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402aa6:	33d9                	jal	2040286c <__metal_myhart_id>
20402aa8:	872a                	mv	a4,a0
20402aaa:	070a                	slli	a4,a4,0x2
20402aac:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402ab0:	97ba                	add	a5,a5,a4
20402ab2:	439c                	lw	a5,0(a5)
20402ab4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402ab8:	342027f3          	csrr	a5,mcause
20402abc:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20402ac0:	fec42783          	lw	a5,-20(s0)
20402ac4:	c795                	beqz	a5,20402af0 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ac6:	fec42503          	lw	a0,-20(s0)
20402aca:	33b1                	jal	20402816 <__metal_driver_cpu_interrupt_controller>
20402acc:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20402ad0:	fe842783          	lw	a5,-24(s0)
20402ad4:	3ff7f793          	andi	a5,a5,1023
20402ad8:	fe442703          	lw	a4,-28(s0)
20402adc:	0e078793          	addi	a5,a5,224
20402ae0:	078a                	slli	a5,a5,0x2
20402ae2:	97ba                	add	a5,a5,a4
20402ae4:	479c                	lw	a5,8(a5)
20402ae6:	fdc42583          	lw	a1,-36(s0)
20402aea:	fec42503          	lw	a0,-20(s0)
20402aee:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20402af0:	0001                	nop
20402af2:	50b2                	lw	ra,44(sp)
20402af4:	5422                	lw	s0,40(sp)
20402af6:	6145                	addi	sp,sp,48
20402af8:	8082                	ret

20402afa <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20402afa:	711d                	addi	sp,sp,-96
20402afc:	ce86                	sw	ra,92(sp)
20402afe:	cc96                	sw	t0,88(sp)
20402b00:	ca9a                	sw	t1,84(sp)
20402b02:	c89e                	sw	t2,80(sp)
20402b04:	c6a2                	sw	s0,76(sp)
20402b06:	c4aa                	sw	a0,72(sp)
20402b08:	c2ae                	sw	a1,68(sp)
20402b0a:	c0b2                	sw	a2,64(sp)
20402b0c:	de36                	sw	a3,60(sp)
20402b0e:	dc3a                	sw	a4,56(sp)
20402b10:	da3e                	sw	a5,52(sp)
20402b12:	d842                	sw	a6,48(sp)
20402b14:	d646                	sw	a7,44(sp)
20402b16:	d472                	sw	t3,40(sp)
20402b18:	d276                	sw	t4,36(sp)
20402b1a:	d07a                	sw	t5,32(sp)
20402b1c:	ce7e                	sw	t6,28(sp)
20402b1e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402b20:	33b1                	jal	2040286c <__metal_myhart_id>
20402b22:	872a                	mv	a4,a0
20402b24:	070a                	slli	a4,a4,0x2
20402b26:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402b2a:	97ba                	add	a5,a5,a4
20402b2c:	439c                	lw	a5,0(a5)
20402b2e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20402b32:	fac42783          	lw	a5,-84(s0)
20402b36:	c785                	beqz	a5,20402b5e <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b38:	fac42503          	lw	a0,-84(s0)
20402b3c:	39e9                	jal	20402816 <__metal_driver_cpu_interrupt_controller>
20402b3e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20402b42:	fa842783          	lw	a5,-88(s0)
20402b46:	1407a783          	lw	a5,320(a5)
20402b4a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20402b4e:	fa842783          	lw	a5,-88(s0)
20402b52:	1387a783          	lw	a5,312(a5)
20402b56:	fa442583          	lw	a1,-92(s0)
20402b5a:	451d                	li	a0,7
20402b5c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20402b5e:	0001                	nop
20402b60:	40f6                	lw	ra,92(sp)
20402b62:	42e6                	lw	t0,88(sp)
20402b64:	4356                	lw	t1,84(sp)
20402b66:	43c6                	lw	t2,80(sp)
20402b68:	4436                	lw	s0,76(sp)
20402b6a:	4526                	lw	a0,72(sp)
20402b6c:	4596                	lw	a1,68(sp)
20402b6e:	4606                	lw	a2,64(sp)
20402b70:	56f2                	lw	a3,60(sp)
20402b72:	5762                	lw	a4,56(sp)
20402b74:	57d2                	lw	a5,52(sp)
20402b76:	5842                	lw	a6,48(sp)
20402b78:	58b2                	lw	a7,44(sp)
20402b7a:	5e22                	lw	t3,40(sp)
20402b7c:	5e92                	lw	t4,36(sp)
20402b7e:	5f02                	lw	t5,32(sp)
20402b80:	4ff2                	lw	t6,28(sp)
20402b82:	6125                	addi	sp,sp,96
20402b84:	30200073          	mret

20402b88 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20402b88:	7179                	addi	sp,sp,-48
20402b8a:	d606                	sw	ra,44(sp)
20402b8c:	d422                	sw	s0,40(sp)
20402b8e:	1800                	addi	s0,sp,48
20402b90:	fca42e23          	sw	a0,-36(s0)
20402b94:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20402b98:	39d1                	jal	2040286c <__metal_myhart_id>
20402b9a:	87aa                	mv	a5,a0
20402b9c:	853e                	mv	a0,a5
20402b9e:	314d                	jal	20402840 <__metal_driver_cpu_get>
20402ba0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20402ba4:	fec42503          	lw	a0,-20(s0)
20402ba8:	148010ef          	jal	ra,20403cf0 <__metal_driver_cpu_mtime_get>
20402bac:	fea42023          	sw	a0,-32(s0)
20402bb0:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20402bb4:	fe042783          	lw	a5,-32(s0)
20402bb8:	fe442803          	lw	a6,-28(s0)
20402bbc:	45a9                	li	a1,10
20402bbe:	4601                	li	a2,0
20402bc0:	00b786b3          	add	a3,a5,a1
20402bc4:	8536                	mv	a0,a3
20402bc6:	00f53533          	sltu	a0,a0,a5
20402bca:	00c80733          	add	a4,a6,a2
20402bce:	00e507b3          	add	a5,a0,a4
20402bd2:	873e                	mv	a4,a5
20402bd4:	87b6                	mv	a5,a3
20402bd6:	883a                	mv	a6,a4
20402bd8:	85be                	mv	a1,a5
20402bda:	8642                	mv	a2,a6
20402bdc:	fec42503          	lw	a0,-20(s0)
20402be0:	176010ef          	jal	ra,20403d56 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20402be4:	0001                	nop
20402be6:	50b2                	lw	ra,44(sp)
20402be8:	5422                	lw	s0,40(sp)
20402bea:	6145                	addi	sp,sp,48
20402bec:	8082                	ret
	...

20402c00 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402c00:	7119                	addi	sp,sp,-128
20402c02:	de86                	sw	ra,124(sp)
20402c04:	dc96                	sw	t0,120(sp)
20402c06:	da9a                	sw	t1,116(sp)
20402c08:	d89e                	sw	t2,112(sp)
20402c0a:	d6a2                	sw	s0,108(sp)
20402c0c:	d4aa                	sw	a0,104(sp)
20402c0e:	d2ae                	sw	a1,100(sp)
20402c10:	d0b2                	sw	a2,96(sp)
20402c12:	ceb6                	sw	a3,92(sp)
20402c14:	ccba                	sw	a4,88(sp)
20402c16:	cabe                	sw	a5,84(sp)
20402c18:	c8c2                	sw	a6,80(sp)
20402c1a:	c6c6                	sw	a7,76(sp)
20402c1c:	c4f2                	sw	t3,72(sp)
20402c1e:	c2f6                	sw	t4,68(sp)
20402c20:	c0fa                	sw	t5,64(sp)
20402c22:	de7e                	sw	t6,60(sp)
20402c24:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402c26:	c47ff0ef          	jal	ra,2040286c <__metal_myhart_id>
20402c2a:	872a                	mv	a4,a0
20402c2c:	070a                	slli	a4,a4,0x2
20402c2e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402c32:	97ba                	add	a5,a5,a4
20402c34:	439c                	lw	a5,0(a5)
20402c36:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402c3a:	342027f3          	csrr	a5,mcause
20402c3e:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20402c42:	341027f3          	csrr	a5,mepc
20402c46:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
20402c4a:	343027f3          	csrr	a5,mtval
20402c4e:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20402c52:	305027f3          	csrr	a5,mtvec
20402c56:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
20402c5a:	fac42783          	lw	a5,-84(s0)
20402c5e:	c7e9                	beqz	a5,20402d28 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402c60:	fac42503          	lw	a0,-84(s0)
20402c64:	bb3ff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20402c68:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
20402c6c:	fa842783          	lw	a5,-88(s0)
20402c70:	3ff7f793          	andi	a5,a5,1023
20402c74:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20402c78:	fa842783          	lw	a5,-88(s0)
20402c7c:	0807d863          	bgez	a5,20402d0c <__metal_exception_handler+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402c80:	f9442703          	lw	a4,-108(s0)
20402c84:	47ad                	li	a5,11
20402c86:	00e7d763          	bge	a5,a4,20402c94 <__metal_exception_handler+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402c8a:	f9c42783          	lw	a5,-100(s0)
20402c8e:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402c92:	ef9d                	bnez	a5,20402cd0 <__metal_exception_handler+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402c94:	f9842683          	lw	a3,-104(s0)
20402c98:	f9442703          	lw	a4,-108(s0)
20402c9c:	87ba                	mv	a5,a4
20402c9e:	0786                	slli	a5,a5,0x1
20402ca0:	97ba                	add	a5,a5,a4
20402ca2:	078e                	slli	a5,a5,0x3
20402ca4:	97b6                	add	a5,a5,a3
20402ca6:	0987a783          	lw	a5,152(a5)
20402caa:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
20402cae:	f9842683          	lw	a3,-104(s0)
20402cb2:	f9442703          	lw	a4,-108(s0)
20402cb6:	87ba                	mv	a5,a4
20402cb8:	0786                	slli	a5,a5,0x1
20402cba:	97ba                	add	a5,a5,a4
20402cbc:	078e                	slli	a5,a5,0x3
20402cbe:	97b6                	add	a5,a5,a3
20402cc0:	0907a783          	lw	a5,144(a5)
20402cc4:	f8c42583          	lw	a1,-116(s0)
20402cc8:	f9442503          	lw	a0,-108(s0)
20402ccc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
20402cce:	a8a9                	j	20402d28 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20402cd0:	f9c42783          	lw	a5,-100(s0)
20402cd4:	03f7f713          	andi	a4,a5,63
20402cd8:	4789                	li	a5,2
20402cda:	04f71763          	bne	a4,a5,20402d28 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
20402cde:	307027f3          	csrr	a5,mtvt
20402ce2:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402ce6:	f9842783          	lw	a5,-104(s0)
20402cea:	0dc7a783          	lw	a5,220(a5)
20402cee:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20402cf2:	f9042783          	lw	a5,-112(s0)
20402cf6:	439c                	lw	a5,0(a5)
20402cf8:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
20402cfc:	f8842783          	lw	a5,-120(s0)
20402d00:	f8c42583          	lw	a1,-116(s0)
20402d04:	f9442503          	lw	a0,-108(s0)
20402d08:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402d0a:	a839                	j	20402d28 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402d0c:	f9842703          	lw	a4,-104(s0)
20402d10:	f9442783          	lw	a5,-108(s0)
20402d14:	0e078793          	addi	a5,a5,224
20402d18:	078a                	slli	a5,a5,0x2
20402d1a:	97ba                	add	a5,a5,a4
20402d1c:	479c                	lw	a5,8(a5)
20402d1e:	f9442583          	lw	a1,-108(s0)
20402d22:	fac42503          	lw	a0,-84(s0)
20402d26:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20402d28:	50f6                	lw	ra,124(sp)
20402d2a:	52e6                	lw	t0,120(sp)
20402d2c:	5356                	lw	t1,116(sp)
20402d2e:	53c6                	lw	t2,112(sp)
20402d30:	5436                	lw	s0,108(sp)
20402d32:	5526                	lw	a0,104(sp)
20402d34:	5596                	lw	a1,100(sp)
20402d36:	5606                	lw	a2,96(sp)
20402d38:	46f6                	lw	a3,92(sp)
20402d3a:	4766                	lw	a4,88(sp)
20402d3c:	47d6                	lw	a5,84(sp)
20402d3e:	4846                	lw	a6,80(sp)
20402d40:	48b6                	lw	a7,76(sp)
20402d42:	4e26                	lw	t3,72(sp)
20402d44:	4e96                	lw	t4,68(sp)
20402d46:	4f06                	lw	t5,64(sp)
20402d48:	5ff2                	lw	t6,60(sp)
20402d4a:	6109                	addi	sp,sp,128
20402d4c:	30200073          	mret
	...

20402d76 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20402d76:	711d                	addi	sp,sp,-96
20402d78:	ce86                	sw	ra,92(sp)
20402d7a:	cc96                	sw	t0,88(sp)
20402d7c:	ca9a                	sw	t1,84(sp)
20402d7e:	c89e                	sw	t2,80(sp)
20402d80:	c6a2                	sw	s0,76(sp)
20402d82:	c4aa                	sw	a0,72(sp)
20402d84:	c2ae                	sw	a1,68(sp)
20402d86:	c0b2                	sw	a2,64(sp)
20402d88:	de36                	sw	a3,60(sp)
20402d8a:	dc3a                	sw	a4,56(sp)
20402d8c:	da3e                	sw	a5,52(sp)
20402d8e:	d842                	sw	a6,48(sp)
20402d90:	d646                	sw	a7,44(sp)
20402d92:	d472                	sw	t3,40(sp)
20402d94:	d276                	sw	t4,36(sp)
20402d96:	d07a                	sw	t5,32(sp)
20402d98:	ce7e                	sw	t6,28(sp)
20402d9a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d9c:	ad1ff0ef          	jal	ra,2040286c <__metal_myhart_id>
20402da0:	872a                	mv	a4,a0
20402da2:	070a                	slli	a4,a4,0x2
20402da4:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402da8:	97ba                	add	a5,a5,a4
20402daa:	439c                	lw	a5,0(a5)
20402dac:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20402db0:	fac42783          	lw	a5,-84(s0)
20402db4:	c78d                	beqz	a5,20402dde <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402db6:	fac42503          	lw	a0,-84(s0)
20402dba:	a5dff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20402dbe:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20402dc2:	fa842783          	lw	a5,-88(s0)
20402dc6:	2187a783          	lw	a5,536(a5)
20402dca:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
20402dce:	fa842783          	lw	a5,-88(s0)
20402dd2:	2107a783          	lw	a5,528(a5)
20402dd6:	fa442583          	lw	a1,-92(s0)
20402dda:	4541                	li	a0,16
20402ddc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
20402dde:	0001                	nop
20402de0:	40f6                	lw	ra,92(sp)
20402de2:	42e6                	lw	t0,88(sp)
20402de4:	4356                	lw	t1,84(sp)
20402de6:	43c6                	lw	t2,80(sp)
20402de8:	4436                	lw	s0,76(sp)
20402dea:	4526                	lw	a0,72(sp)
20402dec:	4596                	lw	a1,68(sp)
20402dee:	4606                	lw	a2,64(sp)
20402df0:	56f2                	lw	a3,60(sp)
20402df2:	5762                	lw	a4,56(sp)
20402df4:	57d2                	lw	a5,52(sp)
20402df6:	5842                	lw	a6,48(sp)
20402df8:	58b2                	lw	a7,44(sp)
20402dfa:	5e22                	lw	t3,40(sp)
20402dfc:	5e92                	lw	t4,36(sp)
20402dfe:	5f02                	lw	t5,32(sp)
20402e00:	4ff2                	lw	t6,28(sp)
20402e02:	6125                	addi	sp,sp,96
20402e04:	30200073          	mret

20402e08 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402e08:	711d                	addi	sp,sp,-96
20402e0a:	ce86                	sw	ra,92(sp)
20402e0c:	cc96                	sw	t0,88(sp)
20402e0e:	ca9a                	sw	t1,84(sp)
20402e10:	c89e                	sw	t2,80(sp)
20402e12:	c6a2                	sw	s0,76(sp)
20402e14:	c4aa                	sw	a0,72(sp)
20402e16:	c2ae                	sw	a1,68(sp)
20402e18:	c0b2                	sw	a2,64(sp)
20402e1a:	de36                	sw	a3,60(sp)
20402e1c:	dc3a                	sw	a4,56(sp)
20402e1e:	da3e                	sw	a5,52(sp)
20402e20:	d842                	sw	a6,48(sp)
20402e22:	d646                	sw	a7,44(sp)
20402e24:	d472                	sw	t3,40(sp)
20402e26:	d276                	sw	t4,36(sp)
20402e28:	d07a                	sw	t5,32(sp)
20402e2a:	ce7e                	sw	t6,28(sp)
20402e2c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e2e:	a3fff0ef          	jal	ra,2040286c <__metal_myhart_id>
20402e32:	872a                	mv	a4,a0
20402e34:	070a                	slli	a4,a4,0x2
20402e36:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402e3a:	97ba                	add	a5,a5,a4
20402e3c:	439c                	lw	a5,0(a5)
20402e3e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20402e42:	fac42783          	lw	a5,-84(s0)
20402e46:	c78d                	beqz	a5,20402e70 <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e48:	fac42503          	lw	a0,-84(s0)
20402e4c:	9cbff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20402e50:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20402e54:	fa842783          	lw	a5,-88(s0)
20402e58:	2307a783          	lw	a5,560(a5)
20402e5c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20402e60:	fa842783          	lw	a5,-88(s0)
20402e64:	2287a783          	lw	a5,552(a5)
20402e68:	fa442583          	lw	a1,-92(s0)
20402e6c:	4545                	li	a0,17
20402e6e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20402e70:	0001                	nop
20402e72:	40f6                	lw	ra,92(sp)
20402e74:	42e6                	lw	t0,88(sp)
20402e76:	4356                	lw	t1,84(sp)
20402e78:	43c6                	lw	t2,80(sp)
20402e7a:	4436                	lw	s0,76(sp)
20402e7c:	4526                	lw	a0,72(sp)
20402e7e:	4596                	lw	a1,68(sp)
20402e80:	4606                	lw	a2,64(sp)
20402e82:	56f2                	lw	a3,60(sp)
20402e84:	5762                	lw	a4,56(sp)
20402e86:	57d2                	lw	a5,52(sp)
20402e88:	5842                	lw	a6,48(sp)
20402e8a:	58b2                	lw	a7,44(sp)
20402e8c:	5e22                	lw	t3,40(sp)
20402e8e:	5e92                	lw	t4,36(sp)
20402e90:	5f02                	lw	t5,32(sp)
20402e92:	4ff2                	lw	t6,28(sp)
20402e94:	6125                	addi	sp,sp,96
20402e96:	30200073          	mret

20402e9a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402e9a:	711d                	addi	sp,sp,-96
20402e9c:	ce86                	sw	ra,92(sp)
20402e9e:	cc96                	sw	t0,88(sp)
20402ea0:	ca9a                	sw	t1,84(sp)
20402ea2:	c89e                	sw	t2,80(sp)
20402ea4:	c6a2                	sw	s0,76(sp)
20402ea6:	c4aa                	sw	a0,72(sp)
20402ea8:	c2ae                	sw	a1,68(sp)
20402eaa:	c0b2                	sw	a2,64(sp)
20402eac:	de36                	sw	a3,60(sp)
20402eae:	dc3a                	sw	a4,56(sp)
20402eb0:	da3e                	sw	a5,52(sp)
20402eb2:	d842                	sw	a6,48(sp)
20402eb4:	d646                	sw	a7,44(sp)
20402eb6:	d472                	sw	t3,40(sp)
20402eb8:	d276                	sw	t4,36(sp)
20402eba:	d07a                	sw	t5,32(sp)
20402ebc:	ce7e                	sw	t6,28(sp)
20402ebe:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ec0:	9adff0ef          	jal	ra,2040286c <__metal_myhart_id>
20402ec4:	872a                	mv	a4,a0
20402ec6:	070a                	slli	a4,a4,0x2
20402ec8:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402ecc:	97ba                	add	a5,a5,a4
20402ece:	439c                	lw	a5,0(a5)
20402ed0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402ed4:	fac42783          	lw	a5,-84(s0)
20402ed8:	c78d                	beqz	a5,20402f02 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402eda:	fac42503          	lw	a0,-84(s0)
20402ede:	939ff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20402ee2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402ee6:	fa842783          	lw	a5,-88(s0)
20402eea:	2487a783          	lw	a5,584(a5)
20402eee:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20402ef2:	fa842783          	lw	a5,-88(s0)
20402ef6:	2407a783          	lw	a5,576(a5)
20402efa:	fa442583          	lw	a1,-92(s0)
20402efe:	4549                	li	a0,18
20402f00:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20402f02:	0001                	nop
20402f04:	40f6                	lw	ra,92(sp)
20402f06:	42e6                	lw	t0,88(sp)
20402f08:	4356                	lw	t1,84(sp)
20402f0a:	43c6                	lw	t2,80(sp)
20402f0c:	4436                	lw	s0,76(sp)
20402f0e:	4526                	lw	a0,72(sp)
20402f10:	4596                	lw	a1,68(sp)
20402f12:	4606                	lw	a2,64(sp)
20402f14:	56f2                	lw	a3,60(sp)
20402f16:	5762                	lw	a4,56(sp)
20402f18:	57d2                	lw	a5,52(sp)
20402f1a:	5842                	lw	a6,48(sp)
20402f1c:	58b2                	lw	a7,44(sp)
20402f1e:	5e22                	lw	t3,40(sp)
20402f20:	5e92                	lw	t4,36(sp)
20402f22:	5f02                	lw	t5,32(sp)
20402f24:	4ff2                	lw	t6,28(sp)
20402f26:	6125                	addi	sp,sp,96
20402f28:	30200073          	mret

20402f2c <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
20402f2c:	711d                	addi	sp,sp,-96
20402f2e:	ce86                	sw	ra,92(sp)
20402f30:	cc96                	sw	t0,88(sp)
20402f32:	ca9a                	sw	t1,84(sp)
20402f34:	c89e                	sw	t2,80(sp)
20402f36:	c6a2                	sw	s0,76(sp)
20402f38:	c4aa                	sw	a0,72(sp)
20402f3a:	c2ae                	sw	a1,68(sp)
20402f3c:	c0b2                	sw	a2,64(sp)
20402f3e:	de36                	sw	a3,60(sp)
20402f40:	dc3a                	sw	a4,56(sp)
20402f42:	da3e                	sw	a5,52(sp)
20402f44:	d842                	sw	a6,48(sp)
20402f46:	d646                	sw	a7,44(sp)
20402f48:	d472                	sw	t3,40(sp)
20402f4a:	d276                	sw	t4,36(sp)
20402f4c:	d07a                	sw	t5,32(sp)
20402f4e:	ce7e                	sw	t6,28(sp)
20402f50:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f52:	91bff0ef          	jal	ra,2040286c <__metal_myhart_id>
20402f56:	872a                	mv	a4,a0
20402f58:	070a                	slli	a4,a4,0x2
20402f5a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402f5e:	97ba                	add	a5,a5,a4
20402f60:	439c                	lw	a5,0(a5)
20402f62:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20402f66:	fac42783          	lw	a5,-84(s0)
20402f6a:	c78d                	beqz	a5,20402f94 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f6c:	fac42503          	lw	a0,-84(s0)
20402f70:	8a7ff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20402f74:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20402f78:	fa842783          	lw	a5,-88(s0)
20402f7c:	2607a783          	lw	a5,608(a5)
20402f80:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20402f84:	fa842783          	lw	a5,-88(s0)
20402f88:	2587a783          	lw	a5,600(a5)
20402f8c:	fa442583          	lw	a1,-92(s0)
20402f90:	454d                	li	a0,19
20402f92:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20402f94:	0001                	nop
20402f96:	40f6                	lw	ra,92(sp)
20402f98:	42e6                	lw	t0,88(sp)
20402f9a:	4356                	lw	t1,84(sp)
20402f9c:	43c6                	lw	t2,80(sp)
20402f9e:	4436                	lw	s0,76(sp)
20402fa0:	4526                	lw	a0,72(sp)
20402fa2:	4596                	lw	a1,68(sp)
20402fa4:	4606                	lw	a2,64(sp)
20402fa6:	56f2                	lw	a3,60(sp)
20402fa8:	5762                	lw	a4,56(sp)
20402faa:	57d2                	lw	a5,52(sp)
20402fac:	5842                	lw	a6,48(sp)
20402fae:	58b2                	lw	a7,44(sp)
20402fb0:	5e22                	lw	t3,40(sp)
20402fb2:	5e92                	lw	t4,36(sp)
20402fb4:	5f02                	lw	t5,32(sp)
20402fb6:	4ff2                	lw	t6,28(sp)
20402fb8:	6125                	addi	sp,sp,96
20402fba:	30200073          	mret

20402fbe <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
20402fbe:	711d                	addi	sp,sp,-96
20402fc0:	ce86                	sw	ra,92(sp)
20402fc2:	cc96                	sw	t0,88(sp)
20402fc4:	ca9a                	sw	t1,84(sp)
20402fc6:	c89e                	sw	t2,80(sp)
20402fc8:	c6a2                	sw	s0,76(sp)
20402fca:	c4aa                	sw	a0,72(sp)
20402fcc:	c2ae                	sw	a1,68(sp)
20402fce:	c0b2                	sw	a2,64(sp)
20402fd0:	de36                	sw	a3,60(sp)
20402fd2:	dc3a                	sw	a4,56(sp)
20402fd4:	da3e                	sw	a5,52(sp)
20402fd6:	d842                	sw	a6,48(sp)
20402fd8:	d646                	sw	a7,44(sp)
20402fda:	d472                	sw	t3,40(sp)
20402fdc:	d276                	sw	t4,36(sp)
20402fde:	d07a                	sw	t5,32(sp)
20402fe0:	ce7e                	sw	t6,28(sp)
20402fe2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402fe4:	889ff0ef          	jal	ra,2040286c <__metal_myhart_id>
20402fe8:	872a                	mv	a4,a0
20402fea:	070a                	slli	a4,a4,0x2
20402fec:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402ff0:	97ba                	add	a5,a5,a4
20402ff2:	439c                	lw	a5,0(a5)
20402ff4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20402ff8:	fac42783          	lw	a5,-84(s0)
20402ffc:	c78d                	beqz	a5,20403026 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ffe:	fac42503          	lw	a0,-84(s0)
20403002:	815ff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20403006:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
2040300a:	fa842783          	lw	a5,-88(s0)
2040300e:	2787a783          	lw	a5,632(a5)
20403012:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20403016:	fa842783          	lw	a5,-88(s0)
2040301a:	2707a783          	lw	a5,624(a5)
2040301e:	fa442583          	lw	a1,-92(s0)
20403022:	4551                	li	a0,20
20403024:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20403026:	0001                	nop
20403028:	40f6                	lw	ra,92(sp)
2040302a:	42e6                	lw	t0,88(sp)
2040302c:	4356                	lw	t1,84(sp)
2040302e:	43c6                	lw	t2,80(sp)
20403030:	4436                	lw	s0,76(sp)
20403032:	4526                	lw	a0,72(sp)
20403034:	4596                	lw	a1,68(sp)
20403036:	4606                	lw	a2,64(sp)
20403038:	56f2                	lw	a3,60(sp)
2040303a:	5762                	lw	a4,56(sp)
2040303c:	57d2                	lw	a5,52(sp)
2040303e:	5842                	lw	a6,48(sp)
20403040:	58b2                	lw	a7,44(sp)
20403042:	5e22                	lw	t3,40(sp)
20403044:	5e92                	lw	t4,36(sp)
20403046:	5f02                	lw	t5,32(sp)
20403048:	4ff2                	lw	t6,28(sp)
2040304a:	6125                	addi	sp,sp,96
2040304c:	30200073          	mret

20403050 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20403050:	711d                	addi	sp,sp,-96
20403052:	ce86                	sw	ra,92(sp)
20403054:	cc96                	sw	t0,88(sp)
20403056:	ca9a                	sw	t1,84(sp)
20403058:	c89e                	sw	t2,80(sp)
2040305a:	c6a2                	sw	s0,76(sp)
2040305c:	c4aa                	sw	a0,72(sp)
2040305e:	c2ae                	sw	a1,68(sp)
20403060:	c0b2                	sw	a2,64(sp)
20403062:	de36                	sw	a3,60(sp)
20403064:	dc3a                	sw	a4,56(sp)
20403066:	da3e                	sw	a5,52(sp)
20403068:	d842                	sw	a6,48(sp)
2040306a:	d646                	sw	a7,44(sp)
2040306c:	d472                	sw	t3,40(sp)
2040306e:	d276                	sw	t4,36(sp)
20403070:	d07a                	sw	t5,32(sp)
20403072:	ce7e                	sw	t6,28(sp)
20403074:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403076:	ff6ff0ef          	jal	ra,2040286c <__metal_myhart_id>
2040307a:	872a                	mv	a4,a0
2040307c:	070a                	slli	a4,a4,0x2
2040307e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403082:	97ba                	add	a5,a5,a4
20403084:	439c                	lw	a5,0(a5)
20403086:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
2040308a:	fac42783          	lw	a5,-84(s0)
2040308e:	c78d                	beqz	a5,204030b8 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403090:	fac42503          	lw	a0,-84(s0)
20403094:	f82ff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20403098:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
2040309c:	fa842783          	lw	a5,-88(s0)
204030a0:	2907a783          	lw	a5,656(a5)
204030a4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
204030a8:	fa842783          	lw	a5,-88(s0)
204030ac:	2887a783          	lw	a5,648(a5)
204030b0:	fa442583          	lw	a1,-92(s0)
204030b4:	4555                	li	a0,21
204030b6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
204030b8:	0001                	nop
204030ba:	40f6                	lw	ra,92(sp)
204030bc:	42e6                	lw	t0,88(sp)
204030be:	4356                	lw	t1,84(sp)
204030c0:	43c6                	lw	t2,80(sp)
204030c2:	4436                	lw	s0,76(sp)
204030c4:	4526                	lw	a0,72(sp)
204030c6:	4596                	lw	a1,68(sp)
204030c8:	4606                	lw	a2,64(sp)
204030ca:	56f2                	lw	a3,60(sp)
204030cc:	5762                	lw	a4,56(sp)
204030ce:	57d2                	lw	a5,52(sp)
204030d0:	5842                	lw	a6,48(sp)
204030d2:	58b2                	lw	a7,44(sp)
204030d4:	5e22                	lw	t3,40(sp)
204030d6:	5e92                	lw	t4,36(sp)
204030d8:	5f02                	lw	t5,32(sp)
204030da:	4ff2                	lw	t6,28(sp)
204030dc:	6125                	addi	sp,sp,96
204030de:	30200073          	mret

204030e2 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
204030e2:	711d                	addi	sp,sp,-96
204030e4:	ce86                	sw	ra,92(sp)
204030e6:	cc96                	sw	t0,88(sp)
204030e8:	ca9a                	sw	t1,84(sp)
204030ea:	c89e                	sw	t2,80(sp)
204030ec:	c6a2                	sw	s0,76(sp)
204030ee:	c4aa                	sw	a0,72(sp)
204030f0:	c2ae                	sw	a1,68(sp)
204030f2:	c0b2                	sw	a2,64(sp)
204030f4:	de36                	sw	a3,60(sp)
204030f6:	dc3a                	sw	a4,56(sp)
204030f8:	da3e                	sw	a5,52(sp)
204030fa:	d842                	sw	a6,48(sp)
204030fc:	d646                	sw	a7,44(sp)
204030fe:	d472                	sw	t3,40(sp)
20403100:	d276                	sw	t4,36(sp)
20403102:	d07a                	sw	t5,32(sp)
20403104:	ce7e                	sw	t6,28(sp)
20403106:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403108:	f64ff0ef          	jal	ra,2040286c <__metal_myhart_id>
2040310c:	872a                	mv	a4,a0
2040310e:	070a                	slli	a4,a4,0x2
20403110:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403114:	97ba                	add	a5,a5,a4
20403116:	439c                	lw	a5,0(a5)
20403118:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
2040311c:	fac42783          	lw	a5,-84(s0)
20403120:	c78d                	beqz	a5,2040314a <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403122:	fac42503          	lw	a0,-84(s0)
20403126:	ef0ff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
2040312a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
2040312e:	fa842783          	lw	a5,-88(s0)
20403132:	2a87a783          	lw	a5,680(a5)
20403136:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
2040313a:	fa842783          	lw	a5,-88(s0)
2040313e:	2a07a783          	lw	a5,672(a5)
20403142:	fa442583          	lw	a1,-92(s0)
20403146:	4559                	li	a0,22
20403148:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
2040314a:	0001                	nop
2040314c:	40f6                	lw	ra,92(sp)
2040314e:	42e6                	lw	t0,88(sp)
20403150:	4356                	lw	t1,84(sp)
20403152:	43c6                	lw	t2,80(sp)
20403154:	4436                	lw	s0,76(sp)
20403156:	4526                	lw	a0,72(sp)
20403158:	4596                	lw	a1,68(sp)
2040315a:	4606                	lw	a2,64(sp)
2040315c:	56f2                	lw	a3,60(sp)
2040315e:	5762                	lw	a4,56(sp)
20403160:	57d2                	lw	a5,52(sp)
20403162:	5842                	lw	a6,48(sp)
20403164:	58b2                	lw	a7,44(sp)
20403166:	5e22                	lw	t3,40(sp)
20403168:	5e92                	lw	t4,36(sp)
2040316a:	5f02                	lw	t5,32(sp)
2040316c:	4ff2                	lw	t6,28(sp)
2040316e:	6125                	addi	sp,sp,96
20403170:	30200073          	mret

20403174 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20403174:	711d                	addi	sp,sp,-96
20403176:	ce86                	sw	ra,92(sp)
20403178:	cc96                	sw	t0,88(sp)
2040317a:	ca9a                	sw	t1,84(sp)
2040317c:	c89e                	sw	t2,80(sp)
2040317e:	c6a2                	sw	s0,76(sp)
20403180:	c4aa                	sw	a0,72(sp)
20403182:	c2ae                	sw	a1,68(sp)
20403184:	c0b2                	sw	a2,64(sp)
20403186:	de36                	sw	a3,60(sp)
20403188:	dc3a                	sw	a4,56(sp)
2040318a:	da3e                	sw	a5,52(sp)
2040318c:	d842                	sw	a6,48(sp)
2040318e:	d646                	sw	a7,44(sp)
20403190:	d472                	sw	t3,40(sp)
20403192:	d276                	sw	t4,36(sp)
20403194:	d07a                	sw	t5,32(sp)
20403196:	ce7e                	sw	t6,28(sp)
20403198:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040319a:	ed2ff0ef          	jal	ra,2040286c <__metal_myhart_id>
2040319e:	872a                	mv	a4,a0
204031a0:	070a                	slli	a4,a4,0x2
204031a2:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204031a6:	97ba                	add	a5,a5,a4
204031a8:	439c                	lw	a5,0(a5)
204031aa:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
204031ae:	fac42783          	lw	a5,-84(s0)
204031b2:	c78d                	beqz	a5,204031dc <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204031b4:	fac42503          	lw	a0,-84(s0)
204031b8:	e5eff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
204031bc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
204031c0:	fa842783          	lw	a5,-88(s0)
204031c4:	2c07a783          	lw	a5,704(a5)
204031c8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
204031cc:	fa842783          	lw	a5,-88(s0)
204031d0:	2b87a783          	lw	a5,696(a5)
204031d4:	fa442583          	lw	a1,-92(s0)
204031d8:	455d                	li	a0,23
204031da:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
204031dc:	0001                	nop
204031de:	40f6                	lw	ra,92(sp)
204031e0:	42e6                	lw	t0,88(sp)
204031e2:	4356                	lw	t1,84(sp)
204031e4:	43c6                	lw	t2,80(sp)
204031e6:	4436                	lw	s0,76(sp)
204031e8:	4526                	lw	a0,72(sp)
204031ea:	4596                	lw	a1,68(sp)
204031ec:	4606                	lw	a2,64(sp)
204031ee:	56f2                	lw	a3,60(sp)
204031f0:	5762                	lw	a4,56(sp)
204031f2:	57d2                	lw	a5,52(sp)
204031f4:	5842                	lw	a6,48(sp)
204031f6:	58b2                	lw	a7,44(sp)
204031f8:	5e22                	lw	t3,40(sp)
204031fa:	5e92                	lw	t4,36(sp)
204031fc:	5f02                	lw	t5,32(sp)
204031fe:	4ff2                	lw	t6,28(sp)
20403200:	6125                	addi	sp,sp,96
20403202:	30200073          	mret

20403206 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20403206:	711d                	addi	sp,sp,-96
20403208:	ce86                	sw	ra,92(sp)
2040320a:	cc96                	sw	t0,88(sp)
2040320c:	ca9a                	sw	t1,84(sp)
2040320e:	c89e                	sw	t2,80(sp)
20403210:	c6a2                	sw	s0,76(sp)
20403212:	c4aa                	sw	a0,72(sp)
20403214:	c2ae                	sw	a1,68(sp)
20403216:	c0b2                	sw	a2,64(sp)
20403218:	de36                	sw	a3,60(sp)
2040321a:	dc3a                	sw	a4,56(sp)
2040321c:	da3e                	sw	a5,52(sp)
2040321e:	d842                	sw	a6,48(sp)
20403220:	d646                	sw	a7,44(sp)
20403222:	d472                	sw	t3,40(sp)
20403224:	d276                	sw	t4,36(sp)
20403226:	d07a                	sw	t5,32(sp)
20403228:	ce7e                	sw	t6,28(sp)
2040322a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040322c:	e40ff0ef          	jal	ra,2040286c <__metal_myhart_id>
20403230:	872a                	mv	a4,a0
20403232:	070a                	slli	a4,a4,0x2
20403234:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403238:	97ba                	add	a5,a5,a4
2040323a:	439c                	lw	a5,0(a5)
2040323c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20403240:	fac42783          	lw	a5,-84(s0)
20403244:	c78d                	beqz	a5,2040326e <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403246:	fac42503          	lw	a0,-84(s0)
2040324a:	dccff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
2040324e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20403252:	fa842783          	lw	a5,-88(s0)
20403256:	2d87a783          	lw	a5,728(a5)
2040325a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
2040325e:	fa842783          	lw	a5,-88(s0)
20403262:	2d07a783          	lw	a5,720(a5)
20403266:	fa442583          	lw	a1,-92(s0)
2040326a:	4561                	li	a0,24
2040326c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
2040326e:	0001                	nop
20403270:	40f6                	lw	ra,92(sp)
20403272:	42e6                	lw	t0,88(sp)
20403274:	4356                	lw	t1,84(sp)
20403276:	43c6                	lw	t2,80(sp)
20403278:	4436                	lw	s0,76(sp)
2040327a:	4526                	lw	a0,72(sp)
2040327c:	4596                	lw	a1,68(sp)
2040327e:	4606                	lw	a2,64(sp)
20403280:	56f2                	lw	a3,60(sp)
20403282:	5762                	lw	a4,56(sp)
20403284:	57d2                	lw	a5,52(sp)
20403286:	5842                	lw	a6,48(sp)
20403288:	58b2                	lw	a7,44(sp)
2040328a:	5e22                	lw	t3,40(sp)
2040328c:	5e92                	lw	t4,36(sp)
2040328e:	5f02                	lw	t5,32(sp)
20403290:	4ff2                	lw	t6,28(sp)
20403292:	6125                	addi	sp,sp,96
20403294:	30200073          	mret

20403298 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20403298:	711d                	addi	sp,sp,-96
2040329a:	ce86                	sw	ra,92(sp)
2040329c:	cc96                	sw	t0,88(sp)
2040329e:	ca9a                	sw	t1,84(sp)
204032a0:	c89e                	sw	t2,80(sp)
204032a2:	c6a2                	sw	s0,76(sp)
204032a4:	c4aa                	sw	a0,72(sp)
204032a6:	c2ae                	sw	a1,68(sp)
204032a8:	c0b2                	sw	a2,64(sp)
204032aa:	de36                	sw	a3,60(sp)
204032ac:	dc3a                	sw	a4,56(sp)
204032ae:	da3e                	sw	a5,52(sp)
204032b0:	d842                	sw	a6,48(sp)
204032b2:	d646                	sw	a7,44(sp)
204032b4:	d472                	sw	t3,40(sp)
204032b6:	d276                	sw	t4,36(sp)
204032b8:	d07a                	sw	t5,32(sp)
204032ba:	ce7e                	sw	t6,28(sp)
204032bc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204032be:	daeff0ef          	jal	ra,2040286c <__metal_myhart_id>
204032c2:	872a                	mv	a4,a0
204032c4:	070a                	slli	a4,a4,0x2
204032c6:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204032ca:	97ba                	add	a5,a5,a4
204032cc:	439c                	lw	a5,0(a5)
204032ce:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
204032d2:	fac42783          	lw	a5,-84(s0)
204032d6:	c78d                	beqz	a5,20403300 <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204032d8:	fac42503          	lw	a0,-84(s0)
204032dc:	d3aff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
204032e0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
204032e4:	fa842783          	lw	a5,-88(s0)
204032e8:	2f07a783          	lw	a5,752(a5)
204032ec:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
204032f0:	fa842783          	lw	a5,-88(s0)
204032f4:	2e87a783          	lw	a5,744(a5)
204032f8:	fa442583          	lw	a1,-92(s0)
204032fc:	4565                	li	a0,25
204032fe:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20403300:	0001                	nop
20403302:	40f6                	lw	ra,92(sp)
20403304:	42e6                	lw	t0,88(sp)
20403306:	4356                	lw	t1,84(sp)
20403308:	43c6                	lw	t2,80(sp)
2040330a:	4436                	lw	s0,76(sp)
2040330c:	4526                	lw	a0,72(sp)
2040330e:	4596                	lw	a1,68(sp)
20403310:	4606                	lw	a2,64(sp)
20403312:	56f2                	lw	a3,60(sp)
20403314:	5762                	lw	a4,56(sp)
20403316:	57d2                	lw	a5,52(sp)
20403318:	5842                	lw	a6,48(sp)
2040331a:	58b2                	lw	a7,44(sp)
2040331c:	5e22                	lw	t3,40(sp)
2040331e:	5e92                	lw	t4,36(sp)
20403320:	5f02                	lw	t5,32(sp)
20403322:	4ff2                	lw	t6,28(sp)
20403324:	6125                	addi	sp,sp,96
20403326:	30200073          	mret

2040332a <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
2040332a:	711d                	addi	sp,sp,-96
2040332c:	ce86                	sw	ra,92(sp)
2040332e:	cc96                	sw	t0,88(sp)
20403330:	ca9a                	sw	t1,84(sp)
20403332:	c89e                	sw	t2,80(sp)
20403334:	c6a2                	sw	s0,76(sp)
20403336:	c4aa                	sw	a0,72(sp)
20403338:	c2ae                	sw	a1,68(sp)
2040333a:	c0b2                	sw	a2,64(sp)
2040333c:	de36                	sw	a3,60(sp)
2040333e:	dc3a                	sw	a4,56(sp)
20403340:	da3e                	sw	a5,52(sp)
20403342:	d842                	sw	a6,48(sp)
20403344:	d646                	sw	a7,44(sp)
20403346:	d472                	sw	t3,40(sp)
20403348:	d276                	sw	t4,36(sp)
2040334a:	d07a                	sw	t5,32(sp)
2040334c:	ce7e                	sw	t6,28(sp)
2040334e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403350:	d1cff0ef          	jal	ra,2040286c <__metal_myhart_id>
20403354:	872a                	mv	a4,a0
20403356:	070a                	slli	a4,a4,0x2
20403358:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040335c:	97ba                	add	a5,a5,a4
2040335e:	439c                	lw	a5,0(a5)
20403360:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20403364:	fac42783          	lw	a5,-84(s0)
20403368:	c78d                	beqz	a5,20403392 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040336a:	fac42503          	lw	a0,-84(s0)
2040336e:	ca8ff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20403372:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20403376:	fa842783          	lw	a5,-88(s0)
2040337a:	3087a783          	lw	a5,776(a5)
2040337e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403382:	fa842783          	lw	a5,-88(s0)
20403386:	3007a783          	lw	a5,768(a5)
2040338a:	fa442583          	lw	a1,-92(s0)
2040338e:	4569                	li	a0,26
20403390:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403392:	0001                	nop
20403394:	40f6                	lw	ra,92(sp)
20403396:	42e6                	lw	t0,88(sp)
20403398:	4356                	lw	t1,84(sp)
2040339a:	43c6                	lw	t2,80(sp)
2040339c:	4436                	lw	s0,76(sp)
2040339e:	4526                	lw	a0,72(sp)
204033a0:	4596                	lw	a1,68(sp)
204033a2:	4606                	lw	a2,64(sp)
204033a4:	56f2                	lw	a3,60(sp)
204033a6:	5762                	lw	a4,56(sp)
204033a8:	57d2                	lw	a5,52(sp)
204033aa:	5842                	lw	a6,48(sp)
204033ac:	58b2                	lw	a7,44(sp)
204033ae:	5e22                	lw	t3,40(sp)
204033b0:	5e92                	lw	t4,36(sp)
204033b2:	5f02                	lw	t5,32(sp)
204033b4:	4ff2                	lw	t6,28(sp)
204033b6:	6125                	addi	sp,sp,96
204033b8:	30200073          	mret

204033bc <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
204033bc:	711d                	addi	sp,sp,-96
204033be:	ce86                	sw	ra,92(sp)
204033c0:	cc96                	sw	t0,88(sp)
204033c2:	ca9a                	sw	t1,84(sp)
204033c4:	c89e                	sw	t2,80(sp)
204033c6:	c6a2                	sw	s0,76(sp)
204033c8:	c4aa                	sw	a0,72(sp)
204033ca:	c2ae                	sw	a1,68(sp)
204033cc:	c0b2                	sw	a2,64(sp)
204033ce:	de36                	sw	a3,60(sp)
204033d0:	dc3a                	sw	a4,56(sp)
204033d2:	da3e                	sw	a5,52(sp)
204033d4:	d842                	sw	a6,48(sp)
204033d6:	d646                	sw	a7,44(sp)
204033d8:	d472                	sw	t3,40(sp)
204033da:	d276                	sw	t4,36(sp)
204033dc:	d07a                	sw	t5,32(sp)
204033de:	ce7e                	sw	t6,28(sp)
204033e0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204033e2:	c8aff0ef          	jal	ra,2040286c <__metal_myhart_id>
204033e6:	872a                	mv	a4,a0
204033e8:	070a                	slli	a4,a4,0x2
204033ea:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204033ee:	97ba                	add	a5,a5,a4
204033f0:	439c                	lw	a5,0(a5)
204033f2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
204033f6:	fac42783          	lw	a5,-84(s0)
204033fa:	c78d                	beqz	a5,20403424 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204033fc:	fac42503          	lw	a0,-84(s0)
20403400:	c16ff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20403404:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403408:	fa842783          	lw	a5,-88(s0)
2040340c:	3207a783          	lw	a5,800(a5)
20403410:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403414:	fa842783          	lw	a5,-88(s0)
20403418:	3187a783          	lw	a5,792(a5)
2040341c:	fa442583          	lw	a1,-92(s0)
20403420:	456d                	li	a0,27
20403422:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20403424:	0001                	nop
20403426:	40f6                	lw	ra,92(sp)
20403428:	42e6                	lw	t0,88(sp)
2040342a:	4356                	lw	t1,84(sp)
2040342c:	43c6                	lw	t2,80(sp)
2040342e:	4436                	lw	s0,76(sp)
20403430:	4526                	lw	a0,72(sp)
20403432:	4596                	lw	a1,68(sp)
20403434:	4606                	lw	a2,64(sp)
20403436:	56f2                	lw	a3,60(sp)
20403438:	5762                	lw	a4,56(sp)
2040343a:	57d2                	lw	a5,52(sp)
2040343c:	5842                	lw	a6,48(sp)
2040343e:	58b2                	lw	a7,44(sp)
20403440:	5e22                	lw	t3,40(sp)
20403442:	5e92                	lw	t4,36(sp)
20403444:	5f02                	lw	t5,32(sp)
20403446:	4ff2                	lw	t6,28(sp)
20403448:	6125                	addi	sp,sp,96
2040344a:	30200073          	mret

2040344e <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
2040344e:	711d                	addi	sp,sp,-96
20403450:	ce86                	sw	ra,92(sp)
20403452:	cc96                	sw	t0,88(sp)
20403454:	ca9a                	sw	t1,84(sp)
20403456:	c89e                	sw	t2,80(sp)
20403458:	c6a2                	sw	s0,76(sp)
2040345a:	c4aa                	sw	a0,72(sp)
2040345c:	c2ae                	sw	a1,68(sp)
2040345e:	c0b2                	sw	a2,64(sp)
20403460:	de36                	sw	a3,60(sp)
20403462:	dc3a                	sw	a4,56(sp)
20403464:	da3e                	sw	a5,52(sp)
20403466:	d842                	sw	a6,48(sp)
20403468:	d646                	sw	a7,44(sp)
2040346a:	d472                	sw	t3,40(sp)
2040346c:	d276                	sw	t4,36(sp)
2040346e:	d07a                	sw	t5,32(sp)
20403470:	ce7e                	sw	t6,28(sp)
20403472:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403474:	bf8ff0ef          	jal	ra,2040286c <__metal_myhart_id>
20403478:	872a                	mv	a4,a0
2040347a:	070a                	slli	a4,a4,0x2
2040347c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403480:	97ba                	add	a5,a5,a4
20403482:	439c                	lw	a5,0(a5)
20403484:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403488:	fac42783          	lw	a5,-84(s0)
2040348c:	c78d                	beqz	a5,204034b6 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040348e:	fac42503          	lw	a0,-84(s0)
20403492:	b84ff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20403496:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
2040349a:	fa842783          	lw	a5,-88(s0)
2040349e:	3387a783          	lw	a5,824(a5)
204034a2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
204034a6:	fa842783          	lw	a5,-88(s0)
204034aa:	3307a783          	lw	a5,816(a5)
204034ae:	fa442583          	lw	a1,-92(s0)
204034b2:	4571                	li	a0,28
204034b4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
204034b6:	0001                	nop
204034b8:	40f6                	lw	ra,92(sp)
204034ba:	42e6                	lw	t0,88(sp)
204034bc:	4356                	lw	t1,84(sp)
204034be:	43c6                	lw	t2,80(sp)
204034c0:	4436                	lw	s0,76(sp)
204034c2:	4526                	lw	a0,72(sp)
204034c4:	4596                	lw	a1,68(sp)
204034c6:	4606                	lw	a2,64(sp)
204034c8:	56f2                	lw	a3,60(sp)
204034ca:	5762                	lw	a4,56(sp)
204034cc:	57d2                	lw	a5,52(sp)
204034ce:	5842                	lw	a6,48(sp)
204034d0:	58b2                	lw	a7,44(sp)
204034d2:	5e22                	lw	t3,40(sp)
204034d4:	5e92                	lw	t4,36(sp)
204034d6:	5f02                	lw	t5,32(sp)
204034d8:	4ff2                	lw	t6,28(sp)
204034da:	6125                	addi	sp,sp,96
204034dc:	30200073          	mret

204034e0 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
204034e0:	711d                	addi	sp,sp,-96
204034e2:	ce86                	sw	ra,92(sp)
204034e4:	cc96                	sw	t0,88(sp)
204034e6:	ca9a                	sw	t1,84(sp)
204034e8:	c89e                	sw	t2,80(sp)
204034ea:	c6a2                	sw	s0,76(sp)
204034ec:	c4aa                	sw	a0,72(sp)
204034ee:	c2ae                	sw	a1,68(sp)
204034f0:	c0b2                	sw	a2,64(sp)
204034f2:	de36                	sw	a3,60(sp)
204034f4:	dc3a                	sw	a4,56(sp)
204034f6:	da3e                	sw	a5,52(sp)
204034f8:	d842                	sw	a6,48(sp)
204034fa:	d646                	sw	a7,44(sp)
204034fc:	d472                	sw	t3,40(sp)
204034fe:	d276                	sw	t4,36(sp)
20403500:	d07a                	sw	t5,32(sp)
20403502:	ce7e                	sw	t6,28(sp)
20403504:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403506:	b66ff0ef          	jal	ra,2040286c <__metal_myhart_id>
2040350a:	872a                	mv	a4,a0
2040350c:	070a                	slli	a4,a4,0x2
2040350e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403512:	97ba                	add	a5,a5,a4
20403514:	439c                	lw	a5,0(a5)
20403516:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
2040351a:	fac42783          	lw	a5,-84(s0)
2040351e:	c78d                	beqz	a5,20403548 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403520:	fac42503          	lw	a0,-84(s0)
20403524:	af2ff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20403528:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
2040352c:	fa842783          	lw	a5,-88(s0)
20403530:	3507a783          	lw	a5,848(a5)
20403534:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20403538:	fa842783          	lw	a5,-88(s0)
2040353c:	3487a783          	lw	a5,840(a5)
20403540:	fa442583          	lw	a1,-92(s0)
20403544:	4575                	li	a0,29
20403546:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20403548:	0001                	nop
2040354a:	40f6                	lw	ra,92(sp)
2040354c:	42e6                	lw	t0,88(sp)
2040354e:	4356                	lw	t1,84(sp)
20403550:	43c6                	lw	t2,80(sp)
20403552:	4436                	lw	s0,76(sp)
20403554:	4526                	lw	a0,72(sp)
20403556:	4596                	lw	a1,68(sp)
20403558:	4606                	lw	a2,64(sp)
2040355a:	56f2                	lw	a3,60(sp)
2040355c:	5762                	lw	a4,56(sp)
2040355e:	57d2                	lw	a5,52(sp)
20403560:	5842                	lw	a6,48(sp)
20403562:	58b2                	lw	a7,44(sp)
20403564:	5e22                	lw	t3,40(sp)
20403566:	5e92                	lw	t4,36(sp)
20403568:	5f02                	lw	t5,32(sp)
2040356a:	4ff2                	lw	t6,28(sp)
2040356c:	6125                	addi	sp,sp,96
2040356e:	30200073          	mret

20403572 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20403572:	711d                	addi	sp,sp,-96
20403574:	ce86                	sw	ra,92(sp)
20403576:	cc96                	sw	t0,88(sp)
20403578:	ca9a                	sw	t1,84(sp)
2040357a:	c89e                	sw	t2,80(sp)
2040357c:	c6a2                	sw	s0,76(sp)
2040357e:	c4aa                	sw	a0,72(sp)
20403580:	c2ae                	sw	a1,68(sp)
20403582:	c0b2                	sw	a2,64(sp)
20403584:	de36                	sw	a3,60(sp)
20403586:	dc3a                	sw	a4,56(sp)
20403588:	da3e                	sw	a5,52(sp)
2040358a:	d842                	sw	a6,48(sp)
2040358c:	d646                	sw	a7,44(sp)
2040358e:	d472                	sw	t3,40(sp)
20403590:	d276                	sw	t4,36(sp)
20403592:	d07a                	sw	t5,32(sp)
20403594:	ce7e                	sw	t6,28(sp)
20403596:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403598:	ad4ff0ef          	jal	ra,2040286c <__metal_myhart_id>
2040359c:	872a                	mv	a4,a0
2040359e:	070a                	slli	a4,a4,0x2
204035a0:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204035a4:	97ba                	add	a5,a5,a4
204035a6:	439c                	lw	a5,0(a5)
204035a8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
204035ac:	fac42783          	lw	a5,-84(s0)
204035b0:	c78d                	beqz	a5,204035da <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204035b2:	fac42503          	lw	a0,-84(s0)
204035b6:	a60ff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
204035ba:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
204035be:	fa842783          	lw	a5,-88(s0)
204035c2:	3687a783          	lw	a5,872(a5)
204035c6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
204035ca:	fa842783          	lw	a5,-88(s0)
204035ce:	3607a783          	lw	a5,864(a5)
204035d2:	fa442583          	lw	a1,-92(s0)
204035d6:	4579                	li	a0,30
204035d8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
204035da:	0001                	nop
204035dc:	40f6                	lw	ra,92(sp)
204035de:	42e6                	lw	t0,88(sp)
204035e0:	4356                	lw	t1,84(sp)
204035e2:	43c6                	lw	t2,80(sp)
204035e4:	4436                	lw	s0,76(sp)
204035e6:	4526                	lw	a0,72(sp)
204035e8:	4596                	lw	a1,68(sp)
204035ea:	4606                	lw	a2,64(sp)
204035ec:	56f2                	lw	a3,60(sp)
204035ee:	5762                	lw	a4,56(sp)
204035f0:	57d2                	lw	a5,52(sp)
204035f2:	5842                	lw	a6,48(sp)
204035f4:	58b2                	lw	a7,44(sp)
204035f6:	5e22                	lw	t3,40(sp)
204035f8:	5e92                	lw	t4,36(sp)
204035fa:	5f02                	lw	t5,32(sp)
204035fc:	4ff2                	lw	t6,28(sp)
204035fe:	6125                	addi	sp,sp,96
20403600:	30200073          	mret

20403604 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403604:	711d                	addi	sp,sp,-96
20403606:	ce86                	sw	ra,92(sp)
20403608:	cc96                	sw	t0,88(sp)
2040360a:	ca9a                	sw	t1,84(sp)
2040360c:	c89e                	sw	t2,80(sp)
2040360e:	c6a2                	sw	s0,76(sp)
20403610:	c4aa                	sw	a0,72(sp)
20403612:	c2ae                	sw	a1,68(sp)
20403614:	c0b2                	sw	a2,64(sp)
20403616:	de36                	sw	a3,60(sp)
20403618:	dc3a                	sw	a4,56(sp)
2040361a:	da3e                	sw	a5,52(sp)
2040361c:	d842                	sw	a6,48(sp)
2040361e:	d646                	sw	a7,44(sp)
20403620:	d472                	sw	t3,40(sp)
20403622:	d276                	sw	t4,36(sp)
20403624:	d07a                	sw	t5,32(sp)
20403626:	ce7e                	sw	t6,28(sp)
20403628:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040362a:	a42ff0ef          	jal	ra,2040286c <__metal_myhart_id>
2040362e:	872a                	mv	a4,a0
20403630:	070a                	slli	a4,a4,0x2
20403632:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403636:	97ba                	add	a5,a5,a4
20403638:	439c                	lw	a5,0(a5)
2040363a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
2040363e:	fac42783          	lw	a5,-84(s0)
20403642:	c78d                	beqz	a5,2040366c <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403644:	fac42503          	lw	a0,-84(s0)
20403648:	9ceff0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
2040364c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
20403650:	fa842783          	lw	a5,-88(s0)
20403654:	3807a783          	lw	a5,896(a5)
20403658:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
2040365c:	fa842783          	lw	a5,-88(s0)
20403660:	3787a783          	lw	a5,888(a5)
20403664:	fa442583          	lw	a1,-92(s0)
20403668:	457d                	li	a0,31
2040366a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
2040366c:	0001                	nop
2040366e:	40f6                	lw	ra,92(sp)
20403670:	42e6                	lw	t0,88(sp)
20403672:	4356                	lw	t1,84(sp)
20403674:	43c6                	lw	t2,80(sp)
20403676:	4436                	lw	s0,76(sp)
20403678:	4526                	lw	a0,72(sp)
2040367a:	4596                	lw	a1,68(sp)
2040367c:	4606                	lw	a2,64(sp)
2040367e:	56f2                	lw	a3,60(sp)
20403680:	5762                	lw	a4,56(sp)
20403682:	57d2                	lw	a5,52(sp)
20403684:	5842                	lw	a6,48(sp)
20403686:	58b2                	lw	a7,44(sp)
20403688:	5e22                	lw	t3,40(sp)
2040368a:	5e92                	lw	t4,36(sp)
2040368c:	5f02                	lw	t5,32(sp)
2040368e:	4ff2                	lw	t6,28(sp)
20403690:	6125                	addi	sp,sp,96
20403692:	30200073          	mret

20403696 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403696:	1101                	addi	sp,sp,-32
20403698:	ce22                	sw	s0,28(sp)
2040369a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2040369c:	305027f3          	csrr	a5,mtvec
204036a0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
204036a4:	fec42783          	lw	a5,-20(s0)
204036a8:	03f7f793          	andi	a5,a5,63
204036ac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
204036b0:	fec42703          	lw	a4,-20(s0)
204036b4:	4789                	li	a5,2
204036b6:	00f70d63          	beq	a4,a5,204036d0 <__metal_controller_interrupt_vector_mode+0x3a>
204036ba:	fec42703          	lw	a4,-20(s0)
204036be:	478d                	li	a5,3
204036c0:	00f70a63          	beq	a4,a5,204036d4 <__metal_controller_interrupt_vector_mode+0x3e>
204036c4:	fec42703          	lw	a4,-20(s0)
204036c8:	4785                	li	a5,1
204036ca:	00f70763          	beq	a4,a5,204036d8 <__metal_controller_interrupt_vector_mode+0x42>
204036ce:	a039                	j	204036dc <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
204036d0:	478d                	li	a5,3
204036d2:	a031                	j	204036de <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
204036d4:	4791                	li	a5,4
204036d6:	a021                	j	204036de <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
204036d8:	4785                	li	a5,1
204036da:	a011                	j	204036de <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
204036dc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
204036de:	853e                	mv	a0,a5
204036e0:	4472                	lw	s0,28(sp)
204036e2:	6105                	addi	sp,sp,32
204036e4:	8082                	ret

204036e6 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
204036e6:	7179                	addi	sp,sp,-48
204036e8:	d622                	sw	s0,44(sp)
204036ea:	1800                	addi	s0,sp,48
204036ec:	fca42e23          	sw	a0,-36(s0)
204036f0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
204036f4:	305027f3          	csrr	a5,mtvec
204036f8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
204036fc:	fec42783          	lw	a5,-20(s0)
20403700:	fc07f793          	andi	a5,a5,-64
20403704:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403708:	fd842783          	lw	a5,-40(s0)
2040370c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20403710:	fdc42703          	lw	a4,-36(s0)
20403714:	4791                	li	a5,4
20403716:	06e7e063          	bltu	a5,a4,20403776 <__metal_controller_interrupt_vector+0x90>
2040371a:	fdc42783          	lw	a5,-36(s0)
2040371e:	00279713          	slli	a4,a5,0x2
20403722:	204067b7          	lui	a5,0x20406
20403726:	86478793          	addi	a5,a5,-1948 # 20405864 <__metal_driver_vtable_riscv_clint0+0x4c>
2040372a:	97ba                	add	a5,a5,a4
2040372c:	439c                	lw	a5,0(a5)
2040372e:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403730:	fe842783          	lw	a5,-24(s0)
20403734:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20403738:	fec42783          	lw	a5,-20(s0)
2040373c:	0027e793          	ori	a5,a5,2
20403740:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20403744:	a80d                	j	20403776 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403746:	fe842783          	lw	a5,-24(s0)
2040374a:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
2040374e:	fec42783          	lw	a5,-20(s0)
20403752:	0037e793          	ori	a5,a5,3
20403756:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
2040375a:	a831                	j	20403776 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
2040375c:	fe842783          	lw	a5,-24(s0)
20403760:	0017e793          	ori	a5,a5,1
20403764:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20403768:	a039                	j	20403776 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
2040376a:	fe842783          	lw	a5,-24(s0)
2040376e:	9bf1                	andi	a5,a5,-4
20403770:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20403774:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20403776:	0001                	nop
20403778:	5432                	lw	s0,44(sp)
2040377a:	6145                	addi	sp,sp,48
2040377c:	8082                	ret

2040377e <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
2040377e:	1101                	addi	sp,sp,-32
20403780:	ce22                	sw	s0,28(sp)
20403782:	1000                	addi	s0,sp,32
20403784:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403788:	fec42783          	lw	a5,-20(s0)
2040378c:	17f5                	addi	a5,a5,-3
2040378e:	4771                	li	a4,28
20403790:	00f76d63          	bltu	a4,a5,204037aa <__metal_valid_interrupt_id+0x2c>
20403794:	00279713          	slli	a4,a5,0x2
20403798:	204067b7          	lui	a5,0x20406
2040379c:	87878793          	addi	a5,a5,-1928 # 20405878 <__metal_driver_vtable_riscv_clint0+0x60>
204037a0:	97ba                	add	a5,a5,a4
204037a2:	439c                	lw	a5,0(a5)
204037a4:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
204037a6:	4785                	li	a5,1
204037a8:	a019                	j	204037ae <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
204037aa:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
204037ac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
204037ae:	853e                	mv	a0,a5
204037b0:	4472                	lw	s0,28(sp)
204037b2:	6105                	addi	sp,sp,32
204037b4:	8082                	ret

204037b6 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
204037b6:	7179                	addi	sp,sp,-48
204037b8:	d606                	sw	ra,44(sp)
204037ba:	d422                	sw	s0,40(sp)
204037bc:	1800                	addi	s0,sp,48
204037be:	fca42e23          	sw	a0,-36(s0)
204037c2:	fcb42c23          	sw	a1,-40(s0)
204037c6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
204037ca:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
204037ce:	fdc42783          	lw	a5,-36(s0)
204037d2:	e399                	bnez	a5,204037d8 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
204037d4:	57fd                	li	a5,-1
204037d6:	a849                	j	20403868 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
204037d8:	fd842703          	lw	a4,-40(s0)
204037dc:	47fd                	li	a5,31
204037de:	08e7e063          	bltu	a5,a4,2040385e <__metal_local_interrupt_enable+0xa8>
204037e2:	fd842783          	lw	a5,-40(s0)
204037e6:	00279713          	slli	a4,a5,0x2
204037ea:	204067b7          	lui	a5,0x20406
204037ee:	8ec78793          	addi	a5,a5,-1812 # 204058ec <__metal_driver_vtable_riscv_clint0+0xd4>
204037f2:	97ba                	add	a5,a5,a4
204037f4:	439c                	lw	a5,0(a5)
204037f6:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
204037f8:	fd442783          	lw	a5,-44(s0)
204037fc:	c781                	beqz	a5,20403804 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
204037fe:	888ff0ef          	jal	ra,20402886 <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403802:	a08d                	j	20403864 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403804:	89aff0ef          	jal	ra,2040289e <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403808:	a8b1                	j	20403864 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
2040380a:	fd442783          	lw	a5,-44(s0)
2040380e:	c781                	beqz	a5,20403816 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20403810:	8a6ff0ef          	jal	ra,204028b6 <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403814:	a881                	j	20403864 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403816:	8b8ff0ef          	jal	ra,204028ce <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
2040381a:	a0a9                	j	20403864 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040381c:	fd442783          	lw	a5,-44(s0)
20403820:	c781                	beqz	a5,20403828 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20403822:	8c4ff0ef          	jal	ra,204028e6 <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20403826:	a83d                	j	20403864 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20403828:	8d8ff0ef          	jal	ra,20402900 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
2040382c:	a825                	j	20403864 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
2040382e:	fd442783          	lw	a5,-44(s0)
20403832:	c781                	beqz	a5,2040383a <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20403834:	8e6ff0ef          	jal	ra,2040291a <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20403838:	a035                	j	20403864 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
2040383a:	8fcff0ef          	jal	ra,20402936 <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
2040383e:	a01d                	j	20403864 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20403840:	fd442783          	lw	a5,-44(s0)
20403844:	c799                	beqz	a5,20403852 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20403846:	fd842783          	lw	a5,-40(s0)
2040384a:	853e                	mv	a0,a5
2040384c:	906ff0ef          	jal	ra,20402952 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20403850:	a811                	j	20403864 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20403852:	fd842783          	lw	a5,-40(s0)
20403856:	853e                	mv	a0,a5
20403858:	926ff0ef          	jal	ra,2040297e <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
2040385c:	a021                	j	20403864 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
2040385e:	57fd                	li	a5,-1
20403860:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20403864:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20403868:	853e                	mv	a0,a5
2040386a:	50b2                	lw	ra,44(sp)
2040386c:	5422                	lw	s0,40(sp)
2040386e:	6145                	addi	sp,sp,48
20403870:	8082                	ret

20403872 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20403872:	7179                	addi	sp,sp,-48
20403874:	d622                	sw	s0,44(sp)
20403876:	1800                	addi	s0,sp,48
20403878:	fca42e23          	sw	a0,-36(s0)
2040387c:	fcb42c23          	sw	a1,-40(s0)
20403880:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403884:	fdc42783          	lw	a5,-36(s0)
20403888:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040388c:	fd842703          	lw	a4,-40(s0)
20403890:	47ad                	li	a5,11
20403892:	02e7c263          	blt	a5,a4,204038b6 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403896:	fd442783          	lw	a5,-44(s0)
2040389a:	cf91                	beqz	a5,204038b6 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040389c:	fec42703          	lw	a4,-20(s0)
204038a0:	fd842783          	lw	a5,-40(s0)
204038a4:	0e078793          	addi	a5,a5,224
204038a8:	078a                	slli	a5,a5,0x2
204038aa:	97ba                	add	a5,a5,a4
204038ac:	fd442703          	lw	a4,-44(s0)
204038b0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
204038b2:	4781                	li	a5,0
204038b4:	a011                	j	204038b8 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
204038b6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
204038b8:	853e                	mv	a0,a5
204038ba:	5432                	lw	s0,44(sp)
204038bc:	6145                	addi	sp,sp,48
204038be:	8082                	ret

204038c0 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
204038c0:	7139                	addi	sp,sp,-64
204038c2:	de06                	sw	ra,60(sp)
204038c4:	dc22                	sw	s0,56(sp)
204038c6:	0080                	addi	s0,sp,64
204038c8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204038cc:	fcc42783          	lw	a5,-52(s0)
204038d0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
204038d4:	fe442783          	lw	a5,-28(s0)
204038d8:	43dc                	lw	a5,4(a5)
204038da:	10079d63          	bnez	a5,204039f4 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
204038de:	57fd                	li	a5,-1
204038e0:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
204038e4:	57fd                	li	a5,-1
204038e6:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
204038ea:	301027f3          	csrr	a5,misa
204038ee:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
204038f2:	fe042703          	lw	a4,-32(s0)
204038f6:	6789                	lui	a5,0x2
204038f8:	8ff9                	and	a5,a5,a4
204038fa:	e799                	bnez	a5,20403908 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
204038fc:	fe042703          	lw	a4,-32(s0)
20403900:	000407b7          	lui	a5,0x40
20403904:	8ff9                	and	a5,a5,a4
20403906:	c799                	beqz	a5,20403914 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403908:	57fd                	li	a5,-1
2040390a:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040390e:	57fd                	li	a5,-1
20403910:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403914:	fe042703          	lw	a4,-32(s0)
20403918:	000407b7          	lui	a5,0x40
2040391c:	8ff9                	and	a5,a5,a4
2040391e:	c781                	beqz	a5,20403926 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20403920:	57fd                	li	a5,-1
20403922:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403926:	fe042623          	sw	zero,-20(s0)
2040392a:	a0b9                	j	20403978 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
2040392c:	fe442683          	lw	a3,-28(s0)
20403930:	fec42703          	lw	a4,-20(s0)
20403934:	87ba                	mv	a5,a4
20403936:	0786                	slli	a5,a5,0x1
20403938:	97ba                	add	a5,a5,a4
2040393a:	078e                	slli	a5,a5,0x3
2040393c:	97b6                	add	a5,a5,a3
2040393e:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20403942:	fe442683          	lw	a3,-28(s0)
20403946:	fec42703          	lw	a4,-20(s0)
2040394a:	87ba                	mv	a5,a4
2040394c:	0786                	slli	a5,a5,0x1
2040394e:	97ba                	add	a5,a5,a4
20403950:	078e                	slli	a5,a5,0x3
20403952:	97b6                	add	a5,a5,a3
20403954:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20403958:	fe442683          	lw	a3,-28(s0)
2040395c:	fec42703          	lw	a4,-20(s0)
20403960:	87ba                	mv	a5,a4
20403962:	0786                	slli	a5,a5,0x1
20403964:	97ba                	add	a5,a5,a4
20403966:	078e                	slli	a5,a5,0x3
20403968:	97b6                	add	a5,a5,a3
2040396a:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
2040396e:	fec42783          	lw	a5,-20(s0)
20403972:	0785                	addi	a5,a5,1
20403974:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20403978:	fec42703          	lw	a4,-20(s0)
2040397c:	47fd                	li	a5,31
2040397e:	fae7d7e3          	bge	a5,a4,2040392c <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403982:	fe042423          	sw	zero,-24(s0)
20403986:	a01d                	j	204039ac <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403988:	fe442703          	lw	a4,-28(s0)
2040398c:	fe842783          	lw	a5,-24(s0)
20403990:	0e078793          	addi	a5,a5,224
20403994:	078a                	slli	a5,a5,0x2
20403996:	97ba                	add	a5,a5,a4
20403998:	20403737          	lui	a4,0x20403
2040399c:	9aa70713          	addi	a4,a4,-1622 # 204029aa <__metal_default_exception_handler>
204039a0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
204039a2:	fe842783          	lw	a5,-24(s0)
204039a6:	0785                	addi	a5,a5,1
204039a8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
204039ac:	fe842703          	lw	a4,-24(s0)
204039b0:	47ad                	li	a5,11
204039b2:	fce7dbe3          	bge	a5,a4,20403988 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
204039b6:	204037b7          	lui	a5,0x20403
204039ba:	c0078593          	addi	a1,a5,-1024 # 20402c00 <__metal_exception_handler>
204039be:	4501                	li	a0,0
204039c0:	331d                	jal	204036e6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
204039c2:	301027f3          	csrr	a5,misa
204039c6:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
204039ca:	fdc42703          	lw	a4,-36(s0)
204039ce:	67c1                	lui	a5,0x10
204039d0:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
204039d4:	8ff9                	and	a5,a5,a4
204039d6:	cb99                	beqz	a5,204039ec <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
204039d8:	300027f3          	csrr	a5,mstatus
204039dc:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
204039e0:	fdc42703          	lw	a4,-36(s0)
204039e4:	6789                	lui	a5,0x2
204039e6:	8fd9                	or	a5,a5,a4
204039e8:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
204039ec:	fe442783          	lw	a5,-28(s0)
204039f0:	4705                	li	a4,1
204039f2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
204039f4:	0001                	nop
204039f6:	50f2                	lw	ra,60(sp)
204039f8:	5462                	lw	s0,56(sp)
204039fa:	6121                	addi	sp,sp,64
204039fc:	8082                	ret

204039fe <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
204039fe:	7179                	addi	sp,sp,-48
20403a00:	d606                	sw	ra,44(sp)
20403a02:	d422                	sw	s0,40(sp)
20403a04:	1800                	addi	s0,sp,48
20403a06:	fca42e23          	sw	a0,-36(s0)
20403a0a:	fcb42c23          	sw	a1,-40(s0)
20403a0e:	fcc42a23          	sw	a2,-44(s0)
20403a12:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403a16:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403a1a:	fdc42783          	lw	a5,-36(s0)
20403a1e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20403a22:	fd842503          	lw	a0,-40(s0)
20403a26:	3ba1                	jal	2040377e <__metal_valid_interrupt_id>
20403a28:	87aa                	mv	a5,a0
20403a2a:	e399                	bnez	a5,20403a30 <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
20403a2c:	57d5                	li	a5,-11
20403a2e:	aa11                	j	20403b42 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20403a30:	fd442783          	lw	a5,-44(s0)
20403a34:	cf85                	beqz	a5,20403a6c <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20403a36:	fe842683          	lw	a3,-24(s0)
20403a3a:	fd842703          	lw	a4,-40(s0)
20403a3e:	87ba                	mv	a5,a4
20403a40:	0786                	slli	a5,a5,0x1
20403a42:	97ba                	add	a5,a5,a4
20403a44:	078e                	slli	a5,a5,0x3
20403a46:	97b6                	add	a5,a5,a3
20403a48:	fd442703          	lw	a4,-44(s0)
20403a4c:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20403a50:	fe842683          	lw	a3,-24(s0)
20403a54:	fd842703          	lw	a4,-40(s0)
20403a58:	87ba                	mv	a5,a4
20403a5a:	0786                	slli	a5,a5,0x1
20403a5c:	97ba                	add	a5,a5,a4
20403a5e:	078e                	slli	a5,a5,0x3
20403a60:	97b6                	add	a5,a5,a3
20403a62:	fd042703          	lw	a4,-48(s0)
20403a66:	08e7ac23          	sw	a4,152(a5)
20403a6a:	a8d1                	j	20403b3e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
20403a6c:	fd842783          	lw	a5,-40(s0)
20403a70:	17f5                	addi	a5,a5,-3
20403a72:	4771                	li	a4,28
20403a74:	0cf76263          	bltu	a4,a5,20403b38 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20403a78:	00279713          	slli	a4,a5,0x2
20403a7c:	204067b7          	lui	a5,0x20406
20403a80:	96c78793          	addi	a5,a5,-1684 # 2040596c <__metal_driver_vtable_riscv_clint0+0x154>
20403a84:	97ba                	add	a5,a5,a4
20403a86:	439c                	lw	a5,0(a5)
20403a88:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403a8a:	fe842683          	lw	a3,-24(s0)
20403a8e:	fd842703          	lw	a4,-40(s0)
20403a92:	87ba                	mv	a5,a4
20403a94:	0786                	slli	a5,a5,0x1
20403a96:	97ba                	add	a5,a5,a4
20403a98:	078e                	slli	a5,a5,0x3
20403a9a:	97b6                	add	a5,a5,a3
20403a9c:	20403737          	lui	a4,0x20403
20403aa0:	a9670713          	addi	a4,a4,-1386 # 20402a96 <__metal_default_sw_handler>
20403aa4:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20403aa8:	fe842683          	lw	a3,-24(s0)
20403aac:	fd842703          	lw	a4,-40(s0)
20403ab0:	87ba                	mv	a5,a4
20403ab2:	0786                	slli	a5,a5,0x1
20403ab4:	97ba                	add	a5,a5,a4
20403ab6:	078e                	slli	a5,a5,0x3
20403ab8:	97b6                	add	a5,a5,a3
20403aba:	fd042703          	lw	a4,-48(s0)
20403abe:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20403ac2:	a8b5                	j	20403b3e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20403ac4:	fe842683          	lw	a3,-24(s0)
20403ac8:	fd842703          	lw	a4,-40(s0)
20403acc:	87ba                	mv	a5,a4
20403ace:	0786                	slli	a5,a5,0x1
20403ad0:	97ba                	add	a5,a5,a4
20403ad2:	078e                	slli	a5,a5,0x3
20403ad4:	97b6                	add	a5,a5,a3
20403ad6:	20403737          	lui	a4,0x20403
20403ada:	b8870713          	addi	a4,a4,-1144 # 20402b88 <__metal_default_timer_handler>
20403ade:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20403ae2:	fe842683          	lw	a3,-24(s0)
20403ae6:	fd842703          	lw	a4,-40(s0)
20403aea:	87ba                	mv	a5,a4
20403aec:	0786                	slli	a5,a5,0x1
20403aee:	97ba                	add	a5,a5,a4
20403af0:	078e                	slli	a5,a5,0x3
20403af2:	97b6                	add	a5,a5,a3
20403af4:	fd042703          	lw	a4,-48(s0)
20403af8:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20403afc:	a089                	j	20403b3e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20403afe:	fe842683          	lw	a3,-24(s0)
20403b02:	fd842703          	lw	a4,-40(s0)
20403b06:	87ba                	mv	a5,a4
20403b08:	0786                	slli	a5,a5,0x1
20403b0a:	97ba                	add	a5,a5,a4
20403b0c:	078e                	slli	a5,a5,0x3
20403b0e:	97b6                	add	a5,a5,a3
20403b10:	20403737          	lui	a4,0x20403
20403b14:	9c270713          	addi	a4,a4,-1598 # 204029c2 <__metal_default_interrupt_handler>
20403b18:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20403b1c:	fe842683          	lw	a3,-24(s0)
20403b20:	fd842703          	lw	a4,-40(s0)
20403b24:	87ba                	mv	a5,a4
20403b26:	0786                	slli	a5,a5,0x1
20403b28:	97ba                	add	a5,a5,a4
20403b2a:	078e                	slli	a5,a5,0x3
20403b2c:	97b6                	add	a5,a5,a3
20403b2e:	fd042703          	lw	a4,-48(s0)
20403b32:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20403b36:	a021                	j	20403b3e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20403b38:	57d1                	li	a5,-12
20403b3a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
20403b3e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20403b42:	853e                	mv	a0,a5
20403b44:	50b2                	lw	ra,44(sp)
20403b46:	5422                	lw	s0,40(sp)
20403b48:	6145                	addi	sp,sp,48
20403b4a:	8082                	ret

20403b4c <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20403b4c:	1101                	addi	sp,sp,-32
20403b4e:	ce06                	sw	ra,28(sp)
20403b50:	cc22                	sw	s0,24(sp)
20403b52:	1000                	addi	s0,sp,32
20403b54:	fea42623          	sw	a0,-20(s0)
20403b58:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20403b5c:	fe842783          	lw	a5,-24(s0)
20403b60:	4605                	li	a2,1
20403b62:	85be                	mv	a1,a5
20403b64:	fec42503          	lw	a0,-20(s0)
20403b68:	c4fff0ef          	jal	ra,204037b6 <__metal_local_interrupt_enable>
20403b6c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
20403b6e:	853e                	mv	a0,a5
20403b70:	40f2                	lw	ra,28(sp)
20403b72:	4462                	lw	s0,24(sp)
20403b74:	6105                	addi	sp,sp,32
20403b76:	8082                	ret

20403b78 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20403b78:	1101                	addi	sp,sp,-32
20403b7a:	ce06                	sw	ra,28(sp)
20403b7c:	cc22                	sw	s0,24(sp)
20403b7e:	1000                	addi	s0,sp,32
20403b80:	fea42623          	sw	a0,-20(s0)
20403b84:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403b88:	fe842783          	lw	a5,-24(s0)
20403b8c:	4601                	li	a2,0
20403b8e:	85be                	mv	a1,a5
20403b90:	fec42503          	lw	a0,-20(s0)
20403b94:	c23ff0ef          	jal	ra,204037b6 <__metal_local_interrupt_enable>
20403b98:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403b9a:	853e                	mv	a0,a5
20403b9c:	40f2                	lw	ra,28(sp)
20403b9e:	4462                	lw	s0,24(sp)
20403ba0:	6105                	addi	sp,sp,32
20403ba2:	8082                	ret

20403ba4 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20403ba4:	1101                	addi	sp,sp,-32
20403ba6:	ce06                	sw	ra,28(sp)
20403ba8:	cc22                	sw	s0,24(sp)
20403baa:	1000                	addi	s0,sp,32
20403bac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20403bb0:	ae7ff0ef          	jal	ra,20403696 <__metal_controller_interrupt_vector_mode>
20403bb4:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20403bb6:	853e                	mv	a0,a5
20403bb8:	40f2                	lw	ra,28(sp)
20403bba:	4462                	lw	s0,24(sp)
20403bbc:	6105                	addi	sp,sp,32
20403bbe:	8082                	ret

20403bc0 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20403bc0:	7179                	addi	sp,sp,-48
20403bc2:	d606                	sw	ra,44(sp)
20403bc4:	d422                	sw	s0,40(sp)
20403bc6:	1800                	addi	s0,sp,48
20403bc8:	fca42e23          	sw	a0,-36(s0)
20403bcc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403bd0:	fdc42783          	lw	a5,-36(s0)
20403bd4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20403bd8:	fd842783          	lw	a5,-40(s0)
20403bdc:	eb99                	bnez	a5,20403bf2 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20403bde:	204037b7          	lui	a5,0x20403
20403be2:	c0078593          	addi	a1,a5,-1024 # 20402c00 <__metal_exception_handler>
20403be6:	fd842503          	lw	a0,-40(s0)
20403bea:	afdff0ef          	jal	ra,204036e6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20403bee:	4781                	li	a5,0
20403bf0:	a00d                	j	20403c12 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20403bf2:	fd842703          	lw	a4,-40(s0)
20403bf6:	4785                	li	a5,1
20403bf8:	00f71c63          	bne	a4,a5,20403c10 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20403bfc:	204057b7          	lui	a5,0x20405
20403c00:	50078593          	addi	a1,a5,1280 # 20405500 <__metal_vector_table>
20403c04:	fd842503          	lw	a0,-40(s0)
20403c08:	adfff0ef          	jal	ra,204036e6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20403c0c:	4781                	li	a5,0
20403c0e:	a011                	j	20403c12 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20403c10:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20403c12:	853e                	mv	a0,a5
20403c14:	50b2                	lw	ra,44(sp)
20403c16:	5422                	lw	s0,40(sp)
20403c18:	6145                	addi	sp,sp,48
20403c1a:	8082                	ret

20403c1c <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20403c1c:	1101                	addi	sp,sp,-32
20403c1e:	ce22                	sw	s0,28(sp)
20403c20:	1000                	addi	s0,sp,32
20403c22:	fea42623          	sw	a0,-20(s0)
20403c26:	feb42423          	sw	a1,-24(s0)
20403c2a:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20403c2e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
20403c30:	853e                	mv	a0,a5
20403c32:	4472                	lw	s0,28(sp)
20403c34:	6105                	addi	sp,sp,32
20403c36:	8082                	ret

20403c38 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20403c38:	7139                	addi	sp,sp,-64
20403c3a:	de22                	sw	s0,60(sp)
20403c3c:	0080                	addi	s0,sp,64
20403c3e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20403c42:	4301                	li	t1,0
20403c44:	4381                	li	t2,0
20403c46:	fe642423          	sw	t1,-24(s0)
20403c4a:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20403c4e:	b8002573          	csrr	a0,mcycleh
20403c52:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20403c56:	b0002573          	csrr	a0,mcycle
20403c5a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20403c5e:	b8002573          	csrr	a0,mcycleh
20403c62:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20403c66:	fe442883          	lw	a7,-28(s0)
20403c6a:	fdc42503          	lw	a0,-36(s0)
20403c6e:	02a89563          	bne	a7,a0,20403c98 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20403c72:	fe442503          	lw	a0,-28(s0)
20403c76:	85aa                	mv	a1,a0
20403c78:	4601                	li	a2,0
20403c7a:	00059813          	slli	a6,a1,0x0
20403c7e:	4781                	li	a5,0
20403c80:	fe042603          	lw	a2,-32(s0)
20403c84:	86b2                	mv	a3,a2
20403c86:	4701                	li	a4,0
20403c88:	00d7e633          	or	a2,a5,a3
20403c8c:	fec42423          	sw	a2,-24(s0)
20403c90:	00e867b3          	or	a5,a6,a4
20403c94:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403c98:	fe842783          	lw	a5,-24(s0)
20403c9c:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20403ca0:	853e                	mv	a0,a5
20403ca2:	85c2                	mv	a1,a6
20403ca4:	5472                	lw	s0,60(sp)
20403ca6:	6121                	addi	sp,sp,64
20403ca8:	8082                	ret

20403caa <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20403caa:	7179                	addi	sp,sp,-48
20403cac:	d606                	sw	ra,44(sp)
20403cae:	d422                	sw	s0,40(sp)
20403cb0:	d24a                	sw	s2,36(sp)
20403cb2:	d04e                	sw	s3,32(sp)
20403cb4:	1800                	addi	s0,sp,48
20403cb6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20403cba:	fdc42783          	lw	a5,-36(s0)
20403cbe:	e781                	bnez	a5,20403cc6 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20403cc0:	4901                	li	s2,0
20403cc2:	4981                	li	s3,0
20403cc4:	a821                	j	20403cdc <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20403cc6:	fdc42503          	lw	a0,-36(s0)
20403cca:	b23fe0ef          	jal	ra,204027ec <__metal_driver_cpu_timebase>
20403cce:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20403cd2:	fec42783          	lw	a5,-20(s0)
20403cd6:	893e                	mv	s2,a5
20403cd8:	87fd                	srai	a5,a5,0x1f
20403cda:	89be                	mv	s3,a5
20403cdc:	87ca                	mv	a5,s2
20403cde:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20403ce0:	853e                	mv	a0,a5
20403ce2:	85c2                	mv	a1,a6
20403ce4:	50b2                	lw	ra,44(sp)
20403ce6:	5422                	lw	s0,40(sp)
20403ce8:	5912                	lw	s2,36(sp)
20403cea:	5982                	lw	s3,32(sp)
20403cec:	6145                	addi	sp,sp,48
20403cee:	8082                	ret

20403cf0 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20403cf0:	7179                	addi	sp,sp,-48
20403cf2:	d606                	sw	ra,44(sp)
20403cf4:	d422                	sw	s0,40(sp)
20403cf6:	1800                	addi	s0,sp,48
20403cf8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20403cfc:	4781                	li	a5,0
20403cfe:	4801                	li	a6,0
20403d00:	fef42023          	sw	a5,-32(s0)
20403d04:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403d08:	fdc42503          	lw	a0,-36(s0)
20403d0c:	b0bfe0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20403d10:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20403d14:	fec42783          	lw	a5,-20(s0)
20403d18:	c78d                	beqz	a5,20403d42 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403d1a:	fec42783          	lw	a5,-20(s0)
20403d1e:	13c7a783          	lw	a5,316(a5)
20403d22:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20403d26:	fe842783          	lw	a5,-24(s0)
20403d2a:	cf81                	beqz	a5,20403d42 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20403d2c:	fe842783          	lw	a5,-24(s0)
20403d30:	439c                	lw	a5,0(a5)
20403d32:	43f8                	lw	a4,68(a5)
20403d34:	fe040793          	addi	a5,s0,-32
20403d38:	863e                	mv	a2,a5
20403d3a:	4585                	li	a1,1
20403d3c:	fe842503          	lw	a0,-24(s0)
20403d40:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20403d42:	fe042783          	lw	a5,-32(s0)
20403d46:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
20403d4a:	853e                	mv	a0,a5
20403d4c:	85c2                	mv	a1,a6
20403d4e:	50b2                	lw	ra,44(sp)
20403d50:	5422                	lw	s0,40(sp)
20403d52:	6145                	addi	sp,sp,48
20403d54:	8082                	ret

20403d56 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20403d56:	7179                	addi	sp,sp,-48
20403d58:	d606                	sw	ra,44(sp)
20403d5a:	d422                	sw	s0,40(sp)
20403d5c:	d226                	sw	s1,36(sp)
20403d5e:	1800                	addi	s0,sp,48
20403d60:	fca42e23          	sw	a0,-36(s0)
20403d64:	fcb42823          	sw	a1,-48(s0)
20403d68:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20403d6c:	57fd                	li	a5,-1
20403d6e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403d72:	fdc42503          	lw	a0,-36(s0)
20403d76:	aa1fe0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20403d7a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20403d7e:	fe842783          	lw	a5,-24(s0)
20403d82:	cf8d                	beqz	a5,20403dbc <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403d84:	fe842783          	lw	a5,-24(s0)
20403d88:	13c7a783          	lw	a5,316(a5)
20403d8c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20403d90:	fe442783          	lw	a5,-28(s0)
20403d94:	c785                	beqz	a5,20403dbc <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20403d96:	fe442783          	lw	a5,-28(s0)
20403d9a:	439c                	lw	a5,0(a5)
20403d9c:	47a4                	lw	s1,72(a5)
20403d9e:	fdc42503          	lw	a0,-36(s0)
20403da2:	a27fe0ef          	jal	ra,204027c8 <__metal_driver_cpu_hartid>
20403da6:	87aa                	mv	a5,a0
20403da8:	fd042603          	lw	a2,-48(s0)
20403dac:	fd442683          	lw	a3,-44(s0)
20403db0:	85be                	mv	a1,a5
20403db2:	fe442503          	lw	a0,-28(s0)
20403db6:	9482                	jalr	s1
20403db8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20403dbc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20403dc0:	853e                	mv	a0,a5
20403dc2:	50b2                	lw	ra,44(sp)
20403dc4:	5422                	lw	s0,40(sp)
20403dc6:	5492                	lw	s1,36(sp)
20403dc8:	6145                	addi	sp,sp,48
20403dca:	8082                	ret

20403dcc <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20403dcc:	1101                	addi	sp,sp,-32
20403dce:	ce22                	sw	s0,28(sp)
20403dd0:	1000                	addi	s0,sp,32
20403dd2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403dd6:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403dda:	853e                	mv	a0,a5
20403ddc:	4472                	lw	s0,28(sp)
20403dde:	6105                	addi	sp,sp,32
20403de0:	8082                	ret

20403de2 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20403de2:	1101                	addi	sp,sp,-32
20403de4:	ce22                	sw	s0,28(sp)
20403de6:	1000                	addi	s0,sp,32
20403de8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20403dec:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20403dee:	853e                	mv	a0,a5
20403df0:	4472                	lw	s0,28(sp)
20403df2:	6105                	addi	sp,sp,32
20403df4:	8082                	ret

20403df6 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20403df6:	1101                	addi	sp,sp,-32
20403df8:	ce22                	sw	s0,28(sp)
20403dfa:	1000                	addi	s0,sp,32
20403dfc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403e00:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20403e04:	853e                	mv	a0,a5
20403e06:	4472                	lw	s0,28(sp)
20403e08:	6105                	addi	sp,sp,32
20403e0a:	8082                	ret

20403e0c <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403e0c:	1101                	addi	sp,sp,-32
20403e0e:	ce22                	sw	s0,28(sp)
20403e10:	1000                	addi	s0,sp,32
20403e12:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20403e16:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403e18:	853e                	mv	a0,a5
20403e1a:	4472                	lw	s0,28(sp)
20403e1c:	6105                	addi	sp,sp,32
20403e1e:	8082                	ret

20403e20 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403e20:	7179                	addi	sp,sp,-48
20403e22:	d606                	sw	ra,44(sp)
20403e24:	d422                	sw	s0,40(sp)
20403e26:	1800                	addi	s0,sp,48
20403e28:	fca42e23          	sw	a0,-36(s0)
20403e2c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20403e30:	57fd                	li	a5,-1
20403e32:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403e36:	fdc42503          	lw	a0,-36(s0)
20403e3a:	9ddfe0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20403e3e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20403e42:	fe842783          	lw	a5,-24(s0)
20403e46:	c79d                	beqz	a5,20403e74 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403e48:	fe842783          	lw	a5,-24(s0)
20403e4c:	0dc7a783          	lw	a5,220(a5)
20403e50:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20403e54:	fe442783          	lw	a5,-28(s0)
20403e58:	cf91                	beqz	a5,20403e74 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
20403e5a:	fe442783          	lw	a5,-28(s0)
20403e5e:	439c                	lw	a5,0(a5)
20403e60:	43f8                	lw	a4,68(a5)
20403e62:	fd840793          	addi	a5,s0,-40
20403e66:	863e                	mv	a2,a5
20403e68:	458d                	li	a1,3
20403e6a:	fe442503          	lw	a0,-28(s0)
20403e6e:	9702                	jalr	a4
20403e70:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20403e74:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20403e78:	853e                	mv	a0,a5
20403e7a:	50b2                	lw	ra,44(sp)
20403e7c:	5422                	lw	s0,40(sp)
20403e7e:	6145                	addi	sp,sp,48
20403e80:	8082                	ret

20403e82 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403e82:	7179                	addi	sp,sp,-48
20403e84:	d606                	sw	ra,44(sp)
20403e86:	d422                	sw	s0,40(sp)
20403e88:	1800                	addi	s0,sp,48
20403e8a:	fca42e23          	sw	a0,-36(s0)
20403e8e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20403e92:	57fd                	li	a5,-1
20403e94:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403e98:	fdc42503          	lw	a0,-36(s0)
20403e9c:	97bfe0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20403ea0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20403ea4:	fe842783          	lw	a5,-24(s0)
20403ea8:	c79d                	beqz	a5,20403ed6 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403eaa:	fe842783          	lw	a5,-24(s0)
20403eae:	0dc7a783          	lw	a5,220(a5)
20403eb2:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20403eb6:	fe442783          	lw	a5,-28(s0)
20403eba:	cf91                	beqz	a5,20403ed6 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20403ebc:	fe442783          	lw	a5,-28(s0)
20403ec0:	439c                	lw	a5,0(a5)
20403ec2:	43f8                	lw	a4,68(a5)
20403ec4:	fd840793          	addi	a5,s0,-40
20403ec8:	863e                	mv	a2,a5
20403eca:	4589                	li	a1,2
20403ecc:	fe442503          	lw	a0,-28(s0)
20403ed0:	9702                	jalr	a4
20403ed2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20403ed6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20403eda:	853e                	mv	a0,a5
20403edc:	50b2                	lw	ra,44(sp)
20403ede:	5422                	lw	s0,40(sp)
20403ee0:	6145                	addi	sp,sp,48
20403ee2:	8082                	ret

20403ee4 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20403ee4:	7179                	addi	sp,sp,-48
20403ee6:	d606                	sw	ra,44(sp)
20403ee8:	d422                	sw	s0,40(sp)
20403eea:	1800                	addi	s0,sp,48
20403eec:	fca42e23          	sw	a0,-36(s0)
20403ef0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20403ef4:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403ef8:	fdc42503          	lw	a0,-36(s0)
20403efc:	91bfe0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20403f00:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20403f04:	fe842783          	lw	a5,-24(s0)
20403f08:	c79d                	beqz	a5,20403f36 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403f0a:	fe842783          	lw	a5,-24(s0)
20403f0e:	0dc7a783          	lw	a5,220(a5)
20403f12:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20403f16:	fe442783          	lw	a5,-28(s0)
20403f1a:	cf91                	beqz	a5,20403f36 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20403f1c:	fe442783          	lw	a5,-28(s0)
20403f20:	439c                	lw	a5,0(a5)
20403f22:	43f8                	lw	a4,68(a5)
20403f24:	fd840793          	addi	a5,s0,-40
20403f28:	863e                	mv	a2,a5
20403f2a:	4591                	li	a1,4
20403f2c:	fe442503          	lw	a0,-28(s0)
20403f30:	9702                	jalr	a4
20403f32:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20403f36:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
20403f3a:	853e                	mv	a0,a5
20403f3c:	50b2                	lw	ra,44(sp)
20403f3e:	5422                	lw	s0,40(sp)
20403f40:	6145                	addi	sp,sp,48
20403f42:	8082                	ret

20403f44 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20403f44:	1101                	addi	sp,sp,-32
20403f46:	ce06                	sw	ra,28(sp)
20403f48:	cc22                	sw	s0,24(sp)
20403f4a:	1000                	addi	s0,sp,32
20403f4c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20403f50:	fec42503          	lw	a0,-20(s0)
20403f54:	8c3fe0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20403f58:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
20403f5a:	853e                	mv	a0,a5
20403f5c:	40f2                	lw	ra,28(sp)
20403f5e:	4462                	lw	s0,24(sp)
20403f60:	6105                	addi	sp,sp,32
20403f62:	8082                	ret

20403f64 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20403f64:	7179                	addi	sp,sp,-48
20403f66:	d606                	sw	ra,44(sp)
20403f68:	d422                	sw	s0,40(sp)
20403f6a:	1800                	addi	s0,sp,48
20403f6c:	fca42e23          	sw	a0,-36(s0)
20403f70:	fcb42c23          	sw	a1,-40(s0)
20403f74:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403f78:	fdc42503          	lw	a0,-36(s0)
20403f7c:	89bfe0ef          	jal	ra,20402816 <__metal_driver_cpu_interrupt_controller>
20403f80:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20403f84:	fec42783          	lw	a5,-20(s0)
20403f88:	cb99                	beqz	a5,20403f9e <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20403f8a:	fd442603          	lw	a2,-44(s0)
20403f8e:	fd842583          	lw	a1,-40(s0)
20403f92:	fec42503          	lw	a0,-20(s0)
20403f96:	8ddff0ef          	jal	ra,20403872 <__metal_exception_register>
20403f9a:	87aa                	mv	a5,a0
20403f9c:	a011                	j	20403fa0 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20403f9e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20403fa0:	853e                	mv	a0,a5
20403fa2:	50b2                	lw	ra,44(sp)
20403fa4:	5422                	lw	s0,40(sp)
20403fa6:	6145                	addi	sp,sp,48
20403fa8:	8082                	ret

20403faa <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403faa:	1101                	addi	sp,sp,-32
20403fac:	ce22                	sw	s0,28(sp)
20403fae:	1000                	addi	s0,sp,32
20403fb0:	fea42623          	sw	a0,-20(s0)
20403fb4:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20403fb8:	fe842783          	lw	a5,-24(s0)
20403fbc:	0007d783          	lhu	a5,0(a5)
20403fc0:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20403fc4:	478d                	li	a5,3
20403fc6:	00f71463          	bne	a4,a5,20403fce <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20403fca:	4791                	li	a5,4
20403fcc:	a011                	j	20403fd0 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20403fce:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20403fd0:	853e                	mv	a0,a5
20403fd2:	4472                	lw	s0,28(sp)
20403fd4:	6105                	addi	sp,sp,32
20403fd6:	8082                	ret

20403fd8 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20403fd8:	7179                	addi	sp,sp,-48
20403fda:	d622                	sw	s0,44(sp)
20403fdc:	1800                	addi	s0,sp,48
20403fde:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403fe2:	341027f3          	csrr	a5,mepc
20403fe6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20403fea:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20403fee:	853e                	mv	a0,a5
20403ff0:	5432                	lw	s0,44(sp)
20403ff2:	6145                	addi	sp,sp,48
20403ff4:	8082                	ret

20403ff6 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20403ff6:	1101                	addi	sp,sp,-32
20403ff8:	ce22                	sw	s0,28(sp)
20403ffa:	1000                	addi	s0,sp,32
20403ffc:	fea42623          	sw	a0,-20(s0)
20404000:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20404004:	fe842783          	lw	a5,-24(s0)
20404008:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
2040400c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
2040400e:	853e                	mv	a0,a5
20404010:	4472                	lw	s0,28(sp)
20404012:	6105                	addi	sp,sp,32
20404014:	8082                	ret

20404016 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20404016:	1101                	addi	sp,sp,-32
20404018:	ce22                	sw	s0,28(sp)
2040401a:	1000                	addi	s0,sp,32
2040401c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20404020:	fec42703          	lw	a4,-20(s0)
20404024:	800017b7          	lui	a5,0x80001
20404028:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe058>
2040402c:	00f71563          	bne	a4,a5,20404036 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20404030:	0c0007b7          	lui	a5,0xc000
20404034:	a011                	j	20404038 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20404036:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
20404038:	853e                	mv	a0,a5
2040403a:	4472                	lw	s0,28(sp)
2040403c:	6105                	addi	sp,sp,32
2040403e:	8082                	ret

20404040 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20404040:	1101                	addi	sp,sp,-32
20404042:	ce22                	sw	s0,28(sp)
20404044:	1000                	addi	s0,sp,32
20404046:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
2040404a:	fec42703          	lw	a4,-20(s0)
2040404e:	800017b7          	lui	a5,0x80001
20404052:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe058>
20404056:	00f71463          	bne	a4,a5,2040405e <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
2040405a:	47ed                	li	a5,27
2040405c:	a011                	j	20404060 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
2040405e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
20404060:	853e                	mv	a0,a5
20404062:	4472                	lw	s0,28(sp)
20404064:	6105                	addi	sp,sp,32
20404066:	8082                	ret

20404068 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20404068:	1101                	addi	sp,sp,-32
2040406a:	ce22                	sw	s0,28(sp)
2040406c:	1000                	addi	s0,sp,32
2040406e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20404072:	fec42703          	lw	a4,-20(s0)
20404076:	800017b7          	lui	a5,0x80001
2040407a:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe058>
2040407e:	00f71463          	bne	a4,a5,20404086 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20404082:	479d                	li	a5,7
20404084:	a011                	j	20404088 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20404086:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
20404088:	853e                	mv	a0,a5
2040408a:	4472                	lw	s0,28(sp)
2040408c:	6105                	addi	sp,sp,32
2040408e:	8082                	ret

20404090 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20404090:	1101                	addi	sp,sp,-32
20404092:	ce22                	sw	s0,28(sp)
20404094:	1000                	addi	s0,sp,32
20404096:	fea42623          	sw	a0,-20(s0)
2040409a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
2040409e:	fe842783          	lw	a5,-24(s0)
204040a2:	e791                	bnez	a5,204040ae <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
204040a4:	800017b7          	lui	a5,0x80001
204040a8:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdca0>
204040ac:	a011                	j	204040b0 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
204040ae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
204040b0:	853e                	mv	a0,a5
204040b2:	4472                	lw	s0,28(sp)
204040b4:	6105                	addi	sp,sp,32
204040b6:	8082                	ret

204040b8 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
204040b8:	1101                	addi	sp,sp,-32
204040ba:	ce22                	sw	s0,28(sp)
204040bc:	1000                	addi	s0,sp,32
204040be:	fea42623          	sw	a0,-20(s0)
204040c2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
204040c6:	fe842783          	lw	a5,-24(s0)
204040ca:	e399                	bnez	a5,204040d0 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
204040cc:	47ad                	li	a5,11
204040ce:	a011                	j	204040d2 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
204040d0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
204040d2:	853e                	mv	a0,a5
204040d4:	4472                	lw	s0,28(sp)
204040d6:	6105                	addi	sp,sp,32
204040d8:	8082                	ret

204040da <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
204040da:	7179                	addi	sp,sp,-48
204040dc:	d606                	sw	ra,44(sp)
204040de:	d422                	sw	s0,40(sp)
204040e0:	1800                	addi	s0,sp,48
204040e2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204040e6:	fdc42503          	lw	a0,-36(s0)
204040ea:	3735                	jal	20404016 <__metal_driver_sifive_plic0_control_base>
204040ec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204040f0:	fec42703          	lw	a4,-20(s0)
204040f4:	002007b7          	lui	a5,0x200
204040f8:	0791                	addi	a5,a5,4
204040fa:	97ba                	add	a5,a5,a4
204040fc:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
204040fe:	853e                	mv	a0,a5
20404100:	50b2                	lw	ra,44(sp)
20404102:	5422                	lw	s0,40(sp)
20404104:	6145                	addi	sp,sp,48
20404106:	8082                	ret

20404108 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20404108:	7179                	addi	sp,sp,-48
2040410a:	d606                	sw	ra,44(sp)
2040410c:	d422                	sw	s0,40(sp)
2040410e:	1800                	addi	s0,sp,48
20404110:	fca42e23          	sw	a0,-36(s0)
20404114:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404118:	fdc42503          	lw	a0,-36(s0)
2040411c:	3ded                	jal	20404016 <__metal_driver_sifive_plic0_control_base>
2040411e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404122:	fec42703          	lw	a4,-20(s0)
20404126:	002007b7          	lui	a5,0x200
2040412a:	0791                	addi	a5,a5,4
2040412c:	97ba                	add	a5,a5,a4
2040412e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20404130:	fd842783          	lw	a5,-40(s0)
20404134:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20404136:	0001                	nop
20404138:	50b2                	lw	ra,44(sp)
2040413a:	5422                	lw	s0,40(sp)
2040413c:	6145                	addi	sp,sp,48
2040413e:	8082                	ret

20404140 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20404140:	7179                	addi	sp,sp,-48
20404142:	d606                	sw	ra,44(sp)
20404144:	d422                	sw	s0,40(sp)
20404146:	1800                	addi	s0,sp,48
20404148:	fca42e23          	sw	a0,-36(s0)
2040414c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404150:	fdc42503          	lw	a0,-36(s0)
20404154:	35c9                	jal	20404016 <__metal_driver_sifive_plic0_control_base>
20404156:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040415a:	fec42703          	lw	a4,-20(s0)
2040415e:	002007b7          	lui	a5,0x200
20404162:	97ba                	add	a5,a5,a4
20404164:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20404166:	fd842783          	lw	a5,-40(s0)
2040416a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
2040416c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
2040416e:	853e                	mv	a0,a5
20404170:	50b2                	lw	ra,44(sp)
20404172:	5422                	lw	s0,40(sp)
20404174:	6145                	addi	sp,sp,48
20404176:	8082                	ret

20404178 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20404178:	7179                	addi	sp,sp,-48
2040417a:	d606                	sw	ra,44(sp)
2040417c:	d422                	sw	s0,40(sp)
2040417e:	1800                	addi	s0,sp,48
20404180:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404184:	fdc42503          	lw	a0,-36(s0)
20404188:	3579                	jal	20404016 <__metal_driver_sifive_plic0_control_base>
2040418a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040418e:	fec42703          	lw	a4,-20(s0)
20404192:	002007b7          	lui	a5,0x200
20404196:	97ba                	add	a5,a5,a4
20404198:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
2040419a:	853e                	mv	a0,a5
2040419c:	50b2                	lw	ra,44(sp)
2040419e:	5422                	lw	s0,40(sp)
204041a0:	6145                	addi	sp,sp,48
204041a2:	8082                	ret

204041a4 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
204041a4:	7179                	addi	sp,sp,-48
204041a6:	d606                	sw	ra,44(sp)
204041a8:	d422                	sw	s0,40(sp)
204041aa:	1800                	addi	s0,sp,48
204041ac:	fca42e23          	sw	a0,-36(s0)
204041b0:	fcb42c23          	sw	a1,-40(s0)
204041b4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
204041b8:	fdc42503          	lw	a0,-36(s0)
204041bc:	3da9                	jal	20404016 <__metal_driver_sifive_plic0_control_base>
204041be:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
204041c2:	fdc42503          	lw	a0,-36(s0)
204041c6:	354d                	jal	20404068 <__metal_driver_sifive_plic0_max_priority>
204041c8:	87aa                	mv	a5,a0
204041ca:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
204041ce:	fe842783          	lw	a5,-24(s0)
204041d2:	c785                	beqz	a5,204041fa <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
204041d4:	fd442703          	lw	a4,-44(s0)
204041d8:	fe842783          	lw	a5,-24(s0)
204041dc:	00f77f63          	bgeu	a4,a5,204041fa <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204041e0:	fd842783          	lw	a5,-40(s0)
204041e4:	078a                	slli	a5,a5,0x2
204041e6:	873e                	mv	a4,a5
204041e8:	fec42783          	lw	a5,-20(s0)
204041ec:	97ba                	add	a5,a5,a4
204041ee:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
204041f0:	fd442783          	lw	a5,-44(s0)
204041f4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
204041f6:	4781                	li	a5,0
204041f8:	a011                	j	204041fc <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
204041fa:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
204041fc:	853e                	mv	a0,a5
204041fe:	50b2                	lw	ra,44(sp)
20404200:	5422                	lw	s0,40(sp)
20404202:	6145                	addi	sp,sp,48
20404204:	8082                	ret

20404206 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20404206:	7179                	addi	sp,sp,-48
20404208:	d606                	sw	ra,44(sp)
2040420a:	d422                	sw	s0,40(sp)
2040420c:	1800                	addi	s0,sp,48
2040420e:	fca42e23          	sw	a0,-36(s0)
20404212:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404216:	fdc42503          	lw	a0,-36(s0)
2040421a:	3bf5                	jal	20404016 <__metal_driver_sifive_plic0_control_base>
2040421c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404220:	fd842783          	lw	a5,-40(s0)
20404224:	078a                	slli	a5,a5,0x2
20404226:	873e                	mv	a4,a5
20404228:	fec42783          	lw	a5,-20(s0)
2040422c:	97ba                	add	a5,a5,a4
2040422e:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20404230:	853e                	mv	a0,a5
20404232:	50b2                	lw	ra,44(sp)
20404234:	5422                	lw	s0,40(sp)
20404236:	6145                	addi	sp,sp,48
20404238:	8082                	ret

2040423a <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
2040423a:	7179                	addi	sp,sp,-48
2040423c:	d606                	sw	ra,44(sp)
2040423e:	d422                	sw	s0,40(sp)
20404240:	1800                	addi	s0,sp,48
20404242:	fca42e23          	sw	a0,-36(s0)
20404246:	fcb42c23          	sw	a1,-40(s0)
2040424a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
2040424e:	fdc42503          	lw	a0,-36(s0)
20404252:	33d1                	jal	20404016 <__metal_driver_sifive_plic0_control_base>
20404254:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404258:	fd842783          	lw	a5,-40(s0)
2040425c:	8795                	srai	a5,a5,0x5
2040425e:	078a                	slli	a5,a5,0x2
20404260:	873e                	mv	a4,a5
20404262:	fec42783          	lw	a5,-20(s0)
20404266:	973e                	add	a4,a4,a5
20404268:	6789                	lui	a5,0x2
2040426a:	97ba                	add	a5,a5,a4
2040426c:	439c                	lw	a5,0(a5)
2040426e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404272:	fd442783          	lw	a5,-44(s0)
20404276:	cf81                	beqz	a5,2040428e <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20404278:	fd842783          	lw	a5,-40(s0)
2040427c:	8bfd                	andi	a5,a5,31
2040427e:	4705                	li	a4,1
20404280:	00f717b3          	sll	a5,a4,a5
20404284:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404286:	fe842783          	lw	a5,-24(s0)
2040428a:	8fd9                	or	a5,a5,a4
2040428c:	a829                	j	204042a6 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
2040428e:	fd842783          	lw	a5,-40(s0)
20404292:	8bfd                	andi	a5,a5,31
20404294:	4705                	li	a4,1
20404296:	00f717b3          	sll	a5,a4,a5
2040429a:	fff7c793          	not	a5,a5
2040429e:	873e                	mv	a4,a5
204042a0:	fe842783          	lw	a5,-24(s0)
204042a4:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204042a6:	fd842703          	lw	a4,-40(s0)
204042aa:	8715                	srai	a4,a4,0x5
204042ac:	070a                	slli	a4,a4,0x2
204042ae:	86ba                	mv	a3,a4
204042b0:	fec42703          	lw	a4,-20(s0)
204042b4:	96ba                	add	a3,a3,a4
204042b6:	6709                	lui	a4,0x2
204042b8:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
204042ba:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
204042bc:	0001                	nop
204042be:	50b2                	lw	ra,44(sp)
204042c0:	5422                	lw	s0,40(sp)
204042c2:	6145                	addi	sp,sp,48
204042c4:	8082                	ret

204042c6 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
204042c6:	1101                	addi	sp,sp,-32
204042c8:	ce06                	sw	ra,28(sp)
204042ca:	cc22                	sw	s0,24(sp)
204042cc:	1000                	addi	s0,sp,32
204042ce:	fea42623          	sw	a0,-20(s0)
204042d2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
204042d6:	12c00513          	li	a0,300
204042da:	1d0010ef          	jal	ra,204054aa <metal_shutdown>

204042de <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
204042de:	7179                	addi	sp,sp,-48
204042e0:	d606                	sw	ra,44(sp)
204042e2:	d422                	sw	s0,40(sp)
204042e4:	1800                	addi	s0,sp,48
204042e6:	fca42e23          	sw	a0,-36(s0)
204042ea:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
204042ee:	fd842783          	lw	a5,-40(s0)
204042f2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
204042f6:	fec42503          	lw	a0,-20(s0)
204042fa:	33c5                	jal	204040da <__metal_plic0_claim_interrupt>
204042fc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20404300:	fec42503          	lw	a0,-20(s0)
20404304:	d3dff0ef          	jal	ra,20404040 <__metal_driver_sifive_plic0_num_interrupts>
20404308:	87aa                	mv	a5,a0
2040430a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
2040430e:	fe842703          	lw	a4,-24(s0)
20404312:	fe442783          	lw	a5,-28(s0)
20404316:	04f77263          	bgeu	a4,a5,2040435a <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
2040431a:	fec42703          	lw	a4,-20(s0)
2040431e:	fe842783          	lw	a5,-24(s0)
20404322:	078a                	slli	a5,a5,0x2
20404324:	97ba                	add	a5,a5,a4
20404326:	479c                	lw	a5,8(a5)
20404328:	cb8d                	beqz	a5,2040435a <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
2040432a:	fec42703          	lw	a4,-20(s0)
2040432e:	fe842783          	lw	a5,-24(s0)
20404332:	078a                	slli	a5,a5,0x2
20404334:	97ba                	add	a5,a5,a4
20404336:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
2040433a:	fe842603          	lw	a2,-24(s0)
2040433e:	fec42683          	lw	a3,-20(s0)
20404342:	fe842703          	lw	a4,-24(s0)
20404346:	87ba                	mv	a5,a4
20404348:	0786                	slli	a5,a5,0x1
2040434a:	97ba                	add	a5,a5,a4
2040434c:	078e                	slli	a5,a5,0x3
2040434e:	97b6                	add	a5,a5,a3
20404350:	0887a783          	lw	a5,136(a5)
20404354:	85be                	mv	a1,a5
20404356:	8532                	mv	a0,a2
20404358:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
2040435a:	fe842583          	lw	a1,-24(s0)
2040435e:	fec42503          	lw	a0,-20(s0)
20404362:	335d                	jal	20404108 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
20404364:	0001                	nop
20404366:	50b2                	lw	ra,44(sp)
20404368:	5422                	lw	s0,40(sp)
2040436a:	6145                	addi	sp,sp,48
2040436c:	8082                	ret

2040436e <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
2040436e:	7139                	addi	sp,sp,-64
20404370:	de06                	sw	ra,60(sp)
20404372:	dc22                	sw	s0,56(sp)
20404374:	0080                	addi	s0,sp,64
20404376:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040437a:	fcc42783          	lw	a5,-52(s0)
2040437e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20404382:	fe442783          	lw	a5,-28(s0)
20404386:	43dc                	lw	a5,4(a5)
20404388:	12079063          	bnez	a5,204044a8 <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040438c:	fe042623          	sw	zero,-20(s0)
20404390:	a221                	j	20404498 <__metal_driver_riscv_plic0_init+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20404392:	fcc42503          	lw	a0,-52(s0)
20404396:	cabff0ef          	jal	ra,20404040 <__metal_driver_sifive_plic0_num_interrupts>
2040439a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
2040439e:	fec42583          	lw	a1,-20(s0)
204043a2:	fcc42503          	lw	a0,-52(s0)
204043a6:	cebff0ef          	jal	ra,20404090 <__metal_driver_sifive_plic0_interrupt_parents>
204043aa:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
204043ae:	fec42583          	lw	a1,-20(s0)
204043b2:	fcc42503          	lw	a0,-52(s0)
204043b6:	d03ff0ef          	jal	ra,204040b8 <__metal_driver_sifive_plic0_interrupt_lines>
204043ba:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
204043be:	fdc42783          	lw	a5,-36(s0)
204043c2:	439c                	lw	a5,0(a5)
204043c4:	439c                	lw	a5,0(a5)
204043c6:	fdc42503          	lw	a0,-36(s0)
204043ca:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
204043cc:	fe042423          	sw	zero,-24(s0)
204043d0:	a085                	j	20404430 <__metal_driver_riscv_plic0_init+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
204043d2:	4601                	li	a2,0
204043d4:	fe842583          	lw	a1,-24(s0)
204043d8:	fe442503          	lw	a0,-28(s0)
204043dc:	3db9                	jal	2040423a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
204043de:	4601                	li	a2,0
204043e0:	fe842583          	lw	a1,-24(s0)
204043e4:	fcc42503          	lw	a0,-52(s0)
204043e8:	3b75                	jal	204041a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
204043ea:	fe442703          	lw	a4,-28(s0)
204043ee:	fe842783          	lw	a5,-24(s0)
204043f2:	078a                	slli	a5,a5,0x2
204043f4:	97ba                	add	a5,a5,a4
204043f6:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
204043fa:	fe442683          	lw	a3,-28(s0)
204043fe:	fe842703          	lw	a4,-24(s0)
20404402:	87ba                	mv	a5,a4
20404404:	0786                	slli	a5,a5,0x1
20404406:	97ba                	add	a5,a5,a4
20404408:	078e                	slli	a5,a5,0x3
2040440a:	97b6                	add	a5,a5,a3
2040440c:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20404410:	fe442683          	lw	a3,-28(s0)
20404414:	fe842703          	lw	a4,-24(s0)
20404418:	87ba                	mv	a5,a4
2040441a:	0786                	slli	a5,a5,0x1
2040441c:	97ba                	add	a5,a5,a4
2040441e:	078e                	slli	a5,a5,0x3
20404420:	97b6                	add	a5,a5,a3
20404422:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20404426:	fe842783          	lw	a5,-24(s0)
2040442a:	0785                	addi	a5,a5,1
2040442c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20404430:	fe842703          	lw	a4,-24(s0)
20404434:	fe042783          	lw	a5,-32(s0)
20404438:	f8f74de3          	blt	a4,a5,204043d2 <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
2040443c:	4581                	li	a1,0
2040443e:	fcc42503          	lw	a0,-52(s0)
20404442:	cffff0ef          	jal	ra,20404140 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20404446:	fdc42783          	lw	a5,-36(s0)
2040444a:	439c                	lw	a5,0(a5)
2040444c:	4fdc                	lw	a5,28(a5)
2040444e:	fe442683          	lw	a3,-28(s0)
20404452:	4601                	li	a2,0
20404454:	fd842583          	lw	a1,-40(s0)
20404458:	fdc42503          	lw	a0,-36(s0)
2040445c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
2040445e:	fdc42783          	lw	a5,-36(s0)
20404462:	439c                	lw	a5,0(a5)
20404464:	4fd8                	lw	a4,28(a5)
20404466:	fe442683          	lw	a3,-28(s0)
2040446a:	204047b7          	lui	a5,0x20404
2040446e:	2de78613          	addi	a2,a5,734 # 204042de <__metal_plic0_handler>
20404472:	fd842583          	lw	a1,-40(s0)
20404476:	fdc42503          	lw	a0,-36(s0)
2040447a:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
2040447c:	fdc42783          	lw	a5,-36(s0)
20404480:	439c                	lw	a5,0(a5)
20404482:	53dc                	lw	a5,36(a5)
20404484:	fd842583          	lw	a1,-40(s0)
20404488:	fdc42503          	lw	a0,-36(s0)
2040448c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040448e:	fec42783          	lw	a5,-20(s0)
20404492:	0785                	addi	a5,a5,1
20404494:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404498:	fec42783          	lw	a5,-20(s0)
2040449c:	eef05be3          	blez	a5,20404392 <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
204044a0:	fe442783          	lw	a5,-28(s0)
204044a4:	4705                	li	a4,1
204044a6:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
204044a8:	0001                	nop
204044aa:	50f2                	lw	ra,60(sp)
204044ac:	5462                	lw	s0,56(sp)
204044ae:	6121                	addi	sp,sp,64
204044b0:	8082                	ret

204044b2 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
204044b2:	7179                	addi	sp,sp,-48
204044b4:	d606                	sw	ra,44(sp)
204044b6:	d422                	sw	s0,40(sp)
204044b8:	1800                	addi	s0,sp,48
204044ba:	fca42e23          	sw	a0,-36(s0)
204044be:	fcb42c23          	sw	a1,-40(s0)
204044c2:	fcc42a23          	sw	a2,-44(s0)
204044c6:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204044ca:	fdc42783          	lw	a5,-36(s0)
204044ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204044d2:	fdc42503          	lw	a0,-36(s0)
204044d6:	b6bff0ef          	jal	ra,20404040 <__metal_driver_sifive_plic0_num_interrupts>
204044da:	872a                	mv	a4,a0
204044dc:	fd842783          	lw	a5,-40(s0)
204044e0:	00e7c463          	blt	a5,a4,204044e8 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
204044e4:	57fd                	li	a5,-1
204044e6:	a051                	j	2040456a <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
204044e8:	fd442783          	lw	a5,-44(s0)
204044ec:	cf9d                	beqz	a5,2040452a <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
204044ee:	4609                	li	a2,2
204044f0:	fd842583          	lw	a1,-40(s0)
204044f4:	fdc42503          	lw	a0,-36(s0)
204044f8:	cadff0ef          	jal	ra,204041a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
204044fc:	fec42703          	lw	a4,-20(s0)
20404500:	fd842783          	lw	a5,-40(s0)
20404504:	078a                	slli	a5,a5,0x2
20404506:	97ba                	add	a5,a5,a4
20404508:	fd442703          	lw	a4,-44(s0)
2040450c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
2040450e:	fec42683          	lw	a3,-20(s0)
20404512:	fd842703          	lw	a4,-40(s0)
20404516:	87ba                	mv	a5,a4
20404518:	0786                	slli	a5,a5,0x1
2040451a:	97ba                	add	a5,a5,a4
2040451c:	078e                	slli	a5,a5,0x3
2040451e:	97b6                	add	a5,a5,a3
20404520:	fd042703          	lw	a4,-48(s0)
20404524:	08e7a423          	sw	a4,136(a5)
20404528:	a081                	j	20404568 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
2040452a:	4605                	li	a2,1
2040452c:	fd842583          	lw	a1,-40(s0)
20404530:	fdc42503          	lw	a0,-36(s0)
20404534:	c71ff0ef          	jal	ra,204041a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20404538:	fec42703          	lw	a4,-20(s0)
2040453c:	fd842783          	lw	a5,-40(s0)
20404540:	078a                	slli	a5,a5,0x2
20404542:	97ba                	add	a5,a5,a4
20404544:	20404737          	lui	a4,0x20404
20404548:	2c670713          	addi	a4,a4,710 # 204042c6 <__metal_plic0_default_handler>
2040454c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
2040454e:	fec42683          	lw	a3,-20(s0)
20404552:	fd842703          	lw	a4,-40(s0)
20404556:	87ba                	mv	a5,a4
20404558:	0786                	slli	a5,a5,0x1
2040455a:	97ba                	add	a5,a5,a4
2040455c:	078e                	slli	a5,a5,0x3
2040455e:	97b6                	add	a5,a5,a3
20404560:	fd042703          	lw	a4,-48(s0)
20404564:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20404568:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
2040456a:	853e                	mv	a0,a5
2040456c:	50b2                	lw	ra,44(sp)
2040456e:	5422                	lw	s0,40(sp)
20404570:	6145                	addi	sp,sp,48
20404572:	8082                	ret

20404574 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20404574:	7179                	addi	sp,sp,-48
20404576:	d606                	sw	ra,44(sp)
20404578:	d422                	sw	s0,40(sp)
2040457a:	1800                	addi	s0,sp,48
2040457c:	fca42e23          	sw	a0,-36(s0)
20404580:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404584:	fdc42783          	lw	a5,-36(s0)
20404588:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2040458c:	fdc42503          	lw	a0,-36(s0)
20404590:	ab1ff0ef          	jal	ra,20404040 <__metal_driver_sifive_plic0_num_interrupts>
20404594:	872a                	mv	a4,a0
20404596:	fd842783          	lw	a5,-40(s0)
2040459a:	00e7c463          	blt	a5,a4,204045a2 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040459e:	57fd                	li	a5,-1
204045a0:	a809                	j	204045b2 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
204045a2:	4605                	li	a2,1
204045a4:	fd842583          	lw	a1,-40(s0)
204045a8:	fec42503          	lw	a0,-20(s0)
204045ac:	c8fff0ef          	jal	ra,2040423a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
204045b0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
204045b2:	853e                	mv	a0,a5
204045b4:	50b2                	lw	ra,44(sp)
204045b6:	5422                	lw	s0,40(sp)
204045b8:	6145                	addi	sp,sp,48
204045ba:	8082                	ret

204045bc <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
204045bc:	7179                	addi	sp,sp,-48
204045be:	d606                	sw	ra,44(sp)
204045c0:	d422                	sw	s0,40(sp)
204045c2:	1800                	addi	s0,sp,48
204045c4:	fca42e23          	sw	a0,-36(s0)
204045c8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204045cc:	fdc42783          	lw	a5,-36(s0)
204045d0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204045d4:	fdc42503          	lw	a0,-36(s0)
204045d8:	a69ff0ef          	jal	ra,20404040 <__metal_driver_sifive_plic0_num_interrupts>
204045dc:	872a                	mv	a4,a0
204045de:	fd842783          	lw	a5,-40(s0)
204045e2:	00e7c463          	blt	a5,a4,204045ea <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
204045e6:	57fd                	li	a5,-1
204045e8:	a809                	j	204045fa <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
204045ea:	4601                	li	a2,0
204045ec:	fd842583          	lw	a1,-40(s0)
204045f0:	fec42503          	lw	a0,-20(s0)
204045f4:	c47ff0ef          	jal	ra,2040423a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
204045f8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
204045fa:	853e                	mv	a0,a5
204045fc:	50b2                	lw	ra,44(sp)
204045fe:	5422                	lw	s0,40(sp)
20404600:	6145                	addi	sp,sp,48
20404602:	8082                	ret

20404604 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404604:	1101                	addi	sp,sp,-32
20404606:	ce22                	sw	s0,28(sp)
20404608:	1000                	addi	s0,sp,32
2040460a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040460e:	fec42703          	lw	a4,-20(s0)
20404612:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404616:	00f71563          	bne	a4,a5,20404620 <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
2040461a:	100127b7          	lui	a5,0x10012
2040461e:	a011                	j	20404622 <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
20404620:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
20404622:	853e                	mv	a0,a5
20404624:	4472                	lw	s0,28(sp)
20404626:	6105                	addi	sp,sp,32
20404628:	8082                	ret

2040462a <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
2040462a:	1101                	addi	sp,sp,-32
2040462c:	ce22                	sw	s0,28(sp)
2040462e:	1000                	addi	s0,sp,32
20404630:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404634:	fec42703          	lw	a4,-20(s0)
20404638:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040463c:	00f71763          	bne	a4,a5,2040464a <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404640:	800017b7          	lui	a5,0x80001
20404644:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe058>
20404648:	a011                	j	2040464c <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
2040464a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
2040464c:	853e                	mv	a0,a5
2040464e:	4472                	lw	s0,28(sp)
20404650:	6105                	addi	sp,sp,32
20404652:	8082                	ret

20404654 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
20404654:	1101                	addi	sp,sp,-32
20404656:	ce22                	sw	s0,28(sp)
20404658:	1000                	addi	s0,sp,32
2040465a:	fea42623          	sw	a0,-20(s0)
2040465e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20404662:	fec42703          	lw	a4,-20(s0)
20404666:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040466a:	00f71763          	bne	a4,a5,20404678 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
2040466e:	fe842783          	lw	a5,-24(s0)
20404672:	e399                	bnez	a5,20404678 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
20404674:	479d                	li	a5,7
20404676:	a269                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20404678:	fec42703          	lw	a4,-20(s0)
2040467c:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404680:	00f71963          	bne	a4,a5,20404692 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
20404684:	fe842703          	lw	a4,-24(s0)
20404688:	4785                	li	a5,1
2040468a:	00f71463          	bne	a4,a5,20404692 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
2040468e:	47a1                	li	a5,8
20404690:	aa85                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404692:	fec42703          	lw	a4,-20(s0)
20404696:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040469a:	00f71963          	bne	a4,a5,204046ac <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
2040469e:	fe842703          	lw	a4,-24(s0)
204046a2:	4789                	li	a5,2
204046a4:	00f71463          	bne	a4,a5,204046ac <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
204046a8:	47a5                	li	a5,9
204046aa:	aa99                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
204046ac:	fec42703          	lw	a4,-20(s0)
204046b0:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204046b4:	00f71963          	bne	a4,a5,204046c6 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
204046b8:	fe842703          	lw	a4,-24(s0)
204046bc:	478d                	li	a5,3
204046be:	00f71463          	bne	a4,a5,204046c6 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
204046c2:	47a9                	li	a5,10
204046c4:	aa35                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
204046c6:	fec42703          	lw	a4,-20(s0)
204046ca:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204046ce:	00f71963          	bne	a4,a5,204046e0 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
204046d2:	fe842703          	lw	a4,-24(s0)
204046d6:	4791                	li	a5,4
204046d8:	00f71463          	bne	a4,a5,204046e0 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
204046dc:	47ad                	li	a5,11
204046de:	a20d                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
204046e0:	fec42703          	lw	a4,-20(s0)
204046e4:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204046e8:	00f71963          	bne	a4,a5,204046fa <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
204046ec:	fe842703          	lw	a4,-24(s0)
204046f0:	4795                	li	a5,5
204046f2:	00f71463          	bne	a4,a5,204046fa <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
204046f6:	47b1                	li	a5,12
204046f8:	a221                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
204046fa:	fec42703          	lw	a4,-20(s0)
204046fe:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404702:	00f71963          	bne	a4,a5,20404714 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
20404706:	fe842703          	lw	a4,-24(s0)
2040470a:	4799                	li	a5,6
2040470c:	00f71463          	bne	a4,a5,20404714 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
20404710:	47b5                	li	a5,13
20404712:	a0fd                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404714:	fec42703          	lw	a4,-20(s0)
20404718:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040471c:	00f71963          	bne	a4,a5,2040472e <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
20404720:	fe842703          	lw	a4,-24(s0)
20404724:	479d                	li	a5,7
20404726:	00f71463          	bne	a4,a5,2040472e <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
2040472a:	47b9                	li	a5,14
2040472c:	a8d1                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
2040472e:	fec42703          	lw	a4,-20(s0)
20404732:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404736:	00f71963          	bne	a4,a5,20404748 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
2040473a:	fe842703          	lw	a4,-24(s0)
2040473e:	47a1                	li	a5,8
20404740:	00f71463          	bne	a4,a5,20404748 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
20404744:	47bd                	li	a5,15
20404746:	a86d                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20404748:	fec42703          	lw	a4,-20(s0)
2040474c:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404750:	00f71963          	bne	a4,a5,20404762 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
20404754:	fe842703          	lw	a4,-24(s0)
20404758:	47a5                	li	a5,9
2040475a:	00f71463          	bne	a4,a5,20404762 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
2040475e:	47c1                	li	a5,16
20404760:	a045                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20404762:	fec42703          	lw	a4,-20(s0)
20404766:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040476a:	00f71963          	bne	a4,a5,2040477c <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
2040476e:	fe842703          	lw	a4,-24(s0)
20404772:	47a9                	li	a5,10
20404774:	00f71463          	bne	a4,a5,2040477c <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
20404778:	47c5                	li	a5,17
2040477a:	a059                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
2040477c:	fec42703          	lw	a4,-20(s0)
20404780:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404784:	00f71963          	bne	a4,a5,20404796 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
20404788:	fe842703          	lw	a4,-24(s0)
2040478c:	47ad                	li	a5,11
2040478e:	00f71463          	bne	a4,a5,20404796 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
20404792:	47c9                	li	a5,18
20404794:	a0b5                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404796:	fec42703          	lw	a4,-20(s0)
2040479a:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040479e:	00f71963          	bne	a4,a5,204047b0 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
204047a2:	fe842703          	lw	a4,-24(s0)
204047a6:	47b1                	li	a5,12
204047a8:	00f71463          	bne	a4,a5,204047b0 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
204047ac:	47cd                	li	a5,19
204047ae:	a889                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
204047b0:	fec42703          	lw	a4,-20(s0)
204047b4:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204047b8:	00f71963          	bne	a4,a5,204047ca <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
204047bc:	fe842703          	lw	a4,-24(s0)
204047c0:	47b5                	li	a5,13
204047c2:	00f71463          	bne	a4,a5,204047ca <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
204047c6:	47d1                	li	a5,20
204047c8:	a825                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
204047ca:	fec42703          	lw	a4,-20(s0)
204047ce:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204047d2:	00f71963          	bne	a4,a5,204047e4 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
204047d6:	fe842703          	lw	a4,-24(s0)
204047da:	47b9                	li	a5,14
204047dc:	00f71463          	bne	a4,a5,204047e4 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
204047e0:	47d5                	li	a5,21
204047e2:	a839                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
204047e4:	fec42703          	lw	a4,-20(s0)
204047e8:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204047ec:	00f71963          	bne	a4,a5,204047fe <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
204047f0:	fe842703          	lw	a4,-24(s0)
204047f4:	47bd                	li	a5,15
204047f6:	00f71463          	bne	a4,a5,204047fe <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
204047fa:	47d9                	li	a5,22
204047fc:	a011                	j	20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
204047fe:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
20404800:	853e                	mv	a0,a5
20404802:	4472                	lw	s0,28(sp)
20404804:	6105                	addi	sp,sp,32
20404806:	8082                	ret

20404808 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404808:	7179                	addi	sp,sp,-48
2040480a:	d606                	sw	ra,44(sp)
2040480c:	d422                	sw	s0,40(sp)
2040480e:	1800                	addi	s0,sp,48
20404810:	fca42e23          	sw	a0,-36(s0)
20404814:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404818:	fdc42503          	lw	a0,-36(s0)
2040481c:	de9ff0ef          	jal	ra,20404604 <__metal_driver_sifive_gpio0_base>
20404820:	87aa                	mv	a5,a0
20404822:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20404826:	fec42783          	lw	a5,-20(s0)
2040482a:	0791                	addi	a5,a5,4
2040482c:	4398                	lw	a4,0(a5)
2040482e:	fd842783          	lw	a5,-40(s0)
20404832:	fec42683          	lw	a3,-20(s0)
20404836:	0691                	addi	a3,a3,4
20404838:	8fd9                	or	a5,a5,a4
2040483a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
2040483c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
2040483e:	853e                	mv	a0,a5
20404840:	50b2                	lw	ra,44(sp)
20404842:	5422                	lw	s0,40(sp)
20404844:	6145                	addi	sp,sp,48
20404846:	8082                	ret

20404848 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20404848:	7179                	addi	sp,sp,-48
2040484a:	d606                	sw	ra,44(sp)
2040484c:	d422                	sw	s0,40(sp)
2040484e:	1800                	addi	s0,sp,48
20404850:	fca42e23          	sw	a0,-36(s0)
20404854:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404858:	fdc42503          	lw	a0,-36(s0)
2040485c:	da9ff0ef          	jal	ra,20404604 <__metal_driver_sifive_gpio0_base>
20404860:	87aa                	mv	a5,a0
20404862:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
20404866:	fec42783          	lw	a5,-20(s0)
2040486a:	0791                	addi	a5,a5,4
2040486c:	439c                	lw	a5,0(a5)
2040486e:	fd842703          	lw	a4,-40(s0)
20404872:	fff74713          	not	a4,a4
20404876:	86ba                	mv	a3,a4
20404878:	fec42703          	lw	a4,-20(s0)
2040487c:	0711                	addi	a4,a4,4
2040487e:	8ff5                	and	a5,a5,a3
20404880:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
20404882:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
20404884:	853e                	mv	a0,a5
20404886:	50b2                	lw	ra,44(sp)
20404888:	5422                	lw	s0,40(sp)
2040488a:	6145                	addi	sp,sp,48
2040488c:	8082                	ret

2040488e <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
2040488e:	7179                	addi	sp,sp,-48
20404890:	d606                	sw	ra,44(sp)
20404892:	d422                	sw	s0,40(sp)
20404894:	1800                	addi	s0,sp,48
20404896:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040489a:	fdc42503          	lw	a0,-36(s0)
2040489e:	d67ff0ef          	jal	ra,20404604 <__metal_driver_sifive_gpio0_base>
204048a2:	87aa                	mv	a5,a0
204048a4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
204048a8:	fec42783          	lw	a5,-20(s0)
204048ac:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
204048ae:	853e                	mv	a0,a5
204048b0:	50b2                	lw	ra,44(sp)
204048b2:	5422                	lw	s0,40(sp)
204048b4:	6145                	addi	sp,sp,48
204048b6:	8082                	ret

204048b8 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
204048b8:	7179                	addi	sp,sp,-48
204048ba:	d606                	sw	ra,44(sp)
204048bc:	d422                	sw	s0,40(sp)
204048be:	1800                	addi	s0,sp,48
204048c0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204048c4:	fdc42503          	lw	a0,-36(s0)
204048c8:	d3dff0ef          	jal	ra,20404604 <__metal_driver_sifive_gpio0_base>
204048cc:	87aa                	mv	a5,a0
204048ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
204048d2:	fec42783          	lw	a5,-20(s0)
204048d6:	07b1                	addi	a5,a5,12
204048d8:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
204048da:	853e                	mv	a0,a5
204048dc:	50b2                	lw	ra,44(sp)
204048de:	5422                	lw	s0,40(sp)
204048e0:	6145                	addi	sp,sp,48
204048e2:	8082                	ret

204048e4 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
204048e4:	7179                	addi	sp,sp,-48
204048e6:	d606                	sw	ra,44(sp)
204048e8:	d422                	sw	s0,40(sp)
204048ea:	1800                	addi	s0,sp,48
204048ec:	fca42e23          	sw	a0,-36(s0)
204048f0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204048f4:	fdc42503          	lw	a0,-36(s0)
204048f8:	d0dff0ef          	jal	ra,20404604 <__metal_driver_sifive_gpio0_base>
204048fc:	87aa                	mv	a5,a0
204048fe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20404902:	fec42783          	lw	a5,-20(s0)
20404906:	07a1                	addi	a5,a5,8
20404908:	439c                	lw	a5,0(a5)
2040490a:	fd842703          	lw	a4,-40(s0)
2040490e:	fff74713          	not	a4,a4
20404912:	86ba                	mv	a3,a4
20404914:	fec42703          	lw	a4,-20(s0)
20404918:	0721                	addi	a4,a4,8
2040491a:	8ff5                	and	a5,a5,a3
2040491c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
2040491e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404920:	853e                	mv	a0,a5
20404922:	50b2                	lw	ra,44(sp)
20404924:	5422                	lw	s0,40(sp)
20404926:	6145                	addi	sp,sp,48
20404928:	8082                	ret

2040492a <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
2040492a:	7179                	addi	sp,sp,-48
2040492c:	d606                	sw	ra,44(sp)
2040492e:	d422                	sw	s0,40(sp)
20404930:	1800                	addi	s0,sp,48
20404932:	fca42e23          	sw	a0,-36(s0)
20404936:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040493a:	fdc42503          	lw	a0,-36(s0)
2040493e:	cc7ff0ef          	jal	ra,20404604 <__metal_driver_sifive_gpio0_base>
20404942:	87aa                	mv	a5,a0
20404944:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
20404948:	fec42783          	lw	a5,-20(s0)
2040494c:	07a1                	addi	a5,a5,8
2040494e:	4398                	lw	a4,0(a5)
20404950:	fd842783          	lw	a5,-40(s0)
20404954:	fec42683          	lw	a3,-20(s0)
20404958:	06a1                	addi	a3,a3,8
2040495a:	8fd9                	or	a5,a5,a4
2040495c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
2040495e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20404960:	853e                	mv	a0,a5
20404962:	50b2                	lw	ra,44(sp)
20404964:	5422                	lw	s0,40(sp)
20404966:	6145                	addi	sp,sp,48
20404968:	8082                	ret

2040496a <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
2040496a:	7179                	addi	sp,sp,-48
2040496c:	d606                	sw	ra,44(sp)
2040496e:	d422                	sw	s0,40(sp)
20404970:	1800                	addi	s0,sp,48
20404972:	fca42e23          	sw	a0,-36(s0)
20404976:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040497a:	fdc42503          	lw	a0,-36(s0)
2040497e:	c87ff0ef          	jal	ra,20404604 <__metal_driver_sifive_gpio0_base>
20404982:	87aa                	mv	a5,a0
20404984:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20404988:	fec42783          	lw	a5,-20(s0)
2040498c:	07b1                	addi	a5,a5,12
2040498e:	4398                	lw	a4,0(a5)
20404990:	fd842783          	lw	a5,-40(s0)
20404994:	fec42683          	lw	a3,-20(s0)
20404998:	06b1                	addi	a3,a3,12
2040499a:	8fd9                	or	a5,a5,a4
2040499c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
2040499e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
204049a0:	853e                	mv	a0,a5
204049a2:	50b2                	lw	ra,44(sp)
204049a4:	5422                	lw	s0,40(sp)
204049a6:	6145                	addi	sp,sp,48
204049a8:	8082                	ret

204049aa <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
204049aa:	7179                	addi	sp,sp,-48
204049ac:	d606                	sw	ra,44(sp)
204049ae:	d422                	sw	s0,40(sp)
204049b0:	1800                	addi	s0,sp,48
204049b2:	fca42e23          	sw	a0,-36(s0)
204049b6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204049ba:	fdc42503          	lw	a0,-36(s0)
204049be:	c47ff0ef          	jal	ra,20404604 <__metal_driver_sifive_gpio0_base>
204049c2:	87aa                	mv	a5,a0
204049c4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
204049c8:	fec42783          	lw	a5,-20(s0)
204049cc:	07b1                	addi	a5,a5,12
204049ce:	439c                	lw	a5,0(a5)
204049d0:	fd842703          	lw	a4,-40(s0)
204049d4:	fff74713          	not	a4,a4
204049d8:	86ba                	mv	a3,a4
204049da:	fec42703          	lw	a4,-20(s0)
204049de:	0731                	addi	a4,a4,12
204049e0:	8ff5                	and	a5,a5,a3
204049e2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
204049e4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
204049e6:	853e                	mv	a0,a5
204049e8:	50b2                	lw	ra,44(sp)
204049ea:	5422                	lw	s0,40(sp)
204049ec:	6145                	addi	sp,sp,48
204049ee:	8082                	ret

204049f0 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
204049f0:	7179                	addi	sp,sp,-48
204049f2:	d606                	sw	ra,44(sp)
204049f4:	d422                	sw	s0,40(sp)
204049f6:	1800                	addi	s0,sp,48
204049f8:	fca42e23          	sw	a0,-36(s0)
204049fc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a00:	fdc42503          	lw	a0,-36(s0)
20404a04:	c01ff0ef          	jal	ra,20404604 <__metal_driver_sifive_gpio0_base>
20404a08:	87aa                	mv	a5,a0
20404a0a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404a0e:	fec42783          	lw	a5,-20(s0)
20404a12:	07b1                	addi	a5,a5,12
20404a14:	4398                	lw	a4,0(a5)
20404a16:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404a1a:	fec42683          	lw	a3,-20(s0)
20404a1e:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404a20:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404a22:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20404a24:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
20404a26:	853e                	mv	a0,a5
20404a28:	50b2                	lw	ra,44(sp)
20404a2a:	5422                	lw	s0,40(sp)
20404a2c:	6145                	addi	sp,sp,48
20404a2e:	8082                	ret

20404a30 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20404a30:	7179                	addi	sp,sp,-48
20404a32:	d606                	sw	ra,44(sp)
20404a34:	d422                	sw	s0,40(sp)
20404a36:	1800                	addi	s0,sp,48
20404a38:	fca42e23          	sw	a0,-36(s0)
20404a3c:	fcb42c23          	sw	a1,-40(s0)
20404a40:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a44:	fdc42503          	lw	a0,-36(s0)
20404a48:	bbdff0ef          	jal	ra,20404604 <__metal_driver_sifive_gpio0_base>
20404a4c:	87aa                	mv	a5,a0
20404a4e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20404a52:	fec42783          	lw	a5,-20(s0)
20404a56:	03c78793          	addi	a5,a5,60
20404a5a:	439c                	lw	a5,0(a5)
20404a5c:	fd842703          	lw	a4,-40(s0)
20404a60:	fff74713          	not	a4,a4
20404a64:	86ba                	mv	a3,a4
20404a66:	fec42703          	lw	a4,-20(s0)
20404a6a:	03c70713          	addi	a4,a4,60
20404a6e:	8ff5                	and	a5,a5,a3
20404a70:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
20404a72:	fec42783          	lw	a5,-20(s0)
20404a76:	03878793          	addi	a5,a5,56
20404a7a:	4398                	lw	a4,0(a5)
20404a7c:	fd442783          	lw	a5,-44(s0)
20404a80:	fec42683          	lw	a3,-20(s0)
20404a84:	03868693          	addi	a3,a3,56
20404a88:	8fd9                	or	a5,a5,a4
20404a8a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20404a8c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20404a8e:	853e                	mv	a0,a5
20404a90:	50b2                	lw	ra,44(sp)
20404a92:	5422                	lw	s0,40(sp)
20404a94:	6145                	addi	sp,sp,48
20404a96:	8082                	ret

20404a98 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20404a98:	7179                	addi	sp,sp,-48
20404a9a:	d606                	sw	ra,44(sp)
20404a9c:	d422                	sw	s0,40(sp)
20404a9e:	1800                	addi	s0,sp,48
20404aa0:	fca42e23          	sw	a0,-36(s0)
20404aa4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404aa8:	fdc42503          	lw	a0,-36(s0)
20404aac:	b59ff0ef          	jal	ra,20404604 <__metal_driver_sifive_gpio0_base>
20404ab0:	87aa                	mv	a5,a0
20404ab2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
20404ab6:	fec42783          	lw	a5,-20(s0)
20404aba:	03878793          	addi	a5,a5,56
20404abe:	439c                	lw	a5,0(a5)
20404ac0:	fd842703          	lw	a4,-40(s0)
20404ac4:	fff74713          	not	a4,a4
20404ac8:	86ba                	mv	a3,a4
20404aca:	fec42703          	lw	a4,-20(s0)
20404ace:	03870713          	addi	a4,a4,56
20404ad2:	8ff5                	and	a5,a5,a3
20404ad4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
20404ad6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20404ad8:	853e                	mv	a0,a5
20404ada:	50b2                	lw	ra,44(sp)
20404adc:	5422                	lw	s0,40(sp)
20404ade:	6145                	addi	sp,sp,48
20404ae0:	8082                	ret

20404ae2 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404ae2:	7179                	addi	sp,sp,-48
20404ae4:	d606                	sw	ra,44(sp)
20404ae6:	d422                	sw	s0,40(sp)
20404ae8:	1800                	addi	s0,sp,48
20404aea:	fca42e23          	sw	a0,-36(s0)
20404aee:	fcb42c23          	sw	a1,-40(s0)
20404af2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404af6:	fdc42503          	lw	a0,-36(s0)
20404afa:	b0bff0ef          	jal	ra,20404604 <__metal_driver_sifive_gpio0_base>
20404afe:	87aa                	mv	a5,a0
20404b00:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20404b04:	fd442703          	lw	a4,-44(s0)
20404b08:	479d                	li	a5,7
20404b0a:	1ce7e963          	bltu	a5,a4,20404cdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404b0e:	fd442783          	lw	a5,-44(s0)
20404b12:	00279713          	slli	a4,a5,0x2
20404b16:	204067b7          	lui	a5,0x20406
20404b1a:	ab878793          	addi	a5,a5,-1352 # 20405ab8 <__metal_driver_vtable_riscv_plic0+0x4c>
20404b1e:	97ba                	add	a5,a5,a4
20404b20:	439c                	lw	a5,0(a5)
20404b22:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20404b24:	fec42783          	lw	a5,-20(s0)
20404b28:	07e1                	addi	a5,a5,24
20404b2a:	439c                	lw	a5,0(a5)
20404b2c:	fd842703          	lw	a4,-40(s0)
20404b30:	fff74713          	not	a4,a4
20404b34:	86ba                	mv	a3,a4
20404b36:	fec42703          	lw	a4,-20(s0)
20404b3a:	0761                	addi	a4,a4,24
20404b3c:	8ff5                	and	a5,a5,a3
20404b3e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20404b40:	fec42783          	lw	a5,-20(s0)
20404b44:	02078793          	addi	a5,a5,32
20404b48:	439c                	lw	a5,0(a5)
20404b4a:	fd842703          	lw	a4,-40(s0)
20404b4e:	fff74713          	not	a4,a4
20404b52:	86ba                	mv	a3,a4
20404b54:	fec42703          	lw	a4,-20(s0)
20404b58:	02070713          	addi	a4,a4,32
20404b5c:	8ff5                	and	a5,a5,a3
20404b5e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20404b60:	fec42783          	lw	a5,-20(s0)
20404b64:	02878793          	addi	a5,a5,40
20404b68:	439c                	lw	a5,0(a5)
20404b6a:	fd842703          	lw	a4,-40(s0)
20404b6e:	fff74713          	not	a4,a4
20404b72:	86ba                	mv	a3,a4
20404b74:	fec42703          	lw	a4,-20(s0)
20404b78:	02870713          	addi	a4,a4,40
20404b7c:	8ff5                	and	a5,a5,a3
20404b7e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20404b80:	fec42783          	lw	a5,-20(s0)
20404b84:	03078793          	addi	a5,a5,48
20404b88:	439c                	lw	a5,0(a5)
20404b8a:	fd842703          	lw	a4,-40(s0)
20404b8e:	fff74713          	not	a4,a4
20404b92:	86ba                	mv	a3,a4
20404b94:	fec42703          	lw	a4,-20(s0)
20404b98:	03070713          	addi	a4,a4,48
20404b9c:	8ff5                	and	a5,a5,a3
20404b9e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404ba0:	aa35                	j	20404cdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404ba2:	fec42783          	lw	a5,-20(s0)
20404ba6:	07e1                	addi	a5,a5,24
20404ba8:	4398                	lw	a4,0(a5)
20404baa:	fd842783          	lw	a5,-40(s0)
20404bae:	fec42683          	lw	a3,-20(s0)
20404bb2:	06e1                	addi	a3,a3,24
20404bb4:	8fd9                	or	a5,a5,a4
20404bb6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20404bb8:	a215                	j	20404cdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404bba:	fec42783          	lw	a5,-20(s0)
20404bbe:	02078793          	addi	a5,a5,32
20404bc2:	4398                	lw	a4,0(a5)
20404bc4:	fd842783          	lw	a5,-40(s0)
20404bc8:	fec42683          	lw	a3,-20(s0)
20404bcc:	02068693          	addi	a3,a3,32
20404bd0:	8fd9                	or	a5,a5,a4
20404bd2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20404bd4:	a221                	j	20404cdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404bd6:	fec42783          	lw	a5,-20(s0)
20404bda:	07e1                	addi	a5,a5,24
20404bdc:	4398                	lw	a4,0(a5)
20404bde:	fd842783          	lw	a5,-40(s0)
20404be2:	fec42683          	lw	a3,-20(s0)
20404be6:	06e1                	addi	a3,a3,24
20404be8:	8fd9                	or	a5,a5,a4
20404bea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404bec:	fec42783          	lw	a5,-20(s0)
20404bf0:	02078793          	addi	a5,a5,32
20404bf4:	4398                	lw	a4,0(a5)
20404bf6:	fd842783          	lw	a5,-40(s0)
20404bfa:	fec42683          	lw	a3,-20(s0)
20404bfe:	02068693          	addi	a3,a3,32
20404c02:	8fd9                	or	a5,a5,a4
20404c04:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20404c06:	a8d9                	j	20404cdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404c08:	fec42783          	lw	a5,-20(s0)
20404c0c:	02878793          	addi	a5,a5,40
20404c10:	4398                	lw	a4,0(a5)
20404c12:	fd842783          	lw	a5,-40(s0)
20404c16:	fec42683          	lw	a3,-20(s0)
20404c1a:	02868693          	addi	a3,a3,40
20404c1e:	8fd9                	or	a5,a5,a4
20404c20:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20404c22:	a86d                	j	20404cdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404c24:	fec42783          	lw	a5,-20(s0)
20404c28:	03078793          	addi	a5,a5,48
20404c2c:	4398                	lw	a4,0(a5)
20404c2e:	fd842783          	lw	a5,-40(s0)
20404c32:	fec42683          	lw	a3,-20(s0)
20404c36:	03068693          	addi	a3,a3,48
20404c3a:	8fd9                	or	a5,a5,a4
20404c3c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20404c3e:	a879                	j	20404cdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404c40:	fec42783          	lw	a5,-20(s0)
20404c44:	02878793          	addi	a5,a5,40
20404c48:	4398                	lw	a4,0(a5)
20404c4a:	fd842783          	lw	a5,-40(s0)
20404c4e:	fec42683          	lw	a3,-20(s0)
20404c52:	02868693          	addi	a3,a3,40
20404c56:	8fd9                	or	a5,a5,a4
20404c58:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404c5a:	fec42783          	lw	a5,-20(s0)
20404c5e:	03078793          	addi	a5,a5,48
20404c62:	4398                	lw	a4,0(a5)
20404c64:	fd842783          	lw	a5,-40(s0)
20404c68:	fec42683          	lw	a3,-20(s0)
20404c6c:	03068693          	addi	a3,a3,48
20404c70:	8fd9                	or	a5,a5,a4
20404c72:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20404c74:	a0a5                	j	20404cdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404c76:	fec42783          	lw	a5,-20(s0)
20404c7a:	07e1                	addi	a5,a5,24
20404c7c:	4398                	lw	a4,0(a5)
20404c7e:	fd842783          	lw	a5,-40(s0)
20404c82:	fec42683          	lw	a3,-20(s0)
20404c86:	06e1                	addi	a3,a3,24
20404c88:	8fd9                	or	a5,a5,a4
20404c8a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404c8c:	fec42783          	lw	a5,-20(s0)
20404c90:	02078793          	addi	a5,a5,32
20404c94:	4398                	lw	a4,0(a5)
20404c96:	fd842783          	lw	a5,-40(s0)
20404c9a:	fec42683          	lw	a3,-20(s0)
20404c9e:	02068693          	addi	a3,a3,32
20404ca2:	8fd9                	or	a5,a5,a4
20404ca4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404ca6:	fec42783          	lw	a5,-20(s0)
20404caa:	02878793          	addi	a5,a5,40
20404cae:	4398                	lw	a4,0(a5)
20404cb0:	fd842783          	lw	a5,-40(s0)
20404cb4:	fec42683          	lw	a3,-20(s0)
20404cb8:	02868693          	addi	a3,a3,40
20404cbc:	8fd9                	or	a5,a5,a4
20404cbe:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404cc0:	fec42783          	lw	a5,-20(s0)
20404cc4:	03078793          	addi	a5,a5,48
20404cc8:	4398                	lw	a4,0(a5)
20404cca:	fd842783          	lw	a5,-40(s0)
20404cce:	fec42683          	lw	a3,-20(s0)
20404cd2:	03068693          	addi	a3,a3,48
20404cd6:	8fd9                	or	a5,a5,a4
20404cd8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20404cda:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20404cdc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20404cde:	853e                	mv	a0,a5
20404ce0:	50b2                	lw	ra,44(sp)
20404ce2:	5422                	lw	s0,40(sp)
20404ce4:	6145                	addi	sp,sp,48
20404ce6:	8082                	ret

20404ce8 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404ce8:	7179                	addi	sp,sp,-48
20404cea:	d606                	sw	ra,44(sp)
20404cec:	d422                	sw	s0,40(sp)
20404cee:	1800                	addi	s0,sp,48
20404cf0:	fca42e23          	sw	a0,-36(s0)
20404cf4:	fcb42c23          	sw	a1,-40(s0)
20404cf8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404cfc:	fdc42503          	lw	a0,-36(s0)
20404d00:	905ff0ef          	jal	ra,20404604 <__metal_driver_sifive_gpio0_base>
20404d04:	87aa                	mv	a5,a0
20404d06:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20404d0a:	fd442703          	lw	a4,-44(s0)
20404d0e:	479d                	li	a5,7
20404d10:	14e7ea63          	bltu	a5,a4,20404e64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
20404d14:	fd442783          	lw	a5,-44(s0)
20404d18:	00279713          	slli	a4,a5,0x2
20404d1c:	204067b7          	lui	a5,0x20406
20404d20:	ad878793          	addi	a5,a5,-1320 # 20405ad8 <__metal_driver_vtable_riscv_plic0+0x6c>
20404d24:	97ba                	add	a5,a5,a4
20404d26:	439c                	lw	a5,0(a5)
20404d28:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404d2a:	fec42783          	lw	a5,-20(s0)
20404d2e:	07f1                	addi	a5,a5,28
20404d30:	4398                	lw	a4,0(a5)
20404d32:	fd842783          	lw	a5,-40(s0)
20404d36:	fec42683          	lw	a3,-20(s0)
20404d3a:	06f1                	addi	a3,a3,28
20404d3c:	8fd9                	or	a5,a5,a4
20404d3e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20404d40:	a215                	j	20404e64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404d42:	fec42783          	lw	a5,-20(s0)
20404d46:	02478793          	addi	a5,a5,36
20404d4a:	4398                	lw	a4,0(a5)
20404d4c:	fd842783          	lw	a5,-40(s0)
20404d50:	fec42683          	lw	a3,-20(s0)
20404d54:	02468693          	addi	a3,a3,36
20404d58:	8fd9                	or	a5,a5,a4
20404d5a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20404d5c:	a221                	j	20404e64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404d5e:	fec42783          	lw	a5,-20(s0)
20404d62:	07f1                	addi	a5,a5,28
20404d64:	4398                	lw	a4,0(a5)
20404d66:	fd842783          	lw	a5,-40(s0)
20404d6a:	fec42683          	lw	a3,-20(s0)
20404d6e:	06f1                	addi	a3,a3,28
20404d70:	8fd9                	or	a5,a5,a4
20404d72:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404d74:	fec42783          	lw	a5,-20(s0)
20404d78:	02478793          	addi	a5,a5,36
20404d7c:	4398                	lw	a4,0(a5)
20404d7e:	fd842783          	lw	a5,-40(s0)
20404d82:	fec42683          	lw	a3,-20(s0)
20404d86:	02468693          	addi	a3,a3,36
20404d8a:	8fd9                	or	a5,a5,a4
20404d8c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20404d8e:	a8d9                	j	20404e64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404d90:	fec42783          	lw	a5,-20(s0)
20404d94:	02c78793          	addi	a5,a5,44
20404d98:	4398                	lw	a4,0(a5)
20404d9a:	fd842783          	lw	a5,-40(s0)
20404d9e:	fec42683          	lw	a3,-20(s0)
20404da2:	02c68693          	addi	a3,a3,44
20404da6:	8fd9                	or	a5,a5,a4
20404da8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20404daa:	a86d                	j	20404e64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404dac:	fec42783          	lw	a5,-20(s0)
20404db0:	03478793          	addi	a5,a5,52
20404db4:	4398                	lw	a4,0(a5)
20404db6:	fd842783          	lw	a5,-40(s0)
20404dba:	fec42683          	lw	a3,-20(s0)
20404dbe:	03468693          	addi	a3,a3,52
20404dc2:	8fd9                	or	a5,a5,a4
20404dc4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20404dc6:	a879                	j	20404e64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404dc8:	fec42783          	lw	a5,-20(s0)
20404dcc:	02c78793          	addi	a5,a5,44
20404dd0:	4398                	lw	a4,0(a5)
20404dd2:	fd842783          	lw	a5,-40(s0)
20404dd6:	fec42683          	lw	a3,-20(s0)
20404dda:	02c68693          	addi	a3,a3,44
20404dde:	8fd9                	or	a5,a5,a4
20404de0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404de2:	fec42783          	lw	a5,-20(s0)
20404de6:	03478793          	addi	a5,a5,52
20404dea:	4398                	lw	a4,0(a5)
20404dec:	fd842783          	lw	a5,-40(s0)
20404df0:	fec42683          	lw	a3,-20(s0)
20404df4:	03468693          	addi	a3,a3,52
20404df8:	8fd9                	or	a5,a5,a4
20404dfa:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20404dfc:	a0a5                	j	20404e64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404dfe:	fec42783          	lw	a5,-20(s0)
20404e02:	07f1                	addi	a5,a5,28
20404e04:	4398                	lw	a4,0(a5)
20404e06:	fd842783          	lw	a5,-40(s0)
20404e0a:	fec42683          	lw	a3,-20(s0)
20404e0e:	06f1                	addi	a3,a3,28
20404e10:	8fd9                	or	a5,a5,a4
20404e12:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404e14:	fec42783          	lw	a5,-20(s0)
20404e18:	02478793          	addi	a5,a5,36
20404e1c:	4398                	lw	a4,0(a5)
20404e1e:	fd842783          	lw	a5,-40(s0)
20404e22:	fec42683          	lw	a3,-20(s0)
20404e26:	02468693          	addi	a3,a3,36
20404e2a:	8fd9                	or	a5,a5,a4
20404e2c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404e2e:	fec42783          	lw	a5,-20(s0)
20404e32:	02c78793          	addi	a5,a5,44
20404e36:	4398                	lw	a4,0(a5)
20404e38:	fd842783          	lw	a5,-40(s0)
20404e3c:	fec42683          	lw	a3,-20(s0)
20404e40:	02c68693          	addi	a3,a3,44
20404e44:	8fd9                	or	a5,a5,a4
20404e46:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404e48:	fec42783          	lw	a5,-20(s0)
20404e4c:	03478793          	addi	a5,a5,52
20404e50:	4398                	lw	a4,0(a5)
20404e52:	fd842783          	lw	a5,-40(s0)
20404e56:	fec42683          	lw	a3,-20(s0)
20404e5a:	03468693          	addi	a3,a3,52
20404e5e:	8fd9                	or	a5,a5,a4
20404e60:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20404e62:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20404e64:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20404e66:	853e                	mv	a0,a5
20404e68:	50b2                	lw	ra,44(sp)
20404e6a:	5422                	lw	s0,40(sp)
20404e6c:	6145                	addi	sp,sp,48
20404e6e:	8082                	ret

20404e70 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20404e70:	1101                	addi	sp,sp,-32
20404e72:	ce06                	sw	ra,28(sp)
20404e74:	cc22                	sw	s0,24(sp)
20404e76:	1000                	addi	s0,sp,32
20404e78:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20404e7c:	fec42503          	lw	a0,-20(s0)
20404e80:	faaff0ef          	jal	ra,2040462a <__metal_driver_sifive_gpio0_interrupt_parent>
20404e84:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20404e86:	853e                	mv	a0,a5
20404e88:	40f2                	lw	ra,28(sp)
20404e8a:	4462                	lw	s0,24(sp)
20404e8c:	6105                	addi	sp,sp,32
20404e8e:	8082                	ret

20404e90 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20404e90:	7179                	addi	sp,sp,-48
20404e92:	d606                	sw	ra,44(sp)
20404e94:	d422                	sw	s0,40(sp)
20404e96:	1800                	addi	s0,sp,48
20404e98:	fca42e23          	sw	a0,-36(s0)
20404e9c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404ea0:	fd842583          	lw	a1,-40(s0)
20404ea4:	fdc42503          	lw	a0,-36(s0)
20404ea8:	facff0ef          	jal	ra,20404654 <__metal_driver_sifive_gpio0_interrupt_lines>
20404eac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404eb0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20404eb4:	853e                	mv	a0,a5
20404eb6:	50b2                	lw	ra,44(sp)
20404eb8:	5422                	lw	s0,40(sp)
20404eba:	6145                	addi	sp,sp,48
20404ebc:	8082                	ret

20404ebe <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
20404ebe:	1101                	addi	sp,sp,-32
20404ec0:	ce22                	sw	s0,28(sp)
20404ec2:	1000                	addi	s0,sp,32
20404ec4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404ec8:	fec42703          	lw	a4,-20(s0)
20404ecc:	800017b7          	lui	a5,0x80001
20404ed0:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20404ed4:	00f71563          	bne	a4,a5,20404ede <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20404ed8:	100137b7          	lui	a5,0x10013
20404edc:	a011                	j	20404ee0 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
20404ede:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
20404ee0:	853e                	mv	a0,a5
20404ee2:	4472                	lw	s0,28(sp)
20404ee4:	6105                	addi	sp,sp,32
20404ee6:	8082                	ret

20404ee8 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20404ee8:	1101                	addi	sp,sp,-32
20404eea:	ce22                	sw	s0,28(sp)
20404eec:	1000                	addi	s0,sp,32
20404eee:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404ef2:	fec42703          	lw	a4,-20(s0)
20404ef6:	800017b7          	lui	a5,0x80001
20404efa:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20404efe:	00f71763          	bne	a4,a5,20404f0c <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404f02:	800017b7          	lui	a5,0x80001
20404f06:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe058>
20404f0a:	a011                	j	20404f0e <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20404f0c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
20404f0e:	853e                	mv	a0,a5
20404f10:	4472                	lw	s0,28(sp)
20404f12:	6105                	addi	sp,sp,32
20404f14:	8082                	ret

20404f16 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20404f16:	1101                	addi	sp,sp,-32
20404f18:	ce22                	sw	s0,28(sp)
20404f1a:	1000                	addi	s0,sp,32
20404f1c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404f20:	fec42703          	lw	a4,-20(s0)
20404f24:	800017b7          	lui	a5,0x80001
20404f28:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20404f2c:	00f71463          	bne	a4,a5,20404f34 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
20404f30:	4795                	li	a5,5
20404f32:	a011                	j	20404f36 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20404f34:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
20404f36:	853e                	mv	a0,a5
20404f38:	4472                	lw	s0,28(sp)
20404f3a:	6105                	addi	sp,sp,32
20404f3c:	8082                	ret

20404f3e <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
20404f3e:	1101                	addi	sp,sp,-32
20404f40:	ce22                	sw	s0,28(sp)
20404f42:	1000                	addi	s0,sp,32
20404f44:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404f48:	fec42703          	lw	a4,-20(s0)
20404f4c:	800017b7          	lui	a5,0x80001
20404f50:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20404f54:	00f71763          	bne	a4,a5,20404f62 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20404f58:	800017b7          	lui	a5,0x80001
20404f5c:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffdc90>
20404f60:	a011                	j	20404f64 <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
20404f62:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
20404f64:	853e                	mv	a0,a5
20404f66:	4472                	lw	s0,28(sp)
20404f68:	6105                	addi	sp,sp,32
20404f6a:	8082                	ret

20404f6c <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20404f6c:	1101                	addi	sp,sp,-32
20404f6e:	ce22                	sw	s0,28(sp)
20404f70:	1000                	addi	s0,sp,32
20404f72:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404f76:	fec42703          	lw	a4,-20(s0)
20404f7a:	800017b7          	lui	a5,0x80001
20404f7e:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20404f82:	00f71563          	bne	a4,a5,20404f8c <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20404f86:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f8a:	a011                	j	20404f8e <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20404f8c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
20404f8e:	853e                	mv	a0,a5
20404f90:	4472                	lw	s0,28(sp)
20404f92:	6105                	addi	sp,sp,32
20404f94:	8082                	ret

20404f96 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20404f96:	1101                	addi	sp,sp,-32
20404f98:	ce22                	sw	s0,28(sp)
20404f9a:	1000                	addi	s0,sp,32
20404f9c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404fa0:	fec42703          	lw	a4,-20(s0)
20404fa4:	800017b7          	lui	a5,0x80001
20404fa8:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20404fac:	00f71563          	bne	a4,a5,20404fb6 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
20404fb0:	000307b7          	lui	a5,0x30
20404fb4:	a011                	j	20404fb8 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20404fb6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
20404fb8:	853e                	mv	a0,a5
20404fba:	4472                	lw	s0,28(sp)
20404fbc:	6105                	addi	sp,sp,32
20404fbe:	8082                	ret

20404fc0 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20404fc0:	1101                	addi	sp,sp,-32
20404fc2:	ce22                	sw	s0,28(sp)
20404fc4:	1000                	addi	s0,sp,32
20404fc6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404fca:	fec42703          	lw	a4,-20(s0)
20404fce:	800017b7          	lui	a5,0x80001
20404fd2:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20404fd6:	00f71563          	bne	a4,a5,20404fe0 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
20404fda:	000307b7          	lui	a5,0x30
20404fde:	a011                	j	20404fe2 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20404fe0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
20404fe2:	853e                	mv	a0,a5
20404fe4:	4472                	lw	s0,28(sp)
20404fe6:	6105                	addi	sp,sp,32
20404fe8:	8082                	ret

20404fea <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20404fea:	1101                	addi	sp,sp,-32
20404fec:	ce06                	sw	ra,28(sp)
20404fee:	cc22                	sw	s0,24(sp)
20404ff0:	1000                	addi	s0,sp,32
20404ff2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20404ff6:	fec42503          	lw	a0,-20(s0)
20404ffa:	35fd                	jal	20404ee8 <__metal_driver_sifive_uart0_interrupt_parent>
20404ffc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20404ffe:	853e                	mv	a0,a5
20405000:	40f2                	lw	ra,28(sp)
20405002:	4462                	lw	s0,24(sp)
20405004:	6105                	addi	sp,sp,32
20405006:	8082                	ret

20405008 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20405008:	1101                	addi	sp,sp,-32
2040500a:	ce06                	sw	ra,28(sp)
2040500c:	cc22                	sw	s0,24(sp)
2040500e:	1000                	addi	s0,sp,32
20405010:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20405014:	fec42503          	lw	a0,-20(s0)
20405018:	3dfd                	jal	20404f16 <__metal_driver_sifive_uart0_interrupt_line>
2040501a:	87aa                	mv	a5,a0
2040501c:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20405020:	853e                	mv	a0,a5
20405022:	40f2                	lw	ra,28(sp)
20405024:	4462                	lw	s0,24(sp)
20405026:	6105                	addi	sp,sp,32
20405028:	8082                	ret

2040502a <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
2040502a:	7179                	addi	sp,sp,-48
2040502c:	d606                	sw	ra,44(sp)
2040502e:	d422                	sw	s0,40(sp)
20405030:	1800                	addi	s0,sp,48
20405032:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405036:	fdc42503          	lw	a0,-36(s0)
2040503a:	3551                	jal	20404ebe <__metal_driver_sifive_uart0_control_base>
2040503c:	87aa                	mv	a5,a0
2040503e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20405042:	fec42783          	lw	a5,-20(s0)
20405046:	439c                	lw	a5,0(a5)
20405048:	fff7c793          	not	a5,a5
2040504c:	83fd                	srli	a5,a5,0x1f
2040504e:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20405052:	853e                	mv	a0,a5
20405054:	50b2                	lw	ra,44(sp)
20405056:	5422                	lw	s0,40(sp)
20405058:	6145                	addi	sp,sp,48
2040505a:	8082                	ret

2040505c <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
2040505c:	7179                	addi	sp,sp,-48
2040505e:	d606                	sw	ra,44(sp)
20405060:	d422                	sw	s0,40(sp)
20405062:	1800                	addi	s0,sp,48
20405064:	fca42e23          	sw	a0,-36(s0)
20405068:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040506c:	fdc42503          	lw	a0,-36(s0)
20405070:	e4fff0ef          	jal	ra,20404ebe <__metal_driver_sifive_uart0_control_base>
20405074:	87aa                	mv	a5,a0
20405076:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
2040507a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
2040507c:	fdc42503          	lw	a0,-36(s0)
20405080:	376d                	jal	2040502a <__metal_driver_sifive_uart0_txready>
20405082:	87aa                	mv	a5,a0
20405084:	dfe5                	beqz	a5,2040507c <__metal_driver_sifive_uart0_putc+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20405086:	fec42783          	lw	a5,-20(s0)
2040508a:	fd842703          	lw	a4,-40(s0)
2040508e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20405090:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20405092:	853e                	mv	a0,a5
20405094:	50b2                	lw	ra,44(sp)
20405096:	5422                	lw	s0,40(sp)
20405098:	6145                	addi	sp,sp,48
2040509a:	8082                	ret

2040509c <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
2040509c:	7179                	addi	sp,sp,-48
2040509e:	d606                	sw	ra,44(sp)
204050a0:	d422                	sw	s0,40(sp)
204050a2:	1800                	addi	s0,sp,48
204050a4:	fca42e23          	sw	a0,-36(s0)
204050a8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204050ac:	fdc42503          	lw	a0,-36(s0)
204050b0:	e0fff0ef          	jal	ra,20404ebe <__metal_driver_sifive_uart0_control_base>
204050b4:	87aa                	mv	a5,a0
204050b6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
204050ba:	fec42783          	lw	a5,-20(s0)
204050be:	0791                	addi	a5,a5,4
204050c0:	439c                	lw	a5,0(a5)
204050c2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
204050c6:	fe842783          	lw	a5,-24(s0)
204050ca:	0007d763          	bgez	a5,204050d8 <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
204050ce:	fd842783          	lw	a5,-40(s0)
204050d2:	577d                	li	a4,-1
204050d4:	c398                	sw	a4,0(a5)
204050d6:	a801                	j	204050e6 <__metal_driver_sifive_uart0_getc+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
204050d8:	fe842783          	lw	a5,-24(s0)
204050dc:	0ff7f713          	andi	a4,a5,255
204050e0:	fd842783          	lw	a5,-40(s0)
204050e4:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
204050e6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
204050e8:	853e                	mv	a0,a5
204050ea:	50b2                	lw	ra,44(sp)
204050ec:	5422                	lw	s0,40(sp)
204050ee:	6145                	addi	sp,sp,48
204050f0:	8082                	ret

204050f2 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
204050f2:	7179                	addi	sp,sp,-48
204050f4:	d622                	sw	s0,44(sp)
204050f6:	1800                	addi	s0,sp,48
204050f8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
204050fc:	fdc42783          	lw	a5,-36(s0)
20405100:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20405104:	fec42783          	lw	a5,-20(s0)
20405108:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
2040510a:	853e                	mv	a0,a5
2040510c:	5432                	lw	s0,44(sp)
2040510e:	6145                	addi	sp,sp,48
20405110:	8082                	ret

20405112 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20405112:	7179                	addi	sp,sp,-48
20405114:	d606                	sw	ra,44(sp)
20405116:	d422                	sw	s0,40(sp)
20405118:	1800                	addi	s0,sp,48
2040511a:	fca42e23          	sw	a0,-36(s0)
2040511e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20405122:	fdc42783          	lw	a5,-36(s0)
20405126:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
2040512a:	fdc42503          	lw	a0,-36(s0)
2040512e:	d91ff0ef          	jal	ra,20404ebe <__metal_driver_sifive_uart0_control_base>
20405132:	87aa                	mv	a5,a0
20405134:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405138:	fdc42503          	lw	a0,-36(s0)
2040513c:	e03ff0ef          	jal	ra,20404f3e <__metal_driver_sifive_uart0_clock>
20405140:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20405144:	fd842703          	lw	a4,-40(s0)
20405148:	fec42783          	lw	a5,-20(s0)
2040514c:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
2040514e:	fe442783          	lw	a5,-28(s0)
20405152:	cbb1                	beqz	a5,204051a6 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20405154:	fe442783          	lw	a5,-28(s0)
20405158:	439c                	lw	a5,0(a5)
2040515a:	439c                	lw	a5,0(a5)
2040515c:	fe442503          	lw	a0,-28(s0)
20405160:	9782                	jalr	a5
20405162:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20405166:	fe042703          	lw	a4,-32(s0)
2040516a:	fd842783          	lw	a5,-40(s0)
2040516e:	02f747b3          	div	a5,a4,a5
20405172:	fff78713          	addi	a4,a5,-1
20405176:	fe842783          	lw	a5,-24(s0)
2040517a:	07e1                	addi	a5,a5,24
2040517c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
2040517e:	fe842783          	lw	a5,-24(s0)
20405182:	07a1                	addi	a5,a5,8
20405184:	439c                	lw	a5,0(a5)
20405186:	fe842703          	lw	a4,-24(s0)
2040518a:	0721                	addi	a4,a4,8
2040518c:	0017e793          	ori	a5,a5,1
20405190:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20405192:	fe842783          	lw	a5,-24(s0)
20405196:	07b1                	addi	a5,a5,12
20405198:	439c                	lw	a5,0(a5)
2040519a:	fe842703          	lw	a4,-24(s0)
2040519e:	0731                	addi	a4,a4,12
204051a0:	0017e793          	ori	a5,a5,1
204051a4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
204051a6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
204051a8:	853e                	mv	a0,a5
204051aa:	50b2                	lw	ra,44(sp)
204051ac:	5422                	lw	s0,40(sp)
204051ae:	6145                	addi	sp,sp,48
204051b0:	8082                	ret

204051b2 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
204051b2:	7139                	addi	sp,sp,-64
204051b4:	de06                	sw	ra,60(sp)
204051b6:	dc22                	sw	s0,56(sp)
204051b8:	0080                	addi	s0,sp,64
204051ba:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
204051be:	fcc42783          	lw	a5,-52(s0)
204051c2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
204051c6:	fcc42503          	lw	a0,-52(s0)
204051ca:	cf5ff0ef          	jal	ra,20404ebe <__metal_driver_sifive_uart0_control_base>
204051ce:	87aa                	mv	a5,a0
204051d0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
204051d4:	fcc42503          	lw	a0,-52(s0)
204051d8:	d67ff0ef          	jal	ra,20404f3e <__metal_driver_sifive_uart0_clock>
204051dc:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
204051e0:	fe842783          	lw	a5,-24(s0)
204051e4:	07a1                	addi	a5,a5,8
204051e6:	4398                	lw	a4,0(a5)
204051e8:	fe842783          	lw	a5,-24(s0)
204051ec:	07a1                	addi	a5,a5,8
204051ee:	86be                	mv	a3,a5
204051f0:	fff907b7          	lui	a5,0xfff90
204051f4:	17fd                	addi	a5,a5,-1
204051f6:	8ff9                	and	a5,a5,a4
204051f8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
204051fa:	fe842783          	lw	a5,-24(s0)
204051fe:	07a1                	addi	a5,a5,8
20405200:	4398                	lw	a4,0(a5)
20405202:	fe842783          	lw	a5,-24(s0)
20405206:	07a1                	addi	a5,a5,8
20405208:	86be                	mv	a3,a5
2040520a:	67c1                	lui	a5,0x10
2040520c:	8fd9                	or	a5,a5,a4
2040520e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20405210:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20405212:	fe842783          	lw	a5,-24(s0)
20405216:	07d1                	addi	a5,a5,20
20405218:	439c                	lw	a5,0(a5)
2040521a:	8b85                	andi	a5,a5,1
2040521c:	dbfd                	beqz	a5,20405212 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
2040521e:	fe842783          	lw	a5,-24(s0)
20405222:	07a1                	addi	a5,a5,8
20405224:	439c                	lw	a5,0(a5)
20405226:	8b89                	andi	a5,a5,2
20405228:	c399                	beqz	a5,2040522e <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
2040522a:	47a5                	li	a5,9
2040522c:	a011                	j	20405230 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
2040522e:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20405230:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20405234:	fe442783          	lw	a5,-28(s0)
20405238:	439c                	lw	a5,0(a5)
2040523a:	439c                	lw	a5,0(a5)
2040523c:	fe442503          	lw	a0,-28(s0)
20405240:	9782                	jalr	a5
20405242:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20405246:	fe042703          	lw	a4,-32(s0)
2040524a:	fdc42783          	lw	a5,-36(s0)
2040524e:	02f707b3          	mul	a5,a4,a5
20405252:	873e                	mv	a4,a5
20405254:	fec42783          	lw	a5,-20(s0)
20405258:	43dc                	lw	a5,4(a5)
2040525a:	02f757b3          	divu	a5,a4,a5
2040525e:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20405262:	fc042a23          	sw	zero,-44(s0)
20405266:	a039                	j	20405274 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20405268:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
2040526a:	fd442783          	lw	a5,-44(s0)
2040526e:	0785                	addi	a5,a5,1
20405270:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20405274:	fd442783          	lw	a5,-44(s0)
20405278:	fd842703          	lw	a4,-40(s0)
2040527c:	fee7c6e3          	blt	a5,a4,20405268 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20405280:	0001                	nop
20405282:	50f2                	lw	ra,60(sp)
20405284:	5462                	lw	s0,56(sp)
20405286:	6121                	addi	sp,sp,64
20405288:	8082                	ret

2040528a <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
2040528a:	7179                	addi	sp,sp,-48
2040528c:	d606                	sw	ra,44(sp)
2040528e:	d422                	sw	s0,40(sp)
20405290:	1800                	addi	s0,sp,48
20405292:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20405296:	fdc42783          	lw	a5,-36(s0)
2040529a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
2040529e:	fec42703          	lw	a4,-20(s0)
204052a2:	fec42783          	lw	a5,-20(s0)
204052a6:	43dc                	lw	a5,4(a5)
204052a8:	85be                	mv	a1,a5
204052aa:	853a                	mv	a0,a4
204052ac:	dd3fc0ef          	jal	ra,2040207e <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
204052b0:	0001                	nop
204052b2:	50b2                	lw	ra,44(sp)
204052b4:	5422                	lw	s0,40(sp)
204052b6:	6145                	addi	sp,sp,48
204052b8:	8082                	ret

204052ba <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
204052ba:	7139                	addi	sp,sp,-64
204052bc:	de06                	sw	ra,60(sp)
204052be:	dc22                	sw	s0,56(sp)
204052c0:	0080                	addi	s0,sp,64
204052c2:	fca42623          	sw	a0,-52(s0)
204052c6:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
204052ca:	fcc42783          	lw	a5,-52(s0)
204052ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
204052d2:	fcc42503          	lw	a0,-52(s0)
204052d6:	c69ff0ef          	jal	ra,20404f3e <__metal_driver_sifive_uart0_clock>
204052da:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
204052de:	fcc42503          	lw	a0,-52(s0)
204052e2:	c8bff0ef          	jal	ra,20404f6c <__metal_driver_sifive_uart0_pinmux>
204052e6:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
204052ea:	fe842783          	lw	a5,-24(s0)
204052ee:	c7b9                	beqz	a5,2040533c <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
204052f0:	fec42783          	lw	a5,-20(s0)
204052f4:	20405737          	lui	a4,0x20405
204052f8:	1b270713          	addi	a4,a4,434 # 204051b2 <pre_rate_change_callback_func>
204052fc:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
204052fe:	fec42783          	lw	a5,-20(s0)
20405302:	fcc42703          	lw	a4,-52(s0)
20405306:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20405308:	fec42783          	lw	a5,-20(s0)
2040530c:	07a1                	addi	a5,a5,8
2040530e:	85be                	mv	a1,a5
20405310:	fe842503          	lw	a0,-24(s0)
20405314:	20f1                	jal	204053e0 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20405316:	fec42783          	lw	a5,-20(s0)
2040531a:	20405737          	lui	a4,0x20405
2040531e:	28a70713          	addi	a4,a4,650 # 2040528a <post_rate_change_callback_func>
20405322:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20405324:	fec42783          	lw	a5,-20(s0)
20405328:	fcc42703          	lw	a4,-52(s0)
2040532c:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
2040532e:	fec42783          	lw	a5,-20(s0)
20405332:	07d1                	addi	a5,a5,20
20405334:	85be                	mv	a1,a5
20405336:	fe842503          	lw	a0,-24(s0)
2040533a:	28d9                	jal	20405410 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
2040533c:	fec42783          	lw	a5,-20(s0)
20405340:	fc842583          	lw	a1,-56(s0)
20405344:	853e                	mv	a0,a5
20405346:	d39fc0ef          	jal	ra,2040207e <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
2040534a:	fe442783          	lw	a5,-28(s0)
2040534e:	cb95                	beqz	a5,20405382 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20405350:	fcc42503          	lw	a0,-52(s0)
20405354:	c43ff0ef          	jal	ra,20404f96 <__metal_driver_sifive_uart0_pinmux_output_selector>
20405358:	87aa                	mv	a5,a0
2040535a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
2040535e:	fcc42503          	lw	a0,-52(s0)
20405362:	c5fff0ef          	jal	ra,20404fc0 <__metal_driver_sifive_uart0_pinmux_source_selector>
20405366:	87aa                	mv	a5,a0
20405368:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
2040536c:	fe442783          	lw	a5,-28(s0)
20405370:	439c                	lw	a5,0(a5)
20405372:	53dc                	lw	a5,36(a5)
20405374:	fdc42603          	lw	a2,-36(s0)
20405378:	fe042583          	lw	a1,-32(s0)
2040537c:	fe442503          	lw	a0,-28(s0)
20405380:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20405382:	0001                	nop
20405384:	50f2                	lw	ra,60(sp)
20405386:	5462                	lw	s0,56(sp)
20405388:	6121                	addi	sp,sp,64
2040538a:	8082                	ret

2040538c <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
2040538c:	7179                	addi	sp,sp,-48
2040538e:	d622                	sw	s0,44(sp)
20405390:	1800                	addi	s0,sp,48
20405392:	fca42e23          	sw	a0,-36(s0)
20405396:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
2040539a:	fd842783          	lw	a5,-40(s0)
2040539e:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
204053a2:	fdc42783          	lw	a5,-36(s0)
204053a6:	e781                	bnez	a5,204053ae <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
204053a8:	fd842783          	lw	a5,-40(s0)
204053ac:	a035                	j	204053d8 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
204053ae:	fdc42783          	lw	a5,-36(s0)
204053b2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
204053b6:	a031                	j	204053c2 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
204053b8:	fec42783          	lw	a5,-20(s0)
204053bc:	479c                	lw	a5,8(a5)
204053be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
204053c2:	fec42783          	lw	a5,-20(s0)
204053c6:	479c                	lw	a5,8(a5)
204053c8:	fbe5                	bnez	a5,204053b8 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
204053ca:	fec42783          	lw	a5,-20(s0)
204053ce:	fd842703          	lw	a4,-40(s0)
204053d2:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
204053d4:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
204053d8:	853e                	mv	a0,a5
204053da:	5432                	lw	s0,44(sp)
204053dc:	6145                	addi	sp,sp,48
204053de:	8082                	ret

204053e0 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
204053e0:	1101                	addi	sp,sp,-32
204053e2:	ce06                	sw	ra,28(sp)
204053e4:	cc22                	sw	s0,24(sp)
204053e6:	1000                	addi	s0,sp,32
204053e8:	fea42623          	sw	a0,-20(s0)
204053ec:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
204053f0:	fec42783          	lw	a5,-20(s0)
204053f4:	43dc                	lw	a5,4(a5)
204053f6:	fe842583          	lw	a1,-24(s0)
204053fa:	853e                	mv	a0,a5
204053fc:	3f41                	jal	2040538c <_metal_clock_append_to_callbacks>
204053fe:	872a                	mv	a4,a0
20405400:	fec42783          	lw	a5,-20(s0)
20405404:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20405406:	0001                	nop
20405408:	40f2                	lw	ra,28(sp)
2040540a:	4462                	lw	s0,24(sp)
2040540c:	6105                	addi	sp,sp,32
2040540e:	8082                	ret

20405410 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405410:	1101                	addi	sp,sp,-32
20405412:	ce06                	sw	ra,28(sp)
20405414:	cc22                	sw	s0,24(sp)
20405416:	1000                	addi	s0,sp,32
20405418:	fea42623          	sw	a0,-20(s0)
2040541c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20405420:	fec42783          	lw	a5,-20(s0)
20405424:	479c                	lw	a5,8(a5)
20405426:	fe842583          	lw	a1,-24(s0)
2040542a:	853e                	mv	a0,a5
2040542c:	3785                	jal	2040538c <_metal_clock_append_to_callbacks>
2040542e:	872a                	mv	a4,a0
20405430:	fec42783          	lw	a5,-20(s0)
20405434:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20405436:	0001                	nop
20405438:	40f2                	lw	ra,28(sp)
2040543a:	4462                	lw	s0,24(sp)
2040543c:	6105                	addi	sp,sp,32
2040543e:	8082                	ret

20405440 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20405440:	1101                	addi	sp,sp,-32
20405442:	ce06                	sw	ra,28(sp)
20405444:	cc22                	sw	s0,24(sp)
20405446:	1000                	addi	s0,sp,32
20405448:	fea42623          	sw	a0,-20(s0)
2040544c:	fec42783          	lw	a5,-20(s0)
20405450:	439c                	lw	a5,0(a5)
20405452:	57dc                	lw	a5,44(a5)
20405454:	fec42503          	lw	a0,-20(s0)
20405458:	9782                	jalr	a5
2040545a:	87aa                	mv	a5,a0
2040545c:	853e                	mv	a0,a5
2040545e:	40f2                	lw	ra,28(sp)
20405460:	4462                	lw	s0,24(sp)
20405462:	6105                	addi	sp,sp,32
20405464:	8082                	ret

20405466 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20405466:	1101                	addi	sp,sp,-32
20405468:	ce22                	sw	s0,28(sp)
2040546a:	1000                	addi	s0,sp,32
2040546c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20405470:	fec42783          	lw	a5,-20(s0)
20405474:	eb89                	bnez	a5,20405486 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20405476:	fec42703          	lw	a4,-20(s0)
2040547a:	070a                	slli	a4,a4,0x2
2040547c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20405480:	97ba                	add	a5,a5,a4
20405482:	439c                	lw	a5,0(a5)
20405484:	a011                	j	20405488 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20405486:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20405488:	853e                	mv	a0,a5
2040548a:	4472                	lw	s0,28(sp)
2040548c:	6105                	addi	sp,sp,32
2040548e:	8082                	ret

20405490 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20405490:	1101                	addi	sp,sp,-32
20405492:	ce22                	sw	s0,28(sp)
20405494:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405496:	f14027f3          	csrr	a5,mhartid
2040549a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
2040549e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
204054a2:	853e                	mv	a0,a5
204054a4:	4472                	lw	s0,28(sp)
204054a6:	6105                	addi	sp,sp,32
204054a8:	8082                	ret

204054aa <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
204054aa:	1101                	addi	sp,sp,-32
204054ac:	ce22                	sw	s0,28(sp)
204054ae:	1000                	addi	s0,sp,32
204054b0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
204054b4:	0001                	nop
204054b6:	bffd                	j	204054b4 <metal_shutdown+0xa>
	...

20405500 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405500:	cdafd06f          	j	204029da <metal_interrupt_vector_handler>

20405504 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405504:	cd6fd06f          	j	204029da <metal_interrupt_vector_handler>

20405508 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405508:	cd2fd06f          	j	204029da <metal_interrupt_vector_handler>

2040550c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040550c:	cfcfd06f          	j	20402a08 <metal_software_interrupt_vector_handler>

20405510 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405510:	ccafd06f          	j	204029da <metal_interrupt_vector_handler>

20405514 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405514:	cc6fd06f          	j	204029da <metal_interrupt_vector_handler>

20405518 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405518:	cc2fd06f          	j	204029da <metal_interrupt_vector_handler>

2040551c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040551c:	ddefd06f          	j	20402afa <metal_timer_interrupt_vector_handler>

20405520 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20405520:	cbafd06f          	j	204029da <metal_interrupt_vector_handler>

20405524 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20405524:	cb6fd06f          	j	204029da <metal_interrupt_vector_handler>

20405528 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20405528:	cb2fd06f          	j	204029da <metal_interrupt_vector_handler>

2040552c <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
2040552c:	caefd06f          	j	204029da <metal_interrupt_vector_handler>

20405530 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20405530:	caafd06f          	j	204029da <metal_interrupt_vector_handler>

20405534 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20405534:	ca6fd06f          	j	204029da <metal_interrupt_vector_handler>

20405538 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20405538:	ca2fd06f          	j	204029da <metal_interrupt_vector_handler>

2040553c <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
2040553c:	c9efd06f          	j	204029da <metal_interrupt_vector_handler>

20405540 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20405540:	837fd06f          	j	20402d76 <metal_lc0_interrupt_vector_handler>

20405544 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20405544:	8c5fd06f          	j	20402e08 <metal_lc1_interrupt_vector_handler>

20405548 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20405548:	953fd06f          	j	20402e9a <metal_lc2_interrupt_vector_handler>

2040554c <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
2040554c:	9e1fd06f          	j	20402f2c <metal_lc3_interrupt_vector_handler>

20405550 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20405550:	a6ffd06f          	j	20402fbe <metal_lc4_interrupt_vector_handler>

20405554 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20405554:	afdfd06f          	j	20403050 <metal_lc5_interrupt_vector_handler>

20405558 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20405558:	b8bfd06f          	j	204030e2 <metal_lc6_interrupt_vector_handler>

2040555c <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
2040555c:	c19fd06f          	j	20403174 <metal_lc7_interrupt_vector_handler>

20405560 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20405560:	ca7fd06f          	j	20403206 <metal_lc8_interrupt_vector_handler>

20405564 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20405564:	d35fd06f          	j	20403298 <metal_lc9_interrupt_vector_handler>

20405568 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20405568:	dc3fd06f          	j	2040332a <metal_lc10_interrupt_vector_handler>

2040556c <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
2040556c:	e51fd06f          	j	204033bc <metal_lc11_interrupt_vector_handler>

20405570 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20405570:	edffd06f          	j	2040344e <metal_lc12_interrupt_vector_handler>

20405574 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20405574:	f6dfd06f          	j	204034e0 <metal_lc13_interrupt_vector_handler>

20405578 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20405578:	ffbfd06f          	j	20403572 <metal_lc14_interrupt_vector_handler>

2040557c <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
2040557c:	888fe06f          	j	20403604 <metal_lc15_interrupt_vector_handler>

20405580 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405580:	1101                	addi	sp,sp,-32
20405582:	ce22                	sw	s0,28(sp)
20405584:	1000                	addi	s0,sp,32
20405586:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040558a:	fec42703          	lw	a4,-20(s0)
2040558e:	800017b7          	lui	a5,0x80001
20405592:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffdc90>
20405596:	00f71763          	bne	a4,a5,204055a4 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040559a:	03dfd7b7          	lui	a5,0x3dfd
2040559e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
204055a2:	a011                	j	204055a6 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
204055a4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
204055a6:	853e                	mv	a0,a5
204055a8:	4472                	lw	s0,28(sp)
204055aa:	6105                	addi	sp,sp,32
204055ac:	8082                	ret

204055ae <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
204055ae:	1101                	addi	sp,sp,-32
204055b0:	ce06                	sw	ra,28(sp)
204055b2:	cc22                	sw	s0,24(sp)
204055b4:	1000                	addi	s0,sp,32
204055b6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
204055ba:	fec42503          	lw	a0,-20(s0)
204055be:	37c9                	jal	20405580 <__metal_driver_fixed_clock_rate>
204055c0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
204055c2:	853e                	mv	a0,a5
204055c4:	40f2                	lw	ra,28(sp)
204055c6:	4462                	lw	s0,24(sp)
204055c8:	6105                	addi	sp,sp,32
204055ca:	8082                	ret

204055cc <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
204055cc:	1101                	addi	sp,sp,-32
204055ce:	ce06                	sw	ra,28(sp)
204055d0:	cc22                	sw	s0,24(sp)
204055d2:	1000                	addi	s0,sp,32
204055d4:	fea42623          	sw	a0,-20(s0)
204055d8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
204055dc:	fec42503          	lw	a0,-20(s0)
204055e0:	37f9                	jal	204055ae <__metal_driver_fixed_clock_get_rate_hz>
204055e2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
204055e4:	853e                	mv	a0,a5
204055e6:	40f2                	lw	ra,28(sp)
204055e8:	4462                	lw	s0,24(sp)
204055ea:	6105                	addi	sp,sp,32
204055ec:	8082                	ret

204055ee <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
204055ee:	1101                	addi	sp,sp,-32
204055f0:	ce06                	sw	ra,28(sp)
204055f2:	cc22                	sw	s0,24(sp)
204055f4:	1000                	addi	s0,sp,32
204055f6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
204055fa:	fec42503          	lw	a0,-20(s0)
204055fe:	3575                	jal	204054aa <metal_shutdown>
