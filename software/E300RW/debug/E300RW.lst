
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/debug/E300RW.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/debug/E300RW.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00005acc memsz 0x00005acc flags rwx
    LOAD off    0x00007730 vaddr 0x80001730 paddr 0x80001730 align 2**12
         filesz 0x00000000 memsz 0x00001c60 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405ad0 align 2**12
         filesz 0x00001730 memsz 0x00001730 flags rw-
    LOAD off    0x00008730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00008730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             0000019c  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005380  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000548  20405580  20405580  00006580  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20405ac8  20405ac8  00006ac8  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00001730  80000000  20405ad0  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              00001060  80001730  80001730  00007730  2**3  ALLOC
  6 .stack            00000400  80002790  80002790  00007730  2**0  ALLOC
  7 .heap             00000800  80002b90  80002b90  00007730  2**0  ALLOC
  8 .debug_info       000145a4  00000000  00000000  00008730  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     000026ed  00000000  00000000  0001ccd4  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    000008b0  00000000  00000000  0001f3c8  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000748  00000000  00000000  0001fc78  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       000079ea  00000000  00000000  000203c0  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        0000374e  00000000  00000000  00027daa  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002b4f8  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002b520  2**0  CONTENTS, READONLY
 16 .debug_frame      00002404  00000000  00000000  0002b54c  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405580 l    d  .rodata	00000000 .rodata
20405ac8 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80001730 l    d  .bss	00000000 .bss
80002790 l    d  .stack	00000000 .stack
80002b90 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
2040013e l       .init	00000000 _skip_init
20405778 l       .rodata	00000000 argv
2040577c l       .rodata	00000000 envp
20405780 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 E300RW.c
80000000 l     O .data	000007d0 asso_text.2659
800007d0 l     O .data	000007d0 plain_text.2658
80001740 l     O .bss	000007e0 cipher_text.2660
80000fa0 l     O .data	00000010 Key.2663
80000fb0 l     O .data	00000010 Nonce.2661
80001730 l     O .bss	00000004 tag_addr.2664
80001f20 l     O .bss	000007e0 dec_text.2662
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400d06 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20401256 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80001710 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80002700 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20401f70 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
2040201a l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20402040 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20402064 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
204020a0 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20402200 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20402736 l     F .text	00000024 __metal_driver_cpu_hartid
2040275a l     F .text	0000002a __metal_driver_cpu_timebase
20402784 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20403f96 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20403fc0 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20403fe8 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20404010 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20404038 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404584 l     F .text	00000026 __metal_driver_sifive_gpio0_base
204045aa l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
204045d4 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20404e3e l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20404e68 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20404e96 l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20404ebe l     F .text	0000002e __metal_driver_sifive_uart0_clock
20404eec l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20404f16 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20404f40 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20405132 l     F .text	000000d8 pre_rate_change_callback_func
2040520a l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20405480 l       .text	00000000 IRQ_0
20405484 l       .text	00000000 IRQ_1
20405488 l       .text	00000000 IRQ_2
2040548c l       .text	00000000 IRQ_3
20405490 l       .text	00000000 IRQ_4
20405494 l       .text	00000000 IRQ_5
20405498 l       .text	00000000 IRQ_6
2040549c l       .text	00000000 IRQ_7
204054a0 l       .text	00000000 IRQ_8
204054a4 l       .text	00000000 IRQ_9
204054a8 l       .text	00000000 IRQ_10
204054ac l       .text	00000000 IRQ_11
204054b0 l       .text	00000000 IRQ_12
204054b4 l       .text	00000000 IRQ_13
204054b8 l       .text	00000000 IRQ_14
204054bc l       .text	00000000 IRQ_15
204054c0 l       .text	00000000 IRQ_LC0
204054c4 l       .text	00000000 IRQ_LC1
204054c8 l       .text	00000000 IRQ_LC2
204054cc l       .text	00000000 IRQ_LC3
204054d0 l       .text	00000000 IRQ_LC4
204054d4 l       .text	00000000 IRQ_LC5
204054d8 l       .text	00000000 IRQ_LC6
204054dc l       .text	00000000 IRQ_LC7
204054e0 l       .text	00000000 IRQ_LC8
204054e4 l       .text	00000000 IRQ_LC9
204054e8 l       .text	00000000 IRQ_LC10
204054ec l       .text	00000000 IRQ_LC11
204054f0 l       .text	00000000 IRQ_LC12
204054f4 l       .text	00000000 IRQ_LC13
204054f8 l       .text	00000000 IRQ_LC14
204054fc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405500 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000fc0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20405acc l       .init_array	00000000 __fini_array_end
20405acc l       .init_array	00000000 __fini_array_start
20405acc l       .init_array	00000000 __init_array_end
20405ac8 l       .init_array	00000000 __preinit_array_end
20405ac8 l       .init_array	00000000 __init_array_start
20405ac8 l       .init_array	00000000 __preinit_array_start
204007f2 g     F .text	0000002c putchar
20405aa8 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
204016da g     F .text	00000030 _isatty_r
20402f3e  w    F .text	00000092 metal_lc4_interrupt_vector_handler
204008a0 g     F .text	000000da _puts_r
2040170a g     F .text	00000034 _lseek_r
20405092 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
204023dc g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
20402eac  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400200 g     F .text	0000001e rdcycle
204036fe g     F .text	00000038 __metal_valid_interrupt_id
204007ae g     F .text	00000044 printf
20403b24 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80001f08 g       .data	00000000 __global_pointer$
2040530c g     F .text	00000054 _metal_clock_append_to_callbacks
20404088 g     F .text	00000038 __metal_plic0_complete_interrupt
2040397e g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20401608 g     F .text	00000036 __sseek
20400dbc g     F .text	0000006a __sinit
20400988 g     F .text	000000c0 __swbuf_r
20400d78 g     F .text	00000044 __sfmoreglue
2040175a g     F .text	00000002 __malloc_unlock
204053e6 g     F .text	0000002a metal_cpu_get
800016e8 g     O .data	00000020 __metal_dt_serial_10013000
20404a18 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
2040578c g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80002790 g       .bss	00000000 metal_segment_bss_target_end
204020d0 g     F .text	0000009a __metal_clint0_mtime_get
20403f2a g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
204047c8 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
20401cf0 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20404faa g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80001730 g       .bss	00000000 metal_segment_bss_target_start
2040216a g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
204016a8 g     F .text	00000032 _fstat_r
20404c68 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
8000278c g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20405360 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20403218  w    F .text	00000092 metal_lc9_interrupt_vector_handler
204059e0 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
204059a0 g     O .rodata	00000040 __metal_driver_vtable_cpu
20401fec g     F .text	0000002e metal_uart_set_baud_rate
2040523a g     F .text	000000d2 __metal_driver_sifive_uart0_init
20403bb8 g     F .text	00000072 __metal_driver_cpu_mcycle_get
80002b90 g       .heap	00000000 metal_segment_heap_target_start
20400d6e g     F .text	0000000a _cleanup_r
80001720 g     O .data	00000004 __metal_dt_cpu_0
20403186  w    F .text	00000092 metal_lc8_interrupt_vector_handler
2040097a g     F .text	0000000e puts
20403460  w    F .text	00000092 metal_lc13_interrupt_vector_handler
20402918 g     F .text	00000018 __metal_default_exception_handler
20401b60 g     F .text	00000026 _fstat
20402702 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20404124 g     F .text	00000062 __metal_plic0_set_priority
20403b40 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
204027ae g     F .text	0000002c __metal_driver_cpu_get
20405954 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
2040280c g     F .text	00000018 __metal_interrupt_global_disable
204030f4  w    F .text	00000092 metal_lc7_interrupt_vector_handler
204032aa  w    F .text	00000092 metal_lc10_interrupt_vector_handler
2040155a g     F .text	00000030 _sbrk_r
2040453c g     F .text	00000048 __metal_driver_riscv_plic0_disable
204037f2 g     F .text	0000004e __metal_exception_register
20401b0a g     F .text	00000034 _read_r
20403d4c g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
204048aa g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20402a04 g     F .text	00000064 __metal_default_sw_handler
20405390 g     F .text	00000030 metal_clock_register_post_rate_change_callback
20404f6a g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
20401b86 g     F .text	00000020 _isatty
20404970 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80001728 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000170c g     O .data	00000004 _global_impure_ptr
20402a68  w    F .text	0000008e metal_timer_interrupt_vector_handler
20401d60 g     F .text	0000006a __libc_init_array
204048ea g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
2040333c  w    F .text	00000092 metal_lc11_interrupt_vector_handler
20403acc g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
20401bfa g     F .text	0000007e _sbrk
20404864 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
2040017c g     F .init	00000002 _init
2040286e g     F .text	0000001a __metal_interrupt_timer_disable
20404a62 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20403e02 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20405a6c g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
204049b0 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20401d28 g     F .text	00000038 __libc_fini_array
20404df0 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403d8c g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
204028c0 g     F .text	0000002c __metal_interrupt_local_enable
204026ce g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20401f1e g     F .text	0000002c metal_tty_putc
20404246 g     F .text	00000018 __metal_plic0_default_handler
2040081e g     F .text	00000082 _putc_r
80001020 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
204056dc g     O .rodata	00000020 __sf_fake_stderr
204028a4 g     F .text	0000001c __metal_interrupt_external_disable
20404f88 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20403b9c g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
20403840 g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20401280 g     F .text	00000042 __sfputs_r
20403ee4 g     F .text	00000046 __metal_driver_cpu_exception_register
20402824 g     F .text	00000018 __metal_interrupt_software_enable
20402d88  w    F .text	00000092 metal_lc1_interrupt_vector_handler
2040173e g     F .text	0000001a memchr
204010cc g     F .text	000000ac _free_r
8000173c g     O .bss	00000004 _global_atexit
20403616 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401e56 g     F .text	000000c8 __call_exitprocs
80002b90 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
20401ba6 g     F .text	0000002a _lseek
20403ec4 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403f58 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402888 g     F .text	0000001c __metal_interrupt_external_enable
20401dca g     F .text	0000008c __register_exitproc
20404fdc g     F .text	00000040 __metal_driver_sifive_uart0_putc
204042ee g     F .text	00000144 __metal_driver_riscv_plic0_init
204044f4 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20404838 g     F .text	0000002c __metal_driver_sifive_gpio0_output
2040021e g     F .text	00000094 printC
20403062  w    F .text	00000092 metal_lc6_interrupt_vector_handler
204027da g     F .text	0000001a __metal_myhart_id
20404e10 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20402976  w    F .text	0000008e metal_software_interrupt_vector_handler
20403af8 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20401678 g     F .text	00000030 _close_r
20405072 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
204022be g     F .text	000000da __metal_driver_riscv_clint0_register
80001718 g     O .data	00000008 __metal_dt_clint_2000000
20400a48 g     F .text	00000110 __swsetup_r
20400e26 g     F .text	0000009e __sfp
2040158a g     F .text	00000030 __sread
20404788 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
2040017e  w    F .init	00000000 secondary_main
20402948  w    F .text	0000002e metal_interrupt_vector_handler
20401758 g     F .text	00000002 __malloc_lock
20400ca2 g     F .text	00000064 _fflush_r
204040f8 g     F .text	0000002c __metal_plic0_get_threshold
204056fc g     O .rodata	00000020 __sf_fake_stdin
20403736 g     F .text	000000bc __metal_local_interrupt_enable
20402598 g     F .text	00000136 __metal_driver_riscv_clint0_command_request
20401024 g     F .text	000000a8 memset
20402fd0  w    F .text	00000092 metal_lc5_interrupt_vector_handler
20400524 g     F .text	0000028a main
80001730 g       .data	00000000 metal_segment_data_target_end
20403da0 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20403e64 g     F .text	00000060 __metal_driver_cpu_get_msip
2040542a g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20403f76 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
2040405a g     F .text	0000002e __metal_plic0_claim_interrupt
2040163e g     F .text	00000006 __sclose
204033ce  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20401178 g     F .text	000000de _malloc_r
204023c0 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
20403c2a g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20405410 g     F .text	0000001a metal_cpu_get_current_hartid
204003de g     F .text	00000146 AEAD_DEC
20405480 g       .text	00000000 __metal_vector_table
20405ad0 g       *ABS*	00000000 metal_segment_itim_source_start
80001714  w    O .data	00000004 __metal_cpu_table
80001030 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
2040017c g     F .init	00000002 _fini
204007ae g     F .text	00000044 iprintf
204027f4 g     F .text	00000018 __metal_interrupt_global_enable
20401ce6 g     F .text	0000000a atexit
20401f4a g     F .text	00000026 metal_tty_putc_raw
20401644 g     F .text	00000034 _write_r
20402854 g     F .text	0000001a __metal_interrupt_timer_enable
2040501c g     F .text	00000056 __metal_driver_sifive_uart0_getc
204024e2 g     F .text	000000b6 __metal_driver_riscv_clint0_disable
2040175c g     F .text	0000010c _printf_common
80001708 g     O .data	00000004 _impure_ptr
20403cd6 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20400b58 g     F .text	0000014a __sflush_r
2040552e g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20402430 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405ad0 g       *ABS*	00000000 metal_segment_data_source_start
80003390 g       .heap	00000000 metal_segment_heap_target_end
20403666 g     F .text	00000098 __metal_controller_interrupt_vector
800013e8 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400f30 g     F .text	00000058 __swhatbuf_r
2040492a g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20402af6 g     F .text	00000066 __metal_default_timer_handler
20401c78 g     F .text	0000006e _write
2040425e g     F .text	00000090 __metal_plic0_handler
20402e1a  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403584  w    F .text	00000092 metal_lc15_interrupt_vector_handler
204053c0 g     F .text	00000026 metal_cpu_interrupt_controller
204015ba g     F .text	0000004e __swrite
20401cfc g     F .text	0000002c exit
204012c2 g     F .text	00000298 _vfiprintf_r
20400ec4 g     F .text	0000006c _fwalk_reent
2040554c g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
2040571c g     O .rodata	00000020 __sf_fake_stdout
80001724 g     O .data	00000004 __metal_dt_gpio_10012000
20402930 g     F .text	00000018 __metal_default_interrupt_handler
20401fbe g     F .text	0000002e metal_uart_putc
20401bd0 g     F .text	0000002a _read
2040480e g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402b80 g     F .text	00000150 __metal_exception_handler
20402cf6  w    F .text	00000092 metal_lc0_interrupt_vector_handler
2040556e g     F .text	00000012 _exit
20403c70 g     F .text	00000066 __metal_driver_cpu_mtime_get
20400f88 g     F .text	0000009c __smakebuf_r
20402398 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20401868 g     F .text	000002a2 _printf_i
80001738 g     O .bss	00000004 __malloc_sbrk_start
204034f2  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20402236 g     F .text	00000088 __metal_driver_riscv_clint0_init
80001734 g     O .bss	00000004 __malloc_free_list
204002b2 g     F .text	0000012c AEAD_ENC
204012c2 g     F .text	00000298 _vfprintf_r
20403d62 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
204041ba g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20403d76 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
204028ec g     F .text	0000002c __metal_interrupt_local_disable
2040283c g     F .text	00000018 __metal_interrupt_software_disable
20404186 g     F .text	00000034 __metal_plic0_get_priority
20401f92 g     F .text	0000002c metal_uart_init
204040c0 g     F .text	00000038 __metal_plic0_set_threshold
20401b3e g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20404432 g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc02197          	auipc	gp,0x5fc02
20400004:	f0818193          	addi	gp,gp,-248 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc02197          	auipc	gp,0x5fc02
20400084:	e8818193          	addi	gp,gp,-376 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	5fc03117          	auipc	sp,0x5fc03
2040008c:	b0810113          	addi	sp,sp,-1272 # 80002b90 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
20400090:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
20400092:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400096:	00a28563          	beq	t0,a0,204000a0 <_start+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
2040009a:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
2040009c:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009e:	bfe5                	j	20400096 <_start+0x18>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
204000a0:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a4:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a8:	08551b63          	bne	a0,t0,2040013e <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000ac:	00006297          	auipc	t0,0x6
204000b0:	a2428293          	addi	t0,t0,-1500 # 20405ad0 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b4:	5fc00317          	auipc	t1,0x5fc00
204000b8:	f4c30313          	addi	t1,t1,-180 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000bc:	82818393          	addi	t2,gp,-2008 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000c0:	00628c63          	beq	t0,t1,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c4:	00735a63          	bge	t1,t2,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000cc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ce:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000d2:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d4:	fe734ae3          	blt	t1,t2,204000c8 <_start+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d8:	00006297          	auipc	t0,0x6
204000dc:	9f828293          	addi	t0,t0,-1544 # 20405ad0 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000e0:	e7c00317          	auipc	t1,0xe7c00
204000e4:	f2030313          	addi	t1,t1,-224 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e8:	e7c00397          	auipc	t2,0xe7c00
204000ec:	f1838393          	addi	t2,t2,-232 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000f0:	00628c63          	beq	t0,t1,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f4:	00735a63          	bge	t1,t2,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000fc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fe:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
20400102:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400104:	fe734ae3          	blt	t1,t2,204000f8 <_start+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400108:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
2040010c:	5fc01317          	auipc	t1,0x5fc01
20400110:	62430313          	addi	t1,t1,1572 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400114:	5fc02397          	auipc	t2,0x5fc02
20400118:	67c38393          	addi	t2,t2,1660 # 80002790 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
2040011c:	00735763          	bge	t1,t2,2040012a <_start+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400120:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
20400124:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
20400126:	fe734de3          	blt	t1,t2,20400120 <_start+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2040012a:	c211                	beqz	a2,2040012e <_start+0xb0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
2040012c:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
2040012e:	00002517          	auipc	a0,0x2
20400132:	bfa50513          	addi	a0,a0,-1030 # 20401d28 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
20400136:	3b1010ef          	jal	ra,20401ce6 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
2040013a:	427010ef          	jal	ra,20401d60 <__libc_init_array>

2040013e <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
2040013e:	3f0d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400140:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
20400144:	00010737          	lui	a4,0x10
20400148:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
2040014c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
2040014e:	cb89                	beqz	a5,20400160 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400150:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
20400154:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
20400156:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400158:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
2040015c:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400160:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
20400162:	00005597          	auipc	a1,0x5
20400166:	61658593          	addi	a1,a1,1558 # 20405778 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
2040016a:	00005617          	auipc	a2,0x5
2040016e:	61260613          	addi	a2,a2,1554 # 2040577c <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
20400172:	2031                	jal	2040017e <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
20400174:	389010ef          	jal	ra,20401cfc <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400178:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
2040017a:	8082                	ret

2040017c <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
2040017c:	8082                	ret

2040017e <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
2040017e:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400180:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
20400182:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
20400186:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
2040018a:	00628563          	beq	t0,t1,20400194 <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
2040018e:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
20400192:	bff5                	j	2040018e <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
20400194:	2e41                	jal	20400524 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400196:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400198:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
2040019a:	8082                	ret

Disassembly of section .text:

20400200 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:49

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
20400200:	1101                	addi	sp,sp,-32
20400202:	ce22                	sw	s0,28(sp)
20400204:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:50
    int tmp = 0;
20400206:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:51
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
2040020a:	b00027f3          	csrr	a5,mcycle
2040020e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:52
    return tmp;
20400212:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:53
}
20400216:	853e                	mv	a0,a5
20400218:	4472                	lw	s0,28(sp)
2040021a:	6105                	addi	sp,sp,32
2040021c:	8082                	ret

2040021e <printC>:
printC():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:33
unsigned AEAD_DEC(unsigned *ad_addr, unsigned ad_len,
             unsigned *c_addr, unsigned c_len,
             unsigned *d_addr, unsigned *nonce_addr,
             unsigned *key_addr, unsigned *tag_addr);

void printC(unsigned *arr, unsigned a_len, int cipher, int del) {
2040021e:	7179                	addi	sp,sp,-48
20400220:	d606                	sw	ra,44(sp)
20400222:	d422                	sw	s0,40(sp)
20400224:	1800                	addi	s0,sp,48
20400226:	fca42e23          	sw	a0,-36(s0)
2040022a:	fcb42c23          	sw	a1,-40(s0)
2040022e:	fcc42a23          	sw	a2,-44(s0)
20400232:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:34
    int len = (cipher) ? a_len + 4 : a_len;
20400236:	fd442783          	lw	a5,-44(s0)
2040023a:	c789                	beqz	a5,20400244 <printC+0x26>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:34 (discriminator 1)
2040023c:	fd842783          	lw	a5,-40(s0)
20400240:	0791                	addi	a5,a5,4
20400242:	a019                	j	20400248 <printC+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:34 (discriminator 2)
20400244:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:34 (discriminator 4)
20400248:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:35 (discriminator 4)
    for (int i = 0; i < len; i++) {
2040024c:	fe042623          	sw	zero,-20(s0)
20400250:	a0b1                	j	2040029c <printC+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:36
        if (i % 2 == 0) {
20400252:	fec42783          	lw	a5,-20(s0)
20400256:	8b85                	andi	a5,a5,1
20400258:	e399                	bnez	a5,2040025e <printC+0x40>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:37
            printf("\n");
2040025a:	4529                	li	a0,10
2040025c:	2b59                	jal	204007f2 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:39
        }
        printf("%08x ", arr[i], i);
2040025e:	fec42783          	lw	a5,-20(s0)
20400262:	078a                	slli	a5,a5,0x2
20400264:	fdc42703          	lw	a4,-36(s0)
20400268:	97ba                	add	a5,a5,a4
2040026a:	439c                	lw	a5,0(a5)
2040026c:	fec42603          	lw	a2,-20(s0)
20400270:	85be                	mv	a1,a5
20400272:	204057b7          	lui	a5,0x20405
20400276:	58078513          	addi	a0,a5,1408 # 20405580 <_exit+0x12>
2040027a:	2b15                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:40
        if (del) {
2040027c:	fd042783          	lw	a5,-48(s0)
20400280:	cb89                	beqz	a5,20400292 <printC+0x74>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:41
            arr[i] = 0;
20400282:	fec42783          	lw	a5,-20(s0)
20400286:	078a                	slli	a5,a5,0x2
20400288:	fdc42703          	lw	a4,-36(s0)
2040028c:	97ba                	add	a5,a5,a4
2040028e:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:35 (discriminator 2)
    for (int i = 0; i < len; i++) {
20400292:	fec42783          	lw	a5,-20(s0)
20400296:	0785                	addi	a5,a5,1
20400298:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:35 (discriminator 1)
2040029c:	fec42703          	lw	a4,-20(s0)
204002a0:	fe842783          	lw	a5,-24(s0)
204002a4:	faf747e3          	blt	a4,a5,20400252 <printC+0x34>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:44
        }
    }
}
204002a8:	0001                	nop
204002aa:	50b2                	lw	ra,44(sp)
204002ac:	5422                	lw	s0,40(sp)
204002ae:	6145                	addi	sp,sp,48
204002b0:	8082                	ret

204002b2 <AEAD_ENC>:
AEAD_ENC():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:48
int AEAD_ENC(unsigned *ad_addr, unsigned ad_len,
             unsigned *p_addr, unsigned p_len,
             unsigned *c_addr, unsigned *nonce_addr,
             unsigned *key_addr) {
204002b2:	7139                	addi	sp,sp,-64
204002b4:	de06                	sw	ra,60(sp)
204002b6:	dc22                	sw	s0,56(sp)
204002b8:	0080                	addi	s0,sp,64
204002ba:	fca42e23          	sw	a0,-36(s0)
204002be:	fcb42c23          	sw	a1,-40(s0)
204002c2:	fcc42a23          	sw	a2,-44(s0)
204002c6:	fcd42823          	sw	a3,-48(s0)
204002ca:	fce42623          	sw	a4,-52(s0)
204002ce:	fcf42423          	sw	a5,-56(s0)
204002d2:	fd042223          	sw	a6,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:49
    int rd = 0;
204002d6:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:50
    printf("Init DEC\n");
204002da:	204057b7          	lui	a5,0x20405
204002de:	58878513          	addi	a0,a5,1416 # 20405588 <_exit+0x1a>
204002e2:	2d61                	jal	2040097a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:51
    asm volatile("fence");
204002e4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:52
    ROCC_INSTRUCTION_DS(0, rd, nonce_addr, Enc_Set_Nonce);
204002e8:	fc842783          	lw	a5,-56(s0)
204002ec:	85be                	mv	a1,a5
204002ee:	2805e50b          	0x2805e50b
204002f2:	87aa                	mv	a5,a0
204002f4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:53
    asm volatile("fence":: : "memory");
204002f8:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:54
    printf("Set Nonce finish : %08x \n", rd);
204002fc:	fec42583          	lw	a1,-20(s0)
20400300:	204057b7          	lui	a5,0x20405
20400304:	59478513          	addi	a0,a5,1428 # 20405594 <_exit+0x26>
20400308:	215d                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:57


    asm volatile("fence");
2040030a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:58
    ROCC_INSTRUCTION_DS(0, rd, key_addr, Enc_Set_Key);
2040030e:	fc442783          	lw	a5,-60(s0)
20400312:	85be                	mv	a1,a5
20400314:	2a05e50b          	0x2a05e50b
20400318:	87aa                	mv	a5,a0
2040031a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:59
    asm volatile("fence":: : "memory");
2040031e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:60
    printf("Set Key  finish : %07x \n", rd);
20400322:	fec42583          	lw	a1,-20(s0)
20400326:	204057b7          	lui	a5,0x20405
2040032a:	5b078513          	addi	a0,a5,1456 # 204055b0 <_exit+0x42>
2040032e:	2141                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:62

    asm volatile("fence");
20400330:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:63
    ROCC_INSTRUCTION_DSS(0, rd, p_addr, p_len, Enc_Set_P);
20400334:	fd442783          	lw	a5,-44(s0)
20400338:	85be                	mv	a1,a5
2040033a:	fd042603          	lw	a2,-48(s0)
2040033e:	22c5f50b          	0x22c5f50b
20400342:	87aa                	mv	a5,a0
20400344:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:64
    asm volatile("fence":: : "memory");
20400348:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:65
    printf("Set Plain text finish length : %08x \n", rd);
2040034c:	fec42583          	lw	a1,-20(s0)
20400350:	204057b7          	lui	a5,0x20405
20400354:	5cc78513          	addi	a0,a5,1484 # 204055cc <_exit+0x5e>
20400358:	2999                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:67

    asm volatile("fence");
2040035a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:68
    ROCC_INSTRUCTION_DSS(0, rd, ad_addr, ad_len, Enc_Set_AD);
2040035e:	fdc42783          	lw	a5,-36(s0)
20400362:	85be                	mv	a1,a5
20400364:	fd842603          	lw	a2,-40(s0)
20400368:	24c5f50b          	0x24c5f50b
2040036c:	87aa                	mv	a5,a0
2040036e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:69
    asm volatile("fence":: : "memory");
20400372:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:70
    printf("Set Associated Data finish length: %08x \n", rd);
20400376:	fec42583          	lw	a1,-20(s0)
2040037a:	204057b7          	lui	a5,0x20405
2040037e:	5f478513          	addi	a0,a5,1524 # 204055f4 <_exit+0x86>
20400382:	2135                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:72

    asm volatile("fence");
20400384:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:73
    ROCC_INSTRUCTION_DS(0, rd, c_addr, Enc_Set_C_Tag);
20400388:	fcc42783          	lw	a5,-52(s0)
2040038c:	85be                	mv	a1,a5
2040038e:	2605e50b          	0x2605e50b
20400392:	87aa                	mv	a5,a0
20400394:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:74
    asm volatile("fence":: : "memory");
20400398:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:75
    printf("Set Dec addr: %08x \n", rd);
2040039c:	fec42583          	lw	a1,-20(s0)
204003a0:	204057b7          	lui	a5,0x20405
204003a4:	62078513          	addi	a0,a5,1568 # 20405620 <_exit+0xb2>
204003a8:	2119                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:77

    asm volatile("fence");
204003aa:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:78
    ROCC_INSTRUCTION_DS(0, rd, rd, Enc_Init);
204003ae:	fec42783          	lw	a5,-20(s0)
204003b2:	85be                	mv	a1,a5
204003b4:	2c05e50b          	0x2c05e50b
204003b8:	87aa                	mv	a5,a0
204003ba:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:79
    asm volatile("fence":: : "memory");
204003be:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:80
    printf("Finish AEAD Dec %08x \n", rd);
204003c2:	fec42583          	lw	a1,-20(s0)
204003c6:	204057b7          	lui	a5,0x20405
204003ca:	63878513          	addi	a0,a5,1592 # 20405638 <_exit+0xca>
204003ce:	26c5                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:81
    return rd;
204003d0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:82
}
204003d4:	853e                	mv	a0,a5
204003d6:	50f2                	lw	ra,60(sp)
204003d8:	5462                	lw	s0,56(sp)
204003da:	6121                	addi	sp,sp,64
204003dc:	8082                	ret

204003de <AEAD_DEC>:
AEAD_DEC():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:87

unsigned AEAD_DEC(unsigned *ad_addr, unsigned ad_len,
             unsigned *c_addr, unsigned c_len,
             unsigned *d_addr, unsigned *nonce_addr,
             unsigned *key_addr, unsigned *tag_addr){
204003de:	7139                	addi	sp,sp,-64
204003e0:	de06                	sw	ra,60(sp)
204003e2:	dc22                	sw	s0,56(sp)
204003e4:	0080                	addi	s0,sp,64
204003e6:	fca42e23          	sw	a0,-36(s0)
204003ea:	fcb42c23          	sw	a1,-40(s0)
204003ee:	fcc42a23          	sw	a2,-44(s0)
204003f2:	fcd42823          	sw	a3,-48(s0)
204003f6:	fce42623          	sw	a4,-52(s0)
204003fa:	fcf42423          	sw	a5,-56(s0)
204003fe:	fd042223          	sw	a6,-60(s0)
20400402:	fd142023          	sw	a7,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:88
    unsigned rd = 0;
20400406:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:89
    printf("Init DEC\n");
2040040a:	204057b7          	lui	a5,0x20405
2040040e:	58878513          	addi	a0,a5,1416 # 20405588 <_exit+0x1a>
20400412:	23a5                	jal	2040097a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:90
    asm volatile("fence");
20400414:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:91
    ROCC_INSTRUCTION_DS(0, rd, nonce_addr, Enc_Set_Nonce);
20400418:	fc842783          	lw	a5,-56(s0)
2040041c:	85be                	mv	a1,a5
2040041e:	2805e50b          	0x2805e50b
20400422:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:92
    asm volatile("fence":: : "memory");
20400426:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:93
    printf("Set Nonce finish : %08x \n", rd);
2040042a:	fec42583          	lw	a1,-20(s0)
2040042e:	204057b7          	lui	a5,0x20405
20400432:	59478513          	addi	a0,a5,1428 # 20405594 <_exit+0x26>
20400436:	2ea5                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:95

    asm volatile("fence");
20400438:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:96
    ROCC_INSTRUCTION_DS(0, rd, tag_addr, Dec_Load_Tag);
2040043c:	fc042783          	lw	a5,-64(s0)
20400440:	85be                	mv	a1,a5
20400442:	2e05e50b          	0x2e05e50b
20400446:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:97
    asm volatile("fence":: : "memory");
2040044a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:98
    printf("Load Tag finish : %08x \n", rd);
2040044e:	fec42583          	lw	a1,-20(s0)
20400452:	204057b7          	lui	a5,0x20405
20400456:	65078513          	addi	a0,a5,1616 # 20405650 <_exit+0xe2>
2040045a:	2e91                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:100

    asm volatile("fence");
2040045c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:101
    ROCC_INSTRUCTION_DS(0, rd, key_addr, Enc_Set_Key);
20400460:	fc442783          	lw	a5,-60(s0)
20400464:	85be                	mv	a1,a5
20400466:	2a05e50b          	0x2a05e50b
2040046a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:102
    asm volatile("fence":: : "memory");
2040046e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:103
    printf("Set Key  finish : %07x \n", rd);
20400472:	fec42583          	lw	a1,-20(s0)
20400476:	204057b7          	lui	a5,0x20405
2040047a:	5b078513          	addi	a0,a5,1456 # 204055b0 <_exit+0x42>
2040047e:	2e05                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:105

    asm volatile("fence");
20400480:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:106
    ROCC_INSTRUCTION_DSS(0, rd, c_addr, c_len, Enc_Set_P);
20400484:	fd442783          	lw	a5,-44(s0)
20400488:	85be                	mv	a1,a5
2040048a:	fd042603          	lw	a2,-48(s0)
2040048e:	22c5f50b          	0x22c5f50b
20400492:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:107
    asm volatile("fence":: : "memory");
20400496:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:108
    printf("Set Plain text finish length : %08x \n", rd);
2040049a:	fec42583          	lw	a1,-20(s0)
2040049e:	204057b7          	lui	a5,0x20405
204004a2:	5cc78513          	addi	a0,a5,1484 # 204055cc <_exit+0x5e>
204004a6:	2621                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:110

    asm volatile("fence");
204004a8:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:111
    ROCC_INSTRUCTION_DSS(0, rd, ad_addr, ad_len, Enc_Set_AD);
204004ac:	fdc42783          	lw	a5,-36(s0)
204004b0:	85be                	mv	a1,a5
204004b2:	fd842603          	lw	a2,-40(s0)
204004b6:	24c5f50b          	0x24c5f50b
204004ba:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:112
    asm volatile("fence":: : "memory");
204004be:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:113
    printf("Set Associated Data finish length: %08x \n", rd);
204004c2:	fec42583          	lw	a1,-20(s0)
204004c6:	204057b7          	lui	a5,0x20405
204004ca:	5f478513          	addi	a0,a5,1524 # 204055f4 <_exit+0x86>
204004ce:	24c5                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:115

    asm volatile("fence");
204004d0:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:116
    ROCC_INSTRUCTION_DS(0, rd, d_addr, Enc_Set_C_Tag);
204004d4:	fcc42783          	lw	a5,-52(s0)
204004d8:	85be                	mv	a1,a5
204004da:	2605e50b          	0x2605e50b
204004de:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:117
    asm volatile("fence":: : "memory");
204004e2:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:118
    printf("Set Dec addr: %08x \n", rd);
204004e6:	fec42583          	lw	a1,-20(s0)
204004ea:	204057b7          	lui	a5,0x20405
204004ee:	62078513          	addi	a0,a5,1568 # 20405620 <_exit+0xb2>
204004f2:	2c75                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:120

    asm volatile("fence");
204004f4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:121
    ROCC_INSTRUCTION_DS(0, rd, rd, Dec_Init);
204004f8:	fec42583          	lw	a1,-20(s0)
204004fc:	3005e50b          	0x3005e50b
20400500:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:122
    asm volatile("fence":: : "memory");
20400504:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:123
    printf("Finish AEAD Dec %08x \n", rd);
20400508:	fec42583          	lw	a1,-20(s0)
2040050c:	204057b7          	lui	a5,0x20405
20400510:	63878513          	addi	a0,a5,1592 # 20405638 <_exit+0xca>
20400514:	2c69                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:124
    return rd;
20400516:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:125
}
2040051a:	853e                	mv	a0,a5
2040051c:	50f2                	lw	ra,60(sp)
2040051e:	5462                	lw	s0,56(sp)
20400520:	6121                	addi	sp,sp,64
20400522:	8082                	ret

20400524 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:7
#include "../RoCCcommon/rocc.h"
#include "AEAD_HW.h"

#include <stdio.h>

int main(void) {
20400524:	7179                	addi	sp,sp,-48
20400526:	d606                	sw	ra,44(sp)
20400528:	d422                	sw	s0,40(sp)
2040052a:	1800                	addi	s0,sp,48
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:8
    unsigned plain_len = 32;
2040052c:	02000793          	li	a5,32
20400530:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:9
    unsigned asso_len = 32; /// CReo que asignaste a memoria
20400534:	02000793          	li	a5,32
20400538:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:10
    unsigned plain_len_int = plain_len / 4;
2040053c:	fec42783          	lw	a5,-20(s0)
20400540:	8389                	srli	a5,a5,0x2
20400542:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11
    plain_len_int = (plain_len % 4 == 0) ? plain_len_int : plain_len_int + 2;
20400546:	fec42783          	lw	a5,-20(s0)
2040054a:	8b8d                	andi	a5,a5,3
2040054c:	c789                	beqz	a5,20400556 <main+0x32>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11 (discriminator 1)
2040054e:	fe442783          	lw	a5,-28(s0)
20400552:	0789                	addi	a5,a5,2
20400554:	a019                	j	2040055a <main+0x36>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11 (discriminator 2)
20400556:	fe442783          	lw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11 (discriminator 4)
2040055a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:26 (discriminator 4)

    static unsigned *tag_addr;


    // printf("Init AEAD \n");
    printf("Init Hola2\n");
2040055e:	204057b7          	lui	a5,0x20405
20400562:	66c78513          	addi	a0,a5,1644 # 2040566c <_exit+0xfe>
20400566:	2911                	jal	2040097a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:27 (discriminator 4)
    printf("Ad addr = %08x\n", asso_text);
20400568:	800007b7          	lui	a5,0x80000
2040056c:	00078593          	mv	a1,a5
20400570:	204057b7          	lui	a5,0x20405
20400574:	67878513          	addi	a0,a5,1656 # 20405678 <_exit+0x10a>
20400578:	2c1d                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:28 (discriminator 4)
    printf("Pl addr = %08x\n", plain_text);
2040057a:	800007b7          	lui	a5,0x80000
2040057e:	7d078593          	addi	a1,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd440>
20400582:	204057b7          	lui	a5,0x20405
20400586:	68878513          	addi	a0,a5,1672 # 20405688 <_exit+0x11a>
2040058a:	2415                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:29 (discriminator 4)
    printf("Ct addr = %08x\n", cipher_text);
2040058c:	800017b7          	lui	a5,0x80001
20400590:	74078593          	addi	a1,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
20400594:	204057b7          	lui	a5,0x20405
20400598:	69878513          	addi	a0,a5,1688 # 20405698 <_exit+0x12a>
2040059c:	2c09                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:30 (discriminator 4)
    printf("Ke addr = %08x\n", Key);
2040059e:	800017b7          	lui	a5,0x80001
204005a2:	fa078593          	addi	a1,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdc10>
204005a6:	204057b7          	lui	a5,0x20405
204005aa:	6a878513          	addi	a0,a5,1704 # 204056a8 <_exit+0x13a>
204005ae:	2401                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:31 (discriminator 4)
    printf("Np addr = %08x\n", Nonce);
204005b0:	800017b7          	lui	a5,0x80001
204005b4:	fb078593          	addi	a1,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdc20>
204005b8:	204057b7          	lui	a5,0x20405
204005bc:	6b878513          	addi	a0,a5,1720 # 204056b8 <_exit+0x14a>
204005c0:	22fd                	jal	204007ae <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:33 (discriminator 4)
    unsigned start, end, HWcycles;
    int rd = 0;
204005c2:	fe042023          	sw	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:35 (discriminator 4)
    // RoCC
    start = rdcycle();
204005c6:	392d                	jal	20400200 <rdcycle>
204005c8:	87aa                	mv	a5,a0
204005ca:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:36 (discriminator 4)
    write_csr(mstatus, MSTATUS_XS); // Always initialize the CSR such that the accelerator is recognized
204005ce:	67e1                	lui	a5,0x18
204005d0:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:38 (discriminator 4)

    AEAD_ENC(asso_text, asso_len, plain_text, plain_len, cipher_text, Nonce, Key);
204005d4:	800017b7          	lui	a5,0x80001
204005d8:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdc10>
204005dc:	800017b7          	lui	a5,0x80001
204005e0:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdc20>
204005e4:	80001737          	lui	a4,0x80001
204005e8:	74070713          	addi	a4,a4,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
204005ec:	fec42683          	lw	a3,-20(s0)
204005f0:	80000637          	lui	a2,0x80000
204005f4:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd440>
204005f8:	fe842583          	lw	a1,-24(s0)
204005fc:	80000537          	lui	a0,0x80000
20400600:	00050513          	mv	a0,a0
20400604:	317d                	jal	204002b2 <AEAD_ENC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:40 (discriminator 4)

    end = rdcycle();
20400606:	3eed                	jal	20400200 <rdcycle>
20400608:	87aa                	mv	a5,a0
2040060a:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:41 (discriminator 4)
    HWcycles = end - start;
2040060e:	fd842703          	lw	a4,-40(s0)
20400612:	fdc42783          	lw	a5,-36(s0)
20400616:	40f707b3          	sub	a5,a4,a5
2040061a:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:43 (discriminator 4)
    //  printf("Total time = %d cycles\n",HWcycles);
    printC(cipher_text, plain_len_int, 1, 1);
2040061e:	4685                	li	a3,1
20400620:	4605                	li	a2,1
20400622:	fe442583          	lw	a1,-28(s0)
20400626:	800017b7          	lui	a5,0x80001
2040062a:	74078513          	addi	a0,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
2040062e:	3ec5                	jal	2040021e <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:44 (discriminator 4)
    printf("\nX\n");
20400630:	204057b7          	lui	a5,0x20405
20400634:	6c878513          	addi	a0,a5,1736 # 204056c8 <_exit+0x15a>
20400638:	2689                	jal	2040097a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:47 (discriminator 4)


    AEAD_ENC(asso_text, asso_len, plain_text, plain_len, cipher_text, Nonce, Key);
2040063a:	800017b7          	lui	a5,0x80001
2040063e:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdc10>
20400642:	800017b7          	lui	a5,0x80001
20400646:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdc20>
2040064a:	80001737          	lui	a4,0x80001
2040064e:	74070713          	addi	a4,a4,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
20400652:	fec42683          	lw	a3,-20(s0)
20400656:	80000637          	lui	a2,0x80000
2040065a:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd440>
2040065e:	fe842583          	lw	a1,-24(s0)
20400662:	80000537          	lui	a0,0x80000
20400666:	00050513          	mv	a0,a0
2040066a:	31a1                	jal	204002b2 <AEAD_ENC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:48 (discriminator 4)
    printC(cipher_text, plain_len_int, 1, 1);
2040066c:	4685                	li	a3,1
2040066e:	4605                	li	a2,1
20400670:	fe442583          	lw	a1,-28(s0)
20400674:	800017b7          	lui	a5,0x80001
20400678:	74078513          	addi	a0,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
2040067c:	364d                	jal	2040021e <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:49 (discriminator 4)
    printf("\nX\n");
2040067e:	204057b7          	lui	a5,0x20405
20400682:	6c878513          	addi	a0,a5,1736 # 204056c8 <_exit+0x15a>
20400686:	2cd5                	jal	2040097a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:50 (discriminator 4)
    plain_len = 1000;
20400688:	3e800793          	li	a5,1000
2040068c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:51 (discriminator 4)
    asso_len = 1000;
20400690:	3e800793          	li	a5,1000
20400694:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:52 (discriminator 4)
    plain_len_int = plain_len / 4;
20400698:	fec42783          	lw	a5,-20(s0)
2040069c:	8389                	srli	a5,a5,0x2
2040069e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:53 (discriminator 4)
    plain_len_int = (plain_len % 4 == 0) ? plain_len_int : plain_len_int + 2;
204006a2:	fec42783          	lw	a5,-20(s0)
204006a6:	8b8d                	andi	a5,a5,3
204006a8:	c789                	beqz	a5,204006b2 <main+0x18e>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:53 (discriminator 1)
204006aa:	fe442783          	lw	a5,-28(s0)
204006ae:	0789                	addi	a5,a5,2
204006b0:	a019                	j	204006b6 <main+0x192>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:53 (discriminator 2)
204006b2:	fe442783          	lw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:53 (discriminator 4)
204006b6:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:54 (discriminator 4)
    tag_addr = cipher_text + plain_len_int;
204006ba:	fe442783          	lw	a5,-28(s0)
204006be:	00279713          	slli	a4,a5,0x2
204006c2:	800017b7          	lui	a5,0x80001
204006c6:	74078793          	addi	a5,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
204006ca:	973e                	add	a4,a4,a5
204006cc:	800017b7          	lui	a5,0x80001
204006d0:	72e7a823          	sw	a4,1840(a5) # 80001730 <metal_segment_heap_target_end+0xffffe3a0>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:59 (discriminator 4)




    AEAD_ENC(asso_text, asso_len, plain_text, plain_len, cipher_text, Nonce, Key);
204006d4:	800017b7          	lui	a5,0x80001
204006d8:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdc10>
204006dc:	800017b7          	lui	a5,0x80001
204006e0:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdc20>
204006e4:	80001737          	lui	a4,0x80001
204006e8:	74070713          	addi	a4,a4,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
204006ec:	fec42683          	lw	a3,-20(s0)
204006f0:	80000637          	lui	a2,0x80000
204006f4:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd440>
204006f8:	fe842583          	lw	a1,-24(s0)
204006fc:	80000537          	lui	a0,0x80000
20400700:	00050513          	mv	a0,a0
20400704:	367d                	jal	204002b2 <AEAD_ENC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:60 (discriminator 4)
    printC(cipher_text, plain_len_int, 1, 0);
20400706:	4681                	li	a3,0
20400708:	4605                	li	a2,1
2040070a:	fe442583          	lw	a1,-28(s0)
2040070e:	800017b7          	lui	a5,0x80001
20400712:	74078513          	addi	a0,a5,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
20400716:	3621                	jal	2040021e <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:61 (discriminator 4)
    printf("\nX\n");
20400718:	204057b7          	lui	a5,0x20405
2040071c:	6c878513          	addi	a0,a5,1736 # 204056c8 <_exit+0x15a>
20400720:	2ca9                	jal	2040097a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:62 (discriminator 4)
    printf("Tag \n");
20400722:	204057b7          	lui	a5,0x20405
20400726:	6cc78513          	addi	a0,a5,1740 # 204056cc <_exit+0x15e>
2040072a:	2c81                	jal	2040097a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:63 (discriminator 4)
    printC(tag_addr, 4, 0, 0);
2040072c:	800017b7          	lui	a5,0x80001
20400730:	7307a783          	lw	a5,1840(a5) # 80001730 <metal_segment_heap_target_end+0xffffe3a0>
20400734:	4681                	li	a3,0
20400736:	4601                	li	a2,0
20400738:	4591                	li	a1,4
2040073a:	853e                	mv	a0,a5
2040073c:	34cd                	jal	2040021e <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:65 (discriminator 4)

    unsigned rd2 = 0;
2040073e:	fc042823          	sw	zero,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:66 (discriminator 4)
    rd2 = AEAD_DEC(asso_text, asso_len, cipher_text, plain_len, dec_text, Nonce, Key, tag_addr);
20400742:	800017b7          	lui	a5,0x80001
20400746:	7307a783          	lw	a5,1840(a5) # 80001730 <metal_segment_heap_target_end+0xffffe3a0>
2040074a:	88be                	mv	a7,a5
2040074c:	800017b7          	lui	a5,0x80001
20400750:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdc10>
20400754:	800017b7          	lui	a5,0x80001
20400758:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdc20>
2040075c:	80002737          	lui	a4,0x80002
20400760:	f2070713          	addi	a4,a4,-224 # 80001f20 <metal_segment_heap_target_end+0xffffeb90>
20400764:	fec42683          	lw	a3,-20(s0)
20400768:	80001637          	lui	a2,0x80001
2040076c:	74060613          	addi	a2,a2,1856 # 80001740 <metal_segment_heap_target_end+0xffffe3b0>
20400770:	fe842583          	lw	a1,-24(s0)
20400774:	80000537          	lui	a0,0x80000
20400778:	00050513          	mv	a0,a0
2040077c:	318d                	jal	204003de <AEAD_DEC>
2040077e:	fca42823          	sw	a0,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:67 (discriminator 4)
    printC(dec_text, plain_len_int, 0, 0);
20400782:	4681                	li	a3,0
20400784:	4601                	li	a2,0
20400786:	fe442583          	lw	a1,-28(s0)
2040078a:	800027b7          	lui	a5,0x80002
2040078e:	f2078513          	addi	a0,a5,-224 # 80001f20 <metal_segment_heap_target_end+0xffffeb90>
20400792:	3471                	jal	2040021e <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:68 (discriminator 4)
    printf("\n%08x\n", rd2);
20400794:	fd042583          	lw	a1,-48(s0)
20400798:	204057b7          	lui	a5,0x20405
2040079c:	6d478513          	addi	a0,a5,1748 # 204056d4 <_exit+0x166>
204007a0:	2039                	jal	204007ae <iprintf>
204007a2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:70 (discriminator 4)

204007a4:	853e                	mv	a0,a5
204007a6:	50b2                	lw	ra,44(sp)
204007a8:	5422                	lw	s0,40(sp)
204007aa:	6145                	addi	sp,sp,48
204007ac:	8082                	ret

204007ae <iprintf>:
printf():
204007ae:	7139                	addi	sp,sp,-64
204007b0:	da3e                	sw	a5,52(sp)
204007b2:	d22e                	sw	a1,36(sp)
204007b4:	d432                	sw	a2,40(sp)
204007b6:	d636                	sw	a3,44(sp)
204007b8:	d83a                	sw	a4,48(sp)
204007ba:	dc42                	sw	a6,56(sp)
204007bc:	de46                	sw	a7,60(sp)
204007be:	5fc01797          	auipc	a5,0x5fc01
204007c2:	f4a78793          	addi	a5,a5,-182 # 80001708 <_impure_ptr>
204007c6:	cc22                	sw	s0,24(sp)
204007c8:	4380                	lw	s0,0(a5)
204007ca:	ca26                	sw	s1,20(sp)
204007cc:	ce06                	sw	ra,28(sp)
204007ce:	84aa                	mv	s1,a0
204007d0:	c409                	beqz	s0,204007da <iprintf+0x2c>
204007d2:	4c1c                	lw	a5,24(s0)
204007d4:	e399                	bnez	a5,204007da <iprintf+0x2c>
204007d6:	8522                	mv	a0,s0
204007d8:	23d5                	jal	20400dbc <__sinit>
204007da:	440c                	lw	a1,8(s0)
204007dc:	1054                	addi	a3,sp,36
204007de:	8626                	mv	a2,s1
204007e0:	8522                	mv	a0,s0
204007e2:	c636                	sw	a3,12(sp)
204007e4:	2df000ef          	jal	ra,204012c2 <_vfiprintf_r>
204007e8:	40f2                	lw	ra,28(sp)
204007ea:	4462                	lw	s0,24(sp)
204007ec:	44d2                	lw	s1,20(sp)
204007ee:	6121                	addi	sp,sp,64
204007f0:	8082                	ret

204007f2 <putchar>:
putchar():
204007f2:	1101                	addi	sp,sp,-32
204007f4:	5fc01797          	auipc	a5,0x5fc01
204007f8:	f1478793          	addi	a5,a5,-236 # 80001708 <_impure_ptr>
204007fc:	cc22                	sw	s0,24(sp)
204007fe:	4380                	lw	s0,0(a5)
20400800:	ce06                	sw	ra,28(sp)
20400802:	85aa                	mv	a1,a0
20400804:	c419                	beqz	s0,20400812 <putchar+0x20>
20400806:	4c1c                	lw	a5,24(s0)
20400808:	e789                	bnez	a5,20400812 <putchar+0x20>
2040080a:	c62a                	sw	a0,12(sp)
2040080c:	8522                	mv	a0,s0
2040080e:	237d                	jal	20400dbc <__sinit>
20400810:	45b2                	lw	a1,12(sp)
20400812:	4410                	lw	a2,8(s0)
20400814:	8522                	mv	a0,s0
20400816:	4462                	lw	s0,24(sp)
20400818:	40f2                	lw	ra,28(sp)
2040081a:	6105                	addi	sp,sp,32
2040081c:	a009                	j	2040081e <_putc_r>

2040081e <_putc_r>:
_putc_r():
2040081e:	1101                	addi	sp,sp,-32
20400820:	cc22                	sw	s0,24(sp)
20400822:	ce06                	sw	ra,28(sp)
20400824:	842a                	mv	s0,a0
20400826:	c901                	beqz	a0,20400836 <_putc_r+0x18>
20400828:	4d1c                	lw	a5,24(a0)
2040082a:	e791                	bnez	a5,20400836 <_putc_r+0x18>
2040082c:	c632                	sw	a2,12(sp)
2040082e:	c42e                	sw	a1,8(sp)
20400830:	2371                	jal	20400dbc <__sinit>
20400832:	4632                	lw	a2,12(sp)
20400834:	45a2                	lw	a1,8(sp)
20400836:	00005797          	auipc	a5,0x5
2040083a:	ec678793          	addi	a5,a5,-314 # 204056fc <__sf_fake_stdin>
2040083e:	02f61563          	bne	a2,a5,20400868 <_putc_r+0x4a>
20400842:	4050                	lw	a2,4(s0)
20400844:	461c                	lw	a5,8(a2)
20400846:	17fd                	addi	a5,a5,-1
20400848:	c61c                	sw	a5,8(a2)
2040084a:	0207df63          	bgez	a5,20400888 <_putc_r+0x6a>
2040084e:	4e18                	lw	a4,24(a2)
20400850:	00e7c763          	blt	a5,a4,2040085e <_putc_r+0x40>
20400854:	0ff5f793          	andi	a5,a1,255
20400858:	4729                	li	a4,10
2040085a:	02e79763          	bne	a5,a4,20400888 <_putc_r+0x6a>
2040085e:	8522                	mv	a0,s0
20400860:	4462                	lw	s0,24(sp)
20400862:	40f2                	lw	ra,28(sp)
20400864:	6105                	addi	sp,sp,32
20400866:	a20d                	j	20400988 <__swbuf_r>
20400868:	00005797          	auipc	a5,0x5
2040086c:	eb478793          	addi	a5,a5,-332 # 2040571c <__sf_fake_stdout>
20400870:	00f61463          	bne	a2,a5,20400878 <_putc_r+0x5a>
20400874:	4410                	lw	a2,8(s0)
20400876:	b7f9                	j	20400844 <_putc_r+0x26>
20400878:	00005797          	auipc	a5,0x5
2040087c:	e6478793          	addi	a5,a5,-412 # 204056dc <__sf_fake_stderr>
20400880:	fcf612e3          	bne	a2,a5,20400844 <_putc_r+0x26>
20400884:	4450                	lw	a2,12(s0)
20400886:	bf7d                	j	20400844 <_putc_r+0x26>
20400888:	421c                	lw	a5,0(a2)
2040088a:	0ff5f513          	andi	a0,a1,255
2040088e:	00178713          	addi	a4,a5,1
20400892:	c218                	sw	a4,0(a2)
20400894:	00b78023          	sb	a1,0(a5)
20400898:	40f2                	lw	ra,28(sp)
2040089a:	4462                	lw	s0,24(sp)
2040089c:	6105                	addi	sp,sp,32
2040089e:	8082                	ret

204008a0 <_puts_r>:
_puts_r():
204008a0:	1101                	addi	sp,sp,-32
204008a2:	ca26                	sw	s1,20(sp)
204008a4:	c84a                	sw	s2,16(sp)
204008a6:	ce06                	sw	ra,28(sp)
204008a8:	cc22                	sw	s0,24(sp)
204008aa:	c64e                	sw	s3,12(sp)
204008ac:	c452                	sw	s4,8(sp)
204008ae:	84aa                	mv	s1,a0
204008b0:	892e                	mv	s2,a1
204008b2:	c501                	beqz	a0,204008ba <_puts_r+0x1a>
204008b4:	4d1c                	lw	a5,24(a0)
204008b6:	e391                	bnez	a5,204008ba <_puts_r+0x1a>
204008b8:	2311                	jal	20400dbc <__sinit>
204008ba:	4c9c                	lw	a5,24(s1)
204008bc:	4480                	lw	s0,8(s1)
204008be:	e399                	bnez	a5,204008c4 <_puts_r+0x24>
204008c0:	8526                	mv	a0,s1
204008c2:	29ed                	jal	20400dbc <__sinit>
204008c4:	00005797          	auipc	a5,0x5
204008c8:	e3878793          	addi	a5,a5,-456 # 204056fc <__sf_fake_stdin>
204008cc:	02f41c63          	bne	s0,a5,20400904 <_puts_r+0x64>
204008d0:	40c0                	lw	s0,4(s1)
204008d2:	00c45783          	lhu	a5,12(s0)
204008d6:	8ba1                	andi	a5,a5,8
204008d8:	c7b1                	beqz	a5,20400924 <_puts_r+0x84>
204008da:	481c                	lw	a5,16(s0)
204008dc:	c7a1                	beqz	a5,20400924 <_puts_r+0x84>
204008de:	59fd                	li	s3,-1
204008e0:	4a29                	li	s4,10
204008e2:	441c                	lw	a5,8(s0)
204008e4:	00094583          	lbu	a1,0(s2)
204008e8:	17fd                	addi	a5,a5,-1
204008ea:	e9b1                	bnez	a1,2040093e <_puts_r+0x9e>
204008ec:	c41c                	sw	a5,8(s0)
204008ee:	0607de63          	bgez	a5,2040096a <_puts_r+0xca>
204008f2:	8622                	mv	a2,s0
204008f4:	45a9                	li	a1,10
204008f6:	8526                	mv	a0,s1
204008f8:	2841                	jal	20400988 <__swbuf_r>
204008fa:	57fd                	li	a5,-1
204008fc:	02f50863          	beq	a0,a5,2040092c <_puts_r+0x8c>
20400900:	4529                	li	a0,10
20400902:	a035                	j	2040092e <_puts_r+0x8e>
20400904:	00005797          	auipc	a5,0x5
20400908:	e1878793          	addi	a5,a5,-488 # 2040571c <__sf_fake_stdout>
2040090c:	00f41463          	bne	s0,a5,20400914 <_puts_r+0x74>
20400910:	4480                	lw	s0,8(s1)
20400912:	b7c1                	j	204008d2 <_puts_r+0x32>
20400914:	00005797          	auipc	a5,0x5
20400918:	dc878793          	addi	a5,a5,-568 # 204056dc <__sf_fake_stderr>
2040091c:	faf41be3          	bne	s0,a5,204008d2 <_puts_r+0x32>
20400920:	44c0                	lw	s0,12(s1)
20400922:	bf45                	j	204008d2 <_puts_r+0x32>
20400924:	85a2                	mv	a1,s0
20400926:	8526                	mv	a0,s1
20400928:	2205                	jal	20400a48 <__swsetup_r>
2040092a:	d955                	beqz	a0,204008de <_puts_r+0x3e>
2040092c:	557d                	li	a0,-1
2040092e:	40f2                	lw	ra,28(sp)
20400930:	4462                	lw	s0,24(sp)
20400932:	44d2                	lw	s1,20(sp)
20400934:	4942                	lw	s2,16(sp)
20400936:	49b2                	lw	s3,12(sp)
20400938:	4a22                	lw	s4,8(sp)
2040093a:	6105                	addi	sp,sp,32
2040093c:	8082                	ret
2040093e:	c41c                	sw	a5,8(s0)
20400940:	0905                	addi	s2,s2,1
20400942:	0007d763          	bgez	a5,20400950 <_puts_r+0xb0>
20400946:	4c18                	lw	a4,24(s0)
20400948:	00e7cb63          	blt	a5,a4,2040095e <_puts_r+0xbe>
2040094c:	01458963          	beq	a1,s4,2040095e <_puts_r+0xbe>
20400950:	401c                	lw	a5,0(s0)
20400952:	00178713          	addi	a4,a5,1
20400956:	c018                	sw	a4,0(s0)
20400958:	00b78023          	sb	a1,0(a5)
2040095c:	b759                	j	204008e2 <_puts_r+0x42>
2040095e:	8622                	mv	a2,s0
20400960:	8526                	mv	a0,s1
20400962:	201d                	jal	20400988 <__swbuf_r>
20400964:	f7351fe3          	bne	a0,s3,204008e2 <_puts_r+0x42>
20400968:	b7d1                	j	2040092c <_puts_r+0x8c>
2040096a:	401c                	lw	a5,0(s0)
2040096c:	00178713          	addi	a4,a5,1
20400970:	c018                	sw	a4,0(s0)
20400972:	4729                	li	a4,10
20400974:	00e78023          	sb	a4,0(a5)
20400978:	b761                	j	20400900 <_puts_r+0x60>

2040097a <puts>:
puts():
2040097a:	5fc01797          	auipc	a5,0x5fc01
2040097e:	d8e78793          	addi	a5,a5,-626 # 80001708 <_impure_ptr>
20400982:	85aa                	mv	a1,a0
20400984:	4388                	lw	a0,0(a5)
20400986:	bf29                	j	204008a0 <_puts_r>

20400988 <__swbuf_r>:
__swbuf_r():
20400988:	1101                	addi	sp,sp,-32
2040098a:	cc22                	sw	s0,24(sp)
2040098c:	ca26                	sw	s1,20(sp)
2040098e:	c84a                	sw	s2,16(sp)
20400990:	ce06                	sw	ra,28(sp)
20400992:	c64e                	sw	s3,12(sp)
20400994:	84aa                	mv	s1,a0
20400996:	892e                	mv	s2,a1
20400998:	8432                	mv	s0,a2
2040099a:	c501                	beqz	a0,204009a2 <__swbuf_r+0x1a>
2040099c:	4d1c                	lw	a5,24(a0)
2040099e:	e391                	bnez	a5,204009a2 <__swbuf_r+0x1a>
204009a0:	2931                	jal	20400dbc <__sinit>
204009a2:	00005797          	auipc	a5,0x5
204009a6:	d5a78793          	addi	a5,a5,-678 # 204056fc <__sf_fake_stdin>
204009aa:	06f41963          	bne	s0,a5,20400a1c <__swbuf_r+0x94>
204009ae:	40c0                	lw	s0,4(s1)
204009b0:	4c1c                	lw	a5,24(s0)
204009b2:	c41c                	sw	a5,8(s0)
204009b4:	00c45783          	lhu	a5,12(s0)
204009b8:	8ba1                	andi	a5,a5,8
204009ba:	c3c9                	beqz	a5,20400a3c <__swbuf_r+0xb4>
204009bc:	481c                	lw	a5,16(s0)
204009be:	cfbd                	beqz	a5,20400a3c <__swbuf_r+0xb4>
204009c0:	481c                	lw	a5,16(s0)
204009c2:	4008                	lw	a0,0(s0)
204009c4:	0ff97993          	andi	s3,s2,255
204009c8:	0ff97913          	andi	s2,s2,255
204009cc:	8d1d                	sub	a0,a0,a5
204009ce:	485c                	lw	a5,20(s0)
204009d0:	00f54663          	blt	a0,a5,204009dc <__swbuf_r+0x54>
204009d4:	85a2                	mv	a1,s0
204009d6:	8526                	mv	a0,s1
204009d8:	24e9                	jal	20400ca2 <_fflush_r>
204009da:	e52d                	bnez	a0,20400a44 <__swbuf_r+0xbc>
204009dc:	441c                	lw	a5,8(s0)
204009de:	0505                	addi	a0,a0,1
204009e0:	17fd                	addi	a5,a5,-1
204009e2:	c41c                	sw	a5,8(s0)
204009e4:	401c                	lw	a5,0(s0)
204009e6:	00178713          	addi	a4,a5,1
204009ea:	c018                	sw	a4,0(s0)
204009ec:	01378023          	sb	s3,0(a5)
204009f0:	485c                	lw	a5,20(s0)
204009f2:	00a78963          	beq	a5,a0,20400a04 <__swbuf_r+0x7c>
204009f6:	00c45783          	lhu	a5,12(s0)
204009fa:	8b85                	andi	a5,a5,1
204009fc:	cb81                	beqz	a5,20400a0c <__swbuf_r+0x84>
204009fe:	47a9                	li	a5,10
20400a00:	00f91663          	bne	s2,a5,20400a0c <__swbuf_r+0x84>
20400a04:	85a2                	mv	a1,s0
20400a06:	8526                	mv	a0,s1
20400a08:	2c69                	jal	20400ca2 <_fflush_r>
20400a0a:	ed0d                	bnez	a0,20400a44 <__swbuf_r+0xbc>
20400a0c:	40f2                	lw	ra,28(sp)
20400a0e:	4462                	lw	s0,24(sp)
20400a10:	854a                	mv	a0,s2
20400a12:	44d2                	lw	s1,20(sp)
20400a14:	4942                	lw	s2,16(sp)
20400a16:	49b2                	lw	s3,12(sp)
20400a18:	6105                	addi	sp,sp,32
20400a1a:	8082                	ret
20400a1c:	00005797          	auipc	a5,0x5
20400a20:	d0078793          	addi	a5,a5,-768 # 2040571c <__sf_fake_stdout>
20400a24:	00f41463          	bne	s0,a5,20400a2c <__swbuf_r+0xa4>
20400a28:	4480                	lw	s0,8(s1)
20400a2a:	b759                	j	204009b0 <__swbuf_r+0x28>
20400a2c:	00005797          	auipc	a5,0x5
20400a30:	cb078793          	addi	a5,a5,-848 # 204056dc <__sf_fake_stderr>
20400a34:	f6f41ee3          	bne	s0,a5,204009b0 <__swbuf_r+0x28>
20400a38:	44c0                	lw	s0,12(s1)
20400a3a:	bf9d                	j	204009b0 <__swbuf_r+0x28>
20400a3c:	85a2                	mv	a1,s0
20400a3e:	8526                	mv	a0,s1
20400a40:	2021                	jal	20400a48 <__swsetup_r>
20400a42:	dd3d                	beqz	a0,204009c0 <__swbuf_r+0x38>
20400a44:	597d                	li	s2,-1
20400a46:	b7d9                	j	20400a0c <__swbuf_r+0x84>

20400a48 <__swsetup_r>:
__swsetup_r():
20400a48:	1141                	addi	sp,sp,-16
20400a4a:	5fc01797          	auipc	a5,0x5fc01
20400a4e:	cbe78793          	addi	a5,a5,-834 # 80001708 <_impure_ptr>
20400a52:	c226                	sw	s1,4(sp)
20400a54:	4384                	lw	s1,0(a5)
20400a56:	c422                	sw	s0,8(sp)
20400a58:	c04a                	sw	s2,0(sp)
20400a5a:	c606                	sw	ra,12(sp)
20400a5c:	892a                	mv	s2,a0
20400a5e:	842e                	mv	s0,a1
20400a60:	c489                	beqz	s1,20400a6a <__swsetup_r+0x22>
20400a62:	4c9c                	lw	a5,24(s1)
20400a64:	e399                	bnez	a5,20400a6a <__swsetup_r+0x22>
20400a66:	8526                	mv	a0,s1
20400a68:	2e91                	jal	20400dbc <__sinit>
20400a6a:	00005797          	auipc	a5,0x5
20400a6e:	c9278793          	addi	a5,a5,-878 # 204056fc <__sf_fake_stdin>
20400a72:	02f41c63          	bne	s0,a5,20400aaa <__swsetup_r+0x62>
20400a76:	40c0                	lw	s0,4(s1)
20400a78:	00c41703          	lh	a4,12(s0)
20400a7c:	01071793          	slli	a5,a4,0x10
20400a80:	83c1                	srli	a5,a5,0x10
20400a82:	0087f693          	andi	a3,a5,8
20400a86:	eeb5                	bnez	a3,20400b02 <__swsetup_r+0xba>
20400a88:	0107f693          	andi	a3,a5,16
20400a8c:	ee9d                	bnez	a3,20400aca <__swsetup_r+0x82>
20400a8e:	47a5                	li	a5,9
20400a90:	00f92023          	sw	a5,0(s2)
20400a94:	04076713          	ori	a4,a4,64
20400a98:	00e41623          	sh	a4,12(s0)
20400a9c:	557d                	li	a0,-1
20400a9e:	40b2                	lw	ra,12(sp)
20400aa0:	4422                	lw	s0,8(sp)
20400aa2:	4492                	lw	s1,4(sp)
20400aa4:	4902                	lw	s2,0(sp)
20400aa6:	0141                	addi	sp,sp,16
20400aa8:	8082                	ret
20400aaa:	00005797          	auipc	a5,0x5
20400aae:	c7278793          	addi	a5,a5,-910 # 2040571c <__sf_fake_stdout>
20400ab2:	00f41463          	bne	s0,a5,20400aba <__swsetup_r+0x72>
20400ab6:	4480                	lw	s0,8(s1)
20400ab8:	b7c1                	j	20400a78 <__swsetup_r+0x30>
20400aba:	00005797          	auipc	a5,0x5
20400abe:	c2278793          	addi	a5,a5,-990 # 204056dc <__sf_fake_stderr>
20400ac2:	faf41be3          	bne	s0,a5,20400a78 <__swsetup_r+0x30>
20400ac6:	44c0                	lw	s0,12(s1)
20400ac8:	bf45                	j	20400a78 <__swsetup_r+0x30>
20400aca:	8b91                	andi	a5,a5,4
20400acc:	c78d                	beqz	a5,20400af6 <__swsetup_r+0xae>
20400ace:	584c                	lw	a1,52(s0)
20400ad0:	c989                	beqz	a1,20400ae2 <__swsetup_r+0x9a>
20400ad2:	04440793          	addi	a5,s0,68
20400ad6:	00f58463          	beq	a1,a5,20400ade <__swsetup_r+0x96>
20400ada:	854a                	mv	a0,s2
20400adc:	2bc5                	jal	204010cc <_free_r>
20400ade:	02042a23          	sw	zero,52(s0)
20400ae2:	00c45783          	lhu	a5,12(s0)
20400ae6:	00042223          	sw	zero,4(s0)
20400aea:	fdb7f793          	andi	a5,a5,-37
20400aee:	00f41623          	sh	a5,12(s0)
20400af2:	481c                	lw	a5,16(s0)
20400af4:	c01c                	sw	a5,0(s0)
20400af6:	00c45783          	lhu	a5,12(s0)
20400afa:	0087e793          	ori	a5,a5,8
20400afe:	00f41623          	sh	a5,12(s0)
20400b02:	481c                	lw	a5,16(s0)
20400b04:	ef81                	bnez	a5,20400b1c <__swsetup_r+0xd4>
20400b06:	00c45783          	lhu	a5,12(s0)
20400b0a:	20000713          	li	a4,512
20400b0e:	2807f793          	andi	a5,a5,640
20400b12:	00e78563          	beq	a5,a4,20400b1c <__swsetup_r+0xd4>
20400b16:	85a2                	mv	a1,s0
20400b18:	854a                	mv	a0,s2
20400b1a:	21bd                	jal	20400f88 <__smakebuf_r>
20400b1c:	00c45783          	lhu	a5,12(s0)
20400b20:	0017f713          	andi	a4,a5,1
20400b24:	c705                	beqz	a4,20400b4c <__swsetup_r+0x104>
20400b26:	485c                	lw	a5,20(s0)
20400b28:	00042423          	sw	zero,8(s0)
20400b2c:	40f007b3          	neg	a5,a5
20400b30:	cc1c                	sw	a5,24(s0)
20400b32:	481c                	lw	a5,16(s0)
20400b34:	4501                	li	a0,0
20400b36:	f7a5                	bnez	a5,20400a9e <__swsetup_r+0x56>
20400b38:	00c41783          	lh	a5,12(s0)
20400b3c:	0807f713          	andi	a4,a5,128
20400b40:	df39                	beqz	a4,20400a9e <__swsetup_r+0x56>
20400b42:	0407e793          	ori	a5,a5,64
20400b46:	00f41623          	sh	a5,12(s0)
20400b4a:	bf89                	j	20400a9c <__swsetup_r+0x54>
20400b4c:	8b89                	andi	a5,a5,2
20400b4e:	4701                	li	a4,0
20400b50:	e391                	bnez	a5,20400b54 <__swsetup_r+0x10c>
20400b52:	4858                	lw	a4,20(s0)
20400b54:	c418                	sw	a4,8(s0)
20400b56:	bff1                	j	20400b32 <__swsetup_r+0xea>

20400b58 <__sflush_r>:
__sflush_r():
20400b58:	00c5d783          	lhu	a5,12(a1)
20400b5c:	1101                	addi	sp,sp,-32
20400b5e:	cc22                	sw	s0,24(sp)
20400b60:	ca26                	sw	s1,20(sp)
20400b62:	ce06                	sw	ra,28(sp)
20400b64:	c84a                	sw	s2,16(sp)
20400b66:	c64e                	sw	s3,12(sp)
20400b68:	0087f713          	andi	a4,a5,8
20400b6c:	84aa                	mv	s1,a0
20400b6e:	842e                	mv	s0,a1
20400b70:	e765                	bnez	a4,20400c58 <__sflush_r+0x100>
20400b72:	41d8                	lw	a4,4(a1)
20400b74:	00e04763          	bgtz	a4,20400b82 <__sflush_r+0x2a>
20400b78:	41b8                	lw	a4,64(a1)
20400b7a:	00e04463          	bgtz	a4,20400b82 <__sflush_r+0x2a>
20400b7e:	4501                	li	a0,0
20400b80:	a0c1                	j	20400c40 <__sflush_r+0xe8>
20400b82:	5458                	lw	a4,44(s0)
20400b84:	df6d                	beqz	a4,20400b7e <__sflush_r+0x26>
20400b86:	0004a903          	lw	s2,0(s1)
20400b8a:	01379693          	slli	a3,a5,0x13
20400b8e:	0004a023          	sw	zero,0(s1)
20400b92:	0606de63          	bgez	a3,20400c0e <__sflush_r+0xb6>
20400b96:	4868                	lw	a0,84(s0)
20400b98:	00c45783          	lhu	a5,12(s0)
20400b9c:	8b91                	andi	a5,a5,4
20400b9e:	c799                	beqz	a5,20400bac <__sflush_r+0x54>
20400ba0:	405c                	lw	a5,4(s0)
20400ba2:	8d1d                	sub	a0,a0,a5
20400ba4:	585c                	lw	a5,52(s0)
20400ba6:	c399                	beqz	a5,20400bac <__sflush_r+0x54>
20400ba8:	403c                	lw	a5,64(s0)
20400baa:	8d1d                	sub	a0,a0,a5
20400bac:	545c                	lw	a5,44(s0)
20400bae:	500c                	lw	a1,32(s0)
20400bb0:	862a                	mv	a2,a0
20400bb2:	4681                	li	a3,0
20400bb4:	8526                	mv	a0,s1
20400bb6:	9782                	jalr	a5
20400bb8:	57fd                	li	a5,-1
20400bba:	00c45703          	lhu	a4,12(s0)
20400bbe:	00f51d63          	bne	a0,a5,20400bd8 <__sflush_r+0x80>
20400bc2:	4094                	lw	a3,0(s1)
20400bc4:	47f5                	li	a5,29
20400bc6:	08d7e463          	bltu	a5,a3,20400c4e <__sflush_r+0xf6>
20400bca:	204007b7          	lui	a5,0x20400
20400bce:	0785                	addi	a5,a5,1
20400bd0:	00d7d7b3          	srl	a5,a5,a3
20400bd4:	8b85                	andi	a5,a5,1
20400bd6:	cfa5                	beqz	a5,20400c4e <__sflush_r+0xf6>
20400bd8:	481c                	lw	a5,16(s0)
20400bda:	00042223          	sw	zero,4(s0)
20400bde:	c01c                	sw	a5,0(s0)
20400be0:	01371793          	slli	a5,a4,0x13
20400be4:	0007d863          	bgez	a5,20400bf4 <__sflush_r+0x9c>
20400be8:	57fd                	li	a5,-1
20400bea:	00f51463          	bne	a0,a5,20400bf2 <__sflush_r+0x9a>
20400bee:	409c                	lw	a5,0(s1)
20400bf0:	e391                	bnez	a5,20400bf4 <__sflush_r+0x9c>
20400bf2:	c868                	sw	a0,84(s0)
20400bf4:	584c                	lw	a1,52(s0)
20400bf6:	0124a023          	sw	s2,0(s1)
20400bfa:	d1d1                	beqz	a1,20400b7e <__sflush_r+0x26>
20400bfc:	04440793          	addi	a5,s0,68
20400c00:	00f58463          	beq	a1,a5,20400c08 <__sflush_r+0xb0>
20400c04:	8526                	mv	a0,s1
20400c06:	21d9                	jal	204010cc <_free_r>
20400c08:	02042a23          	sw	zero,52(s0)
20400c0c:	bf8d                	j	20400b7e <__sflush_r+0x26>
20400c0e:	500c                	lw	a1,32(s0)
20400c10:	4685                	li	a3,1
20400c12:	4601                	li	a2,0
20400c14:	8526                	mv	a0,s1
20400c16:	9702                	jalr	a4
20400c18:	57fd                	li	a5,-1
20400c1a:	f6f51fe3          	bne	a0,a5,20400b98 <__sflush_r+0x40>
20400c1e:	409c                	lw	a5,0(s1)
20400c20:	dfa5                	beqz	a5,20400b98 <__sflush_r+0x40>
20400c22:	4775                	li	a4,29
20400c24:	00e78563          	beq	a5,a4,20400c2e <__sflush_r+0xd6>
20400c28:	4759                	li	a4,22
20400c2a:	00e79563          	bne	a5,a4,20400c34 <__sflush_r+0xdc>
20400c2e:	0124a023          	sw	s2,0(s1)
20400c32:	b7b1                	j	20400b7e <__sflush_r+0x26>
20400c34:	00c45783          	lhu	a5,12(s0)
20400c38:	0407e793          	ori	a5,a5,64
20400c3c:	00f41623          	sh	a5,12(s0)
20400c40:	40f2                	lw	ra,28(sp)
20400c42:	4462                	lw	s0,24(sp)
20400c44:	44d2                	lw	s1,20(sp)
20400c46:	4942                	lw	s2,16(sp)
20400c48:	49b2                	lw	s3,12(sp)
20400c4a:	6105                	addi	sp,sp,32
20400c4c:	8082                	ret
20400c4e:	04076713          	ori	a4,a4,64
20400c52:	00e41623          	sh	a4,12(s0)
20400c56:	b7ed                	j	20400c40 <__sflush_r+0xe8>
20400c58:	0105a983          	lw	s3,16(a1)
20400c5c:	f20981e3          	beqz	s3,20400b7e <__sflush_r+0x26>
20400c60:	0005a903          	lw	s2,0(a1)
20400c64:	8b8d                	andi	a5,a5,3
20400c66:	0135a023          	sw	s3,0(a1)
20400c6a:	41390933          	sub	s2,s2,s3
20400c6e:	4701                	li	a4,0
20400c70:	e391                	bnez	a5,20400c74 <__sflush_r+0x11c>
20400c72:	49d8                	lw	a4,20(a1)
20400c74:	c418                	sw	a4,8(s0)
20400c76:	f12054e3          	blez	s2,20400b7e <__sflush_r+0x26>
20400c7a:	541c                	lw	a5,40(s0)
20400c7c:	500c                	lw	a1,32(s0)
20400c7e:	86ca                	mv	a3,s2
20400c80:	864e                	mv	a2,s3
20400c82:	8526                	mv	a0,s1
20400c84:	9782                	jalr	a5
20400c86:	00a04a63          	bgtz	a0,20400c9a <__sflush_r+0x142>
20400c8a:	00c45783          	lhu	a5,12(s0)
20400c8e:	557d                	li	a0,-1
20400c90:	0407e793          	ori	a5,a5,64
20400c94:	00f41623          	sh	a5,12(s0)
20400c98:	b765                	j	20400c40 <__sflush_r+0xe8>
20400c9a:	99aa                	add	s3,s3,a0
20400c9c:	40a90933          	sub	s2,s2,a0
20400ca0:	bfd9                	j	20400c76 <__sflush_r+0x11e>

20400ca2 <_fflush_r>:
_fflush_r():
20400ca2:	499c                	lw	a5,16(a1)
20400ca4:	cfb9                	beqz	a5,20400d02 <_fflush_r+0x60>
20400ca6:	1101                	addi	sp,sp,-32
20400ca8:	cc22                	sw	s0,24(sp)
20400caa:	ce06                	sw	ra,28(sp)
20400cac:	842a                	mv	s0,a0
20400cae:	c511                	beqz	a0,20400cba <_fflush_r+0x18>
20400cb0:	4d1c                	lw	a5,24(a0)
20400cb2:	e781                	bnez	a5,20400cba <_fflush_r+0x18>
20400cb4:	c62e                	sw	a1,12(sp)
20400cb6:	2219                	jal	20400dbc <__sinit>
20400cb8:	45b2                	lw	a1,12(sp)
20400cba:	00005797          	auipc	a5,0x5
20400cbe:	a4278793          	addi	a5,a5,-1470 # 204056fc <__sf_fake_stdin>
20400cc2:	00f59b63          	bne	a1,a5,20400cd8 <_fflush_r+0x36>
20400cc6:	404c                	lw	a1,4(s0)
20400cc8:	00c59783          	lh	a5,12(a1)
20400ccc:	c795                	beqz	a5,20400cf8 <_fflush_r+0x56>
20400cce:	8522                	mv	a0,s0
20400cd0:	4462                	lw	s0,24(sp)
20400cd2:	40f2                	lw	ra,28(sp)
20400cd4:	6105                	addi	sp,sp,32
20400cd6:	b549                	j	20400b58 <__sflush_r>
20400cd8:	00005797          	auipc	a5,0x5
20400cdc:	a4478793          	addi	a5,a5,-1468 # 2040571c <__sf_fake_stdout>
20400ce0:	00f59463          	bne	a1,a5,20400ce8 <_fflush_r+0x46>
20400ce4:	440c                	lw	a1,8(s0)
20400ce6:	b7cd                	j	20400cc8 <_fflush_r+0x26>
20400ce8:	00005797          	auipc	a5,0x5
20400cec:	9f478793          	addi	a5,a5,-1548 # 204056dc <__sf_fake_stderr>
20400cf0:	fcf59ce3          	bne	a1,a5,20400cc8 <_fflush_r+0x26>
20400cf4:	444c                	lw	a1,12(s0)
20400cf6:	bfc9                	j	20400cc8 <_fflush_r+0x26>
20400cf8:	40f2                	lw	ra,28(sp)
20400cfa:	4462                	lw	s0,24(sp)
20400cfc:	4501                	li	a0,0
20400cfe:	6105                	addi	sp,sp,32
20400d00:	8082                	ret
20400d02:	4501                	li	a0,0
20400d04:	8082                	ret

20400d06 <std>:
std():
20400d06:	1141                	addi	sp,sp,-16
20400d08:	c422                	sw	s0,8(sp)
20400d0a:	c606                	sw	ra,12(sp)
20400d0c:	842a                	mv	s0,a0
20400d0e:	00b51623          	sh	a1,12(a0) # 8000000c <metal_segment_heap_target_end+0xffffcc7c>
20400d12:	00c51723          	sh	a2,14(a0)
20400d16:	00052023          	sw	zero,0(a0)
20400d1a:	00052223          	sw	zero,4(a0)
20400d1e:	00052423          	sw	zero,8(a0)
20400d22:	06052223          	sw	zero,100(a0)
20400d26:	00052823          	sw	zero,16(a0)
20400d2a:	00052a23          	sw	zero,20(a0)
20400d2e:	00052c23          	sw	zero,24(a0)
20400d32:	4621                	li	a2,8
20400d34:	4581                	li	a1,0
20400d36:	05c50513          	addi	a0,a0,92
20400d3a:	24ed                	jal	20401024 <memset>
20400d3c:	00001797          	auipc	a5,0x1
20400d40:	84e78793          	addi	a5,a5,-1970 # 2040158a <__sread>
20400d44:	d05c                	sw	a5,36(s0)
20400d46:	00001797          	auipc	a5,0x1
20400d4a:	87478793          	addi	a5,a5,-1932 # 204015ba <__swrite>
20400d4e:	d41c                	sw	a5,40(s0)
20400d50:	00001797          	auipc	a5,0x1
20400d54:	8b878793          	addi	a5,a5,-1864 # 20401608 <__sseek>
20400d58:	d45c                	sw	a5,44(s0)
20400d5a:	00001797          	auipc	a5,0x1
20400d5e:	8e478793          	addi	a5,a5,-1820 # 2040163e <__sclose>
20400d62:	d000                	sw	s0,32(s0)
20400d64:	d81c                	sw	a5,48(s0)
20400d66:	40b2                	lw	ra,12(sp)
20400d68:	4422                	lw	s0,8(sp)
20400d6a:	0141                	addi	sp,sp,16
20400d6c:	8082                	ret

20400d6e <_cleanup_r>:
_cleanup_r():
20400d6e:	00000597          	auipc	a1,0x0
20400d72:	f3458593          	addi	a1,a1,-204 # 20400ca2 <_fflush_r>
20400d76:	a2b9                	j	20400ec4 <_fwalk_reent>

20400d78 <__sfmoreglue>:
__sfmoreglue():
20400d78:	1141                	addi	sp,sp,-16
20400d7a:	c226                	sw	s1,4(sp)
20400d7c:	06800613          	li	a2,104
20400d80:	fff58493          	addi	s1,a1,-1
20400d84:	02c484b3          	mul	s1,s1,a2
20400d88:	c04a                	sw	s2,0(sp)
20400d8a:	892e                	mv	s2,a1
20400d8c:	c422                	sw	s0,8(sp)
20400d8e:	c606                	sw	ra,12(sp)
20400d90:	07448593          	addi	a1,s1,116
20400d94:	26d5                	jal	20401178 <_malloc_r>
20400d96:	842a                	mv	s0,a0
20400d98:	c919                	beqz	a0,20400dae <__sfmoreglue+0x36>
20400d9a:	00052023          	sw	zero,0(a0)
20400d9e:	01252223          	sw	s2,4(a0)
20400da2:	0531                	addi	a0,a0,12
20400da4:	c408                	sw	a0,8(s0)
20400da6:	06848613          	addi	a2,s1,104
20400daa:	4581                	li	a1,0
20400dac:	2ca5                	jal	20401024 <memset>
20400dae:	8522                	mv	a0,s0
20400db0:	40b2                	lw	ra,12(sp)
20400db2:	4422                	lw	s0,8(sp)
20400db4:	4492                	lw	s1,4(sp)
20400db6:	4902                	lw	s2,0(sp)
20400db8:	0141                	addi	sp,sp,16
20400dba:	8082                	ret

20400dbc <__sinit>:
__sinit():
20400dbc:	4d1c                	lw	a5,24(a0)
20400dbe:	e3bd                	bnez	a5,20400e24 <__sinit+0x68>
20400dc0:	1141                	addi	sp,sp,-16
20400dc2:	c606                	sw	ra,12(sp)
20400dc4:	c422                	sw	s0,8(sp)
20400dc6:	00000797          	auipc	a5,0x0
20400dca:	fa878793          	addi	a5,a5,-88 # 20400d6e <_cleanup_r>
20400dce:	d51c                	sw	a5,40(a0)
20400dd0:	5fc01797          	auipc	a5,0x5fc01
20400dd4:	93c78793          	addi	a5,a5,-1732 # 8000170c <_global_impure_ptr>
20400dd8:	439c                	lw	a5,0(a5)
20400dda:	04052423          	sw	zero,72(a0)
20400dde:	04052623          	sw	zero,76(a0)
20400de2:	04052823          	sw	zero,80(a0)
20400de6:	00f51463          	bne	a0,a5,20400dee <__sinit+0x32>
20400dea:	4785                	li	a5,1
20400dec:	cd1c                	sw	a5,24(a0)
20400dee:	842a                	mv	s0,a0
20400df0:	281d                	jal	20400e26 <__sfp>
20400df2:	c048                	sw	a0,4(s0)
20400df4:	8522                	mv	a0,s0
20400df6:	2805                	jal	20400e26 <__sfp>
20400df8:	c408                	sw	a0,8(s0)
20400dfa:	8522                	mv	a0,s0
20400dfc:	202d                	jal	20400e26 <__sfp>
20400dfe:	c448                	sw	a0,12(s0)
20400e00:	4048                	lw	a0,4(s0)
20400e02:	4601                	li	a2,0
20400e04:	4591                	li	a1,4
20400e06:	3701                	jal	20400d06 <std>
20400e08:	4408                	lw	a0,8(s0)
20400e0a:	4605                	li	a2,1
20400e0c:	45a5                	li	a1,9
20400e0e:	3de5                	jal	20400d06 <std>
20400e10:	4448                	lw	a0,12(s0)
20400e12:	4609                	li	a2,2
20400e14:	45c9                	li	a1,18
20400e16:	3dc5                	jal	20400d06 <std>
20400e18:	4785                	li	a5,1
20400e1a:	cc1c                	sw	a5,24(s0)
20400e1c:	40b2                	lw	ra,12(sp)
20400e1e:	4422                	lw	s0,8(sp)
20400e20:	0141                	addi	sp,sp,16
20400e22:	8082                	ret
20400e24:	8082                	ret

20400e26 <__sfp>:
__sfp():
20400e26:	1141                	addi	sp,sp,-16
20400e28:	5fc01797          	auipc	a5,0x5fc01
20400e2c:	8e478793          	addi	a5,a5,-1820 # 8000170c <_global_impure_ptr>
20400e30:	c226                	sw	s1,4(sp)
20400e32:	4384                	lw	s1,0(a5)
20400e34:	c04a                	sw	s2,0(sp)
20400e36:	c606                	sw	ra,12(sp)
20400e38:	4c9c                	lw	a5,24(s1)
20400e3a:	c422                	sw	s0,8(sp)
20400e3c:	892a                	mv	s2,a0
20400e3e:	e399                	bnez	a5,20400e44 <__sfp+0x1e>
20400e40:	8526                	mv	a0,s1
20400e42:	3fad                	jal	20400dbc <__sinit>
20400e44:	04848493          	addi	s1,s1,72
20400e48:	4480                	lw	s0,8(s1)
20400e4a:	40dc                	lw	a5,4(s1)
20400e4c:	17fd                	addi	a5,a5,-1
20400e4e:	0007d663          	bgez	a5,20400e5a <__sfp+0x34>
20400e52:	409c                	lw	a5,0(s1)
20400e54:	cfb1                	beqz	a5,20400eb0 <__sfp+0x8a>
20400e56:	4084                	lw	s1,0(s1)
20400e58:	bfc5                	j	20400e48 <__sfp+0x22>
20400e5a:	00c41703          	lh	a4,12(s0)
20400e5e:	e731                	bnez	a4,20400eaa <__sfp+0x84>
20400e60:	77c1                	lui	a5,0xffff0
20400e62:	0785                	addi	a5,a5,1
20400e64:	06042223          	sw	zero,100(s0)
20400e68:	00042023          	sw	zero,0(s0)
20400e6c:	00042223          	sw	zero,4(s0)
20400e70:	00042423          	sw	zero,8(s0)
20400e74:	c45c                	sw	a5,12(s0)
20400e76:	00042823          	sw	zero,16(s0)
20400e7a:	00042a23          	sw	zero,20(s0)
20400e7e:	00042c23          	sw	zero,24(s0)
20400e82:	4621                	li	a2,8
20400e84:	4581                	li	a1,0
20400e86:	05c40513          	addi	a0,s0,92
20400e8a:	2a69                	jal	20401024 <memset>
20400e8c:	02042a23          	sw	zero,52(s0)
20400e90:	02042c23          	sw	zero,56(s0)
20400e94:	04042423          	sw	zero,72(s0)
20400e98:	04042623          	sw	zero,76(s0)
20400e9c:	8522                	mv	a0,s0
20400e9e:	40b2                	lw	ra,12(sp)
20400ea0:	4422                	lw	s0,8(sp)
20400ea2:	4492                	lw	s1,4(sp)
20400ea4:	4902                	lw	s2,0(sp)
20400ea6:	0141                	addi	sp,sp,16
20400ea8:	8082                	ret
20400eaa:	06840413          	addi	s0,s0,104
20400eae:	bf79                	j	20400e4c <__sfp+0x26>
20400eb0:	4591                	li	a1,4
20400eb2:	854a                	mv	a0,s2
20400eb4:	35d1                	jal	20400d78 <__sfmoreglue>
20400eb6:	c088                	sw	a0,0(s1)
20400eb8:	842a                	mv	s0,a0
20400eba:	fd51                	bnez	a0,20400e56 <__sfp+0x30>
20400ebc:	47b1                	li	a5,12
20400ebe:	00f92023          	sw	a5,0(s2)
20400ec2:	bfe9                	j	20400e9c <__sfp+0x76>

20400ec4 <_fwalk_reent>:
_fwalk_reent():
20400ec4:	7179                	addi	sp,sp,-48
20400ec6:	d422                	sw	s0,40(sp)
20400ec8:	d04a                	sw	s2,32(sp)
20400eca:	cc52                	sw	s4,24(sp)
20400ecc:	ca56                	sw	s5,20(sp)
20400ece:	c85a                	sw	s6,16(sp)
20400ed0:	c65e                	sw	s7,12(sp)
20400ed2:	d606                	sw	ra,44(sp)
20400ed4:	d226                	sw	s1,36(sp)
20400ed6:	ce4e                	sw	s3,28(sp)
20400ed8:	8a2a                	mv	s4,a0
20400eda:	8aae                	mv	s5,a1
20400edc:	04850413          	addi	s0,a0,72
20400ee0:	4901                	li	s2,0
20400ee2:	4b05                	li	s6,1
20400ee4:	5bfd                	li	s7,-1
20400ee6:	ec09                	bnez	s0,20400f00 <_fwalk_reent+0x3c>
20400ee8:	50b2                	lw	ra,44(sp)
20400eea:	5422                	lw	s0,40(sp)
20400eec:	854a                	mv	a0,s2
20400eee:	5492                	lw	s1,36(sp)
20400ef0:	5902                	lw	s2,32(sp)
20400ef2:	49f2                	lw	s3,28(sp)
20400ef4:	4a62                	lw	s4,24(sp)
20400ef6:	4ad2                	lw	s5,20(sp)
20400ef8:	4b42                	lw	s6,16(sp)
20400efa:	4bb2                	lw	s7,12(sp)
20400efc:	6145                	addi	sp,sp,48
20400efe:	8082                	ret
20400f00:	4404                	lw	s1,8(s0)
20400f02:	00442983          	lw	s3,4(s0)
20400f06:	19fd                	addi	s3,s3,-1
20400f08:	0009d463          	bgez	s3,20400f10 <_fwalk_reent+0x4c>
20400f0c:	4000                	lw	s0,0(s0)
20400f0e:	bfe1                	j	20400ee6 <_fwalk_reent+0x22>
20400f10:	00c4d783          	lhu	a5,12(s1)
20400f14:	00fb7b63          	bgeu	s6,a5,20400f2a <_fwalk_reent+0x66>
20400f18:	00e49783          	lh	a5,14(s1)
20400f1c:	01778763          	beq	a5,s7,20400f2a <_fwalk_reent+0x66>
20400f20:	85a6                	mv	a1,s1
20400f22:	8552                	mv	a0,s4
20400f24:	9a82                	jalr	s5
20400f26:	00a96933          	or	s2,s2,a0
20400f2a:	06848493          	addi	s1,s1,104
20400f2e:	bfe1                	j	20400f06 <_fwalk_reent+0x42>

20400f30 <__swhatbuf_r>:
__swhatbuf_r():
20400f30:	7119                	addi	sp,sp,-128
20400f32:	daa6                	sw	s1,116(sp)
20400f34:	84ae                	mv	s1,a1
20400f36:	00e59583          	lh	a1,14(a1)
20400f3a:	dca2                	sw	s0,120(sp)
20400f3c:	de86                	sw	ra,124(sp)
20400f3e:	8432                	mv	s0,a2
20400f40:	0005dc63          	bgez	a1,20400f58 <__swhatbuf_r+0x28>
20400f44:	00c4d783          	lhu	a5,12(s1)
20400f48:	0006a023          	sw	zero,0(a3)
20400f4c:	0807f793          	andi	a5,a5,128
20400f50:	e39d                	bnez	a5,20400f76 <__swhatbuf_r+0x46>
20400f52:	40000793          	li	a5,1024
20400f56:	a015                	j	20400f7a <__swhatbuf_r+0x4a>
20400f58:	0830                	addi	a2,sp,24
20400f5a:	c636                	sw	a3,12(sp)
20400f5c:	27b1                	jal	204016a8 <_fstat_r>
20400f5e:	46b2                	lw	a3,12(sp)
20400f60:	fe0542e3          	bltz	a0,20400f44 <__swhatbuf_r+0x14>
20400f64:	4772                	lw	a4,28(sp)
20400f66:	67bd                	lui	a5,0xf
20400f68:	8ff9                	and	a5,a5,a4
20400f6a:	7779                	lui	a4,0xffffe
20400f6c:	97ba                	add	a5,a5,a4
20400f6e:	0017b793          	seqz	a5,a5
20400f72:	c29c                	sw	a5,0(a3)
20400f74:	bff9                	j	20400f52 <__swhatbuf_r+0x22>
20400f76:	04000793          	li	a5,64
20400f7a:	c01c                	sw	a5,0(s0)
20400f7c:	50f6                	lw	ra,124(sp)
20400f7e:	5466                	lw	s0,120(sp)
20400f80:	54d6                	lw	s1,116(sp)
20400f82:	4501                	li	a0,0
20400f84:	6109                	addi	sp,sp,128
20400f86:	8082                	ret

20400f88 <__smakebuf_r>:
__smakebuf_r():
20400f88:	00c5d783          	lhu	a5,12(a1)
20400f8c:	1101                	addi	sp,sp,-32
20400f8e:	cc22                	sw	s0,24(sp)
20400f90:	ce06                	sw	ra,28(sp)
20400f92:	ca26                	sw	s1,20(sp)
20400f94:	c84a                	sw	s2,16(sp)
20400f96:	8b89                	andi	a5,a5,2
20400f98:	842e                	mv	s0,a1
20400f9a:	cf89                	beqz	a5,20400fb4 <__smakebuf_r+0x2c>
20400f9c:	04740793          	addi	a5,s0,71
20400fa0:	c01c                	sw	a5,0(s0)
20400fa2:	c81c                	sw	a5,16(s0)
20400fa4:	4785                	li	a5,1
20400fa6:	c85c                	sw	a5,20(s0)
20400fa8:	40f2                	lw	ra,28(sp)
20400faa:	4462                	lw	s0,24(sp)
20400fac:	44d2                	lw	s1,20(sp)
20400fae:	4942                	lw	s2,16(sp)
20400fb0:	6105                	addi	sp,sp,32
20400fb2:	8082                	ret
20400fb4:	0074                	addi	a3,sp,12
20400fb6:	0030                	addi	a2,sp,8
20400fb8:	84aa                	mv	s1,a0
20400fba:	3f9d                	jal	20400f30 <__swhatbuf_r>
20400fbc:	45a2                	lw	a1,8(sp)
20400fbe:	892a                	mv	s2,a0
20400fc0:	8526                	mv	a0,s1
20400fc2:	2a5d                	jal	20401178 <_malloc_r>
20400fc4:	ed01                	bnez	a0,20400fdc <__smakebuf_r+0x54>
20400fc6:	00c41783          	lh	a5,12(s0)
20400fca:	2007f713          	andi	a4,a5,512
20400fce:	ff69                	bnez	a4,20400fa8 <__smakebuf_r+0x20>
20400fd0:	9bf1                	andi	a5,a5,-4
20400fd2:	0027e793          	ori	a5,a5,2
20400fd6:	00f41623          	sh	a5,12(s0)
20400fda:	b7c9                	j	20400f9c <__smakebuf_r+0x14>
20400fdc:	00000797          	auipc	a5,0x0
20400fe0:	d9278793          	addi	a5,a5,-622 # 20400d6e <_cleanup_r>
20400fe4:	d49c                	sw	a5,40(s1)
20400fe6:	00c45783          	lhu	a5,12(s0)
20400fea:	c008                	sw	a0,0(s0)
20400fec:	c808                	sw	a0,16(s0)
20400fee:	0807e793          	ori	a5,a5,128
20400ff2:	00f41623          	sh	a5,12(s0)
20400ff6:	47a2                	lw	a5,8(sp)
20400ff8:	c85c                	sw	a5,20(s0)
20400ffa:	47b2                	lw	a5,12(sp)
20400ffc:	cf89                	beqz	a5,20401016 <__smakebuf_r+0x8e>
20400ffe:	00e41583          	lh	a1,14(s0)
20401002:	8526                	mv	a0,s1
20401004:	2dd9                	jal	204016da <_isatty_r>
20401006:	c901                	beqz	a0,20401016 <__smakebuf_r+0x8e>
20401008:	00c45783          	lhu	a5,12(s0)
2040100c:	9bf1                	andi	a5,a5,-4
2040100e:	0017e793          	ori	a5,a5,1
20401012:	00f41623          	sh	a5,12(s0)
20401016:	00c45783          	lhu	a5,12(s0)
2040101a:	00f96933          	or	s2,s2,a5
2040101e:	01241623          	sh	s2,12(s0)
20401022:	b759                	j	20400fa8 <__smakebuf_r+0x20>

20401024 <memset>:
memset():
20401024:	433d                	li	t1,15
20401026:	872a                	mv	a4,a0
20401028:	02c37363          	bgeu	t1,a2,2040104e <memset+0x2a>
2040102c:	00f77793          	andi	a5,a4,15
20401030:	efbd                	bnez	a5,204010ae <memset+0x8a>
20401032:	e5ad                	bnez	a1,2040109c <memset+0x78>
20401034:	ff067693          	andi	a3,a2,-16
20401038:	8a3d                	andi	a2,a2,15
2040103a:	96ba                	add	a3,a3,a4
2040103c:	c30c                	sw	a1,0(a4)
2040103e:	c34c                	sw	a1,4(a4)
20401040:	c70c                	sw	a1,8(a4)
20401042:	c74c                	sw	a1,12(a4)
20401044:	0741                	addi	a4,a4,16
20401046:	fed76be3          	bltu	a4,a3,2040103c <memset+0x18>
2040104a:	e211                	bnez	a2,2040104e <memset+0x2a>
2040104c:	8082                	ret
2040104e:	40c306b3          	sub	a3,t1,a2
20401052:	068a                	slli	a3,a3,0x2
20401054:	00000297          	auipc	t0,0x0
20401058:	9696                	add	a3,a3,t0
2040105a:	00a68067          	jr	10(a3)
2040105e:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffac7e>
20401062:	00b706a3          	sb	a1,13(a4)
20401066:	00b70623          	sb	a1,12(a4)
2040106a:	00b705a3          	sb	a1,11(a4)
2040106e:	00b70523          	sb	a1,10(a4)
20401072:	00b704a3          	sb	a1,9(a4)
20401076:	00b70423          	sb	a1,8(a4)
2040107a:	00b703a3          	sb	a1,7(a4)
2040107e:	00b70323          	sb	a1,6(a4)
20401082:	00b702a3          	sb	a1,5(a4)
20401086:	00b70223          	sb	a1,4(a4)
2040108a:	00b701a3          	sb	a1,3(a4)
2040108e:	00b70123          	sb	a1,2(a4)
20401092:	00b700a3          	sb	a1,1(a4)
20401096:	00b70023          	sb	a1,0(a4)
2040109a:	8082                	ret
2040109c:	0ff5f593          	andi	a1,a1,255
204010a0:	00859693          	slli	a3,a1,0x8
204010a4:	8dd5                	or	a1,a1,a3
204010a6:	01059693          	slli	a3,a1,0x10
204010aa:	8dd5                	or	a1,a1,a3
204010ac:	b761                	j	20401034 <memset+0x10>
204010ae:	00279693          	slli	a3,a5,0x2
204010b2:	00000297          	auipc	t0,0x0
204010b6:	9696                	add	a3,a3,t0
204010b8:	8286                	mv	t0,ra
204010ba:	fa8680e7          	jalr	-88(a3)
204010be:	8096                	mv	ra,t0
204010c0:	17c1                	addi	a5,a5,-16
204010c2:	8f1d                	sub	a4,a4,a5
204010c4:	963e                	add	a2,a2,a5
204010c6:	f8c374e3          	bgeu	t1,a2,2040104e <memset+0x2a>
204010ca:	b7a5                	j	20401032 <memset+0xe>

204010cc <_free_r>:
_free_r():
204010cc:	c5cd                	beqz	a1,20401176 <_free_r+0xaa>
204010ce:	ffc5a783          	lw	a5,-4(a1)
204010d2:	1141                	addi	sp,sp,-16
204010d4:	c422                	sw	s0,8(sp)
204010d6:	c606                	sw	ra,12(sp)
204010d8:	c226                	sw	s1,4(sp)
204010da:	ffc58413          	addi	s0,a1,-4
204010de:	0007d363          	bgez	a5,204010e4 <_free_r+0x18>
204010e2:	943e                	add	s0,s0,a5
204010e4:	84aa                	mv	s1,a0
204010e6:	2d8d                	jal	20401758 <__malloc_lock>
204010e8:	5fc00797          	auipc	a5,0x5fc00
204010ec:	64c78793          	addi	a5,a5,1612 # 80001734 <__malloc_free_list>
204010f0:	439c                	lw	a5,0(a5)
204010f2:	ef89                	bnez	a5,2040110c <_free_r+0x40>
204010f4:	00042223          	sw	zero,4(s0)
204010f8:	5fc00797          	auipc	a5,0x5fc00
204010fc:	6287ae23          	sw	s0,1596(a5) # 80001734 <__malloc_free_list>
20401100:	4422                	lw	s0,8(sp)
20401102:	40b2                	lw	ra,12(sp)
20401104:	8526                	mv	a0,s1
20401106:	4492                	lw	s1,4(sp)
20401108:	0141                	addi	sp,sp,16
2040110a:	ad81                	j	2040175a <__malloc_unlock>
2040110c:	00f47e63          	bgeu	s0,a5,20401128 <_free_r+0x5c>
20401110:	4014                	lw	a3,0(s0)
20401112:	00d40733          	add	a4,s0,a3
20401116:	00e79663          	bne	a5,a4,20401122 <_free_r+0x56>
2040111a:	4398                	lw	a4,0(a5)
2040111c:	43dc                	lw	a5,4(a5)
2040111e:	9736                	add	a4,a4,a3
20401120:	c018                	sw	a4,0(s0)
20401122:	c05c                	sw	a5,4(s0)
20401124:	bfd1                	j	204010f8 <_free_r+0x2c>
20401126:	87ba                	mv	a5,a4
20401128:	43d8                	lw	a4,4(a5)
2040112a:	c319                	beqz	a4,20401130 <_free_r+0x64>
2040112c:	fee47de3          	bgeu	s0,a4,20401126 <_free_r+0x5a>
20401130:	4394                	lw	a3,0(a5)
20401132:	00d78633          	add	a2,a5,a3
20401136:	00861f63          	bne	a2,s0,20401154 <_free_r+0x88>
2040113a:	4010                	lw	a2,0(s0)
2040113c:	96b2                	add	a3,a3,a2
2040113e:	c394                	sw	a3,0(a5)
20401140:	00d78633          	add	a2,a5,a3
20401144:	fac71ee3          	bne	a4,a2,20401100 <_free_r+0x34>
20401148:	4310                	lw	a2,0(a4)
2040114a:	4358                	lw	a4,4(a4)
2040114c:	96b2                	add	a3,a3,a2
2040114e:	c394                	sw	a3,0(a5)
20401150:	c3d8                	sw	a4,4(a5)
20401152:	b77d                	j	20401100 <_free_r+0x34>
20401154:	00c47563          	bgeu	s0,a2,2040115e <_free_r+0x92>
20401158:	47b1                	li	a5,12
2040115a:	c09c                	sw	a5,0(s1)
2040115c:	b755                	j	20401100 <_free_r+0x34>
2040115e:	4010                	lw	a2,0(s0)
20401160:	00c406b3          	add	a3,s0,a2
20401164:	00d71663          	bne	a4,a3,20401170 <_free_r+0xa4>
20401168:	4314                	lw	a3,0(a4)
2040116a:	4358                	lw	a4,4(a4)
2040116c:	96b2                	add	a3,a3,a2
2040116e:	c014                	sw	a3,0(s0)
20401170:	c058                	sw	a4,4(s0)
20401172:	c3c0                	sw	s0,4(a5)
20401174:	b771                	j	20401100 <_free_r+0x34>
20401176:	8082                	ret

20401178 <_malloc_r>:
_malloc_r():
20401178:	1101                	addi	sp,sp,-32
2040117a:	ca26                	sw	s1,20(sp)
2040117c:	00358493          	addi	s1,a1,3
20401180:	98f1                	andi	s1,s1,-4
20401182:	ce06                	sw	ra,28(sp)
20401184:	cc22                	sw	s0,24(sp)
20401186:	c84a                	sw	s2,16(sp)
20401188:	c64e                	sw	s3,12(sp)
2040118a:	04a1                	addi	s1,s1,8
2040118c:	47b1                	li	a5,12
2040118e:	04f4f763          	bgeu	s1,a5,204011dc <_malloc_r+0x64>
20401192:	44b1                	li	s1,12
20401194:	04b4e663          	bltu	s1,a1,204011e0 <_malloc_r+0x68>
20401198:	892a                	mv	s2,a0
2040119a:	2b7d                	jal	20401758 <__malloc_lock>
2040119c:	5fc00797          	auipc	a5,0x5fc00
204011a0:	59878793          	addi	a5,a5,1432 # 80001734 <__malloc_free_list>
204011a4:	4398                	lw	a4,0(a5)
204011a6:	843a                	mv	s0,a4
204011a8:	e431                	bnez	s0,204011f4 <_malloc_r+0x7c>
204011aa:	5fc00797          	auipc	a5,0x5fc00
204011ae:	58e78793          	addi	a5,a5,1422 # 80001738 <__malloc_sbrk_start>
204011b2:	439c                	lw	a5,0(a5)
204011b4:	eb81                	bnez	a5,204011c4 <_malloc_r+0x4c>
204011b6:	4581                	li	a1,0
204011b8:	854a                	mv	a0,s2
204011ba:	2645                	jal	2040155a <_sbrk_r>
204011bc:	5fc00797          	auipc	a5,0x5fc00
204011c0:	56a7ae23          	sw	a0,1404(a5) # 80001738 <__malloc_sbrk_start>
204011c4:	85a6                	mv	a1,s1
204011c6:	854a                	mv	a0,s2
204011c8:	2e49                	jal	2040155a <_sbrk_r>
204011ca:	59fd                	li	s3,-1
204011cc:	07351963          	bne	a0,s3,2040123e <_malloc_r+0xc6>
204011d0:	47b1                	li	a5,12
204011d2:	00f92023          	sw	a5,0(s2)
204011d6:	854a                	mv	a0,s2
204011d8:	2349                	jal	2040175a <__malloc_unlock>
204011da:	a029                	j	204011e4 <_malloc_r+0x6c>
204011dc:	fa04dce3          	bgez	s1,20401194 <_malloc_r+0x1c>
204011e0:	47b1                	li	a5,12
204011e2:	c11c                	sw	a5,0(a0)
204011e4:	4501                	li	a0,0
204011e6:	40f2                	lw	ra,28(sp)
204011e8:	4462                	lw	s0,24(sp)
204011ea:	44d2                	lw	s1,20(sp)
204011ec:	4942                	lw	s2,16(sp)
204011ee:	49b2                	lw	s3,12(sp)
204011f0:	6105                	addi	sp,sp,32
204011f2:	8082                	ret
204011f4:	401c                	lw	a5,0(s0)
204011f6:	8f85                	sub	a5,a5,s1
204011f8:	0407c063          	bltz	a5,20401238 <_malloc_r+0xc0>
204011fc:	46ad                	li	a3,11
204011fe:	00f6f663          	bgeu	a3,a5,2040120a <_malloc_r+0x92>
20401202:	c01c                	sw	a5,0(s0)
20401204:	943e                	add	s0,s0,a5
20401206:	c004                	sw	s1,0(s0)
20401208:	a801                	j	20401218 <_malloc_r+0xa0>
2040120a:	405c                	lw	a5,4(s0)
2040120c:	02871463          	bne	a4,s0,20401234 <_malloc_r+0xbc>
20401210:	5fc00717          	auipc	a4,0x5fc00
20401214:	52f72223          	sw	a5,1316(a4) # 80001734 <__malloc_free_list>
20401218:	854a                	mv	a0,s2
2040121a:	2381                	jal	2040175a <__malloc_unlock>
2040121c:	00b40513          	addi	a0,s0,11
20401220:	00440793          	addi	a5,s0,4
20401224:	9961                	andi	a0,a0,-8
20401226:	40f50733          	sub	a4,a0,a5
2040122a:	df55                	beqz	a4,204011e6 <_malloc_r+0x6e>
2040122c:	943a                	add	s0,s0,a4
2040122e:	8f89                	sub	a5,a5,a0
20401230:	c01c                	sw	a5,0(s0)
20401232:	bf55                	j	204011e6 <_malloc_r+0x6e>
20401234:	c35c                	sw	a5,4(a4)
20401236:	b7cd                	j	20401218 <_malloc_r+0xa0>
20401238:	8722                	mv	a4,s0
2040123a:	4040                	lw	s0,4(s0)
2040123c:	b7b5                	j	204011a8 <_malloc_r+0x30>
2040123e:	00350413          	addi	s0,a0,3
20401242:	9871                	andi	s0,s0,-4
20401244:	fc8501e3          	beq	a0,s0,20401206 <_malloc_r+0x8e>
20401248:	40a405b3          	sub	a1,s0,a0
2040124c:	854a                	mv	a0,s2
2040124e:	2631                	jal	2040155a <_sbrk_r>
20401250:	fb351be3          	bne	a0,s3,20401206 <_malloc_r+0x8e>
20401254:	bfb5                	j	204011d0 <_malloc_r+0x58>

20401256 <__sfputc_r>:
__sfputc_r():
20401256:	461c                	lw	a5,8(a2)
20401258:	17fd                	addi	a5,a5,-1
2040125a:	c61c                	sw	a5,8(a2)
2040125c:	0007da63          	bgez	a5,20401270 <__sfputc_r+0x1a>
20401260:	4e18                	lw	a4,24(a2)
20401262:	00e7c563          	blt	a5,a4,2040126c <__sfputc_r+0x16>
20401266:	47a9                	li	a5,10
20401268:	00f59463          	bne	a1,a5,20401270 <__sfputc_r+0x1a>
2040126c:	f1cff06f          	j	20400988 <__swbuf_r>
20401270:	421c                	lw	a5,0(a2)
20401272:	852e                	mv	a0,a1
20401274:	00178713          	addi	a4,a5,1
20401278:	c218                	sw	a4,0(a2)
2040127a:	00b78023          	sb	a1,0(a5)
2040127e:	8082                	ret

20401280 <__sfputs_r>:
__sfputs_r():
20401280:	1101                	addi	sp,sp,-32
20401282:	cc22                	sw	s0,24(sp)
20401284:	ca26                	sw	s1,20(sp)
20401286:	c84a                	sw	s2,16(sp)
20401288:	c64e                	sw	s3,12(sp)
2040128a:	c452                	sw	s4,8(sp)
2040128c:	ce06                	sw	ra,28(sp)
2040128e:	892a                	mv	s2,a0
20401290:	89ae                	mv	s3,a1
20401292:	8432                	mv	s0,a2
20401294:	00d604b3          	add	s1,a2,a3
20401298:	5a7d                	li	s4,-1
2040129a:	00941463          	bne	s0,s1,204012a2 <__sfputs_r+0x22>
2040129e:	4501                	li	a0,0
204012a0:	a809                	j	204012b2 <__sfputs_r+0x32>
204012a2:	00044583          	lbu	a1,0(s0)
204012a6:	864e                	mv	a2,s3
204012a8:	854a                	mv	a0,s2
204012aa:	3775                	jal	20401256 <__sfputc_r>
204012ac:	0405                	addi	s0,s0,1
204012ae:	ff4516e3          	bne	a0,s4,2040129a <__sfputs_r+0x1a>
204012b2:	40f2                	lw	ra,28(sp)
204012b4:	4462                	lw	s0,24(sp)
204012b6:	44d2                	lw	s1,20(sp)
204012b8:	4942                	lw	s2,16(sp)
204012ba:	49b2                	lw	s3,12(sp)
204012bc:	4a22                	lw	s4,8(sp)
204012be:	6105                	addi	sp,sp,32
204012c0:	8082                	ret

204012c2 <_vfiprintf_r>:
_vfiprintf_r():
204012c2:	7135                	addi	sp,sp,-160
204012c4:	cd22                	sw	s0,152(sp)
204012c6:	cb26                	sw	s1,148(sp)
204012c8:	c94a                	sw	s2,144(sp)
204012ca:	c74e                	sw	s3,140(sp)
204012cc:	cf06                	sw	ra,156(sp)
204012ce:	c552                	sw	s4,136(sp)
204012d0:	c356                	sw	s5,132(sp)
204012d2:	c15a                	sw	s6,128(sp)
204012d4:	dede                	sw	s7,124(sp)
204012d6:	dce2                	sw	s8,120(sp)
204012d8:	dae6                	sw	s9,116(sp)
204012da:	89aa                	mv	s3,a0
204012dc:	84ae                	mv	s1,a1
204012de:	8932                	mv	s2,a2
204012e0:	8436                	mv	s0,a3
204012e2:	c501                	beqz	a0,204012ea <_vfiprintf_r+0x28>
204012e4:	4d1c                	lw	a5,24(a0)
204012e6:	e391                	bnez	a5,204012ea <_vfiprintf_r+0x28>
204012e8:	3cd1                	jal	20400dbc <__sinit>
204012ea:	00004797          	auipc	a5,0x4
204012ee:	41278793          	addi	a5,a5,1042 # 204056fc <__sf_fake_stdin>
204012f2:	0cf49b63          	bne	s1,a5,204013c8 <_vfiprintf_r+0x106>
204012f6:	0049a483          	lw	s1,4(s3)
204012fa:	00c4d783          	lhu	a5,12(s1)
204012fe:	8ba1                	andi	a5,a5,8
20401300:	c7f5                	beqz	a5,204013ec <_vfiprintf_r+0x12a>
20401302:	489c                	lw	a5,16(s1)
20401304:	c7e5                	beqz	a5,204013ec <_vfiprintf_r+0x12a>
20401306:	02000793          	li	a5,32
2040130a:	02f104a3          	sb	a5,41(sp)
2040130e:	03000793          	li	a5,48
20401312:	d202                	sw	zero,36(sp)
20401314:	02f10523          	sb	a5,42(sp)
20401318:	c622                	sw	s0,12(sp)
2040131a:	02500b93          	li	s7,37
2040131e:	00004a97          	auipc	s5,0x4
20401322:	41ea8a93          	addi	s5,s5,1054 # 2040573c <__sf_fake_stdout+0x20>
20401326:	4c05                	li	s8,1
20401328:	4b29                	li	s6,10
2040132a:	844a                	mv	s0,s2
2040132c:	00044783          	lbu	a5,0(s0)
20401330:	c399                	beqz	a5,20401336 <_vfiprintf_r+0x74>
20401332:	0f779063          	bne	a5,s7,20401412 <_vfiprintf_r+0x150>
20401336:	41240cb3          	sub	s9,s0,s2
2040133a:	000c8d63          	beqz	s9,20401354 <_vfiprintf_r+0x92>
2040133e:	86e6                	mv	a3,s9
20401340:	864a                	mv	a2,s2
20401342:	85a6                	mv	a1,s1
20401344:	854e                	mv	a0,s3
20401346:	3f2d                	jal	20401280 <__sfputs_r>
20401348:	57fd                	li	a5,-1
2040134a:	1ef50663          	beq	a0,a5,20401536 <_vfiprintf_r+0x274>
2040134e:	5692                	lw	a3,36(sp)
20401350:	96e6                	add	a3,a3,s9
20401352:	d236                	sw	a3,36(sp)
20401354:	00044783          	lbu	a5,0(s0)
20401358:	1c078f63          	beqz	a5,20401536 <_vfiprintf_r+0x274>
2040135c:	57fd                	li	a5,-1
2040135e:	00140913          	addi	s2,s0,1
20401362:	c802                	sw	zero,16(sp)
20401364:	ce02                	sw	zero,28(sp)
20401366:	ca3e                	sw	a5,20(sp)
20401368:	cc02                	sw	zero,24(sp)
2040136a:	040109a3          	sb	zero,83(sp)
2040136e:	d482                	sw	zero,104(sp)
20401370:	00094583          	lbu	a1,0(s2)
20401374:	4615                	li	a2,5
20401376:	8556                	mv	a0,s5
20401378:	26d9                	jal	2040173e <memchr>
2040137a:	00190413          	addi	s0,s2,1
2040137e:	47c2                	lw	a5,16(sp)
20401380:	e959                	bnez	a0,20401416 <_vfiprintf_r+0x154>
20401382:	0107f713          	andi	a4,a5,16
20401386:	c709                	beqz	a4,20401390 <_vfiprintf_r+0xce>
20401388:	02000713          	li	a4,32
2040138c:	04e109a3          	sb	a4,83(sp)
20401390:	0087f713          	andi	a4,a5,8
20401394:	c709                	beqz	a4,2040139e <_vfiprintf_r+0xdc>
20401396:	02b00713          	li	a4,43
2040139a:	04e109a3          	sb	a4,83(sp)
2040139e:	00094683          	lbu	a3,0(s2)
204013a2:	02a00713          	li	a4,42
204013a6:	08e68063          	beq	a3,a4,20401426 <_vfiprintf_r+0x164>
204013aa:	47f2                	lw	a5,28(sp)
204013ac:	844a                	mv	s0,s2
204013ae:	4681                	li	a3,0
204013b0:	4625                	li	a2,9
204013b2:	00044703          	lbu	a4,0(s0)
204013b6:	00140593          	addi	a1,s0,1
204013ba:	fd070713          	addi	a4,a4,-48
204013be:	0ae67963          	bgeu	a2,a4,20401470 <_vfiprintf_r+0x1ae>
204013c2:	cab5                	beqz	a3,20401436 <_vfiprintf_r+0x174>
204013c4:	ce3e                	sw	a5,28(sp)
204013c6:	a885                	j	20401436 <_vfiprintf_r+0x174>
204013c8:	00004797          	auipc	a5,0x4
204013cc:	35478793          	addi	a5,a5,852 # 2040571c <__sf_fake_stdout>
204013d0:	00f49563          	bne	s1,a5,204013da <_vfiprintf_r+0x118>
204013d4:	0089a483          	lw	s1,8(s3)
204013d8:	b70d                	j	204012fa <_vfiprintf_r+0x38>
204013da:	00004797          	auipc	a5,0x4
204013de:	30278793          	addi	a5,a5,770 # 204056dc <__sf_fake_stderr>
204013e2:	f0f49ce3          	bne	s1,a5,204012fa <_vfiprintf_r+0x38>
204013e6:	00c9a483          	lw	s1,12(s3)
204013ea:	bf01                	j	204012fa <_vfiprintf_r+0x38>
204013ec:	85a6                	mv	a1,s1
204013ee:	854e                	mv	a0,s3
204013f0:	e58ff0ef          	jal	ra,20400a48 <__swsetup_r>
204013f4:	d909                	beqz	a0,20401306 <_vfiprintf_r+0x44>
204013f6:	557d                	li	a0,-1
204013f8:	40fa                	lw	ra,156(sp)
204013fa:	446a                	lw	s0,152(sp)
204013fc:	44da                	lw	s1,148(sp)
204013fe:	494a                	lw	s2,144(sp)
20401400:	49ba                	lw	s3,140(sp)
20401402:	4a2a                	lw	s4,136(sp)
20401404:	4a9a                	lw	s5,132(sp)
20401406:	4b0a                	lw	s6,128(sp)
20401408:	5bf6                	lw	s7,124(sp)
2040140a:	5c66                	lw	s8,120(sp)
2040140c:	5cd6                	lw	s9,116(sp)
2040140e:	610d                	addi	sp,sp,160
20401410:	8082                	ret
20401412:	0405                	addi	s0,s0,1
20401414:	bf21                	j	2040132c <_vfiprintf_r+0x6a>
20401416:	41550533          	sub	a0,a0,s5
2040141a:	00ac1533          	sll	a0,s8,a0
2040141e:	8fc9                	or	a5,a5,a0
20401420:	c83e                	sw	a5,16(sp)
20401422:	8922                	mv	s2,s0
20401424:	b7b1                	j	20401370 <_vfiprintf_r+0xae>
20401426:	4732                	lw	a4,12(sp)
20401428:	00470693          	addi	a3,a4,4
2040142c:	4318                	lw	a4,0(a4)
2040142e:	c636                	sw	a3,12(sp)
20401430:	02074963          	bltz	a4,20401462 <_vfiprintf_r+0x1a0>
20401434:	ce3a                	sw	a4,28(sp)
20401436:	00044703          	lbu	a4,0(s0)
2040143a:	02e00793          	li	a5,46
2040143e:	04f71f63          	bne	a4,a5,2040149c <_vfiprintf_r+0x1da>
20401442:	00144703          	lbu	a4,1(s0)
20401446:	02a00793          	li	a5,42
2040144a:	02f71b63          	bne	a4,a5,20401480 <_vfiprintf_r+0x1be>
2040144e:	47b2                	lw	a5,12(sp)
20401450:	0409                	addi	s0,s0,2
20401452:	00478713          	addi	a4,a5,4
20401456:	439c                	lw	a5,0(a5)
20401458:	c63a                	sw	a4,12(sp)
2040145a:	0207c163          	bltz	a5,2040147c <_vfiprintf_r+0x1ba>
2040145e:	ca3e                	sw	a5,20(sp)
20401460:	a835                	j	2040149c <_vfiprintf_r+0x1da>
20401462:	40e00733          	neg	a4,a4
20401466:	0027e793          	ori	a5,a5,2
2040146a:	ce3a                	sw	a4,28(sp)
2040146c:	c83e                	sw	a5,16(sp)
2040146e:	b7e1                	j	20401436 <_vfiprintf_r+0x174>
20401470:	036787b3          	mul	a5,a5,s6
20401474:	4685                	li	a3,1
20401476:	842e                	mv	s0,a1
20401478:	97ba                	add	a5,a5,a4
2040147a:	bf25                	j	204013b2 <_vfiprintf_r+0xf0>
2040147c:	57fd                	li	a5,-1
2040147e:	b7c5                	j	2040145e <_vfiprintf_r+0x19c>
20401480:	0405                	addi	s0,s0,1
20401482:	ca02                	sw	zero,20(sp)
20401484:	4681                	li	a3,0
20401486:	4781                	li	a5,0
20401488:	4625                	li	a2,9
2040148a:	00044703          	lbu	a4,0(s0)
2040148e:	00140593          	addi	a1,s0,1
20401492:	fd070713          	addi	a4,a4,-48
20401496:	06e67663          	bgeu	a2,a4,20401502 <_vfiprintf_r+0x240>
2040149a:	f2f1                	bnez	a3,2040145e <_vfiprintf_r+0x19c>
2040149c:	00044583          	lbu	a1,0(s0)
204014a0:	460d                	li	a2,3
204014a2:	00004517          	auipc	a0,0x4
204014a6:	2a250513          	addi	a0,a0,674 # 20405744 <__sf_fake_stdout+0x28>
204014aa:	2c51                	jal	2040173e <memchr>
204014ac:	cd11                	beqz	a0,204014c8 <_vfiprintf_r+0x206>
204014ae:	00004797          	auipc	a5,0x4
204014b2:	29678793          	addi	a5,a5,662 # 20405744 <__sf_fake_stdout+0x28>
204014b6:	8d1d                	sub	a0,a0,a5
204014b8:	04000793          	li	a5,64
204014bc:	00a797b3          	sll	a5,a5,a0
204014c0:	4542                	lw	a0,16(sp)
204014c2:	0405                	addi	s0,s0,1
204014c4:	8d5d                	or	a0,a0,a5
204014c6:	c82a                	sw	a0,16(sp)
204014c8:	00044583          	lbu	a1,0(s0)
204014cc:	4619                	li	a2,6
204014ce:	00004517          	auipc	a0,0x4
204014d2:	27a50513          	addi	a0,a0,634 # 20405748 <__sf_fake_stdout+0x2c>
204014d6:	00140913          	addi	s2,s0,1
204014da:	02b10423          	sb	a1,40(sp)
204014de:	2485                	jal	2040173e <memchr>
204014e0:	c13d                	beqz	a0,20401546 <_vfiprintf_r+0x284>
204014e2:	dfbff797          	auipc	a5,0xdfbff
204014e6:	b1e78793          	addi	a5,a5,-1250 # 0 <__metal_boot_hart>
204014ea:	e795                	bnez	a5,20401516 <_vfiprintf_r+0x254>
204014ec:	4742                	lw	a4,16(sp)
204014ee:	47b2                	lw	a5,12(sp)
204014f0:	10077713          	andi	a4,a4,256
204014f4:	cf09                	beqz	a4,2040150e <_vfiprintf_r+0x24c>
204014f6:	0791                	addi	a5,a5,4
204014f8:	c63e                	sw	a5,12(sp)
204014fa:	5792                	lw	a5,36(sp)
204014fc:	97d2                	add	a5,a5,s4
204014fe:	d23e                	sw	a5,36(sp)
20401500:	b52d                	j	2040132a <_vfiprintf_r+0x68>
20401502:	036787b3          	mul	a5,a5,s6
20401506:	4685                	li	a3,1
20401508:	842e                	mv	s0,a1
2040150a:	97ba                	add	a5,a5,a4
2040150c:	bfbd                	j	2040148a <_vfiprintf_r+0x1c8>
2040150e:	079d                	addi	a5,a5,7
20401510:	9be1                	andi	a5,a5,-8
20401512:	07a1                	addi	a5,a5,8
20401514:	b7d5                	j	204014f8 <_vfiprintf_r+0x236>
20401516:	0078                	addi	a4,sp,12
20401518:	00000697          	auipc	a3,0x0
2040151c:	d6868693          	addi	a3,a3,-664 # 20401280 <__sfputs_r>
20401520:	8626                	mv	a2,s1
20401522:	080c                	addi	a1,sp,16
20401524:	854e                	mv	a0,s3
20401526:	00000097          	auipc	ra,0x0
2040152a:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
2040152e:	57fd                	li	a5,-1
20401530:	8a2a                	mv	s4,a0
20401532:	fcf514e3          	bne	a0,a5,204014fa <_vfiprintf_r+0x238>
20401536:	00c4d783          	lhu	a5,12(s1)
2040153a:	0407f793          	andi	a5,a5,64
2040153e:	ea079ce3          	bnez	a5,204013f6 <_vfiprintf_r+0x134>
20401542:	5512                	lw	a0,36(sp)
20401544:	bd55                	j	204013f8 <_vfiprintf_r+0x136>
20401546:	0078                	addi	a4,sp,12
20401548:	00000697          	auipc	a3,0x0
2040154c:	d3868693          	addi	a3,a3,-712 # 20401280 <__sfputs_r>
20401550:	8626                	mv	a2,s1
20401552:	080c                	addi	a1,sp,16
20401554:	854e                	mv	a0,s3
20401556:	2e09                	jal	20401868 <_printf_i>
20401558:	bfd9                	j	2040152e <_vfiprintf_r+0x26c>

2040155a <_sbrk_r>:
_sbrk_r():
2040155a:	1141                	addi	sp,sp,-16
2040155c:	c422                	sw	s0,8(sp)
2040155e:	842a                	mv	s0,a0
20401560:	852e                	mv	a0,a1
20401562:	5fc01797          	auipc	a5,0x5fc01
20401566:	2207a523          	sw	zero,554(a5) # 8000278c <errno>
2040156a:	c606                	sw	ra,12(sp)
2040156c:	2579                	jal	20401bfa <_sbrk>
2040156e:	57fd                	li	a5,-1
20401570:	00f51963          	bne	a0,a5,20401582 <_sbrk_r+0x28>
20401574:	5fc01797          	auipc	a5,0x5fc01
20401578:	21878793          	addi	a5,a5,536 # 8000278c <errno>
2040157c:	439c                	lw	a5,0(a5)
2040157e:	c391                	beqz	a5,20401582 <_sbrk_r+0x28>
20401580:	c01c                	sw	a5,0(s0)
20401582:	40b2                	lw	ra,12(sp)
20401584:	4422                	lw	s0,8(sp)
20401586:	0141                	addi	sp,sp,16
20401588:	8082                	ret

2040158a <__sread>:
__sread():
2040158a:	1141                	addi	sp,sp,-16
2040158c:	c422                	sw	s0,8(sp)
2040158e:	842e                	mv	s0,a1
20401590:	00e59583          	lh	a1,14(a1)
20401594:	c606                	sw	ra,12(sp)
20401596:	2b95                	jal	20401b0a <_read_r>
20401598:	00054963          	bltz	a0,204015aa <__sread+0x20>
2040159c:	487c                	lw	a5,84(s0)
2040159e:	97aa                	add	a5,a5,a0
204015a0:	c87c                	sw	a5,84(s0)
204015a2:	40b2                	lw	ra,12(sp)
204015a4:	4422                	lw	s0,8(sp)
204015a6:	0141                	addi	sp,sp,16
204015a8:	8082                	ret
204015aa:	00c45783          	lhu	a5,12(s0)
204015ae:	777d                	lui	a4,0xfffff
204015b0:	177d                	addi	a4,a4,-1
204015b2:	8ff9                	and	a5,a5,a4
204015b4:	00f41623          	sh	a5,12(s0)
204015b8:	b7ed                	j	204015a2 <__sread+0x18>

204015ba <__swrite>:
__swrite():
204015ba:	00c5d783          	lhu	a5,12(a1)
204015be:	1101                	addi	sp,sp,-32
204015c0:	cc22                	sw	s0,24(sp)
204015c2:	ca26                	sw	s1,20(sp)
204015c4:	c84a                	sw	s2,16(sp)
204015c6:	c64e                	sw	s3,12(sp)
204015c8:	ce06                	sw	ra,28(sp)
204015ca:	1007f793          	andi	a5,a5,256
204015ce:	84aa                	mv	s1,a0
204015d0:	842e                	mv	s0,a1
204015d2:	8932                	mv	s2,a2
204015d4:	89b6                	mv	s3,a3
204015d6:	c791                	beqz	a5,204015e2 <__swrite+0x28>
204015d8:	00e59583          	lh	a1,14(a1)
204015dc:	4689                	li	a3,2
204015de:	4601                	li	a2,0
204015e0:	222d                	jal	2040170a <_lseek_r>
204015e2:	00c45783          	lhu	a5,12(s0)
204015e6:	777d                	lui	a4,0xfffff
204015e8:	177d                	addi	a4,a4,-1
204015ea:	8ff9                	and	a5,a5,a4
204015ec:	00f41623          	sh	a5,12(s0)
204015f0:	00e41583          	lh	a1,14(s0)
204015f4:	4462                	lw	s0,24(sp)
204015f6:	40f2                	lw	ra,28(sp)
204015f8:	86ce                	mv	a3,s3
204015fa:	864a                	mv	a2,s2
204015fc:	49b2                	lw	s3,12(sp)
204015fe:	4942                	lw	s2,16(sp)
20401600:	8526                	mv	a0,s1
20401602:	44d2                	lw	s1,20(sp)
20401604:	6105                	addi	sp,sp,32
20401606:	a83d                	j	20401644 <_write_r>

20401608 <__sseek>:
__sseek():
20401608:	1141                	addi	sp,sp,-16
2040160a:	c422                	sw	s0,8(sp)
2040160c:	842e                	mv	s0,a1
2040160e:	00e59583          	lh	a1,14(a1)
20401612:	c606                	sw	ra,12(sp)
20401614:	28dd                	jal	2040170a <_lseek_r>
20401616:	57fd                	li	a5,-1
20401618:	00c45703          	lhu	a4,12(s0)
2040161c:	00f51b63          	bne	a0,a5,20401632 <__sseek+0x2a>
20401620:	77fd                	lui	a5,0xfffff
20401622:	17fd                	addi	a5,a5,-1
20401624:	8ff9                	and	a5,a5,a4
20401626:	00f41623          	sh	a5,12(s0)
2040162a:	40b2                	lw	ra,12(sp)
2040162c:	4422                	lw	s0,8(sp)
2040162e:	0141                	addi	sp,sp,16
20401630:	8082                	ret
20401632:	6785                	lui	a5,0x1
20401634:	8fd9                	or	a5,a5,a4
20401636:	00f41623          	sh	a5,12(s0)
2040163a:	c868                	sw	a0,84(s0)
2040163c:	b7fd                	j	2040162a <__sseek+0x22>

2040163e <__sclose>:
__sclose():
2040163e:	00e59583          	lh	a1,14(a1)
20401642:	a81d                	j	20401678 <_close_r>

20401644 <_write_r>:
_write_r():
20401644:	1141                	addi	sp,sp,-16
20401646:	c422                	sw	s0,8(sp)
20401648:	842a                	mv	s0,a0
2040164a:	852e                	mv	a0,a1
2040164c:	85b2                	mv	a1,a2
2040164e:	8636                	mv	a2,a3
20401650:	5fc01797          	auipc	a5,0x5fc01
20401654:	1207ae23          	sw	zero,316(a5) # 8000278c <errno>
20401658:	c606                	sw	ra,12(sp)
2040165a:	2d39                	jal	20401c78 <_write>
2040165c:	57fd                	li	a5,-1
2040165e:	00f51963          	bne	a0,a5,20401670 <_write_r+0x2c>
20401662:	5fc01797          	auipc	a5,0x5fc01
20401666:	12a78793          	addi	a5,a5,298 # 8000278c <errno>
2040166a:	439c                	lw	a5,0(a5)
2040166c:	c391                	beqz	a5,20401670 <_write_r+0x2c>
2040166e:	c01c                	sw	a5,0(s0)
20401670:	40b2                	lw	ra,12(sp)
20401672:	4422                	lw	s0,8(sp)
20401674:	0141                	addi	sp,sp,16
20401676:	8082                	ret

20401678 <_close_r>:
_close_r():
20401678:	1141                	addi	sp,sp,-16
2040167a:	c422                	sw	s0,8(sp)
2040167c:	842a                	mv	s0,a0
2040167e:	852e                	mv	a0,a1
20401680:	5fc01797          	auipc	a5,0x5fc01
20401684:	1007a623          	sw	zero,268(a5) # 8000278c <errno>
20401688:	c606                	sw	ra,12(sp)
2040168a:	2955                	jal	20401b3e <_close>
2040168c:	57fd                	li	a5,-1
2040168e:	00f51963          	bne	a0,a5,204016a0 <_close_r+0x28>
20401692:	5fc01797          	auipc	a5,0x5fc01
20401696:	0fa78793          	addi	a5,a5,250 # 8000278c <errno>
2040169a:	439c                	lw	a5,0(a5)
2040169c:	c391                	beqz	a5,204016a0 <_close_r+0x28>
2040169e:	c01c                	sw	a5,0(s0)
204016a0:	40b2                	lw	ra,12(sp)
204016a2:	4422                	lw	s0,8(sp)
204016a4:	0141                	addi	sp,sp,16
204016a6:	8082                	ret

204016a8 <_fstat_r>:
_fstat_r():
204016a8:	1141                	addi	sp,sp,-16
204016aa:	c422                	sw	s0,8(sp)
204016ac:	842a                	mv	s0,a0
204016ae:	852e                	mv	a0,a1
204016b0:	85b2                	mv	a1,a2
204016b2:	5fc01797          	auipc	a5,0x5fc01
204016b6:	0c07ad23          	sw	zero,218(a5) # 8000278c <errno>
204016ba:	c606                	sw	ra,12(sp)
204016bc:	2155                	jal	20401b60 <_fstat>
204016be:	57fd                	li	a5,-1
204016c0:	00f51963          	bne	a0,a5,204016d2 <_fstat_r+0x2a>
204016c4:	5fc01797          	auipc	a5,0x5fc01
204016c8:	0c878793          	addi	a5,a5,200 # 8000278c <errno>
204016cc:	439c                	lw	a5,0(a5)
204016ce:	c391                	beqz	a5,204016d2 <_fstat_r+0x2a>
204016d0:	c01c                	sw	a5,0(s0)
204016d2:	40b2                	lw	ra,12(sp)
204016d4:	4422                	lw	s0,8(sp)
204016d6:	0141                	addi	sp,sp,16
204016d8:	8082                	ret

204016da <_isatty_r>:
_isatty_r():
204016da:	1141                	addi	sp,sp,-16
204016dc:	c422                	sw	s0,8(sp)
204016de:	842a                	mv	s0,a0
204016e0:	852e                	mv	a0,a1
204016e2:	5fc01797          	auipc	a5,0x5fc01
204016e6:	0a07a523          	sw	zero,170(a5) # 8000278c <errno>
204016ea:	c606                	sw	ra,12(sp)
204016ec:	2969                	jal	20401b86 <_isatty>
204016ee:	57fd                	li	a5,-1
204016f0:	00f51963          	bne	a0,a5,20401702 <_isatty_r+0x28>
204016f4:	5fc01797          	auipc	a5,0x5fc01
204016f8:	09878793          	addi	a5,a5,152 # 8000278c <errno>
204016fc:	439c                	lw	a5,0(a5)
204016fe:	c391                	beqz	a5,20401702 <_isatty_r+0x28>
20401700:	c01c                	sw	a5,0(s0)
20401702:	40b2                	lw	ra,12(sp)
20401704:	4422                	lw	s0,8(sp)
20401706:	0141                	addi	sp,sp,16
20401708:	8082                	ret

2040170a <_lseek_r>:
_lseek_r():
2040170a:	1141                	addi	sp,sp,-16
2040170c:	c422                	sw	s0,8(sp)
2040170e:	842a                	mv	s0,a0
20401710:	852e                	mv	a0,a1
20401712:	85b2                	mv	a1,a2
20401714:	8636                	mv	a2,a3
20401716:	5fc01797          	auipc	a5,0x5fc01
2040171a:	0607ab23          	sw	zero,118(a5) # 8000278c <errno>
2040171e:	c606                	sw	ra,12(sp)
20401720:	2159                	jal	20401ba6 <_lseek>
20401722:	57fd                	li	a5,-1
20401724:	00f51963          	bne	a0,a5,20401736 <_lseek_r+0x2c>
20401728:	5fc01797          	auipc	a5,0x5fc01
2040172c:	06478793          	addi	a5,a5,100 # 8000278c <errno>
20401730:	439c                	lw	a5,0(a5)
20401732:	c391                	beqz	a5,20401736 <_lseek_r+0x2c>
20401734:	c01c                	sw	a5,0(s0)
20401736:	40b2                	lw	ra,12(sp)
20401738:	4422                	lw	s0,8(sp)
2040173a:	0141                	addi	sp,sp,16
2040173c:	8082                	ret

2040173e <memchr>:
memchr():
2040173e:	0ff5f593          	andi	a1,a1,255
20401742:	962a                	add	a2,a2,a0
20401744:	00c51463          	bne	a0,a2,2040174c <memchr+0xe>
20401748:	4501                	li	a0,0
2040174a:	8082                	ret
2040174c:	00054783          	lbu	a5,0(a0)
20401750:	feb78de3          	beq	a5,a1,2040174a <memchr+0xc>
20401754:	0505                	addi	a0,a0,1
20401756:	b7fd                	j	20401744 <memchr+0x6>

20401758 <__malloc_lock>:
__malloc_lock():
20401758:	8082                	ret

2040175a <__malloc_unlock>:
__malloc_unlock():
2040175a:	8082                	ret

2040175c <_printf_common>:
_printf_common():
2040175c:	7179                	addi	sp,sp,-48
2040175e:	ca56                	sw	s5,20(sp)
20401760:	499c                	lw	a5,16(a1)
20401762:	8aba                	mv	s5,a4
20401764:	4598                	lw	a4,8(a1)
20401766:	d422                	sw	s0,40(sp)
20401768:	d226                	sw	s1,36(sp)
2040176a:	ce4e                	sw	s3,28(sp)
2040176c:	cc52                	sw	s4,24(sp)
2040176e:	d606                	sw	ra,44(sp)
20401770:	d04a                	sw	s2,32(sp)
20401772:	c85a                	sw	s6,16(sp)
20401774:	c65e                	sw	s7,12(sp)
20401776:	89aa                	mv	s3,a0
20401778:	842e                	mv	s0,a1
2040177a:	84b2                	mv	s1,a2
2040177c:	8a36                	mv	s4,a3
2040177e:	00e7d363          	bge	a5,a4,20401784 <_printf_common+0x28>
20401782:	87ba                	mv	a5,a4
20401784:	c09c                	sw	a5,0(s1)
20401786:	04344703          	lbu	a4,67(s0)
2040178a:	c319                	beqz	a4,20401790 <_printf_common+0x34>
2040178c:	0785                	addi	a5,a5,1
2040178e:	c09c                	sw	a5,0(s1)
20401790:	401c                	lw	a5,0(s0)
20401792:	0207f793          	andi	a5,a5,32
20401796:	c781                	beqz	a5,2040179e <_printf_common+0x42>
20401798:	409c                	lw	a5,0(s1)
2040179a:	0789                	addi	a5,a5,2
2040179c:	c09c                	sw	a5,0(s1)
2040179e:	00042903          	lw	s2,0(s0)
204017a2:	00697913          	andi	s2,s2,6
204017a6:	00091a63          	bnez	s2,204017ba <_printf_common+0x5e>
204017aa:	01940b13          	addi	s6,s0,25
204017ae:	5bfd                	li	s7,-1
204017b0:	445c                	lw	a5,12(s0)
204017b2:	4098                	lw	a4,0(s1)
204017b4:	8f99                	sub	a5,a5,a4
204017b6:	04f94c63          	blt	s2,a5,2040180e <_printf_common+0xb2>
204017ba:	401c                	lw	a5,0(s0)
204017bc:	04344683          	lbu	a3,67(s0)
204017c0:	0207f793          	andi	a5,a5,32
204017c4:	00d036b3          	snez	a3,a3
204017c8:	eba5                	bnez	a5,20401838 <_printf_common+0xdc>
204017ca:	04340613          	addi	a2,s0,67
204017ce:	85d2                	mv	a1,s4
204017d0:	854e                	mv	a0,s3
204017d2:	9a82                	jalr	s5
204017d4:	57fd                	li	a5,-1
204017d6:	04f50363          	beq	a0,a5,2040181c <_printf_common+0xc0>
204017da:	401c                	lw	a5,0(s0)
204017dc:	4611                	li	a2,4
204017de:	4098                	lw	a4,0(s1)
204017e0:	8b99                	andi	a5,a5,6
204017e2:	4454                	lw	a3,12(s0)
204017e4:	4481                	li	s1,0
204017e6:	00c79763          	bne	a5,a2,204017f4 <_printf_common+0x98>
204017ea:	40e684b3          	sub	s1,a3,a4
204017ee:	0004d363          	bgez	s1,204017f4 <_printf_common+0x98>
204017f2:	4481                	li	s1,0
204017f4:	441c                	lw	a5,8(s0)
204017f6:	4818                	lw	a4,16(s0)
204017f8:	00f75463          	bge	a4,a5,20401800 <_printf_common+0xa4>
204017fc:	8f99                	sub	a5,a5,a4
204017fe:	94be                	add	s1,s1,a5
20401800:	4901                	li	s2,0
20401802:	0469                	addi	s0,s0,26
20401804:	5b7d                	li	s6,-1
20401806:	05249863          	bne	s1,s2,20401856 <_printf_common+0xfa>
2040180a:	4501                	li	a0,0
2040180c:	a809                	j	2040181e <_printf_common+0xc2>
2040180e:	4685                	li	a3,1
20401810:	865a                	mv	a2,s6
20401812:	85d2                	mv	a1,s4
20401814:	854e                	mv	a0,s3
20401816:	9a82                	jalr	s5
20401818:	01751e63          	bne	a0,s7,20401834 <_printf_common+0xd8>
2040181c:	557d                	li	a0,-1
2040181e:	50b2                	lw	ra,44(sp)
20401820:	5422                	lw	s0,40(sp)
20401822:	5492                	lw	s1,36(sp)
20401824:	5902                	lw	s2,32(sp)
20401826:	49f2                	lw	s3,28(sp)
20401828:	4a62                	lw	s4,24(sp)
2040182a:	4ad2                	lw	s5,20(sp)
2040182c:	4b42                	lw	s6,16(sp)
2040182e:	4bb2                	lw	s7,12(sp)
20401830:	6145                	addi	sp,sp,48
20401832:	8082                	ret
20401834:	0905                	addi	s2,s2,1
20401836:	bfad                	j	204017b0 <_printf_common+0x54>
20401838:	00d40733          	add	a4,s0,a3
2040183c:	03000613          	li	a2,48
20401840:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffbcb3>
20401844:	04544703          	lbu	a4,69(s0)
20401848:	00168793          	addi	a5,a3,1
2040184c:	97a2                	add	a5,a5,s0
2040184e:	0689                	addi	a3,a3,2
20401850:	04e781a3          	sb	a4,67(a5)
20401854:	bf9d                	j	204017ca <_printf_common+0x6e>
20401856:	4685                	li	a3,1
20401858:	8622                	mv	a2,s0
2040185a:	85d2                	mv	a1,s4
2040185c:	854e                	mv	a0,s3
2040185e:	9a82                	jalr	s5
20401860:	fb650ee3          	beq	a0,s6,2040181c <_printf_common+0xc0>
20401864:	0905                	addi	s2,s2,1
20401866:	b745                	j	20401806 <_printf_common+0xaa>

20401868 <_printf_i>:
_printf_i():
20401868:	7179                	addi	sp,sp,-48
2040186a:	d422                	sw	s0,40(sp)
2040186c:	d226                	sw	s1,36(sp)
2040186e:	d04a                	sw	s2,32(sp)
20401870:	ce4e                	sw	s3,28(sp)
20401872:	d606                	sw	ra,44(sp)
20401874:	cc52                	sw	s4,24(sp)
20401876:	ca56                	sw	s5,20(sp)
20401878:	c85a                	sw	s6,16(sp)
2040187a:	89b6                	mv	s3,a3
2040187c:	0185c683          	lbu	a3,24(a1)
20401880:	06e00793          	li	a5,110
20401884:	8932                	mv	s2,a2
20401886:	84aa                	mv	s1,a0
20401888:	842e                	mv	s0,a1
2040188a:	04358613          	addi	a2,a1,67
2040188e:	1ef68063          	beq	a3,a5,20401a6e <_printf_i+0x206>
20401892:	06d7e263          	bltu	a5,a3,204018f6 <_printf_i+0x8e>
20401896:	06300793          	li	a5,99
2040189a:	0af68263          	beq	a3,a5,2040193e <_printf_i+0xd6>
2040189e:	00d7ed63          	bltu	a5,a3,204018b8 <_printf_i+0x50>
204018a2:	1e068a63          	beqz	a3,20401a96 <_printf_i+0x22e>
204018a6:	05800793          	li	a5,88
204018aa:	16f68663          	beq	a3,a5,20401a16 <_printf_i+0x1ae>
204018ae:	04240a93          	addi	s5,s0,66
204018b2:	04d40123          	sb	a3,66(s0)
204018b6:	a869                	j	20401950 <_printf_i+0xe8>
204018b8:	06400793          	li	a5,100
204018bc:	00f68663          	beq	a3,a5,204018c8 <_printf_i+0x60>
204018c0:	06900793          	li	a5,105
204018c4:	fef695e3          	bne	a3,a5,204018ae <_printf_i+0x46>
204018c8:	401c                	lw	a5,0(s0)
204018ca:	4308                	lw	a0,0(a4)
204018cc:	0807f693          	andi	a3,a5,128
204018d0:	00450593          	addi	a1,a0,4
204018d4:	c2c1                	beqz	a3,20401954 <_printf_i+0xec>
204018d6:	411c                	lw	a5,0(a0)
204018d8:	c30c                	sw	a1,0(a4)
204018da:	0007d863          	bgez	a5,204018ea <_printf_i+0x82>
204018de:	02d00713          	li	a4,45
204018e2:	40f007b3          	neg	a5,a5
204018e6:	04e401a3          	sb	a4,67(s0)
204018ea:	00004697          	auipc	a3,0x4
204018ee:	e6668693          	addi	a3,a3,-410 # 20405750 <__sf_fake_stdout+0x34>
204018f2:	4729                	li	a4,10
204018f4:	a065                	j	2040199c <_printf_i+0x134>
204018f6:	07300793          	li	a5,115
204018fa:	1af68263          	beq	a3,a5,20401a9e <_printf_i+0x236>
204018fe:	00d7ef63          	bltu	a5,a3,2040191c <_printf_i+0xb4>
20401902:	06f00793          	li	a5,111
20401906:	04f68f63          	beq	a3,a5,20401964 <_printf_i+0xfc>
2040190a:	07000793          	li	a5,112
2040190e:	faf690e3          	bne	a3,a5,204018ae <_printf_i+0x46>
20401912:	419c                	lw	a5,0(a1)
20401914:	0207e793          	ori	a5,a5,32
20401918:	c19c                	sw	a5,0(a1)
2040191a:	a809                	j	2040192c <_printf_i+0xc4>
2040191c:	07500793          	li	a5,117
20401920:	04f68263          	beq	a3,a5,20401964 <_printf_i+0xfc>
20401924:	07800793          	li	a5,120
20401928:	f8f693e3          	bne	a3,a5,204018ae <_printf_i+0x46>
2040192c:	07800793          	li	a5,120
20401930:	04f402a3          	sb	a5,69(s0)
20401934:	00004697          	auipc	a3,0x4
20401938:	e3068693          	addi	a3,a3,-464 # 20405764 <__sf_fake_stdout+0x48>
2040193c:	a0dd                	j	20401a22 <_printf_i+0x1ba>
2040193e:	431c                	lw	a5,0(a4)
20401940:	04258a93          	addi	s5,a1,66
20401944:	00478693          	addi	a3,a5,4
20401948:	439c                	lw	a5,0(a5)
2040194a:	c314                	sw	a3,0(a4)
2040194c:	04f58123          	sb	a5,66(a1)
20401950:	4785                	li	a5,1
20401952:	a2ad                	j	20401abc <_printf_i+0x254>
20401954:	0407f693          	andi	a3,a5,64
20401958:	411c                	lw	a5,0(a0)
2040195a:	c30c                	sw	a1,0(a4)
2040195c:	debd                	beqz	a3,204018da <_printf_i+0x72>
2040195e:	07c2                	slli	a5,a5,0x10
20401960:	87c1                	srai	a5,a5,0x10
20401962:	bfa5                	j	204018da <_printf_i+0x72>
20401964:	400c                	lw	a1,0(s0)
20401966:	431c                	lw	a5,0(a4)
20401968:	0805f813          	andi	a6,a1,128
2040196c:	00478513          	addi	a0,a5,4
20401970:	00080563          	beqz	a6,2040197a <_printf_i+0x112>
20401974:	c308                	sw	a0,0(a4)
20401976:	439c                	lw	a5,0(a5)
20401978:	a039                	j	20401986 <_printf_i+0x11e>
2040197a:	0405f593          	andi	a1,a1,64
2040197e:	c308                	sw	a0,0(a4)
20401980:	d9fd                	beqz	a1,20401976 <_printf_i+0x10e>
20401982:	0007d783          	lhu	a5,0(a5)
20401986:	06f00713          	li	a4,111
2040198a:	0ce68a63          	beq	a3,a4,20401a5e <_printf_i+0x1f6>
2040198e:	00004697          	auipc	a3,0x4
20401992:	dc268693          	addi	a3,a3,-574 # 20405750 <__sf_fake_stdout+0x34>
20401996:	4729                	li	a4,10
20401998:	040401a3          	sb	zero,67(s0)
2040199c:	404c                	lw	a1,4(s0)
2040199e:	c40c                	sw	a1,8(s0)
204019a0:	0005c563          	bltz	a1,204019aa <_printf_i+0x142>
204019a4:	4008                	lw	a0,0(s0)
204019a6:	996d                	andi	a0,a0,-5
204019a8:	c008                	sw	a0,0(s0)
204019aa:	e399                	bnez	a5,204019b0 <_printf_i+0x148>
204019ac:	8ab2                	mv	s5,a2
204019ae:	cd91                	beqz	a1,204019ca <_printf_i+0x162>
204019b0:	8ab2                	mv	s5,a2
204019b2:	02e7f5b3          	remu	a1,a5,a4
204019b6:	1afd                	addi	s5,s5,-1
204019b8:	95b6                	add	a1,a1,a3
204019ba:	0005c583          	lbu	a1,0(a1)
204019be:	00ba8023          	sb	a1,0(s5)
204019c2:	02e7d5b3          	divu	a1,a5,a4
204019c6:	0ae7f263          	bgeu	a5,a4,20401a6a <_printf_i+0x202>
204019ca:	47a1                	li	a5,8
204019cc:	00f71e63          	bne	a4,a5,204019e8 <_printf_i+0x180>
204019d0:	401c                	lw	a5,0(s0)
204019d2:	8b85                	andi	a5,a5,1
204019d4:	cb91                	beqz	a5,204019e8 <_printf_i+0x180>
204019d6:	4058                	lw	a4,4(s0)
204019d8:	481c                	lw	a5,16(s0)
204019da:	00e7c763          	blt	a5,a4,204019e8 <_printf_i+0x180>
204019de:	03000793          	li	a5,48
204019e2:	fefa8fa3          	sb	a5,-1(s5)
204019e6:	1afd                	addi	s5,s5,-1
204019e8:	41560633          	sub	a2,a2,s5
204019ec:	c810                	sw	a2,16(s0)
204019ee:	874e                	mv	a4,s3
204019f0:	86ca                	mv	a3,s2
204019f2:	0070                	addi	a2,sp,12
204019f4:	85a2                	mv	a1,s0
204019f6:	8526                	mv	a0,s1
204019f8:	3395                	jal	2040175c <_printf_common>
204019fa:	5a7d                	li	s4,-1
204019fc:	0d451463          	bne	a0,s4,20401ac4 <_printf_i+0x25c>
20401a00:	557d                	li	a0,-1
20401a02:	50b2                	lw	ra,44(sp)
20401a04:	5422                	lw	s0,40(sp)
20401a06:	5492                	lw	s1,36(sp)
20401a08:	5902                	lw	s2,32(sp)
20401a0a:	49f2                	lw	s3,28(sp)
20401a0c:	4a62                	lw	s4,24(sp)
20401a0e:	4ad2                	lw	s5,20(sp)
20401a10:	4b42                	lw	s6,16(sp)
20401a12:	6145                	addi	sp,sp,48
20401a14:	8082                	ret
20401a16:	04d582a3          	sb	a3,69(a1)
20401a1a:	00004697          	auipc	a3,0x4
20401a1e:	d3668693          	addi	a3,a3,-714 # 20405750 <__sf_fake_stdout+0x34>
20401a22:	400c                	lw	a1,0(s0)
20401a24:	4308                	lw	a0,0(a4)
20401a26:	0805f813          	andi	a6,a1,128
20401a2a:	411c                	lw	a5,0(a0)
20401a2c:	0511                	addi	a0,a0,4
20401a2e:	02080063          	beqz	a6,20401a4e <_printf_i+0x1e6>
20401a32:	c308                	sw	a0,0(a4)
20401a34:	0015f713          	andi	a4,a1,1
20401a38:	c701                	beqz	a4,20401a40 <_printf_i+0x1d8>
20401a3a:	0205e593          	ori	a1,a1,32
20401a3e:	c00c                	sw	a1,0(s0)
20401a40:	4741                	li	a4,16
20401a42:	fbb9                	bnez	a5,20401998 <_printf_i+0x130>
20401a44:	400c                	lw	a1,0(s0)
20401a46:	fdf5f593          	andi	a1,a1,-33
20401a4a:	c00c                	sw	a1,0(s0)
20401a4c:	b7b1                	j	20401998 <_printf_i+0x130>
20401a4e:	0405f813          	andi	a6,a1,64
20401a52:	c308                	sw	a0,0(a4)
20401a54:	fe0800e3          	beqz	a6,20401a34 <_printf_i+0x1cc>
20401a58:	07c2                	slli	a5,a5,0x10
20401a5a:	83c1                	srli	a5,a5,0x10
20401a5c:	bfe1                	j	20401a34 <_printf_i+0x1cc>
20401a5e:	00004697          	auipc	a3,0x4
20401a62:	cf268693          	addi	a3,a3,-782 # 20405750 <__sf_fake_stdout+0x34>
20401a66:	4721                	li	a4,8
20401a68:	bf05                	j	20401998 <_printf_i+0x130>
20401a6a:	87ae                	mv	a5,a1
20401a6c:	b799                	j	204019b2 <_printf_i+0x14a>
20401a6e:	4194                	lw	a3,0(a1)
20401a70:	431c                	lw	a5,0(a4)
20401a72:	49cc                	lw	a1,20(a1)
20401a74:	0806f813          	andi	a6,a3,128
20401a78:	00478513          	addi	a0,a5,4
20401a7c:	00080663          	beqz	a6,20401a88 <_printf_i+0x220>
20401a80:	c308                	sw	a0,0(a4)
20401a82:	439c                	lw	a5,0(a5)
20401a84:	c38c                	sw	a1,0(a5)
20401a86:	a801                	j	20401a96 <_printf_i+0x22e>
20401a88:	c308                	sw	a0,0(a4)
20401a8a:	0406f693          	andi	a3,a3,64
20401a8e:	439c                	lw	a5,0(a5)
20401a90:	daf5                	beqz	a3,20401a84 <_printf_i+0x21c>
20401a92:	00b79023          	sh	a1,0(a5)
20401a96:	00042823          	sw	zero,16(s0)
20401a9a:	8ab2                	mv	s5,a2
20401a9c:	bf89                	j	204019ee <_printf_i+0x186>
20401a9e:	431c                	lw	a5,0(a4)
20401aa0:	41d0                	lw	a2,4(a1)
20401aa2:	4581                	li	a1,0
20401aa4:	00478693          	addi	a3,a5,4
20401aa8:	c314                	sw	a3,0(a4)
20401aaa:	0007aa83          	lw	s5,0(a5)
20401aae:	8556                	mv	a0,s5
20401ab0:	3179                	jal	2040173e <memchr>
20401ab2:	c501                	beqz	a0,20401aba <_printf_i+0x252>
20401ab4:	41550533          	sub	a0,a0,s5
20401ab8:	c048                	sw	a0,4(s0)
20401aba:	405c                	lw	a5,4(s0)
20401abc:	c81c                	sw	a5,16(s0)
20401abe:	040401a3          	sb	zero,67(s0)
20401ac2:	b735                	j	204019ee <_printf_i+0x186>
20401ac4:	4814                	lw	a3,16(s0)
20401ac6:	8656                	mv	a2,s5
20401ac8:	85ca                	mv	a1,s2
20401aca:	8526                	mv	a0,s1
20401acc:	9982                	jalr	s3
20401ace:	f34509e3          	beq	a0,s4,20401a00 <_printf_i+0x198>
20401ad2:	401c                	lw	a5,0(s0)
20401ad4:	8b89                	andi	a5,a5,2
20401ad6:	e78d                	bnez	a5,20401b00 <_printf_i+0x298>
20401ad8:	47b2                	lw	a5,12(sp)
20401ada:	4448                	lw	a0,12(s0)
20401adc:	f2f553e3          	bge	a0,a5,20401a02 <_printf_i+0x19a>
20401ae0:	853e                	mv	a0,a5
20401ae2:	b705                	j	20401a02 <_printf_i+0x19a>
20401ae4:	4685                	li	a3,1
20401ae6:	8656                	mv	a2,s5
20401ae8:	85ca                	mv	a1,s2
20401aea:	8526                	mv	a0,s1
20401aec:	9982                	jalr	s3
20401aee:	f16509e3          	beq	a0,s6,20401a00 <_printf_i+0x198>
20401af2:	0a05                	addi	s4,s4,1
20401af4:	445c                	lw	a5,12(s0)
20401af6:	4732                	lw	a4,12(sp)
20401af8:	8f99                	sub	a5,a5,a4
20401afa:	fefa45e3          	blt	s4,a5,20401ae4 <_printf_i+0x27c>
20401afe:	bfe9                	j	20401ad8 <_printf_i+0x270>
20401b00:	4a01                	li	s4,0
20401b02:	01940a93          	addi	s5,s0,25
20401b06:	5b7d                	li	s6,-1
20401b08:	b7f5                	j	20401af4 <_printf_i+0x28c>

20401b0a <_read_r>:
_read_r():
20401b0a:	1141                	addi	sp,sp,-16
20401b0c:	c422                	sw	s0,8(sp)
20401b0e:	842a                	mv	s0,a0
20401b10:	852e                	mv	a0,a1
20401b12:	85b2                	mv	a1,a2
20401b14:	8636                	mv	a2,a3
20401b16:	5fc01797          	auipc	a5,0x5fc01
20401b1a:	c607ab23          	sw	zero,-906(a5) # 8000278c <errno>
20401b1e:	c606                	sw	ra,12(sp)
20401b20:	2845                	jal	20401bd0 <_read>
20401b22:	57fd                	li	a5,-1
20401b24:	00f51963          	bne	a0,a5,20401b36 <_read_r+0x2c>
20401b28:	5fc01797          	auipc	a5,0x5fc01
20401b2c:	c6478793          	addi	a5,a5,-924 # 8000278c <errno>
20401b30:	439c                	lw	a5,0(a5)
20401b32:	c391                	beqz	a5,20401b36 <_read_r+0x2c>
20401b34:	c01c                	sw	a5,0(s0)
20401b36:	40b2                	lw	ra,12(sp)
20401b38:	4422                	lw	s0,8(sp)
20401b3a:	0141                	addi	sp,sp,16
20401b3c:	8082                	ret

20401b3e <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20401b3e:	1101                	addi	sp,sp,-32
20401b40:	ce06                	sw	ra,28(sp)
20401b42:	cc22                	sw	s0,24(sp)
20401b44:	1000                	addi	s0,sp,32
20401b46:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20401b4a:	225d                	jal	20401cf0 <__errno>
20401b4c:	872a                	mv	a4,a0
20401b4e:	05800793          	li	a5,88
20401b52:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20401b54:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20401b56:	853e                	mv	a0,a5
20401b58:	40f2                	lw	ra,28(sp)
20401b5a:	4462                	lw	s0,24(sp)
20401b5c:	6105                	addi	sp,sp,32
20401b5e:	8082                	ret

20401b60 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20401b60:	1101                	addi	sp,sp,-32
20401b62:	ce06                	sw	ra,28(sp)
20401b64:	cc22                	sw	s0,24(sp)
20401b66:	1000                	addi	s0,sp,32
20401b68:	fea42623          	sw	a0,-20(s0)
20401b6c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401b70:	2241                	jal	20401cf0 <__errno>
20401b72:	872a                	mv	a4,a0
20401b74:	fa800793          	li	a5,-88
20401b78:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20401b7a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20401b7c:	853e                	mv	a0,a5
20401b7e:	40f2                	lw	ra,28(sp)
20401b80:	4462                	lw	s0,24(sp)
20401b82:	6105                	addi	sp,sp,32
20401b84:	8082                	ret

20401b86 <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20401b86:	1101                	addi	sp,sp,-32
20401b88:	ce22                	sw	s0,28(sp)
20401b8a:	1000                	addi	s0,sp,32
20401b8c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401b90:	fec42783          	lw	a5,-20(s0)
20401b94:	17fd                	addi	a5,a5,-1
20401b96:	0017b793          	seqz	a5,a5
20401b9a:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20401b9e:	853e                	mv	a0,a5
20401ba0:	4472                	lw	s0,28(sp)
20401ba2:	6105                	addi	sp,sp,32
20401ba4:	8082                	ret

20401ba6 <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20401ba6:	1101                	addi	sp,sp,-32
20401ba8:	ce06                	sw	ra,28(sp)
20401baa:	cc22                	sw	s0,24(sp)
20401bac:	1000                	addi	s0,sp,32
20401bae:	fea42623          	sw	a0,-20(s0)
20401bb2:	feb42423          	sw	a1,-24(s0)
20401bb6:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20401bba:	2a1d                	jal	20401cf0 <__errno>
20401bbc:	872a                	mv	a4,a0
20401bbe:	05800793          	li	a5,88
20401bc2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20401bc4:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20401bc6:	853e                	mv	a0,a5
20401bc8:	40f2                	lw	ra,28(sp)
20401bca:	4462                	lw	s0,24(sp)
20401bcc:	6105                	addi	sp,sp,32
20401bce:	8082                	ret

20401bd0 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20401bd0:	1101                	addi	sp,sp,-32
20401bd2:	ce06                	sw	ra,28(sp)
20401bd4:	cc22                	sw	s0,24(sp)
20401bd6:	1000                	addi	s0,sp,32
20401bd8:	fea42623          	sw	a0,-20(s0)
20401bdc:	feb42423          	sw	a1,-24(s0)
20401be0:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20401be4:	2231                	jal	20401cf0 <__errno>
20401be6:	872a                	mv	a4,a0
20401be8:	05800793          	li	a5,88
20401bec:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20401bee:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20401bf0:	853e                	mv	a0,a5
20401bf2:	40f2                	lw	ra,28(sp)
20401bf4:	4462                	lw	s0,24(sp)
20401bf6:	6105                	addi	sp,sp,32
20401bf8:	8082                	ret

20401bfa <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20401bfa:	7179                	addi	sp,sp,-48
20401bfc:	d622                	sw	s0,44(sp)
20401bfe:	1800                	addi	s0,sp,48
20401c00:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20401c04:	800017b7          	lui	a5,0x80001
20401c08:	7107a783          	lw	a5,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe380>
20401c0c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20401c10:	800037b7          	lui	a5,0x80003
20401c14:	b9078713          	addi	a4,a5,-1136 # 80002b90 <metal_segment_heap_target_end+0xfffff800>
20401c18:	800037b7          	lui	a5,0x80003
20401c1c:	39078793          	addi	a5,a5,912 # 80003390 <metal_segment_heap_target_end+0x0>
20401c20:	00f71463          	bne	a4,a5,20401c28 <_sbrk+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20401c24:	57fd                	li	a5,-1
20401c26:	a0a9                	j	20401c70 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20401c28:	800017b7          	lui	a5,0x80001
20401c2c:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe380>
20401c30:	fdc42783          	lw	a5,-36(s0)
20401c34:	973e                	add	a4,a4,a5
20401c36:	800037b7          	lui	a5,0x80003
20401c3a:	39078793          	addi	a5,a5,912 # 80003390 <metal_segment_heap_target_end+0x0>
20401c3e:	02f77063          	bgeu	a4,a5,20401c5e <_sbrk+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20401c42:	800017b7          	lui	a5,0x80001
20401c46:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe380>
20401c4a:	fdc42783          	lw	a5,-36(s0)
20401c4e:	973e                	add	a4,a4,a5
20401c50:	800017b7          	lui	a5,0x80001
20401c54:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe380>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20401c58:	fec42783          	lw	a5,-20(s0)
20401c5c:	a811                	j	20401c70 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20401c5e:	800017b7          	lui	a5,0x80001
20401c62:	80003737          	lui	a4,0x80003
20401c66:	39070713          	addi	a4,a4,912 # 80003390 <metal_segment_heap_target_end+0x0>
20401c6a:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe380>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20401c6e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20401c70:	853e                	mv	a0,a5
20401c72:	5432                	lw	s0,44(sp)
20401c74:	6145                	addi	sp,sp,48
20401c76:	8082                	ret

20401c78 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20401c78:	7179                	addi	sp,sp,-48
20401c7a:	d606                	sw	ra,44(sp)
20401c7c:	d422                	sw	s0,40(sp)
20401c7e:	1800                	addi	s0,sp,48
20401c80:	fca42e23          	sw	a0,-36(s0)
20401c84:	fcb42c23          	sw	a1,-40(s0)
20401c88:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20401c8c:	fdc42703          	lw	a4,-36(s0)
20401c90:	4785                	li	a5,1
20401c92:	00f70963          	beq	a4,a5,20401ca4 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20401c96:	28a9                	jal	20401cf0 <__errno>
20401c98:	872a                	mv	a4,a0
20401c9a:	05800793          	li	a5,88
20401c9e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20401ca0:	57fd                	li	a5,-1
20401ca2:	a82d                	j	20401cdc <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20401ca4:	fd842783          	lw	a5,-40(s0)
20401ca8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20401cac:	fe042623          	sw	zero,-20(s0)
20401cb0:	a839                	j	20401cce <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20401cb2:	fe842703          	lw	a4,-24(s0)
20401cb6:	fec42783          	lw	a5,-20(s0)
20401cba:	97ba                	add	a5,a5,a4
20401cbc:	0007c783          	lbu	a5,0(a5)
20401cc0:	853e                	mv	a0,a5
20401cc2:	2cb1                	jal	20401f1e <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20401cc4:	fec42783          	lw	a5,-20(s0)
20401cc8:	0785                	addi	a5,a5,1
20401cca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20401cce:	fec42703          	lw	a4,-20(s0)
20401cd2:	fd442783          	lw	a5,-44(s0)
20401cd6:	fcf76ee3          	bltu	a4,a5,20401cb2 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20401cda:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20401cdc:	853e                	mv	a0,a5
20401cde:	50b2                	lw	ra,44(sp)
20401ce0:	5422                	lw	s0,40(sp)
20401ce2:	6145                	addi	sp,sp,48
20401ce4:	8082                	ret

20401ce6 <atexit>:
atexit():
20401ce6:	85aa                	mv	a1,a0
20401ce8:	4681                	li	a3,0
20401cea:	4601                	li	a2,0
20401cec:	4501                	li	a0,0
20401cee:	a8f1                	j	20401dca <__register_exitproc>

20401cf0 <__errno>:
__errno():
20401cf0:	5fc00797          	auipc	a5,0x5fc00
20401cf4:	a1878793          	addi	a5,a5,-1512 # 80001708 <_impure_ptr>
20401cf8:	4388                	lw	a0,0(a5)
20401cfa:	8082                	ret

20401cfc <exit>:
exit():
20401cfc:	1141                	addi	sp,sp,-16
20401cfe:	c422                	sw	s0,8(sp)
20401d00:	c606                	sw	ra,12(sp)
20401d02:	00000797          	auipc	a5,0x0
20401d06:	15478793          	addi	a5,a5,340 # 20401e56 <__call_exitprocs>
20401d0a:	842a                	mv	s0,a0
20401d0c:	c399                	beqz	a5,20401d12 <exit+0x16>
20401d0e:	4581                	li	a1,0
20401d10:	2299                	jal	20401e56 <__call_exitprocs>
20401d12:	5fc00797          	auipc	a5,0x5fc00
20401d16:	9fa78793          	addi	a5,a5,-1542 # 8000170c <_global_impure_ptr>
20401d1a:	4388                	lw	a0,0(a5)
20401d1c:	551c                	lw	a5,40(a0)
20401d1e:	c391                	beqz	a5,20401d22 <exit+0x26>
20401d20:	9782                	jalr	a5
20401d22:	8522                	mv	a0,s0
20401d24:	04b030ef          	jal	ra,2040556e <_exit>

20401d28 <__libc_fini_array>:
__libc_fini_array():
20401d28:	1141                	addi	sp,sp,-16
20401d2a:	00004797          	auipc	a5,0x4
20401d2e:	da278793          	addi	a5,a5,-606 # 20405acc <__fini_array_end>
20401d32:	c422                	sw	s0,8(sp)
20401d34:	00004417          	auipc	s0,0x4
20401d38:	d9840413          	addi	s0,s0,-616 # 20405acc <__fini_array_end>
20401d3c:	8c1d                	sub	s0,s0,a5
20401d3e:	c226                	sw	s1,4(sp)
20401d40:	c606                	sw	ra,12(sp)
20401d42:	8409                	srai	s0,s0,0x2
20401d44:	84be                	mv	s1,a5
20401d46:	e411                	bnez	s0,20401d52 <__libc_fini_array+0x2a>
20401d48:	40b2                	lw	ra,12(sp)
20401d4a:	4422                	lw	s0,8(sp)
20401d4c:	4492                	lw	s1,4(sp)
20401d4e:	0141                	addi	sp,sp,16
20401d50:	8082                	ret
20401d52:	147d                	addi	s0,s0,-1
20401d54:	00241793          	slli	a5,s0,0x2
20401d58:	97a6                	add	a5,a5,s1
20401d5a:	439c                	lw	a5,0(a5)
20401d5c:	9782                	jalr	a5
20401d5e:	b7e5                	j	20401d46 <__libc_fini_array+0x1e>

20401d60 <__libc_init_array>:
__libc_init_array():
20401d60:	1141                	addi	sp,sp,-16
20401d62:	00004797          	auipc	a5,0x4
20401d66:	d6678793          	addi	a5,a5,-666 # 20405ac8 <__init_array_start>
20401d6a:	c422                	sw	s0,8(sp)
20401d6c:	00004417          	auipc	s0,0x4
20401d70:	d5c40413          	addi	s0,s0,-676 # 20405ac8 <__init_array_start>
20401d74:	8c1d                	sub	s0,s0,a5
20401d76:	c226                	sw	s1,4(sp)
20401d78:	c04a                	sw	s2,0(sp)
20401d7a:	c606                	sw	ra,12(sp)
20401d7c:	8409                	srai	s0,s0,0x2
20401d7e:	4481                	li	s1,0
20401d80:	893e                	mv	s2,a5
20401d82:	02849663          	bne	s1,s0,20401dae <__libc_init_array+0x4e>
20401d86:	00004797          	auipc	a5,0x4
20401d8a:	d4278793          	addi	a5,a5,-702 # 20405ac8 <__init_array_start>
20401d8e:	00004417          	auipc	s0,0x4
20401d92:	d3e40413          	addi	s0,s0,-706 # 20405acc <__fini_array_end>
20401d96:	8c1d                	sub	s0,s0,a5
20401d98:	8409                	srai	s0,s0,0x2
20401d9a:	4481                	li	s1,0
20401d9c:	893e                	mv	s2,a5
20401d9e:	00849f63          	bne	s1,s0,20401dbc <__libc_init_array+0x5c>
20401da2:	40b2                	lw	ra,12(sp)
20401da4:	4422                	lw	s0,8(sp)
20401da6:	4492                	lw	s1,4(sp)
20401da8:	4902                	lw	s2,0(sp)
20401daa:	0141                	addi	sp,sp,16
20401dac:	8082                	ret
20401dae:	00249793          	slli	a5,s1,0x2
20401db2:	97ca                	add	a5,a5,s2
20401db4:	439c                	lw	a5,0(a5)
20401db6:	0485                	addi	s1,s1,1
20401db8:	9782                	jalr	a5
20401dba:	b7e1                	j	20401d82 <__libc_init_array+0x22>
20401dbc:	00249793          	slli	a5,s1,0x2
20401dc0:	97ca                	add	a5,a5,s2
20401dc2:	439c                	lw	a5,0(a5)
20401dc4:	0485                	addi	s1,s1,1
20401dc6:	9782                	jalr	a5
20401dc8:	bfd9                	j	20401d9e <__libc_init_array+0x3e>

20401dca <__register_exitproc>:
__register_exitproc():
20401dca:	5fc00797          	auipc	a5,0x5fc00
20401dce:	97278793          	addi	a5,a5,-1678 # 8000173c <_global_atexit>
20401dd2:	439c                	lw	a5,0(a5)
20401dd4:	8e2a                	mv	t3,a0
20401dd6:	e78d                	bnez	a5,20401e00 <__register_exitproc+0x36>
20401dd8:	5fc01717          	auipc	a4,0x5fc01
20401ddc:	92870713          	addi	a4,a4,-1752 # 80002700 <_global_atexit0>
20401de0:	5fc00797          	auipc	a5,0x5fc00
20401de4:	94e7ae23          	sw	a4,-1700(a5) # 8000173c <_global_atexit>
20401de8:	dfbfe517          	auipc	a0,0xdfbfe
20401dec:	21850513          	addi	a0,a0,536 # 0 <__metal_boot_hart>
20401df0:	87ba                	mv	a5,a4
20401df2:	c519                	beqz	a0,20401e00 <__register_exitproc+0x36>
20401df4:	411c                	lw	a5,0(a0)
20401df6:	5fc01517          	auipc	a0,0x5fc01
20401dfa:	98f52923          	sw	a5,-1646(a0) # 80002788 <_global_atexit0+0x88>
20401dfe:	87ba                	mv	a5,a4
20401e00:	43d8                	lw	a4,4(a5)
20401e02:	487d                	li	a6,31
20401e04:	557d                	li	a0,-1
20401e06:	04e84763          	blt	a6,a4,20401e54 <__register_exitproc+0x8a>
20401e0a:	020e0e63          	beqz	t3,20401e46 <__register_exitproc+0x7c>
20401e0e:	0887a803          	lw	a6,136(a5)
20401e12:	04080163          	beqz	a6,20401e54 <__register_exitproc+0x8a>
20401e16:	00271893          	slli	a7,a4,0x2
20401e1a:	98c2                	add	a7,a7,a6
20401e1c:	00c8a023          	sw	a2,0(a7)
20401e20:	10082303          	lw	t1,256(a6)
20401e24:	4605                	li	a2,1
20401e26:	00e61633          	sll	a2,a2,a4
20401e2a:	00c36333          	or	t1,t1,a2
20401e2e:	10682023          	sw	t1,256(a6)
20401e32:	08d8a023          	sw	a3,128(a7)
20401e36:	4689                	li	a3,2
20401e38:	00de1763          	bne	t3,a3,20401e46 <__register_exitproc+0x7c>
20401e3c:	10482683          	lw	a3,260(a6)
20401e40:	8e55                	or	a2,a2,a3
20401e42:	10c82223          	sw	a2,260(a6)
20401e46:	00170693          	addi	a3,a4,1
20401e4a:	070a                	slli	a4,a4,0x2
20401e4c:	c3d4                	sw	a3,4(a5)
20401e4e:	97ba                	add	a5,a5,a4
20401e50:	c78c                	sw	a1,8(a5)
20401e52:	4501                	li	a0,0
20401e54:	8082                	ret

20401e56 <__call_exitprocs>:
__call_exitprocs():
20401e56:	7179                	addi	sp,sp,-48
20401e58:	cc52                	sw	s4,24(sp)
20401e5a:	ca56                	sw	s5,20(sp)
20401e5c:	c85a                	sw	s6,16(sp)
20401e5e:	c65e                	sw	s7,12(sp)
20401e60:	d606                	sw	ra,44(sp)
20401e62:	d422                	sw	s0,40(sp)
20401e64:	d226                	sw	s1,36(sp)
20401e66:	d04a                	sw	s2,32(sp)
20401e68:	ce4e                	sw	s3,28(sp)
20401e6a:	c462                	sw	s8,8(sp)
20401e6c:	8b2a                	mv	s6,a0
20401e6e:	8a2e                	mv	s4,a1
20401e70:	5fc00a97          	auipc	s5,0x5fc00
20401e74:	8cca8a93          	addi	s5,s5,-1844 # 8000173c <_global_atexit>
20401e78:	4b85                	li	s7,1
20401e7a:	000aa403          	lw	s0,0(s5)
20401e7e:	c811                	beqz	s0,20401e92 <__call_exitprocs+0x3c>
20401e80:	4044                	lw	s1,4(s0)
20401e82:	08842983          	lw	s3,136(s0)
20401e86:	fff48913          	addi	s2,s1,-1
20401e8a:	048a                	slli	s1,s1,0x2
20401e8c:	94a2                	add	s1,s1,s0
20401e8e:	00095e63          	bgez	s2,20401eaa <__call_exitprocs+0x54>
20401e92:	50b2                	lw	ra,44(sp)
20401e94:	5422                	lw	s0,40(sp)
20401e96:	5492                	lw	s1,36(sp)
20401e98:	5902                	lw	s2,32(sp)
20401e9a:	49f2                	lw	s3,28(sp)
20401e9c:	4a62                	lw	s4,24(sp)
20401e9e:	4ad2                	lw	s5,20(sp)
20401ea0:	4b42                	lw	s6,16(sp)
20401ea2:	4bb2                	lw	s7,12(sp)
20401ea4:	4c22                	lw	s8,8(sp)
20401ea6:	6145                	addi	sp,sp,48
20401ea8:	8082                	ret
20401eaa:	000a0e63          	beqz	s4,20401ec6 <__call_exitprocs+0x70>
20401eae:	00099563          	bnez	s3,20401eb8 <__call_exitprocs+0x62>
20401eb2:	197d                	addi	s2,s2,-1
20401eb4:	14f1                	addi	s1,s1,-4
20401eb6:	bfe1                	j	20401e8e <__call_exitprocs+0x38>
20401eb8:	00291793          	slli	a5,s2,0x2
20401ebc:	97ce                	add	a5,a5,s3
20401ebe:	0807a783          	lw	a5,128(a5)
20401ec2:	ff4798e3          	bne	a5,s4,20401eb2 <__call_exitprocs+0x5c>
20401ec6:	4058                	lw	a4,4(s0)
20401ec8:	40dc                	lw	a5,4(s1)
20401eca:	177d                	addi	a4,a4,-1
20401ecc:	03271863          	bne	a4,s2,20401efc <__call_exitprocs+0xa6>
20401ed0:	01242223          	sw	s2,4(s0)
20401ed4:	dff9                	beqz	a5,20401eb2 <__call_exitprocs+0x5c>
20401ed6:	00442c03          	lw	s8,4(s0)
20401eda:	00098863          	beqz	s3,20401eea <__call_exitprocs+0x94>
20401ede:	1009a683          	lw	a3,256(s3)
20401ee2:	012b9733          	sll	a4,s7,s2
20401ee6:	8ef9                	and	a3,a3,a4
20401ee8:	ee89                	bnez	a3,20401f02 <__call_exitprocs+0xac>
20401eea:	9782                	jalr	a5
20401eec:	4058                	lw	a4,4(s0)
20401eee:	000aa783          	lw	a5,0(s5)
20401ef2:	f98714e3          	bne	a4,s8,20401e7a <__call_exitprocs+0x24>
20401ef6:	faf40ee3          	beq	s0,a5,20401eb2 <__call_exitprocs+0x5c>
20401efa:	b741                	j	20401e7a <__call_exitprocs+0x24>
20401efc:	0004a223          	sw	zero,4(s1)
20401f00:	bfd1                	j	20401ed4 <__call_exitprocs+0x7e>
20401f02:	00291693          	slli	a3,s2,0x2
20401f06:	96ce                	add	a3,a3,s3
20401f08:	428c                	lw	a1,0(a3)
20401f0a:	1049a683          	lw	a3,260(s3)
20401f0e:	8f75                	and	a4,a4,a3
20401f10:	e701                	bnez	a4,20401f18 <__call_exitprocs+0xc2>
20401f12:	855a                	mv	a0,s6
20401f14:	9782                	jalr	a5
20401f16:	bfd9                	j	20401eec <__call_exitprocs+0x96>
20401f18:	852e                	mv	a0,a1
20401f1a:	9782                	jalr	a5
20401f1c:	bfc1                	j	20401eec <__call_exitprocs+0x96>

20401f1e <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20401f1e:	1101                	addi	sp,sp,-32
20401f20:	ce06                	sw	ra,28(sp)
20401f22:	cc22                	sw	s0,24(sp)
20401f24:	1000                	addi	s0,sp,32
20401f26:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20401f2a:	fec42703          	lw	a4,-20(s0)
20401f2e:	47a9                	li	a5,10
20401f30:	00f71463          	bne	a4,a5,20401f38 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20401f34:	4535                	li	a0,13
20401f36:	2811                	jal	20401f4a <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20401f38:	fec42503          	lw	a0,-20(s0)
20401f3c:	2039                	jal	20401f4a <metal_tty_putc_raw>
20401f3e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20401f40:	853e                	mv	a0,a5
20401f42:	40f2                	lw	ra,28(sp)
20401f44:	4462                	lw	s0,24(sp)
20401f46:	6105                	addi	sp,sp,32
20401f48:	8082                	ret

20401f4a <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20401f4a:	1101                	addi	sp,sp,-32
20401f4c:	ce06                	sw	ra,28(sp)
20401f4e:	cc22                	sw	s0,24(sp)
20401f50:	1000                	addi	s0,sp,32
20401f52:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401f56:	fec42583          	lw	a1,-20(s0)
20401f5a:	800017b7          	lui	a5,0x80001
20401f5e:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20401f62:	28b1                	jal	20401fbe <metal_uart_putc>
20401f64:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20401f66:	853e                	mv	a0,a5
20401f68:	40f2                	lw	ra,28(sp)
20401f6a:	4462                	lw	s0,24(sp)
20401f6c:	6105                	addi	sp,sp,32
20401f6e:	8082                	ret

20401f70 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20401f70:	1141                	addi	sp,sp,-16
20401f72:	c606                	sw	ra,12(sp)
20401f74:	c422                	sw	s0,8(sp)
20401f76:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20401f78:	67f1                	lui	a5,0x1c
20401f7a:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20401f7e:	800017b7          	lui	a5,0x80001
20401f82:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20401f86:	2031                	jal	20401f92 <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20401f88:	0001                	nop
20401f8a:	40b2                	lw	ra,12(sp)
20401f8c:	4422                	lw	s0,8(sp)
20401f8e:	0141                	addi	sp,sp,16
20401f90:	8082                	ret

20401f92 <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20401f92:	1101                	addi	sp,sp,-32
20401f94:	ce06                	sw	ra,28(sp)
20401f96:	cc22                	sw	s0,24(sp)
20401f98:	1000                	addi	s0,sp,32
20401f9a:	fea42623          	sw	a0,-20(s0)
20401f9e:	feb42423          	sw	a1,-24(s0)
20401fa2:	fec42783          	lw	a5,-20(s0)
20401fa6:	439c                	lw	a5,0(a5)
20401fa8:	439c                	lw	a5,0(a5)
20401faa:	fe842583          	lw	a1,-24(s0)
20401fae:	fec42503          	lw	a0,-20(s0)
20401fb2:	9782                	jalr	a5
20401fb4:	0001                	nop
20401fb6:	40f2                	lw	ra,28(sp)
20401fb8:	4462                	lw	s0,24(sp)
20401fba:	6105                	addi	sp,sp,32
20401fbc:	8082                	ret

20401fbe <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20401fbe:	1101                	addi	sp,sp,-32
20401fc0:	ce06                	sw	ra,28(sp)
20401fc2:	cc22                	sw	s0,24(sp)
20401fc4:	1000                	addi	s0,sp,32
20401fc6:	fea42623          	sw	a0,-20(s0)
20401fca:	feb42423          	sw	a1,-24(s0)
20401fce:	fec42783          	lw	a5,-20(s0)
20401fd2:	439c                	lw	a5,0(a5)
20401fd4:	43dc                	lw	a5,4(a5)
20401fd6:	fe842583          	lw	a1,-24(s0)
20401fda:	fec42503          	lw	a0,-20(s0)
20401fde:	9782                	jalr	a5
20401fe0:	87aa                	mv	a5,a0
20401fe2:	853e                	mv	a0,a5
20401fe4:	40f2                	lw	ra,28(sp)
20401fe6:	4462                	lw	s0,24(sp)
20401fe8:	6105                	addi	sp,sp,32
20401fea:	8082                	ret

20401fec <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20401fec:	1101                	addi	sp,sp,-32
20401fee:	ce06                	sw	ra,28(sp)
20401ff0:	cc22                	sw	s0,24(sp)
20401ff2:	1000                	addi	s0,sp,32
20401ff4:	fea42623          	sw	a0,-20(s0)
20401ff8:	feb42423          	sw	a1,-24(s0)
20401ffc:	fec42783          	lw	a5,-20(s0)
20402000:	439c                	lw	a5,0(a5)
20402002:	4bdc                	lw	a5,20(a5)
20402004:	fe842583          	lw	a1,-24(s0)
20402008:	fec42503          	lw	a0,-20(s0)
2040200c:	9782                	jalr	a5
2040200e:	87aa                	mv	a5,a0
20402010:	853e                	mv	a0,a5
20402012:	40f2                	lw	ra,28(sp)
20402014:	4462                	lw	s0,24(sp)
20402016:	6105                	addi	sp,sp,32
20402018:	8082                	ret

2040201a <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
2040201a:	1101                	addi	sp,sp,-32
2040201c:	ce22                	sw	s0,28(sp)
2040201e:	1000                	addi	s0,sp,32
20402020:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20402024:	fec42703          	lw	a4,-20(s0)
20402028:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
2040202c:	00f71563          	bne	a4,a5,20402036 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20402030:	020007b7          	lui	a5,0x2000
20402034:	a011                	j	20402038 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
20402036:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
20402038:	853e                	mv	a0,a5
2040203a:	4472                	lw	s0,28(sp)
2040203c:	6105                	addi	sp,sp,32
2040203e:	8082                	ret

20402040 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20402040:	1101                	addi	sp,sp,-32
20402042:	ce22                	sw	s0,28(sp)
20402044:	1000                	addi	s0,sp,32
20402046:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
2040204a:	fec42703          	lw	a4,-20(s0)
2040204e:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
20402052:	00f71463          	bne	a4,a5,2040205a <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
20402056:	4789                	li	a5,2
20402058:	a011                	j	2040205c <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
2040205a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
2040205c:	853e                	mv	a0,a5
2040205e:	4472                	lw	s0,28(sp)
20402060:	6105                	addi	sp,sp,32
20402062:	8082                	ret

20402064 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20402064:	1101                	addi	sp,sp,-32
20402066:	ce22                	sw	s0,28(sp)
20402068:	1000                	addi	s0,sp,32
2040206a:	fea42623          	sw	a0,-20(s0)
2040206e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
20402072:	fe842783          	lw	a5,-24(s0)
20402076:	e791                	bnez	a5,20402082 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20402078:	800017b7          	lui	a5,0x80001
2040207c:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdca0>
20402080:	a821                	j	20402098 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20402082:	fe842703          	lw	a4,-24(s0)
20402086:	4785                	li	a5,1
20402088:	00f71763          	bne	a4,a5,20402096 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
2040208c:	800017b7          	lui	a5,0x80001
20402090:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdca0>
20402094:	a011                	j	20402098 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
20402096:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
20402098:	853e                	mv	a0,a5
2040209a:	4472                	lw	s0,28(sp)
2040209c:	6105                	addi	sp,sp,32
2040209e:	8082                	ret

204020a0 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
204020a0:	1101                	addi	sp,sp,-32
204020a2:	ce22                	sw	s0,28(sp)
204020a4:	1000                	addi	s0,sp,32
204020a6:	fea42623          	sw	a0,-20(s0)
204020aa:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
204020ae:	fe842783          	lw	a5,-24(s0)
204020b2:	e399                	bnez	a5,204020b8 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
204020b4:	478d                	li	a5,3
204020b6:	a809                	j	204020c8 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
204020b8:	fe842703          	lw	a4,-24(s0)
204020bc:	4785                	li	a5,1
204020be:	00f71463          	bne	a4,a5,204020c6 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
204020c2:	479d                	li	a5,7
204020c4:	a011                	j	204020c8 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
204020c6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
204020c8:	853e                	mv	a0,a5
204020ca:	4472                	lw	s0,28(sp)
204020cc:	6105                	addi	sp,sp,32
204020ce:	8082                	ret

204020d0 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
204020d0:	715d                	addi	sp,sp,-80
204020d2:	c686                	sw	ra,76(sp)
204020d4:	c4a2                	sw	s0,72(sp)
204020d6:	c2ca                	sw	s2,68(sp)
204020d8:	c0ce                	sw	s3,64(sp)
204020da:	de52                	sw	s4,60(sp)
204020dc:	dc56                	sw	s5,56(sp)
204020de:	da5a                	sw	s6,52(sp)
204020e0:	d85e                	sw	s7,48(sp)
204020e2:	d662                	sw	s8,44(sp)
204020e4:	d466                	sw	s9,40(sp)
204020e6:	0880                	addi	s0,sp,80
204020e8:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
204020ec:	fbc42783          	lw	a5,-68(s0)
204020f0:	853e                	mv	a0,a5
204020f2:	3725                	jal	2040201a <__metal_driver_sifive_clint0_control_base>
204020f4:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
204020f8:	fcc42703          	lw	a4,-52(s0)
204020fc:	67b1                	lui	a5,0xc
204020fe:	17f1                	addi	a5,a5,-4
20402100:	97ba                	add	a5,a5,a4
20402102:	439c                	lw	a5,0(a5)
20402104:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20402108:	fcc42703          	lw	a4,-52(s0)
2040210c:	67b1                	lui	a5,0xc
2040210e:	17e1                	addi	a5,a5,-8
20402110:	97ba                	add	a5,a5,a4
20402112:	439c                	lw	a5,0(a5)
20402114:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20402118:	fcc42703          	lw	a4,-52(s0)
2040211c:	67b1                	lui	a5,0xc
2040211e:	17f1                	addi	a5,a5,-4
20402120:	97ba                	add	a5,a5,a4
20402122:	439c                	lw	a5,0(a5)
20402124:	fc842703          	lw	a4,-56(s0)
20402128:	fcf718e3          	bne	a4,a5,204020f8 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
2040212c:	fc842783          	lw	a5,-56(s0)
20402130:	8c3e                	mv	s8,a5
20402132:	4c81                	li	s9,0
20402134:	000c1993          	slli	s3,s8,0x0
20402138:	4901                	li	s2,0
2040213a:	fc442783          	lw	a5,-60(s0)
2040213e:	8a3e                	mv	s4,a5
20402140:	4a81                	li	s5,0
20402142:	01496b33          	or	s6,s2,s4
20402146:	0159ebb3          	or	s7,s3,s5
2040214a:	87da                	mv	a5,s6
2040214c:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
2040214e:	853e                	mv	a0,a5
20402150:	85c2                	mv	a1,a6
20402152:	40b6                	lw	ra,76(sp)
20402154:	4426                	lw	s0,72(sp)
20402156:	4916                	lw	s2,68(sp)
20402158:	4986                	lw	s3,64(sp)
2040215a:	5a72                	lw	s4,60(sp)
2040215c:	5ae2                	lw	s5,56(sp)
2040215e:	5b52                	lw	s6,52(sp)
20402160:	5bc2                	lw	s7,48(sp)
20402162:	5c32                	lw	s8,44(sp)
20402164:	5ca2                	lw	s9,40(sp)
20402166:	6161                	addi	sp,sp,80
20402168:	8082                	ret

2040216a <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
2040216a:	7179                	addi	sp,sp,-48
2040216c:	d606                	sw	ra,44(sp)
2040216e:	d422                	sw	s0,40(sp)
20402170:	d24a                	sw	s2,36(sp)
20402172:	d04e                	sw	s3,32(sp)
20402174:	1800                	addi	s0,sp,48
20402176:	fca42e23          	sw	a0,-36(s0)
2040217a:	fcb42c23          	sw	a1,-40(s0)
2040217e:	fcc42823          	sw	a2,-48(s0)
20402182:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20402186:	fdc42783          	lw	a5,-36(s0)
2040218a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
2040218e:	fec42783          	lw	a5,-20(s0)
20402192:	853e                	mv	a0,a5
20402194:	3559                	jal	2040201a <__metal_driver_sifive_clint0_control_base>
20402196:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
2040219a:	fd842783          	lw	a5,-40(s0)
2040219e:	078e                	slli	a5,a5,0x3
204021a0:	873e                	mv	a4,a5
204021a2:	fe842783          	lw	a5,-24(s0)
204021a6:	973e                	add	a4,a4,a5
204021a8:	6791                	lui	a5,0x4
204021aa:	0791                	addi	a5,a5,4
204021ac:	97ba                	add	a5,a5,a4
204021ae:	873e                	mv	a4,a5
204021b0:	57fd                	li	a5,-1
204021b2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
204021b4:	fd842783          	lw	a5,-40(s0)
204021b8:	078e                	slli	a5,a5,0x3
204021ba:	873e                	mv	a4,a5
204021bc:	fe842783          	lw	a5,-24(s0)
204021c0:	973e                	add	a4,a4,a5
204021c2:	6791                	lui	a5,0x4
204021c4:	97ba                	add	a5,a5,a4
204021c6:	873e                	mv	a4,a5
204021c8:	fd042783          	lw	a5,-48(s0)
204021cc:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
204021ce:	fd442783          	lw	a5,-44(s0)
204021d2:	0007d913          	srli	s2,a5,0x0
204021d6:	4981                	li	s3,0
204021d8:	fd842783          	lw	a5,-40(s0)
204021dc:	078e                	slli	a5,a5,0x3
204021de:	873e                	mv	a4,a5
204021e0:	fe842783          	lw	a5,-24(s0)
204021e4:	973e                	add	a4,a4,a5
204021e6:	6791                	lui	a5,0x4
204021e8:	0791                	addi	a5,a5,4
204021ea:	97ba                	add	a5,a5,a4
204021ec:	874a                	mv	a4,s2
204021ee:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
204021f0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
204021f2:	853e                	mv	a0,a5
204021f4:	50b2                	lw	ra,44(sp)
204021f6:	5422                	lw	s0,40(sp)
204021f8:	5912                	lw	s2,36(sp)
204021fa:	5982                	lw	s3,32(sp)
204021fc:	6145                	addi	sp,sp,48
204021fe:	8082                	ret

20402200 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20402200:	1101                	addi	sp,sp,-32
20402202:	ce06                	sw	ra,28(sp)
20402204:	cc22                	sw	s0,24(sp)
20402206:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20402208:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
2040220c:	f14027f3          	csrr	a5,mhartid
20402210:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20402214:	fec42783          	lw	a5,-20(s0)
20402218:	853e                	mv	a0,a5
2040221a:	1cc030ef          	jal	ra,204053e6 <metal_cpu_get>
2040221e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20402222:	fe842503          	lw	a0,-24(s0)
20402226:	19a030ef          	jal	ra,204053c0 <metal_cpu_interrupt_controller>
2040222a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
2040222c:	853e                	mv	a0,a5
2040222e:	40f2                	lw	ra,28(sp)
20402230:	4462                	lw	s0,24(sp)
20402232:	6105                	addi	sp,sp,32
20402234:	8082                	ret

20402236 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20402236:	7139                	addi	sp,sp,-64
20402238:	de06                	sw	ra,60(sp)
2040223a:	dc22                	sw	s0,56(sp)
2040223c:	0080                	addi	s0,sp,64
2040223e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402242:	fcc42503          	lw	a0,-52(s0)
20402246:	3bed                	jal	20402040 <__metal_driver_sifive_clint0_num_interrupts>
20402248:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
2040224c:	fcc42783          	lw	a5,-52(s0)
20402250:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20402254:	fe442783          	lw	a5,-28(s0)
20402258:	43dc                	lw	a5,4(a5)
2040225a:	efa9                	bnez	a5,204022b4 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
2040225c:	fe042623          	sw	zero,-20(s0)
20402260:	a081                	j	204022a0 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402262:	fec42583          	lw	a1,-20(s0)
20402266:	fcc42503          	lw	a0,-52(s0)
2040226a:	3bed                	jal	20402064 <__metal_driver_sifive_clint0_interrupt_parents>
2040226c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402270:	fec42583          	lw	a1,-20(s0)
20402274:	fcc42503          	lw	a0,-52(s0)
20402278:	3525                	jal	204020a0 <__metal_driver_sifive_clint0_interrupt_lines>
2040227a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
2040227e:	fe042783          	lw	a5,-32(s0)
20402282:	439c                	lw	a5,0(a5)
20402284:	4fdc                	lw	a5,28(a5)
20402286:	fcc42683          	lw	a3,-52(s0)
2040228a:	4601                	li	a2,0
2040228c:	fdc42583          	lw	a1,-36(s0)
20402290:	fe042503          	lw	a0,-32(s0)
20402294:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20402296:	fec42783          	lw	a5,-20(s0)
2040229a:	0785                	addi	a5,a5,1
2040229c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
204022a0:	fec42703          	lw	a4,-20(s0)
204022a4:	fe842783          	lw	a5,-24(s0)
204022a8:	faf74de3          	blt	a4,a5,20402262 <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
204022ac:	fe442783          	lw	a5,-28(s0)
204022b0:	4705                	li	a4,1
204022b2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
204022b4:	0001                	nop
204022b6:	50f2                	lw	ra,60(sp)
204022b8:	5462                	lw	s0,56(sp)
204022ba:	6121                	addi	sp,sp,64
204022bc:	8082                	ret

204022be <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
204022be:	7139                	addi	sp,sp,-64
204022c0:	de06                	sw	ra,60(sp)
204022c2:	dc22                	sw	s0,56(sp)
204022c4:	0080                	addi	s0,sp,64
204022c6:	fca42623          	sw	a0,-52(s0)
204022ca:	fcb42423          	sw	a1,-56(s0)
204022ce:	fcc42223          	sw	a2,-60(s0)
204022d2:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
204022d6:	57fd                	li	a5,-1
204022d8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
204022dc:	33a010ef          	jal	ra,20403616 <__metal_controller_interrupt_vector_mode>
204022e0:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
204022e4:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
204022e8:	3f21                	jal	20402200 <_get_cpu_intc>
204022ea:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204022ee:	fcc42503          	lw	a0,-52(s0)
204022f2:	33b9                	jal	20402040 <__metal_driver_sifive_clint0_num_interrupts>
204022f4:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
204022f8:	fe042703          	lw	a4,-32(s0)
204022fc:	4785                	li	a5,1
204022fe:	00f70863          	beq	a4,a5,2040230e <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20402302:	fe042783          	lw	a5,-32(s0)
20402306:	c781                	beqz	a5,2040230e <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20402308:	fec42783          	lw	a5,-20(s0)
2040230c:	a049                	j	2040238e <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
2040230e:	fe042223          	sw	zero,-28(s0)
20402312:	a091                	j	20402356 <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402314:	fe442583          	lw	a1,-28(s0)
20402318:	fcc42503          	lw	a0,-52(s0)
2040231c:	3351                	jal	204020a0 <__metal_driver_sifive_clint0_interrupt_lines>
2040231e:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402322:	fe442583          	lw	a1,-28(s0)
20402326:	fcc42503          	lw	a0,-52(s0)
2040232a:	3b2d                	jal	20402064 <__metal_driver_sifive_clint0_interrupt_parents>
2040232c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20402330:	fdc42703          	lw	a4,-36(s0)
20402334:	fe842783          	lw	a5,-24(s0)
20402338:	00f71863          	bne	a4,a5,20402348 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
2040233c:	fc842703          	lw	a4,-56(s0)
20402340:	fd442783          	lw	a5,-44(s0)
20402344:	02f70063          	beq	a4,a5,20402364 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20402348:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
2040234c:	fe442783          	lw	a5,-28(s0)
20402350:	0785                	addi	a5,a5,1
20402352:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20402356:	fe442703          	lw	a4,-28(s0)
2040235a:	fd842783          	lw	a5,-40(s0)
2040235e:	faf74be3          	blt	a4,a5,20402314 <__metal_driver_riscv_clint0_register+0x56>
20402362:	a011                	j	20402366 <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20402364:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20402366:	fe842783          	lw	a5,-24(s0)
2040236a:	c385                	beqz	a5,2040238a <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
2040236c:	fe842783          	lw	a5,-24(s0)
20402370:	439c                	lw	a5,0(a5)
20402372:	4fdc                	lw	a5,28(a5)
20402374:	fc042683          	lw	a3,-64(s0)
20402378:	fc442603          	lw	a2,-60(s0)
2040237c:	fc842583          	lw	a1,-56(s0)
20402380:	fe842503          	lw	a0,-24(s0)
20402384:	9782                	jalr	a5
20402386:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
2040238a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
2040238e:	853e                	mv	a0,a5
20402390:	50f2                	lw	ra,60(sp)
20402392:	5462                	lw	s0,56(sp)
20402394:	6121                	addi	sp,sp,64
20402396:	8082                	ret

20402398 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20402398:	7179                	addi	sp,sp,-48
2040239a:	d622                	sw	s0,44(sp)
2040239c:	1800                	addi	s0,sp,48
2040239e:	fca42e23          	sw	a0,-36(s0)
204023a2:	fcb42c23          	sw	a1,-40(s0)
204023a6:	fcc42a23          	sw	a2,-44(s0)
204023aa:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
204023ae:	57fd                	li	a5,-1
204023b0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
204023b4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
204023b8:	853e                	mv	a0,a5
204023ba:	5432                	lw	s0,44(sp)
204023bc:	6145                	addi	sp,sp,48
204023be:	8082                	ret

204023c0 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
204023c0:	1101                	addi	sp,sp,-32
204023c2:	ce06                	sw	ra,28(sp)
204023c4:	cc22                	sw	s0,24(sp)
204023c6:	1000                	addi	s0,sp,32
204023c8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
204023cc:	24a010ef          	jal	ra,20403616 <__metal_controller_interrupt_vector_mode>
204023d0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
204023d2:	853e                	mv	a0,a5
204023d4:	40f2                	lw	ra,28(sp)
204023d6:	4462                	lw	s0,24(sp)
204023d8:	6105                	addi	sp,sp,32
204023da:	8082                	ret

204023dc <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
204023dc:	7179                	addi	sp,sp,-48
204023de:	d606                	sw	ra,44(sp)
204023e0:	d422                	sw	s0,40(sp)
204023e2:	1800                	addi	s0,sp,48
204023e4:	fca42e23          	sw	a0,-36(s0)
204023e8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
204023ec:	57fd                	li	a5,-1
204023ee:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
204023f2:	3539                	jal	20402200 <_get_cpu_intc>
204023f4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
204023f8:	fe842783          	lw	a5,-24(s0)
204023fc:	c395                	beqz	a5,20402420 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
204023fe:	fd842703          	lw	a4,-40(s0)
20402402:	4785                	li	a5,1
20402404:	00e7ef63          	bltu	a5,a4,20402422 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20402408:	fe842783          	lw	a5,-24(s0)
2040240c:	439c                	lw	a5,0(a5)
2040240e:	43dc                	lw	a5,4(a5)
20402410:	fd842583          	lw	a1,-40(s0)
20402414:	fe842503          	lw	a0,-24(s0)
20402418:	9782                	jalr	a5
2040241a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
2040241e:	a011                	j	20402422 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20402420:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
20402422:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20402426:	853e                	mv	a0,a5
20402428:	50b2                	lw	ra,44(sp)
2040242a:	5422                	lw	s0,40(sp)
2040242c:	6145                	addi	sp,sp,48
2040242e:	8082                	ret

20402430 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20402430:	7139                	addi	sp,sp,-64
20402432:	de06                	sw	ra,60(sp)
20402434:	dc22                	sw	s0,56(sp)
20402436:	0080                	addi	s0,sp,64
20402438:	fca42623          	sw	a0,-52(s0)
2040243c:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20402440:	57fd                	li	a5,-1
20402442:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20402446:	fc842783          	lw	a5,-56(s0)
2040244a:	c7c9                	beqz	a5,204024d4 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
2040244c:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402450:	3b45                	jal	20402200 <_get_cpu_intc>
20402452:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402456:	fcc42503          	lw	a0,-52(s0)
2040245a:	36dd                	jal	20402040 <__metal_driver_sifive_clint0_num_interrupts>
2040245c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20402460:	fe042223          	sw	zero,-28(s0)
20402464:	a091                	j	204024a8 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402466:	fe442583          	lw	a1,-28(s0)
2040246a:	fcc42503          	lw	a0,-52(s0)
2040246e:	390d                	jal	204020a0 <__metal_driver_sifive_clint0_interrupt_lines>
20402470:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402474:	fe442583          	lw	a1,-28(s0)
20402478:	fcc42503          	lw	a0,-52(s0)
2040247c:	36e5                	jal	20402064 <__metal_driver_sifive_clint0_interrupt_parents>
2040247e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20402482:	fe042703          	lw	a4,-32(s0)
20402486:	fe842783          	lw	a5,-24(s0)
2040248a:	00f71863          	bne	a4,a5,2040249a <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
2040248e:	fc842703          	lw	a4,-56(s0)
20402492:	fd842783          	lw	a5,-40(s0)
20402496:	02f70063          	beq	a4,a5,204024b6 <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
2040249a:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
2040249e:	fe442783          	lw	a5,-28(s0)
204024a2:	0785                	addi	a5,a5,1
204024a4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
204024a8:	fe442703          	lw	a4,-28(s0)
204024ac:	fdc42783          	lw	a5,-36(s0)
204024b0:	faf74be3          	blt	a4,a5,20402466 <__metal_driver_riscv_clint0_enable+0x36>
204024b4:	a011                	j	204024b8 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
204024b6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
204024b8:	fe842783          	lw	a5,-24(s0)
204024bc:	cf81                	beqz	a5,204024d4 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
204024be:	fe842783          	lw	a5,-24(s0)
204024c2:	439c                	lw	a5,0(a5)
204024c4:	53dc                	lw	a5,36(a5)
204024c6:	fc842583          	lw	a1,-56(s0)
204024ca:	fe842503          	lw	a0,-24(s0)
204024ce:	9782                	jalr	a5
204024d0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
204024d4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
204024d8:	853e                	mv	a0,a5
204024da:	50f2                	lw	ra,60(sp)
204024dc:	5462                	lw	s0,56(sp)
204024de:	6121                	addi	sp,sp,64
204024e0:	8082                	ret

204024e2 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
204024e2:	7139                	addi	sp,sp,-64
204024e4:	de06                	sw	ra,60(sp)
204024e6:	dc22                	sw	s0,56(sp)
204024e8:	0080                	addi	s0,sp,64
204024ea:	fca42623          	sw	a0,-52(s0)
204024ee:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
204024f2:	57fd                	li	a5,-1
204024f4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
204024f8:	fc842783          	lw	a5,-56(s0)
204024fc:	c7d9                	beqz	a5,2040258a <__metal_driver_riscv_clint0_disable+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
204024fe:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402502:	39fd                	jal	20402200 <_get_cpu_intc>
20402504:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402508:	fcc42503          	lw	a0,-52(s0)
2040250c:	b35ff0ef          	jal	ra,20402040 <__metal_driver_sifive_clint0_num_interrupts>
20402510:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20402514:	fe042223          	sw	zero,-28(s0)
20402518:	a099                	j	2040255e <__metal_driver_riscv_clint0_disable+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040251a:	fe442583          	lw	a1,-28(s0)
2040251e:	fcc42503          	lw	a0,-52(s0)
20402522:	3ebd                	jal	204020a0 <__metal_driver_sifive_clint0_interrupt_lines>
20402524:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402528:	fe442583          	lw	a1,-28(s0)
2040252c:	fcc42503          	lw	a0,-52(s0)
20402530:	b35ff0ef          	jal	ra,20402064 <__metal_driver_sifive_clint0_interrupt_parents>
20402534:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20402538:	fe042703          	lw	a4,-32(s0)
2040253c:	fe842783          	lw	a5,-24(s0)
20402540:	00f71863          	bne	a4,a5,20402550 <__metal_driver_riscv_clint0_disable+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20402544:	fc842703          	lw	a4,-56(s0)
20402548:	fd842783          	lw	a5,-40(s0)
2040254c:	02f70063          	beq	a4,a5,2040256c <__metal_driver_riscv_clint0_disable+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20402550:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402554:	fe442783          	lw	a5,-28(s0)
20402558:	0785                	addi	a5,a5,1
2040255a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
2040255e:	fe442703          	lw	a4,-28(s0)
20402562:	fdc42783          	lw	a5,-36(s0)
20402566:	faf74ae3          	blt	a4,a5,2040251a <__metal_driver_riscv_clint0_disable+0x38>
2040256a:	a011                	j	2040256e <__metal_driver_riscv_clint0_disable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
2040256c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
2040256e:	fe842783          	lw	a5,-24(s0)
20402572:	cf81                	beqz	a5,2040258a <__metal_driver_riscv_clint0_disable+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20402574:	fe842783          	lw	a5,-24(s0)
20402578:	439c                	lw	a5,0(a5)
2040257a:	579c                	lw	a5,40(a5)
2040257c:	fc842583          	lw	a1,-56(s0)
20402580:	fe842503          	lw	a0,-24(s0)
20402584:	9782                	jalr	a5
20402586:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
2040258a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
2040258e:	853e                	mv	a0,a5
20402590:	50f2                	lw	ra,60(sp)
20402592:	5462                	lw	s0,56(sp)
20402594:	6121                	addi	sp,sp,64
20402596:	8082                	ret

20402598 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20402598:	7179                	addi	sp,sp,-48
2040259a:	d606                	sw	ra,44(sp)
2040259c:	d422                	sw	s0,40(sp)
2040259e:	1800                	addi	s0,sp,48
204025a0:	fca42e23          	sw	a0,-36(s0)
204025a4:	fcb42c23          	sw	a1,-40(s0)
204025a8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
204025ac:	57fd                	li	a5,-1
204025ae:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
204025b2:	fdc42783          	lw	a5,-36(s0)
204025b6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
204025ba:	fdc42503          	lw	a0,-36(s0)
204025be:	a5dff0ef          	jal	ra,2040201a <__metal_driver_sifive_clint0_control_base>
204025c2:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
204025c6:	fd842703          	lw	a4,-40(s0)
204025ca:	4789                	li	a5,2
204025cc:	04f70963          	beq	a4,a5,2040261e <__metal_driver_riscv_clint0_command_request+0x86>
204025d0:	fd842703          	lw	a4,-40(s0)
204025d4:	4789                	li	a5,2
204025d6:	00e7c863          	blt	a5,a4,204025e6 <__metal_driver_riscv_clint0_command_request+0x4e>
204025da:	fd842703          	lw	a4,-40(s0)
204025de:	4785                	li	a5,1
204025e0:	00f70e63          	beq	a4,a5,204025fc <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
204025e4:	a8f1                	j	204026c0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
204025e6:	fd842703          	lw	a4,-40(s0)
204025ea:	478d                	li	a5,3
204025ec:	04f70d63          	beq	a4,a5,20402646 <__metal_driver_riscv_clint0_command_request+0xae>
204025f0:	fd842703          	lw	a4,-40(s0)
204025f4:	4791                	li	a5,4
204025f6:	08f70963          	beq	a4,a5,20402688 <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
204025fa:	a0d9                	j	204026c0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
204025fc:	fd442783          	lw	a5,-44(s0)
20402600:	cbcd                	beqz	a5,204026b2 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20402602:	fe842503          	lw	a0,-24(s0)
20402606:	acbff0ef          	jal	ra,204020d0 <__metal_clint0_mtime_get>
2040260a:	87aa                	mv	a5,a0
2040260c:	882e                	mv	a6,a1
2040260e:	fd442703          	lw	a4,-44(s0)
20402612:	c31c                	sw	a5,0(a4)
20402614:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20402618:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
2040261c:	a859                	j	204026b2 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
2040261e:	fd442783          	lw	a5,-44(s0)
20402622:	cbd1                	beqz	a5,204026b6 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20402624:	fd442783          	lw	a5,-44(s0)
20402628:	439c                	lw	a5,0(a5)
2040262a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040262e:	fe042783          	lw	a5,-32(s0)
20402632:	078a                	slli	a5,a5,0x2
20402634:	873e                	mv	a4,a5
20402636:	fe442783          	lw	a5,-28(s0)
2040263a:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
2040263c:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20402640:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402644:	a88d                	j	204026b6 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20402646:	fd442783          	lw	a5,-44(s0)
2040264a:	cba5                	beqz	a5,204026ba <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
2040264c:	fd442783          	lw	a5,-44(s0)
20402650:	439c                	lw	a5,0(a5)
20402652:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402656:	fe042783          	lw	a5,-32(s0)
2040265a:	078a                	slli	a5,a5,0x2
2040265c:	873e                	mv	a4,a5
2040265e:	fe442783          	lw	a5,-28(s0)
20402662:	97ba                	add	a5,a5,a4
20402664:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20402666:	4785                	li	a5,1
20402668:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
2040266a:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040266e:	fe042783          	lw	a5,-32(s0)
20402672:	078a                	slli	a5,a5,0x2
20402674:	873e                	mv	a4,a5
20402676:	fe442783          	lw	a5,-28(s0)
2040267a:	97ba                	add	a5,a5,a4
2040267c:	439c                	lw	a5,0(a5)
2040267e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20402682:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402686:	a815                	j	204026ba <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20402688:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
2040268c:	fd442783          	lw	a5,-44(s0)
20402690:	c79d                	beqz	a5,204026be <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20402692:	fd442783          	lw	a5,-44(s0)
20402696:	439c                	lw	a5,0(a5)
20402698:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040269c:	fe042783          	lw	a5,-32(s0)
204026a0:	078a                	slli	a5,a5,0x2
204026a2:	873e                	mv	a4,a5
204026a4:	fe442783          	lw	a5,-28(s0)
204026a8:	97ba                	add	a5,a5,a4
204026aa:	439c                	lw	a5,0(a5)
204026ac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
204026b0:	a039                	j	204026be <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
204026b2:	0001                	nop
204026b4:	a031                	j	204026c0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
204026b6:	0001                	nop
204026b8:	a021                	j	204026c0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
204026ba:	0001                	nop
204026bc:	a011                	j	204026c0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
204026be:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
204026c0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
204026c4:	853e                	mv	a0,a5
204026c6:	50b2                	lw	ra,44(sp)
204026c8:	5422                	lw	s0,40(sp)
204026ca:	6145                	addi	sp,sp,48
204026cc:	8082                	ret

204026ce <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
204026ce:	7179                	addi	sp,sp,-48
204026d0:	d606                	sw	ra,44(sp)
204026d2:	d422                	sw	s0,40(sp)
204026d4:	1800                	addi	s0,sp,48
204026d6:	fca42e23          	sw	a0,-36(s0)
204026da:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
204026de:	533020ef          	jal	ra,20405410 <metal_cpu_get_current_hartid>
204026e2:	87aa                	mv	a5,a0
204026e4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
204026e8:	fec40793          	addi	a5,s0,-20
204026ec:	863e                	mv	a2,a5
204026ee:	4589                	li	a1,2
204026f0:	fdc42503          	lw	a0,-36(s0)
204026f4:	3555                	jal	20402598 <__metal_driver_riscv_clint0_command_request>
204026f6:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
204026f8:	853e                	mv	a0,a5
204026fa:	50b2                	lw	ra,44(sp)
204026fc:	5422                	lw	s0,40(sp)
204026fe:	6145                	addi	sp,sp,48
20402700:	8082                	ret

20402702 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20402702:	7179                	addi	sp,sp,-48
20402704:	d606                	sw	ra,44(sp)
20402706:	d422                	sw	s0,40(sp)
20402708:	1800                	addi	s0,sp,48
2040270a:	fca42e23          	sw	a0,-36(s0)
2040270e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
20402712:	4ff020ef          	jal	ra,20405410 <metal_cpu_get_current_hartid>
20402716:	87aa                	mv	a5,a0
20402718:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
2040271c:	fec40793          	addi	a5,s0,-20
20402720:	863e                	mv	a2,a5
20402722:	458d                	li	a1,3
20402724:	fdc42503          	lw	a0,-36(s0)
20402728:	3d85                	jal	20402598 <__metal_driver_riscv_clint0_command_request>
2040272a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
2040272c:	853e                	mv	a0,a5
2040272e:	50b2                	lw	ra,44(sp)
20402730:	5422                	lw	s0,40(sp)
20402732:	6145                	addi	sp,sp,48
20402734:	8082                	ret

20402736 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20402736:	1101                	addi	sp,sp,-32
20402738:	ce22                	sw	s0,28(sp)
2040273a:	1000                	addi	s0,sp,32
2040273c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402740:	fec42703          	lw	a4,-20(s0)
20402744:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20402748:	00f71463          	bne	a4,a5,20402750 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
2040274c:	4781                	li	a5,0
2040274e:	a011                	j	20402752 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
20402750:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
20402752:	853e                	mv	a0,a5
20402754:	4472                	lw	s0,28(sp)
20402756:	6105                	addi	sp,sp,32
20402758:	8082                	ret

2040275a <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
2040275a:	1101                	addi	sp,sp,-32
2040275c:	ce22                	sw	s0,28(sp)
2040275e:	1000                	addi	s0,sp,32
20402760:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402764:	fec42703          	lw	a4,-20(s0)
20402768:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
2040276c:	00f71763          	bne	a4,a5,2040277a <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
20402770:	000f47b7          	lui	a5,0xf4
20402774:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20402778:	a011                	j	2040277c <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
2040277a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
2040277c:	853e                	mv	a0,a5
2040277e:	4472                	lw	s0,28(sp)
20402780:	6105                	addi	sp,sp,32
20402782:	8082                	ret

20402784 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
20402784:	1101                	addi	sp,sp,-32
20402786:	ce22                	sw	s0,28(sp)
20402788:	1000                	addi	s0,sp,32
2040278a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2040278e:	fec42703          	lw	a4,-20(s0)
20402792:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20402796:	00f71763          	bne	a4,a5,204027a4 <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
2040279a:	800017b7          	lui	a5,0x80001
2040279e:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdca0>
204027a2:	a011                	j	204027a6 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
204027a4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
204027a6:	853e                	mv	a0,a5
204027a8:	4472                	lw	s0,28(sp)
204027aa:	6105                	addi	sp,sp,32
204027ac:	8082                	ret

204027ae <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
204027ae:	1101                	addi	sp,sp,-32
204027b0:	ce22                	sw	s0,28(sp)
204027b2:	1000                	addi	s0,sp,32
204027b4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
204027b8:	fec42783          	lw	a5,-20(s0)
204027bc:	00f04a63          	bgtz	a5,204027d0 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
204027c0:	fec42703          	lw	a4,-20(s0)
204027c4:	070a                	slli	a4,a4,0x2
204027c6:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204027ca:	97ba                	add	a5,a5,a4
204027cc:	439c                	lw	a5,0(a5)
204027ce:	a011                	j	204027d2 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
204027d0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
204027d2:	853e                	mv	a0,a5
204027d4:	4472                	lw	s0,28(sp)
204027d6:	6105                	addi	sp,sp,32
204027d8:	8082                	ret

204027da <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
204027da:	1101                	addi	sp,sp,-32
204027dc:	ce22                	sw	s0,28(sp)
204027de:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
204027e0:	f14027f3          	csrr	a5,mhartid
204027e4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
204027e8:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
204027ec:	853e                	mv	a0,a5
204027ee:	4472                	lw	s0,28(sp)
204027f0:	6105                	addi	sp,sp,32
204027f2:	8082                	ret

204027f4 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
204027f4:	1101                	addi	sp,sp,-32
204027f6:	ce22                	sw	s0,28(sp)
204027f8:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204027fa:	47a1                	li	a5,8
204027fc:	3007a7f3          	csrrs	a5,mstatus,a5
20402800:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
20402804:	0001                	nop
20402806:	4472                	lw	s0,28(sp)
20402808:	6105                	addi	sp,sp,32
2040280a:	8082                	ret

2040280c <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
2040280c:	1101                	addi	sp,sp,-32
2040280e:	ce22                	sw	s0,28(sp)
20402810:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402812:	47a1                	li	a5,8
20402814:	3007b7f3          	csrrc	a5,mstatus,a5
20402818:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
2040281c:	0001                	nop
2040281e:	4472                	lw	s0,28(sp)
20402820:	6105                	addi	sp,sp,32
20402822:	8082                	ret

20402824 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
20402824:	1101                	addi	sp,sp,-32
20402826:	ce22                	sw	s0,28(sp)
20402828:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
2040282a:	47a1                	li	a5,8
2040282c:	3047a7f3          	csrrs	a5,mie,a5
20402830:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
20402834:	0001                	nop
20402836:	4472                	lw	s0,28(sp)
20402838:	6105                	addi	sp,sp,32
2040283a:	8082                	ret

2040283c <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
2040283c:	1101                	addi	sp,sp,-32
2040283e:	ce22                	sw	s0,28(sp)
20402840:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402842:	47a1                	li	a5,8
20402844:	3047b7f3          	csrrc	a5,mie,a5
20402848:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
2040284c:	0001                	nop
2040284e:	4472                	lw	s0,28(sp)
20402850:	6105                	addi	sp,sp,32
20402852:	8082                	ret

20402854 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
20402854:	1101                	addi	sp,sp,-32
20402856:	ce22                	sw	s0,28(sp)
20402858:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
2040285a:	08000793          	li	a5,128
2040285e:	3047a7f3          	csrrs	a5,mie,a5
20402862:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20402866:	0001                	nop
20402868:	4472                	lw	s0,28(sp)
2040286a:	6105                	addi	sp,sp,32
2040286c:	8082                	ret

2040286e <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
2040286e:	1101                	addi	sp,sp,-32
20402870:	ce22                	sw	s0,28(sp)
20402872:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402874:	08000793          	li	a5,128
20402878:	3047b7f3          	csrrc	a5,mie,a5
2040287c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20402880:	0001                	nop
20402882:	4472                	lw	s0,28(sp)
20402884:	6105                	addi	sp,sp,32
20402886:	8082                	ret

20402888 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20402888:	1101                	addi	sp,sp,-32
2040288a:	ce22                	sw	s0,28(sp)
2040288c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
2040288e:	6785                	lui	a5,0x1
20402890:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402894:	3047a7f3          	csrrs	a5,mie,a5
20402898:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
2040289c:	0001                	nop
2040289e:	4472                	lw	s0,28(sp)
204028a0:	6105                	addi	sp,sp,32
204028a2:	8082                	ret

204028a4 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
204028a4:	1101                	addi	sp,sp,-32
204028a6:	ce22                	sw	s0,28(sp)
204028a8:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
204028aa:	6785                	lui	a5,0x1
204028ac:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
204028b0:	3047b7f3          	csrrc	a5,mie,a5
204028b4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
204028b8:	0001                	nop
204028ba:	4472                	lw	s0,28(sp)
204028bc:	6105                	addi	sp,sp,32
204028be:	8082                	ret

204028c0 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
204028c0:	7179                	addi	sp,sp,-48
204028c2:	d622                	sw	s0,44(sp)
204028c4:	1800                	addi	s0,sp,48
204028c6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
204028ca:	fdc42783          	lw	a5,-36(s0)
204028ce:	4705                	li	a4,1
204028d0:	00f717b3          	sll	a5,a4,a5
204028d4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
204028d8:	fec42783          	lw	a5,-20(s0)
204028dc:	3047a7f3          	csrrs	a5,mie,a5
204028e0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
204028e4:	0001                	nop
204028e6:	5432                	lw	s0,44(sp)
204028e8:	6145                	addi	sp,sp,48
204028ea:	8082                	ret

204028ec <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
204028ec:	7179                	addi	sp,sp,-48
204028ee:	d622                	sw	s0,44(sp)
204028f0:	1800                	addi	s0,sp,48
204028f2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
204028f6:	fdc42783          	lw	a5,-36(s0)
204028fa:	4705                	li	a4,1
204028fc:	00f717b3          	sll	a5,a4,a5
20402900:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20402904:	fec42783          	lw	a5,-20(s0)
20402908:	3047b7f3          	csrrc	a5,mie,a5
2040290c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20402910:	0001                	nop
20402912:	5432                	lw	s0,44(sp)
20402914:	6145                	addi	sp,sp,48
20402916:	8082                	ret

20402918 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20402918:	1101                	addi	sp,sp,-32
2040291a:	ce06                	sw	ra,28(sp)
2040291c:	cc22                	sw	s0,24(sp)
2040291e:	1000                	addi	s0,sp,32
20402920:	fea42623          	sw	a0,-20(s0)
20402924:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20402928:	06400513          	li	a0,100
2040292c:	2ff020ef          	jal	ra,2040542a <metal_shutdown>

20402930 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20402930:	1101                	addi	sp,sp,-32
20402932:	ce06                	sw	ra,28(sp)
20402934:	cc22                	sw	s0,24(sp)
20402936:	1000                	addi	s0,sp,32
20402938:	fea42623          	sw	a0,-20(s0)
2040293c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20402940:	0c800513          	li	a0,200
20402944:	2e7020ef          	jal	ra,2040542a <metal_shutdown>

20402948 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20402948:	715d                	addi	sp,sp,-80
2040294a:	c686                	sw	ra,76(sp)
2040294c:	c496                	sw	t0,72(sp)
2040294e:	c29a                	sw	t1,68(sp)
20402950:	c09e                	sw	t2,64(sp)
20402952:	de22                	sw	s0,60(sp)
20402954:	dc2a                	sw	a0,56(sp)
20402956:	da2e                	sw	a1,52(sp)
20402958:	d832                	sw	a2,48(sp)
2040295a:	d636                	sw	a3,44(sp)
2040295c:	d43a                	sw	a4,40(sp)
2040295e:	d23e                	sw	a5,36(sp)
20402960:	d042                	sw	a6,32(sp)
20402962:	ce46                	sw	a7,28(sp)
20402964:	cc72                	sw	t3,24(sp)
20402966:	ca76                	sw	t4,20(sp)
20402968:	c87a                	sw	t5,16(sp)
2040296a:	c67e                	sw	t6,12(sp)
2040296c:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
2040296e:	12c00513          	li	a0,300
20402972:	2b9020ef          	jal	ra,2040542a <metal_shutdown>

20402976 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20402976:	711d                	addi	sp,sp,-96
20402978:	ce86                	sw	ra,92(sp)
2040297a:	cc96                	sw	t0,88(sp)
2040297c:	ca9a                	sw	t1,84(sp)
2040297e:	c89e                	sw	t2,80(sp)
20402980:	c6a2                	sw	s0,76(sp)
20402982:	c4aa                	sw	a0,72(sp)
20402984:	c2ae                	sw	a1,68(sp)
20402986:	c0b2                	sw	a2,64(sp)
20402988:	de36                	sw	a3,60(sp)
2040298a:	dc3a                	sw	a4,56(sp)
2040298c:	da3e                	sw	a5,52(sp)
2040298e:	d842                	sw	a6,48(sp)
20402990:	d646                	sw	a7,44(sp)
20402992:	d472                	sw	t3,40(sp)
20402994:	d276                	sw	t4,36(sp)
20402996:	d07a                	sw	t5,32(sp)
20402998:	ce7e                	sw	t6,28(sp)
2040299a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040299c:	3d3d                	jal	204027da <__metal_myhart_id>
2040299e:	872a                	mv	a4,a0
204029a0:	070a                	slli	a4,a4,0x2
204029a2:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204029a6:	97ba                	add	a5,a5,a4
204029a8:	439c                	lw	a5,0(a5)
204029aa:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
204029ae:	fac42783          	lw	a5,-84(s0)
204029b2:	c785                	beqz	a5,204029da <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204029b4:	fac42503          	lw	a0,-84(s0)
204029b8:	33f1                	jal	20402784 <__metal_driver_cpu_interrupt_controller>
204029ba:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
204029be:	fa842783          	lw	a5,-88(s0)
204029c2:	0e07a783          	lw	a5,224(a5)
204029c6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
204029ca:	fa842783          	lw	a5,-88(s0)
204029ce:	0d87a783          	lw	a5,216(a5)
204029d2:	fa442583          	lw	a1,-92(s0)
204029d6:	450d                	li	a0,3
204029d8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
204029da:	0001                	nop
204029dc:	40f6                	lw	ra,92(sp)
204029de:	42e6                	lw	t0,88(sp)
204029e0:	4356                	lw	t1,84(sp)
204029e2:	43c6                	lw	t2,80(sp)
204029e4:	4436                	lw	s0,76(sp)
204029e6:	4526                	lw	a0,72(sp)
204029e8:	4596                	lw	a1,68(sp)
204029ea:	4606                	lw	a2,64(sp)
204029ec:	56f2                	lw	a3,60(sp)
204029ee:	5762                	lw	a4,56(sp)
204029f0:	57d2                	lw	a5,52(sp)
204029f2:	5842                	lw	a6,48(sp)
204029f4:	58b2                	lw	a7,44(sp)
204029f6:	5e22                	lw	t3,40(sp)
204029f8:	5e92                	lw	t4,36(sp)
204029fa:	5f02                	lw	t5,32(sp)
204029fc:	4ff2                	lw	t6,28(sp)
204029fe:	6125                	addi	sp,sp,96
20402a00:	30200073          	mret

20402a04 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20402a04:	7179                	addi	sp,sp,-48
20402a06:	d606                	sw	ra,44(sp)
20402a08:	d422                	sw	s0,40(sp)
20402a0a:	1800                	addi	s0,sp,48
20402a0c:	fca42e23          	sw	a0,-36(s0)
20402a10:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a14:	33d9                	jal	204027da <__metal_myhart_id>
20402a16:	872a                	mv	a4,a0
20402a18:	070a                	slli	a4,a4,0x2
20402a1a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402a1e:	97ba                	add	a5,a5,a4
20402a20:	439c                	lw	a5,0(a5)
20402a22:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402a26:	342027f3          	csrr	a5,mcause
20402a2a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20402a2e:	fec42783          	lw	a5,-20(s0)
20402a32:	c795                	beqz	a5,20402a5e <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402a34:	fec42503          	lw	a0,-20(s0)
20402a38:	33b1                	jal	20402784 <__metal_driver_cpu_interrupt_controller>
20402a3a:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20402a3e:	fe842783          	lw	a5,-24(s0)
20402a42:	3ff7f793          	andi	a5,a5,1023
20402a46:	fe442703          	lw	a4,-28(s0)
20402a4a:	0e078793          	addi	a5,a5,224
20402a4e:	078a                	slli	a5,a5,0x2
20402a50:	97ba                	add	a5,a5,a4
20402a52:	479c                	lw	a5,8(a5)
20402a54:	fdc42583          	lw	a1,-36(s0)
20402a58:	fec42503          	lw	a0,-20(s0)
20402a5c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20402a5e:	0001                	nop
20402a60:	50b2                	lw	ra,44(sp)
20402a62:	5422                	lw	s0,40(sp)
20402a64:	6145                	addi	sp,sp,48
20402a66:	8082                	ret

20402a68 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20402a68:	711d                	addi	sp,sp,-96
20402a6a:	ce86                	sw	ra,92(sp)
20402a6c:	cc96                	sw	t0,88(sp)
20402a6e:	ca9a                	sw	t1,84(sp)
20402a70:	c89e                	sw	t2,80(sp)
20402a72:	c6a2                	sw	s0,76(sp)
20402a74:	c4aa                	sw	a0,72(sp)
20402a76:	c2ae                	sw	a1,68(sp)
20402a78:	c0b2                	sw	a2,64(sp)
20402a7a:	de36                	sw	a3,60(sp)
20402a7c:	dc3a                	sw	a4,56(sp)
20402a7e:	da3e                	sw	a5,52(sp)
20402a80:	d842                	sw	a6,48(sp)
20402a82:	d646                	sw	a7,44(sp)
20402a84:	d472                	sw	t3,40(sp)
20402a86:	d276                	sw	t4,36(sp)
20402a88:	d07a                	sw	t5,32(sp)
20402a8a:	ce7e                	sw	t6,28(sp)
20402a8c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a8e:	33b1                	jal	204027da <__metal_myhart_id>
20402a90:	872a                	mv	a4,a0
20402a92:	070a                	slli	a4,a4,0x2
20402a94:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402a98:	97ba                	add	a5,a5,a4
20402a9a:	439c                	lw	a5,0(a5)
20402a9c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20402aa0:	fac42783          	lw	a5,-84(s0)
20402aa4:	c785                	beqz	a5,20402acc <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402aa6:	fac42503          	lw	a0,-84(s0)
20402aaa:	39e9                	jal	20402784 <__metal_driver_cpu_interrupt_controller>
20402aac:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20402ab0:	fa842783          	lw	a5,-88(s0)
20402ab4:	1407a783          	lw	a5,320(a5)
20402ab8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20402abc:	fa842783          	lw	a5,-88(s0)
20402ac0:	1387a783          	lw	a5,312(a5)
20402ac4:	fa442583          	lw	a1,-92(s0)
20402ac8:	451d                	li	a0,7
20402aca:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20402acc:	0001                	nop
20402ace:	40f6                	lw	ra,92(sp)
20402ad0:	42e6                	lw	t0,88(sp)
20402ad2:	4356                	lw	t1,84(sp)
20402ad4:	43c6                	lw	t2,80(sp)
20402ad6:	4436                	lw	s0,76(sp)
20402ad8:	4526                	lw	a0,72(sp)
20402ada:	4596                	lw	a1,68(sp)
20402adc:	4606                	lw	a2,64(sp)
20402ade:	56f2                	lw	a3,60(sp)
20402ae0:	5762                	lw	a4,56(sp)
20402ae2:	57d2                	lw	a5,52(sp)
20402ae4:	5842                	lw	a6,48(sp)
20402ae6:	58b2                	lw	a7,44(sp)
20402ae8:	5e22                	lw	t3,40(sp)
20402aea:	5e92                	lw	t4,36(sp)
20402aec:	5f02                	lw	t5,32(sp)
20402aee:	4ff2                	lw	t6,28(sp)
20402af0:	6125                	addi	sp,sp,96
20402af2:	30200073          	mret

20402af6 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20402af6:	7179                	addi	sp,sp,-48
20402af8:	d606                	sw	ra,44(sp)
20402afa:	d422                	sw	s0,40(sp)
20402afc:	1800                	addi	s0,sp,48
20402afe:	fca42e23          	sw	a0,-36(s0)
20402b02:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20402b06:	39d1                	jal	204027da <__metal_myhart_id>
20402b08:	87aa                	mv	a5,a0
20402b0a:	853e                	mv	a0,a5
20402b0c:	314d                	jal	204027ae <__metal_driver_cpu_get>
20402b0e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20402b12:	fec42503          	lw	a0,-20(s0)
20402b16:	15a010ef          	jal	ra,20403c70 <__metal_driver_cpu_mtime_get>
20402b1a:	fea42023          	sw	a0,-32(s0)
20402b1e:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20402b22:	fe042783          	lw	a5,-32(s0)
20402b26:	fe442803          	lw	a6,-28(s0)
20402b2a:	45a9                	li	a1,10
20402b2c:	4601                	li	a2,0
20402b2e:	00b786b3          	add	a3,a5,a1
20402b32:	8536                	mv	a0,a3
20402b34:	00f53533          	sltu	a0,a0,a5
20402b38:	00c80733          	add	a4,a6,a2
20402b3c:	00e507b3          	add	a5,a0,a4
20402b40:	873e                	mv	a4,a5
20402b42:	87b6                	mv	a5,a3
20402b44:	883a                	mv	a6,a4
20402b46:	85be                	mv	a1,a5
20402b48:	8642                	mv	a2,a6
20402b4a:	fec42503          	lw	a0,-20(s0)
20402b4e:	188010ef          	jal	ra,20403cd6 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20402b52:	0001                	nop
20402b54:	50b2                	lw	ra,44(sp)
20402b56:	5422                	lw	s0,40(sp)
20402b58:	6145                	addi	sp,sp,48
20402b5a:	8082                	ret
	...

20402b80 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402b80:	7119                	addi	sp,sp,-128
20402b82:	de86                	sw	ra,124(sp)
20402b84:	dc96                	sw	t0,120(sp)
20402b86:	da9a                	sw	t1,116(sp)
20402b88:	d89e                	sw	t2,112(sp)
20402b8a:	d6a2                	sw	s0,108(sp)
20402b8c:	d4aa                	sw	a0,104(sp)
20402b8e:	d2ae                	sw	a1,100(sp)
20402b90:	d0b2                	sw	a2,96(sp)
20402b92:	ceb6                	sw	a3,92(sp)
20402b94:	ccba                	sw	a4,88(sp)
20402b96:	cabe                	sw	a5,84(sp)
20402b98:	c8c2                	sw	a6,80(sp)
20402b9a:	c6c6                	sw	a7,76(sp)
20402b9c:	c4f2                	sw	t3,72(sp)
20402b9e:	c2f6                	sw	t4,68(sp)
20402ba0:	c0fa                	sw	t5,64(sp)
20402ba2:	de7e                	sw	t6,60(sp)
20402ba4:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ba6:	c35ff0ef          	jal	ra,204027da <__metal_myhart_id>
20402baa:	872a                	mv	a4,a0
20402bac:	070a                	slli	a4,a4,0x2
20402bae:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402bb2:	97ba                	add	a5,a5,a4
20402bb4:	439c                	lw	a5,0(a5)
20402bb6:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402bba:	342027f3          	csrr	a5,mcause
20402bbe:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20402bc2:	341027f3          	csrr	a5,mepc
20402bc6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
20402bca:	343027f3          	csrr	a5,mtval
20402bce:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20402bd2:	305027f3          	csrr	a5,mtvec
20402bd6:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
20402bda:	fac42783          	lw	a5,-84(s0)
20402bde:	c7e9                	beqz	a5,20402ca8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402be0:	fac42503          	lw	a0,-84(s0)
20402be4:	ba1ff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20402be8:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
20402bec:	fa842783          	lw	a5,-88(s0)
20402bf0:	3ff7f793          	andi	a5,a5,1023
20402bf4:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20402bf8:	fa842783          	lw	a5,-88(s0)
20402bfc:	0807d863          	bgez	a5,20402c8c <__metal_exception_handler+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402c00:	f9442703          	lw	a4,-108(s0)
20402c04:	47ad                	li	a5,11
20402c06:	00e7d763          	bge	a5,a4,20402c14 <__metal_exception_handler+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402c0a:	f9c42783          	lw	a5,-100(s0)
20402c0e:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402c12:	ef9d                	bnez	a5,20402c50 <__metal_exception_handler+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402c14:	f9842683          	lw	a3,-104(s0)
20402c18:	f9442703          	lw	a4,-108(s0)
20402c1c:	87ba                	mv	a5,a4
20402c1e:	0786                	slli	a5,a5,0x1
20402c20:	97ba                	add	a5,a5,a4
20402c22:	078e                	slli	a5,a5,0x3
20402c24:	97b6                	add	a5,a5,a3
20402c26:	0987a783          	lw	a5,152(a5)
20402c2a:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
20402c2e:	f9842683          	lw	a3,-104(s0)
20402c32:	f9442703          	lw	a4,-108(s0)
20402c36:	87ba                	mv	a5,a4
20402c38:	0786                	slli	a5,a5,0x1
20402c3a:	97ba                	add	a5,a5,a4
20402c3c:	078e                	slli	a5,a5,0x3
20402c3e:	97b6                	add	a5,a5,a3
20402c40:	0907a783          	lw	a5,144(a5)
20402c44:	f8c42583          	lw	a1,-116(s0)
20402c48:	f9442503          	lw	a0,-108(s0)
20402c4c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
20402c4e:	a8a9                	j	20402ca8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20402c50:	f9c42783          	lw	a5,-100(s0)
20402c54:	03f7f713          	andi	a4,a5,63
20402c58:	4789                	li	a5,2
20402c5a:	04f71763          	bne	a4,a5,20402ca8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
20402c5e:	307027f3          	csrr	a5,mtvt
20402c62:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402c66:	f9842783          	lw	a5,-104(s0)
20402c6a:	0dc7a783          	lw	a5,220(a5)
20402c6e:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20402c72:	f9042783          	lw	a5,-112(s0)
20402c76:	439c                	lw	a5,0(a5)
20402c78:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
20402c7c:	f8842783          	lw	a5,-120(s0)
20402c80:	f8c42583          	lw	a1,-116(s0)
20402c84:	f9442503          	lw	a0,-108(s0)
20402c88:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402c8a:	a839                	j	20402ca8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402c8c:	f9842703          	lw	a4,-104(s0)
20402c90:	f9442783          	lw	a5,-108(s0)
20402c94:	0e078793          	addi	a5,a5,224
20402c98:	078a                	slli	a5,a5,0x2
20402c9a:	97ba                	add	a5,a5,a4
20402c9c:	479c                	lw	a5,8(a5)
20402c9e:	f9442583          	lw	a1,-108(s0)
20402ca2:	fac42503          	lw	a0,-84(s0)
20402ca6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20402ca8:	50f6                	lw	ra,124(sp)
20402caa:	52e6                	lw	t0,120(sp)
20402cac:	5356                	lw	t1,116(sp)
20402cae:	53c6                	lw	t2,112(sp)
20402cb0:	5436                	lw	s0,108(sp)
20402cb2:	5526                	lw	a0,104(sp)
20402cb4:	5596                	lw	a1,100(sp)
20402cb6:	5606                	lw	a2,96(sp)
20402cb8:	46f6                	lw	a3,92(sp)
20402cba:	4766                	lw	a4,88(sp)
20402cbc:	47d6                	lw	a5,84(sp)
20402cbe:	4846                	lw	a6,80(sp)
20402cc0:	48b6                	lw	a7,76(sp)
20402cc2:	4e26                	lw	t3,72(sp)
20402cc4:	4e96                	lw	t4,68(sp)
20402cc6:	4f06                	lw	t5,64(sp)
20402cc8:	5ff2                	lw	t6,60(sp)
20402cca:	6109                	addi	sp,sp,128
20402ccc:	30200073          	mret
	...

20402cf6 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20402cf6:	711d                	addi	sp,sp,-96
20402cf8:	ce86                	sw	ra,92(sp)
20402cfa:	cc96                	sw	t0,88(sp)
20402cfc:	ca9a                	sw	t1,84(sp)
20402cfe:	c89e                	sw	t2,80(sp)
20402d00:	c6a2                	sw	s0,76(sp)
20402d02:	c4aa                	sw	a0,72(sp)
20402d04:	c2ae                	sw	a1,68(sp)
20402d06:	c0b2                	sw	a2,64(sp)
20402d08:	de36                	sw	a3,60(sp)
20402d0a:	dc3a                	sw	a4,56(sp)
20402d0c:	da3e                	sw	a5,52(sp)
20402d0e:	d842                	sw	a6,48(sp)
20402d10:	d646                	sw	a7,44(sp)
20402d12:	d472                	sw	t3,40(sp)
20402d14:	d276                	sw	t4,36(sp)
20402d16:	d07a                	sw	t5,32(sp)
20402d18:	ce7e                	sw	t6,28(sp)
20402d1a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d1c:	abfff0ef          	jal	ra,204027da <__metal_myhart_id>
20402d20:	872a                	mv	a4,a0
20402d22:	070a                	slli	a4,a4,0x2
20402d24:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402d28:	97ba                	add	a5,a5,a4
20402d2a:	439c                	lw	a5,0(a5)
20402d2c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20402d30:	fac42783          	lw	a5,-84(s0)
20402d34:	c78d                	beqz	a5,20402d5e <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402d36:	fac42503          	lw	a0,-84(s0)
20402d3a:	a4bff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20402d3e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20402d42:	fa842783          	lw	a5,-88(s0)
20402d46:	2187a783          	lw	a5,536(a5)
20402d4a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
20402d4e:	fa842783          	lw	a5,-88(s0)
20402d52:	2107a783          	lw	a5,528(a5)
20402d56:	fa442583          	lw	a1,-92(s0)
20402d5a:	4541                	li	a0,16
20402d5c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
20402d5e:	0001                	nop
20402d60:	40f6                	lw	ra,92(sp)
20402d62:	42e6                	lw	t0,88(sp)
20402d64:	4356                	lw	t1,84(sp)
20402d66:	43c6                	lw	t2,80(sp)
20402d68:	4436                	lw	s0,76(sp)
20402d6a:	4526                	lw	a0,72(sp)
20402d6c:	4596                	lw	a1,68(sp)
20402d6e:	4606                	lw	a2,64(sp)
20402d70:	56f2                	lw	a3,60(sp)
20402d72:	5762                	lw	a4,56(sp)
20402d74:	57d2                	lw	a5,52(sp)
20402d76:	5842                	lw	a6,48(sp)
20402d78:	58b2                	lw	a7,44(sp)
20402d7a:	5e22                	lw	t3,40(sp)
20402d7c:	5e92                	lw	t4,36(sp)
20402d7e:	5f02                	lw	t5,32(sp)
20402d80:	4ff2                	lw	t6,28(sp)
20402d82:	6125                	addi	sp,sp,96
20402d84:	30200073          	mret

20402d88 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402d88:	711d                	addi	sp,sp,-96
20402d8a:	ce86                	sw	ra,92(sp)
20402d8c:	cc96                	sw	t0,88(sp)
20402d8e:	ca9a                	sw	t1,84(sp)
20402d90:	c89e                	sw	t2,80(sp)
20402d92:	c6a2                	sw	s0,76(sp)
20402d94:	c4aa                	sw	a0,72(sp)
20402d96:	c2ae                	sw	a1,68(sp)
20402d98:	c0b2                	sw	a2,64(sp)
20402d9a:	de36                	sw	a3,60(sp)
20402d9c:	dc3a                	sw	a4,56(sp)
20402d9e:	da3e                	sw	a5,52(sp)
20402da0:	d842                	sw	a6,48(sp)
20402da2:	d646                	sw	a7,44(sp)
20402da4:	d472                	sw	t3,40(sp)
20402da6:	d276                	sw	t4,36(sp)
20402da8:	d07a                	sw	t5,32(sp)
20402daa:	ce7e                	sw	t6,28(sp)
20402dac:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402dae:	a2dff0ef          	jal	ra,204027da <__metal_myhart_id>
20402db2:	872a                	mv	a4,a0
20402db4:	070a                	slli	a4,a4,0x2
20402db6:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402dba:	97ba                	add	a5,a5,a4
20402dbc:	439c                	lw	a5,0(a5)
20402dbe:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20402dc2:	fac42783          	lw	a5,-84(s0)
20402dc6:	c78d                	beqz	a5,20402df0 <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402dc8:	fac42503          	lw	a0,-84(s0)
20402dcc:	9b9ff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20402dd0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20402dd4:	fa842783          	lw	a5,-88(s0)
20402dd8:	2307a783          	lw	a5,560(a5)
20402ddc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20402de0:	fa842783          	lw	a5,-88(s0)
20402de4:	2287a783          	lw	a5,552(a5)
20402de8:	fa442583          	lw	a1,-92(s0)
20402dec:	4545                	li	a0,17
20402dee:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20402df0:	0001                	nop
20402df2:	40f6                	lw	ra,92(sp)
20402df4:	42e6                	lw	t0,88(sp)
20402df6:	4356                	lw	t1,84(sp)
20402df8:	43c6                	lw	t2,80(sp)
20402dfa:	4436                	lw	s0,76(sp)
20402dfc:	4526                	lw	a0,72(sp)
20402dfe:	4596                	lw	a1,68(sp)
20402e00:	4606                	lw	a2,64(sp)
20402e02:	56f2                	lw	a3,60(sp)
20402e04:	5762                	lw	a4,56(sp)
20402e06:	57d2                	lw	a5,52(sp)
20402e08:	5842                	lw	a6,48(sp)
20402e0a:	58b2                	lw	a7,44(sp)
20402e0c:	5e22                	lw	t3,40(sp)
20402e0e:	5e92                	lw	t4,36(sp)
20402e10:	5f02                	lw	t5,32(sp)
20402e12:	4ff2                	lw	t6,28(sp)
20402e14:	6125                	addi	sp,sp,96
20402e16:	30200073          	mret

20402e1a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402e1a:	711d                	addi	sp,sp,-96
20402e1c:	ce86                	sw	ra,92(sp)
20402e1e:	cc96                	sw	t0,88(sp)
20402e20:	ca9a                	sw	t1,84(sp)
20402e22:	c89e                	sw	t2,80(sp)
20402e24:	c6a2                	sw	s0,76(sp)
20402e26:	c4aa                	sw	a0,72(sp)
20402e28:	c2ae                	sw	a1,68(sp)
20402e2a:	c0b2                	sw	a2,64(sp)
20402e2c:	de36                	sw	a3,60(sp)
20402e2e:	dc3a                	sw	a4,56(sp)
20402e30:	da3e                	sw	a5,52(sp)
20402e32:	d842                	sw	a6,48(sp)
20402e34:	d646                	sw	a7,44(sp)
20402e36:	d472                	sw	t3,40(sp)
20402e38:	d276                	sw	t4,36(sp)
20402e3a:	d07a                	sw	t5,32(sp)
20402e3c:	ce7e                	sw	t6,28(sp)
20402e3e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e40:	99bff0ef          	jal	ra,204027da <__metal_myhart_id>
20402e44:	872a                	mv	a4,a0
20402e46:	070a                	slli	a4,a4,0x2
20402e48:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402e4c:	97ba                	add	a5,a5,a4
20402e4e:	439c                	lw	a5,0(a5)
20402e50:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402e54:	fac42783          	lw	a5,-84(s0)
20402e58:	c78d                	beqz	a5,20402e82 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e5a:	fac42503          	lw	a0,-84(s0)
20402e5e:	927ff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20402e62:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402e66:	fa842783          	lw	a5,-88(s0)
20402e6a:	2487a783          	lw	a5,584(a5)
20402e6e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20402e72:	fa842783          	lw	a5,-88(s0)
20402e76:	2407a783          	lw	a5,576(a5)
20402e7a:	fa442583          	lw	a1,-92(s0)
20402e7e:	4549                	li	a0,18
20402e80:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20402e82:	0001                	nop
20402e84:	40f6                	lw	ra,92(sp)
20402e86:	42e6                	lw	t0,88(sp)
20402e88:	4356                	lw	t1,84(sp)
20402e8a:	43c6                	lw	t2,80(sp)
20402e8c:	4436                	lw	s0,76(sp)
20402e8e:	4526                	lw	a0,72(sp)
20402e90:	4596                	lw	a1,68(sp)
20402e92:	4606                	lw	a2,64(sp)
20402e94:	56f2                	lw	a3,60(sp)
20402e96:	5762                	lw	a4,56(sp)
20402e98:	57d2                	lw	a5,52(sp)
20402e9a:	5842                	lw	a6,48(sp)
20402e9c:	58b2                	lw	a7,44(sp)
20402e9e:	5e22                	lw	t3,40(sp)
20402ea0:	5e92                	lw	t4,36(sp)
20402ea2:	5f02                	lw	t5,32(sp)
20402ea4:	4ff2                	lw	t6,28(sp)
20402ea6:	6125                	addi	sp,sp,96
20402ea8:	30200073          	mret

20402eac <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
20402eac:	711d                	addi	sp,sp,-96
20402eae:	ce86                	sw	ra,92(sp)
20402eb0:	cc96                	sw	t0,88(sp)
20402eb2:	ca9a                	sw	t1,84(sp)
20402eb4:	c89e                	sw	t2,80(sp)
20402eb6:	c6a2                	sw	s0,76(sp)
20402eb8:	c4aa                	sw	a0,72(sp)
20402eba:	c2ae                	sw	a1,68(sp)
20402ebc:	c0b2                	sw	a2,64(sp)
20402ebe:	de36                	sw	a3,60(sp)
20402ec0:	dc3a                	sw	a4,56(sp)
20402ec2:	da3e                	sw	a5,52(sp)
20402ec4:	d842                	sw	a6,48(sp)
20402ec6:	d646                	sw	a7,44(sp)
20402ec8:	d472                	sw	t3,40(sp)
20402eca:	d276                	sw	t4,36(sp)
20402ecc:	d07a                	sw	t5,32(sp)
20402ece:	ce7e                	sw	t6,28(sp)
20402ed0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ed2:	909ff0ef          	jal	ra,204027da <__metal_myhart_id>
20402ed6:	872a                	mv	a4,a0
20402ed8:	070a                	slli	a4,a4,0x2
20402eda:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402ede:	97ba                	add	a5,a5,a4
20402ee0:	439c                	lw	a5,0(a5)
20402ee2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20402ee6:	fac42783          	lw	a5,-84(s0)
20402eea:	c78d                	beqz	a5,20402f14 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402eec:	fac42503          	lw	a0,-84(s0)
20402ef0:	895ff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20402ef4:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20402ef8:	fa842783          	lw	a5,-88(s0)
20402efc:	2607a783          	lw	a5,608(a5)
20402f00:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20402f04:	fa842783          	lw	a5,-88(s0)
20402f08:	2587a783          	lw	a5,600(a5)
20402f0c:	fa442583          	lw	a1,-92(s0)
20402f10:	454d                	li	a0,19
20402f12:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20402f14:	0001                	nop
20402f16:	40f6                	lw	ra,92(sp)
20402f18:	42e6                	lw	t0,88(sp)
20402f1a:	4356                	lw	t1,84(sp)
20402f1c:	43c6                	lw	t2,80(sp)
20402f1e:	4436                	lw	s0,76(sp)
20402f20:	4526                	lw	a0,72(sp)
20402f22:	4596                	lw	a1,68(sp)
20402f24:	4606                	lw	a2,64(sp)
20402f26:	56f2                	lw	a3,60(sp)
20402f28:	5762                	lw	a4,56(sp)
20402f2a:	57d2                	lw	a5,52(sp)
20402f2c:	5842                	lw	a6,48(sp)
20402f2e:	58b2                	lw	a7,44(sp)
20402f30:	5e22                	lw	t3,40(sp)
20402f32:	5e92                	lw	t4,36(sp)
20402f34:	5f02                	lw	t5,32(sp)
20402f36:	4ff2                	lw	t6,28(sp)
20402f38:	6125                	addi	sp,sp,96
20402f3a:	30200073          	mret

20402f3e <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
20402f3e:	711d                	addi	sp,sp,-96
20402f40:	ce86                	sw	ra,92(sp)
20402f42:	cc96                	sw	t0,88(sp)
20402f44:	ca9a                	sw	t1,84(sp)
20402f46:	c89e                	sw	t2,80(sp)
20402f48:	c6a2                	sw	s0,76(sp)
20402f4a:	c4aa                	sw	a0,72(sp)
20402f4c:	c2ae                	sw	a1,68(sp)
20402f4e:	c0b2                	sw	a2,64(sp)
20402f50:	de36                	sw	a3,60(sp)
20402f52:	dc3a                	sw	a4,56(sp)
20402f54:	da3e                	sw	a5,52(sp)
20402f56:	d842                	sw	a6,48(sp)
20402f58:	d646                	sw	a7,44(sp)
20402f5a:	d472                	sw	t3,40(sp)
20402f5c:	d276                	sw	t4,36(sp)
20402f5e:	d07a                	sw	t5,32(sp)
20402f60:	ce7e                	sw	t6,28(sp)
20402f62:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f64:	877ff0ef          	jal	ra,204027da <__metal_myhart_id>
20402f68:	872a                	mv	a4,a0
20402f6a:	070a                	slli	a4,a4,0x2
20402f6c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402f70:	97ba                	add	a5,a5,a4
20402f72:	439c                	lw	a5,0(a5)
20402f74:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20402f78:	fac42783          	lw	a5,-84(s0)
20402f7c:	c78d                	beqz	a5,20402fa6 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f7e:	fac42503          	lw	a0,-84(s0)
20402f82:	803ff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20402f86:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20402f8a:	fa842783          	lw	a5,-88(s0)
20402f8e:	2787a783          	lw	a5,632(a5)
20402f92:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20402f96:	fa842783          	lw	a5,-88(s0)
20402f9a:	2707a783          	lw	a5,624(a5)
20402f9e:	fa442583          	lw	a1,-92(s0)
20402fa2:	4551                	li	a0,20
20402fa4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20402fa6:	0001                	nop
20402fa8:	40f6                	lw	ra,92(sp)
20402faa:	42e6                	lw	t0,88(sp)
20402fac:	4356                	lw	t1,84(sp)
20402fae:	43c6                	lw	t2,80(sp)
20402fb0:	4436                	lw	s0,76(sp)
20402fb2:	4526                	lw	a0,72(sp)
20402fb4:	4596                	lw	a1,68(sp)
20402fb6:	4606                	lw	a2,64(sp)
20402fb8:	56f2                	lw	a3,60(sp)
20402fba:	5762                	lw	a4,56(sp)
20402fbc:	57d2                	lw	a5,52(sp)
20402fbe:	5842                	lw	a6,48(sp)
20402fc0:	58b2                	lw	a7,44(sp)
20402fc2:	5e22                	lw	t3,40(sp)
20402fc4:	5e92                	lw	t4,36(sp)
20402fc6:	5f02                	lw	t5,32(sp)
20402fc8:	4ff2                	lw	t6,28(sp)
20402fca:	6125                	addi	sp,sp,96
20402fcc:	30200073          	mret

20402fd0 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20402fd0:	711d                	addi	sp,sp,-96
20402fd2:	ce86                	sw	ra,92(sp)
20402fd4:	cc96                	sw	t0,88(sp)
20402fd6:	ca9a                	sw	t1,84(sp)
20402fd8:	c89e                	sw	t2,80(sp)
20402fda:	c6a2                	sw	s0,76(sp)
20402fdc:	c4aa                	sw	a0,72(sp)
20402fde:	c2ae                	sw	a1,68(sp)
20402fe0:	c0b2                	sw	a2,64(sp)
20402fe2:	de36                	sw	a3,60(sp)
20402fe4:	dc3a                	sw	a4,56(sp)
20402fe6:	da3e                	sw	a5,52(sp)
20402fe8:	d842                	sw	a6,48(sp)
20402fea:	d646                	sw	a7,44(sp)
20402fec:	d472                	sw	t3,40(sp)
20402fee:	d276                	sw	t4,36(sp)
20402ff0:	d07a                	sw	t5,32(sp)
20402ff2:	ce7e                	sw	t6,28(sp)
20402ff4:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ff6:	fe4ff0ef          	jal	ra,204027da <__metal_myhart_id>
20402ffa:	872a                	mv	a4,a0
20402ffc:	070a                	slli	a4,a4,0x2
20402ffe:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403002:	97ba                	add	a5,a5,a4
20403004:	439c                	lw	a5,0(a5)
20403006:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
2040300a:	fac42783          	lw	a5,-84(s0)
2040300e:	c78d                	beqz	a5,20403038 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403010:	fac42503          	lw	a0,-84(s0)
20403014:	f70ff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20403018:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
2040301c:	fa842783          	lw	a5,-88(s0)
20403020:	2907a783          	lw	a5,656(a5)
20403024:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20403028:	fa842783          	lw	a5,-88(s0)
2040302c:	2887a783          	lw	a5,648(a5)
20403030:	fa442583          	lw	a1,-92(s0)
20403034:	4555                	li	a0,21
20403036:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20403038:	0001                	nop
2040303a:	40f6                	lw	ra,92(sp)
2040303c:	42e6                	lw	t0,88(sp)
2040303e:	4356                	lw	t1,84(sp)
20403040:	43c6                	lw	t2,80(sp)
20403042:	4436                	lw	s0,76(sp)
20403044:	4526                	lw	a0,72(sp)
20403046:	4596                	lw	a1,68(sp)
20403048:	4606                	lw	a2,64(sp)
2040304a:	56f2                	lw	a3,60(sp)
2040304c:	5762                	lw	a4,56(sp)
2040304e:	57d2                	lw	a5,52(sp)
20403050:	5842                	lw	a6,48(sp)
20403052:	58b2                	lw	a7,44(sp)
20403054:	5e22                	lw	t3,40(sp)
20403056:	5e92                	lw	t4,36(sp)
20403058:	5f02                	lw	t5,32(sp)
2040305a:	4ff2                	lw	t6,28(sp)
2040305c:	6125                	addi	sp,sp,96
2040305e:	30200073          	mret

20403062 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20403062:	711d                	addi	sp,sp,-96
20403064:	ce86                	sw	ra,92(sp)
20403066:	cc96                	sw	t0,88(sp)
20403068:	ca9a                	sw	t1,84(sp)
2040306a:	c89e                	sw	t2,80(sp)
2040306c:	c6a2                	sw	s0,76(sp)
2040306e:	c4aa                	sw	a0,72(sp)
20403070:	c2ae                	sw	a1,68(sp)
20403072:	c0b2                	sw	a2,64(sp)
20403074:	de36                	sw	a3,60(sp)
20403076:	dc3a                	sw	a4,56(sp)
20403078:	da3e                	sw	a5,52(sp)
2040307a:	d842                	sw	a6,48(sp)
2040307c:	d646                	sw	a7,44(sp)
2040307e:	d472                	sw	t3,40(sp)
20403080:	d276                	sw	t4,36(sp)
20403082:	d07a                	sw	t5,32(sp)
20403084:	ce7e                	sw	t6,28(sp)
20403086:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403088:	f52ff0ef          	jal	ra,204027da <__metal_myhart_id>
2040308c:	872a                	mv	a4,a0
2040308e:	070a                	slli	a4,a4,0x2
20403090:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403094:	97ba                	add	a5,a5,a4
20403096:	439c                	lw	a5,0(a5)
20403098:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
2040309c:	fac42783          	lw	a5,-84(s0)
204030a0:	c78d                	beqz	a5,204030ca <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204030a2:	fac42503          	lw	a0,-84(s0)
204030a6:	edeff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
204030aa:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
204030ae:	fa842783          	lw	a5,-88(s0)
204030b2:	2a87a783          	lw	a5,680(a5)
204030b6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
204030ba:	fa842783          	lw	a5,-88(s0)
204030be:	2a07a783          	lw	a5,672(a5)
204030c2:	fa442583          	lw	a1,-92(s0)
204030c6:	4559                	li	a0,22
204030c8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
204030ca:	0001                	nop
204030cc:	40f6                	lw	ra,92(sp)
204030ce:	42e6                	lw	t0,88(sp)
204030d0:	4356                	lw	t1,84(sp)
204030d2:	43c6                	lw	t2,80(sp)
204030d4:	4436                	lw	s0,76(sp)
204030d6:	4526                	lw	a0,72(sp)
204030d8:	4596                	lw	a1,68(sp)
204030da:	4606                	lw	a2,64(sp)
204030dc:	56f2                	lw	a3,60(sp)
204030de:	5762                	lw	a4,56(sp)
204030e0:	57d2                	lw	a5,52(sp)
204030e2:	5842                	lw	a6,48(sp)
204030e4:	58b2                	lw	a7,44(sp)
204030e6:	5e22                	lw	t3,40(sp)
204030e8:	5e92                	lw	t4,36(sp)
204030ea:	5f02                	lw	t5,32(sp)
204030ec:	4ff2                	lw	t6,28(sp)
204030ee:	6125                	addi	sp,sp,96
204030f0:	30200073          	mret

204030f4 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
204030f4:	711d                	addi	sp,sp,-96
204030f6:	ce86                	sw	ra,92(sp)
204030f8:	cc96                	sw	t0,88(sp)
204030fa:	ca9a                	sw	t1,84(sp)
204030fc:	c89e                	sw	t2,80(sp)
204030fe:	c6a2                	sw	s0,76(sp)
20403100:	c4aa                	sw	a0,72(sp)
20403102:	c2ae                	sw	a1,68(sp)
20403104:	c0b2                	sw	a2,64(sp)
20403106:	de36                	sw	a3,60(sp)
20403108:	dc3a                	sw	a4,56(sp)
2040310a:	da3e                	sw	a5,52(sp)
2040310c:	d842                	sw	a6,48(sp)
2040310e:	d646                	sw	a7,44(sp)
20403110:	d472                	sw	t3,40(sp)
20403112:	d276                	sw	t4,36(sp)
20403114:	d07a                	sw	t5,32(sp)
20403116:	ce7e                	sw	t6,28(sp)
20403118:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040311a:	ec0ff0ef          	jal	ra,204027da <__metal_myhart_id>
2040311e:	872a                	mv	a4,a0
20403120:	070a                	slli	a4,a4,0x2
20403122:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403126:	97ba                	add	a5,a5,a4
20403128:	439c                	lw	a5,0(a5)
2040312a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
2040312e:	fac42783          	lw	a5,-84(s0)
20403132:	c78d                	beqz	a5,2040315c <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403134:	fac42503          	lw	a0,-84(s0)
20403138:	e4cff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
2040313c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20403140:	fa842783          	lw	a5,-88(s0)
20403144:	2c07a783          	lw	a5,704(a5)
20403148:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
2040314c:	fa842783          	lw	a5,-88(s0)
20403150:	2b87a783          	lw	a5,696(a5)
20403154:	fa442583          	lw	a1,-92(s0)
20403158:	455d                	li	a0,23
2040315a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
2040315c:	0001                	nop
2040315e:	40f6                	lw	ra,92(sp)
20403160:	42e6                	lw	t0,88(sp)
20403162:	4356                	lw	t1,84(sp)
20403164:	43c6                	lw	t2,80(sp)
20403166:	4436                	lw	s0,76(sp)
20403168:	4526                	lw	a0,72(sp)
2040316a:	4596                	lw	a1,68(sp)
2040316c:	4606                	lw	a2,64(sp)
2040316e:	56f2                	lw	a3,60(sp)
20403170:	5762                	lw	a4,56(sp)
20403172:	57d2                	lw	a5,52(sp)
20403174:	5842                	lw	a6,48(sp)
20403176:	58b2                	lw	a7,44(sp)
20403178:	5e22                	lw	t3,40(sp)
2040317a:	5e92                	lw	t4,36(sp)
2040317c:	5f02                	lw	t5,32(sp)
2040317e:	4ff2                	lw	t6,28(sp)
20403180:	6125                	addi	sp,sp,96
20403182:	30200073          	mret

20403186 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20403186:	711d                	addi	sp,sp,-96
20403188:	ce86                	sw	ra,92(sp)
2040318a:	cc96                	sw	t0,88(sp)
2040318c:	ca9a                	sw	t1,84(sp)
2040318e:	c89e                	sw	t2,80(sp)
20403190:	c6a2                	sw	s0,76(sp)
20403192:	c4aa                	sw	a0,72(sp)
20403194:	c2ae                	sw	a1,68(sp)
20403196:	c0b2                	sw	a2,64(sp)
20403198:	de36                	sw	a3,60(sp)
2040319a:	dc3a                	sw	a4,56(sp)
2040319c:	da3e                	sw	a5,52(sp)
2040319e:	d842                	sw	a6,48(sp)
204031a0:	d646                	sw	a7,44(sp)
204031a2:	d472                	sw	t3,40(sp)
204031a4:	d276                	sw	t4,36(sp)
204031a6:	d07a                	sw	t5,32(sp)
204031a8:	ce7e                	sw	t6,28(sp)
204031aa:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204031ac:	e2eff0ef          	jal	ra,204027da <__metal_myhart_id>
204031b0:	872a                	mv	a4,a0
204031b2:	070a                	slli	a4,a4,0x2
204031b4:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204031b8:	97ba                	add	a5,a5,a4
204031ba:	439c                	lw	a5,0(a5)
204031bc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
204031c0:	fac42783          	lw	a5,-84(s0)
204031c4:	c78d                	beqz	a5,204031ee <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204031c6:	fac42503          	lw	a0,-84(s0)
204031ca:	dbaff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
204031ce:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
204031d2:	fa842783          	lw	a5,-88(s0)
204031d6:	2d87a783          	lw	a5,728(a5)
204031da:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
204031de:	fa842783          	lw	a5,-88(s0)
204031e2:	2d07a783          	lw	a5,720(a5)
204031e6:	fa442583          	lw	a1,-92(s0)
204031ea:	4561                	li	a0,24
204031ec:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
204031ee:	0001                	nop
204031f0:	40f6                	lw	ra,92(sp)
204031f2:	42e6                	lw	t0,88(sp)
204031f4:	4356                	lw	t1,84(sp)
204031f6:	43c6                	lw	t2,80(sp)
204031f8:	4436                	lw	s0,76(sp)
204031fa:	4526                	lw	a0,72(sp)
204031fc:	4596                	lw	a1,68(sp)
204031fe:	4606                	lw	a2,64(sp)
20403200:	56f2                	lw	a3,60(sp)
20403202:	5762                	lw	a4,56(sp)
20403204:	57d2                	lw	a5,52(sp)
20403206:	5842                	lw	a6,48(sp)
20403208:	58b2                	lw	a7,44(sp)
2040320a:	5e22                	lw	t3,40(sp)
2040320c:	5e92                	lw	t4,36(sp)
2040320e:	5f02                	lw	t5,32(sp)
20403210:	4ff2                	lw	t6,28(sp)
20403212:	6125                	addi	sp,sp,96
20403214:	30200073          	mret

20403218 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20403218:	711d                	addi	sp,sp,-96
2040321a:	ce86                	sw	ra,92(sp)
2040321c:	cc96                	sw	t0,88(sp)
2040321e:	ca9a                	sw	t1,84(sp)
20403220:	c89e                	sw	t2,80(sp)
20403222:	c6a2                	sw	s0,76(sp)
20403224:	c4aa                	sw	a0,72(sp)
20403226:	c2ae                	sw	a1,68(sp)
20403228:	c0b2                	sw	a2,64(sp)
2040322a:	de36                	sw	a3,60(sp)
2040322c:	dc3a                	sw	a4,56(sp)
2040322e:	da3e                	sw	a5,52(sp)
20403230:	d842                	sw	a6,48(sp)
20403232:	d646                	sw	a7,44(sp)
20403234:	d472                	sw	t3,40(sp)
20403236:	d276                	sw	t4,36(sp)
20403238:	d07a                	sw	t5,32(sp)
2040323a:	ce7e                	sw	t6,28(sp)
2040323c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040323e:	d9cff0ef          	jal	ra,204027da <__metal_myhart_id>
20403242:	872a                	mv	a4,a0
20403244:	070a                	slli	a4,a4,0x2
20403246:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040324a:	97ba                	add	a5,a5,a4
2040324c:	439c                	lw	a5,0(a5)
2040324e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20403252:	fac42783          	lw	a5,-84(s0)
20403256:	c78d                	beqz	a5,20403280 <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403258:	fac42503          	lw	a0,-84(s0)
2040325c:	d28ff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20403260:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20403264:	fa842783          	lw	a5,-88(s0)
20403268:	2f07a783          	lw	a5,752(a5)
2040326c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20403270:	fa842783          	lw	a5,-88(s0)
20403274:	2e87a783          	lw	a5,744(a5)
20403278:	fa442583          	lw	a1,-92(s0)
2040327c:	4565                	li	a0,25
2040327e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20403280:	0001                	nop
20403282:	40f6                	lw	ra,92(sp)
20403284:	42e6                	lw	t0,88(sp)
20403286:	4356                	lw	t1,84(sp)
20403288:	43c6                	lw	t2,80(sp)
2040328a:	4436                	lw	s0,76(sp)
2040328c:	4526                	lw	a0,72(sp)
2040328e:	4596                	lw	a1,68(sp)
20403290:	4606                	lw	a2,64(sp)
20403292:	56f2                	lw	a3,60(sp)
20403294:	5762                	lw	a4,56(sp)
20403296:	57d2                	lw	a5,52(sp)
20403298:	5842                	lw	a6,48(sp)
2040329a:	58b2                	lw	a7,44(sp)
2040329c:	5e22                	lw	t3,40(sp)
2040329e:	5e92                	lw	t4,36(sp)
204032a0:	5f02                	lw	t5,32(sp)
204032a2:	4ff2                	lw	t6,28(sp)
204032a4:	6125                	addi	sp,sp,96
204032a6:	30200073          	mret

204032aa <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
204032aa:	711d                	addi	sp,sp,-96
204032ac:	ce86                	sw	ra,92(sp)
204032ae:	cc96                	sw	t0,88(sp)
204032b0:	ca9a                	sw	t1,84(sp)
204032b2:	c89e                	sw	t2,80(sp)
204032b4:	c6a2                	sw	s0,76(sp)
204032b6:	c4aa                	sw	a0,72(sp)
204032b8:	c2ae                	sw	a1,68(sp)
204032ba:	c0b2                	sw	a2,64(sp)
204032bc:	de36                	sw	a3,60(sp)
204032be:	dc3a                	sw	a4,56(sp)
204032c0:	da3e                	sw	a5,52(sp)
204032c2:	d842                	sw	a6,48(sp)
204032c4:	d646                	sw	a7,44(sp)
204032c6:	d472                	sw	t3,40(sp)
204032c8:	d276                	sw	t4,36(sp)
204032ca:	d07a                	sw	t5,32(sp)
204032cc:	ce7e                	sw	t6,28(sp)
204032ce:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204032d0:	d0aff0ef          	jal	ra,204027da <__metal_myhart_id>
204032d4:	872a                	mv	a4,a0
204032d6:	070a                	slli	a4,a4,0x2
204032d8:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204032dc:	97ba                	add	a5,a5,a4
204032de:	439c                	lw	a5,0(a5)
204032e0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
204032e4:	fac42783          	lw	a5,-84(s0)
204032e8:	c78d                	beqz	a5,20403312 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204032ea:	fac42503          	lw	a0,-84(s0)
204032ee:	c96ff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
204032f2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
204032f6:	fa842783          	lw	a5,-88(s0)
204032fa:	3087a783          	lw	a5,776(a5)
204032fe:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403302:	fa842783          	lw	a5,-88(s0)
20403306:	3007a783          	lw	a5,768(a5)
2040330a:	fa442583          	lw	a1,-92(s0)
2040330e:	4569                	li	a0,26
20403310:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403312:	0001                	nop
20403314:	40f6                	lw	ra,92(sp)
20403316:	42e6                	lw	t0,88(sp)
20403318:	4356                	lw	t1,84(sp)
2040331a:	43c6                	lw	t2,80(sp)
2040331c:	4436                	lw	s0,76(sp)
2040331e:	4526                	lw	a0,72(sp)
20403320:	4596                	lw	a1,68(sp)
20403322:	4606                	lw	a2,64(sp)
20403324:	56f2                	lw	a3,60(sp)
20403326:	5762                	lw	a4,56(sp)
20403328:	57d2                	lw	a5,52(sp)
2040332a:	5842                	lw	a6,48(sp)
2040332c:	58b2                	lw	a7,44(sp)
2040332e:	5e22                	lw	t3,40(sp)
20403330:	5e92                	lw	t4,36(sp)
20403332:	5f02                	lw	t5,32(sp)
20403334:	4ff2                	lw	t6,28(sp)
20403336:	6125                	addi	sp,sp,96
20403338:	30200073          	mret

2040333c <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
2040333c:	711d                	addi	sp,sp,-96
2040333e:	ce86                	sw	ra,92(sp)
20403340:	cc96                	sw	t0,88(sp)
20403342:	ca9a                	sw	t1,84(sp)
20403344:	c89e                	sw	t2,80(sp)
20403346:	c6a2                	sw	s0,76(sp)
20403348:	c4aa                	sw	a0,72(sp)
2040334a:	c2ae                	sw	a1,68(sp)
2040334c:	c0b2                	sw	a2,64(sp)
2040334e:	de36                	sw	a3,60(sp)
20403350:	dc3a                	sw	a4,56(sp)
20403352:	da3e                	sw	a5,52(sp)
20403354:	d842                	sw	a6,48(sp)
20403356:	d646                	sw	a7,44(sp)
20403358:	d472                	sw	t3,40(sp)
2040335a:	d276                	sw	t4,36(sp)
2040335c:	d07a                	sw	t5,32(sp)
2040335e:	ce7e                	sw	t6,28(sp)
20403360:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403362:	c78ff0ef          	jal	ra,204027da <__metal_myhart_id>
20403366:	872a                	mv	a4,a0
20403368:	070a                	slli	a4,a4,0x2
2040336a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040336e:	97ba                	add	a5,a5,a4
20403370:	439c                	lw	a5,0(a5)
20403372:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20403376:	fac42783          	lw	a5,-84(s0)
2040337a:	c78d                	beqz	a5,204033a4 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040337c:	fac42503          	lw	a0,-84(s0)
20403380:	c04ff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20403384:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403388:	fa842783          	lw	a5,-88(s0)
2040338c:	3207a783          	lw	a5,800(a5)
20403390:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403394:	fa842783          	lw	a5,-88(s0)
20403398:	3187a783          	lw	a5,792(a5)
2040339c:	fa442583          	lw	a1,-92(s0)
204033a0:	456d                	li	a0,27
204033a2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
204033a4:	0001                	nop
204033a6:	40f6                	lw	ra,92(sp)
204033a8:	42e6                	lw	t0,88(sp)
204033aa:	4356                	lw	t1,84(sp)
204033ac:	43c6                	lw	t2,80(sp)
204033ae:	4436                	lw	s0,76(sp)
204033b0:	4526                	lw	a0,72(sp)
204033b2:	4596                	lw	a1,68(sp)
204033b4:	4606                	lw	a2,64(sp)
204033b6:	56f2                	lw	a3,60(sp)
204033b8:	5762                	lw	a4,56(sp)
204033ba:	57d2                	lw	a5,52(sp)
204033bc:	5842                	lw	a6,48(sp)
204033be:	58b2                	lw	a7,44(sp)
204033c0:	5e22                	lw	t3,40(sp)
204033c2:	5e92                	lw	t4,36(sp)
204033c4:	5f02                	lw	t5,32(sp)
204033c6:	4ff2                	lw	t6,28(sp)
204033c8:	6125                	addi	sp,sp,96
204033ca:	30200073          	mret

204033ce <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
204033ce:	711d                	addi	sp,sp,-96
204033d0:	ce86                	sw	ra,92(sp)
204033d2:	cc96                	sw	t0,88(sp)
204033d4:	ca9a                	sw	t1,84(sp)
204033d6:	c89e                	sw	t2,80(sp)
204033d8:	c6a2                	sw	s0,76(sp)
204033da:	c4aa                	sw	a0,72(sp)
204033dc:	c2ae                	sw	a1,68(sp)
204033de:	c0b2                	sw	a2,64(sp)
204033e0:	de36                	sw	a3,60(sp)
204033e2:	dc3a                	sw	a4,56(sp)
204033e4:	da3e                	sw	a5,52(sp)
204033e6:	d842                	sw	a6,48(sp)
204033e8:	d646                	sw	a7,44(sp)
204033ea:	d472                	sw	t3,40(sp)
204033ec:	d276                	sw	t4,36(sp)
204033ee:	d07a                	sw	t5,32(sp)
204033f0:	ce7e                	sw	t6,28(sp)
204033f2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204033f4:	be6ff0ef          	jal	ra,204027da <__metal_myhart_id>
204033f8:	872a                	mv	a4,a0
204033fa:	070a                	slli	a4,a4,0x2
204033fc:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403400:	97ba                	add	a5,a5,a4
20403402:	439c                	lw	a5,0(a5)
20403404:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403408:	fac42783          	lw	a5,-84(s0)
2040340c:	c78d                	beqz	a5,20403436 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040340e:	fac42503          	lw	a0,-84(s0)
20403412:	b72ff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20403416:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
2040341a:	fa842783          	lw	a5,-88(s0)
2040341e:	3387a783          	lw	a5,824(a5)
20403422:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20403426:	fa842783          	lw	a5,-88(s0)
2040342a:	3307a783          	lw	a5,816(a5)
2040342e:	fa442583          	lw	a1,-92(s0)
20403432:	4571                	li	a0,28
20403434:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20403436:	0001                	nop
20403438:	40f6                	lw	ra,92(sp)
2040343a:	42e6                	lw	t0,88(sp)
2040343c:	4356                	lw	t1,84(sp)
2040343e:	43c6                	lw	t2,80(sp)
20403440:	4436                	lw	s0,76(sp)
20403442:	4526                	lw	a0,72(sp)
20403444:	4596                	lw	a1,68(sp)
20403446:	4606                	lw	a2,64(sp)
20403448:	56f2                	lw	a3,60(sp)
2040344a:	5762                	lw	a4,56(sp)
2040344c:	57d2                	lw	a5,52(sp)
2040344e:	5842                	lw	a6,48(sp)
20403450:	58b2                	lw	a7,44(sp)
20403452:	5e22                	lw	t3,40(sp)
20403454:	5e92                	lw	t4,36(sp)
20403456:	5f02                	lw	t5,32(sp)
20403458:	4ff2                	lw	t6,28(sp)
2040345a:	6125                	addi	sp,sp,96
2040345c:	30200073          	mret

20403460 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20403460:	711d                	addi	sp,sp,-96
20403462:	ce86                	sw	ra,92(sp)
20403464:	cc96                	sw	t0,88(sp)
20403466:	ca9a                	sw	t1,84(sp)
20403468:	c89e                	sw	t2,80(sp)
2040346a:	c6a2                	sw	s0,76(sp)
2040346c:	c4aa                	sw	a0,72(sp)
2040346e:	c2ae                	sw	a1,68(sp)
20403470:	c0b2                	sw	a2,64(sp)
20403472:	de36                	sw	a3,60(sp)
20403474:	dc3a                	sw	a4,56(sp)
20403476:	da3e                	sw	a5,52(sp)
20403478:	d842                	sw	a6,48(sp)
2040347a:	d646                	sw	a7,44(sp)
2040347c:	d472                	sw	t3,40(sp)
2040347e:	d276                	sw	t4,36(sp)
20403480:	d07a                	sw	t5,32(sp)
20403482:	ce7e                	sw	t6,28(sp)
20403484:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403486:	b54ff0ef          	jal	ra,204027da <__metal_myhart_id>
2040348a:	872a                	mv	a4,a0
2040348c:	070a                	slli	a4,a4,0x2
2040348e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403492:	97ba                	add	a5,a5,a4
20403494:	439c                	lw	a5,0(a5)
20403496:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
2040349a:	fac42783          	lw	a5,-84(s0)
2040349e:	c78d                	beqz	a5,204034c8 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204034a0:	fac42503          	lw	a0,-84(s0)
204034a4:	ae0ff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
204034a8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
204034ac:	fa842783          	lw	a5,-88(s0)
204034b0:	3507a783          	lw	a5,848(a5)
204034b4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
204034b8:	fa842783          	lw	a5,-88(s0)
204034bc:	3487a783          	lw	a5,840(a5)
204034c0:	fa442583          	lw	a1,-92(s0)
204034c4:	4575                	li	a0,29
204034c6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
204034c8:	0001                	nop
204034ca:	40f6                	lw	ra,92(sp)
204034cc:	42e6                	lw	t0,88(sp)
204034ce:	4356                	lw	t1,84(sp)
204034d0:	43c6                	lw	t2,80(sp)
204034d2:	4436                	lw	s0,76(sp)
204034d4:	4526                	lw	a0,72(sp)
204034d6:	4596                	lw	a1,68(sp)
204034d8:	4606                	lw	a2,64(sp)
204034da:	56f2                	lw	a3,60(sp)
204034dc:	5762                	lw	a4,56(sp)
204034de:	57d2                	lw	a5,52(sp)
204034e0:	5842                	lw	a6,48(sp)
204034e2:	58b2                	lw	a7,44(sp)
204034e4:	5e22                	lw	t3,40(sp)
204034e6:	5e92                	lw	t4,36(sp)
204034e8:	5f02                	lw	t5,32(sp)
204034ea:	4ff2                	lw	t6,28(sp)
204034ec:	6125                	addi	sp,sp,96
204034ee:	30200073          	mret

204034f2 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
204034f2:	711d                	addi	sp,sp,-96
204034f4:	ce86                	sw	ra,92(sp)
204034f6:	cc96                	sw	t0,88(sp)
204034f8:	ca9a                	sw	t1,84(sp)
204034fa:	c89e                	sw	t2,80(sp)
204034fc:	c6a2                	sw	s0,76(sp)
204034fe:	c4aa                	sw	a0,72(sp)
20403500:	c2ae                	sw	a1,68(sp)
20403502:	c0b2                	sw	a2,64(sp)
20403504:	de36                	sw	a3,60(sp)
20403506:	dc3a                	sw	a4,56(sp)
20403508:	da3e                	sw	a5,52(sp)
2040350a:	d842                	sw	a6,48(sp)
2040350c:	d646                	sw	a7,44(sp)
2040350e:	d472                	sw	t3,40(sp)
20403510:	d276                	sw	t4,36(sp)
20403512:	d07a                	sw	t5,32(sp)
20403514:	ce7e                	sw	t6,28(sp)
20403516:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403518:	ac2ff0ef          	jal	ra,204027da <__metal_myhart_id>
2040351c:	872a                	mv	a4,a0
2040351e:	070a                	slli	a4,a4,0x2
20403520:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403524:	97ba                	add	a5,a5,a4
20403526:	439c                	lw	a5,0(a5)
20403528:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
2040352c:	fac42783          	lw	a5,-84(s0)
20403530:	c78d                	beqz	a5,2040355a <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403532:	fac42503          	lw	a0,-84(s0)
20403536:	a4eff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
2040353a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
2040353e:	fa842783          	lw	a5,-88(s0)
20403542:	3687a783          	lw	a5,872(a5)
20403546:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
2040354a:	fa842783          	lw	a5,-88(s0)
2040354e:	3607a783          	lw	a5,864(a5)
20403552:	fa442583          	lw	a1,-92(s0)
20403556:	4579                	li	a0,30
20403558:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
2040355a:	0001                	nop
2040355c:	40f6                	lw	ra,92(sp)
2040355e:	42e6                	lw	t0,88(sp)
20403560:	4356                	lw	t1,84(sp)
20403562:	43c6                	lw	t2,80(sp)
20403564:	4436                	lw	s0,76(sp)
20403566:	4526                	lw	a0,72(sp)
20403568:	4596                	lw	a1,68(sp)
2040356a:	4606                	lw	a2,64(sp)
2040356c:	56f2                	lw	a3,60(sp)
2040356e:	5762                	lw	a4,56(sp)
20403570:	57d2                	lw	a5,52(sp)
20403572:	5842                	lw	a6,48(sp)
20403574:	58b2                	lw	a7,44(sp)
20403576:	5e22                	lw	t3,40(sp)
20403578:	5e92                	lw	t4,36(sp)
2040357a:	5f02                	lw	t5,32(sp)
2040357c:	4ff2                	lw	t6,28(sp)
2040357e:	6125                	addi	sp,sp,96
20403580:	30200073          	mret

20403584 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403584:	711d                	addi	sp,sp,-96
20403586:	ce86                	sw	ra,92(sp)
20403588:	cc96                	sw	t0,88(sp)
2040358a:	ca9a                	sw	t1,84(sp)
2040358c:	c89e                	sw	t2,80(sp)
2040358e:	c6a2                	sw	s0,76(sp)
20403590:	c4aa                	sw	a0,72(sp)
20403592:	c2ae                	sw	a1,68(sp)
20403594:	c0b2                	sw	a2,64(sp)
20403596:	de36                	sw	a3,60(sp)
20403598:	dc3a                	sw	a4,56(sp)
2040359a:	da3e                	sw	a5,52(sp)
2040359c:	d842                	sw	a6,48(sp)
2040359e:	d646                	sw	a7,44(sp)
204035a0:	d472                	sw	t3,40(sp)
204035a2:	d276                	sw	t4,36(sp)
204035a4:	d07a                	sw	t5,32(sp)
204035a6:	ce7e                	sw	t6,28(sp)
204035a8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204035aa:	a30ff0ef          	jal	ra,204027da <__metal_myhart_id>
204035ae:	872a                	mv	a4,a0
204035b0:	070a                	slli	a4,a4,0x2
204035b2:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204035b6:	97ba                	add	a5,a5,a4
204035b8:	439c                	lw	a5,0(a5)
204035ba:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
204035be:	fac42783          	lw	a5,-84(s0)
204035c2:	c78d                	beqz	a5,204035ec <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204035c4:	fac42503          	lw	a0,-84(s0)
204035c8:	9bcff0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
204035cc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
204035d0:	fa842783          	lw	a5,-88(s0)
204035d4:	3807a783          	lw	a5,896(a5)
204035d8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
204035dc:	fa842783          	lw	a5,-88(s0)
204035e0:	3787a783          	lw	a5,888(a5)
204035e4:	fa442583          	lw	a1,-92(s0)
204035e8:	457d                	li	a0,31
204035ea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
204035ec:	0001                	nop
204035ee:	40f6                	lw	ra,92(sp)
204035f0:	42e6                	lw	t0,88(sp)
204035f2:	4356                	lw	t1,84(sp)
204035f4:	43c6                	lw	t2,80(sp)
204035f6:	4436                	lw	s0,76(sp)
204035f8:	4526                	lw	a0,72(sp)
204035fa:	4596                	lw	a1,68(sp)
204035fc:	4606                	lw	a2,64(sp)
204035fe:	56f2                	lw	a3,60(sp)
20403600:	5762                	lw	a4,56(sp)
20403602:	57d2                	lw	a5,52(sp)
20403604:	5842                	lw	a6,48(sp)
20403606:	58b2                	lw	a7,44(sp)
20403608:	5e22                	lw	t3,40(sp)
2040360a:	5e92                	lw	t4,36(sp)
2040360c:	5f02                	lw	t5,32(sp)
2040360e:	4ff2                	lw	t6,28(sp)
20403610:	6125                	addi	sp,sp,96
20403612:	30200073          	mret

20403616 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403616:	1101                	addi	sp,sp,-32
20403618:	ce22                	sw	s0,28(sp)
2040361a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2040361c:	305027f3          	csrr	a5,mtvec
20403620:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403624:	fec42783          	lw	a5,-20(s0)
20403628:	03f7f793          	andi	a5,a5,63
2040362c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
20403630:	fec42703          	lw	a4,-20(s0)
20403634:	4789                	li	a5,2
20403636:	00f70d63          	beq	a4,a5,20403650 <__metal_controller_interrupt_vector_mode+0x3a>
2040363a:	fec42703          	lw	a4,-20(s0)
2040363e:	478d                	li	a5,3
20403640:	00f70a63          	beq	a4,a5,20403654 <__metal_controller_interrupt_vector_mode+0x3e>
20403644:	fec42703          	lw	a4,-20(s0)
20403648:	4785                	li	a5,1
2040364a:	00f70763          	beq	a4,a5,20403658 <__metal_controller_interrupt_vector_mode+0x42>
2040364e:	a039                	j	2040365c <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
20403650:	478d                	li	a5,3
20403652:	a031                	j	2040365e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403654:	4791                	li	a5,4
20403656:	a021                	j	2040365e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403658:	4785                	li	a5,1
2040365a:	a011                	j	2040365e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
2040365c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
2040365e:	853e                	mv	a0,a5
20403660:	4472                	lw	s0,28(sp)
20403662:	6105                	addi	sp,sp,32
20403664:	8082                	ret

20403666 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403666:	7179                	addi	sp,sp,-48
20403668:	d622                	sw	s0,44(sp)
2040366a:	1800                	addi	s0,sp,48
2040366c:	fca42e23          	sw	a0,-36(s0)
20403670:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403674:	305027f3          	csrr	a5,mtvec
20403678:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
2040367c:	fec42783          	lw	a5,-20(s0)
20403680:	fc07f793          	andi	a5,a5,-64
20403684:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403688:	fd842783          	lw	a5,-40(s0)
2040368c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20403690:	fdc42703          	lw	a4,-36(s0)
20403694:	4791                	li	a5,4
20403696:	06e7e063          	bltu	a5,a4,204036f6 <__metal_controller_interrupt_vector+0x90>
2040369a:	fdc42783          	lw	a5,-36(s0)
2040369e:	00279713          	slli	a4,a5,0x2
204036a2:	204057b7          	lui	a5,0x20405
204036a6:	7d878793          	addi	a5,a5,2008 # 204057d8 <__metal_driver_vtable_riscv_clint0+0x4c>
204036aa:	97ba                	add	a5,a5,a4
204036ac:	439c                	lw	a5,0(a5)
204036ae:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204036b0:	fe842783          	lw	a5,-24(s0)
204036b4:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
204036b8:	fec42783          	lw	a5,-20(s0)
204036bc:	0027e793          	ori	a5,a5,2
204036c0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
204036c4:	a80d                	j	204036f6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204036c6:	fe842783          	lw	a5,-24(s0)
204036ca:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
204036ce:	fec42783          	lw	a5,-20(s0)
204036d2:	0037e793          	ori	a5,a5,3
204036d6:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
204036da:	a831                	j	204036f6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
204036dc:	fe842783          	lw	a5,-24(s0)
204036e0:	0017e793          	ori	a5,a5,1
204036e4:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
204036e8:	a039                	j	204036f6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
204036ea:	fe842783          	lw	a5,-24(s0)
204036ee:	9bf1                	andi	a5,a5,-4
204036f0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
204036f4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
204036f6:	0001                	nop
204036f8:	5432                	lw	s0,44(sp)
204036fa:	6145                	addi	sp,sp,48
204036fc:	8082                	ret

204036fe <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
204036fe:	1101                	addi	sp,sp,-32
20403700:	ce22                	sw	s0,28(sp)
20403702:	1000                	addi	s0,sp,32
20403704:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403708:	fec42783          	lw	a5,-20(s0)
2040370c:	17f5                	addi	a5,a5,-3
2040370e:	4771                	li	a4,28
20403710:	00f76d63          	bltu	a4,a5,2040372a <__metal_valid_interrupt_id+0x2c>
20403714:	00279713          	slli	a4,a5,0x2
20403718:	204057b7          	lui	a5,0x20405
2040371c:	7ec78793          	addi	a5,a5,2028 # 204057ec <__metal_driver_vtable_riscv_clint0+0x60>
20403720:	97ba                	add	a5,a5,a4
20403722:	439c                	lw	a5,0(a5)
20403724:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20403726:	4785                	li	a5,1
20403728:	a019                	j	2040372e <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
2040372a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
2040372c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
2040372e:	853e                	mv	a0,a5
20403730:	4472                	lw	s0,28(sp)
20403732:	6105                	addi	sp,sp,32
20403734:	8082                	ret

20403736 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20403736:	7179                	addi	sp,sp,-48
20403738:	d606                	sw	ra,44(sp)
2040373a:	d422                	sw	s0,40(sp)
2040373c:	1800                	addi	s0,sp,48
2040373e:	fca42e23          	sw	a0,-36(s0)
20403742:	fcb42c23          	sw	a1,-40(s0)
20403746:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
2040374a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
2040374e:	fdc42783          	lw	a5,-36(s0)
20403752:	e399                	bnez	a5,20403758 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20403754:	57fd                	li	a5,-1
20403756:	a849                	j	204037e8 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20403758:	fd842703          	lw	a4,-40(s0)
2040375c:	47fd                	li	a5,31
2040375e:	08e7e063          	bltu	a5,a4,204037de <__metal_local_interrupt_enable+0xa8>
20403762:	fd842783          	lw	a5,-40(s0)
20403766:	00279713          	slli	a4,a5,0x2
2040376a:	204067b7          	lui	a5,0x20406
2040376e:	86078793          	addi	a5,a5,-1952 # 20405860 <__metal_driver_vtable_riscv_clint0+0xd4>
20403772:	97ba                	add	a5,a5,a4
20403774:	439c                	lw	a5,0(a5)
20403776:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403778:	fd442783          	lw	a5,-44(s0)
2040377c:	c781                	beqz	a5,20403784 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
2040377e:	876ff0ef          	jal	ra,204027f4 <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403782:	a08d                	j	204037e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403784:	888ff0ef          	jal	ra,2040280c <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403788:	a8b1                	j	204037e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
2040378a:	fd442783          	lw	a5,-44(s0)
2040378e:	c781                	beqz	a5,20403796 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20403790:	894ff0ef          	jal	ra,20402824 <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403794:	a881                	j	204037e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403796:	8a6ff0ef          	jal	ra,2040283c <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
2040379a:	a0a9                	j	204037e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040379c:	fd442783          	lw	a5,-44(s0)
204037a0:	c781                	beqz	a5,204037a8 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
204037a2:	8b2ff0ef          	jal	ra,20402854 <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
204037a6:	a83d                	j	204037e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
204037a8:	8c6ff0ef          	jal	ra,2040286e <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
204037ac:	a825                	j	204037e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
204037ae:	fd442783          	lw	a5,-44(s0)
204037b2:	c781                	beqz	a5,204037ba <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
204037b4:	8d4ff0ef          	jal	ra,20402888 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
204037b8:	a035                	j	204037e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
204037ba:	8eaff0ef          	jal	ra,204028a4 <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
204037be:	a01d                	j	204037e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
204037c0:	fd442783          	lw	a5,-44(s0)
204037c4:	c799                	beqz	a5,204037d2 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
204037c6:	fd842783          	lw	a5,-40(s0)
204037ca:	853e                	mv	a0,a5
204037cc:	8f4ff0ef          	jal	ra,204028c0 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
204037d0:	a811                	j	204037e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
204037d2:	fd842783          	lw	a5,-40(s0)
204037d6:	853e                	mv	a0,a5
204037d8:	914ff0ef          	jal	ra,204028ec <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
204037dc:	a021                	j	204037e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
204037de:	57fd                	li	a5,-1
204037e0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
204037e4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
204037e8:	853e                	mv	a0,a5
204037ea:	50b2                	lw	ra,44(sp)
204037ec:	5422                	lw	s0,40(sp)
204037ee:	6145                	addi	sp,sp,48
204037f0:	8082                	ret

204037f2 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
204037f2:	7179                	addi	sp,sp,-48
204037f4:	d622                	sw	s0,44(sp)
204037f6:	1800                	addi	s0,sp,48
204037f8:	fca42e23          	sw	a0,-36(s0)
204037fc:	fcb42c23          	sw	a1,-40(s0)
20403800:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403804:	fdc42783          	lw	a5,-36(s0)
20403808:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040380c:	fd842703          	lw	a4,-40(s0)
20403810:	47ad                	li	a5,11
20403812:	02e7c263          	blt	a5,a4,20403836 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403816:	fd442783          	lw	a5,-44(s0)
2040381a:	cf91                	beqz	a5,20403836 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040381c:	fec42703          	lw	a4,-20(s0)
20403820:	fd842783          	lw	a5,-40(s0)
20403824:	0e078793          	addi	a5,a5,224
20403828:	078a                	slli	a5,a5,0x2
2040382a:	97ba                	add	a5,a5,a4
2040382c:	fd442703          	lw	a4,-44(s0)
20403830:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20403832:	4781                	li	a5,0
20403834:	a011                	j	20403838 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20403836:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20403838:	853e                	mv	a0,a5
2040383a:	5432                	lw	s0,44(sp)
2040383c:	6145                	addi	sp,sp,48
2040383e:	8082                	ret

20403840 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
20403840:	7139                	addi	sp,sp,-64
20403842:	de06                	sw	ra,60(sp)
20403844:	dc22                	sw	s0,56(sp)
20403846:	0080                	addi	s0,sp,64
20403848:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040384c:	fcc42783          	lw	a5,-52(s0)
20403850:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20403854:	fe442783          	lw	a5,-28(s0)
20403858:	43dc                	lw	a5,4(a5)
2040385a:	10079d63          	bnez	a5,20403974 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
2040385e:	57fd                	li	a5,-1
20403860:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20403864:	57fd                	li	a5,-1
20403866:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
2040386a:	301027f3          	csrr	a5,misa
2040386e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20403872:	fe042703          	lw	a4,-32(s0)
20403876:	6789                	lui	a5,0x2
20403878:	8ff9                	and	a5,a5,a4
2040387a:	e799                	bnez	a5,20403888 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
2040387c:	fe042703          	lw	a4,-32(s0)
20403880:	000407b7          	lui	a5,0x40
20403884:	8ff9                	and	a5,a5,a4
20403886:	c799                	beqz	a5,20403894 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403888:	57fd                	li	a5,-1
2040388a:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040388e:	57fd                	li	a5,-1
20403890:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403894:	fe042703          	lw	a4,-32(s0)
20403898:	000407b7          	lui	a5,0x40
2040389c:	8ff9                	and	a5,a5,a4
2040389e:	c781                	beqz	a5,204038a6 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
204038a0:	57fd                	li	a5,-1
204038a2:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
204038a6:	fe042623          	sw	zero,-20(s0)
204038aa:	a0b9                	j	204038f8 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
204038ac:	fe442683          	lw	a3,-28(s0)
204038b0:	fec42703          	lw	a4,-20(s0)
204038b4:	87ba                	mv	a5,a4
204038b6:	0786                	slli	a5,a5,0x1
204038b8:	97ba                	add	a5,a5,a4
204038ba:	078e                	slli	a5,a5,0x3
204038bc:	97b6                	add	a5,a5,a3
204038be:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
204038c2:	fe442683          	lw	a3,-28(s0)
204038c6:	fec42703          	lw	a4,-20(s0)
204038ca:	87ba                	mv	a5,a4
204038cc:	0786                	slli	a5,a5,0x1
204038ce:	97ba                	add	a5,a5,a4
204038d0:	078e                	slli	a5,a5,0x3
204038d2:	97b6                	add	a5,a5,a3
204038d4:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
204038d8:	fe442683          	lw	a3,-28(s0)
204038dc:	fec42703          	lw	a4,-20(s0)
204038e0:	87ba                	mv	a5,a4
204038e2:	0786                	slli	a5,a5,0x1
204038e4:	97ba                	add	a5,a5,a4
204038e6:	078e                	slli	a5,a5,0x3
204038e8:	97b6                	add	a5,a5,a3
204038ea:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
204038ee:	fec42783          	lw	a5,-20(s0)
204038f2:	0785                	addi	a5,a5,1
204038f4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
204038f8:	fec42703          	lw	a4,-20(s0)
204038fc:	47fd                	li	a5,31
204038fe:	fae7d7e3          	bge	a5,a4,204038ac <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403902:	fe042423          	sw	zero,-24(s0)
20403906:	a01d                	j	2040392c <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403908:	fe442703          	lw	a4,-28(s0)
2040390c:	fe842783          	lw	a5,-24(s0)
20403910:	0e078793          	addi	a5,a5,224
20403914:	078a                	slli	a5,a5,0x2
20403916:	97ba                	add	a5,a5,a4
20403918:	20403737          	lui	a4,0x20403
2040391c:	91870713          	addi	a4,a4,-1768 # 20402918 <__metal_default_exception_handler>
20403920:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403922:	fe842783          	lw	a5,-24(s0)
20403926:	0785                	addi	a5,a5,1
20403928:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
2040392c:	fe842703          	lw	a4,-24(s0)
20403930:	47ad                	li	a5,11
20403932:	fce7dbe3          	bge	a5,a4,20403908 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20403936:	204037b7          	lui	a5,0x20403
2040393a:	b8078593          	addi	a1,a5,-1152 # 20402b80 <__metal_exception_handler>
2040393e:	4501                	li	a0,0
20403940:	331d                	jal	20403666 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20403942:	301027f3          	csrr	a5,misa
20403946:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
2040394a:	fdc42703          	lw	a4,-36(s0)
2040394e:	67c1                	lui	a5,0x10
20403950:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20403954:	8ff9                	and	a5,a5,a4
20403956:	cb99                	beqz	a5,2040396c <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20403958:	300027f3          	csrr	a5,mstatus
2040395c:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20403960:	fdc42703          	lw	a4,-36(s0)
20403964:	6789                	lui	a5,0x2
20403966:	8fd9                	or	a5,a5,a4
20403968:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
2040396c:	fe442783          	lw	a5,-28(s0)
20403970:	4705                	li	a4,1
20403972:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20403974:	0001                	nop
20403976:	50f2                	lw	ra,60(sp)
20403978:	5462                	lw	s0,56(sp)
2040397a:	6121                	addi	sp,sp,64
2040397c:	8082                	ret

2040397e <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
2040397e:	7179                	addi	sp,sp,-48
20403980:	d606                	sw	ra,44(sp)
20403982:	d422                	sw	s0,40(sp)
20403984:	1800                	addi	s0,sp,48
20403986:	fca42e23          	sw	a0,-36(s0)
2040398a:	fcb42c23          	sw	a1,-40(s0)
2040398e:	fcc42a23          	sw	a2,-44(s0)
20403992:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403996:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040399a:	fdc42783          	lw	a5,-36(s0)
2040399e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
204039a2:	fd842503          	lw	a0,-40(s0)
204039a6:	3ba1                	jal	204036fe <__metal_valid_interrupt_id>
204039a8:	87aa                	mv	a5,a0
204039aa:	e399                	bnez	a5,204039b0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
204039ac:	57d5                	li	a5,-11
204039ae:	aa11                	j	20403ac2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
204039b0:	fd442783          	lw	a5,-44(s0)
204039b4:	cf85                	beqz	a5,204039ec <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
204039b6:	fe842683          	lw	a3,-24(s0)
204039ba:	fd842703          	lw	a4,-40(s0)
204039be:	87ba                	mv	a5,a4
204039c0:	0786                	slli	a5,a5,0x1
204039c2:	97ba                	add	a5,a5,a4
204039c4:	078e                	slli	a5,a5,0x3
204039c6:	97b6                	add	a5,a5,a3
204039c8:	fd442703          	lw	a4,-44(s0)
204039cc:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
204039d0:	fe842683          	lw	a3,-24(s0)
204039d4:	fd842703          	lw	a4,-40(s0)
204039d8:	87ba                	mv	a5,a4
204039da:	0786                	slli	a5,a5,0x1
204039dc:	97ba                	add	a5,a5,a4
204039de:	078e                	slli	a5,a5,0x3
204039e0:	97b6                	add	a5,a5,a3
204039e2:	fd042703          	lw	a4,-48(s0)
204039e6:	08e7ac23          	sw	a4,152(a5)
204039ea:	a8d1                	j	20403abe <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
204039ec:	fd842783          	lw	a5,-40(s0)
204039f0:	17f5                	addi	a5,a5,-3
204039f2:	4771                	li	a4,28
204039f4:	0cf76263          	bltu	a4,a5,20403ab8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
204039f8:	00279713          	slli	a4,a5,0x2
204039fc:	204067b7          	lui	a5,0x20406
20403a00:	8e078793          	addi	a5,a5,-1824 # 204058e0 <__metal_driver_vtable_riscv_clint0+0x154>
20403a04:	97ba                	add	a5,a5,a4
20403a06:	439c                	lw	a5,0(a5)
20403a08:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403a0a:	fe842683          	lw	a3,-24(s0)
20403a0e:	fd842703          	lw	a4,-40(s0)
20403a12:	87ba                	mv	a5,a4
20403a14:	0786                	slli	a5,a5,0x1
20403a16:	97ba                	add	a5,a5,a4
20403a18:	078e                	slli	a5,a5,0x3
20403a1a:	97b6                	add	a5,a5,a3
20403a1c:	20403737          	lui	a4,0x20403
20403a20:	a0470713          	addi	a4,a4,-1532 # 20402a04 <__metal_default_sw_handler>
20403a24:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20403a28:	fe842683          	lw	a3,-24(s0)
20403a2c:	fd842703          	lw	a4,-40(s0)
20403a30:	87ba                	mv	a5,a4
20403a32:	0786                	slli	a5,a5,0x1
20403a34:	97ba                	add	a5,a5,a4
20403a36:	078e                	slli	a5,a5,0x3
20403a38:	97b6                	add	a5,a5,a3
20403a3a:	fd042703          	lw	a4,-48(s0)
20403a3e:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20403a42:	a8b5                	j	20403abe <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20403a44:	fe842683          	lw	a3,-24(s0)
20403a48:	fd842703          	lw	a4,-40(s0)
20403a4c:	87ba                	mv	a5,a4
20403a4e:	0786                	slli	a5,a5,0x1
20403a50:	97ba                	add	a5,a5,a4
20403a52:	078e                	slli	a5,a5,0x3
20403a54:	97b6                	add	a5,a5,a3
20403a56:	20403737          	lui	a4,0x20403
20403a5a:	af670713          	addi	a4,a4,-1290 # 20402af6 <__metal_default_timer_handler>
20403a5e:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20403a62:	fe842683          	lw	a3,-24(s0)
20403a66:	fd842703          	lw	a4,-40(s0)
20403a6a:	87ba                	mv	a5,a4
20403a6c:	0786                	slli	a5,a5,0x1
20403a6e:	97ba                	add	a5,a5,a4
20403a70:	078e                	slli	a5,a5,0x3
20403a72:	97b6                	add	a5,a5,a3
20403a74:	fd042703          	lw	a4,-48(s0)
20403a78:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20403a7c:	a089                	j	20403abe <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20403a7e:	fe842683          	lw	a3,-24(s0)
20403a82:	fd842703          	lw	a4,-40(s0)
20403a86:	87ba                	mv	a5,a4
20403a88:	0786                	slli	a5,a5,0x1
20403a8a:	97ba                	add	a5,a5,a4
20403a8c:	078e                	slli	a5,a5,0x3
20403a8e:	97b6                	add	a5,a5,a3
20403a90:	20403737          	lui	a4,0x20403
20403a94:	93070713          	addi	a4,a4,-1744 # 20402930 <__metal_default_interrupt_handler>
20403a98:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20403a9c:	fe842683          	lw	a3,-24(s0)
20403aa0:	fd842703          	lw	a4,-40(s0)
20403aa4:	87ba                	mv	a5,a4
20403aa6:	0786                	slli	a5,a5,0x1
20403aa8:	97ba                	add	a5,a5,a4
20403aaa:	078e                	slli	a5,a5,0x3
20403aac:	97b6                	add	a5,a5,a3
20403aae:	fd042703          	lw	a4,-48(s0)
20403ab2:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20403ab6:	a021                	j	20403abe <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20403ab8:	57d1                	li	a5,-12
20403aba:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
20403abe:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20403ac2:	853e                	mv	a0,a5
20403ac4:	50b2                	lw	ra,44(sp)
20403ac6:	5422                	lw	s0,40(sp)
20403ac8:	6145                	addi	sp,sp,48
20403aca:	8082                	ret

20403acc <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20403acc:	1101                	addi	sp,sp,-32
20403ace:	ce06                	sw	ra,28(sp)
20403ad0:	cc22                	sw	s0,24(sp)
20403ad2:	1000                	addi	s0,sp,32
20403ad4:	fea42623          	sw	a0,-20(s0)
20403ad8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20403adc:	fe842783          	lw	a5,-24(s0)
20403ae0:	4605                	li	a2,1
20403ae2:	85be                	mv	a1,a5
20403ae4:	fec42503          	lw	a0,-20(s0)
20403ae8:	c4fff0ef          	jal	ra,20403736 <__metal_local_interrupt_enable>
20403aec:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
20403aee:	853e                	mv	a0,a5
20403af0:	40f2                	lw	ra,28(sp)
20403af2:	4462                	lw	s0,24(sp)
20403af4:	6105                	addi	sp,sp,32
20403af6:	8082                	ret

20403af8 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20403af8:	1101                	addi	sp,sp,-32
20403afa:	ce06                	sw	ra,28(sp)
20403afc:	cc22                	sw	s0,24(sp)
20403afe:	1000                	addi	s0,sp,32
20403b00:	fea42623          	sw	a0,-20(s0)
20403b04:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403b08:	fe842783          	lw	a5,-24(s0)
20403b0c:	4601                	li	a2,0
20403b0e:	85be                	mv	a1,a5
20403b10:	fec42503          	lw	a0,-20(s0)
20403b14:	c23ff0ef          	jal	ra,20403736 <__metal_local_interrupt_enable>
20403b18:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403b1a:	853e                	mv	a0,a5
20403b1c:	40f2                	lw	ra,28(sp)
20403b1e:	4462                	lw	s0,24(sp)
20403b20:	6105                	addi	sp,sp,32
20403b22:	8082                	ret

20403b24 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20403b24:	1101                	addi	sp,sp,-32
20403b26:	ce06                	sw	ra,28(sp)
20403b28:	cc22                	sw	s0,24(sp)
20403b2a:	1000                	addi	s0,sp,32
20403b2c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20403b30:	ae7ff0ef          	jal	ra,20403616 <__metal_controller_interrupt_vector_mode>
20403b34:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20403b36:	853e                	mv	a0,a5
20403b38:	40f2                	lw	ra,28(sp)
20403b3a:	4462                	lw	s0,24(sp)
20403b3c:	6105                	addi	sp,sp,32
20403b3e:	8082                	ret

20403b40 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20403b40:	7179                	addi	sp,sp,-48
20403b42:	d606                	sw	ra,44(sp)
20403b44:	d422                	sw	s0,40(sp)
20403b46:	1800                	addi	s0,sp,48
20403b48:	fca42e23          	sw	a0,-36(s0)
20403b4c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403b50:	fdc42783          	lw	a5,-36(s0)
20403b54:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20403b58:	fd842783          	lw	a5,-40(s0)
20403b5c:	eb99                	bnez	a5,20403b72 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20403b5e:	204037b7          	lui	a5,0x20403
20403b62:	b8078593          	addi	a1,a5,-1152 # 20402b80 <__metal_exception_handler>
20403b66:	fd842503          	lw	a0,-40(s0)
20403b6a:	afdff0ef          	jal	ra,20403666 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20403b6e:	4781                	li	a5,0
20403b70:	a00d                	j	20403b92 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20403b72:	fd842703          	lw	a4,-40(s0)
20403b76:	4785                	li	a5,1
20403b78:	00f71c63          	bne	a4,a5,20403b90 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20403b7c:	204057b7          	lui	a5,0x20405
20403b80:	48078593          	addi	a1,a5,1152 # 20405480 <__metal_vector_table>
20403b84:	fd842503          	lw	a0,-40(s0)
20403b88:	adfff0ef          	jal	ra,20403666 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20403b8c:	4781                	li	a5,0
20403b8e:	a011                	j	20403b92 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20403b90:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20403b92:	853e                	mv	a0,a5
20403b94:	50b2                	lw	ra,44(sp)
20403b96:	5422                	lw	s0,40(sp)
20403b98:	6145                	addi	sp,sp,48
20403b9a:	8082                	ret

20403b9c <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20403b9c:	1101                	addi	sp,sp,-32
20403b9e:	ce22                	sw	s0,28(sp)
20403ba0:	1000                	addi	s0,sp,32
20403ba2:	fea42623          	sw	a0,-20(s0)
20403ba6:	feb42423          	sw	a1,-24(s0)
20403baa:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20403bae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
20403bb0:	853e                	mv	a0,a5
20403bb2:	4472                	lw	s0,28(sp)
20403bb4:	6105                	addi	sp,sp,32
20403bb6:	8082                	ret

20403bb8 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20403bb8:	7139                	addi	sp,sp,-64
20403bba:	de22                	sw	s0,60(sp)
20403bbc:	0080                	addi	s0,sp,64
20403bbe:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20403bc2:	4301                	li	t1,0
20403bc4:	4381                	li	t2,0
20403bc6:	fe642423          	sw	t1,-24(s0)
20403bca:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20403bce:	b8002573          	csrr	a0,mcycleh
20403bd2:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20403bd6:	b0002573          	csrr	a0,mcycle
20403bda:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20403bde:	b8002573          	csrr	a0,mcycleh
20403be2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20403be6:	fe442883          	lw	a7,-28(s0)
20403bea:	fdc42503          	lw	a0,-36(s0)
20403bee:	02a89563          	bne	a7,a0,20403c18 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20403bf2:	fe442503          	lw	a0,-28(s0)
20403bf6:	85aa                	mv	a1,a0
20403bf8:	4601                	li	a2,0
20403bfa:	00059813          	slli	a6,a1,0x0
20403bfe:	4781                	li	a5,0
20403c00:	fe042603          	lw	a2,-32(s0)
20403c04:	86b2                	mv	a3,a2
20403c06:	4701                	li	a4,0
20403c08:	00d7e633          	or	a2,a5,a3
20403c0c:	fec42423          	sw	a2,-24(s0)
20403c10:	00e867b3          	or	a5,a6,a4
20403c14:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403c18:	fe842783          	lw	a5,-24(s0)
20403c1c:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20403c20:	853e                	mv	a0,a5
20403c22:	85c2                	mv	a1,a6
20403c24:	5472                	lw	s0,60(sp)
20403c26:	6121                	addi	sp,sp,64
20403c28:	8082                	ret

20403c2a <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20403c2a:	7179                	addi	sp,sp,-48
20403c2c:	d606                	sw	ra,44(sp)
20403c2e:	d422                	sw	s0,40(sp)
20403c30:	d24a                	sw	s2,36(sp)
20403c32:	d04e                	sw	s3,32(sp)
20403c34:	1800                	addi	s0,sp,48
20403c36:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20403c3a:	fdc42783          	lw	a5,-36(s0)
20403c3e:	e781                	bnez	a5,20403c46 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20403c40:	4901                	li	s2,0
20403c42:	4981                	li	s3,0
20403c44:	a821                	j	20403c5c <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20403c46:	fdc42503          	lw	a0,-36(s0)
20403c4a:	b11fe0ef          	jal	ra,2040275a <__metal_driver_cpu_timebase>
20403c4e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20403c52:	fec42783          	lw	a5,-20(s0)
20403c56:	893e                	mv	s2,a5
20403c58:	87fd                	srai	a5,a5,0x1f
20403c5a:	89be                	mv	s3,a5
20403c5c:	87ca                	mv	a5,s2
20403c5e:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20403c60:	853e                	mv	a0,a5
20403c62:	85c2                	mv	a1,a6
20403c64:	50b2                	lw	ra,44(sp)
20403c66:	5422                	lw	s0,40(sp)
20403c68:	5912                	lw	s2,36(sp)
20403c6a:	5982                	lw	s3,32(sp)
20403c6c:	6145                	addi	sp,sp,48
20403c6e:	8082                	ret

20403c70 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20403c70:	7179                	addi	sp,sp,-48
20403c72:	d606                	sw	ra,44(sp)
20403c74:	d422                	sw	s0,40(sp)
20403c76:	1800                	addi	s0,sp,48
20403c78:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20403c7c:	4781                	li	a5,0
20403c7e:	4801                	li	a6,0
20403c80:	fef42023          	sw	a5,-32(s0)
20403c84:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403c88:	fdc42503          	lw	a0,-36(s0)
20403c8c:	af9fe0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20403c90:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20403c94:	fec42783          	lw	a5,-20(s0)
20403c98:	c78d                	beqz	a5,20403cc2 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403c9a:	fec42783          	lw	a5,-20(s0)
20403c9e:	13c7a783          	lw	a5,316(a5)
20403ca2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20403ca6:	fe842783          	lw	a5,-24(s0)
20403caa:	cf81                	beqz	a5,20403cc2 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20403cac:	fe842783          	lw	a5,-24(s0)
20403cb0:	439c                	lw	a5,0(a5)
20403cb2:	43f8                	lw	a4,68(a5)
20403cb4:	fe040793          	addi	a5,s0,-32
20403cb8:	863e                	mv	a2,a5
20403cba:	4585                	li	a1,1
20403cbc:	fe842503          	lw	a0,-24(s0)
20403cc0:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20403cc2:	fe042783          	lw	a5,-32(s0)
20403cc6:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
20403cca:	853e                	mv	a0,a5
20403ccc:	85c2                	mv	a1,a6
20403cce:	50b2                	lw	ra,44(sp)
20403cd0:	5422                	lw	s0,40(sp)
20403cd2:	6145                	addi	sp,sp,48
20403cd4:	8082                	ret

20403cd6 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20403cd6:	7179                	addi	sp,sp,-48
20403cd8:	d606                	sw	ra,44(sp)
20403cda:	d422                	sw	s0,40(sp)
20403cdc:	d226                	sw	s1,36(sp)
20403cde:	1800                	addi	s0,sp,48
20403ce0:	fca42e23          	sw	a0,-36(s0)
20403ce4:	fcb42823          	sw	a1,-48(s0)
20403ce8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20403cec:	57fd                	li	a5,-1
20403cee:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403cf2:	fdc42503          	lw	a0,-36(s0)
20403cf6:	a8ffe0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20403cfa:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20403cfe:	fe842783          	lw	a5,-24(s0)
20403d02:	cf8d                	beqz	a5,20403d3c <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403d04:	fe842783          	lw	a5,-24(s0)
20403d08:	13c7a783          	lw	a5,316(a5)
20403d0c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20403d10:	fe442783          	lw	a5,-28(s0)
20403d14:	c785                	beqz	a5,20403d3c <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20403d16:	fe442783          	lw	a5,-28(s0)
20403d1a:	439c                	lw	a5,0(a5)
20403d1c:	47a4                	lw	s1,72(a5)
20403d1e:	fdc42503          	lw	a0,-36(s0)
20403d22:	a15fe0ef          	jal	ra,20402736 <__metal_driver_cpu_hartid>
20403d26:	87aa                	mv	a5,a0
20403d28:	fd042603          	lw	a2,-48(s0)
20403d2c:	fd442683          	lw	a3,-44(s0)
20403d30:	85be                	mv	a1,a5
20403d32:	fe442503          	lw	a0,-28(s0)
20403d36:	9482                	jalr	s1
20403d38:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20403d3c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20403d40:	853e                	mv	a0,a5
20403d42:	50b2                	lw	ra,44(sp)
20403d44:	5422                	lw	s0,40(sp)
20403d46:	5492                	lw	s1,36(sp)
20403d48:	6145                	addi	sp,sp,48
20403d4a:	8082                	ret

20403d4c <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20403d4c:	1101                	addi	sp,sp,-32
20403d4e:	ce22                	sw	s0,28(sp)
20403d50:	1000                	addi	s0,sp,32
20403d52:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403d56:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403d5a:	853e                	mv	a0,a5
20403d5c:	4472                	lw	s0,28(sp)
20403d5e:	6105                	addi	sp,sp,32
20403d60:	8082                	ret

20403d62 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20403d62:	1101                	addi	sp,sp,-32
20403d64:	ce22                	sw	s0,28(sp)
20403d66:	1000                	addi	s0,sp,32
20403d68:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20403d6c:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20403d6e:	853e                	mv	a0,a5
20403d70:	4472                	lw	s0,28(sp)
20403d72:	6105                	addi	sp,sp,32
20403d74:	8082                	ret

20403d76 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20403d76:	1101                	addi	sp,sp,-32
20403d78:	ce22                	sw	s0,28(sp)
20403d7a:	1000                	addi	s0,sp,32
20403d7c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403d80:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20403d84:	853e                	mv	a0,a5
20403d86:	4472                	lw	s0,28(sp)
20403d88:	6105                	addi	sp,sp,32
20403d8a:	8082                	ret

20403d8c <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403d8c:	1101                	addi	sp,sp,-32
20403d8e:	ce22                	sw	s0,28(sp)
20403d90:	1000                	addi	s0,sp,32
20403d92:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20403d96:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403d98:	853e                	mv	a0,a5
20403d9a:	4472                	lw	s0,28(sp)
20403d9c:	6105                	addi	sp,sp,32
20403d9e:	8082                	ret

20403da0 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403da0:	7179                	addi	sp,sp,-48
20403da2:	d606                	sw	ra,44(sp)
20403da4:	d422                	sw	s0,40(sp)
20403da6:	1800                	addi	s0,sp,48
20403da8:	fca42e23          	sw	a0,-36(s0)
20403dac:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20403db0:	57fd                	li	a5,-1
20403db2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403db6:	fdc42503          	lw	a0,-36(s0)
20403dba:	9cbfe0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20403dbe:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20403dc2:	fe842783          	lw	a5,-24(s0)
20403dc6:	c79d                	beqz	a5,20403df4 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403dc8:	fe842783          	lw	a5,-24(s0)
20403dcc:	0dc7a783          	lw	a5,220(a5)
20403dd0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20403dd4:	fe442783          	lw	a5,-28(s0)
20403dd8:	cf91                	beqz	a5,20403df4 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
20403dda:	fe442783          	lw	a5,-28(s0)
20403dde:	439c                	lw	a5,0(a5)
20403de0:	43f8                	lw	a4,68(a5)
20403de2:	fd840793          	addi	a5,s0,-40
20403de6:	863e                	mv	a2,a5
20403de8:	458d                	li	a1,3
20403dea:	fe442503          	lw	a0,-28(s0)
20403dee:	9702                	jalr	a4
20403df0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20403df4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20403df8:	853e                	mv	a0,a5
20403dfa:	50b2                	lw	ra,44(sp)
20403dfc:	5422                	lw	s0,40(sp)
20403dfe:	6145                	addi	sp,sp,48
20403e00:	8082                	ret

20403e02 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403e02:	7179                	addi	sp,sp,-48
20403e04:	d606                	sw	ra,44(sp)
20403e06:	d422                	sw	s0,40(sp)
20403e08:	1800                	addi	s0,sp,48
20403e0a:	fca42e23          	sw	a0,-36(s0)
20403e0e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20403e12:	57fd                	li	a5,-1
20403e14:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403e18:	fdc42503          	lw	a0,-36(s0)
20403e1c:	969fe0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20403e20:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20403e24:	fe842783          	lw	a5,-24(s0)
20403e28:	c79d                	beqz	a5,20403e56 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403e2a:	fe842783          	lw	a5,-24(s0)
20403e2e:	0dc7a783          	lw	a5,220(a5)
20403e32:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20403e36:	fe442783          	lw	a5,-28(s0)
20403e3a:	cf91                	beqz	a5,20403e56 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20403e3c:	fe442783          	lw	a5,-28(s0)
20403e40:	439c                	lw	a5,0(a5)
20403e42:	43f8                	lw	a4,68(a5)
20403e44:	fd840793          	addi	a5,s0,-40
20403e48:	863e                	mv	a2,a5
20403e4a:	4589                	li	a1,2
20403e4c:	fe442503          	lw	a0,-28(s0)
20403e50:	9702                	jalr	a4
20403e52:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20403e56:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20403e5a:	853e                	mv	a0,a5
20403e5c:	50b2                	lw	ra,44(sp)
20403e5e:	5422                	lw	s0,40(sp)
20403e60:	6145                	addi	sp,sp,48
20403e62:	8082                	ret

20403e64 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20403e64:	7179                	addi	sp,sp,-48
20403e66:	d606                	sw	ra,44(sp)
20403e68:	d422                	sw	s0,40(sp)
20403e6a:	1800                	addi	s0,sp,48
20403e6c:	fca42e23          	sw	a0,-36(s0)
20403e70:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20403e74:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403e78:	fdc42503          	lw	a0,-36(s0)
20403e7c:	909fe0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20403e80:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20403e84:	fe842783          	lw	a5,-24(s0)
20403e88:	c79d                	beqz	a5,20403eb6 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403e8a:	fe842783          	lw	a5,-24(s0)
20403e8e:	0dc7a783          	lw	a5,220(a5)
20403e92:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20403e96:	fe442783          	lw	a5,-28(s0)
20403e9a:	cf91                	beqz	a5,20403eb6 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20403e9c:	fe442783          	lw	a5,-28(s0)
20403ea0:	439c                	lw	a5,0(a5)
20403ea2:	43f8                	lw	a4,68(a5)
20403ea4:	fd840793          	addi	a5,s0,-40
20403ea8:	863e                	mv	a2,a5
20403eaa:	4591                	li	a1,4
20403eac:	fe442503          	lw	a0,-28(s0)
20403eb0:	9702                	jalr	a4
20403eb2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20403eb6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
20403eba:	853e                	mv	a0,a5
20403ebc:	50b2                	lw	ra,44(sp)
20403ebe:	5422                	lw	s0,40(sp)
20403ec0:	6145                	addi	sp,sp,48
20403ec2:	8082                	ret

20403ec4 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20403ec4:	1101                	addi	sp,sp,-32
20403ec6:	ce06                	sw	ra,28(sp)
20403ec8:	cc22                	sw	s0,24(sp)
20403eca:	1000                	addi	s0,sp,32
20403ecc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20403ed0:	fec42503          	lw	a0,-20(s0)
20403ed4:	8b1fe0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20403ed8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
20403eda:	853e                	mv	a0,a5
20403edc:	40f2                	lw	ra,28(sp)
20403ede:	4462                	lw	s0,24(sp)
20403ee0:	6105                	addi	sp,sp,32
20403ee2:	8082                	ret

20403ee4 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20403ee4:	7179                	addi	sp,sp,-48
20403ee6:	d606                	sw	ra,44(sp)
20403ee8:	d422                	sw	s0,40(sp)
20403eea:	1800                	addi	s0,sp,48
20403eec:	fca42e23          	sw	a0,-36(s0)
20403ef0:	fcb42c23          	sw	a1,-40(s0)
20403ef4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403ef8:	fdc42503          	lw	a0,-36(s0)
20403efc:	889fe0ef          	jal	ra,20402784 <__metal_driver_cpu_interrupt_controller>
20403f00:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20403f04:	fec42783          	lw	a5,-20(s0)
20403f08:	cb99                	beqz	a5,20403f1e <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20403f0a:	fd442603          	lw	a2,-44(s0)
20403f0e:	fd842583          	lw	a1,-40(s0)
20403f12:	fec42503          	lw	a0,-20(s0)
20403f16:	8ddff0ef          	jal	ra,204037f2 <__metal_exception_register>
20403f1a:	87aa                	mv	a5,a0
20403f1c:	a011                	j	20403f20 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20403f1e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20403f20:	853e                	mv	a0,a5
20403f22:	50b2                	lw	ra,44(sp)
20403f24:	5422                	lw	s0,40(sp)
20403f26:	6145                	addi	sp,sp,48
20403f28:	8082                	ret

20403f2a <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403f2a:	1101                	addi	sp,sp,-32
20403f2c:	ce22                	sw	s0,28(sp)
20403f2e:	1000                	addi	s0,sp,32
20403f30:	fea42623          	sw	a0,-20(s0)
20403f34:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20403f38:	fe842783          	lw	a5,-24(s0)
20403f3c:	0007d783          	lhu	a5,0(a5)
20403f40:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20403f44:	478d                	li	a5,3
20403f46:	00f71463          	bne	a4,a5,20403f4e <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20403f4a:	4791                	li	a5,4
20403f4c:	a011                	j	20403f50 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20403f4e:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20403f50:	853e                	mv	a0,a5
20403f52:	4472                	lw	s0,28(sp)
20403f54:	6105                	addi	sp,sp,32
20403f56:	8082                	ret

20403f58 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20403f58:	7179                	addi	sp,sp,-48
20403f5a:	d622                	sw	s0,44(sp)
20403f5c:	1800                	addi	s0,sp,48
20403f5e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403f62:	341027f3          	csrr	a5,mepc
20403f66:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20403f6a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20403f6e:	853e                	mv	a0,a5
20403f70:	5432                	lw	s0,44(sp)
20403f72:	6145                	addi	sp,sp,48
20403f74:	8082                	ret

20403f76 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20403f76:	1101                	addi	sp,sp,-32
20403f78:	ce22                	sw	s0,28(sp)
20403f7a:	1000                	addi	s0,sp,32
20403f7c:	fea42623          	sw	a0,-20(s0)
20403f80:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20403f84:	fe842783          	lw	a5,-24(s0)
20403f88:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20403f8c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20403f8e:	853e                	mv	a0,a5
20403f90:	4472                	lw	s0,28(sp)
20403f92:	6105                	addi	sp,sp,32
20403f94:	8082                	ret

20403f96 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20403f96:	1101                	addi	sp,sp,-32
20403f98:	ce22                	sw	s0,28(sp)
20403f9a:	1000                	addi	s0,sp,32
20403f9c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403fa0:	fec42703          	lw	a4,-20(s0)
20403fa4:	800017b7          	lui	a5,0x80001
20403fa8:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe058>
20403fac:	00f71563          	bne	a4,a5,20403fb6 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20403fb0:	0c0007b7          	lui	a5,0xc000
20403fb4:	a011                	j	20403fb8 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20403fb6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
20403fb8:	853e                	mv	a0,a5
20403fba:	4472                	lw	s0,28(sp)
20403fbc:	6105                	addi	sp,sp,32
20403fbe:	8082                	ret

20403fc0 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20403fc0:	1101                	addi	sp,sp,-32
20403fc2:	ce22                	sw	s0,28(sp)
20403fc4:	1000                	addi	s0,sp,32
20403fc6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403fca:	fec42703          	lw	a4,-20(s0)
20403fce:	800017b7          	lui	a5,0x80001
20403fd2:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe058>
20403fd6:	00f71463          	bne	a4,a5,20403fde <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
20403fda:	47ed                	li	a5,27
20403fdc:	a011                	j	20403fe0 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
20403fde:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
20403fe0:	853e                	mv	a0,a5
20403fe2:	4472                	lw	s0,28(sp)
20403fe4:	6105                	addi	sp,sp,32
20403fe6:	8082                	ret

20403fe8 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20403fe8:	1101                	addi	sp,sp,-32
20403fea:	ce22                	sw	s0,28(sp)
20403fec:	1000                	addi	s0,sp,32
20403fee:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403ff2:	fec42703          	lw	a4,-20(s0)
20403ff6:	800017b7          	lui	a5,0x80001
20403ffa:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe058>
20403ffe:	00f71463          	bne	a4,a5,20404006 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20404002:	479d                	li	a5,7
20404004:	a011                	j	20404008 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20404006:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
20404008:	853e                	mv	a0,a5
2040400a:	4472                	lw	s0,28(sp)
2040400c:	6105                	addi	sp,sp,32
2040400e:	8082                	ret

20404010 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20404010:	1101                	addi	sp,sp,-32
20404012:	ce22                	sw	s0,28(sp)
20404014:	1000                	addi	s0,sp,32
20404016:	fea42623          	sw	a0,-20(s0)
2040401a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
2040401e:	fe842783          	lw	a5,-24(s0)
20404022:	e791                	bnez	a5,2040402e <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20404024:	800017b7          	lui	a5,0x80001
20404028:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdca0>
2040402c:	a011                	j	20404030 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
2040402e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
20404030:	853e                	mv	a0,a5
20404032:	4472                	lw	s0,28(sp)
20404034:	6105                	addi	sp,sp,32
20404036:	8082                	ret

20404038 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20404038:	1101                	addi	sp,sp,-32
2040403a:	ce22                	sw	s0,28(sp)
2040403c:	1000                	addi	s0,sp,32
2040403e:	fea42623          	sw	a0,-20(s0)
20404042:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
20404046:	fe842783          	lw	a5,-24(s0)
2040404a:	e399                	bnez	a5,20404050 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
2040404c:	47ad                	li	a5,11
2040404e:	a011                	j	20404052 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
20404050:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
20404052:	853e                	mv	a0,a5
20404054:	4472                	lw	s0,28(sp)
20404056:	6105                	addi	sp,sp,32
20404058:	8082                	ret

2040405a <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
2040405a:	7179                	addi	sp,sp,-48
2040405c:	d606                	sw	ra,44(sp)
2040405e:	d422                	sw	s0,40(sp)
20404060:	1800                	addi	s0,sp,48
20404062:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404066:	fdc42503          	lw	a0,-36(s0)
2040406a:	3735                	jal	20403f96 <__metal_driver_sifive_plic0_control_base>
2040406c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404070:	fec42703          	lw	a4,-20(s0)
20404074:	002007b7          	lui	a5,0x200
20404078:	0791                	addi	a5,a5,4
2040407a:	97ba                	add	a5,a5,a4
2040407c:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
2040407e:	853e                	mv	a0,a5
20404080:	50b2                	lw	ra,44(sp)
20404082:	5422                	lw	s0,40(sp)
20404084:	6145                	addi	sp,sp,48
20404086:	8082                	ret

20404088 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20404088:	7179                	addi	sp,sp,-48
2040408a:	d606                	sw	ra,44(sp)
2040408c:	d422                	sw	s0,40(sp)
2040408e:	1800                	addi	s0,sp,48
20404090:	fca42e23          	sw	a0,-36(s0)
20404094:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404098:	fdc42503          	lw	a0,-36(s0)
2040409c:	3ded                	jal	20403f96 <__metal_driver_sifive_plic0_control_base>
2040409e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204040a2:	fec42703          	lw	a4,-20(s0)
204040a6:	002007b7          	lui	a5,0x200
204040aa:	0791                	addi	a5,a5,4
204040ac:	97ba                	add	a5,a5,a4
204040ae:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
204040b0:	fd842783          	lw	a5,-40(s0)
204040b4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
204040b6:	0001                	nop
204040b8:	50b2                	lw	ra,44(sp)
204040ba:	5422                	lw	s0,40(sp)
204040bc:	6145                	addi	sp,sp,48
204040be:	8082                	ret

204040c0 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
204040c0:	7179                	addi	sp,sp,-48
204040c2:	d606                	sw	ra,44(sp)
204040c4:	d422                	sw	s0,40(sp)
204040c6:	1800                	addi	s0,sp,48
204040c8:	fca42e23          	sw	a0,-36(s0)
204040cc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
204040d0:	fdc42503          	lw	a0,-36(s0)
204040d4:	35c9                	jal	20403f96 <__metal_driver_sifive_plic0_control_base>
204040d6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204040da:	fec42703          	lw	a4,-20(s0)
204040de:	002007b7          	lui	a5,0x200
204040e2:	97ba                	add	a5,a5,a4
204040e4:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
204040e6:	fd842783          	lw	a5,-40(s0)
204040ea:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
204040ec:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
204040ee:	853e                	mv	a0,a5
204040f0:	50b2                	lw	ra,44(sp)
204040f2:	5422                	lw	s0,40(sp)
204040f4:	6145                	addi	sp,sp,48
204040f6:	8082                	ret

204040f8 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
204040f8:	7179                	addi	sp,sp,-48
204040fa:	d606                	sw	ra,44(sp)
204040fc:	d422                	sw	s0,40(sp)
204040fe:	1800                	addi	s0,sp,48
20404100:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404104:	fdc42503          	lw	a0,-36(s0)
20404108:	3579                	jal	20403f96 <__metal_driver_sifive_plic0_control_base>
2040410a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040410e:	fec42703          	lw	a4,-20(s0)
20404112:	002007b7          	lui	a5,0x200
20404116:	97ba                	add	a5,a5,a4
20404118:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
2040411a:	853e                	mv	a0,a5
2040411c:	50b2                	lw	ra,44(sp)
2040411e:	5422                	lw	s0,40(sp)
20404120:	6145                	addi	sp,sp,48
20404122:	8082                	ret

20404124 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20404124:	7179                	addi	sp,sp,-48
20404126:	d606                	sw	ra,44(sp)
20404128:	d422                	sw	s0,40(sp)
2040412a:	1800                	addi	s0,sp,48
2040412c:	fca42e23          	sw	a0,-36(s0)
20404130:	fcb42c23          	sw	a1,-40(s0)
20404134:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20404138:	fdc42503          	lw	a0,-36(s0)
2040413c:	3da9                	jal	20403f96 <__metal_driver_sifive_plic0_control_base>
2040413e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20404142:	fdc42503          	lw	a0,-36(s0)
20404146:	354d                	jal	20403fe8 <__metal_driver_sifive_plic0_max_priority>
20404148:	87aa                	mv	a5,a0
2040414a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
2040414e:	fe842783          	lw	a5,-24(s0)
20404152:	c785                	beqz	a5,2040417a <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20404154:	fd442703          	lw	a4,-44(s0)
20404158:	fe842783          	lw	a5,-24(s0)
2040415c:	00f77f63          	bgeu	a4,a5,2040417a <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404160:	fd842783          	lw	a5,-40(s0)
20404164:	078a                	slli	a5,a5,0x2
20404166:	873e                	mv	a4,a5
20404168:	fec42783          	lw	a5,-20(s0)
2040416c:	97ba                	add	a5,a5,a4
2040416e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20404170:	fd442783          	lw	a5,-44(s0)
20404174:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20404176:	4781                	li	a5,0
20404178:	a011                	j	2040417c <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
2040417a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
2040417c:	853e                	mv	a0,a5
2040417e:	50b2                	lw	ra,44(sp)
20404180:	5422                	lw	s0,40(sp)
20404182:	6145                	addi	sp,sp,48
20404184:	8082                	ret

20404186 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20404186:	7179                	addi	sp,sp,-48
20404188:	d606                	sw	ra,44(sp)
2040418a:	d422                	sw	s0,40(sp)
2040418c:	1800                	addi	s0,sp,48
2040418e:	fca42e23          	sw	a0,-36(s0)
20404192:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404196:	fdc42503          	lw	a0,-36(s0)
2040419a:	3bf5                	jal	20403f96 <__metal_driver_sifive_plic0_control_base>
2040419c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204041a0:	fd842783          	lw	a5,-40(s0)
204041a4:	078a                	slli	a5,a5,0x2
204041a6:	873e                	mv	a4,a5
204041a8:	fec42783          	lw	a5,-20(s0)
204041ac:	97ba                	add	a5,a5,a4
204041ae:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
204041b0:	853e                	mv	a0,a5
204041b2:	50b2                	lw	ra,44(sp)
204041b4:	5422                	lw	s0,40(sp)
204041b6:	6145                	addi	sp,sp,48
204041b8:	8082                	ret

204041ba <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
204041ba:	7179                	addi	sp,sp,-48
204041bc:	d606                	sw	ra,44(sp)
204041be:	d422                	sw	s0,40(sp)
204041c0:	1800                	addi	s0,sp,48
204041c2:	fca42e23          	sw	a0,-36(s0)
204041c6:	fcb42c23          	sw	a1,-40(s0)
204041ca:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204041ce:	fdc42503          	lw	a0,-36(s0)
204041d2:	33d1                	jal	20403f96 <__metal_driver_sifive_plic0_control_base>
204041d4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204041d8:	fd842783          	lw	a5,-40(s0)
204041dc:	8795                	srai	a5,a5,0x5
204041de:	078a                	slli	a5,a5,0x2
204041e0:	873e                	mv	a4,a5
204041e2:	fec42783          	lw	a5,-20(s0)
204041e6:	973e                	add	a4,a4,a5
204041e8:	6789                	lui	a5,0x2
204041ea:	97ba                	add	a5,a5,a4
204041ec:	439c                	lw	a5,0(a5)
204041ee:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
204041f2:	fd442783          	lw	a5,-44(s0)
204041f6:	cf81                	beqz	a5,2040420e <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
204041f8:	fd842783          	lw	a5,-40(s0)
204041fc:	8bfd                	andi	a5,a5,31
204041fe:	4705                	li	a4,1
20404200:	00f717b3          	sll	a5,a4,a5
20404204:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404206:	fe842783          	lw	a5,-24(s0)
2040420a:	8fd9                	or	a5,a5,a4
2040420c:	a829                	j	20404226 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
2040420e:	fd842783          	lw	a5,-40(s0)
20404212:	8bfd                	andi	a5,a5,31
20404214:	4705                	li	a4,1
20404216:	00f717b3          	sll	a5,a4,a5
2040421a:	fff7c793          	not	a5,a5
2040421e:	873e                	mv	a4,a5
20404220:	fe842783          	lw	a5,-24(s0)
20404224:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404226:	fd842703          	lw	a4,-40(s0)
2040422a:	8715                	srai	a4,a4,0x5
2040422c:	070a                	slli	a4,a4,0x2
2040422e:	86ba                	mv	a3,a4
20404230:	fec42703          	lw	a4,-20(s0)
20404234:	96ba                	add	a3,a3,a4
20404236:	6709                	lui	a4,0x2
20404238:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
2040423a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
2040423c:	0001                	nop
2040423e:	50b2                	lw	ra,44(sp)
20404240:	5422                	lw	s0,40(sp)
20404242:	6145                	addi	sp,sp,48
20404244:	8082                	ret

20404246 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20404246:	1101                	addi	sp,sp,-32
20404248:	ce06                	sw	ra,28(sp)
2040424a:	cc22                	sw	s0,24(sp)
2040424c:	1000                	addi	s0,sp,32
2040424e:	fea42623          	sw	a0,-20(s0)
20404252:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20404256:	12c00513          	li	a0,300
2040425a:	1d0010ef          	jal	ra,2040542a <metal_shutdown>

2040425e <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
2040425e:	7179                	addi	sp,sp,-48
20404260:	d606                	sw	ra,44(sp)
20404262:	d422                	sw	s0,40(sp)
20404264:	1800                	addi	s0,sp,48
20404266:	fca42e23          	sw	a0,-36(s0)
2040426a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
2040426e:	fd842783          	lw	a5,-40(s0)
20404272:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20404276:	fec42503          	lw	a0,-20(s0)
2040427a:	33c5                	jal	2040405a <__metal_plic0_claim_interrupt>
2040427c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20404280:	fec42503          	lw	a0,-20(s0)
20404284:	d3dff0ef          	jal	ra,20403fc0 <__metal_driver_sifive_plic0_num_interrupts>
20404288:	87aa                	mv	a5,a0
2040428a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
2040428e:	fe842703          	lw	a4,-24(s0)
20404292:	fe442783          	lw	a5,-28(s0)
20404296:	04f77263          	bgeu	a4,a5,204042da <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
2040429a:	fec42703          	lw	a4,-20(s0)
2040429e:	fe842783          	lw	a5,-24(s0)
204042a2:	078a                	slli	a5,a5,0x2
204042a4:	97ba                	add	a5,a5,a4
204042a6:	479c                	lw	a5,8(a5)
204042a8:	cb8d                	beqz	a5,204042da <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
204042aa:	fec42703          	lw	a4,-20(s0)
204042ae:	fe842783          	lw	a5,-24(s0)
204042b2:	078a                	slli	a5,a5,0x2
204042b4:	97ba                	add	a5,a5,a4
204042b6:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
204042ba:	fe842603          	lw	a2,-24(s0)
204042be:	fec42683          	lw	a3,-20(s0)
204042c2:	fe842703          	lw	a4,-24(s0)
204042c6:	87ba                	mv	a5,a4
204042c8:	0786                	slli	a5,a5,0x1
204042ca:	97ba                	add	a5,a5,a4
204042cc:	078e                	slli	a5,a5,0x3
204042ce:	97b6                	add	a5,a5,a3
204042d0:	0887a783          	lw	a5,136(a5)
204042d4:	85be                	mv	a1,a5
204042d6:	8532                	mv	a0,a2
204042d8:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
204042da:	fe842583          	lw	a1,-24(s0)
204042de:	fec42503          	lw	a0,-20(s0)
204042e2:	335d                	jal	20404088 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
204042e4:	0001                	nop
204042e6:	50b2                	lw	ra,44(sp)
204042e8:	5422                	lw	s0,40(sp)
204042ea:	6145                	addi	sp,sp,48
204042ec:	8082                	ret

204042ee <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
204042ee:	7139                	addi	sp,sp,-64
204042f0:	de06                	sw	ra,60(sp)
204042f2:	dc22                	sw	s0,56(sp)
204042f4:	0080                	addi	s0,sp,64
204042f6:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204042fa:	fcc42783          	lw	a5,-52(s0)
204042fe:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20404302:	fe442783          	lw	a5,-28(s0)
20404306:	43dc                	lw	a5,4(a5)
20404308:	12079063          	bnez	a5,20404428 <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040430c:	fe042623          	sw	zero,-20(s0)
20404310:	a221                	j	20404418 <__metal_driver_riscv_plic0_init+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20404312:	fcc42503          	lw	a0,-52(s0)
20404316:	cabff0ef          	jal	ra,20403fc0 <__metal_driver_sifive_plic0_num_interrupts>
2040431a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
2040431e:	fec42583          	lw	a1,-20(s0)
20404322:	fcc42503          	lw	a0,-52(s0)
20404326:	cebff0ef          	jal	ra,20404010 <__metal_driver_sifive_plic0_interrupt_parents>
2040432a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
2040432e:	fec42583          	lw	a1,-20(s0)
20404332:	fcc42503          	lw	a0,-52(s0)
20404336:	d03ff0ef          	jal	ra,20404038 <__metal_driver_sifive_plic0_interrupt_lines>
2040433a:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
2040433e:	fdc42783          	lw	a5,-36(s0)
20404342:	439c                	lw	a5,0(a5)
20404344:	439c                	lw	a5,0(a5)
20404346:	fdc42503          	lw	a0,-36(s0)
2040434a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
2040434c:	fe042423          	sw	zero,-24(s0)
20404350:	a085                	j	204043b0 <__metal_driver_riscv_plic0_init+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20404352:	4601                	li	a2,0
20404354:	fe842583          	lw	a1,-24(s0)
20404358:	fe442503          	lw	a0,-28(s0)
2040435c:	3db9                	jal	204041ba <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
2040435e:	4601                	li	a2,0
20404360:	fe842583          	lw	a1,-24(s0)
20404364:	fcc42503          	lw	a0,-52(s0)
20404368:	3b75                	jal	20404124 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
2040436a:	fe442703          	lw	a4,-28(s0)
2040436e:	fe842783          	lw	a5,-24(s0)
20404372:	078a                	slli	a5,a5,0x2
20404374:	97ba                	add	a5,a5,a4
20404376:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
2040437a:	fe442683          	lw	a3,-28(s0)
2040437e:	fe842703          	lw	a4,-24(s0)
20404382:	87ba                	mv	a5,a4
20404384:	0786                	slli	a5,a5,0x1
20404386:	97ba                	add	a5,a5,a4
20404388:	078e                	slli	a5,a5,0x3
2040438a:	97b6                	add	a5,a5,a3
2040438c:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20404390:	fe442683          	lw	a3,-28(s0)
20404394:	fe842703          	lw	a4,-24(s0)
20404398:	87ba                	mv	a5,a4
2040439a:	0786                	slli	a5,a5,0x1
2040439c:	97ba                	add	a5,a5,a4
2040439e:	078e                	slli	a5,a5,0x3
204043a0:	97b6                	add	a5,a5,a3
204043a2:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
204043a6:	fe842783          	lw	a5,-24(s0)
204043aa:	0785                	addi	a5,a5,1
204043ac:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
204043b0:	fe842703          	lw	a4,-24(s0)
204043b4:	fe042783          	lw	a5,-32(s0)
204043b8:	f8f74de3          	blt	a4,a5,20404352 <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
204043bc:	4581                	li	a1,0
204043be:	fcc42503          	lw	a0,-52(s0)
204043c2:	cffff0ef          	jal	ra,204040c0 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
204043c6:	fdc42783          	lw	a5,-36(s0)
204043ca:	439c                	lw	a5,0(a5)
204043cc:	4fdc                	lw	a5,28(a5)
204043ce:	fe442683          	lw	a3,-28(s0)
204043d2:	4601                	li	a2,0
204043d4:	fd842583          	lw	a1,-40(s0)
204043d8:	fdc42503          	lw	a0,-36(s0)
204043dc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
204043de:	fdc42783          	lw	a5,-36(s0)
204043e2:	439c                	lw	a5,0(a5)
204043e4:	4fd8                	lw	a4,28(a5)
204043e6:	fe442683          	lw	a3,-28(s0)
204043ea:	204047b7          	lui	a5,0x20404
204043ee:	25e78613          	addi	a2,a5,606 # 2040425e <__metal_plic0_handler>
204043f2:	fd842583          	lw	a1,-40(s0)
204043f6:	fdc42503          	lw	a0,-36(s0)
204043fa:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
204043fc:	fdc42783          	lw	a5,-36(s0)
20404400:	439c                	lw	a5,0(a5)
20404402:	53dc                	lw	a5,36(a5)
20404404:	fd842583          	lw	a1,-40(s0)
20404408:	fdc42503          	lw	a0,-36(s0)
2040440c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040440e:	fec42783          	lw	a5,-20(s0)
20404412:	0785                	addi	a5,a5,1
20404414:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404418:	fec42783          	lw	a5,-20(s0)
2040441c:	eef05be3          	blez	a5,20404312 <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20404420:	fe442783          	lw	a5,-28(s0)
20404424:	4705                	li	a4,1
20404426:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20404428:	0001                	nop
2040442a:	50f2                	lw	ra,60(sp)
2040442c:	5462                	lw	s0,56(sp)
2040442e:	6121                	addi	sp,sp,64
20404430:	8082                	ret

20404432 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20404432:	7179                	addi	sp,sp,-48
20404434:	d606                	sw	ra,44(sp)
20404436:	d422                	sw	s0,40(sp)
20404438:	1800                	addi	s0,sp,48
2040443a:	fca42e23          	sw	a0,-36(s0)
2040443e:	fcb42c23          	sw	a1,-40(s0)
20404442:	fcc42a23          	sw	a2,-44(s0)
20404446:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040444a:	fdc42783          	lw	a5,-36(s0)
2040444e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404452:	fdc42503          	lw	a0,-36(s0)
20404456:	b6bff0ef          	jal	ra,20403fc0 <__metal_driver_sifive_plic0_num_interrupts>
2040445a:	872a                	mv	a4,a0
2040445c:	fd842783          	lw	a5,-40(s0)
20404460:	00e7c463          	blt	a5,a4,20404468 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20404464:	57fd                	li	a5,-1
20404466:	a051                	j	204044ea <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20404468:	fd442783          	lw	a5,-44(s0)
2040446c:	cf9d                	beqz	a5,204044aa <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
2040446e:	4609                	li	a2,2
20404470:	fd842583          	lw	a1,-40(s0)
20404474:	fdc42503          	lw	a0,-36(s0)
20404478:	cadff0ef          	jal	ra,20404124 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
2040447c:	fec42703          	lw	a4,-20(s0)
20404480:	fd842783          	lw	a5,-40(s0)
20404484:	078a                	slli	a5,a5,0x2
20404486:	97ba                	add	a5,a5,a4
20404488:	fd442703          	lw	a4,-44(s0)
2040448c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
2040448e:	fec42683          	lw	a3,-20(s0)
20404492:	fd842703          	lw	a4,-40(s0)
20404496:	87ba                	mv	a5,a4
20404498:	0786                	slli	a5,a5,0x1
2040449a:	97ba                	add	a5,a5,a4
2040449c:	078e                	slli	a5,a5,0x3
2040449e:	97b6                	add	a5,a5,a3
204044a0:	fd042703          	lw	a4,-48(s0)
204044a4:	08e7a423          	sw	a4,136(a5)
204044a8:	a081                	j	204044e8 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
204044aa:	4605                	li	a2,1
204044ac:	fd842583          	lw	a1,-40(s0)
204044b0:	fdc42503          	lw	a0,-36(s0)
204044b4:	c71ff0ef          	jal	ra,20404124 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
204044b8:	fec42703          	lw	a4,-20(s0)
204044bc:	fd842783          	lw	a5,-40(s0)
204044c0:	078a                	slli	a5,a5,0x2
204044c2:	97ba                	add	a5,a5,a4
204044c4:	20404737          	lui	a4,0x20404
204044c8:	24670713          	addi	a4,a4,582 # 20404246 <__metal_plic0_default_handler>
204044cc:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
204044ce:	fec42683          	lw	a3,-20(s0)
204044d2:	fd842703          	lw	a4,-40(s0)
204044d6:	87ba                	mv	a5,a4
204044d8:	0786                	slli	a5,a5,0x1
204044da:	97ba                	add	a5,a5,a4
204044dc:	078e                	slli	a5,a5,0x3
204044de:	97b6                	add	a5,a5,a3
204044e0:	fd042703          	lw	a4,-48(s0)
204044e4:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
204044e8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
204044ea:	853e                	mv	a0,a5
204044ec:	50b2                	lw	ra,44(sp)
204044ee:	5422                	lw	s0,40(sp)
204044f0:	6145                	addi	sp,sp,48
204044f2:	8082                	ret

204044f4 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
204044f4:	7179                	addi	sp,sp,-48
204044f6:	d606                	sw	ra,44(sp)
204044f8:	d422                	sw	s0,40(sp)
204044fa:	1800                	addi	s0,sp,48
204044fc:	fca42e23          	sw	a0,-36(s0)
20404500:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404504:	fdc42783          	lw	a5,-36(s0)
20404508:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2040450c:	fdc42503          	lw	a0,-36(s0)
20404510:	ab1ff0ef          	jal	ra,20403fc0 <__metal_driver_sifive_plic0_num_interrupts>
20404514:	872a                	mv	a4,a0
20404516:	fd842783          	lw	a5,-40(s0)
2040451a:	00e7c463          	blt	a5,a4,20404522 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040451e:	57fd                	li	a5,-1
20404520:	a809                	j	20404532 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20404522:	4605                	li	a2,1
20404524:	fd842583          	lw	a1,-40(s0)
20404528:	fec42503          	lw	a0,-20(s0)
2040452c:	c8fff0ef          	jal	ra,204041ba <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
20404530:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20404532:	853e                	mv	a0,a5
20404534:	50b2                	lw	ra,44(sp)
20404536:	5422                	lw	s0,40(sp)
20404538:	6145                	addi	sp,sp,48
2040453a:	8082                	ret

2040453c <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
2040453c:	7179                	addi	sp,sp,-48
2040453e:	d606                	sw	ra,44(sp)
20404540:	d422                	sw	s0,40(sp)
20404542:	1800                	addi	s0,sp,48
20404544:	fca42e23          	sw	a0,-36(s0)
20404548:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040454c:	fdc42783          	lw	a5,-36(s0)
20404550:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404554:	fdc42503          	lw	a0,-36(s0)
20404558:	a69ff0ef          	jal	ra,20403fc0 <__metal_driver_sifive_plic0_num_interrupts>
2040455c:	872a                	mv	a4,a0
2040455e:	fd842783          	lw	a5,-40(s0)
20404562:	00e7c463          	blt	a5,a4,2040456a <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20404566:	57fd                	li	a5,-1
20404568:	a809                	j	2040457a <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
2040456a:	4601                	li	a2,0
2040456c:	fd842583          	lw	a1,-40(s0)
20404570:	fec42503          	lw	a0,-20(s0)
20404574:	c47ff0ef          	jal	ra,204041ba <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20404578:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
2040457a:	853e                	mv	a0,a5
2040457c:	50b2                	lw	ra,44(sp)
2040457e:	5422                	lw	s0,40(sp)
20404580:	6145                	addi	sp,sp,48
20404582:	8082                	ret

20404584 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404584:	1101                	addi	sp,sp,-32
20404586:	ce22                	sw	s0,28(sp)
20404588:	1000                	addi	s0,sp,32
2040458a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040458e:	fec42703          	lw	a4,-20(s0)
20404592:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404596:	00f71563          	bne	a4,a5,204045a0 <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
2040459a:	100127b7          	lui	a5,0x10012
2040459e:	a011                	j	204045a2 <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
204045a0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
204045a2:	853e                	mv	a0,a5
204045a4:	4472                	lw	s0,28(sp)
204045a6:	6105                	addi	sp,sp,32
204045a8:	8082                	ret

204045aa <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
204045aa:	1101                	addi	sp,sp,-32
204045ac:	ce22                	sw	s0,28(sp)
204045ae:	1000                	addi	s0,sp,32
204045b0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204045b4:	fec42703          	lw	a4,-20(s0)
204045b8:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204045bc:	00f71763          	bne	a4,a5,204045ca <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
204045c0:	800017b7          	lui	a5,0x80001
204045c4:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe058>
204045c8:	a011                	j	204045cc <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
204045ca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
204045cc:	853e                	mv	a0,a5
204045ce:	4472                	lw	s0,28(sp)
204045d0:	6105                	addi	sp,sp,32
204045d2:	8082                	ret

204045d4 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
204045d4:	1101                	addi	sp,sp,-32
204045d6:	ce22                	sw	s0,28(sp)
204045d8:	1000                	addi	s0,sp,32
204045da:	fea42623          	sw	a0,-20(s0)
204045de:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
204045e2:	fec42703          	lw	a4,-20(s0)
204045e6:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204045ea:	00f71763          	bne	a4,a5,204045f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
204045ee:	fe842783          	lw	a5,-24(s0)
204045f2:	e399                	bnez	a5,204045f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
204045f4:	479d                	li	a5,7
204045f6:	a269                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
204045f8:	fec42703          	lw	a4,-20(s0)
204045fc:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404600:	00f71963          	bne	a4,a5,20404612 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
20404604:	fe842703          	lw	a4,-24(s0)
20404608:	4785                	li	a5,1
2040460a:	00f71463          	bne	a4,a5,20404612 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
2040460e:	47a1                	li	a5,8
20404610:	aa85                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404612:	fec42703          	lw	a4,-20(s0)
20404616:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040461a:	00f71963          	bne	a4,a5,2040462c <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
2040461e:	fe842703          	lw	a4,-24(s0)
20404622:	4789                	li	a5,2
20404624:	00f71463          	bne	a4,a5,2040462c <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
20404628:	47a5                	li	a5,9
2040462a:	aa99                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
2040462c:	fec42703          	lw	a4,-20(s0)
20404630:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404634:	00f71963          	bne	a4,a5,20404646 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
20404638:	fe842703          	lw	a4,-24(s0)
2040463c:	478d                	li	a5,3
2040463e:	00f71463          	bne	a4,a5,20404646 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
20404642:	47a9                	li	a5,10
20404644:	aa35                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404646:	fec42703          	lw	a4,-20(s0)
2040464a:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040464e:	00f71963          	bne	a4,a5,20404660 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
20404652:	fe842703          	lw	a4,-24(s0)
20404656:	4791                	li	a5,4
20404658:	00f71463          	bne	a4,a5,20404660 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
2040465c:	47ad                	li	a5,11
2040465e:	a20d                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
20404660:	fec42703          	lw	a4,-20(s0)
20404664:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404668:	00f71963          	bne	a4,a5,2040467a <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
2040466c:	fe842703          	lw	a4,-24(s0)
20404670:	4795                	li	a5,5
20404672:	00f71463          	bne	a4,a5,2040467a <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
20404676:	47b1                	li	a5,12
20404678:	a221                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
2040467a:	fec42703          	lw	a4,-20(s0)
2040467e:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404682:	00f71963          	bne	a4,a5,20404694 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
20404686:	fe842703          	lw	a4,-24(s0)
2040468a:	4799                	li	a5,6
2040468c:	00f71463          	bne	a4,a5,20404694 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
20404690:	47b5                	li	a5,13
20404692:	a0fd                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404694:	fec42703          	lw	a4,-20(s0)
20404698:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040469c:	00f71963          	bne	a4,a5,204046ae <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
204046a0:	fe842703          	lw	a4,-24(s0)
204046a4:	479d                	li	a5,7
204046a6:	00f71463          	bne	a4,a5,204046ae <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
204046aa:	47b9                	li	a5,14
204046ac:	a8d1                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
204046ae:	fec42703          	lw	a4,-20(s0)
204046b2:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204046b6:	00f71963          	bne	a4,a5,204046c8 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
204046ba:	fe842703          	lw	a4,-24(s0)
204046be:	47a1                	li	a5,8
204046c0:	00f71463          	bne	a4,a5,204046c8 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
204046c4:	47bd                	li	a5,15
204046c6:	a86d                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
204046c8:	fec42703          	lw	a4,-20(s0)
204046cc:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204046d0:	00f71963          	bne	a4,a5,204046e2 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
204046d4:	fe842703          	lw	a4,-24(s0)
204046d8:	47a5                	li	a5,9
204046da:	00f71463          	bne	a4,a5,204046e2 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
204046de:	47c1                	li	a5,16
204046e0:	a045                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
204046e2:	fec42703          	lw	a4,-20(s0)
204046e6:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204046ea:	00f71963          	bne	a4,a5,204046fc <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
204046ee:	fe842703          	lw	a4,-24(s0)
204046f2:	47a9                	li	a5,10
204046f4:	00f71463          	bne	a4,a5,204046fc <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
204046f8:	47c5                	li	a5,17
204046fa:	a059                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
204046fc:	fec42703          	lw	a4,-20(s0)
20404700:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404704:	00f71963          	bne	a4,a5,20404716 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
20404708:	fe842703          	lw	a4,-24(s0)
2040470c:	47ad                	li	a5,11
2040470e:	00f71463          	bne	a4,a5,20404716 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
20404712:	47c9                	li	a5,18
20404714:	a0b5                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404716:	fec42703          	lw	a4,-20(s0)
2040471a:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040471e:	00f71963          	bne	a4,a5,20404730 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
20404722:	fe842703          	lw	a4,-24(s0)
20404726:	47b1                	li	a5,12
20404728:	00f71463          	bne	a4,a5,20404730 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
2040472c:	47cd                	li	a5,19
2040472e:	a889                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
20404730:	fec42703          	lw	a4,-20(s0)
20404734:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404738:	00f71963          	bne	a4,a5,2040474a <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
2040473c:	fe842703          	lw	a4,-24(s0)
20404740:	47b5                	li	a5,13
20404742:	00f71463          	bne	a4,a5,2040474a <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
20404746:	47d1                	li	a5,20
20404748:	a825                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
2040474a:	fec42703          	lw	a4,-20(s0)
2040474e:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404752:	00f71963          	bne	a4,a5,20404764 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
20404756:	fe842703          	lw	a4,-24(s0)
2040475a:	47b9                	li	a5,14
2040475c:	00f71463          	bne	a4,a5,20404764 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
20404760:	47d5                	li	a5,21
20404762:	a839                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404764:	fec42703          	lw	a4,-20(s0)
20404768:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040476c:	00f71963          	bne	a4,a5,2040477e <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
20404770:	fe842703          	lw	a4,-24(s0)
20404774:	47bd                	li	a5,15
20404776:	00f71463          	bne	a4,a5,2040477e <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
2040477a:	47d9                	li	a5,22
2040477c:	a011                	j	20404780 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
2040477e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
20404780:	853e                	mv	a0,a5
20404782:	4472                	lw	s0,28(sp)
20404784:	6105                	addi	sp,sp,32
20404786:	8082                	ret

20404788 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404788:	7179                	addi	sp,sp,-48
2040478a:	d606                	sw	ra,44(sp)
2040478c:	d422                	sw	s0,40(sp)
2040478e:	1800                	addi	s0,sp,48
20404790:	fca42e23          	sw	a0,-36(s0)
20404794:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404798:	fdc42503          	lw	a0,-36(s0)
2040479c:	de9ff0ef          	jal	ra,20404584 <__metal_driver_sifive_gpio0_base>
204047a0:	87aa                	mv	a5,a0
204047a2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
204047a6:	fec42783          	lw	a5,-20(s0)
204047aa:	0791                	addi	a5,a5,4
204047ac:	4398                	lw	a4,0(a5)
204047ae:	fd842783          	lw	a5,-40(s0)
204047b2:	fec42683          	lw	a3,-20(s0)
204047b6:	0691                	addi	a3,a3,4
204047b8:	8fd9                	or	a5,a5,a4
204047ba:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
204047bc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
204047be:	853e                	mv	a0,a5
204047c0:	50b2                	lw	ra,44(sp)
204047c2:	5422                	lw	s0,40(sp)
204047c4:	6145                	addi	sp,sp,48
204047c6:	8082                	ret

204047c8 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
204047c8:	7179                	addi	sp,sp,-48
204047ca:	d606                	sw	ra,44(sp)
204047cc:	d422                	sw	s0,40(sp)
204047ce:	1800                	addi	s0,sp,48
204047d0:	fca42e23          	sw	a0,-36(s0)
204047d4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204047d8:	fdc42503          	lw	a0,-36(s0)
204047dc:	da9ff0ef          	jal	ra,20404584 <__metal_driver_sifive_gpio0_base>
204047e0:	87aa                	mv	a5,a0
204047e2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
204047e6:	fec42783          	lw	a5,-20(s0)
204047ea:	0791                	addi	a5,a5,4
204047ec:	439c                	lw	a5,0(a5)
204047ee:	fd842703          	lw	a4,-40(s0)
204047f2:	fff74713          	not	a4,a4
204047f6:	86ba                	mv	a3,a4
204047f8:	fec42703          	lw	a4,-20(s0)
204047fc:	0711                	addi	a4,a4,4
204047fe:	8ff5                	and	a5,a5,a3
20404800:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
20404802:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
20404804:	853e                	mv	a0,a5
20404806:	50b2                	lw	ra,44(sp)
20404808:	5422                	lw	s0,40(sp)
2040480a:	6145                	addi	sp,sp,48
2040480c:	8082                	ret

2040480e <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
2040480e:	7179                	addi	sp,sp,-48
20404810:	d606                	sw	ra,44(sp)
20404812:	d422                	sw	s0,40(sp)
20404814:	1800                	addi	s0,sp,48
20404816:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040481a:	fdc42503          	lw	a0,-36(s0)
2040481e:	d67ff0ef          	jal	ra,20404584 <__metal_driver_sifive_gpio0_base>
20404822:	87aa                	mv	a5,a0
20404824:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20404828:	fec42783          	lw	a5,-20(s0)
2040482c:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
2040482e:	853e                	mv	a0,a5
20404830:	50b2                	lw	ra,44(sp)
20404832:	5422                	lw	s0,40(sp)
20404834:	6145                	addi	sp,sp,48
20404836:	8082                	ret

20404838 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20404838:	7179                	addi	sp,sp,-48
2040483a:	d606                	sw	ra,44(sp)
2040483c:	d422                	sw	s0,40(sp)
2040483e:	1800                	addi	s0,sp,48
20404840:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404844:	fdc42503          	lw	a0,-36(s0)
20404848:	d3dff0ef          	jal	ra,20404584 <__metal_driver_sifive_gpio0_base>
2040484c:	87aa                	mv	a5,a0
2040484e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
20404852:	fec42783          	lw	a5,-20(s0)
20404856:	07b1                	addi	a5,a5,12
20404858:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
2040485a:	853e                	mv	a0,a5
2040485c:	50b2                	lw	ra,44(sp)
2040485e:	5422                	lw	s0,40(sp)
20404860:	6145                	addi	sp,sp,48
20404862:	8082                	ret

20404864 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
20404864:	7179                	addi	sp,sp,-48
20404866:	d606                	sw	ra,44(sp)
20404868:	d422                	sw	s0,40(sp)
2040486a:	1800                	addi	s0,sp,48
2040486c:	fca42e23          	sw	a0,-36(s0)
20404870:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404874:	fdc42503          	lw	a0,-36(s0)
20404878:	d0dff0ef          	jal	ra,20404584 <__metal_driver_sifive_gpio0_base>
2040487c:	87aa                	mv	a5,a0
2040487e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20404882:	fec42783          	lw	a5,-20(s0)
20404886:	07a1                	addi	a5,a5,8
20404888:	439c                	lw	a5,0(a5)
2040488a:	fd842703          	lw	a4,-40(s0)
2040488e:	fff74713          	not	a4,a4
20404892:	86ba                	mv	a3,a4
20404894:	fec42703          	lw	a4,-20(s0)
20404898:	0721                	addi	a4,a4,8
2040489a:	8ff5                	and	a5,a5,a3
2040489c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
2040489e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
204048a0:	853e                	mv	a0,a5
204048a2:	50b2                	lw	ra,44(sp)
204048a4:	5422                	lw	s0,40(sp)
204048a6:	6145                	addi	sp,sp,48
204048a8:	8082                	ret

204048aa <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
204048aa:	7179                	addi	sp,sp,-48
204048ac:	d606                	sw	ra,44(sp)
204048ae:	d422                	sw	s0,40(sp)
204048b0:	1800                	addi	s0,sp,48
204048b2:	fca42e23          	sw	a0,-36(s0)
204048b6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204048ba:	fdc42503          	lw	a0,-36(s0)
204048be:	cc7ff0ef          	jal	ra,20404584 <__metal_driver_sifive_gpio0_base>
204048c2:	87aa                	mv	a5,a0
204048c4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
204048c8:	fec42783          	lw	a5,-20(s0)
204048cc:	07a1                	addi	a5,a5,8
204048ce:	4398                	lw	a4,0(a5)
204048d0:	fd842783          	lw	a5,-40(s0)
204048d4:	fec42683          	lw	a3,-20(s0)
204048d8:	06a1                	addi	a3,a3,8
204048da:	8fd9                	or	a5,a5,a4
204048dc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
204048de:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
204048e0:	853e                	mv	a0,a5
204048e2:	50b2                	lw	ra,44(sp)
204048e4:	5422                	lw	s0,40(sp)
204048e6:	6145                	addi	sp,sp,48
204048e8:	8082                	ret

204048ea <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
204048ea:	7179                	addi	sp,sp,-48
204048ec:	d606                	sw	ra,44(sp)
204048ee:	d422                	sw	s0,40(sp)
204048f0:	1800                	addi	s0,sp,48
204048f2:	fca42e23          	sw	a0,-36(s0)
204048f6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204048fa:	fdc42503          	lw	a0,-36(s0)
204048fe:	c87ff0ef          	jal	ra,20404584 <__metal_driver_sifive_gpio0_base>
20404902:	87aa                	mv	a5,a0
20404904:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20404908:	fec42783          	lw	a5,-20(s0)
2040490c:	07b1                	addi	a5,a5,12
2040490e:	4398                	lw	a4,0(a5)
20404910:	fd842783          	lw	a5,-40(s0)
20404914:	fec42683          	lw	a3,-20(s0)
20404918:	06b1                	addi	a3,a3,12
2040491a:	8fd9                	or	a5,a5,a4
2040491c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
2040491e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404920:	853e                	mv	a0,a5
20404922:	50b2                	lw	ra,44(sp)
20404924:	5422                	lw	s0,40(sp)
20404926:	6145                	addi	sp,sp,48
20404928:	8082                	ret

2040492a <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
2040492a:	7179                	addi	sp,sp,-48
2040492c:	d606                	sw	ra,44(sp)
2040492e:	d422                	sw	s0,40(sp)
20404930:	1800                	addi	s0,sp,48
20404932:	fca42e23          	sw	a0,-36(s0)
20404936:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040493a:	fdc42503          	lw	a0,-36(s0)
2040493e:	c47ff0ef          	jal	ra,20404584 <__metal_driver_sifive_gpio0_base>
20404942:	87aa                	mv	a5,a0
20404944:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
20404948:	fec42783          	lw	a5,-20(s0)
2040494c:	07b1                	addi	a5,a5,12
2040494e:	439c                	lw	a5,0(a5)
20404950:	fd842703          	lw	a4,-40(s0)
20404954:	fff74713          	not	a4,a4
20404958:	86ba                	mv	a3,a4
2040495a:	fec42703          	lw	a4,-20(s0)
2040495e:	0731                	addi	a4,a4,12
20404960:	8ff5                	and	a5,a5,a3
20404962:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
20404964:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
20404966:	853e                	mv	a0,a5
20404968:	50b2                	lw	ra,44(sp)
2040496a:	5422                	lw	s0,40(sp)
2040496c:	6145                	addi	sp,sp,48
2040496e:	8082                	ret

20404970 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20404970:	7179                	addi	sp,sp,-48
20404972:	d606                	sw	ra,44(sp)
20404974:	d422                	sw	s0,40(sp)
20404976:	1800                	addi	s0,sp,48
20404978:	fca42e23          	sw	a0,-36(s0)
2040497c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404980:	fdc42503          	lw	a0,-36(s0)
20404984:	c01ff0ef          	jal	ra,20404584 <__metal_driver_sifive_gpio0_base>
20404988:	87aa                	mv	a5,a0
2040498a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
2040498e:	fec42783          	lw	a5,-20(s0)
20404992:	07b1                	addi	a5,a5,12
20404994:	4398                	lw	a4,0(a5)
20404996:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
2040499a:	fec42683          	lw	a3,-20(s0)
2040499e:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
204049a0:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
204049a2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
204049a4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
204049a6:	853e                	mv	a0,a5
204049a8:	50b2                	lw	ra,44(sp)
204049aa:	5422                	lw	s0,40(sp)
204049ac:	6145                	addi	sp,sp,48
204049ae:	8082                	ret

204049b0 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
204049b0:	7179                	addi	sp,sp,-48
204049b2:	d606                	sw	ra,44(sp)
204049b4:	d422                	sw	s0,40(sp)
204049b6:	1800                	addi	s0,sp,48
204049b8:	fca42e23          	sw	a0,-36(s0)
204049bc:	fcb42c23          	sw	a1,-40(s0)
204049c0:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204049c4:	fdc42503          	lw	a0,-36(s0)
204049c8:	bbdff0ef          	jal	ra,20404584 <__metal_driver_sifive_gpio0_base>
204049cc:	87aa                	mv	a5,a0
204049ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
204049d2:	fec42783          	lw	a5,-20(s0)
204049d6:	03c78793          	addi	a5,a5,60
204049da:	439c                	lw	a5,0(a5)
204049dc:	fd842703          	lw	a4,-40(s0)
204049e0:	fff74713          	not	a4,a4
204049e4:	86ba                	mv	a3,a4
204049e6:	fec42703          	lw	a4,-20(s0)
204049ea:	03c70713          	addi	a4,a4,60
204049ee:	8ff5                	and	a5,a5,a3
204049f0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
204049f2:	fec42783          	lw	a5,-20(s0)
204049f6:	03878793          	addi	a5,a5,56
204049fa:	4398                	lw	a4,0(a5)
204049fc:	fd442783          	lw	a5,-44(s0)
20404a00:	fec42683          	lw	a3,-20(s0)
20404a04:	03868693          	addi	a3,a3,56
20404a08:	8fd9                	or	a5,a5,a4
20404a0a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20404a0c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20404a0e:	853e                	mv	a0,a5
20404a10:	50b2                	lw	ra,44(sp)
20404a12:	5422                	lw	s0,40(sp)
20404a14:	6145                	addi	sp,sp,48
20404a16:	8082                	ret

20404a18 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20404a18:	7179                	addi	sp,sp,-48
20404a1a:	d606                	sw	ra,44(sp)
20404a1c:	d422                	sw	s0,40(sp)
20404a1e:	1800                	addi	s0,sp,48
20404a20:	fca42e23          	sw	a0,-36(s0)
20404a24:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a28:	fdc42503          	lw	a0,-36(s0)
20404a2c:	b59ff0ef          	jal	ra,20404584 <__metal_driver_sifive_gpio0_base>
20404a30:	87aa                	mv	a5,a0
20404a32:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
20404a36:	fec42783          	lw	a5,-20(s0)
20404a3a:	03878793          	addi	a5,a5,56
20404a3e:	439c                	lw	a5,0(a5)
20404a40:	fd842703          	lw	a4,-40(s0)
20404a44:	fff74713          	not	a4,a4
20404a48:	86ba                	mv	a3,a4
20404a4a:	fec42703          	lw	a4,-20(s0)
20404a4e:	03870713          	addi	a4,a4,56
20404a52:	8ff5                	and	a5,a5,a3
20404a54:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
20404a56:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20404a58:	853e                	mv	a0,a5
20404a5a:	50b2                	lw	ra,44(sp)
20404a5c:	5422                	lw	s0,40(sp)
20404a5e:	6145                	addi	sp,sp,48
20404a60:	8082                	ret

20404a62 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404a62:	7179                	addi	sp,sp,-48
20404a64:	d606                	sw	ra,44(sp)
20404a66:	d422                	sw	s0,40(sp)
20404a68:	1800                	addi	s0,sp,48
20404a6a:	fca42e23          	sw	a0,-36(s0)
20404a6e:	fcb42c23          	sw	a1,-40(s0)
20404a72:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a76:	fdc42503          	lw	a0,-36(s0)
20404a7a:	b0bff0ef          	jal	ra,20404584 <__metal_driver_sifive_gpio0_base>
20404a7e:	87aa                	mv	a5,a0
20404a80:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20404a84:	fd442703          	lw	a4,-44(s0)
20404a88:	479d                	li	a5,7
20404a8a:	1ce7e963          	bltu	a5,a4,20404c5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404a8e:	fd442783          	lw	a5,-44(s0)
20404a92:	00279713          	slli	a4,a5,0x2
20404a96:	204067b7          	lui	a5,0x20406
20404a9a:	a2c78793          	addi	a5,a5,-1492 # 20405a2c <__metal_driver_vtable_riscv_plic0+0x4c>
20404a9e:	97ba                	add	a5,a5,a4
20404aa0:	439c                	lw	a5,0(a5)
20404aa2:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20404aa4:	fec42783          	lw	a5,-20(s0)
20404aa8:	07e1                	addi	a5,a5,24
20404aaa:	439c                	lw	a5,0(a5)
20404aac:	fd842703          	lw	a4,-40(s0)
20404ab0:	fff74713          	not	a4,a4
20404ab4:	86ba                	mv	a3,a4
20404ab6:	fec42703          	lw	a4,-20(s0)
20404aba:	0761                	addi	a4,a4,24
20404abc:	8ff5                	and	a5,a5,a3
20404abe:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20404ac0:	fec42783          	lw	a5,-20(s0)
20404ac4:	02078793          	addi	a5,a5,32
20404ac8:	439c                	lw	a5,0(a5)
20404aca:	fd842703          	lw	a4,-40(s0)
20404ace:	fff74713          	not	a4,a4
20404ad2:	86ba                	mv	a3,a4
20404ad4:	fec42703          	lw	a4,-20(s0)
20404ad8:	02070713          	addi	a4,a4,32
20404adc:	8ff5                	and	a5,a5,a3
20404ade:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20404ae0:	fec42783          	lw	a5,-20(s0)
20404ae4:	02878793          	addi	a5,a5,40
20404ae8:	439c                	lw	a5,0(a5)
20404aea:	fd842703          	lw	a4,-40(s0)
20404aee:	fff74713          	not	a4,a4
20404af2:	86ba                	mv	a3,a4
20404af4:	fec42703          	lw	a4,-20(s0)
20404af8:	02870713          	addi	a4,a4,40
20404afc:	8ff5                	and	a5,a5,a3
20404afe:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20404b00:	fec42783          	lw	a5,-20(s0)
20404b04:	03078793          	addi	a5,a5,48
20404b08:	439c                	lw	a5,0(a5)
20404b0a:	fd842703          	lw	a4,-40(s0)
20404b0e:	fff74713          	not	a4,a4
20404b12:	86ba                	mv	a3,a4
20404b14:	fec42703          	lw	a4,-20(s0)
20404b18:	03070713          	addi	a4,a4,48
20404b1c:	8ff5                	and	a5,a5,a3
20404b1e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404b20:	aa35                	j	20404c5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404b22:	fec42783          	lw	a5,-20(s0)
20404b26:	07e1                	addi	a5,a5,24
20404b28:	4398                	lw	a4,0(a5)
20404b2a:	fd842783          	lw	a5,-40(s0)
20404b2e:	fec42683          	lw	a3,-20(s0)
20404b32:	06e1                	addi	a3,a3,24
20404b34:	8fd9                	or	a5,a5,a4
20404b36:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20404b38:	a215                	j	20404c5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404b3a:	fec42783          	lw	a5,-20(s0)
20404b3e:	02078793          	addi	a5,a5,32
20404b42:	4398                	lw	a4,0(a5)
20404b44:	fd842783          	lw	a5,-40(s0)
20404b48:	fec42683          	lw	a3,-20(s0)
20404b4c:	02068693          	addi	a3,a3,32
20404b50:	8fd9                	or	a5,a5,a4
20404b52:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20404b54:	a221                	j	20404c5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404b56:	fec42783          	lw	a5,-20(s0)
20404b5a:	07e1                	addi	a5,a5,24
20404b5c:	4398                	lw	a4,0(a5)
20404b5e:	fd842783          	lw	a5,-40(s0)
20404b62:	fec42683          	lw	a3,-20(s0)
20404b66:	06e1                	addi	a3,a3,24
20404b68:	8fd9                	or	a5,a5,a4
20404b6a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404b6c:	fec42783          	lw	a5,-20(s0)
20404b70:	02078793          	addi	a5,a5,32
20404b74:	4398                	lw	a4,0(a5)
20404b76:	fd842783          	lw	a5,-40(s0)
20404b7a:	fec42683          	lw	a3,-20(s0)
20404b7e:	02068693          	addi	a3,a3,32
20404b82:	8fd9                	or	a5,a5,a4
20404b84:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20404b86:	a8d9                	j	20404c5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404b88:	fec42783          	lw	a5,-20(s0)
20404b8c:	02878793          	addi	a5,a5,40
20404b90:	4398                	lw	a4,0(a5)
20404b92:	fd842783          	lw	a5,-40(s0)
20404b96:	fec42683          	lw	a3,-20(s0)
20404b9a:	02868693          	addi	a3,a3,40
20404b9e:	8fd9                	or	a5,a5,a4
20404ba0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20404ba2:	a86d                	j	20404c5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404ba4:	fec42783          	lw	a5,-20(s0)
20404ba8:	03078793          	addi	a5,a5,48
20404bac:	4398                	lw	a4,0(a5)
20404bae:	fd842783          	lw	a5,-40(s0)
20404bb2:	fec42683          	lw	a3,-20(s0)
20404bb6:	03068693          	addi	a3,a3,48
20404bba:	8fd9                	or	a5,a5,a4
20404bbc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20404bbe:	a879                	j	20404c5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404bc0:	fec42783          	lw	a5,-20(s0)
20404bc4:	02878793          	addi	a5,a5,40
20404bc8:	4398                	lw	a4,0(a5)
20404bca:	fd842783          	lw	a5,-40(s0)
20404bce:	fec42683          	lw	a3,-20(s0)
20404bd2:	02868693          	addi	a3,a3,40
20404bd6:	8fd9                	or	a5,a5,a4
20404bd8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404bda:	fec42783          	lw	a5,-20(s0)
20404bde:	03078793          	addi	a5,a5,48
20404be2:	4398                	lw	a4,0(a5)
20404be4:	fd842783          	lw	a5,-40(s0)
20404be8:	fec42683          	lw	a3,-20(s0)
20404bec:	03068693          	addi	a3,a3,48
20404bf0:	8fd9                	or	a5,a5,a4
20404bf2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20404bf4:	a0a5                	j	20404c5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404bf6:	fec42783          	lw	a5,-20(s0)
20404bfa:	07e1                	addi	a5,a5,24
20404bfc:	4398                	lw	a4,0(a5)
20404bfe:	fd842783          	lw	a5,-40(s0)
20404c02:	fec42683          	lw	a3,-20(s0)
20404c06:	06e1                	addi	a3,a3,24
20404c08:	8fd9                	or	a5,a5,a4
20404c0a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404c0c:	fec42783          	lw	a5,-20(s0)
20404c10:	02078793          	addi	a5,a5,32
20404c14:	4398                	lw	a4,0(a5)
20404c16:	fd842783          	lw	a5,-40(s0)
20404c1a:	fec42683          	lw	a3,-20(s0)
20404c1e:	02068693          	addi	a3,a3,32
20404c22:	8fd9                	or	a5,a5,a4
20404c24:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404c26:	fec42783          	lw	a5,-20(s0)
20404c2a:	02878793          	addi	a5,a5,40
20404c2e:	4398                	lw	a4,0(a5)
20404c30:	fd842783          	lw	a5,-40(s0)
20404c34:	fec42683          	lw	a3,-20(s0)
20404c38:	02868693          	addi	a3,a3,40
20404c3c:	8fd9                	or	a5,a5,a4
20404c3e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404c40:	fec42783          	lw	a5,-20(s0)
20404c44:	03078793          	addi	a5,a5,48
20404c48:	4398                	lw	a4,0(a5)
20404c4a:	fd842783          	lw	a5,-40(s0)
20404c4e:	fec42683          	lw	a3,-20(s0)
20404c52:	03068693          	addi	a3,a3,48
20404c56:	8fd9                	or	a5,a5,a4
20404c58:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20404c5a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20404c5c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20404c5e:	853e                	mv	a0,a5
20404c60:	50b2                	lw	ra,44(sp)
20404c62:	5422                	lw	s0,40(sp)
20404c64:	6145                	addi	sp,sp,48
20404c66:	8082                	ret

20404c68 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404c68:	7179                	addi	sp,sp,-48
20404c6a:	d606                	sw	ra,44(sp)
20404c6c:	d422                	sw	s0,40(sp)
20404c6e:	1800                	addi	s0,sp,48
20404c70:	fca42e23          	sw	a0,-36(s0)
20404c74:	fcb42c23          	sw	a1,-40(s0)
20404c78:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404c7c:	fdc42503          	lw	a0,-36(s0)
20404c80:	905ff0ef          	jal	ra,20404584 <__metal_driver_sifive_gpio0_base>
20404c84:	87aa                	mv	a5,a0
20404c86:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20404c8a:	fd442703          	lw	a4,-44(s0)
20404c8e:	479d                	li	a5,7
20404c90:	14e7ea63          	bltu	a5,a4,20404de4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
20404c94:	fd442783          	lw	a5,-44(s0)
20404c98:	00279713          	slli	a4,a5,0x2
20404c9c:	204067b7          	lui	a5,0x20406
20404ca0:	a4c78793          	addi	a5,a5,-1460 # 20405a4c <__metal_driver_vtable_riscv_plic0+0x6c>
20404ca4:	97ba                	add	a5,a5,a4
20404ca6:	439c                	lw	a5,0(a5)
20404ca8:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404caa:	fec42783          	lw	a5,-20(s0)
20404cae:	07f1                	addi	a5,a5,28
20404cb0:	4398                	lw	a4,0(a5)
20404cb2:	fd842783          	lw	a5,-40(s0)
20404cb6:	fec42683          	lw	a3,-20(s0)
20404cba:	06f1                	addi	a3,a3,28
20404cbc:	8fd9                	or	a5,a5,a4
20404cbe:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20404cc0:	a215                	j	20404de4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404cc2:	fec42783          	lw	a5,-20(s0)
20404cc6:	02478793          	addi	a5,a5,36
20404cca:	4398                	lw	a4,0(a5)
20404ccc:	fd842783          	lw	a5,-40(s0)
20404cd0:	fec42683          	lw	a3,-20(s0)
20404cd4:	02468693          	addi	a3,a3,36
20404cd8:	8fd9                	or	a5,a5,a4
20404cda:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20404cdc:	a221                	j	20404de4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404cde:	fec42783          	lw	a5,-20(s0)
20404ce2:	07f1                	addi	a5,a5,28
20404ce4:	4398                	lw	a4,0(a5)
20404ce6:	fd842783          	lw	a5,-40(s0)
20404cea:	fec42683          	lw	a3,-20(s0)
20404cee:	06f1                	addi	a3,a3,28
20404cf0:	8fd9                	or	a5,a5,a4
20404cf2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404cf4:	fec42783          	lw	a5,-20(s0)
20404cf8:	02478793          	addi	a5,a5,36
20404cfc:	4398                	lw	a4,0(a5)
20404cfe:	fd842783          	lw	a5,-40(s0)
20404d02:	fec42683          	lw	a3,-20(s0)
20404d06:	02468693          	addi	a3,a3,36
20404d0a:	8fd9                	or	a5,a5,a4
20404d0c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20404d0e:	a8d9                	j	20404de4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404d10:	fec42783          	lw	a5,-20(s0)
20404d14:	02c78793          	addi	a5,a5,44
20404d18:	4398                	lw	a4,0(a5)
20404d1a:	fd842783          	lw	a5,-40(s0)
20404d1e:	fec42683          	lw	a3,-20(s0)
20404d22:	02c68693          	addi	a3,a3,44
20404d26:	8fd9                	or	a5,a5,a4
20404d28:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20404d2a:	a86d                	j	20404de4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404d2c:	fec42783          	lw	a5,-20(s0)
20404d30:	03478793          	addi	a5,a5,52
20404d34:	4398                	lw	a4,0(a5)
20404d36:	fd842783          	lw	a5,-40(s0)
20404d3a:	fec42683          	lw	a3,-20(s0)
20404d3e:	03468693          	addi	a3,a3,52
20404d42:	8fd9                	or	a5,a5,a4
20404d44:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20404d46:	a879                	j	20404de4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404d48:	fec42783          	lw	a5,-20(s0)
20404d4c:	02c78793          	addi	a5,a5,44
20404d50:	4398                	lw	a4,0(a5)
20404d52:	fd842783          	lw	a5,-40(s0)
20404d56:	fec42683          	lw	a3,-20(s0)
20404d5a:	02c68693          	addi	a3,a3,44
20404d5e:	8fd9                	or	a5,a5,a4
20404d60:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404d62:	fec42783          	lw	a5,-20(s0)
20404d66:	03478793          	addi	a5,a5,52
20404d6a:	4398                	lw	a4,0(a5)
20404d6c:	fd842783          	lw	a5,-40(s0)
20404d70:	fec42683          	lw	a3,-20(s0)
20404d74:	03468693          	addi	a3,a3,52
20404d78:	8fd9                	or	a5,a5,a4
20404d7a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20404d7c:	a0a5                	j	20404de4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404d7e:	fec42783          	lw	a5,-20(s0)
20404d82:	07f1                	addi	a5,a5,28
20404d84:	4398                	lw	a4,0(a5)
20404d86:	fd842783          	lw	a5,-40(s0)
20404d8a:	fec42683          	lw	a3,-20(s0)
20404d8e:	06f1                	addi	a3,a3,28
20404d90:	8fd9                	or	a5,a5,a4
20404d92:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404d94:	fec42783          	lw	a5,-20(s0)
20404d98:	02478793          	addi	a5,a5,36
20404d9c:	4398                	lw	a4,0(a5)
20404d9e:	fd842783          	lw	a5,-40(s0)
20404da2:	fec42683          	lw	a3,-20(s0)
20404da6:	02468693          	addi	a3,a3,36
20404daa:	8fd9                	or	a5,a5,a4
20404dac:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404dae:	fec42783          	lw	a5,-20(s0)
20404db2:	02c78793          	addi	a5,a5,44
20404db6:	4398                	lw	a4,0(a5)
20404db8:	fd842783          	lw	a5,-40(s0)
20404dbc:	fec42683          	lw	a3,-20(s0)
20404dc0:	02c68693          	addi	a3,a3,44
20404dc4:	8fd9                	or	a5,a5,a4
20404dc6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404dc8:	fec42783          	lw	a5,-20(s0)
20404dcc:	03478793          	addi	a5,a5,52
20404dd0:	4398                	lw	a4,0(a5)
20404dd2:	fd842783          	lw	a5,-40(s0)
20404dd6:	fec42683          	lw	a3,-20(s0)
20404dda:	03468693          	addi	a3,a3,52
20404dde:	8fd9                	or	a5,a5,a4
20404de0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20404de2:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20404de4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20404de6:	853e                	mv	a0,a5
20404de8:	50b2                	lw	ra,44(sp)
20404dea:	5422                	lw	s0,40(sp)
20404dec:	6145                	addi	sp,sp,48
20404dee:	8082                	ret

20404df0 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20404df0:	1101                	addi	sp,sp,-32
20404df2:	ce06                	sw	ra,28(sp)
20404df4:	cc22                	sw	s0,24(sp)
20404df6:	1000                	addi	s0,sp,32
20404df8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20404dfc:	fec42503          	lw	a0,-20(s0)
20404e00:	faaff0ef          	jal	ra,204045aa <__metal_driver_sifive_gpio0_interrupt_parent>
20404e04:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20404e06:	853e                	mv	a0,a5
20404e08:	40f2                	lw	ra,28(sp)
20404e0a:	4462                	lw	s0,24(sp)
20404e0c:	6105                	addi	sp,sp,32
20404e0e:	8082                	ret

20404e10 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20404e10:	7179                	addi	sp,sp,-48
20404e12:	d606                	sw	ra,44(sp)
20404e14:	d422                	sw	s0,40(sp)
20404e16:	1800                	addi	s0,sp,48
20404e18:	fca42e23          	sw	a0,-36(s0)
20404e1c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404e20:	fd842583          	lw	a1,-40(s0)
20404e24:	fdc42503          	lw	a0,-36(s0)
20404e28:	facff0ef          	jal	ra,204045d4 <__metal_driver_sifive_gpio0_interrupt_lines>
20404e2c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404e30:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20404e34:	853e                	mv	a0,a5
20404e36:	50b2                	lw	ra,44(sp)
20404e38:	5422                	lw	s0,40(sp)
20404e3a:	6145                	addi	sp,sp,48
20404e3c:	8082                	ret

20404e3e <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
20404e3e:	1101                	addi	sp,sp,-32
20404e40:	ce22                	sw	s0,28(sp)
20404e42:	1000                	addi	s0,sp,32
20404e44:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404e48:	fec42703          	lw	a4,-20(s0)
20404e4c:	800017b7          	lui	a5,0x80001
20404e50:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20404e54:	00f71563          	bne	a4,a5,20404e5e <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20404e58:	100137b7          	lui	a5,0x10013
20404e5c:	a011                	j	20404e60 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
20404e5e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
20404e60:	853e                	mv	a0,a5
20404e62:	4472                	lw	s0,28(sp)
20404e64:	6105                	addi	sp,sp,32
20404e66:	8082                	ret

20404e68 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20404e68:	1101                	addi	sp,sp,-32
20404e6a:	ce22                	sw	s0,28(sp)
20404e6c:	1000                	addi	s0,sp,32
20404e6e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404e72:	fec42703          	lw	a4,-20(s0)
20404e76:	800017b7          	lui	a5,0x80001
20404e7a:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20404e7e:	00f71763          	bne	a4,a5,20404e8c <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404e82:	800017b7          	lui	a5,0x80001
20404e86:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe058>
20404e8a:	a011                	j	20404e8e <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20404e8c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
20404e8e:	853e                	mv	a0,a5
20404e90:	4472                	lw	s0,28(sp)
20404e92:	6105                	addi	sp,sp,32
20404e94:	8082                	ret

20404e96 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20404e96:	1101                	addi	sp,sp,-32
20404e98:	ce22                	sw	s0,28(sp)
20404e9a:	1000                	addi	s0,sp,32
20404e9c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404ea0:	fec42703          	lw	a4,-20(s0)
20404ea4:	800017b7          	lui	a5,0x80001
20404ea8:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20404eac:	00f71463          	bne	a4,a5,20404eb4 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
20404eb0:	4795                	li	a5,5
20404eb2:	a011                	j	20404eb6 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20404eb4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
20404eb6:	853e                	mv	a0,a5
20404eb8:	4472                	lw	s0,28(sp)
20404eba:	6105                	addi	sp,sp,32
20404ebc:	8082                	ret

20404ebe <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
20404ebe:	1101                	addi	sp,sp,-32
20404ec0:	ce22                	sw	s0,28(sp)
20404ec2:	1000                	addi	s0,sp,32
20404ec4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404ec8:	fec42703          	lw	a4,-20(s0)
20404ecc:	800017b7          	lui	a5,0x80001
20404ed0:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20404ed4:	00f71763          	bne	a4,a5,20404ee2 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20404ed8:	800017b7          	lui	a5,0x80001
20404edc:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffdc90>
20404ee0:	a011                	j	20404ee4 <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
20404ee2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
20404ee4:	853e                	mv	a0,a5
20404ee6:	4472                	lw	s0,28(sp)
20404ee8:	6105                	addi	sp,sp,32
20404eea:	8082                	ret

20404eec <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20404eec:	1101                	addi	sp,sp,-32
20404eee:	ce22                	sw	s0,28(sp)
20404ef0:	1000                	addi	s0,sp,32
20404ef2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404ef6:	fec42703          	lw	a4,-20(s0)
20404efa:	800017b7          	lui	a5,0x80001
20404efe:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20404f02:	00f71563          	bne	a4,a5,20404f0c <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20404f06:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f0a:	a011                	j	20404f0e <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20404f0c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
20404f0e:	853e                	mv	a0,a5
20404f10:	4472                	lw	s0,28(sp)
20404f12:	6105                	addi	sp,sp,32
20404f14:	8082                	ret

20404f16 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20404f16:	1101                	addi	sp,sp,-32
20404f18:	ce22                	sw	s0,28(sp)
20404f1a:	1000                	addi	s0,sp,32
20404f1c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404f20:	fec42703          	lw	a4,-20(s0)
20404f24:	800017b7          	lui	a5,0x80001
20404f28:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20404f2c:	00f71563          	bne	a4,a5,20404f36 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
20404f30:	000307b7          	lui	a5,0x30
20404f34:	a011                	j	20404f38 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20404f36:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
20404f38:	853e                	mv	a0,a5
20404f3a:	4472                	lw	s0,28(sp)
20404f3c:	6105                	addi	sp,sp,32
20404f3e:	8082                	ret

20404f40 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20404f40:	1101                	addi	sp,sp,-32
20404f42:	ce22                	sw	s0,28(sp)
20404f44:	1000                	addi	s0,sp,32
20404f46:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404f4a:	fec42703          	lw	a4,-20(s0)
20404f4e:	800017b7          	lui	a5,0x80001
20404f52:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe358>
20404f56:	00f71563          	bne	a4,a5,20404f60 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
20404f5a:	000307b7          	lui	a5,0x30
20404f5e:	a011                	j	20404f62 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20404f60:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
20404f62:	853e                	mv	a0,a5
20404f64:	4472                	lw	s0,28(sp)
20404f66:	6105                	addi	sp,sp,32
20404f68:	8082                	ret

20404f6a <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20404f6a:	1101                	addi	sp,sp,-32
20404f6c:	ce06                	sw	ra,28(sp)
20404f6e:	cc22                	sw	s0,24(sp)
20404f70:	1000                	addi	s0,sp,32
20404f72:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20404f76:	fec42503          	lw	a0,-20(s0)
20404f7a:	35fd                	jal	20404e68 <__metal_driver_sifive_uart0_interrupt_parent>
20404f7c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20404f7e:	853e                	mv	a0,a5
20404f80:	40f2                	lw	ra,28(sp)
20404f82:	4462                	lw	s0,24(sp)
20404f84:	6105                	addi	sp,sp,32
20404f86:	8082                	ret

20404f88 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20404f88:	1101                	addi	sp,sp,-32
20404f8a:	ce06                	sw	ra,28(sp)
20404f8c:	cc22                	sw	s0,24(sp)
20404f8e:	1000                	addi	s0,sp,32
20404f90:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20404f94:	fec42503          	lw	a0,-20(s0)
20404f98:	3dfd                	jal	20404e96 <__metal_driver_sifive_uart0_interrupt_line>
20404f9a:	87aa                	mv	a5,a0
20404f9c:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20404fa0:	853e                	mv	a0,a5
20404fa2:	40f2                	lw	ra,28(sp)
20404fa4:	4462                	lw	s0,24(sp)
20404fa6:	6105                	addi	sp,sp,32
20404fa8:	8082                	ret

20404faa <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20404faa:	7179                	addi	sp,sp,-48
20404fac:	d606                	sw	ra,44(sp)
20404fae:	d422                	sw	s0,40(sp)
20404fb0:	1800                	addi	s0,sp,48
20404fb2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404fb6:	fdc42503          	lw	a0,-36(s0)
20404fba:	3551                	jal	20404e3e <__metal_driver_sifive_uart0_control_base>
20404fbc:	87aa                	mv	a5,a0
20404fbe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20404fc2:	fec42783          	lw	a5,-20(s0)
20404fc6:	439c                	lw	a5,0(a5)
20404fc8:	fff7c793          	not	a5,a5
20404fcc:	83fd                	srli	a5,a5,0x1f
20404fce:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20404fd2:	853e                	mv	a0,a5
20404fd4:	50b2                	lw	ra,44(sp)
20404fd6:	5422                	lw	s0,40(sp)
20404fd8:	6145                	addi	sp,sp,48
20404fda:	8082                	ret

20404fdc <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20404fdc:	7179                	addi	sp,sp,-48
20404fde:	d606                	sw	ra,44(sp)
20404fe0:	d422                	sw	s0,40(sp)
20404fe2:	1800                	addi	s0,sp,48
20404fe4:	fca42e23          	sw	a0,-36(s0)
20404fe8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404fec:	fdc42503          	lw	a0,-36(s0)
20404ff0:	e4fff0ef          	jal	ra,20404e3e <__metal_driver_sifive_uart0_control_base>
20404ff4:	87aa                	mv	a5,a0
20404ff6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20404ffa:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20404ffc:	fdc42503          	lw	a0,-36(s0)
20405000:	376d                	jal	20404faa <__metal_driver_sifive_uart0_txready>
20405002:	87aa                	mv	a5,a0
20405004:	dfe5                	beqz	a5,20404ffc <__metal_driver_sifive_uart0_putc+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20405006:	fec42783          	lw	a5,-20(s0)
2040500a:	fd842703          	lw	a4,-40(s0)
2040500e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20405010:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20405012:	853e                	mv	a0,a5
20405014:	50b2                	lw	ra,44(sp)
20405016:	5422                	lw	s0,40(sp)
20405018:	6145                	addi	sp,sp,48
2040501a:	8082                	ret

2040501c <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
2040501c:	7179                	addi	sp,sp,-48
2040501e:	d606                	sw	ra,44(sp)
20405020:	d422                	sw	s0,40(sp)
20405022:	1800                	addi	s0,sp,48
20405024:	fca42e23          	sw	a0,-36(s0)
20405028:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040502c:	fdc42503          	lw	a0,-36(s0)
20405030:	e0fff0ef          	jal	ra,20404e3e <__metal_driver_sifive_uart0_control_base>
20405034:	87aa                	mv	a5,a0
20405036:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
2040503a:	fec42783          	lw	a5,-20(s0)
2040503e:	0791                	addi	a5,a5,4
20405040:	439c                	lw	a5,0(a5)
20405042:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20405046:	fe842783          	lw	a5,-24(s0)
2040504a:	0007d763          	bgez	a5,20405058 <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
2040504e:	fd842783          	lw	a5,-40(s0)
20405052:	577d                	li	a4,-1
20405054:	c398                	sw	a4,0(a5)
20405056:	a801                	j	20405066 <__metal_driver_sifive_uart0_getc+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20405058:	fe842783          	lw	a5,-24(s0)
2040505c:	0ff7f713          	andi	a4,a5,255
20405060:	fd842783          	lw	a5,-40(s0)
20405064:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20405066:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20405068:	853e                	mv	a0,a5
2040506a:	50b2                	lw	ra,44(sp)
2040506c:	5422                	lw	s0,40(sp)
2040506e:	6145                	addi	sp,sp,48
20405070:	8082                	ret

20405072 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20405072:	7179                	addi	sp,sp,-48
20405074:	d622                	sw	s0,44(sp)
20405076:	1800                	addi	s0,sp,48
20405078:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
2040507c:	fdc42783          	lw	a5,-36(s0)
20405080:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20405084:	fec42783          	lw	a5,-20(s0)
20405088:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
2040508a:	853e                	mv	a0,a5
2040508c:	5432                	lw	s0,44(sp)
2040508e:	6145                	addi	sp,sp,48
20405090:	8082                	ret

20405092 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20405092:	7179                	addi	sp,sp,-48
20405094:	d606                	sw	ra,44(sp)
20405096:	d422                	sw	s0,40(sp)
20405098:	1800                	addi	s0,sp,48
2040509a:	fca42e23          	sw	a0,-36(s0)
2040509e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
204050a2:	fdc42783          	lw	a5,-36(s0)
204050a6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
204050aa:	fdc42503          	lw	a0,-36(s0)
204050ae:	d91ff0ef          	jal	ra,20404e3e <__metal_driver_sifive_uart0_control_base>
204050b2:	87aa                	mv	a5,a0
204050b4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
204050b8:	fdc42503          	lw	a0,-36(s0)
204050bc:	e03ff0ef          	jal	ra,20404ebe <__metal_driver_sifive_uart0_clock>
204050c0:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
204050c4:	fd842703          	lw	a4,-40(s0)
204050c8:	fec42783          	lw	a5,-20(s0)
204050cc:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
204050ce:	fe442783          	lw	a5,-28(s0)
204050d2:	cbb1                	beqz	a5,20405126 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
204050d4:	fe442783          	lw	a5,-28(s0)
204050d8:	439c                	lw	a5,0(a5)
204050da:	439c                	lw	a5,0(a5)
204050dc:	fe442503          	lw	a0,-28(s0)
204050e0:	9782                	jalr	a5
204050e2:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
204050e6:	fe042703          	lw	a4,-32(s0)
204050ea:	fd842783          	lw	a5,-40(s0)
204050ee:	02f747b3          	div	a5,a4,a5
204050f2:	fff78713          	addi	a4,a5,-1
204050f6:	fe842783          	lw	a5,-24(s0)
204050fa:	07e1                	addi	a5,a5,24
204050fc:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
204050fe:	fe842783          	lw	a5,-24(s0)
20405102:	07a1                	addi	a5,a5,8
20405104:	439c                	lw	a5,0(a5)
20405106:	fe842703          	lw	a4,-24(s0)
2040510a:	0721                	addi	a4,a4,8
2040510c:	0017e793          	ori	a5,a5,1
20405110:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20405112:	fe842783          	lw	a5,-24(s0)
20405116:	07b1                	addi	a5,a5,12
20405118:	439c                	lw	a5,0(a5)
2040511a:	fe842703          	lw	a4,-24(s0)
2040511e:	0731                	addi	a4,a4,12
20405120:	0017e793          	ori	a5,a5,1
20405124:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20405126:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20405128:	853e                	mv	a0,a5
2040512a:	50b2                	lw	ra,44(sp)
2040512c:	5422                	lw	s0,40(sp)
2040512e:	6145                	addi	sp,sp,48
20405130:	8082                	ret

20405132 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20405132:	7139                	addi	sp,sp,-64
20405134:	de06                	sw	ra,60(sp)
20405136:	dc22                	sw	s0,56(sp)
20405138:	0080                	addi	s0,sp,64
2040513a:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
2040513e:	fcc42783          	lw	a5,-52(s0)
20405142:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20405146:	fcc42503          	lw	a0,-52(s0)
2040514a:	cf5ff0ef          	jal	ra,20404e3e <__metal_driver_sifive_uart0_control_base>
2040514e:	87aa                	mv	a5,a0
20405150:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20405154:	fcc42503          	lw	a0,-52(s0)
20405158:	d67ff0ef          	jal	ra,20404ebe <__metal_driver_sifive_uart0_clock>
2040515c:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20405160:	fe842783          	lw	a5,-24(s0)
20405164:	07a1                	addi	a5,a5,8
20405166:	4398                	lw	a4,0(a5)
20405168:	fe842783          	lw	a5,-24(s0)
2040516c:	07a1                	addi	a5,a5,8
2040516e:	86be                	mv	a3,a5
20405170:	fff907b7          	lui	a5,0xfff90
20405174:	17fd                	addi	a5,a5,-1
20405176:	8ff9                	and	a5,a5,a4
20405178:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
2040517a:	fe842783          	lw	a5,-24(s0)
2040517e:	07a1                	addi	a5,a5,8
20405180:	4398                	lw	a4,0(a5)
20405182:	fe842783          	lw	a5,-24(s0)
20405186:	07a1                	addi	a5,a5,8
20405188:	86be                	mv	a3,a5
2040518a:	67c1                	lui	a5,0x10
2040518c:	8fd9                	or	a5,a5,a4
2040518e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20405190:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20405192:	fe842783          	lw	a5,-24(s0)
20405196:	07d1                	addi	a5,a5,20
20405198:	439c                	lw	a5,0(a5)
2040519a:	8b85                	andi	a5,a5,1
2040519c:	dbfd                	beqz	a5,20405192 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
2040519e:	fe842783          	lw	a5,-24(s0)
204051a2:	07a1                	addi	a5,a5,8
204051a4:	439c                	lw	a5,0(a5)
204051a6:	8b89                	andi	a5,a5,2
204051a8:	c399                	beqz	a5,204051ae <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
204051aa:	47a5                	li	a5,9
204051ac:	a011                	j	204051b0 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
204051ae:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
204051b0:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
204051b4:	fe442783          	lw	a5,-28(s0)
204051b8:	439c                	lw	a5,0(a5)
204051ba:	439c                	lw	a5,0(a5)
204051bc:	fe442503          	lw	a0,-28(s0)
204051c0:	9782                	jalr	a5
204051c2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
204051c6:	fe042703          	lw	a4,-32(s0)
204051ca:	fdc42783          	lw	a5,-36(s0)
204051ce:	02f707b3          	mul	a5,a4,a5
204051d2:	873e                	mv	a4,a5
204051d4:	fec42783          	lw	a5,-20(s0)
204051d8:	43dc                	lw	a5,4(a5)
204051da:	02f757b3          	divu	a5,a4,a5
204051de:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
204051e2:	fc042a23          	sw	zero,-44(s0)
204051e6:	a039                	j	204051f4 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
204051e8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
204051ea:	fd442783          	lw	a5,-44(s0)
204051ee:	0785                	addi	a5,a5,1
204051f0:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
204051f4:	fd442783          	lw	a5,-44(s0)
204051f8:	fd842703          	lw	a4,-40(s0)
204051fc:	fee7c6e3          	blt	a5,a4,204051e8 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20405200:	0001                	nop
20405202:	50f2                	lw	ra,60(sp)
20405204:	5462                	lw	s0,56(sp)
20405206:	6121                	addi	sp,sp,64
20405208:	8082                	ret

2040520a <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
2040520a:	7179                	addi	sp,sp,-48
2040520c:	d606                	sw	ra,44(sp)
2040520e:	d422                	sw	s0,40(sp)
20405210:	1800                	addi	s0,sp,48
20405212:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20405216:	fdc42783          	lw	a5,-36(s0)
2040521a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
2040521e:	fec42703          	lw	a4,-20(s0)
20405222:	fec42783          	lw	a5,-20(s0)
20405226:	43dc                	lw	a5,4(a5)
20405228:	85be                	mv	a1,a5
2040522a:	853a                	mv	a0,a4
2040522c:	dc1fc0ef          	jal	ra,20401fec <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20405230:	0001                	nop
20405232:	50b2                	lw	ra,44(sp)
20405234:	5422                	lw	s0,40(sp)
20405236:	6145                	addi	sp,sp,48
20405238:	8082                	ret

2040523a <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
2040523a:	7139                	addi	sp,sp,-64
2040523c:	de06                	sw	ra,60(sp)
2040523e:	dc22                	sw	s0,56(sp)
20405240:	0080                	addi	s0,sp,64
20405242:	fca42623          	sw	a0,-52(s0)
20405246:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
2040524a:	fcc42783          	lw	a5,-52(s0)
2040524e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405252:	fcc42503          	lw	a0,-52(s0)
20405256:	c69ff0ef          	jal	ra,20404ebe <__metal_driver_sifive_uart0_clock>
2040525a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
2040525e:	fcc42503          	lw	a0,-52(s0)
20405262:	c8bff0ef          	jal	ra,20404eec <__metal_driver_sifive_uart0_pinmux>
20405266:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
2040526a:	fe842783          	lw	a5,-24(s0)
2040526e:	c7b9                	beqz	a5,204052bc <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20405270:	fec42783          	lw	a5,-20(s0)
20405274:	20405737          	lui	a4,0x20405
20405278:	13270713          	addi	a4,a4,306 # 20405132 <pre_rate_change_callback_func>
2040527c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
2040527e:	fec42783          	lw	a5,-20(s0)
20405282:	fcc42703          	lw	a4,-52(s0)
20405286:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20405288:	fec42783          	lw	a5,-20(s0)
2040528c:	07a1                	addi	a5,a5,8
2040528e:	85be                	mv	a1,a5
20405290:	fe842503          	lw	a0,-24(s0)
20405294:	20f1                	jal	20405360 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20405296:	fec42783          	lw	a5,-20(s0)
2040529a:	20405737          	lui	a4,0x20405
2040529e:	20a70713          	addi	a4,a4,522 # 2040520a <post_rate_change_callback_func>
204052a2:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
204052a4:	fec42783          	lw	a5,-20(s0)
204052a8:	fcc42703          	lw	a4,-52(s0)
204052ac:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
204052ae:	fec42783          	lw	a5,-20(s0)
204052b2:	07d1                	addi	a5,a5,20
204052b4:	85be                	mv	a1,a5
204052b6:	fe842503          	lw	a0,-24(s0)
204052ba:	28d9                	jal	20405390 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
204052bc:	fec42783          	lw	a5,-20(s0)
204052c0:	fc842583          	lw	a1,-56(s0)
204052c4:	853e                	mv	a0,a5
204052c6:	d27fc0ef          	jal	ra,20401fec <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
204052ca:	fe442783          	lw	a5,-28(s0)
204052ce:	cb95                	beqz	a5,20405302 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
204052d0:	fcc42503          	lw	a0,-52(s0)
204052d4:	c43ff0ef          	jal	ra,20404f16 <__metal_driver_sifive_uart0_pinmux_output_selector>
204052d8:	87aa                	mv	a5,a0
204052da:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
204052de:	fcc42503          	lw	a0,-52(s0)
204052e2:	c5fff0ef          	jal	ra,20404f40 <__metal_driver_sifive_uart0_pinmux_source_selector>
204052e6:	87aa                	mv	a5,a0
204052e8:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
204052ec:	fe442783          	lw	a5,-28(s0)
204052f0:	439c                	lw	a5,0(a5)
204052f2:	53dc                	lw	a5,36(a5)
204052f4:	fdc42603          	lw	a2,-36(s0)
204052f8:	fe042583          	lw	a1,-32(s0)
204052fc:	fe442503          	lw	a0,-28(s0)
20405300:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20405302:	0001                	nop
20405304:	50f2                	lw	ra,60(sp)
20405306:	5462                	lw	s0,56(sp)
20405308:	6121                	addi	sp,sp,64
2040530a:	8082                	ret

2040530c <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
2040530c:	7179                	addi	sp,sp,-48
2040530e:	d622                	sw	s0,44(sp)
20405310:	1800                	addi	s0,sp,48
20405312:	fca42e23          	sw	a0,-36(s0)
20405316:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
2040531a:	fd842783          	lw	a5,-40(s0)
2040531e:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20405322:	fdc42783          	lw	a5,-36(s0)
20405326:	e781                	bnez	a5,2040532e <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20405328:	fd842783          	lw	a5,-40(s0)
2040532c:	a035                	j	20405358 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
2040532e:	fdc42783          	lw	a5,-36(s0)
20405332:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20405336:	a031                	j	20405342 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20405338:	fec42783          	lw	a5,-20(s0)
2040533c:	479c                	lw	a5,8(a5)
2040533e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20405342:	fec42783          	lw	a5,-20(s0)
20405346:	479c                	lw	a5,8(a5)
20405348:	fbe5                	bnez	a5,20405338 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
2040534a:	fec42783          	lw	a5,-20(s0)
2040534e:	fd842703          	lw	a4,-40(s0)
20405352:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20405354:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20405358:	853e                	mv	a0,a5
2040535a:	5432                	lw	s0,44(sp)
2040535c:	6145                	addi	sp,sp,48
2040535e:	8082                	ret

20405360 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405360:	1101                	addi	sp,sp,-32
20405362:	ce06                	sw	ra,28(sp)
20405364:	cc22                	sw	s0,24(sp)
20405366:	1000                	addi	s0,sp,32
20405368:	fea42623          	sw	a0,-20(s0)
2040536c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20405370:	fec42783          	lw	a5,-20(s0)
20405374:	43dc                	lw	a5,4(a5)
20405376:	fe842583          	lw	a1,-24(s0)
2040537a:	853e                	mv	a0,a5
2040537c:	3f41                	jal	2040530c <_metal_clock_append_to_callbacks>
2040537e:	872a                	mv	a4,a0
20405380:	fec42783          	lw	a5,-20(s0)
20405384:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20405386:	0001                	nop
20405388:	40f2                	lw	ra,28(sp)
2040538a:	4462                	lw	s0,24(sp)
2040538c:	6105                	addi	sp,sp,32
2040538e:	8082                	ret

20405390 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405390:	1101                	addi	sp,sp,-32
20405392:	ce06                	sw	ra,28(sp)
20405394:	cc22                	sw	s0,24(sp)
20405396:	1000                	addi	s0,sp,32
20405398:	fea42623          	sw	a0,-20(s0)
2040539c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
204053a0:	fec42783          	lw	a5,-20(s0)
204053a4:	479c                	lw	a5,8(a5)
204053a6:	fe842583          	lw	a1,-24(s0)
204053aa:	853e                	mv	a0,a5
204053ac:	3785                	jal	2040530c <_metal_clock_append_to_callbacks>
204053ae:	872a                	mv	a4,a0
204053b0:	fec42783          	lw	a5,-20(s0)
204053b4:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
204053b6:	0001                	nop
204053b8:	40f2                	lw	ra,28(sp)
204053ba:	4462                	lw	s0,24(sp)
204053bc:	6105                	addi	sp,sp,32
204053be:	8082                	ret

204053c0 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
204053c0:	1101                	addi	sp,sp,-32
204053c2:	ce06                	sw	ra,28(sp)
204053c4:	cc22                	sw	s0,24(sp)
204053c6:	1000                	addi	s0,sp,32
204053c8:	fea42623          	sw	a0,-20(s0)
204053cc:	fec42783          	lw	a5,-20(s0)
204053d0:	439c                	lw	a5,0(a5)
204053d2:	57dc                	lw	a5,44(a5)
204053d4:	fec42503          	lw	a0,-20(s0)
204053d8:	9782                	jalr	a5
204053da:	87aa                	mv	a5,a0
204053dc:	853e                	mv	a0,a5
204053de:	40f2                	lw	ra,28(sp)
204053e0:	4462                	lw	s0,24(sp)
204053e2:	6105                	addi	sp,sp,32
204053e4:	8082                	ret

204053e6 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
204053e6:	1101                	addi	sp,sp,-32
204053e8:	ce22                	sw	s0,28(sp)
204053ea:	1000                	addi	s0,sp,32
204053ec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
204053f0:	fec42783          	lw	a5,-20(s0)
204053f4:	eb89                	bnez	a5,20405406 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
204053f6:	fec42703          	lw	a4,-20(s0)
204053fa:	070a                	slli	a4,a4,0x2
204053fc:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20405400:	97ba                	add	a5,a5,a4
20405402:	439c                	lw	a5,0(a5)
20405404:	a011                	j	20405408 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20405406:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20405408:	853e                	mv	a0,a5
2040540a:	4472                	lw	s0,28(sp)
2040540c:	6105                	addi	sp,sp,32
2040540e:	8082                	ret

20405410 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20405410:	1101                	addi	sp,sp,-32
20405412:	ce22                	sw	s0,28(sp)
20405414:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405416:	f14027f3          	csrr	a5,mhartid
2040541a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
2040541e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20405422:	853e                	mv	a0,a5
20405424:	4472                	lw	s0,28(sp)
20405426:	6105                	addi	sp,sp,32
20405428:	8082                	ret

2040542a <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
2040542a:	1101                	addi	sp,sp,-32
2040542c:	ce22                	sw	s0,28(sp)
2040542e:	1000                	addi	s0,sp,32
20405430:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20405434:	0001                	nop
20405436:	bffd                	j	20405434 <metal_shutdown+0xa>
	...

20405480 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405480:	cc8fd06f          	j	20402948 <metal_interrupt_vector_handler>

20405484 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405484:	cc4fd06f          	j	20402948 <metal_interrupt_vector_handler>

20405488 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405488:	cc0fd06f          	j	20402948 <metal_interrupt_vector_handler>

2040548c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040548c:	ceafd06f          	j	20402976 <metal_software_interrupt_vector_handler>

20405490 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405490:	cb8fd06f          	j	20402948 <metal_interrupt_vector_handler>

20405494 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405494:	cb4fd06f          	j	20402948 <metal_interrupt_vector_handler>

20405498 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405498:	cb0fd06f          	j	20402948 <metal_interrupt_vector_handler>

2040549c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040549c:	dccfd06f          	j	20402a68 <metal_timer_interrupt_vector_handler>

204054a0 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
204054a0:	ca8fd06f          	j	20402948 <metal_interrupt_vector_handler>

204054a4 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
204054a4:	ca4fd06f          	j	20402948 <metal_interrupt_vector_handler>

204054a8 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
204054a8:	ca0fd06f          	j	20402948 <metal_interrupt_vector_handler>

204054ac <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
204054ac:	c9cfd06f          	j	20402948 <metal_interrupt_vector_handler>

204054b0 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
204054b0:	c98fd06f          	j	20402948 <metal_interrupt_vector_handler>

204054b4 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
204054b4:	c94fd06f          	j	20402948 <metal_interrupt_vector_handler>

204054b8 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
204054b8:	c90fd06f          	j	20402948 <metal_interrupt_vector_handler>

204054bc <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
204054bc:	c8cfd06f          	j	20402948 <metal_interrupt_vector_handler>

204054c0 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
204054c0:	837fd06f          	j	20402cf6 <metal_lc0_interrupt_vector_handler>

204054c4 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
204054c4:	8c5fd06f          	j	20402d88 <metal_lc1_interrupt_vector_handler>

204054c8 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
204054c8:	953fd06f          	j	20402e1a <metal_lc2_interrupt_vector_handler>

204054cc <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
204054cc:	9e1fd06f          	j	20402eac <metal_lc3_interrupt_vector_handler>

204054d0 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
204054d0:	a6ffd06f          	j	20402f3e <metal_lc4_interrupt_vector_handler>

204054d4 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
204054d4:	afdfd06f          	j	20402fd0 <metal_lc5_interrupt_vector_handler>

204054d8 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
204054d8:	b8bfd06f          	j	20403062 <metal_lc6_interrupt_vector_handler>

204054dc <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
204054dc:	c19fd06f          	j	204030f4 <metal_lc7_interrupt_vector_handler>

204054e0 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
204054e0:	ca7fd06f          	j	20403186 <metal_lc8_interrupt_vector_handler>

204054e4 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
204054e4:	d35fd06f          	j	20403218 <metal_lc9_interrupt_vector_handler>

204054e8 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
204054e8:	dc3fd06f          	j	204032aa <metal_lc10_interrupt_vector_handler>

204054ec <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
204054ec:	e51fd06f          	j	2040333c <metal_lc11_interrupt_vector_handler>

204054f0 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
204054f0:	edffd06f          	j	204033ce <metal_lc12_interrupt_vector_handler>

204054f4 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
204054f4:	f6dfd06f          	j	20403460 <metal_lc13_interrupt_vector_handler>

204054f8 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
204054f8:	ffbfd06f          	j	204034f2 <metal_lc14_interrupt_vector_handler>

204054fc <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
204054fc:	888fe06f          	j	20403584 <metal_lc15_interrupt_vector_handler>

20405500 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405500:	1101                	addi	sp,sp,-32
20405502:	ce22                	sw	s0,28(sp)
20405504:	1000                	addi	s0,sp,32
20405506:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040550a:	fec42703          	lw	a4,-20(s0)
2040550e:	800017b7          	lui	a5,0x80001
20405512:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffdc90>
20405516:	00f71763          	bne	a4,a5,20405524 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040551a:	03dfd7b7          	lui	a5,0x3dfd
2040551e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405522:	a011                	j	20405526 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
20405524:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
20405526:	853e                	mv	a0,a5
20405528:	4472                	lw	s0,28(sp)
2040552a:	6105                	addi	sp,sp,32
2040552c:	8082                	ret

2040552e <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
2040552e:	1101                	addi	sp,sp,-32
20405530:	ce06                	sw	ra,28(sp)
20405532:	cc22                	sw	s0,24(sp)
20405534:	1000                	addi	s0,sp,32
20405536:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2040553a:	fec42503          	lw	a0,-20(s0)
2040553e:	37c9                	jal	20405500 <__metal_driver_fixed_clock_rate>
20405540:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405542:	853e                	mv	a0,a5
20405544:	40f2                	lw	ra,28(sp)
20405546:	4462                	lw	s0,24(sp)
20405548:	6105                	addi	sp,sp,32
2040554a:	8082                	ret

2040554c <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
2040554c:	1101                	addi	sp,sp,-32
2040554e:	ce06                	sw	ra,28(sp)
20405550:	cc22                	sw	s0,24(sp)
20405552:	1000                	addi	s0,sp,32
20405554:	fea42623          	sw	a0,-20(s0)
20405558:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
2040555c:	fec42503          	lw	a0,-20(s0)
20405560:	37f9                	jal	2040552e <__metal_driver_fixed_clock_get_rate_hz>
20405562:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20405564:	853e                	mv	a0,a5
20405566:	40f2                	lw	ra,28(sp)
20405568:	4462                	lw	s0,24(sp)
2040556a:	6105                	addi	sp,sp,32
2040556c:	8082                	ret

2040556e <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
2040556e:	1101                	addi	sp,sp,-32
20405570:	ce06                	sw	ra,28(sp)
20405572:	cc22                	sw	s0,24(sp)
20405574:	1000                	addi	s0,sp,32
20405576:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
2040557a:	fec42503          	lw	a0,-20(s0)
2040557e:	3575                	jal	2040542a <metal_shutdown>
