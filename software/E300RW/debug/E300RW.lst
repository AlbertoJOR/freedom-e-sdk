
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/debug/E300RW.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/debug/E300RW.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x0000593c memsz 0x0000593c flags rwx
    LOAD off    0x000077b0 vaddr 0x800007b0 paddr 0x800007b0 align 2**12
         filesz 0x00000000 memsz 0x00000cec flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405940 align 2**12
         filesz 0x000007b0 memsz 0x000007b0 flags rw-
    LOAD off    0x000077b0 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x000077b0 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000194  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005280  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           000004b8  20405480  20405480  00006480  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20405938  20405938  00006938  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             000007b0  80000000  20405940  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              000000ec  800007b0  800007b0  000077b0  2**3  ALLOC
  6 .stack            00000400  8000089c  8000089c  000077b0  2**0  ALLOC
  7 .heap             00000800  80000c9c  80000c9c  000077b0  2**0  ALLOC
  8 .debug_info       0001453c  00000000  00000000  000077b0  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     000026a6  00000000  00000000  0001bcec  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000898  00000000  00000000  0001e398  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000730  00000000  00000000  0001ec30  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       000079d0  00000000  00000000  0001f360  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        000036ea  00000000  00000000  00026d30  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002a41a  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002a442  2**0  CONTENTS, READONLY
 16 .debug_frame      0000238c  00000000  00000000  0002a470  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405480 l    d  .rodata	00000000 .rodata
20405938 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
800007b0 l    d  .bss	00000000 .bss
8000089c l    d  .stack	00000000 .stack
80000c9c l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400136 l       .init	00000000 _skip_init
204055e4 l       .rodata	00000000 argv
204055e8 l       .rodata	00000000 envp
204055ec l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 E300RW.c
800007bc l     O .bss	00000010 Nonce.2593
80000000 l     O .data	00000020 plain_text.2590
80000020 l     O .data	00000020 asso_text.2591
800007cc l     O .bss	00000030 cipher_text.2592
800007fc l     O .bss	00000010 dummy_array.2595
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400c76 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
204011c6 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000790 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
8000080c l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20401e90 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20401f3a l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20401f60 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20401f84 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20401fc0 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20402120 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20402656 l     F .text	00000024 __metal_driver_cpu_hartid
2040267a l     F .text	0000002a __metal_driver_cpu_timebase
204026a4 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20403e96 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20403ec0 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20403ee8 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20403f10 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20403f38 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404484 l     F .text	00000026 __metal_driver_sifive_gpio0_base
204044aa l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
204044d4 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20404d3e l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20404d68 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20404d96 l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20404dbe l     F .text	0000002e __metal_driver_sifive_uart0_clock
20404dec l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20404e16 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20404e40 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20405032 l     F .text	000000d8 pre_rate_change_callback_func
2040510a l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20405380 l       .text	00000000 IRQ_0
20405384 l       .text	00000000 IRQ_1
20405388 l       .text	00000000 IRQ_2
2040538c l       .text	00000000 IRQ_3
20405390 l       .text	00000000 IRQ_4
20405394 l       .text	00000000 IRQ_5
20405398 l       .text	00000000 IRQ_6
2040539c l       .text	00000000 IRQ_7
204053a0 l       .text	00000000 IRQ_8
204053a4 l       .text	00000000 IRQ_9
204053a8 l       .text	00000000 IRQ_10
204053ac l       .text	00000000 IRQ_11
204053b0 l       .text	00000000 IRQ_12
204053b4 l       .text	00000000 IRQ_13
204053b8 l       .text	00000000 IRQ_14
204053bc l       .text	00000000 IRQ_15
204053c0 l       .text	00000000 IRQ_LC0
204053c4 l       .text	00000000 IRQ_LC1
204053c8 l       .text	00000000 IRQ_LC2
204053cc l       .text	00000000 IRQ_LC3
204053d0 l       .text	00000000 IRQ_LC4
204053d4 l       .text	00000000 IRQ_LC5
204053d8 l       .text	00000000 IRQ_LC6
204053dc l       .text	00000000 IRQ_LC7
204053e0 l       .text	00000000 IRQ_LC8
204053e4 l       .text	00000000 IRQ_LC9
204053e8 l       .text	00000000 IRQ_LC10
204053ec l       .text	00000000 IRQ_LC11
204053f0 l       .text	00000000 IRQ_LC12
204053f4 l       .text	00000000 IRQ_LC13
204053f8 l       .text	00000000 IRQ_LC14
204053fc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405400 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000040 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
2040593c l       .init_array	00000000 __fini_array_end
2040593c l       .init_array	00000000 __fini_array_start
2040593c l       .init_array	00000000 __init_array_end
20405938 l       .init_array	00000000 __preinit_array_end
20405938 l       .init_array	00000000 __init_array_start
20405938 l       .init_array	00000000 __preinit_array_start
20400762 g     F .text	0000002c putchar
20405914 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
2040162a g     F .text	00000028 _isatty_r
20402e3e  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20400810 g     F .text	000000da _puts_r
20401652 g     F .text	0000002c _lseek_r
20404f92 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
204022fc g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
20402dac  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400200 g     F .text	0000001e rdcycle
204035fe g     F .text	00000038 __metal_valid_interrupt_id
2040071e g     F .text	00000044 printf
20403a24 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000f88 g       .data	00000000 __global_pointer$
2040520c g     F .text	00000054 _metal_clock_append_to_callbacks
20403f88 g     F .text	00000038 __metal_plic0_complete_interrupt
2040387e g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20401570 g     F .text	00000036 __sseek
20400d2c g     F .text	0000006a __sinit
204008f8 g     F .text	000000c0 __swbuf_r
20400ce8 g     F .text	00000044 __sfmoreglue
2040169a g     F .text	00000002 __malloc_unlock
204052e6 g     F .text	0000002a metal_cpu_get
80000768 g     O .data	00000020 __metal_dt_serial_10013000
20404918 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
204055f8 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
8000089c g       .bss	00000000 metal_segment_bss_target_end
20401ff0 g     F .text	0000009a __metal_clint0_mtime_get
20403e2a g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
204046c8 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
20401c18 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20404eaa g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
800007b0 g       .bss	00000000 metal_segment_bss_target_start
2040208a g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401600 g     F .text	0000002a _fstat_r
20404b68 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80000898 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20405260 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20403118  w    F .text	00000092 metal_lc9_interrupt_vector_handler
2040584c g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
2040580c g     O .rodata	00000040 __metal_driver_vtable_cpu
20401f0c g     F .text	0000002e metal_uart_set_baud_rate
2040513a g     F .text	000000d2 __metal_driver_sifive_uart0_init
20403ab8 g     F .text	00000072 __metal_driver_cpu_mcycle_get
80000c9c g       .heap	00000000 metal_segment_heap_target_start
20400cde g     F .text	0000000a _cleanup_r
800007a0 g     O .data	00000004 __metal_dt_cpu_0
20403086  w    F .text	00000092 metal_lc8_interrupt_vector_handler
204008ea g     F .text	0000000e puts
20403360  w    F .text	00000092 metal_lc13_interrupt_vector_handler
20402838 g     F .text	00000018 __metal_default_exception_handler
20401a98 g     F .text	00000026 _fstat
20402622 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20404024 g     F .text	00000062 __metal_plic0_set_priority
20403a40 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
204026ce g     F .text	0000002c __metal_driver_cpu_get
204057c0 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
2040272c g     F .text	00000018 __metal_interrupt_global_disable
20402ff4  w    F .text	00000092 metal_lc7_interrupt_vector_handler
204031aa  w    F .text	00000092 metal_lc10_interrupt_vector_handler
204014ca g     F .text	00000028 _sbrk_r
2040443c g     F .text	00000048 __metal_driver_riscv_plic0_disable
204036f2 g     F .text	0000004e __metal_exception_register
20401a4a g     F .text	0000002c _read_r
20403c4c g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
204047aa g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20402924 g     F .text	00000064 __metal_default_sw_handler
20405290 g     F .text	00000030 metal_clock_register_post_rate_change_callback
20404e6a g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
20401abe g     F .text	00000020 _isatty
20404870 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
800007a8 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000078c g     O .data	00000004 _global_impure_ptr
20402988  w    F .text	0000008e metal_timer_interrupt_vector_handler
20401c88 g     F .text	0000006a __libc_init_array
204047ea g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
2040323c  w    F .text	00000092 metal_lc11_interrupt_vector_handler
204039cc g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
20401b32 g     F .text	0000006e _sbrk
20404764 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20400174 g     F .init	00000002 _init
2040278e g     F .text	0000001a __metal_interrupt_timer_disable
20404962 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20403d02 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
204058d8 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
204048b0 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20401c50 g     F .text	00000038 __libc_fini_array
20404cf0 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403c8c g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
204027e0 g     F .text	0000002c __metal_interrupt_local_enable
204025ee g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20401e3e g     F .text	0000002c metal_tty_putc
20404146 g     F .text	00000018 __metal_plic0_default_handler
2040078e g     F .text	00000082 _putc_r
800000a0 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20405548 g     O .rodata	00000020 __sf_fake_stderr
204027c4 g     F .text	0000001c __metal_interrupt_external_disable
20404e88 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20403a9c g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
20403740 g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
204011f0 g     F .text	00000042 __sfputs_r
20403de4 g     F .text	00000046 __metal_driver_cpu_exception_register
20402744 g     F .text	00000018 __metal_interrupt_software_enable
20402c88  w    F .text	00000092 metal_lc1_interrupt_vector_handler
2040167e g     F .text	0000001a memchr
2040103c g     F .text	000000ac _free_r
800007b8 g     O .bss	00000004 _global_atexit
20403516 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401d76 g     F .text	000000c8 __call_exitprocs
80000c9c g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
20401ade g     F .text	0000002a _lseek
20403dc4 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403e58 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
204027a8 g     F .text	0000001c __metal_interrupt_external_enable
20401cf2 g     F .text	00000084 __register_exitproc
20404edc g     F .text	00000040 __metal_driver_sifive_uart0_putc
204041ee g     F .text	00000144 __metal_driver_riscv_plic0_init
204043f4 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20404738 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20402f62  w    F .text	00000092 metal_lc6_interrupt_vector_handler
204026fa g     F .text	0000001a __metal_myhart_id
20404d10 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20402896  w    F .text	0000008e metal_software_interrupt_vector_handler
204039f8 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
204015d8 g     F .text	00000028 _close_r
20404f72 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
204021de g     F .text	000000da __metal_driver_riscv_clint0_register
80000798 g     O .data	00000008 __metal_dt_clint_2000000
204009b8 g     F .text	00000110 __swsetup_r
20400d96 g     F .text	0000009e __sfp
204014f2 g     F .text	00000030 __sread
20404688 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
20400176  w    F .init	00000000 secondary_main
20402868  w    F .text	0000002e metal_interrupt_vector_handler
20401698 g     F .text	00000002 __malloc_lock
20400c12 g     F .text	00000064 _fflush_r
20403ff8 g     F .text	0000002c __metal_plic0_get_threshold
20405568 g     O .rodata	00000020 __sf_fake_stdin
20403636 g     F .text	000000bc __metal_local_interrupt_enable
204024b8 g     F .text	00000136 __metal_driver_riscv_clint0_command_request
20400f94 g     F .text	000000a8 memset
20402ed0  w    F .text	00000092 metal_lc5_interrupt_vector_handler
2040021e g     F .text	00000500 main
800007b0 g       .data	00000000 metal_segment_data_target_end
20403ca0 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20403d64 g     F .text	00000060 __metal_driver_cpu_get_msip
2040532a g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20403e76 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20403f5a g     F .text	0000002e __metal_plic0_claim_interrupt
204015a6 g     F .text	00000006 __sclose
204032ce  w    F .text	00000092 metal_lc12_interrupt_vector_handler
204010e8 g     F .text	000000de _malloc_r
204022e0 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
20403b2a g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20405310 g     F .text	0000001a metal_cpu_get_current_hartid
20405380 g       .text	00000000 __metal_vector_table
20405940 g       *ABS*	00000000 metal_segment_itim_source_start
80000794  w    O .data	00000004 __metal_cpu_table
800000b0 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20400174 g     F .init	00000002 _fini
2040071e g     F .text	00000044 iprintf
20402714 g     F .text	00000018 __metal_interrupt_global_enable
20401c0e g     F .text	0000000a atexit
20401e6a g     F .text	00000026 metal_tty_putc_raw
204015ac g     F .text	0000002c _write_r
20402774 g     F .text	0000001a __metal_interrupt_timer_enable
20404f1c g     F .text	00000056 __metal_driver_sifive_uart0_getc
20402402 g     F .text	000000b6 __metal_driver_riscv_clint0_disable
2040169c g     F .text	0000010c _printf_common
80000788 g     O .data	00000004 _impure_ptr
20403bd6 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20400ac8 g     F .text	0000014a __sflush_r
2040542e g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20402350 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405940 g       *ABS*	00000000 metal_segment_data_source_start
8000149c g       .heap	00000000 metal_segment_heap_target_end
20403566 g     F .text	00000098 __metal_controller_interrupt_vector
80000468 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400ea0 g     F .text	00000058 __swhatbuf_r
2040482a g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20402a16 g     F .text	00000066 __metal_default_timer_handler
20401ba0 g     F .text	0000006e _write
2040415e g     F .text	00000090 __metal_plic0_handler
20402d1a  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403484  w    F .text	00000092 metal_lc15_interrupt_vector_handler
204052c0 g     F .text	00000026 metal_cpu_interrupt_controller
20401522 g     F .text	0000004e __swrite
20401c24 g     F .text	0000002c exit
20401232 g     F .text	00000298 _vfiprintf_r
20400e34 g     F .text	0000006c _fwalk_reent
2040544c g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20405588 g     O .rodata	00000020 __sf_fake_stdout
800007a4 g     O .data	00000004 __metal_dt_gpio_10012000
20402850 g     F .text	00000018 __metal_default_interrupt_handler
20401ede g     F .text	0000002e metal_uart_putc
20401b08 g     F .text	0000002a _read
2040470e g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402a80 g     F .text	00000150 __metal_exception_handler
20402bf6  w    F .text	00000092 metal_lc0_interrupt_vector_handler
2040546e g     F .text	00000012 _exit
20403b70 g     F .text	00000066 __metal_driver_cpu_mtime_get
20400ef8 g     F .text	0000009c __smakebuf_r
204022b8 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
204017a8 g     F .text	000002a2 _printf_i
800007b4 g     O .bss	00000004 __malloc_sbrk_start
204033f2  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20402156 g     F .text	00000088 __metal_driver_riscv_clint0_init
800007b0 g     O .bss	00000004 __malloc_free_list
20401232 g     F .text	00000298 _vfprintf_r
20403c62 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
204040ba g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20403c76 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
2040280c g     F .text	0000002c __metal_interrupt_local_disable
2040275c g     F .text	00000018 __metal_interrupt_software_disable
20404086 g     F .text	00000034 __metal_plic0_get_priority
20401eb2 g     F .text	0000002c metal_uart_init
20403fc0 g     F .text	00000038 __metal_plic0_set_threshold
20401a76 g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20404332 g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	f8818193          	addi	gp,gp,-120 # 80000f88 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	f0818193          	addi	gp,gp,-248 # 80000f88 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	d1418113          	addi	sp,gp,-748 # 80000c9c <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2040008c:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2040008e:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400092:	00a28563          	beq	t0,a0,2040009c <_start+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20400096:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20400098:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009a:	bfe5                	j	20400092 <_start+0x14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2040009c:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a0:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a4:	08551963          	bne	a0,t0,20400136 <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000a8:	00006297          	auipc	t0,0x6
204000ac:	89828293          	addi	t0,t0,-1896 # 20405940 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b0:	5fc00317          	auipc	t1,0x5fc00
204000b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000b8:	82818393          	addi	t2,gp,-2008 # 800007b0 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000bc:	00628c63          	beq	t0,t1,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c0:	00735a63          	bge	t1,t2,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000c8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ca:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000ce:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d0:	fe734ae3          	blt	t1,t2,204000c4 <_start+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d4:	00006297          	auipc	t0,0x6
204000d8:	86c28293          	addi	t0,t0,-1940 # 20405940 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000dc:	e7c00317          	auipc	t1,0xe7c00
204000e0:	f2430313          	addi	t1,t1,-220 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e4:	e7c00397          	auipc	t2,0xe7c00
204000e8:	f1c38393          	addi	t2,t2,-228 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000ec:	00628c63          	beq	t0,t1,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f0:	00735a63          	bge	t1,t2,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000f8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fa:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
204000fe:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400100:	fe734ae3          	blt	t1,t2,204000f4 <_start+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400104:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20400108:	5fc00317          	auipc	t1,0x5fc00
2040010c:	6a830313          	addi	t1,t1,1704 # 800007b0 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400110:	91418393          	addi	t2,gp,-1772 # 8000089c <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20400114:	00735763          	bge	t1,t2,20400122 <_start+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400118:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2040011c:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2040011e:	fe734de3          	blt	t1,t2,20400118 <_start+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20400122:	c211                	beqz	a2,20400126 <_start+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
20400124:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400126:	00002517          	auipc	a0,0x2
2040012a:	b2a50513          	addi	a0,a0,-1238 # 20401c50 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
2040012e:	2e1010ef          	jal	ra,20401c0e <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20400132:	357010ef          	jal	ra,20401c88 <__libc_init_array>

20400136 <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400136:	3f2d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400138:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2040013c:	00010737          	lui	a4,0x10
20400140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20400144:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20400146:	cb89                	beqz	a5,20400158 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400148:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2040014c:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2040014e:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400150:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20400154:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400158:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2040015a:	00005597          	auipc	a1,0x5
2040015e:	48a58593          	addi	a1,a1,1162 # 204055e4 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20400162:	00005617          	auipc	a2,0x5
20400166:	48660613          	addi	a2,a2,1158 # 204055e8 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
2040016a:	2031                	jal	20400176 <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040016c:	2b9010ef          	jal	ra,20401c24 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400170:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
20400172:	8082                	ret

20400174 <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400174:	8082                	ret

20400176 <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20400176:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400178:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2040017a:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2040017e:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20400182:	00628563          	beq	t0,t1,2040018c <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
20400186:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
2040018a:	bff5                	j	20400186 <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
2040018c:	2849                	jal	2040021e <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
2040018e:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400190:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
20400192:	8082                	ret

Disassembly of section .text:

20400200 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:49

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
20400200:	1101                	addi	sp,sp,-32
20400202:	ce22                	sw	s0,28(sp)
20400204:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:50
    int tmp = 0;
20400206:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:51
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
2040020a:	b00027f3          	csrr	a5,mcycle
2040020e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:52
    return tmp;
20400212:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:53
}
20400216:	853e                	mv	a0,a5
20400218:	4472                	lw	s0,28(sp)
2040021a:	6105                	addi	sp,sp,32
2040021c:	8082                	ret

2040021e <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:7
#include "../RoCCcommon/rocc.h"
#include "AEAD_HW.h"

#include <stdio.h>

int main(void) {
2040021e:	7139                	addi	sp,sp,-64
20400220:	de06                	sw	ra,60(sp)
20400222:	dc22                	sw	s0,56(sp)
20400224:	0080                	addi	s0,sp,64
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:17
    static unsigned cipher_text [12]= {0};
    // static unsigned Nonce [4]= {0x77777777, 0xeeeeeeee, 0xffffffff, 0x33333333};
    static unsigned Nonce [4]= {0};
    static unsigned Key [4] = {0};
    static unsigned dummy_array [4] = {0};
    unsigned plain_len = 32;
20400226:	02000793          	li	a5,32
2040022a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:18
    unsigned asso_len = 1; /// CReo que asignaste a memoria
2040022e:	4785                	li	a5,1
20400230:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:19
    unsigned plain_len_int = plain_len / 4 ;
20400234:	fe042783          	lw	a5,-32(s0)
20400238:	8389                	srli	a5,a5,0x2
2040023a:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:20
    plain_len_int = (plain_len % 4 == 0 )? plain_len_int :plain_len_int+1;
2040023e:	fe042783          	lw	a5,-32(s0)
20400242:	8b8d                	andi	a5,a5,3
20400244:	c789                	beqz	a5,2040024e <main+0x30>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:20 (discriminator 1)
20400246:	fd842783          	lw	a5,-40(s0)
2040024a:	0785                	addi	a5,a5,1
2040024c:	a019                	j	20400252 <main+0x34>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:20 (discriminator 2)
2040024e:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:20 (discriminator 4)
20400252:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:25 (discriminator 4)


    // printf("Init AEAD \n");
    unsigned start, end, HWcycles;
    int rd = 0;
20400256:	fc042a23          	sw	zero,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:27 (discriminator 4)
    // RoCC
    start = rdcycle();
2040025a:	375d                	jal	20400200 <rdcycle>
2040025c:	87aa                	mv	a5,a0
2040025e:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:28 (discriminator 4)
    write_csr(mstatus, MSTATUS_XS); // Always initialize the CSR such that the accelerator is recognized
20400262:	67e1                	lui	a5,0x18
20400264:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:31 (discriminator 4)

    //rd = AEAD_E_Set_P( plain_text, plain_len);
    asm volatile("fence");
20400268:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:32 (discriminator 4)
    ROCC_INSTRUCTION_DS(0,rd, Nonce, Enc_Set_Nonce );
2040026c:	800007b7          	lui	a5,0x80000
20400270:	7bc78793          	addi	a5,a5,1980 # 800007bc <metal_segment_heap_target_end+0xfffff320>
20400274:	85be                	mv	a1,a5
20400276:	2805e50b          	0x2805e50b
2040027a:	87aa                	mv	a5,a0
2040027c:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:33 (discriminator 4)
    asm volatile("fence" ::: "memory");
20400280:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:34 (discriminator 4)
    printf("Set Nonce finish : %08x \n", rd);
20400284:	fd442583          	lw	a1,-44(s0)
20400288:	204057b7          	lui	a5,0x20405
2040028c:	48078513          	addi	a0,a5,1152 # 20405480 <_exit+0x12>
20400290:	2179                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:36 (discriminator 4)

    asm volatile("fence");
20400292:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:37 (discriminator 4)
    ROCC_INSTRUCTION_DSS(0,rd, plain_text, plain_len, Enc_Set_P );
20400296:	800007b7          	lui	a5,0x80000
2040029a:	00078793          	mv	a5,a5
2040029e:	85be                	mv	a1,a5
204002a0:	fe042603          	lw	a2,-32(s0)
204002a4:	22c5f50b          	0x22c5f50b
204002a8:	87aa                	mv	a5,a0
204002aa:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:38 (discriminator 4)
    asm volatile("fence" ::: "memory");
204002ae:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:39 (discriminator 4)
    printf("Set Plain text finish length : %08x \n", rd);
204002b2:	fd442583          	lw	a1,-44(s0)
204002b6:	204057b7          	lui	a5,0x20405
204002ba:	49c78513          	addi	a0,a5,1180 # 2040549c <_exit+0x2e>
204002be:	2185                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:44 (discriminator 4)



    // rd = AEAD_E_Set_AD(plain_text, plain_len );
    asm volatile("fence");
204002c0:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:45 (discriminator 4)
    ROCC_INSTRUCTION_DSS(0, rd,asso_text, asso_len, Enc_Set_AD );
204002c4:	800007b7          	lui	a5,0x80000
204002c8:	02078793          	addi	a5,a5,32 # 80000020 <metal_segment_heap_target_end+0xffffeb84>
204002cc:	85be                	mv	a1,a5
204002ce:	fdc42603          	lw	a2,-36(s0)
204002d2:	24c5f50b          	0x24c5f50b
204002d6:	87aa                	mv	a5,a0
204002d8:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:46 (discriminator 4)
    asm volatile("fence" ::: "memory");
204002dc:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:47 (discriminator 4)
    printf("Set Associated Data finish length: %08x \n", rd);
204002e0:	fd442583          	lw	a1,-44(s0)
204002e4:	204057b7          	lui	a5,0x20405
204002e8:	4c478513          	addi	a0,a5,1220 # 204054c4 <_exit+0x56>
204002ec:	290d                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:52 (discriminator 4)



    // rd = AEAD_E_Set_C_Tag(cipher_text,dumm_array);
    asm volatile("fence");
204002ee:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:53 (discriminator 4)
    ROCC_INSTRUCTION_DSS(0,rd, cipher_text, dummy_array, Enc_Set_C_Tag );
204002f2:	800007b7          	lui	a5,0x80000
204002f6:	7cc78793          	addi	a5,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff330>
204002fa:	85be                	mv	a1,a5
204002fc:	800007b7          	lui	a5,0x80000
20400300:	7fc78793          	addi	a5,a5,2044 # 800007fc <metal_segment_heap_target_end+0xfffff360>
20400304:	863e                	mv	a2,a5
20400306:	26c5f50b          	0x26c5f50b
2040030a:	87aa                	mv	a5,a0
2040030c:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:54 (discriminator 4)
    asm volatile("fence" ::: "memory");
20400310:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:56 (discriminator 4)
    // printf("Set Tag and C finish : %d \n", rd);
    printf("Set Cipher addr: %08x \n", rd);
20400314:	fd442583          	lw	a1,-44(s0)
20400318:	204057b7          	lui	a5,0x20405
2040031c:	4f078513          	addi	a0,a5,1264 # 204054f0 <_exit+0x82>
20400320:	2efd                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:62 (discriminator 4)

    // rd = AEAD_E_Set_Nonce(dumm_array );


    // rd = AEAD_E_Set_Key(rd);
    asm volatile("fence");
20400322:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:63 (discriminator 4)
    ROCC_INSTRUCTION_DS(0,rd,  rd, Enc_Set_Key );
20400326:	fd442783          	lw	a5,-44(s0)
2040032a:	85be                	mv	a1,a5
2040032c:	2a05e50b          	0x2a05e50b
20400330:	87aa                	mv	a5,a0
20400332:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:64 (discriminator 4)
    asm volatile("fence" ::: "memory");
20400336:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:65 (discriminator 4)
    printf("Set Key  finish : %08x \n", rd);
2040033a:	fd442583          	lw	a1,-44(s0)
2040033e:	204057b7          	lui	a5,0x20405
20400342:	50878513          	addi	a0,a5,1288 # 20405508 <_exit+0x9a>
20400346:	2ee1                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:68 (discriminator 4)

    //rd = AEAD_E_Set_Init();
    asm volatile("fence");
20400348:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:69 (discriminator 4)
    ROCC_INSTRUCTION_DS(0,rd, rd,  Enc_Init );
2040034c:	fd442783          	lw	a5,-44(s0)
20400350:	85be                	mv	a1,a5
20400352:	2c05e50b          	0x2c05e50b
20400356:	87aa                	mv	a5,a0
20400358:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:70 (discriminator 4)
    asm volatile("fence" ::: "memory");
2040035c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:71 (discriminator 4)
   printf("Finish AEAD : %08x \n", rd);
20400360:	fd442583          	lw	a1,-44(s0)
20400364:	204057b7          	lui	a5,0x20405
20400368:	52478513          	addi	a0,a5,1316 # 20405524 <_exit+0xb6>
2040036c:	2e4d                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:73 (discriminator 4)

    end = rdcycle();
2040036e:	3d49                	jal	20400200 <rdcycle>
20400370:	87aa                	mv	a5,a0
20400372:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:74 (discriminator 4)
    HWcycles = end - start;
20400376:	fcc42703          	lw	a4,-52(s0)
2040037a:	fd042783          	lw	a5,-48(s0)
2040037e:	40f707b3          	sub	a5,a4,a5
20400382:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:76 (discriminator 4)
   //  printf("Total time = %d cycles\n",HWcycles);
    printf("C");
20400386:	04300513          	li	a0,67
2040038a:	2ee1                	jal	20400762 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:77 (discriminator 4)
    for(int i = 0; i < 8+4; i ++){
2040038c:	fe042623          	sw	zero,-20(s0)
20400390:	a0b9                	j	204003de <main+0x1c0>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:78
       if(i%2==0 ){
20400392:	fec42783          	lw	a5,-20(s0)
20400396:	8b85                	andi	a5,a5,1
20400398:	e399                	bnez	a5,2040039e <main+0x180>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:79
            printf("\n");
2040039a:	4529                	li	a0,10
2040039c:	26d9                	jal	20400762 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:81 (discriminator 2)
        }
        printf("%08x ",cipher_text[i], i);
2040039e:	800007b7          	lui	a5,0x80000
204003a2:	7cc78713          	addi	a4,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff330>
204003a6:	fec42783          	lw	a5,-20(s0)
204003aa:	078a                	slli	a5,a5,0x2
204003ac:	97ba                	add	a5,a5,a4
204003ae:	439c                	lw	a5,0(a5)
204003b0:	fec42603          	lw	a2,-20(s0)
204003b4:	85be                	mv	a1,a5
204003b6:	204057b7          	lui	a5,0x20405
204003ba:	53c78513          	addi	a0,a5,1340 # 2040553c <_exit+0xce>
204003be:	2685                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:82 (discriminator 2)
       cipher_text[i] = 0;
204003c0:	800007b7          	lui	a5,0x80000
204003c4:	7cc78713          	addi	a4,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff330>
204003c8:	fec42783          	lw	a5,-20(s0)
204003cc:	078a                	slli	a5,a5,0x2
204003ce:	97ba                	add	a5,a5,a4
204003d0:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:77 (discriminator 2)
    for(int i = 0; i < 8+4; i ++){
204003d4:	fec42783          	lw	a5,-20(s0)
204003d8:	0785                	addi	a5,a5,1
204003da:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:77 (discriminator 1)
204003de:	fec42703          	lw	a4,-20(s0)
204003e2:	47ad                	li	a5,11
204003e4:	fae7d7e3          	bge	a5,a4,20400392 <main+0x174>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:84
    }
    printf("\n");
204003e8:	4529                	li	a0,10
204003ea:	2ea5                	jal	20400762 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:85
    printf("X\n\n");
204003ec:	204057b7          	lui	a5,0x20405
204003f0:	54478513          	addi	a0,a5,1348 # 20405544 <_exit+0xd6>
204003f4:	29dd                	jal	204008ea <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:92
    /* plain_len = 32;
    asso_len = 10; /// CReo que asignaste a memoria
    plain_text[0] = 12;
    asso_text[0] = 123; */
    //rd = AEAD_E_Set_P( plain_text, plain_len);
    asm volatile("fence");
204003f6:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:93
    ROCC_INSTRUCTION_DS(0,rd, Nonce, Enc_Set_Nonce );
204003fa:	800007b7          	lui	a5,0x80000
204003fe:	7bc78793          	addi	a5,a5,1980 # 800007bc <metal_segment_heap_target_end+0xfffff320>
20400402:	85be                	mv	a1,a5
20400404:	2805e50b          	0x2805e50b
20400408:	87aa                	mv	a5,a0
2040040a:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:94
    asm volatile("fence" ::: "memory");
2040040e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:95
    printf("Set Nonce finish : %08x \n", rd);
20400412:	fd442583          	lw	a1,-44(s0)
20400416:	204057b7          	lui	a5,0x20405
2040041a:	48078513          	addi	a0,a5,1152 # 20405480 <_exit+0x12>
2040041e:	2601                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:97

    asm volatile("fence");
20400420:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:98
    ROCC_INSTRUCTION_DSS(0,rd, plain_text, plain_len, Enc_Set_P );
20400424:	800007b7          	lui	a5,0x80000
20400428:	00078793          	mv	a5,a5
2040042c:	85be                	mv	a1,a5
2040042e:	fe042603          	lw	a2,-32(s0)
20400432:	22c5f50b          	0x22c5f50b
20400436:	87aa                	mv	a5,a0
20400438:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:99
    asm volatile("fence" ::: "memory");
2040043c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:100
    printf("Set Plain text finish length : %08x \n", rd);
20400440:	fd442583          	lw	a1,-44(s0)
20400444:	204057b7          	lui	a5,0x20405
20400448:	49c78513          	addi	a0,a5,1180 # 2040549c <_exit+0x2e>
2040044c:	2cc9                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:105



    // rd = AEAD_E_Set_AD(plain_text, plain_len );
    asm volatile("fence");
2040044e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:106
    ROCC_INSTRUCTION_DSS(0, rd,asso_text, asso_len, Enc_Set_AD );
20400452:	800007b7          	lui	a5,0x80000
20400456:	02078793          	addi	a5,a5,32 # 80000020 <metal_segment_heap_target_end+0xffffeb84>
2040045a:	85be                	mv	a1,a5
2040045c:	fdc42603          	lw	a2,-36(s0)
20400460:	24c5f50b          	0x24c5f50b
20400464:	87aa                	mv	a5,a0
20400466:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:107
    asm volatile("fence" ::: "memory");
2040046a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:108
    printf("Set Associated Data finish length: %08x \n", rd);
2040046e:	fd442583          	lw	a1,-44(s0)
20400472:	204057b7          	lui	a5,0x20405
20400476:	4c478513          	addi	a0,a5,1220 # 204054c4 <_exit+0x56>
2040047a:	2455                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:113



    // rd = AEAD_E_Set_C_Tag(cipher_text,dumm_array);
    asm volatile("fence");
2040047c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:114
    ROCC_INSTRUCTION_DSS(0,rd, cipher_text, dummy_array, Enc_Set_C_Tag );
20400480:	800007b7          	lui	a5,0x80000
20400484:	7cc78793          	addi	a5,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff330>
20400488:	85be                	mv	a1,a5
2040048a:	800007b7          	lui	a5,0x80000
2040048e:	7fc78793          	addi	a5,a5,2044 # 800007fc <metal_segment_heap_target_end+0xfffff360>
20400492:	863e                	mv	a2,a5
20400494:	26c5f50b          	0x26c5f50b
20400498:	87aa                	mv	a5,a0
2040049a:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:115
    asm volatile("fence" ::: "memory");
2040049e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:117
    // printf("Set Tag and C finish : %d \n", rd);
    printf("Set Cipher addr: %08x \n", rd);
204004a2:	fd442583          	lw	a1,-44(s0)
204004a6:	204057b7          	lui	a5,0x20405
204004aa:	4f078513          	addi	a0,a5,1264 # 204054f0 <_exit+0x82>
204004ae:	2c85                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:123

    // rd = AEAD_E_Set_Nonce(dumm_array );


    // rd = AEAD_E_Set_Key(rd);
    asm volatile("fence");
204004b0:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:124
    ROCC_INSTRUCTION_DS(0,rd,  rd, Enc_Set_Key );
204004b4:	fd442783          	lw	a5,-44(s0)
204004b8:	85be                	mv	a1,a5
204004ba:	2a05e50b          	0x2a05e50b
204004be:	87aa                	mv	a5,a0
204004c0:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:125
    asm volatile("fence" ::: "memory");
204004c4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:126
    printf("Set Key  finish : %08x \n", rd);
204004c8:	fd442583          	lw	a1,-44(s0)
204004cc:	204057b7          	lui	a5,0x20405
204004d0:	50878513          	addi	a0,a5,1288 # 20405508 <_exit+0x9a>
204004d4:	24a9                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:129

    //rd = AEAD_E_Set_Init();
    asm volatile("fence");
204004d6:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:130
    ROCC_INSTRUCTION_DS(0,rd, rd,  Enc_Init );
204004da:	fd442783          	lw	a5,-44(s0)
204004de:	85be                	mv	a1,a5
204004e0:	2c05e50b          	0x2c05e50b
204004e4:	87aa                	mv	a5,a0
204004e6:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:131
    asm volatile("fence" ::: "memory");
204004ea:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:132
    printf("Finish AEAD : %08x \n", rd);
204004ee:	fd442583          	lw	a1,-44(s0)
204004f2:	204057b7          	lui	a5,0x20405
204004f6:	52478513          	addi	a0,a5,1316 # 20405524 <_exit+0xb6>
204004fa:	2415                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:134

    end = rdcycle();
204004fc:	3311                	jal	20400200 <rdcycle>
204004fe:	87aa                	mv	a5,a0
20400500:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:135
    HWcycles = end - start;
20400504:	fcc42703          	lw	a4,-52(s0)
20400508:	fd042783          	lw	a5,-48(s0)
2040050c:	40f707b3          	sub	a5,a4,a5
20400510:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:137
    //  printf("Total time = %d cycles\n",HWcycles);
    printf("C");
20400514:	04300513          	li	a0,67
20400518:	24a9                	jal	20400762 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:138
    for(int i = 0; i < 8+4; i ++){
2040051a:	fe042423          	sw	zero,-24(s0)
2040051e:	a82d                	j	20400558 <main+0x33a>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:139
        if(i%2==0 ){
20400520:	fe842783          	lw	a5,-24(s0)
20400524:	8b85                	andi	a5,a5,1
20400526:	e399                	bnez	a5,2040052c <main+0x30e>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:140
            printf("\n");
20400528:	4529                	li	a0,10
2040052a:	2c25                	jal	20400762 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:142 (discriminator 2)
        }
        printf("%08x ",cipher_text[i], i);
2040052c:	800007b7          	lui	a5,0x80000
20400530:	7cc78713          	addi	a4,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff330>
20400534:	fe842783          	lw	a5,-24(s0)
20400538:	078a                	slli	a5,a5,0x2
2040053a:	97ba                	add	a5,a5,a4
2040053c:	439c                	lw	a5,0(a5)
2040053e:	fe842603          	lw	a2,-24(s0)
20400542:	85be                	mv	a1,a5
20400544:	204057b7          	lui	a5,0x20405
20400548:	53c78513          	addi	a0,a5,1340 # 2040553c <_exit+0xce>
2040054c:	2ac9                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:138 (discriminator 2)
    for(int i = 0; i < 8+4; i ++){
2040054e:	fe842783          	lw	a5,-24(s0)
20400552:	0785                	addi	a5,a5,1
20400554:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:138 (discriminator 1)
20400558:	fe842703          	lw	a4,-24(s0)
2040055c:	47ad                	li	a5,11
2040055e:	fce7d1e3          	bge	a5,a4,20400520 <main+0x302>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:144
    }
    printf("\n");
20400562:	4529                	li	a0,10
20400564:	2afd                	jal	20400762 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:145
    printf("X\n\n");
20400566:	204057b7          	lui	a5,0x20405
2040056a:	54478513          	addi	a0,a5,1348 # 20405544 <_exit+0xd6>
2040056e:	2eb5                	jal	204008ea <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:147

    plain_len = 32;
20400570:	02000793          	li	a5,32
20400574:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:148
       asso_len = 10; /// CReo que asignaste a memoria
20400578:	47a9                	li	a5,10
2040057a:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:149
       plain_text[0] = 12;
2040057e:	800007b7          	lui	a5,0x80000
20400582:	00078793          	mv	a5,a5
20400586:	4731                	li	a4,12
20400588:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:150
       asso_text[0] = 123;
2040058a:	800007b7          	lui	a5,0x80000
2040058e:	02078793          	addi	a5,a5,32 # 80000020 <metal_segment_heap_target_end+0xffffeb84>
20400592:	07b00713          	li	a4,123
20400596:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:152
    //rd = AEAD_E_Set_P( plain_text, plain_len);
    asm volatile("fence");
20400598:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:153
    ROCC_INSTRUCTION_DS(0,rd, Nonce, Enc_Set_Nonce );
2040059c:	800007b7          	lui	a5,0x80000
204005a0:	7bc78793          	addi	a5,a5,1980 # 800007bc <metal_segment_heap_target_end+0xfffff320>
204005a4:	85be                	mv	a1,a5
204005a6:	2805e50b          	0x2805e50b
204005aa:	87aa                	mv	a5,a0
204005ac:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:154
    asm volatile("fence" ::: "memory");
204005b0:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:155
    printf("Set Nonce finish : %08x \n", rd);
204005b4:	fd442583          	lw	a1,-44(s0)
204005b8:	204057b7          	lui	a5,0x20405
204005bc:	48078513          	addi	a0,a5,1152 # 20405480 <_exit+0x12>
204005c0:	2ab9                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:157

    asm volatile("fence");
204005c2:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:158
    ROCC_INSTRUCTION_DSS(0,rd, plain_text, plain_len, Enc_Set_P );
204005c6:	800007b7          	lui	a5,0x80000
204005ca:	00078793          	mv	a5,a5
204005ce:	85be                	mv	a1,a5
204005d0:	fe042603          	lw	a2,-32(s0)
204005d4:	22c5f50b          	0x22c5f50b
204005d8:	87aa                	mv	a5,a0
204005da:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:159
    asm volatile("fence" ::: "memory");
204005de:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:160
    printf("Set Plain text finish length : %08x \n", rd);
204005e2:	fd442583          	lw	a1,-44(s0)
204005e6:	204057b7          	lui	a5,0x20405
204005ea:	49c78513          	addi	a0,a5,1180 # 2040549c <_exit+0x2e>
204005ee:	2a05                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:165



    // rd = AEAD_E_Set_AD(plain_text, plain_len );
    asm volatile("fence");
204005f0:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:166
    ROCC_INSTRUCTION_DSS(0, rd,asso_text, asso_len, Enc_Set_AD );
204005f4:	800007b7          	lui	a5,0x80000
204005f8:	02078793          	addi	a5,a5,32 # 80000020 <metal_segment_heap_target_end+0xffffeb84>
204005fc:	85be                	mv	a1,a5
204005fe:	fdc42603          	lw	a2,-36(s0)
20400602:	24c5f50b          	0x24c5f50b
20400606:	87aa                	mv	a5,a0
20400608:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:167
    asm volatile("fence" ::: "memory");
2040060c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:168
    printf("Set Associated Data finish length: %08x \n", rd);
20400610:	fd442583          	lw	a1,-44(s0)
20400614:	204057b7          	lui	a5,0x20405
20400618:	4c478513          	addi	a0,a5,1220 # 204054c4 <_exit+0x56>
2040061c:	2209                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:173



    // rd = AEAD_E_Set_C_Tag(cipher_text,dumm_array);
    asm volatile("fence");
2040061e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:174
    ROCC_INSTRUCTION_DSS(0,rd, cipher_text, dummy_array, Enc_Set_C_Tag );
20400622:	800007b7          	lui	a5,0x80000
20400626:	7cc78793          	addi	a5,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff330>
2040062a:	85be                	mv	a1,a5
2040062c:	800007b7          	lui	a5,0x80000
20400630:	7fc78793          	addi	a5,a5,2044 # 800007fc <metal_segment_heap_target_end+0xfffff360>
20400634:	863e                	mv	a2,a5
20400636:	26c5f50b          	0x26c5f50b
2040063a:	87aa                	mv	a5,a0
2040063c:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:175
    asm volatile("fence" ::: "memory");
20400640:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:177
    // printf("Set Tag and C finish : %d \n", rd);
    printf("Set Cipher addr: %08x \n", rd);
20400644:	fd442583          	lw	a1,-44(s0)
20400648:	204057b7          	lui	a5,0x20405
2040064c:	4f078513          	addi	a0,a5,1264 # 204054f0 <_exit+0x82>
20400650:	20f9                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:183

    // rd = AEAD_E_Set_Nonce(dumm_array );


    // rd = AEAD_E_Set_Key(rd);
    asm volatile("fence");
20400652:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:184
    ROCC_INSTRUCTION_DS(0,rd,  rd, Enc_Set_Key );
20400656:	fd442783          	lw	a5,-44(s0)
2040065a:	85be                	mv	a1,a5
2040065c:	2a05e50b          	0x2a05e50b
20400660:	87aa                	mv	a5,a0
20400662:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:185
    asm volatile("fence" ::: "memory");
20400666:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:186
    printf("Set Key  finish : %08x \n", rd);
2040066a:	fd442583          	lw	a1,-44(s0)
2040066e:	204057b7          	lui	a5,0x20405
20400672:	50878513          	addi	a0,a5,1288 # 20405508 <_exit+0x9a>
20400676:	2065                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:189

    //rd = AEAD_E_Set_Init();
    asm volatile("fence");
20400678:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:190
    ROCC_INSTRUCTION_DS(0,rd, rd,  Enc_Init );
2040067c:	fd442783          	lw	a5,-44(s0)
20400680:	85be                	mv	a1,a5
20400682:	2c05e50b          	0x2c05e50b
20400686:	87aa                	mv	a5,a0
20400688:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:191
    asm volatile("fence" ::: "memory");
2040068c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:192
    printf("Finish AEAD : %08x \n", rd);
20400690:	fd442583          	lw	a1,-44(s0)
20400694:	204057b7          	lui	a5,0x20405
20400698:	52478513          	addi	a0,a5,1316 # 20405524 <_exit+0xb6>
2040069c:	2049                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:194

    end = rdcycle();
2040069e:	368d                	jal	20400200 <rdcycle>
204006a0:	87aa                	mv	a5,a0
204006a2:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:195
    HWcycles = end - start;
204006a6:	fcc42703          	lw	a4,-52(s0)
204006aa:	fd042783          	lw	a5,-48(s0)
204006ae:	40f707b3          	sub	a5,a4,a5
204006b2:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:197
    //  printf("Total time = %d cycles\n",HWcycles);
    printf("C");
204006b6:	04300513          	li	a0,67
204006ba:	2065                	jal	20400762 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:198
    for(int i = 0; i < 8+4; i ++){
204006bc:	fe042223          	sw	zero,-28(s0)
204006c0:	a82d                	j	204006fa <main+0x4dc>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:199
        if(i%2==0 ){
204006c2:	fe442783          	lw	a5,-28(s0)
204006c6:	8b85                	andi	a5,a5,1
204006c8:	e399                	bnez	a5,204006ce <main+0x4b0>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:200
            printf("\n");
204006ca:	4529                	li	a0,10
204006cc:	2859                	jal	20400762 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:202 (discriminator 2)
        }
        printf("%08x ",cipher_text[i], i);
204006ce:	800007b7          	lui	a5,0x80000
204006d2:	7cc78713          	addi	a4,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff330>
204006d6:	fe442783          	lw	a5,-28(s0)
204006da:	078a                	slli	a5,a5,0x2
204006dc:	97ba                	add	a5,a5,a4
204006de:	439c                	lw	a5,0(a5)
204006e0:	fe442603          	lw	a2,-28(s0)
204006e4:	85be                	mv	a1,a5
204006e6:	204057b7          	lui	a5,0x20405
204006ea:	53c78513          	addi	a0,a5,1340 # 2040553c <_exit+0xce>
204006ee:	2805                	jal	2040071e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:198 (discriminator 2)
    for(int i = 0; i < 8+4; i ++){
204006f0:	fe442783          	lw	a5,-28(s0)
204006f4:	0785                	addi	a5,a5,1
204006f6:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:198 (discriminator 1)
204006fa:	fe442703          	lw	a4,-28(s0)
204006fe:	47ad                	li	a5,11
20400700:	fce7d1e3          	bge	a5,a4,204006c2 <main+0x4a4>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:204
    }
    printf("\n");
20400704:	4529                	li	a0,10
20400706:	28b1                	jal	20400762 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:205
    printf("X\n\n");
20400708:	204057b7          	lui	a5,0x20405
2040070c:	54478513          	addi	a0,a5,1348 # 20405544 <_exit+0xd6>
20400710:	2ae9                	jal	204008ea <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:210




    return 0;
20400712:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:211
}
20400714:	853e                	mv	a0,a5
20400716:	50f2                	lw	ra,60(sp)
20400718:	5462                	lw	s0,56(sp)
2040071a:	6121                	addi	sp,sp,64
2040071c:	8082                	ret

2040071e <iprintf>:
printf():
2040071e:	7139                	addi	sp,sp,-64
20400720:	da3e                	sw	a5,52(sp)
20400722:	d22e                	sw	a1,36(sp)
20400724:	d432                	sw	a2,40(sp)
20400726:	d636                	sw	a3,44(sp)
20400728:	d83a                	sw	a4,48(sp)
2040072a:	dc42                	sw	a6,56(sp)
2040072c:	de46                	sw	a7,60(sp)
2040072e:	5fc00797          	auipc	a5,0x5fc00
20400732:	05a78793          	addi	a5,a5,90 # 80000788 <_impure_ptr>
20400736:	cc22                	sw	s0,24(sp)
20400738:	4380                	lw	s0,0(a5)
2040073a:	ca26                	sw	s1,20(sp)
2040073c:	ce06                	sw	ra,28(sp)
2040073e:	84aa                	mv	s1,a0
20400740:	c409                	beqz	s0,2040074a <iprintf+0x2c>
20400742:	4c1c                	lw	a5,24(s0)
20400744:	e399                	bnez	a5,2040074a <iprintf+0x2c>
20400746:	8522                	mv	a0,s0
20400748:	23d5                	jal	20400d2c <__sinit>
2040074a:	440c                	lw	a1,8(s0)
2040074c:	1054                	addi	a3,sp,36
2040074e:	8626                	mv	a2,s1
20400750:	8522                	mv	a0,s0
20400752:	c636                	sw	a3,12(sp)
20400754:	2df000ef          	jal	ra,20401232 <_vfiprintf_r>
20400758:	40f2                	lw	ra,28(sp)
2040075a:	4462                	lw	s0,24(sp)
2040075c:	44d2                	lw	s1,20(sp)
2040075e:	6121                	addi	sp,sp,64
20400760:	8082                	ret

20400762 <putchar>:
putchar():
20400762:	1101                	addi	sp,sp,-32
20400764:	5fc00797          	auipc	a5,0x5fc00
20400768:	02478793          	addi	a5,a5,36 # 80000788 <_impure_ptr>
2040076c:	cc22                	sw	s0,24(sp)
2040076e:	4380                	lw	s0,0(a5)
20400770:	ce06                	sw	ra,28(sp)
20400772:	85aa                	mv	a1,a0
20400774:	c419                	beqz	s0,20400782 <putchar+0x20>
20400776:	4c1c                	lw	a5,24(s0)
20400778:	e789                	bnez	a5,20400782 <putchar+0x20>
2040077a:	c62a                	sw	a0,12(sp)
2040077c:	8522                	mv	a0,s0
2040077e:	237d                	jal	20400d2c <__sinit>
20400780:	45b2                	lw	a1,12(sp)
20400782:	4410                	lw	a2,8(s0)
20400784:	8522                	mv	a0,s0
20400786:	4462                	lw	s0,24(sp)
20400788:	40f2                	lw	ra,28(sp)
2040078a:	6105                	addi	sp,sp,32
2040078c:	a009                	j	2040078e <_putc_r>

2040078e <_putc_r>:
_putc_r():
2040078e:	1101                	addi	sp,sp,-32
20400790:	cc22                	sw	s0,24(sp)
20400792:	ce06                	sw	ra,28(sp)
20400794:	842a                	mv	s0,a0
20400796:	c901                	beqz	a0,204007a6 <_putc_r+0x18>
20400798:	4d1c                	lw	a5,24(a0)
2040079a:	e791                	bnez	a5,204007a6 <_putc_r+0x18>
2040079c:	c632                	sw	a2,12(sp)
2040079e:	c42e                	sw	a1,8(sp)
204007a0:	2371                	jal	20400d2c <__sinit>
204007a2:	4632                	lw	a2,12(sp)
204007a4:	45a2                	lw	a1,8(sp)
204007a6:	00005797          	auipc	a5,0x5
204007aa:	dc278793          	addi	a5,a5,-574 # 20405568 <__sf_fake_stdin>
204007ae:	02f61563          	bne	a2,a5,204007d8 <_putc_r+0x4a>
204007b2:	4050                	lw	a2,4(s0)
204007b4:	461c                	lw	a5,8(a2)
204007b6:	17fd                	addi	a5,a5,-1
204007b8:	c61c                	sw	a5,8(a2)
204007ba:	0207df63          	bgez	a5,204007f8 <_putc_r+0x6a>
204007be:	4e18                	lw	a4,24(a2)
204007c0:	00e7c763          	blt	a5,a4,204007ce <_putc_r+0x40>
204007c4:	0ff5f793          	andi	a5,a1,255
204007c8:	4729                	li	a4,10
204007ca:	02e79763          	bne	a5,a4,204007f8 <_putc_r+0x6a>
204007ce:	8522                	mv	a0,s0
204007d0:	4462                	lw	s0,24(sp)
204007d2:	40f2                	lw	ra,28(sp)
204007d4:	6105                	addi	sp,sp,32
204007d6:	a20d                	j	204008f8 <__swbuf_r>
204007d8:	00005797          	auipc	a5,0x5
204007dc:	db078793          	addi	a5,a5,-592 # 20405588 <__sf_fake_stdout>
204007e0:	00f61463          	bne	a2,a5,204007e8 <_putc_r+0x5a>
204007e4:	4410                	lw	a2,8(s0)
204007e6:	b7f9                	j	204007b4 <_putc_r+0x26>
204007e8:	00005797          	auipc	a5,0x5
204007ec:	d6078793          	addi	a5,a5,-672 # 20405548 <__sf_fake_stderr>
204007f0:	fcf612e3          	bne	a2,a5,204007b4 <_putc_r+0x26>
204007f4:	4450                	lw	a2,12(s0)
204007f6:	bf7d                	j	204007b4 <_putc_r+0x26>
204007f8:	421c                	lw	a5,0(a2)
204007fa:	0ff5f513          	andi	a0,a1,255
204007fe:	00178713          	addi	a4,a5,1
20400802:	c218                	sw	a4,0(a2)
20400804:	00b78023          	sb	a1,0(a5)
20400808:	40f2                	lw	ra,28(sp)
2040080a:	4462                	lw	s0,24(sp)
2040080c:	6105                	addi	sp,sp,32
2040080e:	8082                	ret

20400810 <_puts_r>:
_puts_r():
20400810:	1101                	addi	sp,sp,-32
20400812:	ca26                	sw	s1,20(sp)
20400814:	c84a                	sw	s2,16(sp)
20400816:	ce06                	sw	ra,28(sp)
20400818:	cc22                	sw	s0,24(sp)
2040081a:	c64e                	sw	s3,12(sp)
2040081c:	c452                	sw	s4,8(sp)
2040081e:	84aa                	mv	s1,a0
20400820:	892e                	mv	s2,a1
20400822:	c501                	beqz	a0,2040082a <_puts_r+0x1a>
20400824:	4d1c                	lw	a5,24(a0)
20400826:	e391                	bnez	a5,2040082a <_puts_r+0x1a>
20400828:	2311                	jal	20400d2c <__sinit>
2040082a:	4c9c                	lw	a5,24(s1)
2040082c:	4480                	lw	s0,8(s1)
2040082e:	e399                	bnez	a5,20400834 <_puts_r+0x24>
20400830:	8526                	mv	a0,s1
20400832:	29ed                	jal	20400d2c <__sinit>
20400834:	00005797          	auipc	a5,0x5
20400838:	d3478793          	addi	a5,a5,-716 # 20405568 <__sf_fake_stdin>
2040083c:	02f41c63          	bne	s0,a5,20400874 <_puts_r+0x64>
20400840:	40c0                	lw	s0,4(s1)
20400842:	00c45783          	lhu	a5,12(s0)
20400846:	8ba1                	andi	a5,a5,8
20400848:	c7b1                	beqz	a5,20400894 <_puts_r+0x84>
2040084a:	481c                	lw	a5,16(s0)
2040084c:	c7a1                	beqz	a5,20400894 <_puts_r+0x84>
2040084e:	59fd                	li	s3,-1
20400850:	4a29                	li	s4,10
20400852:	441c                	lw	a5,8(s0)
20400854:	00094583          	lbu	a1,0(s2)
20400858:	17fd                	addi	a5,a5,-1
2040085a:	e9b1                	bnez	a1,204008ae <_puts_r+0x9e>
2040085c:	c41c                	sw	a5,8(s0)
2040085e:	0607de63          	bgez	a5,204008da <_puts_r+0xca>
20400862:	8622                	mv	a2,s0
20400864:	45a9                	li	a1,10
20400866:	8526                	mv	a0,s1
20400868:	2841                	jal	204008f8 <__swbuf_r>
2040086a:	57fd                	li	a5,-1
2040086c:	02f50863          	beq	a0,a5,2040089c <_puts_r+0x8c>
20400870:	4529                	li	a0,10
20400872:	a035                	j	2040089e <_puts_r+0x8e>
20400874:	00005797          	auipc	a5,0x5
20400878:	d1478793          	addi	a5,a5,-748 # 20405588 <__sf_fake_stdout>
2040087c:	00f41463          	bne	s0,a5,20400884 <_puts_r+0x74>
20400880:	4480                	lw	s0,8(s1)
20400882:	b7c1                	j	20400842 <_puts_r+0x32>
20400884:	00005797          	auipc	a5,0x5
20400888:	cc478793          	addi	a5,a5,-828 # 20405548 <__sf_fake_stderr>
2040088c:	faf41be3          	bne	s0,a5,20400842 <_puts_r+0x32>
20400890:	44c0                	lw	s0,12(s1)
20400892:	bf45                	j	20400842 <_puts_r+0x32>
20400894:	85a2                	mv	a1,s0
20400896:	8526                	mv	a0,s1
20400898:	2205                	jal	204009b8 <__swsetup_r>
2040089a:	d955                	beqz	a0,2040084e <_puts_r+0x3e>
2040089c:	557d                	li	a0,-1
2040089e:	40f2                	lw	ra,28(sp)
204008a0:	4462                	lw	s0,24(sp)
204008a2:	44d2                	lw	s1,20(sp)
204008a4:	4942                	lw	s2,16(sp)
204008a6:	49b2                	lw	s3,12(sp)
204008a8:	4a22                	lw	s4,8(sp)
204008aa:	6105                	addi	sp,sp,32
204008ac:	8082                	ret
204008ae:	c41c                	sw	a5,8(s0)
204008b0:	0905                	addi	s2,s2,1
204008b2:	0007d763          	bgez	a5,204008c0 <_puts_r+0xb0>
204008b6:	4c18                	lw	a4,24(s0)
204008b8:	00e7cb63          	blt	a5,a4,204008ce <_puts_r+0xbe>
204008bc:	01458963          	beq	a1,s4,204008ce <_puts_r+0xbe>
204008c0:	401c                	lw	a5,0(s0)
204008c2:	00178713          	addi	a4,a5,1
204008c6:	c018                	sw	a4,0(s0)
204008c8:	00b78023          	sb	a1,0(a5)
204008cc:	b759                	j	20400852 <_puts_r+0x42>
204008ce:	8622                	mv	a2,s0
204008d0:	8526                	mv	a0,s1
204008d2:	201d                	jal	204008f8 <__swbuf_r>
204008d4:	f7351fe3          	bne	a0,s3,20400852 <_puts_r+0x42>
204008d8:	b7d1                	j	2040089c <_puts_r+0x8c>
204008da:	401c                	lw	a5,0(s0)
204008dc:	00178713          	addi	a4,a5,1
204008e0:	c018                	sw	a4,0(s0)
204008e2:	4729                	li	a4,10
204008e4:	00e78023          	sb	a4,0(a5)
204008e8:	b761                	j	20400870 <_puts_r+0x60>

204008ea <puts>:
puts():
204008ea:	5fc00797          	auipc	a5,0x5fc00
204008ee:	e9e78793          	addi	a5,a5,-354 # 80000788 <_impure_ptr>
204008f2:	85aa                	mv	a1,a0
204008f4:	4388                	lw	a0,0(a5)
204008f6:	bf29                	j	20400810 <_puts_r>

204008f8 <__swbuf_r>:
__swbuf_r():
204008f8:	1101                	addi	sp,sp,-32
204008fa:	cc22                	sw	s0,24(sp)
204008fc:	ca26                	sw	s1,20(sp)
204008fe:	c84a                	sw	s2,16(sp)
20400900:	ce06                	sw	ra,28(sp)
20400902:	c64e                	sw	s3,12(sp)
20400904:	84aa                	mv	s1,a0
20400906:	892e                	mv	s2,a1
20400908:	8432                	mv	s0,a2
2040090a:	c501                	beqz	a0,20400912 <__swbuf_r+0x1a>
2040090c:	4d1c                	lw	a5,24(a0)
2040090e:	e391                	bnez	a5,20400912 <__swbuf_r+0x1a>
20400910:	2931                	jal	20400d2c <__sinit>
20400912:	00005797          	auipc	a5,0x5
20400916:	c5678793          	addi	a5,a5,-938 # 20405568 <__sf_fake_stdin>
2040091a:	06f41963          	bne	s0,a5,2040098c <__swbuf_r+0x94>
2040091e:	40c0                	lw	s0,4(s1)
20400920:	4c1c                	lw	a5,24(s0)
20400922:	c41c                	sw	a5,8(s0)
20400924:	00c45783          	lhu	a5,12(s0)
20400928:	8ba1                	andi	a5,a5,8
2040092a:	c3c9                	beqz	a5,204009ac <__swbuf_r+0xb4>
2040092c:	481c                	lw	a5,16(s0)
2040092e:	cfbd                	beqz	a5,204009ac <__swbuf_r+0xb4>
20400930:	481c                	lw	a5,16(s0)
20400932:	4008                	lw	a0,0(s0)
20400934:	0ff97993          	andi	s3,s2,255
20400938:	0ff97913          	andi	s2,s2,255
2040093c:	8d1d                	sub	a0,a0,a5
2040093e:	485c                	lw	a5,20(s0)
20400940:	00f54663          	blt	a0,a5,2040094c <__swbuf_r+0x54>
20400944:	85a2                	mv	a1,s0
20400946:	8526                	mv	a0,s1
20400948:	24e9                	jal	20400c12 <_fflush_r>
2040094a:	e52d                	bnez	a0,204009b4 <__swbuf_r+0xbc>
2040094c:	441c                	lw	a5,8(s0)
2040094e:	0505                	addi	a0,a0,1
20400950:	17fd                	addi	a5,a5,-1
20400952:	c41c                	sw	a5,8(s0)
20400954:	401c                	lw	a5,0(s0)
20400956:	00178713          	addi	a4,a5,1
2040095a:	c018                	sw	a4,0(s0)
2040095c:	01378023          	sb	s3,0(a5)
20400960:	485c                	lw	a5,20(s0)
20400962:	00a78963          	beq	a5,a0,20400974 <__swbuf_r+0x7c>
20400966:	00c45783          	lhu	a5,12(s0)
2040096a:	8b85                	andi	a5,a5,1
2040096c:	cb81                	beqz	a5,2040097c <__swbuf_r+0x84>
2040096e:	47a9                	li	a5,10
20400970:	00f91663          	bne	s2,a5,2040097c <__swbuf_r+0x84>
20400974:	85a2                	mv	a1,s0
20400976:	8526                	mv	a0,s1
20400978:	2c69                	jal	20400c12 <_fflush_r>
2040097a:	ed0d                	bnez	a0,204009b4 <__swbuf_r+0xbc>
2040097c:	40f2                	lw	ra,28(sp)
2040097e:	4462                	lw	s0,24(sp)
20400980:	854a                	mv	a0,s2
20400982:	44d2                	lw	s1,20(sp)
20400984:	4942                	lw	s2,16(sp)
20400986:	49b2                	lw	s3,12(sp)
20400988:	6105                	addi	sp,sp,32
2040098a:	8082                	ret
2040098c:	00005797          	auipc	a5,0x5
20400990:	bfc78793          	addi	a5,a5,-1028 # 20405588 <__sf_fake_stdout>
20400994:	00f41463          	bne	s0,a5,2040099c <__swbuf_r+0xa4>
20400998:	4480                	lw	s0,8(s1)
2040099a:	b759                	j	20400920 <__swbuf_r+0x28>
2040099c:	00005797          	auipc	a5,0x5
204009a0:	bac78793          	addi	a5,a5,-1108 # 20405548 <__sf_fake_stderr>
204009a4:	f6f41ee3          	bne	s0,a5,20400920 <__swbuf_r+0x28>
204009a8:	44c0                	lw	s0,12(s1)
204009aa:	bf9d                	j	20400920 <__swbuf_r+0x28>
204009ac:	85a2                	mv	a1,s0
204009ae:	8526                	mv	a0,s1
204009b0:	2021                	jal	204009b8 <__swsetup_r>
204009b2:	dd3d                	beqz	a0,20400930 <__swbuf_r+0x38>
204009b4:	597d                	li	s2,-1
204009b6:	b7d9                	j	2040097c <__swbuf_r+0x84>

204009b8 <__swsetup_r>:
__swsetup_r():
204009b8:	1141                	addi	sp,sp,-16
204009ba:	5fc00797          	auipc	a5,0x5fc00
204009be:	dce78793          	addi	a5,a5,-562 # 80000788 <_impure_ptr>
204009c2:	c226                	sw	s1,4(sp)
204009c4:	4384                	lw	s1,0(a5)
204009c6:	c422                	sw	s0,8(sp)
204009c8:	c04a                	sw	s2,0(sp)
204009ca:	c606                	sw	ra,12(sp)
204009cc:	892a                	mv	s2,a0
204009ce:	842e                	mv	s0,a1
204009d0:	c489                	beqz	s1,204009da <__swsetup_r+0x22>
204009d2:	4c9c                	lw	a5,24(s1)
204009d4:	e399                	bnez	a5,204009da <__swsetup_r+0x22>
204009d6:	8526                	mv	a0,s1
204009d8:	2e91                	jal	20400d2c <__sinit>
204009da:	00005797          	auipc	a5,0x5
204009de:	b8e78793          	addi	a5,a5,-1138 # 20405568 <__sf_fake_stdin>
204009e2:	02f41c63          	bne	s0,a5,20400a1a <__swsetup_r+0x62>
204009e6:	40c0                	lw	s0,4(s1)
204009e8:	00c41703          	lh	a4,12(s0)
204009ec:	01071793          	slli	a5,a4,0x10
204009f0:	83c1                	srli	a5,a5,0x10
204009f2:	0087f693          	andi	a3,a5,8
204009f6:	eeb5                	bnez	a3,20400a72 <__swsetup_r+0xba>
204009f8:	0107f693          	andi	a3,a5,16
204009fc:	ee9d                	bnez	a3,20400a3a <__swsetup_r+0x82>
204009fe:	47a5                	li	a5,9
20400a00:	00f92023          	sw	a5,0(s2)
20400a04:	04076713          	ori	a4,a4,64
20400a08:	00e41623          	sh	a4,12(s0)
20400a0c:	557d                	li	a0,-1
20400a0e:	40b2                	lw	ra,12(sp)
20400a10:	4422                	lw	s0,8(sp)
20400a12:	4492                	lw	s1,4(sp)
20400a14:	4902                	lw	s2,0(sp)
20400a16:	0141                	addi	sp,sp,16
20400a18:	8082                	ret
20400a1a:	00005797          	auipc	a5,0x5
20400a1e:	b6e78793          	addi	a5,a5,-1170 # 20405588 <__sf_fake_stdout>
20400a22:	00f41463          	bne	s0,a5,20400a2a <__swsetup_r+0x72>
20400a26:	4480                	lw	s0,8(s1)
20400a28:	b7c1                	j	204009e8 <__swsetup_r+0x30>
20400a2a:	00005797          	auipc	a5,0x5
20400a2e:	b1e78793          	addi	a5,a5,-1250 # 20405548 <__sf_fake_stderr>
20400a32:	faf41be3          	bne	s0,a5,204009e8 <__swsetup_r+0x30>
20400a36:	44c0                	lw	s0,12(s1)
20400a38:	bf45                	j	204009e8 <__swsetup_r+0x30>
20400a3a:	8b91                	andi	a5,a5,4
20400a3c:	c78d                	beqz	a5,20400a66 <__swsetup_r+0xae>
20400a3e:	584c                	lw	a1,52(s0)
20400a40:	c989                	beqz	a1,20400a52 <__swsetup_r+0x9a>
20400a42:	04440793          	addi	a5,s0,68
20400a46:	00f58463          	beq	a1,a5,20400a4e <__swsetup_r+0x96>
20400a4a:	854a                	mv	a0,s2
20400a4c:	2bc5                	jal	2040103c <_free_r>
20400a4e:	02042a23          	sw	zero,52(s0)
20400a52:	00c45783          	lhu	a5,12(s0)
20400a56:	00042223          	sw	zero,4(s0)
20400a5a:	fdb7f793          	andi	a5,a5,-37
20400a5e:	00f41623          	sh	a5,12(s0)
20400a62:	481c                	lw	a5,16(s0)
20400a64:	c01c                	sw	a5,0(s0)
20400a66:	00c45783          	lhu	a5,12(s0)
20400a6a:	0087e793          	ori	a5,a5,8
20400a6e:	00f41623          	sh	a5,12(s0)
20400a72:	481c                	lw	a5,16(s0)
20400a74:	ef81                	bnez	a5,20400a8c <__swsetup_r+0xd4>
20400a76:	00c45783          	lhu	a5,12(s0)
20400a7a:	20000713          	li	a4,512
20400a7e:	2807f793          	andi	a5,a5,640
20400a82:	00e78563          	beq	a5,a4,20400a8c <__swsetup_r+0xd4>
20400a86:	85a2                	mv	a1,s0
20400a88:	854a                	mv	a0,s2
20400a8a:	21bd                	jal	20400ef8 <__smakebuf_r>
20400a8c:	00c45783          	lhu	a5,12(s0)
20400a90:	0017f713          	andi	a4,a5,1
20400a94:	c705                	beqz	a4,20400abc <__swsetup_r+0x104>
20400a96:	485c                	lw	a5,20(s0)
20400a98:	00042423          	sw	zero,8(s0)
20400a9c:	40f007b3          	neg	a5,a5
20400aa0:	cc1c                	sw	a5,24(s0)
20400aa2:	481c                	lw	a5,16(s0)
20400aa4:	4501                	li	a0,0
20400aa6:	f7a5                	bnez	a5,20400a0e <__swsetup_r+0x56>
20400aa8:	00c41783          	lh	a5,12(s0)
20400aac:	0807f713          	andi	a4,a5,128
20400ab0:	df39                	beqz	a4,20400a0e <__swsetup_r+0x56>
20400ab2:	0407e793          	ori	a5,a5,64
20400ab6:	00f41623          	sh	a5,12(s0)
20400aba:	bf89                	j	20400a0c <__swsetup_r+0x54>
20400abc:	8b89                	andi	a5,a5,2
20400abe:	4701                	li	a4,0
20400ac0:	e391                	bnez	a5,20400ac4 <__swsetup_r+0x10c>
20400ac2:	4858                	lw	a4,20(s0)
20400ac4:	c418                	sw	a4,8(s0)
20400ac6:	bff1                	j	20400aa2 <__swsetup_r+0xea>

20400ac8 <__sflush_r>:
__sflush_r():
20400ac8:	00c5d783          	lhu	a5,12(a1)
20400acc:	1101                	addi	sp,sp,-32
20400ace:	cc22                	sw	s0,24(sp)
20400ad0:	ca26                	sw	s1,20(sp)
20400ad2:	ce06                	sw	ra,28(sp)
20400ad4:	c84a                	sw	s2,16(sp)
20400ad6:	c64e                	sw	s3,12(sp)
20400ad8:	0087f713          	andi	a4,a5,8
20400adc:	84aa                	mv	s1,a0
20400ade:	842e                	mv	s0,a1
20400ae0:	e765                	bnez	a4,20400bc8 <__sflush_r+0x100>
20400ae2:	41d8                	lw	a4,4(a1)
20400ae4:	00e04763          	bgtz	a4,20400af2 <__sflush_r+0x2a>
20400ae8:	41b8                	lw	a4,64(a1)
20400aea:	00e04463          	bgtz	a4,20400af2 <__sflush_r+0x2a>
20400aee:	4501                	li	a0,0
20400af0:	a0c1                	j	20400bb0 <__sflush_r+0xe8>
20400af2:	5458                	lw	a4,44(s0)
20400af4:	df6d                	beqz	a4,20400aee <__sflush_r+0x26>
20400af6:	0004a903          	lw	s2,0(s1)
20400afa:	01379693          	slli	a3,a5,0x13
20400afe:	0004a023          	sw	zero,0(s1)
20400b02:	0606de63          	bgez	a3,20400b7e <__sflush_r+0xb6>
20400b06:	4868                	lw	a0,84(s0)
20400b08:	00c45783          	lhu	a5,12(s0)
20400b0c:	8b91                	andi	a5,a5,4
20400b0e:	c799                	beqz	a5,20400b1c <__sflush_r+0x54>
20400b10:	405c                	lw	a5,4(s0)
20400b12:	8d1d                	sub	a0,a0,a5
20400b14:	585c                	lw	a5,52(s0)
20400b16:	c399                	beqz	a5,20400b1c <__sflush_r+0x54>
20400b18:	403c                	lw	a5,64(s0)
20400b1a:	8d1d                	sub	a0,a0,a5
20400b1c:	545c                	lw	a5,44(s0)
20400b1e:	500c                	lw	a1,32(s0)
20400b20:	862a                	mv	a2,a0
20400b22:	4681                	li	a3,0
20400b24:	8526                	mv	a0,s1
20400b26:	9782                	jalr	a5
20400b28:	57fd                	li	a5,-1
20400b2a:	00c45703          	lhu	a4,12(s0)
20400b2e:	00f51d63          	bne	a0,a5,20400b48 <__sflush_r+0x80>
20400b32:	4094                	lw	a3,0(s1)
20400b34:	47f5                	li	a5,29
20400b36:	08d7e463          	bltu	a5,a3,20400bbe <__sflush_r+0xf6>
20400b3a:	204007b7          	lui	a5,0x20400
20400b3e:	0785                	addi	a5,a5,1
20400b40:	00d7d7b3          	srl	a5,a5,a3
20400b44:	8b85                	andi	a5,a5,1
20400b46:	cfa5                	beqz	a5,20400bbe <__sflush_r+0xf6>
20400b48:	481c                	lw	a5,16(s0)
20400b4a:	00042223          	sw	zero,4(s0)
20400b4e:	c01c                	sw	a5,0(s0)
20400b50:	01371793          	slli	a5,a4,0x13
20400b54:	0007d863          	bgez	a5,20400b64 <__sflush_r+0x9c>
20400b58:	57fd                	li	a5,-1
20400b5a:	00f51463          	bne	a0,a5,20400b62 <__sflush_r+0x9a>
20400b5e:	409c                	lw	a5,0(s1)
20400b60:	e391                	bnez	a5,20400b64 <__sflush_r+0x9c>
20400b62:	c868                	sw	a0,84(s0)
20400b64:	584c                	lw	a1,52(s0)
20400b66:	0124a023          	sw	s2,0(s1)
20400b6a:	d1d1                	beqz	a1,20400aee <__sflush_r+0x26>
20400b6c:	04440793          	addi	a5,s0,68
20400b70:	00f58463          	beq	a1,a5,20400b78 <__sflush_r+0xb0>
20400b74:	8526                	mv	a0,s1
20400b76:	21d9                	jal	2040103c <_free_r>
20400b78:	02042a23          	sw	zero,52(s0)
20400b7c:	bf8d                	j	20400aee <__sflush_r+0x26>
20400b7e:	500c                	lw	a1,32(s0)
20400b80:	4685                	li	a3,1
20400b82:	4601                	li	a2,0
20400b84:	8526                	mv	a0,s1
20400b86:	9702                	jalr	a4
20400b88:	57fd                	li	a5,-1
20400b8a:	f6f51fe3          	bne	a0,a5,20400b08 <__sflush_r+0x40>
20400b8e:	409c                	lw	a5,0(s1)
20400b90:	dfa5                	beqz	a5,20400b08 <__sflush_r+0x40>
20400b92:	4775                	li	a4,29
20400b94:	00e78563          	beq	a5,a4,20400b9e <__sflush_r+0xd6>
20400b98:	4759                	li	a4,22
20400b9a:	00e79563          	bne	a5,a4,20400ba4 <__sflush_r+0xdc>
20400b9e:	0124a023          	sw	s2,0(s1)
20400ba2:	b7b1                	j	20400aee <__sflush_r+0x26>
20400ba4:	00c45783          	lhu	a5,12(s0)
20400ba8:	0407e793          	ori	a5,a5,64
20400bac:	00f41623          	sh	a5,12(s0)
20400bb0:	40f2                	lw	ra,28(sp)
20400bb2:	4462                	lw	s0,24(sp)
20400bb4:	44d2                	lw	s1,20(sp)
20400bb6:	4942                	lw	s2,16(sp)
20400bb8:	49b2                	lw	s3,12(sp)
20400bba:	6105                	addi	sp,sp,32
20400bbc:	8082                	ret
20400bbe:	04076713          	ori	a4,a4,64
20400bc2:	00e41623          	sh	a4,12(s0)
20400bc6:	b7ed                	j	20400bb0 <__sflush_r+0xe8>
20400bc8:	0105a983          	lw	s3,16(a1)
20400bcc:	f20981e3          	beqz	s3,20400aee <__sflush_r+0x26>
20400bd0:	0005a903          	lw	s2,0(a1)
20400bd4:	8b8d                	andi	a5,a5,3
20400bd6:	0135a023          	sw	s3,0(a1)
20400bda:	41390933          	sub	s2,s2,s3
20400bde:	4701                	li	a4,0
20400be0:	e391                	bnez	a5,20400be4 <__sflush_r+0x11c>
20400be2:	49d8                	lw	a4,20(a1)
20400be4:	c418                	sw	a4,8(s0)
20400be6:	f12054e3          	blez	s2,20400aee <__sflush_r+0x26>
20400bea:	541c                	lw	a5,40(s0)
20400bec:	500c                	lw	a1,32(s0)
20400bee:	86ca                	mv	a3,s2
20400bf0:	864e                	mv	a2,s3
20400bf2:	8526                	mv	a0,s1
20400bf4:	9782                	jalr	a5
20400bf6:	00a04a63          	bgtz	a0,20400c0a <__sflush_r+0x142>
20400bfa:	00c45783          	lhu	a5,12(s0)
20400bfe:	557d                	li	a0,-1
20400c00:	0407e793          	ori	a5,a5,64
20400c04:	00f41623          	sh	a5,12(s0)
20400c08:	b765                	j	20400bb0 <__sflush_r+0xe8>
20400c0a:	99aa                	add	s3,s3,a0
20400c0c:	40a90933          	sub	s2,s2,a0
20400c10:	bfd9                	j	20400be6 <__sflush_r+0x11e>

20400c12 <_fflush_r>:
_fflush_r():
20400c12:	499c                	lw	a5,16(a1)
20400c14:	cfb9                	beqz	a5,20400c72 <_fflush_r+0x60>
20400c16:	1101                	addi	sp,sp,-32
20400c18:	cc22                	sw	s0,24(sp)
20400c1a:	ce06                	sw	ra,28(sp)
20400c1c:	842a                	mv	s0,a0
20400c1e:	c511                	beqz	a0,20400c2a <_fflush_r+0x18>
20400c20:	4d1c                	lw	a5,24(a0)
20400c22:	e781                	bnez	a5,20400c2a <_fflush_r+0x18>
20400c24:	c62e                	sw	a1,12(sp)
20400c26:	2219                	jal	20400d2c <__sinit>
20400c28:	45b2                	lw	a1,12(sp)
20400c2a:	00005797          	auipc	a5,0x5
20400c2e:	93e78793          	addi	a5,a5,-1730 # 20405568 <__sf_fake_stdin>
20400c32:	00f59b63          	bne	a1,a5,20400c48 <_fflush_r+0x36>
20400c36:	404c                	lw	a1,4(s0)
20400c38:	00c59783          	lh	a5,12(a1)
20400c3c:	c795                	beqz	a5,20400c68 <_fflush_r+0x56>
20400c3e:	8522                	mv	a0,s0
20400c40:	4462                	lw	s0,24(sp)
20400c42:	40f2                	lw	ra,28(sp)
20400c44:	6105                	addi	sp,sp,32
20400c46:	b549                	j	20400ac8 <__sflush_r>
20400c48:	00005797          	auipc	a5,0x5
20400c4c:	94078793          	addi	a5,a5,-1728 # 20405588 <__sf_fake_stdout>
20400c50:	00f59463          	bne	a1,a5,20400c58 <_fflush_r+0x46>
20400c54:	440c                	lw	a1,8(s0)
20400c56:	b7cd                	j	20400c38 <_fflush_r+0x26>
20400c58:	00005797          	auipc	a5,0x5
20400c5c:	8f078793          	addi	a5,a5,-1808 # 20405548 <__sf_fake_stderr>
20400c60:	fcf59ce3          	bne	a1,a5,20400c38 <_fflush_r+0x26>
20400c64:	444c                	lw	a1,12(s0)
20400c66:	bfc9                	j	20400c38 <_fflush_r+0x26>
20400c68:	40f2                	lw	ra,28(sp)
20400c6a:	4462                	lw	s0,24(sp)
20400c6c:	4501                	li	a0,0
20400c6e:	6105                	addi	sp,sp,32
20400c70:	8082                	ret
20400c72:	4501                	li	a0,0
20400c74:	8082                	ret

20400c76 <std>:
std():
20400c76:	1141                	addi	sp,sp,-16
20400c78:	c422                	sw	s0,8(sp)
20400c7a:	c606                	sw	ra,12(sp)
20400c7c:	842a                	mv	s0,a0
20400c7e:	00b51623          	sh	a1,12(a0)
20400c82:	00c51723          	sh	a2,14(a0)
20400c86:	00052023          	sw	zero,0(a0)
20400c8a:	00052223          	sw	zero,4(a0)
20400c8e:	00052423          	sw	zero,8(a0)
20400c92:	06052223          	sw	zero,100(a0)
20400c96:	00052823          	sw	zero,16(a0)
20400c9a:	00052a23          	sw	zero,20(a0)
20400c9e:	00052c23          	sw	zero,24(a0)
20400ca2:	4621                	li	a2,8
20400ca4:	4581                	li	a1,0
20400ca6:	05c50513          	addi	a0,a0,92
20400caa:	24ed                	jal	20400f94 <memset>
20400cac:	00001797          	auipc	a5,0x1
20400cb0:	84678793          	addi	a5,a5,-1978 # 204014f2 <__sread>
20400cb4:	d05c                	sw	a5,36(s0)
20400cb6:	00001797          	auipc	a5,0x1
20400cba:	86c78793          	addi	a5,a5,-1940 # 20401522 <__swrite>
20400cbe:	d41c                	sw	a5,40(s0)
20400cc0:	00001797          	auipc	a5,0x1
20400cc4:	8b078793          	addi	a5,a5,-1872 # 20401570 <__sseek>
20400cc8:	d45c                	sw	a5,44(s0)
20400cca:	00001797          	auipc	a5,0x1
20400cce:	8dc78793          	addi	a5,a5,-1828 # 204015a6 <__sclose>
20400cd2:	d000                	sw	s0,32(s0)
20400cd4:	d81c                	sw	a5,48(s0)
20400cd6:	40b2                	lw	ra,12(sp)
20400cd8:	4422                	lw	s0,8(sp)
20400cda:	0141                	addi	sp,sp,16
20400cdc:	8082                	ret

20400cde <_cleanup_r>:
_cleanup_r():
20400cde:	00000597          	auipc	a1,0x0
20400ce2:	f3458593          	addi	a1,a1,-204 # 20400c12 <_fflush_r>
20400ce6:	a2b9                	j	20400e34 <_fwalk_reent>

20400ce8 <__sfmoreglue>:
__sfmoreglue():
20400ce8:	1141                	addi	sp,sp,-16
20400cea:	c226                	sw	s1,4(sp)
20400cec:	06800613          	li	a2,104
20400cf0:	fff58493          	addi	s1,a1,-1
20400cf4:	02c484b3          	mul	s1,s1,a2
20400cf8:	c04a                	sw	s2,0(sp)
20400cfa:	892e                	mv	s2,a1
20400cfc:	c422                	sw	s0,8(sp)
20400cfe:	c606                	sw	ra,12(sp)
20400d00:	07448593          	addi	a1,s1,116
20400d04:	26d5                	jal	204010e8 <_malloc_r>
20400d06:	842a                	mv	s0,a0
20400d08:	c919                	beqz	a0,20400d1e <__sfmoreglue+0x36>
20400d0a:	00052023          	sw	zero,0(a0)
20400d0e:	01252223          	sw	s2,4(a0)
20400d12:	0531                	addi	a0,a0,12
20400d14:	c408                	sw	a0,8(s0)
20400d16:	06848613          	addi	a2,s1,104
20400d1a:	4581                	li	a1,0
20400d1c:	2ca5                	jal	20400f94 <memset>
20400d1e:	8522                	mv	a0,s0
20400d20:	40b2                	lw	ra,12(sp)
20400d22:	4422                	lw	s0,8(sp)
20400d24:	4492                	lw	s1,4(sp)
20400d26:	4902                	lw	s2,0(sp)
20400d28:	0141                	addi	sp,sp,16
20400d2a:	8082                	ret

20400d2c <__sinit>:
__sinit():
20400d2c:	4d1c                	lw	a5,24(a0)
20400d2e:	e3bd                	bnez	a5,20400d94 <__sinit+0x68>
20400d30:	1141                	addi	sp,sp,-16
20400d32:	c606                	sw	ra,12(sp)
20400d34:	c422                	sw	s0,8(sp)
20400d36:	00000797          	auipc	a5,0x0
20400d3a:	fa878793          	addi	a5,a5,-88 # 20400cde <_cleanup_r>
20400d3e:	d51c                	sw	a5,40(a0)
20400d40:	5fc00797          	auipc	a5,0x5fc00
20400d44:	a4c78793          	addi	a5,a5,-1460 # 8000078c <_global_impure_ptr>
20400d48:	439c                	lw	a5,0(a5)
20400d4a:	04052423          	sw	zero,72(a0)
20400d4e:	04052623          	sw	zero,76(a0)
20400d52:	04052823          	sw	zero,80(a0)
20400d56:	00f51463          	bne	a0,a5,20400d5e <__sinit+0x32>
20400d5a:	4785                	li	a5,1
20400d5c:	cd1c                	sw	a5,24(a0)
20400d5e:	842a                	mv	s0,a0
20400d60:	281d                	jal	20400d96 <__sfp>
20400d62:	c048                	sw	a0,4(s0)
20400d64:	8522                	mv	a0,s0
20400d66:	2805                	jal	20400d96 <__sfp>
20400d68:	c408                	sw	a0,8(s0)
20400d6a:	8522                	mv	a0,s0
20400d6c:	202d                	jal	20400d96 <__sfp>
20400d6e:	c448                	sw	a0,12(s0)
20400d70:	4048                	lw	a0,4(s0)
20400d72:	4601                	li	a2,0
20400d74:	4591                	li	a1,4
20400d76:	3701                	jal	20400c76 <std>
20400d78:	4408                	lw	a0,8(s0)
20400d7a:	4605                	li	a2,1
20400d7c:	45a5                	li	a1,9
20400d7e:	3de5                	jal	20400c76 <std>
20400d80:	4448                	lw	a0,12(s0)
20400d82:	4609                	li	a2,2
20400d84:	45c9                	li	a1,18
20400d86:	3dc5                	jal	20400c76 <std>
20400d88:	4785                	li	a5,1
20400d8a:	cc1c                	sw	a5,24(s0)
20400d8c:	40b2                	lw	ra,12(sp)
20400d8e:	4422                	lw	s0,8(sp)
20400d90:	0141                	addi	sp,sp,16
20400d92:	8082                	ret
20400d94:	8082                	ret

20400d96 <__sfp>:
__sfp():
20400d96:	1141                	addi	sp,sp,-16
20400d98:	5fc00797          	auipc	a5,0x5fc00
20400d9c:	9f478793          	addi	a5,a5,-1548 # 8000078c <_global_impure_ptr>
20400da0:	c226                	sw	s1,4(sp)
20400da2:	4384                	lw	s1,0(a5)
20400da4:	c04a                	sw	s2,0(sp)
20400da6:	c606                	sw	ra,12(sp)
20400da8:	4c9c                	lw	a5,24(s1)
20400daa:	c422                	sw	s0,8(sp)
20400dac:	892a                	mv	s2,a0
20400dae:	e399                	bnez	a5,20400db4 <__sfp+0x1e>
20400db0:	8526                	mv	a0,s1
20400db2:	3fad                	jal	20400d2c <__sinit>
20400db4:	04848493          	addi	s1,s1,72
20400db8:	4480                	lw	s0,8(s1)
20400dba:	40dc                	lw	a5,4(s1)
20400dbc:	17fd                	addi	a5,a5,-1
20400dbe:	0007d663          	bgez	a5,20400dca <__sfp+0x34>
20400dc2:	409c                	lw	a5,0(s1)
20400dc4:	cfb1                	beqz	a5,20400e20 <__sfp+0x8a>
20400dc6:	4084                	lw	s1,0(s1)
20400dc8:	bfc5                	j	20400db8 <__sfp+0x22>
20400dca:	00c41703          	lh	a4,12(s0)
20400dce:	e731                	bnez	a4,20400e1a <__sfp+0x84>
20400dd0:	77c1                	lui	a5,0xffff0
20400dd2:	0785                	addi	a5,a5,1
20400dd4:	06042223          	sw	zero,100(s0)
20400dd8:	00042023          	sw	zero,0(s0)
20400ddc:	00042223          	sw	zero,4(s0)
20400de0:	00042423          	sw	zero,8(s0)
20400de4:	c45c                	sw	a5,12(s0)
20400de6:	00042823          	sw	zero,16(s0)
20400dea:	00042a23          	sw	zero,20(s0)
20400dee:	00042c23          	sw	zero,24(s0)
20400df2:	4621                	li	a2,8
20400df4:	4581                	li	a1,0
20400df6:	05c40513          	addi	a0,s0,92
20400dfa:	2a69                	jal	20400f94 <memset>
20400dfc:	02042a23          	sw	zero,52(s0)
20400e00:	02042c23          	sw	zero,56(s0)
20400e04:	04042423          	sw	zero,72(s0)
20400e08:	04042623          	sw	zero,76(s0)
20400e0c:	8522                	mv	a0,s0
20400e0e:	40b2                	lw	ra,12(sp)
20400e10:	4422                	lw	s0,8(sp)
20400e12:	4492                	lw	s1,4(sp)
20400e14:	4902                	lw	s2,0(sp)
20400e16:	0141                	addi	sp,sp,16
20400e18:	8082                	ret
20400e1a:	06840413          	addi	s0,s0,104
20400e1e:	bf79                	j	20400dbc <__sfp+0x26>
20400e20:	4591                	li	a1,4
20400e22:	854a                	mv	a0,s2
20400e24:	35d1                	jal	20400ce8 <__sfmoreglue>
20400e26:	c088                	sw	a0,0(s1)
20400e28:	842a                	mv	s0,a0
20400e2a:	fd51                	bnez	a0,20400dc6 <__sfp+0x30>
20400e2c:	47b1                	li	a5,12
20400e2e:	00f92023          	sw	a5,0(s2)
20400e32:	bfe9                	j	20400e0c <__sfp+0x76>

20400e34 <_fwalk_reent>:
_fwalk_reent():
20400e34:	7179                	addi	sp,sp,-48
20400e36:	d422                	sw	s0,40(sp)
20400e38:	d04a                	sw	s2,32(sp)
20400e3a:	cc52                	sw	s4,24(sp)
20400e3c:	ca56                	sw	s5,20(sp)
20400e3e:	c85a                	sw	s6,16(sp)
20400e40:	c65e                	sw	s7,12(sp)
20400e42:	d606                	sw	ra,44(sp)
20400e44:	d226                	sw	s1,36(sp)
20400e46:	ce4e                	sw	s3,28(sp)
20400e48:	8a2a                	mv	s4,a0
20400e4a:	8aae                	mv	s5,a1
20400e4c:	04850413          	addi	s0,a0,72
20400e50:	4901                	li	s2,0
20400e52:	4b05                	li	s6,1
20400e54:	5bfd                	li	s7,-1
20400e56:	ec09                	bnez	s0,20400e70 <_fwalk_reent+0x3c>
20400e58:	50b2                	lw	ra,44(sp)
20400e5a:	5422                	lw	s0,40(sp)
20400e5c:	854a                	mv	a0,s2
20400e5e:	5492                	lw	s1,36(sp)
20400e60:	5902                	lw	s2,32(sp)
20400e62:	49f2                	lw	s3,28(sp)
20400e64:	4a62                	lw	s4,24(sp)
20400e66:	4ad2                	lw	s5,20(sp)
20400e68:	4b42                	lw	s6,16(sp)
20400e6a:	4bb2                	lw	s7,12(sp)
20400e6c:	6145                	addi	sp,sp,48
20400e6e:	8082                	ret
20400e70:	4404                	lw	s1,8(s0)
20400e72:	00442983          	lw	s3,4(s0)
20400e76:	19fd                	addi	s3,s3,-1
20400e78:	0009d463          	bgez	s3,20400e80 <_fwalk_reent+0x4c>
20400e7c:	4000                	lw	s0,0(s0)
20400e7e:	bfe1                	j	20400e56 <_fwalk_reent+0x22>
20400e80:	00c4d783          	lhu	a5,12(s1)
20400e84:	00fb7b63          	bgeu	s6,a5,20400e9a <_fwalk_reent+0x66>
20400e88:	00e49783          	lh	a5,14(s1)
20400e8c:	01778763          	beq	a5,s7,20400e9a <_fwalk_reent+0x66>
20400e90:	85a6                	mv	a1,s1
20400e92:	8552                	mv	a0,s4
20400e94:	9a82                	jalr	s5
20400e96:	00a96933          	or	s2,s2,a0
20400e9a:	06848493          	addi	s1,s1,104
20400e9e:	bfe1                	j	20400e76 <_fwalk_reent+0x42>

20400ea0 <__swhatbuf_r>:
__swhatbuf_r():
20400ea0:	7119                	addi	sp,sp,-128
20400ea2:	daa6                	sw	s1,116(sp)
20400ea4:	84ae                	mv	s1,a1
20400ea6:	00e59583          	lh	a1,14(a1)
20400eaa:	dca2                	sw	s0,120(sp)
20400eac:	de86                	sw	ra,124(sp)
20400eae:	8432                	mv	s0,a2
20400eb0:	0005dc63          	bgez	a1,20400ec8 <__swhatbuf_r+0x28>
20400eb4:	00c4d783          	lhu	a5,12(s1)
20400eb8:	0006a023          	sw	zero,0(a3)
20400ebc:	0807f793          	andi	a5,a5,128
20400ec0:	e39d                	bnez	a5,20400ee6 <__swhatbuf_r+0x46>
20400ec2:	40000793          	li	a5,1024
20400ec6:	a015                	j	20400eea <__swhatbuf_r+0x4a>
20400ec8:	0830                	addi	a2,sp,24
20400eca:	c636                	sw	a3,12(sp)
20400ecc:	2f15                	jal	20401600 <_fstat_r>
20400ece:	46b2                	lw	a3,12(sp)
20400ed0:	fe0542e3          	bltz	a0,20400eb4 <__swhatbuf_r+0x14>
20400ed4:	4772                	lw	a4,28(sp)
20400ed6:	67bd                	lui	a5,0xf
20400ed8:	8ff9                	and	a5,a5,a4
20400eda:	7779                	lui	a4,0xffffe
20400edc:	97ba                	add	a5,a5,a4
20400ede:	0017b793          	seqz	a5,a5
20400ee2:	c29c                	sw	a5,0(a3)
20400ee4:	bff9                	j	20400ec2 <__swhatbuf_r+0x22>
20400ee6:	04000793          	li	a5,64
20400eea:	c01c                	sw	a5,0(s0)
20400eec:	50f6                	lw	ra,124(sp)
20400eee:	5466                	lw	s0,120(sp)
20400ef0:	54d6                	lw	s1,116(sp)
20400ef2:	4501                	li	a0,0
20400ef4:	6109                	addi	sp,sp,128
20400ef6:	8082                	ret

20400ef8 <__smakebuf_r>:
__smakebuf_r():
20400ef8:	00c5d783          	lhu	a5,12(a1)
20400efc:	1101                	addi	sp,sp,-32
20400efe:	cc22                	sw	s0,24(sp)
20400f00:	ce06                	sw	ra,28(sp)
20400f02:	ca26                	sw	s1,20(sp)
20400f04:	c84a                	sw	s2,16(sp)
20400f06:	8b89                	andi	a5,a5,2
20400f08:	842e                	mv	s0,a1
20400f0a:	cf89                	beqz	a5,20400f24 <__smakebuf_r+0x2c>
20400f0c:	04740793          	addi	a5,s0,71
20400f10:	c01c                	sw	a5,0(s0)
20400f12:	c81c                	sw	a5,16(s0)
20400f14:	4785                	li	a5,1
20400f16:	c85c                	sw	a5,20(s0)
20400f18:	40f2                	lw	ra,28(sp)
20400f1a:	4462                	lw	s0,24(sp)
20400f1c:	44d2                	lw	s1,20(sp)
20400f1e:	4942                	lw	s2,16(sp)
20400f20:	6105                	addi	sp,sp,32
20400f22:	8082                	ret
20400f24:	0074                	addi	a3,sp,12
20400f26:	0030                	addi	a2,sp,8
20400f28:	84aa                	mv	s1,a0
20400f2a:	3f9d                	jal	20400ea0 <__swhatbuf_r>
20400f2c:	45a2                	lw	a1,8(sp)
20400f2e:	892a                	mv	s2,a0
20400f30:	8526                	mv	a0,s1
20400f32:	2a5d                	jal	204010e8 <_malloc_r>
20400f34:	ed01                	bnez	a0,20400f4c <__smakebuf_r+0x54>
20400f36:	00c41783          	lh	a5,12(s0)
20400f3a:	2007f713          	andi	a4,a5,512
20400f3e:	ff69                	bnez	a4,20400f18 <__smakebuf_r+0x20>
20400f40:	9bf1                	andi	a5,a5,-4
20400f42:	0027e793          	ori	a5,a5,2
20400f46:	00f41623          	sh	a5,12(s0)
20400f4a:	b7c9                	j	20400f0c <__smakebuf_r+0x14>
20400f4c:	00000797          	auipc	a5,0x0
20400f50:	d9278793          	addi	a5,a5,-622 # 20400cde <_cleanup_r>
20400f54:	d49c                	sw	a5,40(s1)
20400f56:	00c45783          	lhu	a5,12(s0)
20400f5a:	c008                	sw	a0,0(s0)
20400f5c:	c808                	sw	a0,16(s0)
20400f5e:	0807e793          	ori	a5,a5,128
20400f62:	00f41623          	sh	a5,12(s0)
20400f66:	47a2                	lw	a5,8(sp)
20400f68:	c85c                	sw	a5,20(s0)
20400f6a:	47b2                	lw	a5,12(sp)
20400f6c:	cf89                	beqz	a5,20400f86 <__smakebuf_r+0x8e>
20400f6e:	00e41583          	lh	a1,14(s0)
20400f72:	8526                	mv	a0,s1
20400f74:	2d5d                	jal	2040162a <_isatty_r>
20400f76:	c901                	beqz	a0,20400f86 <__smakebuf_r+0x8e>
20400f78:	00c45783          	lhu	a5,12(s0)
20400f7c:	9bf1                	andi	a5,a5,-4
20400f7e:	0017e793          	ori	a5,a5,1
20400f82:	00f41623          	sh	a5,12(s0)
20400f86:	00c45783          	lhu	a5,12(s0)
20400f8a:	00f96933          	or	s2,s2,a5
20400f8e:	01241623          	sh	s2,12(s0)
20400f92:	b759                	j	20400f18 <__smakebuf_r+0x20>

20400f94 <memset>:
memset():
20400f94:	433d                	li	t1,15
20400f96:	872a                	mv	a4,a0
20400f98:	02c37363          	bgeu	t1,a2,20400fbe <memset+0x2a>
20400f9c:	00f77793          	andi	a5,a4,15
20400fa0:	efbd                	bnez	a5,2040101e <memset+0x8a>
20400fa2:	e5ad                	bnez	a1,2040100c <memset+0x78>
20400fa4:	ff067693          	andi	a3,a2,-16
20400fa8:	8a3d                	andi	a2,a2,15
20400faa:	96ba                	add	a3,a3,a4
20400fac:	c30c                	sw	a1,0(a4)
20400fae:	c34c                	sw	a1,4(a4)
20400fb0:	c70c                	sw	a1,8(a4)
20400fb2:	c74c                	sw	a1,12(a4)
20400fb4:	0741                	addi	a4,a4,16
20400fb6:	fed76be3          	bltu	a4,a3,20400fac <memset+0x18>
20400fba:	e211                	bnez	a2,20400fbe <memset+0x2a>
20400fbc:	8082                	ret
20400fbe:	40c306b3          	sub	a3,t1,a2
20400fc2:	068a                	slli	a3,a3,0x2
20400fc4:	00000297          	auipc	t0,0x0
20400fc8:	9696                	add	a3,a3,t0
20400fca:	00a68067          	jr	10(a3)
20400fce:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffcb72>
20400fd2:	00b706a3          	sb	a1,13(a4)
20400fd6:	00b70623          	sb	a1,12(a4)
20400fda:	00b705a3          	sb	a1,11(a4)
20400fde:	00b70523          	sb	a1,10(a4)
20400fe2:	00b704a3          	sb	a1,9(a4)
20400fe6:	00b70423          	sb	a1,8(a4)
20400fea:	00b703a3          	sb	a1,7(a4)
20400fee:	00b70323          	sb	a1,6(a4)
20400ff2:	00b702a3          	sb	a1,5(a4)
20400ff6:	00b70223          	sb	a1,4(a4)
20400ffa:	00b701a3          	sb	a1,3(a4)
20400ffe:	00b70123          	sb	a1,2(a4)
20401002:	00b700a3          	sb	a1,1(a4)
20401006:	00b70023          	sb	a1,0(a4)
2040100a:	8082                	ret
2040100c:	0ff5f593          	andi	a1,a1,255
20401010:	00859693          	slli	a3,a1,0x8
20401014:	8dd5                	or	a1,a1,a3
20401016:	01059693          	slli	a3,a1,0x10
2040101a:	8dd5                	or	a1,a1,a3
2040101c:	b761                	j	20400fa4 <memset+0x10>
2040101e:	00279693          	slli	a3,a5,0x2
20401022:	00000297          	auipc	t0,0x0
20401026:	9696                	add	a3,a3,t0
20401028:	8286                	mv	t0,ra
2040102a:	fa8680e7          	jalr	-88(a3)
2040102e:	8096                	mv	ra,t0
20401030:	17c1                	addi	a5,a5,-16
20401032:	8f1d                	sub	a4,a4,a5
20401034:	963e                	add	a2,a2,a5
20401036:	f8c374e3          	bgeu	t1,a2,20400fbe <memset+0x2a>
2040103a:	b7a5                	j	20400fa2 <memset+0xe>

2040103c <_free_r>:
_free_r():
2040103c:	c5cd                	beqz	a1,204010e6 <_free_r+0xaa>
2040103e:	ffc5a783          	lw	a5,-4(a1)
20401042:	1141                	addi	sp,sp,-16
20401044:	c422                	sw	s0,8(sp)
20401046:	c606                	sw	ra,12(sp)
20401048:	c226                	sw	s1,4(sp)
2040104a:	ffc58413          	addi	s0,a1,-4
2040104e:	0007d363          	bgez	a5,20401054 <_free_r+0x18>
20401052:	943e                	add	s0,s0,a5
20401054:	84aa                	mv	s1,a0
20401056:	2589                	jal	20401698 <__malloc_lock>
20401058:	5fbff797          	auipc	a5,0x5fbff
2040105c:	75878793          	addi	a5,a5,1880 # 800007b0 <metal_segment_data_target_end>
20401060:	439c                	lw	a5,0(a5)
20401062:	ef89                	bnez	a5,2040107c <_free_r+0x40>
20401064:	00042223          	sw	zero,4(s0)
20401068:	5fbff797          	auipc	a5,0x5fbff
2040106c:	7487a423          	sw	s0,1864(a5) # 800007b0 <metal_segment_data_target_end>
20401070:	4422                	lw	s0,8(sp)
20401072:	40b2                	lw	ra,12(sp)
20401074:	8526                	mv	a0,s1
20401076:	4492                	lw	s1,4(sp)
20401078:	0141                	addi	sp,sp,16
2040107a:	a505                	j	2040169a <__malloc_unlock>
2040107c:	00f47e63          	bgeu	s0,a5,20401098 <_free_r+0x5c>
20401080:	4014                	lw	a3,0(s0)
20401082:	00d40733          	add	a4,s0,a3
20401086:	00e79663          	bne	a5,a4,20401092 <_free_r+0x56>
2040108a:	4398                	lw	a4,0(a5)
2040108c:	43dc                	lw	a5,4(a5)
2040108e:	9736                	add	a4,a4,a3
20401090:	c018                	sw	a4,0(s0)
20401092:	c05c                	sw	a5,4(s0)
20401094:	bfd1                	j	20401068 <_free_r+0x2c>
20401096:	87ba                	mv	a5,a4
20401098:	43d8                	lw	a4,4(a5)
2040109a:	c319                	beqz	a4,204010a0 <_free_r+0x64>
2040109c:	fee47de3          	bgeu	s0,a4,20401096 <_free_r+0x5a>
204010a0:	4394                	lw	a3,0(a5)
204010a2:	00d78633          	add	a2,a5,a3
204010a6:	00861f63          	bne	a2,s0,204010c4 <_free_r+0x88>
204010aa:	4010                	lw	a2,0(s0)
204010ac:	96b2                	add	a3,a3,a2
204010ae:	c394                	sw	a3,0(a5)
204010b0:	00d78633          	add	a2,a5,a3
204010b4:	fac71ee3          	bne	a4,a2,20401070 <_free_r+0x34>
204010b8:	4310                	lw	a2,0(a4)
204010ba:	4358                	lw	a4,4(a4)
204010bc:	96b2                	add	a3,a3,a2
204010be:	c394                	sw	a3,0(a5)
204010c0:	c3d8                	sw	a4,4(a5)
204010c2:	b77d                	j	20401070 <_free_r+0x34>
204010c4:	00c47563          	bgeu	s0,a2,204010ce <_free_r+0x92>
204010c8:	47b1                	li	a5,12
204010ca:	c09c                	sw	a5,0(s1)
204010cc:	b755                	j	20401070 <_free_r+0x34>
204010ce:	4010                	lw	a2,0(s0)
204010d0:	00c406b3          	add	a3,s0,a2
204010d4:	00d71663          	bne	a4,a3,204010e0 <_free_r+0xa4>
204010d8:	4314                	lw	a3,0(a4)
204010da:	4358                	lw	a4,4(a4)
204010dc:	96b2                	add	a3,a3,a2
204010de:	c014                	sw	a3,0(s0)
204010e0:	c058                	sw	a4,4(s0)
204010e2:	c3c0                	sw	s0,4(a5)
204010e4:	b771                	j	20401070 <_free_r+0x34>
204010e6:	8082                	ret

204010e8 <_malloc_r>:
_malloc_r():
204010e8:	1101                	addi	sp,sp,-32
204010ea:	ca26                	sw	s1,20(sp)
204010ec:	00358493          	addi	s1,a1,3
204010f0:	98f1                	andi	s1,s1,-4
204010f2:	ce06                	sw	ra,28(sp)
204010f4:	cc22                	sw	s0,24(sp)
204010f6:	c84a                	sw	s2,16(sp)
204010f8:	c64e                	sw	s3,12(sp)
204010fa:	04a1                	addi	s1,s1,8
204010fc:	47b1                	li	a5,12
204010fe:	04f4f763          	bgeu	s1,a5,2040114c <_malloc_r+0x64>
20401102:	44b1                	li	s1,12
20401104:	04b4e663          	bltu	s1,a1,20401150 <_malloc_r+0x68>
20401108:	892a                	mv	s2,a0
2040110a:	2379                	jal	20401698 <__malloc_lock>
2040110c:	5fbff797          	auipc	a5,0x5fbff
20401110:	6a478793          	addi	a5,a5,1700 # 800007b0 <metal_segment_data_target_end>
20401114:	4398                	lw	a4,0(a5)
20401116:	843a                	mv	s0,a4
20401118:	e431                	bnez	s0,20401164 <_malloc_r+0x7c>
2040111a:	5fbff797          	auipc	a5,0x5fbff
2040111e:	69a78793          	addi	a5,a5,1690 # 800007b4 <__malloc_sbrk_start>
20401122:	439c                	lw	a5,0(a5)
20401124:	eb81                	bnez	a5,20401134 <_malloc_r+0x4c>
20401126:	4581                	li	a1,0
20401128:	854a                	mv	a0,s2
2040112a:	2645                	jal	204014ca <_sbrk_r>
2040112c:	5fbff797          	auipc	a5,0x5fbff
20401130:	68a7a423          	sw	a0,1672(a5) # 800007b4 <__malloc_sbrk_start>
20401134:	85a6                	mv	a1,s1
20401136:	854a                	mv	a0,s2
20401138:	2e49                	jal	204014ca <_sbrk_r>
2040113a:	59fd                	li	s3,-1
2040113c:	07351963          	bne	a0,s3,204011ae <_malloc_r+0xc6>
20401140:	47b1                	li	a5,12
20401142:	00f92023          	sw	a5,0(s2)
20401146:	854a                	mv	a0,s2
20401148:	2b89                	jal	2040169a <__malloc_unlock>
2040114a:	a029                	j	20401154 <_malloc_r+0x6c>
2040114c:	fa04dce3          	bgez	s1,20401104 <_malloc_r+0x1c>
20401150:	47b1                	li	a5,12
20401152:	c11c                	sw	a5,0(a0)
20401154:	4501                	li	a0,0
20401156:	40f2                	lw	ra,28(sp)
20401158:	4462                	lw	s0,24(sp)
2040115a:	44d2                	lw	s1,20(sp)
2040115c:	4942                	lw	s2,16(sp)
2040115e:	49b2                	lw	s3,12(sp)
20401160:	6105                	addi	sp,sp,32
20401162:	8082                	ret
20401164:	401c                	lw	a5,0(s0)
20401166:	8f85                	sub	a5,a5,s1
20401168:	0407c063          	bltz	a5,204011a8 <_malloc_r+0xc0>
2040116c:	46ad                	li	a3,11
2040116e:	00f6f663          	bgeu	a3,a5,2040117a <_malloc_r+0x92>
20401172:	c01c                	sw	a5,0(s0)
20401174:	943e                	add	s0,s0,a5
20401176:	c004                	sw	s1,0(s0)
20401178:	a801                	j	20401188 <_malloc_r+0xa0>
2040117a:	405c                	lw	a5,4(s0)
2040117c:	02871463          	bne	a4,s0,204011a4 <_malloc_r+0xbc>
20401180:	5fbff717          	auipc	a4,0x5fbff
20401184:	62f72823          	sw	a5,1584(a4) # 800007b0 <metal_segment_data_target_end>
20401188:	854a                	mv	a0,s2
2040118a:	2b01                	jal	2040169a <__malloc_unlock>
2040118c:	00b40513          	addi	a0,s0,11
20401190:	00440793          	addi	a5,s0,4
20401194:	9961                	andi	a0,a0,-8
20401196:	40f50733          	sub	a4,a0,a5
2040119a:	df55                	beqz	a4,20401156 <_malloc_r+0x6e>
2040119c:	943a                	add	s0,s0,a4
2040119e:	8f89                	sub	a5,a5,a0
204011a0:	c01c                	sw	a5,0(s0)
204011a2:	bf55                	j	20401156 <_malloc_r+0x6e>
204011a4:	c35c                	sw	a5,4(a4)
204011a6:	b7cd                	j	20401188 <_malloc_r+0xa0>
204011a8:	8722                	mv	a4,s0
204011aa:	4040                	lw	s0,4(s0)
204011ac:	b7b5                	j	20401118 <_malloc_r+0x30>
204011ae:	00350413          	addi	s0,a0,3
204011b2:	9871                	andi	s0,s0,-4
204011b4:	fc8501e3          	beq	a0,s0,20401176 <_malloc_r+0x8e>
204011b8:	40a405b3          	sub	a1,s0,a0
204011bc:	854a                	mv	a0,s2
204011be:	2631                	jal	204014ca <_sbrk_r>
204011c0:	fb351be3          	bne	a0,s3,20401176 <_malloc_r+0x8e>
204011c4:	bfb5                	j	20401140 <_malloc_r+0x58>

204011c6 <__sfputc_r>:
__sfputc_r():
204011c6:	461c                	lw	a5,8(a2)
204011c8:	17fd                	addi	a5,a5,-1
204011ca:	c61c                	sw	a5,8(a2)
204011cc:	0007da63          	bgez	a5,204011e0 <__sfputc_r+0x1a>
204011d0:	4e18                	lw	a4,24(a2)
204011d2:	00e7c563          	blt	a5,a4,204011dc <__sfputc_r+0x16>
204011d6:	47a9                	li	a5,10
204011d8:	00f59463          	bne	a1,a5,204011e0 <__sfputc_r+0x1a>
204011dc:	f1cff06f          	j	204008f8 <__swbuf_r>
204011e0:	421c                	lw	a5,0(a2)
204011e2:	852e                	mv	a0,a1
204011e4:	00178713          	addi	a4,a5,1
204011e8:	c218                	sw	a4,0(a2)
204011ea:	00b78023          	sb	a1,0(a5)
204011ee:	8082                	ret

204011f0 <__sfputs_r>:
__sfputs_r():
204011f0:	1101                	addi	sp,sp,-32
204011f2:	cc22                	sw	s0,24(sp)
204011f4:	ca26                	sw	s1,20(sp)
204011f6:	c84a                	sw	s2,16(sp)
204011f8:	c64e                	sw	s3,12(sp)
204011fa:	c452                	sw	s4,8(sp)
204011fc:	ce06                	sw	ra,28(sp)
204011fe:	892a                	mv	s2,a0
20401200:	89ae                	mv	s3,a1
20401202:	8432                	mv	s0,a2
20401204:	00d604b3          	add	s1,a2,a3
20401208:	5a7d                	li	s4,-1
2040120a:	00941463          	bne	s0,s1,20401212 <__sfputs_r+0x22>
2040120e:	4501                	li	a0,0
20401210:	a809                	j	20401222 <__sfputs_r+0x32>
20401212:	00044583          	lbu	a1,0(s0)
20401216:	864e                	mv	a2,s3
20401218:	854a                	mv	a0,s2
2040121a:	3775                	jal	204011c6 <__sfputc_r>
2040121c:	0405                	addi	s0,s0,1
2040121e:	ff4516e3          	bne	a0,s4,2040120a <__sfputs_r+0x1a>
20401222:	40f2                	lw	ra,28(sp)
20401224:	4462                	lw	s0,24(sp)
20401226:	44d2                	lw	s1,20(sp)
20401228:	4942                	lw	s2,16(sp)
2040122a:	49b2                	lw	s3,12(sp)
2040122c:	4a22                	lw	s4,8(sp)
2040122e:	6105                	addi	sp,sp,32
20401230:	8082                	ret

20401232 <_vfiprintf_r>:
_vfiprintf_r():
20401232:	7135                	addi	sp,sp,-160
20401234:	cd22                	sw	s0,152(sp)
20401236:	cb26                	sw	s1,148(sp)
20401238:	c94a                	sw	s2,144(sp)
2040123a:	c74e                	sw	s3,140(sp)
2040123c:	cf06                	sw	ra,156(sp)
2040123e:	c552                	sw	s4,136(sp)
20401240:	c356                	sw	s5,132(sp)
20401242:	c15a                	sw	s6,128(sp)
20401244:	dede                	sw	s7,124(sp)
20401246:	dce2                	sw	s8,120(sp)
20401248:	dae6                	sw	s9,116(sp)
2040124a:	89aa                	mv	s3,a0
2040124c:	84ae                	mv	s1,a1
2040124e:	8932                	mv	s2,a2
20401250:	8436                	mv	s0,a3
20401252:	c501                	beqz	a0,2040125a <_vfiprintf_r+0x28>
20401254:	4d1c                	lw	a5,24(a0)
20401256:	e391                	bnez	a5,2040125a <_vfiprintf_r+0x28>
20401258:	3cd1                	jal	20400d2c <__sinit>
2040125a:	00004797          	auipc	a5,0x4
2040125e:	30e78793          	addi	a5,a5,782 # 20405568 <__sf_fake_stdin>
20401262:	0cf49b63          	bne	s1,a5,20401338 <_vfiprintf_r+0x106>
20401266:	0049a483          	lw	s1,4(s3)
2040126a:	00c4d783          	lhu	a5,12(s1)
2040126e:	8ba1                	andi	a5,a5,8
20401270:	c7f5                	beqz	a5,2040135c <_vfiprintf_r+0x12a>
20401272:	489c                	lw	a5,16(s1)
20401274:	c7e5                	beqz	a5,2040135c <_vfiprintf_r+0x12a>
20401276:	02000793          	li	a5,32
2040127a:	02f104a3          	sb	a5,41(sp)
2040127e:	03000793          	li	a5,48
20401282:	d202                	sw	zero,36(sp)
20401284:	02f10523          	sb	a5,42(sp)
20401288:	c622                	sw	s0,12(sp)
2040128a:	02500b93          	li	s7,37
2040128e:	00004a97          	auipc	s5,0x4
20401292:	31aa8a93          	addi	s5,s5,794 # 204055a8 <__sf_fake_stdout+0x20>
20401296:	4c05                	li	s8,1
20401298:	4b29                	li	s6,10
2040129a:	844a                	mv	s0,s2
2040129c:	00044783          	lbu	a5,0(s0)
204012a0:	c399                	beqz	a5,204012a6 <_vfiprintf_r+0x74>
204012a2:	0f779063          	bne	a5,s7,20401382 <_vfiprintf_r+0x150>
204012a6:	41240cb3          	sub	s9,s0,s2
204012aa:	000c8d63          	beqz	s9,204012c4 <_vfiprintf_r+0x92>
204012ae:	86e6                	mv	a3,s9
204012b0:	864a                	mv	a2,s2
204012b2:	85a6                	mv	a1,s1
204012b4:	854e                	mv	a0,s3
204012b6:	3f2d                	jal	204011f0 <__sfputs_r>
204012b8:	57fd                	li	a5,-1
204012ba:	1ef50663          	beq	a0,a5,204014a6 <_vfiprintf_r+0x274>
204012be:	5692                	lw	a3,36(sp)
204012c0:	96e6                	add	a3,a3,s9
204012c2:	d236                	sw	a3,36(sp)
204012c4:	00044783          	lbu	a5,0(s0)
204012c8:	1c078f63          	beqz	a5,204014a6 <_vfiprintf_r+0x274>
204012cc:	57fd                	li	a5,-1
204012ce:	00140913          	addi	s2,s0,1
204012d2:	c802                	sw	zero,16(sp)
204012d4:	ce02                	sw	zero,28(sp)
204012d6:	ca3e                	sw	a5,20(sp)
204012d8:	cc02                	sw	zero,24(sp)
204012da:	040109a3          	sb	zero,83(sp)
204012de:	d482                	sw	zero,104(sp)
204012e0:	00094583          	lbu	a1,0(s2)
204012e4:	4615                	li	a2,5
204012e6:	8556                	mv	a0,s5
204012e8:	2e59                	jal	2040167e <memchr>
204012ea:	00190413          	addi	s0,s2,1
204012ee:	47c2                	lw	a5,16(sp)
204012f0:	e959                	bnez	a0,20401386 <_vfiprintf_r+0x154>
204012f2:	0107f713          	andi	a4,a5,16
204012f6:	c709                	beqz	a4,20401300 <_vfiprintf_r+0xce>
204012f8:	02000713          	li	a4,32
204012fc:	04e109a3          	sb	a4,83(sp)
20401300:	0087f713          	andi	a4,a5,8
20401304:	c709                	beqz	a4,2040130e <_vfiprintf_r+0xdc>
20401306:	02b00713          	li	a4,43
2040130a:	04e109a3          	sb	a4,83(sp)
2040130e:	00094683          	lbu	a3,0(s2)
20401312:	02a00713          	li	a4,42
20401316:	08e68063          	beq	a3,a4,20401396 <_vfiprintf_r+0x164>
2040131a:	47f2                	lw	a5,28(sp)
2040131c:	844a                	mv	s0,s2
2040131e:	4681                	li	a3,0
20401320:	4625                	li	a2,9
20401322:	00044703          	lbu	a4,0(s0)
20401326:	00140593          	addi	a1,s0,1
2040132a:	fd070713          	addi	a4,a4,-48
2040132e:	0ae67963          	bgeu	a2,a4,204013e0 <_vfiprintf_r+0x1ae>
20401332:	cab5                	beqz	a3,204013a6 <_vfiprintf_r+0x174>
20401334:	ce3e                	sw	a5,28(sp)
20401336:	a885                	j	204013a6 <_vfiprintf_r+0x174>
20401338:	00004797          	auipc	a5,0x4
2040133c:	25078793          	addi	a5,a5,592 # 20405588 <__sf_fake_stdout>
20401340:	00f49563          	bne	s1,a5,2040134a <_vfiprintf_r+0x118>
20401344:	0089a483          	lw	s1,8(s3)
20401348:	b70d                	j	2040126a <_vfiprintf_r+0x38>
2040134a:	00004797          	auipc	a5,0x4
2040134e:	1fe78793          	addi	a5,a5,510 # 20405548 <__sf_fake_stderr>
20401352:	f0f49ce3          	bne	s1,a5,2040126a <_vfiprintf_r+0x38>
20401356:	00c9a483          	lw	s1,12(s3)
2040135a:	bf01                	j	2040126a <_vfiprintf_r+0x38>
2040135c:	85a6                	mv	a1,s1
2040135e:	854e                	mv	a0,s3
20401360:	e58ff0ef          	jal	ra,204009b8 <__swsetup_r>
20401364:	d909                	beqz	a0,20401276 <_vfiprintf_r+0x44>
20401366:	557d                	li	a0,-1
20401368:	40fa                	lw	ra,156(sp)
2040136a:	446a                	lw	s0,152(sp)
2040136c:	44da                	lw	s1,148(sp)
2040136e:	494a                	lw	s2,144(sp)
20401370:	49ba                	lw	s3,140(sp)
20401372:	4a2a                	lw	s4,136(sp)
20401374:	4a9a                	lw	s5,132(sp)
20401376:	4b0a                	lw	s6,128(sp)
20401378:	5bf6                	lw	s7,124(sp)
2040137a:	5c66                	lw	s8,120(sp)
2040137c:	5cd6                	lw	s9,116(sp)
2040137e:	610d                	addi	sp,sp,160
20401380:	8082                	ret
20401382:	0405                	addi	s0,s0,1
20401384:	bf21                	j	2040129c <_vfiprintf_r+0x6a>
20401386:	41550533          	sub	a0,a0,s5
2040138a:	00ac1533          	sll	a0,s8,a0
2040138e:	8fc9                	or	a5,a5,a0
20401390:	c83e                	sw	a5,16(sp)
20401392:	8922                	mv	s2,s0
20401394:	b7b1                	j	204012e0 <_vfiprintf_r+0xae>
20401396:	4732                	lw	a4,12(sp)
20401398:	00470693          	addi	a3,a4,4
2040139c:	4318                	lw	a4,0(a4)
2040139e:	c636                	sw	a3,12(sp)
204013a0:	02074963          	bltz	a4,204013d2 <_vfiprintf_r+0x1a0>
204013a4:	ce3a                	sw	a4,28(sp)
204013a6:	00044703          	lbu	a4,0(s0)
204013aa:	02e00793          	li	a5,46
204013ae:	04f71f63          	bne	a4,a5,2040140c <_vfiprintf_r+0x1da>
204013b2:	00144703          	lbu	a4,1(s0)
204013b6:	02a00793          	li	a5,42
204013ba:	02f71b63          	bne	a4,a5,204013f0 <_vfiprintf_r+0x1be>
204013be:	47b2                	lw	a5,12(sp)
204013c0:	0409                	addi	s0,s0,2
204013c2:	00478713          	addi	a4,a5,4
204013c6:	439c                	lw	a5,0(a5)
204013c8:	c63a                	sw	a4,12(sp)
204013ca:	0207c163          	bltz	a5,204013ec <_vfiprintf_r+0x1ba>
204013ce:	ca3e                	sw	a5,20(sp)
204013d0:	a835                	j	2040140c <_vfiprintf_r+0x1da>
204013d2:	40e00733          	neg	a4,a4
204013d6:	0027e793          	ori	a5,a5,2
204013da:	ce3a                	sw	a4,28(sp)
204013dc:	c83e                	sw	a5,16(sp)
204013de:	b7e1                	j	204013a6 <_vfiprintf_r+0x174>
204013e0:	036787b3          	mul	a5,a5,s6
204013e4:	4685                	li	a3,1
204013e6:	842e                	mv	s0,a1
204013e8:	97ba                	add	a5,a5,a4
204013ea:	bf25                	j	20401322 <_vfiprintf_r+0xf0>
204013ec:	57fd                	li	a5,-1
204013ee:	b7c5                	j	204013ce <_vfiprintf_r+0x19c>
204013f0:	0405                	addi	s0,s0,1
204013f2:	ca02                	sw	zero,20(sp)
204013f4:	4681                	li	a3,0
204013f6:	4781                	li	a5,0
204013f8:	4625                	li	a2,9
204013fa:	00044703          	lbu	a4,0(s0)
204013fe:	00140593          	addi	a1,s0,1
20401402:	fd070713          	addi	a4,a4,-48
20401406:	06e67663          	bgeu	a2,a4,20401472 <_vfiprintf_r+0x240>
2040140a:	f2f1                	bnez	a3,204013ce <_vfiprintf_r+0x19c>
2040140c:	00044583          	lbu	a1,0(s0)
20401410:	460d                	li	a2,3
20401412:	00004517          	auipc	a0,0x4
20401416:	19e50513          	addi	a0,a0,414 # 204055b0 <__sf_fake_stdout+0x28>
2040141a:	2495                	jal	2040167e <memchr>
2040141c:	cd11                	beqz	a0,20401438 <_vfiprintf_r+0x206>
2040141e:	00004797          	auipc	a5,0x4
20401422:	19278793          	addi	a5,a5,402 # 204055b0 <__sf_fake_stdout+0x28>
20401426:	8d1d                	sub	a0,a0,a5
20401428:	04000793          	li	a5,64
2040142c:	00a797b3          	sll	a5,a5,a0
20401430:	4542                	lw	a0,16(sp)
20401432:	0405                	addi	s0,s0,1
20401434:	8d5d                	or	a0,a0,a5
20401436:	c82a                	sw	a0,16(sp)
20401438:	00044583          	lbu	a1,0(s0)
2040143c:	4619                	li	a2,6
2040143e:	00004517          	auipc	a0,0x4
20401442:	17650513          	addi	a0,a0,374 # 204055b4 <__sf_fake_stdout+0x2c>
20401446:	00140913          	addi	s2,s0,1
2040144a:	02b10423          	sb	a1,40(sp)
2040144e:	2c05                	jal	2040167e <memchr>
20401450:	c13d                	beqz	a0,204014b6 <_vfiprintf_r+0x284>
20401452:	dfbff797          	auipc	a5,0xdfbff
20401456:	bae78793          	addi	a5,a5,-1106 # 0 <__metal_boot_hart>
2040145a:	e795                	bnez	a5,20401486 <_vfiprintf_r+0x254>
2040145c:	4742                	lw	a4,16(sp)
2040145e:	47b2                	lw	a5,12(sp)
20401460:	10077713          	andi	a4,a4,256
20401464:	cf09                	beqz	a4,2040147e <_vfiprintf_r+0x24c>
20401466:	0791                	addi	a5,a5,4
20401468:	c63e                	sw	a5,12(sp)
2040146a:	5792                	lw	a5,36(sp)
2040146c:	97d2                	add	a5,a5,s4
2040146e:	d23e                	sw	a5,36(sp)
20401470:	b52d                	j	2040129a <_vfiprintf_r+0x68>
20401472:	036787b3          	mul	a5,a5,s6
20401476:	4685                	li	a3,1
20401478:	842e                	mv	s0,a1
2040147a:	97ba                	add	a5,a5,a4
2040147c:	bfbd                	j	204013fa <_vfiprintf_r+0x1c8>
2040147e:	079d                	addi	a5,a5,7
20401480:	9be1                	andi	a5,a5,-8
20401482:	07a1                	addi	a5,a5,8
20401484:	b7d5                	j	20401468 <_vfiprintf_r+0x236>
20401486:	0078                	addi	a4,sp,12
20401488:	00000697          	auipc	a3,0x0
2040148c:	d6868693          	addi	a3,a3,-664 # 204011f0 <__sfputs_r>
20401490:	8626                	mv	a2,s1
20401492:	080c                	addi	a1,sp,16
20401494:	854e                	mv	a0,s3
20401496:	00000097          	auipc	ra,0x0
2040149a:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
2040149e:	57fd                	li	a5,-1
204014a0:	8a2a                	mv	s4,a0
204014a2:	fcf514e3          	bne	a0,a5,2040146a <_vfiprintf_r+0x238>
204014a6:	00c4d783          	lhu	a5,12(s1)
204014aa:	0407f793          	andi	a5,a5,64
204014ae:	ea079ce3          	bnez	a5,20401366 <_vfiprintf_r+0x134>
204014b2:	5512                	lw	a0,36(sp)
204014b4:	bd55                	j	20401368 <_vfiprintf_r+0x136>
204014b6:	0078                	addi	a4,sp,12
204014b8:	00000697          	auipc	a3,0x0
204014bc:	d3868693          	addi	a3,a3,-712 # 204011f0 <__sfputs_r>
204014c0:	8626                	mv	a2,s1
204014c2:	080c                	addi	a1,sp,16
204014c4:	854e                	mv	a0,s3
204014c6:	24cd                	jal	204017a8 <_printf_i>
204014c8:	bfd9                	j	2040149e <_vfiprintf_r+0x26c>

204014ca <_sbrk_r>:
_sbrk_r():
204014ca:	1141                	addi	sp,sp,-16
204014cc:	c422                	sw	s0,8(sp)
204014ce:	842a                	mv	s0,a0
204014d0:	852e                	mv	a0,a1
204014d2:	9001a823          	sw	zero,-1776(gp) # 80000898 <errno>
204014d6:	c606                	sw	ra,12(sp)
204014d8:	2da9                	jal	20401b32 <_sbrk>
204014da:	57fd                	li	a5,-1
204014dc:	00f51763          	bne	a0,a5,204014ea <_sbrk_r+0x20>
204014e0:	91018793          	addi	a5,gp,-1776 # 80000898 <errno>
204014e4:	439c                	lw	a5,0(a5)
204014e6:	c391                	beqz	a5,204014ea <_sbrk_r+0x20>
204014e8:	c01c                	sw	a5,0(s0)
204014ea:	40b2                	lw	ra,12(sp)
204014ec:	4422                	lw	s0,8(sp)
204014ee:	0141                	addi	sp,sp,16
204014f0:	8082                	ret

204014f2 <__sread>:
__sread():
204014f2:	1141                	addi	sp,sp,-16
204014f4:	c422                	sw	s0,8(sp)
204014f6:	842e                	mv	s0,a1
204014f8:	00e59583          	lh	a1,14(a1)
204014fc:	c606                	sw	ra,12(sp)
204014fe:	23b1                	jal	20401a4a <_read_r>
20401500:	00054963          	bltz	a0,20401512 <__sread+0x20>
20401504:	487c                	lw	a5,84(s0)
20401506:	97aa                	add	a5,a5,a0
20401508:	c87c                	sw	a5,84(s0)
2040150a:	40b2                	lw	ra,12(sp)
2040150c:	4422                	lw	s0,8(sp)
2040150e:	0141                	addi	sp,sp,16
20401510:	8082                	ret
20401512:	00c45783          	lhu	a5,12(s0)
20401516:	777d                	lui	a4,0xfffff
20401518:	177d                	addi	a4,a4,-1
2040151a:	8ff9                	and	a5,a5,a4
2040151c:	00f41623          	sh	a5,12(s0)
20401520:	b7ed                	j	2040150a <__sread+0x18>

20401522 <__swrite>:
__swrite():
20401522:	00c5d783          	lhu	a5,12(a1)
20401526:	1101                	addi	sp,sp,-32
20401528:	cc22                	sw	s0,24(sp)
2040152a:	ca26                	sw	s1,20(sp)
2040152c:	c84a                	sw	s2,16(sp)
2040152e:	c64e                	sw	s3,12(sp)
20401530:	ce06                	sw	ra,28(sp)
20401532:	1007f793          	andi	a5,a5,256
20401536:	84aa                	mv	s1,a0
20401538:	842e                	mv	s0,a1
2040153a:	8932                	mv	s2,a2
2040153c:	89b6                	mv	s3,a3
2040153e:	c791                	beqz	a5,2040154a <__swrite+0x28>
20401540:	00e59583          	lh	a1,14(a1)
20401544:	4689                	li	a3,2
20401546:	4601                	li	a2,0
20401548:	2229                	jal	20401652 <_lseek_r>
2040154a:	00c45783          	lhu	a5,12(s0)
2040154e:	777d                	lui	a4,0xfffff
20401550:	177d                	addi	a4,a4,-1
20401552:	8ff9                	and	a5,a5,a4
20401554:	00f41623          	sh	a5,12(s0)
20401558:	00e41583          	lh	a1,14(s0)
2040155c:	4462                	lw	s0,24(sp)
2040155e:	40f2                	lw	ra,28(sp)
20401560:	86ce                	mv	a3,s3
20401562:	864a                	mv	a2,s2
20401564:	49b2                	lw	s3,12(sp)
20401566:	4942                	lw	s2,16(sp)
20401568:	8526                	mv	a0,s1
2040156a:	44d2                	lw	s1,20(sp)
2040156c:	6105                	addi	sp,sp,32
2040156e:	a83d                	j	204015ac <_write_r>

20401570 <__sseek>:
__sseek():
20401570:	1141                	addi	sp,sp,-16
20401572:	c422                	sw	s0,8(sp)
20401574:	842e                	mv	s0,a1
20401576:	00e59583          	lh	a1,14(a1)
2040157a:	c606                	sw	ra,12(sp)
2040157c:	28d9                	jal	20401652 <_lseek_r>
2040157e:	57fd                	li	a5,-1
20401580:	00c45703          	lhu	a4,12(s0)
20401584:	00f51b63          	bne	a0,a5,2040159a <__sseek+0x2a>
20401588:	77fd                	lui	a5,0xfffff
2040158a:	17fd                	addi	a5,a5,-1
2040158c:	8ff9                	and	a5,a5,a4
2040158e:	00f41623          	sh	a5,12(s0)
20401592:	40b2                	lw	ra,12(sp)
20401594:	4422                	lw	s0,8(sp)
20401596:	0141                	addi	sp,sp,16
20401598:	8082                	ret
2040159a:	6785                	lui	a5,0x1
2040159c:	8fd9                	or	a5,a5,a4
2040159e:	00f41623          	sh	a5,12(s0)
204015a2:	c868                	sw	a0,84(s0)
204015a4:	b7fd                	j	20401592 <__sseek+0x22>

204015a6 <__sclose>:
__sclose():
204015a6:	00e59583          	lh	a1,14(a1)
204015aa:	a03d                	j	204015d8 <_close_r>

204015ac <_write_r>:
_write_r():
204015ac:	1141                	addi	sp,sp,-16
204015ae:	c422                	sw	s0,8(sp)
204015b0:	842a                	mv	s0,a0
204015b2:	852e                	mv	a0,a1
204015b4:	85b2                	mv	a1,a2
204015b6:	8636                	mv	a2,a3
204015b8:	9001a823          	sw	zero,-1776(gp) # 80000898 <errno>
204015bc:	c606                	sw	ra,12(sp)
204015be:	23cd                	jal	20401ba0 <_write>
204015c0:	57fd                	li	a5,-1
204015c2:	00f51763          	bne	a0,a5,204015d0 <_write_r+0x24>
204015c6:	91018793          	addi	a5,gp,-1776 # 80000898 <errno>
204015ca:	439c                	lw	a5,0(a5)
204015cc:	c391                	beqz	a5,204015d0 <_write_r+0x24>
204015ce:	c01c                	sw	a5,0(s0)
204015d0:	40b2                	lw	ra,12(sp)
204015d2:	4422                	lw	s0,8(sp)
204015d4:	0141                	addi	sp,sp,16
204015d6:	8082                	ret

204015d8 <_close_r>:
_close_r():
204015d8:	1141                	addi	sp,sp,-16
204015da:	c422                	sw	s0,8(sp)
204015dc:	842a                	mv	s0,a0
204015de:	852e                	mv	a0,a1
204015e0:	9001a823          	sw	zero,-1776(gp) # 80000898 <errno>
204015e4:	c606                	sw	ra,12(sp)
204015e6:	2941                	jal	20401a76 <_close>
204015e8:	57fd                	li	a5,-1
204015ea:	00f51763          	bne	a0,a5,204015f8 <_close_r+0x20>
204015ee:	91018793          	addi	a5,gp,-1776 # 80000898 <errno>
204015f2:	439c                	lw	a5,0(a5)
204015f4:	c391                	beqz	a5,204015f8 <_close_r+0x20>
204015f6:	c01c                	sw	a5,0(s0)
204015f8:	40b2                	lw	ra,12(sp)
204015fa:	4422                	lw	s0,8(sp)
204015fc:	0141                	addi	sp,sp,16
204015fe:	8082                	ret

20401600 <_fstat_r>:
_fstat_r():
20401600:	1141                	addi	sp,sp,-16
20401602:	c422                	sw	s0,8(sp)
20401604:	842a                	mv	s0,a0
20401606:	852e                	mv	a0,a1
20401608:	85b2                	mv	a1,a2
2040160a:	9001a823          	sw	zero,-1776(gp) # 80000898 <errno>
2040160e:	c606                	sw	ra,12(sp)
20401610:	2161                	jal	20401a98 <_fstat>
20401612:	57fd                	li	a5,-1
20401614:	00f51763          	bne	a0,a5,20401622 <_fstat_r+0x22>
20401618:	91018793          	addi	a5,gp,-1776 # 80000898 <errno>
2040161c:	439c                	lw	a5,0(a5)
2040161e:	c391                	beqz	a5,20401622 <_fstat_r+0x22>
20401620:	c01c                	sw	a5,0(s0)
20401622:	40b2                	lw	ra,12(sp)
20401624:	4422                	lw	s0,8(sp)
20401626:	0141                	addi	sp,sp,16
20401628:	8082                	ret

2040162a <_isatty_r>:
_isatty_r():
2040162a:	1141                	addi	sp,sp,-16
2040162c:	c422                	sw	s0,8(sp)
2040162e:	842a                	mv	s0,a0
20401630:	852e                	mv	a0,a1
20401632:	9001a823          	sw	zero,-1776(gp) # 80000898 <errno>
20401636:	c606                	sw	ra,12(sp)
20401638:	2159                	jal	20401abe <_isatty>
2040163a:	57fd                	li	a5,-1
2040163c:	00f51763          	bne	a0,a5,2040164a <_isatty_r+0x20>
20401640:	91018793          	addi	a5,gp,-1776 # 80000898 <errno>
20401644:	439c                	lw	a5,0(a5)
20401646:	c391                	beqz	a5,2040164a <_isatty_r+0x20>
20401648:	c01c                	sw	a5,0(s0)
2040164a:	40b2                	lw	ra,12(sp)
2040164c:	4422                	lw	s0,8(sp)
2040164e:	0141                	addi	sp,sp,16
20401650:	8082                	ret

20401652 <_lseek_r>:
_lseek_r():
20401652:	1141                	addi	sp,sp,-16
20401654:	c422                	sw	s0,8(sp)
20401656:	842a                	mv	s0,a0
20401658:	852e                	mv	a0,a1
2040165a:	85b2                	mv	a1,a2
2040165c:	8636                	mv	a2,a3
2040165e:	9001a823          	sw	zero,-1776(gp) # 80000898 <errno>
20401662:	c606                	sw	ra,12(sp)
20401664:	29ad                	jal	20401ade <_lseek>
20401666:	57fd                	li	a5,-1
20401668:	00f51763          	bne	a0,a5,20401676 <_lseek_r+0x24>
2040166c:	91018793          	addi	a5,gp,-1776 # 80000898 <errno>
20401670:	439c                	lw	a5,0(a5)
20401672:	c391                	beqz	a5,20401676 <_lseek_r+0x24>
20401674:	c01c                	sw	a5,0(s0)
20401676:	40b2                	lw	ra,12(sp)
20401678:	4422                	lw	s0,8(sp)
2040167a:	0141                	addi	sp,sp,16
2040167c:	8082                	ret

2040167e <memchr>:
memchr():
2040167e:	0ff5f593          	andi	a1,a1,255
20401682:	962a                	add	a2,a2,a0
20401684:	00c51463          	bne	a0,a2,2040168c <memchr+0xe>
20401688:	4501                	li	a0,0
2040168a:	8082                	ret
2040168c:	00054783          	lbu	a5,0(a0)
20401690:	feb78de3          	beq	a5,a1,2040168a <memchr+0xc>
20401694:	0505                	addi	a0,a0,1
20401696:	b7fd                	j	20401684 <memchr+0x6>

20401698 <__malloc_lock>:
__malloc_lock():
20401698:	8082                	ret

2040169a <__malloc_unlock>:
__malloc_unlock():
2040169a:	8082                	ret

2040169c <_printf_common>:
_printf_common():
2040169c:	7179                	addi	sp,sp,-48
2040169e:	ca56                	sw	s5,20(sp)
204016a0:	499c                	lw	a5,16(a1)
204016a2:	8aba                	mv	s5,a4
204016a4:	4598                	lw	a4,8(a1)
204016a6:	d422                	sw	s0,40(sp)
204016a8:	d226                	sw	s1,36(sp)
204016aa:	ce4e                	sw	s3,28(sp)
204016ac:	cc52                	sw	s4,24(sp)
204016ae:	d606                	sw	ra,44(sp)
204016b0:	d04a                	sw	s2,32(sp)
204016b2:	c85a                	sw	s6,16(sp)
204016b4:	c65e                	sw	s7,12(sp)
204016b6:	89aa                	mv	s3,a0
204016b8:	842e                	mv	s0,a1
204016ba:	84b2                	mv	s1,a2
204016bc:	8a36                	mv	s4,a3
204016be:	00e7d363          	bge	a5,a4,204016c4 <_printf_common+0x28>
204016c2:	87ba                	mv	a5,a4
204016c4:	c09c                	sw	a5,0(s1)
204016c6:	04344703          	lbu	a4,67(s0)
204016ca:	c319                	beqz	a4,204016d0 <_printf_common+0x34>
204016cc:	0785                	addi	a5,a5,1
204016ce:	c09c                	sw	a5,0(s1)
204016d0:	401c                	lw	a5,0(s0)
204016d2:	0207f793          	andi	a5,a5,32
204016d6:	c781                	beqz	a5,204016de <_printf_common+0x42>
204016d8:	409c                	lw	a5,0(s1)
204016da:	0789                	addi	a5,a5,2
204016dc:	c09c                	sw	a5,0(s1)
204016de:	00042903          	lw	s2,0(s0)
204016e2:	00697913          	andi	s2,s2,6
204016e6:	00091a63          	bnez	s2,204016fa <_printf_common+0x5e>
204016ea:	01940b13          	addi	s6,s0,25
204016ee:	5bfd                	li	s7,-1
204016f0:	445c                	lw	a5,12(s0)
204016f2:	4098                	lw	a4,0(s1)
204016f4:	8f99                	sub	a5,a5,a4
204016f6:	04f94c63          	blt	s2,a5,2040174e <_printf_common+0xb2>
204016fa:	401c                	lw	a5,0(s0)
204016fc:	04344683          	lbu	a3,67(s0)
20401700:	0207f793          	andi	a5,a5,32
20401704:	00d036b3          	snez	a3,a3
20401708:	eba5                	bnez	a5,20401778 <_printf_common+0xdc>
2040170a:	04340613          	addi	a2,s0,67
2040170e:	85d2                	mv	a1,s4
20401710:	854e                	mv	a0,s3
20401712:	9a82                	jalr	s5
20401714:	57fd                	li	a5,-1
20401716:	04f50363          	beq	a0,a5,2040175c <_printf_common+0xc0>
2040171a:	401c                	lw	a5,0(s0)
2040171c:	4611                	li	a2,4
2040171e:	4098                	lw	a4,0(s1)
20401720:	8b99                	andi	a5,a5,6
20401722:	4454                	lw	a3,12(s0)
20401724:	4481                	li	s1,0
20401726:	00c79763          	bne	a5,a2,20401734 <_printf_common+0x98>
2040172a:	40e684b3          	sub	s1,a3,a4
2040172e:	0004d363          	bgez	s1,20401734 <_printf_common+0x98>
20401732:	4481                	li	s1,0
20401734:	441c                	lw	a5,8(s0)
20401736:	4818                	lw	a4,16(s0)
20401738:	00f75463          	bge	a4,a5,20401740 <_printf_common+0xa4>
2040173c:	8f99                	sub	a5,a5,a4
2040173e:	94be                	add	s1,s1,a5
20401740:	4901                	li	s2,0
20401742:	0469                	addi	s0,s0,26
20401744:	5b7d                	li	s6,-1
20401746:	05249863          	bne	s1,s2,20401796 <_printf_common+0xfa>
2040174a:	4501                	li	a0,0
2040174c:	a809                	j	2040175e <_printf_common+0xc2>
2040174e:	4685                	li	a3,1
20401750:	865a                	mv	a2,s6
20401752:	85d2                	mv	a1,s4
20401754:	854e                	mv	a0,s3
20401756:	9a82                	jalr	s5
20401758:	01751e63          	bne	a0,s7,20401774 <_printf_common+0xd8>
2040175c:	557d                	li	a0,-1
2040175e:	50b2                	lw	ra,44(sp)
20401760:	5422                	lw	s0,40(sp)
20401762:	5492                	lw	s1,36(sp)
20401764:	5902                	lw	s2,32(sp)
20401766:	49f2                	lw	s3,28(sp)
20401768:	4a62                	lw	s4,24(sp)
2040176a:	4ad2                	lw	s5,20(sp)
2040176c:	4b42                	lw	s6,16(sp)
2040176e:	4bb2                	lw	s7,12(sp)
20401770:	6145                	addi	sp,sp,48
20401772:	8082                	ret
20401774:	0905                	addi	s2,s2,1
20401776:	bfad                	j	204016f0 <_printf_common+0x54>
20401778:	00d40733          	add	a4,s0,a3
2040177c:	03000613          	li	a2,48
20401780:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffdba7>
20401784:	04544703          	lbu	a4,69(s0)
20401788:	00168793          	addi	a5,a3,1
2040178c:	97a2                	add	a5,a5,s0
2040178e:	0689                	addi	a3,a3,2
20401790:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
20401794:	bf9d                	j	2040170a <_printf_common+0x6e>
20401796:	4685                	li	a3,1
20401798:	8622                	mv	a2,s0
2040179a:	85d2                	mv	a1,s4
2040179c:	854e                	mv	a0,s3
2040179e:	9a82                	jalr	s5
204017a0:	fb650ee3          	beq	a0,s6,2040175c <_printf_common+0xc0>
204017a4:	0905                	addi	s2,s2,1
204017a6:	b745                	j	20401746 <_printf_common+0xaa>

204017a8 <_printf_i>:
_printf_i():
204017a8:	7179                	addi	sp,sp,-48
204017aa:	d422                	sw	s0,40(sp)
204017ac:	d226                	sw	s1,36(sp)
204017ae:	d04a                	sw	s2,32(sp)
204017b0:	ce4e                	sw	s3,28(sp)
204017b2:	d606                	sw	ra,44(sp)
204017b4:	cc52                	sw	s4,24(sp)
204017b6:	ca56                	sw	s5,20(sp)
204017b8:	c85a                	sw	s6,16(sp)
204017ba:	89b6                	mv	s3,a3
204017bc:	0185c683          	lbu	a3,24(a1)
204017c0:	06e00793          	li	a5,110
204017c4:	8932                	mv	s2,a2
204017c6:	84aa                	mv	s1,a0
204017c8:	842e                	mv	s0,a1
204017ca:	04358613          	addi	a2,a1,67
204017ce:	1ef68063          	beq	a3,a5,204019ae <_printf_i+0x206>
204017d2:	06d7e263          	bltu	a5,a3,20401836 <_printf_i+0x8e>
204017d6:	06300793          	li	a5,99
204017da:	0af68263          	beq	a3,a5,2040187e <_printf_i+0xd6>
204017de:	00d7ed63          	bltu	a5,a3,204017f8 <_printf_i+0x50>
204017e2:	1e068a63          	beqz	a3,204019d6 <_printf_i+0x22e>
204017e6:	05800793          	li	a5,88
204017ea:	16f68663          	beq	a3,a5,20401956 <_printf_i+0x1ae>
204017ee:	04240a93          	addi	s5,s0,66
204017f2:	04d40123          	sb	a3,66(s0)
204017f6:	a869                	j	20401890 <_printf_i+0xe8>
204017f8:	06400793          	li	a5,100
204017fc:	00f68663          	beq	a3,a5,20401808 <_printf_i+0x60>
20401800:	06900793          	li	a5,105
20401804:	fef695e3          	bne	a3,a5,204017ee <_printf_i+0x46>
20401808:	401c                	lw	a5,0(s0)
2040180a:	4308                	lw	a0,0(a4)
2040180c:	0807f693          	andi	a3,a5,128
20401810:	00450593          	addi	a1,a0,4
20401814:	c2c1                	beqz	a3,20401894 <_printf_i+0xec>
20401816:	411c                	lw	a5,0(a0)
20401818:	c30c                	sw	a1,0(a4)
2040181a:	0007d863          	bgez	a5,2040182a <_printf_i+0x82>
2040181e:	02d00713          	li	a4,45
20401822:	40f007b3          	neg	a5,a5
20401826:	04e401a3          	sb	a4,67(s0)
2040182a:	00004697          	auipc	a3,0x4
2040182e:	d9268693          	addi	a3,a3,-622 # 204055bc <__sf_fake_stdout+0x34>
20401832:	4729                	li	a4,10
20401834:	a065                	j	204018dc <_printf_i+0x134>
20401836:	07300793          	li	a5,115
2040183a:	1af68263          	beq	a3,a5,204019de <_printf_i+0x236>
2040183e:	00d7ef63          	bltu	a5,a3,2040185c <_printf_i+0xb4>
20401842:	06f00793          	li	a5,111
20401846:	04f68f63          	beq	a3,a5,204018a4 <_printf_i+0xfc>
2040184a:	07000793          	li	a5,112
2040184e:	faf690e3          	bne	a3,a5,204017ee <_printf_i+0x46>
20401852:	419c                	lw	a5,0(a1)
20401854:	0207e793          	ori	a5,a5,32
20401858:	c19c                	sw	a5,0(a1)
2040185a:	a809                	j	2040186c <_printf_i+0xc4>
2040185c:	07500793          	li	a5,117
20401860:	04f68263          	beq	a3,a5,204018a4 <_printf_i+0xfc>
20401864:	07800793          	li	a5,120
20401868:	f8f693e3          	bne	a3,a5,204017ee <_printf_i+0x46>
2040186c:	07800793          	li	a5,120
20401870:	04f402a3          	sb	a5,69(s0)
20401874:	00004697          	auipc	a3,0x4
20401878:	d5c68693          	addi	a3,a3,-676 # 204055d0 <__sf_fake_stdout+0x48>
2040187c:	a0dd                	j	20401962 <_printf_i+0x1ba>
2040187e:	431c                	lw	a5,0(a4)
20401880:	04258a93          	addi	s5,a1,66
20401884:	00478693          	addi	a3,a5,4
20401888:	439c                	lw	a5,0(a5)
2040188a:	c314                	sw	a3,0(a4)
2040188c:	04f58123          	sb	a5,66(a1)
20401890:	4785                	li	a5,1
20401892:	a2ad                	j	204019fc <_printf_i+0x254>
20401894:	0407f693          	andi	a3,a5,64
20401898:	411c                	lw	a5,0(a0)
2040189a:	c30c                	sw	a1,0(a4)
2040189c:	debd                	beqz	a3,2040181a <_printf_i+0x72>
2040189e:	07c2                	slli	a5,a5,0x10
204018a0:	87c1                	srai	a5,a5,0x10
204018a2:	bfa5                	j	2040181a <_printf_i+0x72>
204018a4:	400c                	lw	a1,0(s0)
204018a6:	431c                	lw	a5,0(a4)
204018a8:	0805f813          	andi	a6,a1,128
204018ac:	00478513          	addi	a0,a5,4
204018b0:	00080563          	beqz	a6,204018ba <_printf_i+0x112>
204018b4:	c308                	sw	a0,0(a4)
204018b6:	439c                	lw	a5,0(a5)
204018b8:	a039                	j	204018c6 <_printf_i+0x11e>
204018ba:	0405f593          	andi	a1,a1,64
204018be:	c308                	sw	a0,0(a4)
204018c0:	d9fd                	beqz	a1,204018b6 <_printf_i+0x10e>
204018c2:	0007d783          	lhu	a5,0(a5)
204018c6:	06f00713          	li	a4,111
204018ca:	0ce68a63          	beq	a3,a4,2040199e <_printf_i+0x1f6>
204018ce:	00004697          	auipc	a3,0x4
204018d2:	cee68693          	addi	a3,a3,-786 # 204055bc <__sf_fake_stdout+0x34>
204018d6:	4729                	li	a4,10
204018d8:	040401a3          	sb	zero,67(s0)
204018dc:	404c                	lw	a1,4(s0)
204018de:	c40c                	sw	a1,8(s0)
204018e0:	0005c563          	bltz	a1,204018ea <_printf_i+0x142>
204018e4:	4008                	lw	a0,0(s0)
204018e6:	996d                	andi	a0,a0,-5
204018e8:	c008                	sw	a0,0(s0)
204018ea:	e399                	bnez	a5,204018f0 <_printf_i+0x148>
204018ec:	8ab2                	mv	s5,a2
204018ee:	cd91                	beqz	a1,2040190a <_printf_i+0x162>
204018f0:	8ab2                	mv	s5,a2
204018f2:	02e7f5b3          	remu	a1,a5,a4
204018f6:	1afd                	addi	s5,s5,-1
204018f8:	95b6                	add	a1,a1,a3
204018fa:	0005c583          	lbu	a1,0(a1)
204018fe:	00ba8023          	sb	a1,0(s5)
20401902:	02e7d5b3          	divu	a1,a5,a4
20401906:	0ae7f263          	bgeu	a5,a4,204019aa <_printf_i+0x202>
2040190a:	47a1                	li	a5,8
2040190c:	00f71e63          	bne	a4,a5,20401928 <_printf_i+0x180>
20401910:	401c                	lw	a5,0(s0)
20401912:	8b85                	andi	a5,a5,1
20401914:	cb91                	beqz	a5,20401928 <_printf_i+0x180>
20401916:	4058                	lw	a4,4(s0)
20401918:	481c                	lw	a5,16(s0)
2040191a:	00e7c763          	blt	a5,a4,20401928 <_printf_i+0x180>
2040191e:	03000793          	li	a5,48
20401922:	fefa8fa3          	sb	a5,-1(s5)
20401926:	1afd                	addi	s5,s5,-1
20401928:	41560633          	sub	a2,a2,s5
2040192c:	c810                	sw	a2,16(s0)
2040192e:	874e                	mv	a4,s3
20401930:	86ca                	mv	a3,s2
20401932:	0070                	addi	a2,sp,12
20401934:	85a2                	mv	a1,s0
20401936:	8526                	mv	a0,s1
20401938:	3395                	jal	2040169c <_printf_common>
2040193a:	5a7d                	li	s4,-1
2040193c:	0d451463          	bne	a0,s4,20401a04 <_printf_i+0x25c>
20401940:	557d                	li	a0,-1
20401942:	50b2                	lw	ra,44(sp)
20401944:	5422                	lw	s0,40(sp)
20401946:	5492                	lw	s1,36(sp)
20401948:	5902                	lw	s2,32(sp)
2040194a:	49f2                	lw	s3,28(sp)
2040194c:	4a62                	lw	s4,24(sp)
2040194e:	4ad2                	lw	s5,20(sp)
20401950:	4b42                	lw	s6,16(sp)
20401952:	6145                	addi	sp,sp,48
20401954:	8082                	ret
20401956:	04d582a3          	sb	a3,69(a1)
2040195a:	00004697          	auipc	a3,0x4
2040195e:	c6268693          	addi	a3,a3,-926 # 204055bc <__sf_fake_stdout+0x34>
20401962:	400c                	lw	a1,0(s0)
20401964:	4308                	lw	a0,0(a4)
20401966:	0805f813          	andi	a6,a1,128
2040196a:	411c                	lw	a5,0(a0)
2040196c:	0511                	addi	a0,a0,4
2040196e:	02080063          	beqz	a6,2040198e <_printf_i+0x1e6>
20401972:	c308                	sw	a0,0(a4)
20401974:	0015f713          	andi	a4,a1,1
20401978:	c701                	beqz	a4,20401980 <_printf_i+0x1d8>
2040197a:	0205e593          	ori	a1,a1,32
2040197e:	c00c                	sw	a1,0(s0)
20401980:	4741                	li	a4,16
20401982:	fbb9                	bnez	a5,204018d8 <_printf_i+0x130>
20401984:	400c                	lw	a1,0(s0)
20401986:	fdf5f593          	andi	a1,a1,-33
2040198a:	c00c                	sw	a1,0(s0)
2040198c:	b7b1                	j	204018d8 <_printf_i+0x130>
2040198e:	0405f813          	andi	a6,a1,64
20401992:	c308                	sw	a0,0(a4)
20401994:	fe0800e3          	beqz	a6,20401974 <_printf_i+0x1cc>
20401998:	07c2                	slli	a5,a5,0x10
2040199a:	83c1                	srli	a5,a5,0x10
2040199c:	bfe1                	j	20401974 <_printf_i+0x1cc>
2040199e:	00004697          	auipc	a3,0x4
204019a2:	c1e68693          	addi	a3,a3,-994 # 204055bc <__sf_fake_stdout+0x34>
204019a6:	4721                	li	a4,8
204019a8:	bf05                	j	204018d8 <_printf_i+0x130>
204019aa:	87ae                	mv	a5,a1
204019ac:	b799                	j	204018f2 <_printf_i+0x14a>
204019ae:	4194                	lw	a3,0(a1)
204019b0:	431c                	lw	a5,0(a4)
204019b2:	49cc                	lw	a1,20(a1)
204019b4:	0806f813          	andi	a6,a3,128
204019b8:	00478513          	addi	a0,a5,4
204019bc:	00080663          	beqz	a6,204019c8 <_printf_i+0x220>
204019c0:	c308                	sw	a0,0(a4)
204019c2:	439c                	lw	a5,0(a5)
204019c4:	c38c                	sw	a1,0(a5)
204019c6:	a801                	j	204019d6 <_printf_i+0x22e>
204019c8:	c308                	sw	a0,0(a4)
204019ca:	0406f693          	andi	a3,a3,64
204019ce:	439c                	lw	a5,0(a5)
204019d0:	daf5                	beqz	a3,204019c4 <_printf_i+0x21c>
204019d2:	00b79023          	sh	a1,0(a5)
204019d6:	00042823          	sw	zero,16(s0)
204019da:	8ab2                	mv	s5,a2
204019dc:	bf89                	j	2040192e <_printf_i+0x186>
204019de:	431c                	lw	a5,0(a4)
204019e0:	41d0                	lw	a2,4(a1)
204019e2:	4581                	li	a1,0
204019e4:	00478693          	addi	a3,a5,4
204019e8:	c314                	sw	a3,0(a4)
204019ea:	0007aa83          	lw	s5,0(a5)
204019ee:	8556                	mv	a0,s5
204019f0:	3179                	jal	2040167e <memchr>
204019f2:	c501                	beqz	a0,204019fa <_printf_i+0x252>
204019f4:	41550533          	sub	a0,a0,s5
204019f8:	c048                	sw	a0,4(s0)
204019fa:	405c                	lw	a5,4(s0)
204019fc:	c81c                	sw	a5,16(s0)
204019fe:	040401a3          	sb	zero,67(s0)
20401a02:	b735                	j	2040192e <_printf_i+0x186>
20401a04:	4814                	lw	a3,16(s0)
20401a06:	8656                	mv	a2,s5
20401a08:	85ca                	mv	a1,s2
20401a0a:	8526                	mv	a0,s1
20401a0c:	9982                	jalr	s3
20401a0e:	f34509e3          	beq	a0,s4,20401940 <_printf_i+0x198>
20401a12:	401c                	lw	a5,0(s0)
20401a14:	8b89                	andi	a5,a5,2
20401a16:	e78d                	bnez	a5,20401a40 <_printf_i+0x298>
20401a18:	47b2                	lw	a5,12(sp)
20401a1a:	4448                	lw	a0,12(s0)
20401a1c:	f2f553e3          	bge	a0,a5,20401942 <_printf_i+0x19a>
20401a20:	853e                	mv	a0,a5
20401a22:	b705                	j	20401942 <_printf_i+0x19a>
20401a24:	4685                	li	a3,1
20401a26:	8656                	mv	a2,s5
20401a28:	85ca                	mv	a1,s2
20401a2a:	8526                	mv	a0,s1
20401a2c:	9982                	jalr	s3
20401a2e:	f16509e3          	beq	a0,s6,20401940 <_printf_i+0x198>
20401a32:	0a05                	addi	s4,s4,1
20401a34:	445c                	lw	a5,12(s0)
20401a36:	4732                	lw	a4,12(sp)
20401a38:	8f99                	sub	a5,a5,a4
20401a3a:	fefa45e3          	blt	s4,a5,20401a24 <_printf_i+0x27c>
20401a3e:	bfe9                	j	20401a18 <_printf_i+0x270>
20401a40:	4a01                	li	s4,0
20401a42:	01940a93          	addi	s5,s0,25
20401a46:	5b7d                	li	s6,-1
20401a48:	b7f5                	j	20401a34 <_printf_i+0x28c>

20401a4a <_read_r>:
_read_r():
20401a4a:	1141                	addi	sp,sp,-16
20401a4c:	c422                	sw	s0,8(sp)
20401a4e:	842a                	mv	s0,a0
20401a50:	852e                	mv	a0,a1
20401a52:	85b2                	mv	a1,a2
20401a54:	8636                	mv	a2,a3
20401a56:	9001a823          	sw	zero,-1776(gp) # 80000898 <errno>
20401a5a:	c606                	sw	ra,12(sp)
20401a5c:	2075                	jal	20401b08 <_read>
20401a5e:	57fd                	li	a5,-1
20401a60:	00f51763          	bne	a0,a5,20401a6e <_read_r+0x24>
20401a64:	91018793          	addi	a5,gp,-1776 # 80000898 <errno>
20401a68:	439c                	lw	a5,0(a5)
20401a6a:	c391                	beqz	a5,20401a6e <_read_r+0x24>
20401a6c:	c01c                	sw	a5,0(s0)
20401a6e:	40b2                	lw	ra,12(sp)
20401a70:	4422                	lw	s0,8(sp)
20401a72:	0141                	addi	sp,sp,16
20401a74:	8082                	ret

20401a76 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20401a76:	1101                	addi	sp,sp,-32
20401a78:	ce06                	sw	ra,28(sp)
20401a7a:	cc22                	sw	s0,24(sp)
20401a7c:	1000                	addi	s0,sp,32
20401a7e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20401a82:	2a59                	jal	20401c18 <__errno>
20401a84:	872a                	mv	a4,a0
20401a86:	05800793          	li	a5,88
20401a8a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20401a8c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20401a8e:	853e                	mv	a0,a5
20401a90:	40f2                	lw	ra,28(sp)
20401a92:	4462                	lw	s0,24(sp)
20401a94:	6105                	addi	sp,sp,32
20401a96:	8082                	ret

20401a98 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20401a98:	1101                	addi	sp,sp,-32
20401a9a:	ce06                	sw	ra,28(sp)
20401a9c:	cc22                	sw	s0,24(sp)
20401a9e:	1000                	addi	s0,sp,32
20401aa0:	fea42623          	sw	a0,-20(s0)
20401aa4:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401aa8:	2a85                	jal	20401c18 <__errno>
20401aaa:	872a                	mv	a4,a0
20401aac:	fa800793          	li	a5,-88
20401ab0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20401ab2:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20401ab4:	853e                	mv	a0,a5
20401ab6:	40f2                	lw	ra,28(sp)
20401ab8:	4462                	lw	s0,24(sp)
20401aba:	6105                	addi	sp,sp,32
20401abc:	8082                	ret

20401abe <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20401abe:	1101                	addi	sp,sp,-32
20401ac0:	ce22                	sw	s0,28(sp)
20401ac2:	1000                	addi	s0,sp,32
20401ac4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401ac8:	fec42783          	lw	a5,-20(s0)
20401acc:	17fd                	addi	a5,a5,-1
20401ace:	0017b793          	seqz	a5,a5
20401ad2:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20401ad6:	853e                	mv	a0,a5
20401ad8:	4472                	lw	s0,28(sp)
20401ada:	6105                	addi	sp,sp,32
20401adc:	8082                	ret

20401ade <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20401ade:	1101                	addi	sp,sp,-32
20401ae0:	ce06                	sw	ra,28(sp)
20401ae2:	cc22                	sw	s0,24(sp)
20401ae4:	1000                	addi	s0,sp,32
20401ae6:	fea42623          	sw	a0,-20(s0)
20401aea:	feb42423          	sw	a1,-24(s0)
20401aee:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20401af2:	221d                	jal	20401c18 <__errno>
20401af4:	872a                	mv	a4,a0
20401af6:	05800793          	li	a5,88
20401afa:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20401afc:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20401afe:	853e                	mv	a0,a5
20401b00:	40f2                	lw	ra,28(sp)
20401b02:	4462                	lw	s0,24(sp)
20401b04:	6105                	addi	sp,sp,32
20401b06:	8082                	ret

20401b08 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20401b08:	1101                	addi	sp,sp,-32
20401b0a:	ce06                	sw	ra,28(sp)
20401b0c:	cc22                	sw	s0,24(sp)
20401b0e:	1000                	addi	s0,sp,32
20401b10:	fea42623          	sw	a0,-20(s0)
20401b14:	feb42423          	sw	a1,-24(s0)
20401b18:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20401b1c:	28f5                	jal	20401c18 <__errno>
20401b1e:	872a                	mv	a4,a0
20401b20:	05800793          	li	a5,88
20401b24:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20401b26:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20401b28:	853e                	mv	a0,a5
20401b2a:	40f2                	lw	ra,28(sp)
20401b2c:	4462                	lw	s0,24(sp)
20401b2e:	6105                	addi	sp,sp,32
20401b30:	8082                	ret

20401b32 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20401b32:	7179                	addi	sp,sp,-48
20401b34:	d622                	sw	s0,44(sp)
20401b36:	1800                	addi	s0,sp,48
20401b38:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20401b3c:	800007b7          	lui	a5,0x80000
20401b40:	7907a783          	lw	a5,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff2f4>
20401b44:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20401b48:	d1418713          	addi	a4,gp,-748 # 80000c9c <_sp>
20401b4c:	51418793          	addi	a5,gp,1300 # 8000149c <metal_segment_heap_target_end>
20401b50:	00f71463          	bne	a4,a5,20401b58 <_sbrk+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20401b54:	57fd                	li	a5,-1
20401b56:	a089                	j	20401b98 <_sbrk+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20401b58:	800007b7          	lui	a5,0x80000
20401b5c:	7907a703          	lw	a4,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff2f4>
20401b60:	fdc42783          	lw	a5,-36(s0)
20401b64:	973e                	add	a4,a4,a5
20401b66:	51418793          	addi	a5,gp,1300 # 8000149c <metal_segment_heap_target_end>
20401b6a:	02f77063          	bgeu	a4,a5,20401b8a <_sbrk+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20401b6e:	800007b7          	lui	a5,0x80000
20401b72:	7907a703          	lw	a4,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff2f4>
20401b76:	fdc42783          	lw	a5,-36(s0)
20401b7a:	973e                	add	a4,a4,a5
20401b7c:	800007b7          	lui	a5,0x80000
20401b80:	78e7a823          	sw	a4,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff2f4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20401b84:	fec42783          	lw	a5,-20(s0)
20401b88:	a801                	j	20401b98 <_sbrk+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20401b8a:	800007b7          	lui	a5,0x80000
20401b8e:	51418713          	addi	a4,gp,1300 # 8000149c <metal_segment_heap_target_end>
20401b92:	78e7a823          	sw	a4,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff2f4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20401b96:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20401b98:	853e                	mv	a0,a5
20401b9a:	5432                	lw	s0,44(sp)
20401b9c:	6145                	addi	sp,sp,48
20401b9e:	8082                	ret

20401ba0 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20401ba0:	7179                	addi	sp,sp,-48
20401ba2:	d606                	sw	ra,44(sp)
20401ba4:	d422                	sw	s0,40(sp)
20401ba6:	1800                	addi	s0,sp,48
20401ba8:	fca42e23          	sw	a0,-36(s0)
20401bac:	fcb42c23          	sw	a1,-40(s0)
20401bb0:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20401bb4:	fdc42703          	lw	a4,-36(s0)
20401bb8:	4785                	li	a5,1
20401bba:	00f70963          	beq	a4,a5,20401bcc <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20401bbe:	28a9                	jal	20401c18 <__errno>
20401bc0:	872a                	mv	a4,a0
20401bc2:	05800793          	li	a5,88
20401bc6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20401bc8:	57fd                	li	a5,-1
20401bca:	a82d                	j	20401c04 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20401bcc:	fd842783          	lw	a5,-40(s0)
20401bd0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20401bd4:	fe042623          	sw	zero,-20(s0)
20401bd8:	a839                	j	20401bf6 <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20401bda:	fe842703          	lw	a4,-24(s0)
20401bde:	fec42783          	lw	a5,-20(s0)
20401be2:	97ba                	add	a5,a5,a4
20401be4:	0007c783          	lbu	a5,0(a5)
20401be8:	853e                	mv	a0,a5
20401bea:	2c91                	jal	20401e3e <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20401bec:	fec42783          	lw	a5,-20(s0)
20401bf0:	0785                	addi	a5,a5,1
20401bf2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20401bf6:	fec42703          	lw	a4,-20(s0)
20401bfa:	fd442783          	lw	a5,-44(s0)
20401bfe:	fcf76ee3          	bltu	a4,a5,20401bda <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20401c02:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20401c04:	853e                	mv	a0,a5
20401c06:	50b2                	lw	ra,44(sp)
20401c08:	5422                	lw	s0,40(sp)
20401c0a:	6145                	addi	sp,sp,48
20401c0c:	8082                	ret

20401c0e <atexit>:
atexit():
20401c0e:	85aa                	mv	a1,a0
20401c10:	4681                	li	a3,0
20401c12:	4601                	li	a2,0
20401c14:	4501                	li	a0,0
20401c16:	a8f1                	j	20401cf2 <__register_exitproc>

20401c18 <__errno>:
__errno():
20401c18:	5fbff797          	auipc	a5,0x5fbff
20401c1c:	b7078793          	addi	a5,a5,-1168 # 80000788 <_impure_ptr>
20401c20:	4388                	lw	a0,0(a5)
20401c22:	8082                	ret

20401c24 <exit>:
exit():
20401c24:	1141                	addi	sp,sp,-16
20401c26:	c422                	sw	s0,8(sp)
20401c28:	c606                	sw	ra,12(sp)
20401c2a:	00000797          	auipc	a5,0x0
20401c2e:	14c78793          	addi	a5,a5,332 # 20401d76 <__call_exitprocs>
20401c32:	842a                	mv	s0,a0
20401c34:	c399                	beqz	a5,20401c3a <exit+0x16>
20401c36:	4581                	li	a1,0
20401c38:	2a3d                	jal	20401d76 <__call_exitprocs>
20401c3a:	5fbff797          	auipc	a5,0x5fbff
20401c3e:	b5278793          	addi	a5,a5,-1198 # 8000078c <_global_impure_ptr>
20401c42:	4388                	lw	a0,0(a5)
20401c44:	551c                	lw	a5,40(a0)
20401c46:	c391                	beqz	a5,20401c4a <exit+0x26>
20401c48:	9782                	jalr	a5
20401c4a:	8522                	mv	a0,s0
20401c4c:	023030ef          	jal	ra,2040546e <_exit>

20401c50 <__libc_fini_array>:
__libc_fini_array():
20401c50:	1141                	addi	sp,sp,-16
20401c52:	00004797          	auipc	a5,0x4
20401c56:	cea78793          	addi	a5,a5,-790 # 2040593c <__fini_array_end>
20401c5a:	c422                	sw	s0,8(sp)
20401c5c:	00004417          	auipc	s0,0x4
20401c60:	ce040413          	addi	s0,s0,-800 # 2040593c <__fini_array_end>
20401c64:	8c1d                	sub	s0,s0,a5
20401c66:	c226                	sw	s1,4(sp)
20401c68:	c606                	sw	ra,12(sp)
20401c6a:	8409                	srai	s0,s0,0x2
20401c6c:	84be                	mv	s1,a5
20401c6e:	e411                	bnez	s0,20401c7a <__libc_fini_array+0x2a>
20401c70:	40b2                	lw	ra,12(sp)
20401c72:	4422                	lw	s0,8(sp)
20401c74:	4492                	lw	s1,4(sp)
20401c76:	0141                	addi	sp,sp,16
20401c78:	8082                	ret
20401c7a:	147d                	addi	s0,s0,-1
20401c7c:	00241793          	slli	a5,s0,0x2
20401c80:	97a6                	add	a5,a5,s1
20401c82:	439c                	lw	a5,0(a5)
20401c84:	9782                	jalr	a5
20401c86:	b7e5                	j	20401c6e <__libc_fini_array+0x1e>

20401c88 <__libc_init_array>:
__libc_init_array():
20401c88:	1141                	addi	sp,sp,-16
20401c8a:	00004797          	auipc	a5,0x4
20401c8e:	cae78793          	addi	a5,a5,-850 # 20405938 <__init_array_start>
20401c92:	c422                	sw	s0,8(sp)
20401c94:	00004417          	auipc	s0,0x4
20401c98:	ca440413          	addi	s0,s0,-860 # 20405938 <__init_array_start>
20401c9c:	8c1d                	sub	s0,s0,a5
20401c9e:	c226                	sw	s1,4(sp)
20401ca0:	c04a                	sw	s2,0(sp)
20401ca2:	c606                	sw	ra,12(sp)
20401ca4:	8409                	srai	s0,s0,0x2
20401ca6:	4481                	li	s1,0
20401ca8:	893e                	mv	s2,a5
20401caa:	02849663          	bne	s1,s0,20401cd6 <__libc_init_array+0x4e>
20401cae:	00004797          	auipc	a5,0x4
20401cb2:	c8a78793          	addi	a5,a5,-886 # 20405938 <__init_array_start>
20401cb6:	00004417          	auipc	s0,0x4
20401cba:	c8640413          	addi	s0,s0,-890 # 2040593c <__fini_array_end>
20401cbe:	8c1d                	sub	s0,s0,a5
20401cc0:	8409                	srai	s0,s0,0x2
20401cc2:	4481                	li	s1,0
20401cc4:	893e                	mv	s2,a5
20401cc6:	00849f63          	bne	s1,s0,20401ce4 <__libc_init_array+0x5c>
20401cca:	40b2                	lw	ra,12(sp)
20401ccc:	4422                	lw	s0,8(sp)
20401cce:	4492                	lw	s1,4(sp)
20401cd0:	4902                	lw	s2,0(sp)
20401cd2:	0141                	addi	sp,sp,16
20401cd4:	8082                	ret
20401cd6:	00249793          	slli	a5,s1,0x2
20401cda:	97ca                	add	a5,a5,s2
20401cdc:	439c                	lw	a5,0(a5)
20401cde:	0485                	addi	s1,s1,1
20401ce0:	9782                	jalr	a5
20401ce2:	b7e1                	j	20401caa <__libc_init_array+0x22>
20401ce4:	00249793          	slli	a5,s1,0x2
20401ce8:	97ca                	add	a5,a5,s2
20401cea:	439c                	lw	a5,0(a5)
20401cec:	0485                	addi	s1,s1,1
20401cee:	9782                	jalr	a5
20401cf0:	bfd9                	j	20401cc6 <__libc_init_array+0x3e>

20401cf2 <__register_exitproc>:
__register_exitproc():
20401cf2:	5fbff797          	auipc	a5,0x5fbff
20401cf6:	ac678793          	addi	a5,a5,-1338 # 800007b8 <_global_atexit>
20401cfa:	439c                	lw	a5,0(a5)
20401cfc:	8e2a                	mv	t3,a0
20401cfe:	e38d                	bnez	a5,20401d20 <__register_exitproc+0x2e>
20401d00:	88418713          	addi	a4,gp,-1916 # 8000080c <_global_atexit0>
20401d04:	5fbff797          	auipc	a5,0x5fbff
20401d08:	aae7aa23          	sw	a4,-1356(a5) # 800007b8 <_global_atexit>
20401d0c:	dfbfe517          	auipc	a0,0xdfbfe
20401d10:	2f450513          	addi	a0,a0,756 # 0 <__metal_boot_hart>
20401d14:	87ba                	mv	a5,a4
20401d16:	c509                	beqz	a0,20401d20 <__register_exitproc+0x2e>
20401d18:	411c                	lw	a5,0(a0)
20401d1a:	90f1a623          	sw	a5,-1780(gp) # 80000894 <_global_atexit0+0x88>
20401d1e:	87ba                	mv	a5,a4
20401d20:	43d8                	lw	a4,4(a5)
20401d22:	487d                	li	a6,31
20401d24:	557d                	li	a0,-1
20401d26:	04e84763          	blt	a6,a4,20401d74 <__register_exitproc+0x82>
20401d2a:	020e0e63          	beqz	t3,20401d66 <__register_exitproc+0x74>
20401d2e:	0887a803          	lw	a6,136(a5)
20401d32:	04080163          	beqz	a6,20401d74 <__register_exitproc+0x82>
20401d36:	00271893          	slli	a7,a4,0x2
20401d3a:	98c2                	add	a7,a7,a6
20401d3c:	00c8a023          	sw	a2,0(a7)
20401d40:	10082303          	lw	t1,256(a6)
20401d44:	4605                	li	a2,1
20401d46:	00e61633          	sll	a2,a2,a4
20401d4a:	00c36333          	or	t1,t1,a2
20401d4e:	10682023          	sw	t1,256(a6)
20401d52:	08d8a023          	sw	a3,128(a7)
20401d56:	4689                	li	a3,2
20401d58:	00de1763          	bne	t3,a3,20401d66 <__register_exitproc+0x74>
20401d5c:	10482683          	lw	a3,260(a6)
20401d60:	8e55                	or	a2,a2,a3
20401d62:	10c82223          	sw	a2,260(a6)
20401d66:	00170693          	addi	a3,a4,1
20401d6a:	070a                	slli	a4,a4,0x2
20401d6c:	c3d4                	sw	a3,4(a5)
20401d6e:	97ba                	add	a5,a5,a4
20401d70:	c78c                	sw	a1,8(a5)
20401d72:	4501                	li	a0,0
20401d74:	8082                	ret

20401d76 <__call_exitprocs>:
__call_exitprocs():
20401d76:	7179                	addi	sp,sp,-48
20401d78:	cc52                	sw	s4,24(sp)
20401d7a:	ca56                	sw	s5,20(sp)
20401d7c:	c85a                	sw	s6,16(sp)
20401d7e:	c65e                	sw	s7,12(sp)
20401d80:	d606                	sw	ra,44(sp)
20401d82:	d422                	sw	s0,40(sp)
20401d84:	d226                	sw	s1,36(sp)
20401d86:	d04a                	sw	s2,32(sp)
20401d88:	ce4e                	sw	s3,28(sp)
20401d8a:	c462                	sw	s8,8(sp)
20401d8c:	8b2a                	mv	s6,a0
20401d8e:	8a2e                	mv	s4,a1
20401d90:	5fbffa97          	auipc	s5,0x5fbff
20401d94:	a28a8a93          	addi	s5,s5,-1496 # 800007b8 <_global_atexit>
20401d98:	4b85                	li	s7,1
20401d9a:	000aa403          	lw	s0,0(s5)
20401d9e:	c811                	beqz	s0,20401db2 <__call_exitprocs+0x3c>
20401da0:	4044                	lw	s1,4(s0)
20401da2:	08842983          	lw	s3,136(s0)
20401da6:	fff48913          	addi	s2,s1,-1
20401daa:	048a                	slli	s1,s1,0x2
20401dac:	94a2                	add	s1,s1,s0
20401dae:	00095e63          	bgez	s2,20401dca <__call_exitprocs+0x54>
20401db2:	50b2                	lw	ra,44(sp)
20401db4:	5422                	lw	s0,40(sp)
20401db6:	5492                	lw	s1,36(sp)
20401db8:	5902                	lw	s2,32(sp)
20401dba:	49f2                	lw	s3,28(sp)
20401dbc:	4a62                	lw	s4,24(sp)
20401dbe:	4ad2                	lw	s5,20(sp)
20401dc0:	4b42                	lw	s6,16(sp)
20401dc2:	4bb2                	lw	s7,12(sp)
20401dc4:	4c22                	lw	s8,8(sp)
20401dc6:	6145                	addi	sp,sp,48
20401dc8:	8082                	ret
20401dca:	000a0e63          	beqz	s4,20401de6 <__call_exitprocs+0x70>
20401dce:	00099563          	bnez	s3,20401dd8 <__call_exitprocs+0x62>
20401dd2:	197d                	addi	s2,s2,-1
20401dd4:	14f1                	addi	s1,s1,-4
20401dd6:	bfe1                	j	20401dae <__call_exitprocs+0x38>
20401dd8:	00291793          	slli	a5,s2,0x2
20401ddc:	97ce                	add	a5,a5,s3
20401dde:	0807a783          	lw	a5,128(a5)
20401de2:	ff4798e3          	bne	a5,s4,20401dd2 <__call_exitprocs+0x5c>
20401de6:	4058                	lw	a4,4(s0)
20401de8:	40dc                	lw	a5,4(s1)
20401dea:	177d                	addi	a4,a4,-1
20401dec:	03271863          	bne	a4,s2,20401e1c <__call_exitprocs+0xa6>
20401df0:	01242223          	sw	s2,4(s0)
20401df4:	dff9                	beqz	a5,20401dd2 <__call_exitprocs+0x5c>
20401df6:	00442c03          	lw	s8,4(s0)
20401dfa:	00098863          	beqz	s3,20401e0a <__call_exitprocs+0x94>
20401dfe:	1009a683          	lw	a3,256(s3)
20401e02:	012b9733          	sll	a4,s7,s2
20401e06:	8ef9                	and	a3,a3,a4
20401e08:	ee89                	bnez	a3,20401e22 <__call_exitprocs+0xac>
20401e0a:	9782                	jalr	a5
20401e0c:	4058                	lw	a4,4(s0)
20401e0e:	000aa783          	lw	a5,0(s5)
20401e12:	f98714e3          	bne	a4,s8,20401d9a <__call_exitprocs+0x24>
20401e16:	faf40ee3          	beq	s0,a5,20401dd2 <__call_exitprocs+0x5c>
20401e1a:	b741                	j	20401d9a <__call_exitprocs+0x24>
20401e1c:	0004a223          	sw	zero,4(s1)
20401e20:	bfd1                	j	20401df4 <__call_exitprocs+0x7e>
20401e22:	00291693          	slli	a3,s2,0x2
20401e26:	96ce                	add	a3,a3,s3
20401e28:	428c                	lw	a1,0(a3)
20401e2a:	1049a683          	lw	a3,260(s3)
20401e2e:	8f75                	and	a4,a4,a3
20401e30:	e701                	bnez	a4,20401e38 <__call_exitprocs+0xc2>
20401e32:	855a                	mv	a0,s6
20401e34:	9782                	jalr	a5
20401e36:	bfd9                	j	20401e0c <__call_exitprocs+0x96>
20401e38:	852e                	mv	a0,a1
20401e3a:	9782                	jalr	a5
20401e3c:	bfc1                	j	20401e0c <__call_exitprocs+0x96>

20401e3e <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20401e3e:	1101                	addi	sp,sp,-32
20401e40:	ce06                	sw	ra,28(sp)
20401e42:	cc22                	sw	s0,24(sp)
20401e44:	1000                	addi	s0,sp,32
20401e46:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20401e4a:	fec42703          	lw	a4,-20(s0)
20401e4e:	47a9                	li	a5,10
20401e50:	00f71463          	bne	a4,a5,20401e58 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20401e54:	4535                	li	a0,13
20401e56:	2811                	jal	20401e6a <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20401e58:	fec42503          	lw	a0,-20(s0)
20401e5c:	2039                	jal	20401e6a <metal_tty_putc_raw>
20401e5e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20401e60:	853e                	mv	a0,a5
20401e62:	40f2                	lw	ra,28(sp)
20401e64:	4462                	lw	s0,24(sp)
20401e66:	6105                	addi	sp,sp,32
20401e68:	8082                	ret

20401e6a <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20401e6a:	1101                	addi	sp,sp,-32
20401e6c:	ce06                	sw	ra,28(sp)
20401e6e:	cc22                	sw	s0,24(sp)
20401e70:	1000                	addi	s0,sp,32
20401e72:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401e76:	fec42583          	lw	a1,-20(s0)
20401e7a:	800007b7          	lui	a5,0x80000
20401e7e:	76878513          	addi	a0,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2cc>
20401e82:	28b1                	jal	20401ede <metal_uart_putc>
20401e84:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20401e86:	853e                	mv	a0,a5
20401e88:	40f2                	lw	ra,28(sp)
20401e8a:	4462                	lw	s0,24(sp)
20401e8c:	6105                	addi	sp,sp,32
20401e8e:	8082                	ret

20401e90 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20401e90:	1141                	addi	sp,sp,-16
20401e92:	c606                	sw	ra,12(sp)
20401e94:	c422                	sw	s0,8(sp)
20401e96:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20401e98:	67f1                	lui	a5,0x1c
20401e9a:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20401e9e:	800007b7          	lui	a5,0x80000
20401ea2:	76878513          	addi	a0,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2cc>
20401ea6:	2031                	jal	20401eb2 <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20401ea8:	0001                	nop
20401eaa:	40b2                	lw	ra,12(sp)
20401eac:	4422                	lw	s0,8(sp)
20401eae:	0141                	addi	sp,sp,16
20401eb0:	8082                	ret

20401eb2 <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20401eb2:	1101                	addi	sp,sp,-32
20401eb4:	ce06                	sw	ra,28(sp)
20401eb6:	cc22                	sw	s0,24(sp)
20401eb8:	1000                	addi	s0,sp,32
20401eba:	fea42623          	sw	a0,-20(s0)
20401ebe:	feb42423          	sw	a1,-24(s0)
20401ec2:	fec42783          	lw	a5,-20(s0)
20401ec6:	439c                	lw	a5,0(a5)
20401ec8:	439c                	lw	a5,0(a5)
20401eca:	fe842583          	lw	a1,-24(s0)
20401ece:	fec42503          	lw	a0,-20(s0)
20401ed2:	9782                	jalr	a5
20401ed4:	0001                	nop
20401ed6:	40f2                	lw	ra,28(sp)
20401ed8:	4462                	lw	s0,24(sp)
20401eda:	6105                	addi	sp,sp,32
20401edc:	8082                	ret

20401ede <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20401ede:	1101                	addi	sp,sp,-32
20401ee0:	ce06                	sw	ra,28(sp)
20401ee2:	cc22                	sw	s0,24(sp)
20401ee4:	1000                	addi	s0,sp,32
20401ee6:	fea42623          	sw	a0,-20(s0)
20401eea:	feb42423          	sw	a1,-24(s0)
20401eee:	fec42783          	lw	a5,-20(s0)
20401ef2:	439c                	lw	a5,0(a5)
20401ef4:	43dc                	lw	a5,4(a5)
20401ef6:	fe842583          	lw	a1,-24(s0)
20401efa:	fec42503          	lw	a0,-20(s0)
20401efe:	9782                	jalr	a5
20401f00:	87aa                	mv	a5,a0
20401f02:	853e                	mv	a0,a5
20401f04:	40f2                	lw	ra,28(sp)
20401f06:	4462                	lw	s0,24(sp)
20401f08:	6105                	addi	sp,sp,32
20401f0a:	8082                	ret

20401f0c <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20401f0c:	1101                	addi	sp,sp,-32
20401f0e:	ce06                	sw	ra,28(sp)
20401f10:	cc22                	sw	s0,24(sp)
20401f12:	1000                	addi	s0,sp,32
20401f14:	fea42623          	sw	a0,-20(s0)
20401f18:	feb42423          	sw	a1,-24(s0)
20401f1c:	fec42783          	lw	a5,-20(s0)
20401f20:	439c                	lw	a5,0(a5)
20401f22:	4bdc                	lw	a5,20(a5)
20401f24:	fe842583          	lw	a1,-24(s0)
20401f28:	fec42503          	lw	a0,-20(s0)
20401f2c:	9782                	jalr	a5
20401f2e:	87aa                	mv	a5,a0
20401f30:	853e                	mv	a0,a5
20401f32:	40f2                	lw	ra,28(sp)
20401f34:	4462                	lw	s0,24(sp)
20401f36:	6105                	addi	sp,sp,32
20401f38:	8082                	ret

20401f3a <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20401f3a:	1101                	addi	sp,sp,-32
20401f3c:	ce22                	sw	s0,28(sp)
20401f3e:	1000                	addi	s0,sp,32
20401f40:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401f44:	fec42703          	lw	a4,-20(s0)
20401f48:	81018793          	addi	a5,gp,-2032 # 80000798 <__metal_dt_clint_2000000>
20401f4c:	00f71563          	bne	a4,a5,20401f56 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20401f50:	020007b7          	lui	a5,0x2000
20401f54:	a011                	j	20401f58 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
20401f56:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
20401f58:	853e                	mv	a0,a5
20401f5a:	4472                	lw	s0,28(sp)
20401f5c:	6105                	addi	sp,sp,32
20401f5e:	8082                	ret

20401f60 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20401f60:	1101                	addi	sp,sp,-32
20401f62:	ce22                	sw	s0,28(sp)
20401f64:	1000                	addi	s0,sp,32
20401f66:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401f6a:	fec42703          	lw	a4,-20(s0)
20401f6e:	81018793          	addi	a5,gp,-2032 # 80000798 <__metal_dt_clint_2000000>
20401f72:	00f71463          	bne	a4,a5,20401f7a <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
20401f76:	4789                	li	a5,2
20401f78:	a011                	j	20401f7c <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20401f7a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
20401f7c:	853e                	mv	a0,a5
20401f7e:	4472                	lw	s0,28(sp)
20401f80:	6105                	addi	sp,sp,32
20401f82:	8082                	ret

20401f84 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20401f84:	1101                	addi	sp,sp,-32
20401f86:	ce22                	sw	s0,28(sp)
20401f88:	1000                	addi	s0,sp,32
20401f8a:	fea42623          	sw	a0,-20(s0)
20401f8e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
20401f92:	fe842783          	lw	a5,-24(s0)
20401f96:	e791                	bnez	a5,20401fa2 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401f98:	800007b7          	lui	a5,0x80000
20401f9c:	0b078793          	addi	a5,a5,176 # 800000b0 <metal_segment_heap_target_end+0xffffec14>
20401fa0:	a821                	j	20401fb8 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20401fa2:	fe842703          	lw	a4,-24(s0)
20401fa6:	4785                	li	a5,1
20401fa8:	00f71763          	bne	a4,a5,20401fb6 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401fac:	800007b7          	lui	a5,0x80000
20401fb0:	0b078793          	addi	a5,a5,176 # 800000b0 <metal_segment_heap_target_end+0xffffec14>
20401fb4:	a011                	j	20401fb8 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
20401fb6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
20401fb8:	853e                	mv	a0,a5
20401fba:	4472                	lw	s0,28(sp)
20401fbc:	6105                	addi	sp,sp,32
20401fbe:	8082                	ret

20401fc0 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20401fc0:	1101                	addi	sp,sp,-32
20401fc2:	ce22                	sw	s0,28(sp)
20401fc4:	1000                	addi	s0,sp,32
20401fc6:	fea42623          	sw	a0,-20(s0)
20401fca:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
20401fce:	fe842783          	lw	a5,-24(s0)
20401fd2:	e399                	bnez	a5,20401fd8 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
20401fd4:	478d                	li	a5,3
20401fd6:	a809                	j	20401fe8 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
20401fd8:	fe842703          	lw	a4,-24(s0)
20401fdc:	4785                	li	a5,1
20401fde:	00f71463          	bne	a4,a5,20401fe6 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
20401fe2:	479d                	li	a5,7
20401fe4:	a011                	j	20401fe8 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
20401fe6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
20401fe8:	853e                	mv	a0,a5
20401fea:	4472                	lw	s0,28(sp)
20401fec:	6105                	addi	sp,sp,32
20401fee:	8082                	ret

20401ff0 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20401ff0:	715d                	addi	sp,sp,-80
20401ff2:	c686                	sw	ra,76(sp)
20401ff4:	c4a2                	sw	s0,72(sp)
20401ff6:	c2ca                	sw	s2,68(sp)
20401ff8:	c0ce                	sw	s3,64(sp)
20401ffa:	de52                	sw	s4,60(sp)
20401ffc:	dc56                	sw	s5,56(sp)
20401ffe:	da5a                	sw	s6,52(sp)
20402000:	d85e                	sw	s7,48(sp)
20402002:	d662                	sw	s8,44(sp)
20402004:	d466                	sw	s9,40(sp)
20402006:	0880                	addi	s0,sp,80
20402008:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
2040200c:	fbc42783          	lw	a5,-68(s0)
20402010:	853e                	mv	a0,a5
20402012:	3725                	jal	20401f3a <__metal_driver_sifive_clint0_control_base>
20402014:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20402018:	fcc42703          	lw	a4,-52(s0)
2040201c:	67b1                	lui	a5,0xc
2040201e:	17f1                	addi	a5,a5,-4
20402020:	97ba                	add	a5,a5,a4
20402022:	439c                	lw	a5,0(a5)
20402024:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20402028:	fcc42703          	lw	a4,-52(s0)
2040202c:	67b1                	lui	a5,0xc
2040202e:	17e1                	addi	a5,a5,-8
20402030:	97ba                	add	a5,a5,a4
20402032:	439c                	lw	a5,0(a5)
20402034:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20402038:	fcc42703          	lw	a4,-52(s0)
2040203c:	67b1                	lui	a5,0xc
2040203e:	17f1                	addi	a5,a5,-4
20402040:	97ba                	add	a5,a5,a4
20402042:	439c                	lw	a5,0(a5)
20402044:	fc842703          	lw	a4,-56(s0)
20402048:	fcf718e3          	bne	a4,a5,20402018 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
2040204c:	fc842783          	lw	a5,-56(s0)
20402050:	8c3e                	mv	s8,a5
20402052:	4c81                	li	s9,0
20402054:	000c1993          	slli	s3,s8,0x0
20402058:	4901                	li	s2,0
2040205a:	fc442783          	lw	a5,-60(s0)
2040205e:	8a3e                	mv	s4,a5
20402060:	4a81                	li	s5,0
20402062:	01496b33          	or	s6,s2,s4
20402066:	0159ebb3          	or	s7,s3,s5
2040206a:	87da                	mv	a5,s6
2040206c:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
2040206e:	853e                	mv	a0,a5
20402070:	85c2                	mv	a1,a6
20402072:	40b6                	lw	ra,76(sp)
20402074:	4426                	lw	s0,72(sp)
20402076:	4916                	lw	s2,68(sp)
20402078:	4986                	lw	s3,64(sp)
2040207a:	5a72                	lw	s4,60(sp)
2040207c:	5ae2                	lw	s5,56(sp)
2040207e:	5b52                	lw	s6,52(sp)
20402080:	5bc2                	lw	s7,48(sp)
20402082:	5c32                	lw	s8,44(sp)
20402084:	5ca2                	lw	s9,40(sp)
20402086:	6161                	addi	sp,sp,80
20402088:	8082                	ret

2040208a <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
2040208a:	7179                	addi	sp,sp,-48
2040208c:	d606                	sw	ra,44(sp)
2040208e:	d422                	sw	s0,40(sp)
20402090:	d24a                	sw	s2,36(sp)
20402092:	d04e                	sw	s3,32(sp)
20402094:	1800                	addi	s0,sp,48
20402096:	fca42e23          	sw	a0,-36(s0)
2040209a:	fcb42c23          	sw	a1,-40(s0)
2040209e:	fcc42823          	sw	a2,-48(s0)
204020a2:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
204020a6:	fdc42783          	lw	a5,-36(s0)
204020aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
204020ae:	fec42783          	lw	a5,-20(s0)
204020b2:	853e                	mv	a0,a5
204020b4:	3559                	jal	20401f3a <__metal_driver_sifive_clint0_control_base>
204020b6:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
204020ba:	fd842783          	lw	a5,-40(s0)
204020be:	078e                	slli	a5,a5,0x3
204020c0:	873e                	mv	a4,a5
204020c2:	fe842783          	lw	a5,-24(s0)
204020c6:	973e                	add	a4,a4,a5
204020c8:	6791                	lui	a5,0x4
204020ca:	0791                	addi	a5,a5,4
204020cc:	97ba                	add	a5,a5,a4
204020ce:	873e                	mv	a4,a5
204020d0:	57fd                	li	a5,-1
204020d2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
204020d4:	fd842783          	lw	a5,-40(s0)
204020d8:	078e                	slli	a5,a5,0x3
204020da:	873e                	mv	a4,a5
204020dc:	fe842783          	lw	a5,-24(s0)
204020e0:	973e                	add	a4,a4,a5
204020e2:	6791                	lui	a5,0x4
204020e4:	97ba                	add	a5,a5,a4
204020e6:	873e                	mv	a4,a5
204020e8:	fd042783          	lw	a5,-48(s0)
204020ec:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
204020ee:	fd442783          	lw	a5,-44(s0)
204020f2:	0007d913          	srli	s2,a5,0x0
204020f6:	4981                	li	s3,0
204020f8:	fd842783          	lw	a5,-40(s0)
204020fc:	078e                	slli	a5,a5,0x3
204020fe:	873e                	mv	a4,a5
20402100:	fe842783          	lw	a5,-24(s0)
20402104:	973e                	add	a4,a4,a5
20402106:	6791                	lui	a5,0x4
20402108:	0791                	addi	a5,a5,4
2040210a:	97ba                	add	a5,a5,a4
2040210c:	874a                	mv	a4,s2
2040210e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20402110:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20402112:	853e                	mv	a0,a5
20402114:	50b2                	lw	ra,44(sp)
20402116:	5422                	lw	s0,40(sp)
20402118:	5912                	lw	s2,36(sp)
2040211a:	5982                	lw	s3,32(sp)
2040211c:	6145                	addi	sp,sp,48
2040211e:	8082                	ret

20402120 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20402120:	1101                	addi	sp,sp,-32
20402122:	ce06                	sw	ra,28(sp)
20402124:	cc22                	sw	s0,24(sp)
20402126:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20402128:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
2040212c:	f14027f3          	csrr	a5,mhartid
20402130:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20402134:	fec42783          	lw	a5,-20(s0)
20402138:	853e                	mv	a0,a5
2040213a:	1ac030ef          	jal	ra,204052e6 <metal_cpu_get>
2040213e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20402142:	fe842503          	lw	a0,-24(s0)
20402146:	17a030ef          	jal	ra,204052c0 <metal_cpu_interrupt_controller>
2040214a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
2040214c:	853e                	mv	a0,a5
2040214e:	40f2                	lw	ra,28(sp)
20402150:	4462                	lw	s0,24(sp)
20402152:	6105                	addi	sp,sp,32
20402154:	8082                	ret

20402156 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20402156:	7139                	addi	sp,sp,-64
20402158:	de06                	sw	ra,60(sp)
2040215a:	dc22                	sw	s0,56(sp)
2040215c:	0080                	addi	s0,sp,64
2040215e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402162:	fcc42503          	lw	a0,-52(s0)
20402166:	3bed                	jal	20401f60 <__metal_driver_sifive_clint0_num_interrupts>
20402168:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
2040216c:	fcc42783          	lw	a5,-52(s0)
20402170:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20402174:	fe442783          	lw	a5,-28(s0)
20402178:	43dc                	lw	a5,4(a5)
2040217a:	efa9                	bnez	a5,204021d4 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
2040217c:	fe042623          	sw	zero,-20(s0)
20402180:	a081                	j	204021c0 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402182:	fec42583          	lw	a1,-20(s0)
20402186:	fcc42503          	lw	a0,-52(s0)
2040218a:	3bed                	jal	20401f84 <__metal_driver_sifive_clint0_interrupt_parents>
2040218c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402190:	fec42583          	lw	a1,-20(s0)
20402194:	fcc42503          	lw	a0,-52(s0)
20402198:	3525                	jal	20401fc0 <__metal_driver_sifive_clint0_interrupt_lines>
2040219a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
2040219e:	fe042783          	lw	a5,-32(s0)
204021a2:	439c                	lw	a5,0(a5)
204021a4:	4fdc                	lw	a5,28(a5)
204021a6:	fcc42683          	lw	a3,-52(s0)
204021aa:	4601                	li	a2,0
204021ac:	fdc42583          	lw	a1,-36(s0)
204021b0:	fe042503          	lw	a0,-32(s0)
204021b4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
204021b6:	fec42783          	lw	a5,-20(s0)
204021ba:	0785                	addi	a5,a5,1
204021bc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
204021c0:	fec42703          	lw	a4,-20(s0)
204021c4:	fe842783          	lw	a5,-24(s0)
204021c8:	faf74de3          	blt	a4,a5,20402182 <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
204021cc:	fe442783          	lw	a5,-28(s0)
204021d0:	4705                	li	a4,1
204021d2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
204021d4:	0001                	nop
204021d6:	50f2                	lw	ra,60(sp)
204021d8:	5462                	lw	s0,56(sp)
204021da:	6121                	addi	sp,sp,64
204021dc:	8082                	ret

204021de <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
204021de:	7139                	addi	sp,sp,-64
204021e0:	de06                	sw	ra,60(sp)
204021e2:	dc22                	sw	s0,56(sp)
204021e4:	0080                	addi	s0,sp,64
204021e6:	fca42623          	sw	a0,-52(s0)
204021ea:	fcb42423          	sw	a1,-56(s0)
204021ee:	fcc42223          	sw	a2,-60(s0)
204021f2:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
204021f6:	57fd                	li	a5,-1
204021f8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
204021fc:	31a010ef          	jal	ra,20403516 <__metal_controller_interrupt_vector_mode>
20402200:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
20402204:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402208:	3f21                	jal	20402120 <_get_cpu_intc>
2040220a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
2040220e:	fcc42503          	lw	a0,-52(s0)
20402212:	33b9                	jal	20401f60 <__metal_driver_sifive_clint0_num_interrupts>
20402214:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20402218:	fe042703          	lw	a4,-32(s0)
2040221c:	4785                	li	a5,1
2040221e:	00f70863          	beq	a4,a5,2040222e <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20402222:	fe042783          	lw	a5,-32(s0)
20402226:	c781                	beqz	a5,2040222e <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20402228:	fec42783          	lw	a5,-20(s0)
2040222c:	a049                	j	204022ae <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
2040222e:	fe042223          	sw	zero,-28(s0)
20402232:	a091                	j	20402276 <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402234:	fe442583          	lw	a1,-28(s0)
20402238:	fcc42503          	lw	a0,-52(s0)
2040223c:	3351                	jal	20401fc0 <__metal_driver_sifive_clint0_interrupt_lines>
2040223e:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402242:	fe442583          	lw	a1,-28(s0)
20402246:	fcc42503          	lw	a0,-52(s0)
2040224a:	3b2d                	jal	20401f84 <__metal_driver_sifive_clint0_interrupt_parents>
2040224c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20402250:	fdc42703          	lw	a4,-36(s0)
20402254:	fe842783          	lw	a5,-24(s0)
20402258:	00f71863          	bne	a4,a5,20402268 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
2040225c:	fc842703          	lw	a4,-56(s0)
20402260:	fd442783          	lw	a5,-44(s0)
20402264:	02f70063          	beq	a4,a5,20402284 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20402268:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
2040226c:	fe442783          	lw	a5,-28(s0)
20402270:	0785                	addi	a5,a5,1
20402272:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20402276:	fe442703          	lw	a4,-28(s0)
2040227a:	fd842783          	lw	a5,-40(s0)
2040227e:	faf74be3          	blt	a4,a5,20402234 <__metal_driver_riscv_clint0_register+0x56>
20402282:	a011                	j	20402286 <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20402284:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20402286:	fe842783          	lw	a5,-24(s0)
2040228a:	c385                	beqz	a5,204022aa <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
2040228c:	fe842783          	lw	a5,-24(s0)
20402290:	439c                	lw	a5,0(a5)
20402292:	4fdc                	lw	a5,28(a5)
20402294:	fc042683          	lw	a3,-64(s0)
20402298:	fc442603          	lw	a2,-60(s0)
2040229c:	fc842583          	lw	a1,-56(s0)
204022a0:	fe842503          	lw	a0,-24(s0)
204022a4:	9782                	jalr	a5
204022a6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
204022aa:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
204022ae:	853e                	mv	a0,a5
204022b0:	50f2                	lw	ra,60(sp)
204022b2:	5462                	lw	s0,56(sp)
204022b4:	6121                	addi	sp,sp,64
204022b6:	8082                	ret

204022b8 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
204022b8:	7179                	addi	sp,sp,-48
204022ba:	d622                	sw	s0,44(sp)
204022bc:	1800                	addi	s0,sp,48
204022be:	fca42e23          	sw	a0,-36(s0)
204022c2:	fcb42c23          	sw	a1,-40(s0)
204022c6:	fcc42a23          	sw	a2,-44(s0)
204022ca:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
204022ce:	57fd                	li	a5,-1
204022d0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
204022d4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
204022d8:	853e                	mv	a0,a5
204022da:	5432                	lw	s0,44(sp)
204022dc:	6145                	addi	sp,sp,48
204022de:	8082                	ret

204022e0 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
204022e0:	1101                	addi	sp,sp,-32
204022e2:	ce06                	sw	ra,28(sp)
204022e4:	cc22                	sw	s0,24(sp)
204022e6:	1000                	addi	s0,sp,32
204022e8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
204022ec:	22a010ef          	jal	ra,20403516 <__metal_controller_interrupt_vector_mode>
204022f0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
204022f2:	853e                	mv	a0,a5
204022f4:	40f2                	lw	ra,28(sp)
204022f6:	4462                	lw	s0,24(sp)
204022f8:	6105                	addi	sp,sp,32
204022fa:	8082                	ret

204022fc <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
204022fc:	7179                	addi	sp,sp,-48
204022fe:	d606                	sw	ra,44(sp)
20402300:	d422                	sw	s0,40(sp)
20402302:	1800                	addi	s0,sp,48
20402304:	fca42e23          	sw	a0,-36(s0)
20402308:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
2040230c:	57fd                	li	a5,-1
2040230e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20402312:	3539                	jal	20402120 <_get_cpu_intc>
20402314:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20402318:	fe842783          	lw	a5,-24(s0)
2040231c:	c395                	beqz	a5,20402340 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
2040231e:	fd842703          	lw	a4,-40(s0)
20402322:	4785                	li	a5,1
20402324:	00e7ef63          	bltu	a5,a4,20402342 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20402328:	fe842783          	lw	a5,-24(s0)
2040232c:	439c                	lw	a5,0(a5)
2040232e:	43dc                	lw	a5,4(a5)
20402330:	fd842583          	lw	a1,-40(s0)
20402334:	fe842503          	lw	a0,-24(s0)
20402338:	9782                	jalr	a5
2040233a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
2040233e:	a011                	j	20402342 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20402340:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
20402342:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20402346:	853e                	mv	a0,a5
20402348:	50b2                	lw	ra,44(sp)
2040234a:	5422                	lw	s0,40(sp)
2040234c:	6145                	addi	sp,sp,48
2040234e:	8082                	ret

20402350 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20402350:	7139                	addi	sp,sp,-64
20402352:	de06                	sw	ra,60(sp)
20402354:	dc22                	sw	s0,56(sp)
20402356:	0080                	addi	s0,sp,64
20402358:	fca42623          	sw	a0,-52(s0)
2040235c:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20402360:	57fd                	li	a5,-1
20402362:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20402366:	fc842783          	lw	a5,-56(s0)
2040236a:	c7c9                	beqz	a5,204023f4 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
2040236c:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402370:	3b45                	jal	20402120 <_get_cpu_intc>
20402372:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402376:	fcc42503          	lw	a0,-52(s0)
2040237a:	36dd                	jal	20401f60 <__metal_driver_sifive_clint0_num_interrupts>
2040237c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20402380:	fe042223          	sw	zero,-28(s0)
20402384:	a091                	j	204023c8 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402386:	fe442583          	lw	a1,-28(s0)
2040238a:	fcc42503          	lw	a0,-52(s0)
2040238e:	390d                	jal	20401fc0 <__metal_driver_sifive_clint0_interrupt_lines>
20402390:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402394:	fe442583          	lw	a1,-28(s0)
20402398:	fcc42503          	lw	a0,-52(s0)
2040239c:	36e5                	jal	20401f84 <__metal_driver_sifive_clint0_interrupt_parents>
2040239e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
204023a2:	fe042703          	lw	a4,-32(s0)
204023a6:	fe842783          	lw	a5,-24(s0)
204023aa:	00f71863          	bne	a4,a5,204023ba <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
204023ae:	fc842703          	lw	a4,-56(s0)
204023b2:	fd842783          	lw	a5,-40(s0)
204023b6:	02f70063          	beq	a4,a5,204023d6 <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
204023ba:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
204023be:	fe442783          	lw	a5,-28(s0)
204023c2:	0785                	addi	a5,a5,1
204023c4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
204023c8:	fe442703          	lw	a4,-28(s0)
204023cc:	fdc42783          	lw	a5,-36(s0)
204023d0:	faf74be3          	blt	a4,a5,20402386 <__metal_driver_riscv_clint0_enable+0x36>
204023d4:	a011                	j	204023d8 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
204023d6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
204023d8:	fe842783          	lw	a5,-24(s0)
204023dc:	cf81                	beqz	a5,204023f4 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
204023de:	fe842783          	lw	a5,-24(s0)
204023e2:	439c                	lw	a5,0(a5)
204023e4:	53dc                	lw	a5,36(a5)
204023e6:	fc842583          	lw	a1,-56(s0)
204023ea:	fe842503          	lw	a0,-24(s0)
204023ee:	9782                	jalr	a5
204023f0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
204023f4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
204023f8:	853e                	mv	a0,a5
204023fa:	50f2                	lw	ra,60(sp)
204023fc:	5462                	lw	s0,56(sp)
204023fe:	6121                	addi	sp,sp,64
20402400:	8082                	ret

20402402 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20402402:	7139                	addi	sp,sp,-64
20402404:	de06                	sw	ra,60(sp)
20402406:	dc22                	sw	s0,56(sp)
20402408:	0080                	addi	s0,sp,64
2040240a:	fca42623          	sw	a0,-52(s0)
2040240e:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20402412:	57fd                	li	a5,-1
20402414:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20402418:	fc842783          	lw	a5,-56(s0)
2040241c:	c7d9                	beqz	a5,204024aa <__metal_driver_riscv_clint0_disable+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
2040241e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402422:	39fd                	jal	20402120 <_get_cpu_intc>
20402424:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402428:	fcc42503          	lw	a0,-52(s0)
2040242c:	b35ff0ef          	jal	ra,20401f60 <__metal_driver_sifive_clint0_num_interrupts>
20402430:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20402434:	fe042223          	sw	zero,-28(s0)
20402438:	a099                	j	2040247e <__metal_driver_riscv_clint0_disable+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040243a:	fe442583          	lw	a1,-28(s0)
2040243e:	fcc42503          	lw	a0,-52(s0)
20402442:	3ebd                	jal	20401fc0 <__metal_driver_sifive_clint0_interrupt_lines>
20402444:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402448:	fe442583          	lw	a1,-28(s0)
2040244c:	fcc42503          	lw	a0,-52(s0)
20402450:	b35ff0ef          	jal	ra,20401f84 <__metal_driver_sifive_clint0_interrupt_parents>
20402454:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20402458:	fe042703          	lw	a4,-32(s0)
2040245c:	fe842783          	lw	a5,-24(s0)
20402460:	00f71863          	bne	a4,a5,20402470 <__metal_driver_riscv_clint0_disable+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20402464:	fc842703          	lw	a4,-56(s0)
20402468:	fd842783          	lw	a5,-40(s0)
2040246c:	02f70063          	beq	a4,a5,2040248c <__metal_driver_riscv_clint0_disable+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20402470:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402474:	fe442783          	lw	a5,-28(s0)
20402478:	0785                	addi	a5,a5,1
2040247a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
2040247e:	fe442703          	lw	a4,-28(s0)
20402482:	fdc42783          	lw	a5,-36(s0)
20402486:	faf74ae3          	blt	a4,a5,2040243a <__metal_driver_riscv_clint0_disable+0x38>
2040248a:	a011                	j	2040248e <__metal_driver_riscv_clint0_disable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
2040248c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
2040248e:	fe842783          	lw	a5,-24(s0)
20402492:	cf81                	beqz	a5,204024aa <__metal_driver_riscv_clint0_disable+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20402494:	fe842783          	lw	a5,-24(s0)
20402498:	439c                	lw	a5,0(a5)
2040249a:	579c                	lw	a5,40(a5)
2040249c:	fc842583          	lw	a1,-56(s0)
204024a0:	fe842503          	lw	a0,-24(s0)
204024a4:	9782                	jalr	a5
204024a6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
204024aa:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
204024ae:	853e                	mv	a0,a5
204024b0:	50f2                	lw	ra,60(sp)
204024b2:	5462                	lw	s0,56(sp)
204024b4:	6121                	addi	sp,sp,64
204024b6:	8082                	ret

204024b8 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
204024b8:	7179                	addi	sp,sp,-48
204024ba:	d606                	sw	ra,44(sp)
204024bc:	d422                	sw	s0,40(sp)
204024be:	1800                	addi	s0,sp,48
204024c0:	fca42e23          	sw	a0,-36(s0)
204024c4:	fcb42c23          	sw	a1,-40(s0)
204024c8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
204024cc:	57fd                	li	a5,-1
204024ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
204024d2:	fdc42783          	lw	a5,-36(s0)
204024d6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
204024da:	fdc42503          	lw	a0,-36(s0)
204024de:	a5dff0ef          	jal	ra,20401f3a <__metal_driver_sifive_clint0_control_base>
204024e2:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
204024e6:	fd842703          	lw	a4,-40(s0)
204024ea:	4789                	li	a5,2
204024ec:	04f70963          	beq	a4,a5,2040253e <__metal_driver_riscv_clint0_command_request+0x86>
204024f0:	fd842703          	lw	a4,-40(s0)
204024f4:	4789                	li	a5,2
204024f6:	00e7c863          	blt	a5,a4,20402506 <__metal_driver_riscv_clint0_command_request+0x4e>
204024fa:	fd842703          	lw	a4,-40(s0)
204024fe:	4785                	li	a5,1
20402500:	00f70e63          	beq	a4,a5,2040251c <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20402504:	a8f1                	j	204025e0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20402506:	fd842703          	lw	a4,-40(s0)
2040250a:	478d                	li	a5,3
2040250c:	04f70d63          	beq	a4,a5,20402566 <__metal_driver_riscv_clint0_command_request+0xae>
20402510:	fd842703          	lw	a4,-40(s0)
20402514:	4791                	li	a5,4
20402516:	08f70963          	beq	a4,a5,204025a8 <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
2040251a:	a0d9                	j	204025e0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
2040251c:	fd442783          	lw	a5,-44(s0)
20402520:	cbcd                	beqz	a5,204025d2 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20402522:	fe842503          	lw	a0,-24(s0)
20402526:	acbff0ef          	jal	ra,20401ff0 <__metal_clint0_mtime_get>
2040252a:	87aa                	mv	a5,a0
2040252c:	882e                	mv	a6,a1
2040252e:	fd442703          	lw	a4,-44(s0)
20402532:	c31c                	sw	a5,0(a4)
20402534:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20402538:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
2040253c:	a859                	j	204025d2 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
2040253e:	fd442783          	lw	a5,-44(s0)
20402542:	cbd1                	beqz	a5,204025d6 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20402544:	fd442783          	lw	a5,-44(s0)
20402548:	439c                	lw	a5,0(a5)
2040254a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040254e:	fe042783          	lw	a5,-32(s0)
20402552:	078a                	slli	a5,a5,0x2
20402554:	873e                	mv	a4,a5
20402556:	fe442783          	lw	a5,-28(s0)
2040255a:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
2040255c:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20402560:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402564:	a88d                	j	204025d6 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20402566:	fd442783          	lw	a5,-44(s0)
2040256a:	cba5                	beqz	a5,204025da <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
2040256c:	fd442783          	lw	a5,-44(s0)
20402570:	439c                	lw	a5,0(a5)
20402572:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402576:	fe042783          	lw	a5,-32(s0)
2040257a:	078a                	slli	a5,a5,0x2
2040257c:	873e                	mv	a4,a5
2040257e:	fe442783          	lw	a5,-28(s0)
20402582:	97ba                	add	a5,a5,a4
20402584:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20402586:	4785                	li	a5,1
20402588:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
2040258a:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040258e:	fe042783          	lw	a5,-32(s0)
20402592:	078a                	slli	a5,a5,0x2
20402594:	873e                	mv	a4,a5
20402596:	fe442783          	lw	a5,-28(s0)
2040259a:	97ba                	add	a5,a5,a4
2040259c:	439c                	lw	a5,0(a5)
2040259e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
204025a2:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
204025a6:	a815                	j	204025da <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
204025a8:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
204025ac:	fd442783          	lw	a5,-44(s0)
204025b0:	c79d                	beqz	a5,204025de <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
204025b2:	fd442783          	lw	a5,-44(s0)
204025b6:	439c                	lw	a5,0(a5)
204025b8:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204025bc:	fe042783          	lw	a5,-32(s0)
204025c0:	078a                	slli	a5,a5,0x2
204025c2:	873e                	mv	a4,a5
204025c4:	fe442783          	lw	a5,-28(s0)
204025c8:	97ba                	add	a5,a5,a4
204025ca:	439c                	lw	a5,0(a5)
204025cc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
204025d0:	a039                	j	204025de <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
204025d2:	0001                	nop
204025d4:	a031                	j	204025e0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
204025d6:	0001                	nop
204025d8:	a021                	j	204025e0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
204025da:	0001                	nop
204025dc:	a011                	j	204025e0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
204025de:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
204025e0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
204025e4:	853e                	mv	a0,a5
204025e6:	50b2                	lw	ra,44(sp)
204025e8:	5422                	lw	s0,40(sp)
204025ea:	6145                	addi	sp,sp,48
204025ec:	8082                	ret

204025ee <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
204025ee:	7179                	addi	sp,sp,-48
204025f0:	d606                	sw	ra,44(sp)
204025f2:	d422                	sw	s0,40(sp)
204025f4:	1800                	addi	s0,sp,48
204025f6:	fca42e23          	sw	a0,-36(s0)
204025fa:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
204025fe:	513020ef          	jal	ra,20405310 <metal_cpu_get_current_hartid>
20402602:	87aa                	mv	a5,a0
20402604:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20402608:	fec40793          	addi	a5,s0,-20
2040260c:	863e                	mv	a2,a5
2040260e:	4589                	li	a1,2
20402610:	fdc42503          	lw	a0,-36(s0)
20402614:	3555                	jal	204024b8 <__metal_driver_riscv_clint0_command_request>
20402616:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20402618:	853e                	mv	a0,a5
2040261a:	50b2                	lw	ra,44(sp)
2040261c:	5422                	lw	s0,40(sp)
2040261e:	6145                	addi	sp,sp,48
20402620:	8082                	ret

20402622 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20402622:	7179                	addi	sp,sp,-48
20402624:	d606                	sw	ra,44(sp)
20402626:	d422                	sw	s0,40(sp)
20402628:	1800                	addi	s0,sp,48
2040262a:	fca42e23          	sw	a0,-36(s0)
2040262e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
20402632:	4df020ef          	jal	ra,20405310 <metal_cpu_get_current_hartid>
20402636:	87aa                	mv	a5,a0
20402638:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
2040263c:	fec40793          	addi	a5,s0,-20
20402640:	863e                	mv	a2,a5
20402642:	458d                	li	a1,3
20402644:	fdc42503          	lw	a0,-36(s0)
20402648:	3d85                	jal	204024b8 <__metal_driver_riscv_clint0_command_request>
2040264a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
2040264c:	853e                	mv	a0,a5
2040264e:	50b2                	lw	ra,44(sp)
20402650:	5422                	lw	s0,40(sp)
20402652:	6145                	addi	sp,sp,48
20402654:	8082                	ret

20402656 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20402656:	1101                	addi	sp,sp,-32
20402658:	ce22                	sw	s0,28(sp)
2040265a:	1000                	addi	s0,sp,32
2040265c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402660:	fec42703          	lw	a4,-20(s0)
20402664:	81818793          	addi	a5,gp,-2024 # 800007a0 <__metal_dt_cpu_0>
20402668:	00f71463          	bne	a4,a5,20402670 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
2040266c:	4781                	li	a5,0
2040266e:	a011                	j	20402672 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
20402670:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
20402672:	853e                	mv	a0,a5
20402674:	4472                	lw	s0,28(sp)
20402676:	6105                	addi	sp,sp,32
20402678:	8082                	ret

2040267a <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
2040267a:	1101                	addi	sp,sp,-32
2040267c:	ce22                	sw	s0,28(sp)
2040267e:	1000                	addi	s0,sp,32
20402680:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402684:	fec42703          	lw	a4,-20(s0)
20402688:	81818793          	addi	a5,gp,-2024 # 800007a0 <__metal_dt_cpu_0>
2040268c:	00f71763          	bne	a4,a5,2040269a <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
20402690:	000f47b7          	lui	a5,0xf4
20402694:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20402698:	a011                	j	2040269c <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
2040269a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
2040269c:	853e                	mv	a0,a5
2040269e:	4472                	lw	s0,28(sp)
204026a0:	6105                	addi	sp,sp,32
204026a2:	8082                	ret

204026a4 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
204026a4:	1101                	addi	sp,sp,-32
204026a6:	ce22                	sw	s0,28(sp)
204026a8:	1000                	addi	s0,sp,32
204026aa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204026ae:	fec42703          	lw	a4,-20(s0)
204026b2:	81818793          	addi	a5,gp,-2024 # 800007a0 <__metal_dt_cpu_0>
204026b6:	00f71763          	bne	a4,a5,204026c4 <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
204026ba:	800007b7          	lui	a5,0x80000
204026be:	0b078793          	addi	a5,a5,176 # 800000b0 <metal_segment_heap_target_end+0xffffec14>
204026c2:	a011                	j	204026c6 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
204026c4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
204026c6:	853e                	mv	a0,a5
204026c8:	4472                	lw	s0,28(sp)
204026ca:	6105                	addi	sp,sp,32
204026cc:	8082                	ret

204026ce <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
204026ce:	1101                	addi	sp,sp,-32
204026d0:	ce22                	sw	s0,28(sp)
204026d2:	1000                	addi	s0,sp,32
204026d4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
204026d8:	fec42783          	lw	a5,-20(s0)
204026dc:	00f04a63          	bgtz	a5,204026f0 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
204026e0:	fec42703          	lw	a4,-20(s0)
204026e4:	070a                	slli	a4,a4,0x2
204026e6:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
204026ea:	97ba                	add	a5,a5,a4
204026ec:	439c                	lw	a5,0(a5)
204026ee:	a011                	j	204026f2 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
204026f0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
204026f2:	853e                	mv	a0,a5
204026f4:	4472                	lw	s0,28(sp)
204026f6:	6105                	addi	sp,sp,32
204026f8:	8082                	ret

204026fa <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
204026fa:	1101                	addi	sp,sp,-32
204026fc:	ce22                	sw	s0,28(sp)
204026fe:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20402700:	f14027f3          	csrr	a5,mhartid
20402704:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20402708:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
2040270c:	853e                	mv	a0,a5
2040270e:	4472                	lw	s0,28(sp)
20402710:	6105                	addi	sp,sp,32
20402712:	8082                	ret

20402714 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20402714:	1101                	addi	sp,sp,-32
20402716:	ce22                	sw	s0,28(sp)
20402718:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
2040271a:	47a1                	li	a5,8
2040271c:	3007a7f3          	csrrs	a5,mstatus,a5
20402720:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
20402724:	0001                	nop
20402726:	4472                	lw	s0,28(sp)
20402728:	6105                	addi	sp,sp,32
2040272a:	8082                	ret

2040272c <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
2040272c:	1101                	addi	sp,sp,-32
2040272e:	ce22                	sw	s0,28(sp)
20402730:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402732:	47a1                	li	a5,8
20402734:	3007b7f3          	csrrc	a5,mstatus,a5
20402738:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
2040273c:	0001                	nop
2040273e:	4472                	lw	s0,28(sp)
20402740:	6105                	addi	sp,sp,32
20402742:	8082                	ret

20402744 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
20402744:	1101                	addi	sp,sp,-32
20402746:	ce22                	sw	s0,28(sp)
20402748:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
2040274a:	47a1                	li	a5,8
2040274c:	3047a7f3          	csrrs	a5,mie,a5
20402750:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
20402754:	0001                	nop
20402756:	4472                	lw	s0,28(sp)
20402758:	6105                	addi	sp,sp,32
2040275a:	8082                	ret

2040275c <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
2040275c:	1101                	addi	sp,sp,-32
2040275e:	ce22                	sw	s0,28(sp)
20402760:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402762:	47a1                	li	a5,8
20402764:	3047b7f3          	csrrc	a5,mie,a5
20402768:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
2040276c:	0001                	nop
2040276e:	4472                	lw	s0,28(sp)
20402770:	6105                	addi	sp,sp,32
20402772:	8082                	ret

20402774 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
20402774:	1101                	addi	sp,sp,-32
20402776:	ce22                	sw	s0,28(sp)
20402778:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
2040277a:	08000793          	li	a5,128
2040277e:	3047a7f3          	csrrs	a5,mie,a5
20402782:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20402786:	0001                	nop
20402788:	4472                	lw	s0,28(sp)
2040278a:	6105                	addi	sp,sp,32
2040278c:	8082                	ret

2040278e <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
2040278e:	1101                	addi	sp,sp,-32
20402790:	ce22                	sw	s0,28(sp)
20402792:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402794:	08000793          	li	a5,128
20402798:	3047b7f3          	csrrc	a5,mie,a5
2040279c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
204027a0:	0001                	nop
204027a2:	4472                	lw	s0,28(sp)
204027a4:	6105                	addi	sp,sp,32
204027a6:	8082                	ret

204027a8 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
204027a8:	1101                	addi	sp,sp,-32
204027aa:	ce22                	sw	s0,28(sp)
204027ac:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
204027ae:	6785                	lui	a5,0x1
204027b0:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
204027b4:	3047a7f3          	csrrs	a5,mie,a5
204027b8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
204027bc:	0001                	nop
204027be:	4472                	lw	s0,28(sp)
204027c0:	6105                	addi	sp,sp,32
204027c2:	8082                	ret

204027c4 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
204027c4:	1101                	addi	sp,sp,-32
204027c6:	ce22                	sw	s0,28(sp)
204027c8:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
204027ca:	6785                	lui	a5,0x1
204027cc:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
204027d0:	3047b7f3          	csrrc	a5,mie,a5
204027d4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
204027d8:	0001                	nop
204027da:	4472                	lw	s0,28(sp)
204027dc:	6105                	addi	sp,sp,32
204027de:	8082                	ret

204027e0 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
204027e0:	7179                	addi	sp,sp,-48
204027e2:	d622                	sw	s0,44(sp)
204027e4:	1800                	addi	s0,sp,48
204027e6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
204027ea:	fdc42783          	lw	a5,-36(s0)
204027ee:	4705                	li	a4,1
204027f0:	00f717b3          	sll	a5,a4,a5
204027f4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
204027f8:	fec42783          	lw	a5,-20(s0)
204027fc:	3047a7f3          	csrrs	a5,mie,a5
20402800:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
20402804:	0001                	nop
20402806:	5432                	lw	s0,44(sp)
20402808:	6145                	addi	sp,sp,48
2040280a:	8082                	ret

2040280c <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
2040280c:	7179                	addi	sp,sp,-48
2040280e:	d622                	sw	s0,44(sp)
20402810:	1800                	addi	s0,sp,48
20402812:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
20402816:	fdc42783          	lw	a5,-36(s0)
2040281a:	4705                	li	a4,1
2040281c:	00f717b3          	sll	a5,a4,a5
20402820:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20402824:	fec42783          	lw	a5,-20(s0)
20402828:	3047b7f3          	csrrc	a5,mie,a5
2040282c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20402830:	0001                	nop
20402832:	5432                	lw	s0,44(sp)
20402834:	6145                	addi	sp,sp,48
20402836:	8082                	ret

20402838 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20402838:	1101                	addi	sp,sp,-32
2040283a:	ce06                	sw	ra,28(sp)
2040283c:	cc22                	sw	s0,24(sp)
2040283e:	1000                	addi	s0,sp,32
20402840:	fea42623          	sw	a0,-20(s0)
20402844:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20402848:	06400513          	li	a0,100
2040284c:	2df020ef          	jal	ra,2040532a <metal_shutdown>

20402850 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20402850:	1101                	addi	sp,sp,-32
20402852:	ce06                	sw	ra,28(sp)
20402854:	cc22                	sw	s0,24(sp)
20402856:	1000                	addi	s0,sp,32
20402858:	fea42623          	sw	a0,-20(s0)
2040285c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20402860:	0c800513          	li	a0,200
20402864:	2c7020ef          	jal	ra,2040532a <metal_shutdown>

20402868 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20402868:	715d                	addi	sp,sp,-80
2040286a:	c686                	sw	ra,76(sp)
2040286c:	c496                	sw	t0,72(sp)
2040286e:	c29a                	sw	t1,68(sp)
20402870:	c09e                	sw	t2,64(sp)
20402872:	de22                	sw	s0,60(sp)
20402874:	dc2a                	sw	a0,56(sp)
20402876:	da2e                	sw	a1,52(sp)
20402878:	d832                	sw	a2,48(sp)
2040287a:	d636                	sw	a3,44(sp)
2040287c:	d43a                	sw	a4,40(sp)
2040287e:	d23e                	sw	a5,36(sp)
20402880:	d042                	sw	a6,32(sp)
20402882:	ce46                	sw	a7,28(sp)
20402884:	cc72                	sw	t3,24(sp)
20402886:	ca76                	sw	t4,20(sp)
20402888:	c87a                	sw	t5,16(sp)
2040288a:	c67e                	sw	t6,12(sp)
2040288c:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
2040288e:	12c00513          	li	a0,300
20402892:	299020ef          	jal	ra,2040532a <metal_shutdown>

20402896 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20402896:	711d                	addi	sp,sp,-96
20402898:	ce86                	sw	ra,92(sp)
2040289a:	cc96                	sw	t0,88(sp)
2040289c:	ca9a                	sw	t1,84(sp)
2040289e:	c89e                	sw	t2,80(sp)
204028a0:	c6a2                	sw	s0,76(sp)
204028a2:	c4aa                	sw	a0,72(sp)
204028a4:	c2ae                	sw	a1,68(sp)
204028a6:	c0b2                	sw	a2,64(sp)
204028a8:	de36                	sw	a3,60(sp)
204028aa:	dc3a                	sw	a4,56(sp)
204028ac:	da3e                	sw	a5,52(sp)
204028ae:	d842                	sw	a6,48(sp)
204028b0:	d646                	sw	a7,44(sp)
204028b2:	d472                	sw	t3,40(sp)
204028b4:	d276                	sw	t4,36(sp)
204028b6:	d07a                	sw	t5,32(sp)
204028b8:	ce7e                	sw	t6,28(sp)
204028ba:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204028bc:	3d3d                	jal	204026fa <__metal_myhart_id>
204028be:	872a                	mv	a4,a0
204028c0:	070a                	slli	a4,a4,0x2
204028c2:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
204028c6:	97ba                	add	a5,a5,a4
204028c8:	439c                	lw	a5,0(a5)
204028ca:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
204028ce:	fac42783          	lw	a5,-84(s0)
204028d2:	c785                	beqz	a5,204028fa <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204028d4:	fac42503          	lw	a0,-84(s0)
204028d8:	33f1                	jal	204026a4 <__metal_driver_cpu_interrupt_controller>
204028da:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
204028de:	fa842783          	lw	a5,-88(s0)
204028e2:	0e07a783          	lw	a5,224(a5)
204028e6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
204028ea:	fa842783          	lw	a5,-88(s0)
204028ee:	0d87a783          	lw	a5,216(a5)
204028f2:	fa442583          	lw	a1,-92(s0)
204028f6:	450d                	li	a0,3
204028f8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
204028fa:	0001                	nop
204028fc:	40f6                	lw	ra,92(sp)
204028fe:	42e6                	lw	t0,88(sp)
20402900:	4356                	lw	t1,84(sp)
20402902:	43c6                	lw	t2,80(sp)
20402904:	4436                	lw	s0,76(sp)
20402906:	4526                	lw	a0,72(sp)
20402908:	4596                	lw	a1,68(sp)
2040290a:	4606                	lw	a2,64(sp)
2040290c:	56f2                	lw	a3,60(sp)
2040290e:	5762                	lw	a4,56(sp)
20402910:	57d2                	lw	a5,52(sp)
20402912:	5842                	lw	a6,48(sp)
20402914:	58b2                	lw	a7,44(sp)
20402916:	5e22                	lw	t3,40(sp)
20402918:	5e92                	lw	t4,36(sp)
2040291a:	5f02                	lw	t5,32(sp)
2040291c:	4ff2                	lw	t6,28(sp)
2040291e:	6125                	addi	sp,sp,96
20402920:	30200073          	mret

20402924 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20402924:	7179                	addi	sp,sp,-48
20402926:	d606                	sw	ra,44(sp)
20402928:	d422                	sw	s0,40(sp)
2040292a:	1800                	addi	s0,sp,48
2040292c:	fca42e23          	sw	a0,-36(s0)
20402930:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402934:	33d9                	jal	204026fa <__metal_myhart_id>
20402936:	872a                	mv	a4,a0
20402938:	070a                	slli	a4,a4,0x2
2040293a:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
2040293e:	97ba                	add	a5,a5,a4
20402940:	439c                	lw	a5,0(a5)
20402942:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402946:	342027f3          	csrr	a5,mcause
2040294a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
2040294e:	fec42783          	lw	a5,-20(s0)
20402952:	c795                	beqz	a5,2040297e <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402954:	fec42503          	lw	a0,-20(s0)
20402958:	33b1                	jal	204026a4 <__metal_driver_cpu_interrupt_controller>
2040295a:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
2040295e:	fe842783          	lw	a5,-24(s0)
20402962:	3ff7f793          	andi	a5,a5,1023
20402966:	fe442703          	lw	a4,-28(s0)
2040296a:	0e078793          	addi	a5,a5,224
2040296e:	078a                	slli	a5,a5,0x2
20402970:	97ba                	add	a5,a5,a4
20402972:	479c                	lw	a5,8(a5)
20402974:	fdc42583          	lw	a1,-36(s0)
20402978:	fec42503          	lw	a0,-20(s0)
2040297c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
2040297e:	0001                	nop
20402980:	50b2                	lw	ra,44(sp)
20402982:	5422                	lw	s0,40(sp)
20402984:	6145                	addi	sp,sp,48
20402986:	8082                	ret

20402988 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20402988:	711d                	addi	sp,sp,-96
2040298a:	ce86                	sw	ra,92(sp)
2040298c:	cc96                	sw	t0,88(sp)
2040298e:	ca9a                	sw	t1,84(sp)
20402990:	c89e                	sw	t2,80(sp)
20402992:	c6a2                	sw	s0,76(sp)
20402994:	c4aa                	sw	a0,72(sp)
20402996:	c2ae                	sw	a1,68(sp)
20402998:	c0b2                	sw	a2,64(sp)
2040299a:	de36                	sw	a3,60(sp)
2040299c:	dc3a                	sw	a4,56(sp)
2040299e:	da3e                	sw	a5,52(sp)
204029a0:	d842                	sw	a6,48(sp)
204029a2:	d646                	sw	a7,44(sp)
204029a4:	d472                	sw	t3,40(sp)
204029a6:	d276                	sw	t4,36(sp)
204029a8:	d07a                	sw	t5,32(sp)
204029aa:	ce7e                	sw	t6,28(sp)
204029ac:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204029ae:	33b1                	jal	204026fa <__metal_myhart_id>
204029b0:	872a                	mv	a4,a0
204029b2:	070a                	slli	a4,a4,0x2
204029b4:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
204029b8:	97ba                	add	a5,a5,a4
204029ba:	439c                	lw	a5,0(a5)
204029bc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
204029c0:	fac42783          	lw	a5,-84(s0)
204029c4:	c785                	beqz	a5,204029ec <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204029c6:	fac42503          	lw	a0,-84(s0)
204029ca:	39e9                	jal	204026a4 <__metal_driver_cpu_interrupt_controller>
204029cc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
204029d0:	fa842783          	lw	a5,-88(s0)
204029d4:	1407a783          	lw	a5,320(a5)
204029d8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
204029dc:	fa842783          	lw	a5,-88(s0)
204029e0:	1387a783          	lw	a5,312(a5)
204029e4:	fa442583          	lw	a1,-92(s0)
204029e8:	451d                	li	a0,7
204029ea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
204029ec:	0001                	nop
204029ee:	40f6                	lw	ra,92(sp)
204029f0:	42e6                	lw	t0,88(sp)
204029f2:	4356                	lw	t1,84(sp)
204029f4:	43c6                	lw	t2,80(sp)
204029f6:	4436                	lw	s0,76(sp)
204029f8:	4526                	lw	a0,72(sp)
204029fa:	4596                	lw	a1,68(sp)
204029fc:	4606                	lw	a2,64(sp)
204029fe:	56f2                	lw	a3,60(sp)
20402a00:	5762                	lw	a4,56(sp)
20402a02:	57d2                	lw	a5,52(sp)
20402a04:	5842                	lw	a6,48(sp)
20402a06:	58b2                	lw	a7,44(sp)
20402a08:	5e22                	lw	t3,40(sp)
20402a0a:	5e92                	lw	t4,36(sp)
20402a0c:	5f02                	lw	t5,32(sp)
20402a0e:	4ff2                	lw	t6,28(sp)
20402a10:	6125                	addi	sp,sp,96
20402a12:	30200073          	mret

20402a16 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20402a16:	7179                	addi	sp,sp,-48
20402a18:	d606                	sw	ra,44(sp)
20402a1a:	d422                	sw	s0,40(sp)
20402a1c:	1800                	addi	s0,sp,48
20402a1e:	fca42e23          	sw	a0,-36(s0)
20402a22:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20402a26:	39d1                	jal	204026fa <__metal_myhart_id>
20402a28:	87aa                	mv	a5,a0
20402a2a:	853e                	mv	a0,a5
20402a2c:	314d                	jal	204026ce <__metal_driver_cpu_get>
20402a2e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20402a32:	fec42503          	lw	a0,-20(s0)
20402a36:	13a010ef          	jal	ra,20403b70 <__metal_driver_cpu_mtime_get>
20402a3a:	fea42023          	sw	a0,-32(s0)
20402a3e:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20402a42:	fe042783          	lw	a5,-32(s0)
20402a46:	fe442803          	lw	a6,-28(s0)
20402a4a:	45a9                	li	a1,10
20402a4c:	4601                	li	a2,0
20402a4e:	00b786b3          	add	a3,a5,a1
20402a52:	8536                	mv	a0,a3
20402a54:	00f53533          	sltu	a0,a0,a5
20402a58:	00c80733          	add	a4,a6,a2
20402a5c:	00e507b3          	add	a5,a0,a4
20402a60:	873e                	mv	a4,a5
20402a62:	87b6                	mv	a5,a3
20402a64:	883a                	mv	a6,a4
20402a66:	85be                	mv	a1,a5
20402a68:	8642                	mv	a2,a6
20402a6a:	fec42503          	lw	a0,-20(s0)
20402a6e:	168010ef          	jal	ra,20403bd6 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20402a72:	0001                	nop
20402a74:	50b2                	lw	ra,44(sp)
20402a76:	5422                	lw	s0,40(sp)
20402a78:	6145                	addi	sp,sp,48
20402a7a:	8082                	ret
20402a7c:	0000                	unimp
	...

20402a80 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402a80:	7119                	addi	sp,sp,-128
20402a82:	de86                	sw	ra,124(sp)
20402a84:	dc96                	sw	t0,120(sp)
20402a86:	da9a                	sw	t1,116(sp)
20402a88:	d89e                	sw	t2,112(sp)
20402a8a:	d6a2                	sw	s0,108(sp)
20402a8c:	d4aa                	sw	a0,104(sp)
20402a8e:	d2ae                	sw	a1,100(sp)
20402a90:	d0b2                	sw	a2,96(sp)
20402a92:	ceb6                	sw	a3,92(sp)
20402a94:	ccba                	sw	a4,88(sp)
20402a96:	cabe                	sw	a5,84(sp)
20402a98:	c8c2                	sw	a6,80(sp)
20402a9a:	c6c6                	sw	a7,76(sp)
20402a9c:	c4f2                	sw	t3,72(sp)
20402a9e:	c2f6                	sw	t4,68(sp)
20402aa0:	c0fa                	sw	t5,64(sp)
20402aa2:	de7e                	sw	t6,60(sp)
20402aa4:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402aa6:	c55ff0ef          	jal	ra,204026fa <__metal_myhart_id>
20402aaa:	872a                	mv	a4,a0
20402aac:	070a                	slli	a4,a4,0x2
20402aae:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402ab2:	97ba                	add	a5,a5,a4
20402ab4:	439c                	lw	a5,0(a5)
20402ab6:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402aba:	342027f3          	csrr	a5,mcause
20402abe:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20402ac2:	341027f3          	csrr	a5,mepc
20402ac6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
20402aca:	343027f3          	csrr	a5,mtval
20402ace:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20402ad2:	305027f3          	csrr	a5,mtvec
20402ad6:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
20402ada:	fac42783          	lw	a5,-84(s0)
20402ade:	c7e9                	beqz	a5,20402ba8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ae0:	fac42503          	lw	a0,-84(s0)
20402ae4:	bc1ff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20402ae8:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
20402aec:	fa842783          	lw	a5,-88(s0)
20402af0:	3ff7f793          	andi	a5,a5,1023
20402af4:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20402af8:	fa842783          	lw	a5,-88(s0)
20402afc:	0807d863          	bgez	a5,20402b8c <__metal_exception_handler+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402b00:	f9442703          	lw	a4,-108(s0)
20402b04:	47ad                	li	a5,11
20402b06:	00e7d763          	bge	a5,a4,20402b14 <__metal_exception_handler+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402b0a:	f9c42783          	lw	a5,-100(s0)
20402b0e:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402b12:	ef9d                	bnez	a5,20402b50 <__metal_exception_handler+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402b14:	f9842683          	lw	a3,-104(s0)
20402b18:	f9442703          	lw	a4,-108(s0)
20402b1c:	87ba                	mv	a5,a4
20402b1e:	0786                	slli	a5,a5,0x1
20402b20:	97ba                	add	a5,a5,a4
20402b22:	078e                	slli	a5,a5,0x3
20402b24:	97b6                	add	a5,a5,a3
20402b26:	0987a783          	lw	a5,152(a5)
20402b2a:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
20402b2e:	f9842683          	lw	a3,-104(s0)
20402b32:	f9442703          	lw	a4,-108(s0)
20402b36:	87ba                	mv	a5,a4
20402b38:	0786                	slli	a5,a5,0x1
20402b3a:	97ba                	add	a5,a5,a4
20402b3c:	078e                	slli	a5,a5,0x3
20402b3e:	97b6                	add	a5,a5,a3
20402b40:	0907a783          	lw	a5,144(a5)
20402b44:	f8c42583          	lw	a1,-116(s0)
20402b48:	f9442503          	lw	a0,-108(s0)
20402b4c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
20402b4e:	a8a9                	j	20402ba8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20402b50:	f9c42783          	lw	a5,-100(s0)
20402b54:	03f7f713          	andi	a4,a5,63
20402b58:	4789                	li	a5,2
20402b5a:	04f71763          	bne	a4,a5,20402ba8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
20402b5e:	307027f3          	csrr	a5,mtvt
20402b62:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402b66:	f9842783          	lw	a5,-104(s0)
20402b6a:	0dc7a783          	lw	a5,220(a5)
20402b6e:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20402b72:	f9042783          	lw	a5,-112(s0)
20402b76:	439c                	lw	a5,0(a5)
20402b78:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
20402b7c:	f8842783          	lw	a5,-120(s0)
20402b80:	f8c42583          	lw	a1,-116(s0)
20402b84:	f9442503          	lw	a0,-108(s0)
20402b88:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402b8a:	a839                	j	20402ba8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402b8c:	f9842703          	lw	a4,-104(s0)
20402b90:	f9442783          	lw	a5,-108(s0)
20402b94:	0e078793          	addi	a5,a5,224
20402b98:	078a                	slli	a5,a5,0x2
20402b9a:	97ba                	add	a5,a5,a4
20402b9c:	479c                	lw	a5,8(a5)
20402b9e:	f9442583          	lw	a1,-108(s0)
20402ba2:	fac42503          	lw	a0,-84(s0)
20402ba6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20402ba8:	50f6                	lw	ra,124(sp)
20402baa:	52e6                	lw	t0,120(sp)
20402bac:	5356                	lw	t1,116(sp)
20402bae:	53c6                	lw	t2,112(sp)
20402bb0:	5436                	lw	s0,108(sp)
20402bb2:	5526                	lw	a0,104(sp)
20402bb4:	5596                	lw	a1,100(sp)
20402bb6:	5606                	lw	a2,96(sp)
20402bb8:	46f6                	lw	a3,92(sp)
20402bba:	4766                	lw	a4,88(sp)
20402bbc:	47d6                	lw	a5,84(sp)
20402bbe:	4846                	lw	a6,80(sp)
20402bc0:	48b6                	lw	a7,76(sp)
20402bc2:	4e26                	lw	t3,72(sp)
20402bc4:	4e96                	lw	t4,68(sp)
20402bc6:	4f06                	lw	t5,64(sp)
20402bc8:	5ff2                	lw	t6,60(sp)
20402bca:	6109                	addi	sp,sp,128
20402bcc:	30200073          	mret
	...

20402bf6 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20402bf6:	711d                	addi	sp,sp,-96
20402bf8:	ce86                	sw	ra,92(sp)
20402bfa:	cc96                	sw	t0,88(sp)
20402bfc:	ca9a                	sw	t1,84(sp)
20402bfe:	c89e                	sw	t2,80(sp)
20402c00:	c6a2                	sw	s0,76(sp)
20402c02:	c4aa                	sw	a0,72(sp)
20402c04:	c2ae                	sw	a1,68(sp)
20402c06:	c0b2                	sw	a2,64(sp)
20402c08:	de36                	sw	a3,60(sp)
20402c0a:	dc3a                	sw	a4,56(sp)
20402c0c:	da3e                	sw	a5,52(sp)
20402c0e:	d842                	sw	a6,48(sp)
20402c10:	d646                	sw	a7,44(sp)
20402c12:	d472                	sw	t3,40(sp)
20402c14:	d276                	sw	t4,36(sp)
20402c16:	d07a                	sw	t5,32(sp)
20402c18:	ce7e                	sw	t6,28(sp)
20402c1a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402c1c:	adfff0ef          	jal	ra,204026fa <__metal_myhart_id>
20402c20:	872a                	mv	a4,a0
20402c22:	070a                	slli	a4,a4,0x2
20402c24:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402c28:	97ba                	add	a5,a5,a4
20402c2a:	439c                	lw	a5,0(a5)
20402c2c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20402c30:	fac42783          	lw	a5,-84(s0)
20402c34:	c78d                	beqz	a5,20402c5e <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402c36:	fac42503          	lw	a0,-84(s0)
20402c3a:	a6bff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20402c3e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20402c42:	fa842783          	lw	a5,-88(s0)
20402c46:	2187a783          	lw	a5,536(a5)
20402c4a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
20402c4e:	fa842783          	lw	a5,-88(s0)
20402c52:	2107a783          	lw	a5,528(a5)
20402c56:	fa442583          	lw	a1,-92(s0)
20402c5a:	4541                	li	a0,16
20402c5c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
20402c5e:	0001                	nop
20402c60:	40f6                	lw	ra,92(sp)
20402c62:	42e6                	lw	t0,88(sp)
20402c64:	4356                	lw	t1,84(sp)
20402c66:	43c6                	lw	t2,80(sp)
20402c68:	4436                	lw	s0,76(sp)
20402c6a:	4526                	lw	a0,72(sp)
20402c6c:	4596                	lw	a1,68(sp)
20402c6e:	4606                	lw	a2,64(sp)
20402c70:	56f2                	lw	a3,60(sp)
20402c72:	5762                	lw	a4,56(sp)
20402c74:	57d2                	lw	a5,52(sp)
20402c76:	5842                	lw	a6,48(sp)
20402c78:	58b2                	lw	a7,44(sp)
20402c7a:	5e22                	lw	t3,40(sp)
20402c7c:	5e92                	lw	t4,36(sp)
20402c7e:	5f02                	lw	t5,32(sp)
20402c80:	4ff2                	lw	t6,28(sp)
20402c82:	6125                	addi	sp,sp,96
20402c84:	30200073          	mret

20402c88 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402c88:	711d                	addi	sp,sp,-96
20402c8a:	ce86                	sw	ra,92(sp)
20402c8c:	cc96                	sw	t0,88(sp)
20402c8e:	ca9a                	sw	t1,84(sp)
20402c90:	c89e                	sw	t2,80(sp)
20402c92:	c6a2                	sw	s0,76(sp)
20402c94:	c4aa                	sw	a0,72(sp)
20402c96:	c2ae                	sw	a1,68(sp)
20402c98:	c0b2                	sw	a2,64(sp)
20402c9a:	de36                	sw	a3,60(sp)
20402c9c:	dc3a                	sw	a4,56(sp)
20402c9e:	da3e                	sw	a5,52(sp)
20402ca0:	d842                	sw	a6,48(sp)
20402ca2:	d646                	sw	a7,44(sp)
20402ca4:	d472                	sw	t3,40(sp)
20402ca6:	d276                	sw	t4,36(sp)
20402ca8:	d07a                	sw	t5,32(sp)
20402caa:	ce7e                	sw	t6,28(sp)
20402cac:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402cae:	a4dff0ef          	jal	ra,204026fa <__metal_myhart_id>
20402cb2:	872a                	mv	a4,a0
20402cb4:	070a                	slli	a4,a4,0x2
20402cb6:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402cba:	97ba                	add	a5,a5,a4
20402cbc:	439c                	lw	a5,0(a5)
20402cbe:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20402cc2:	fac42783          	lw	a5,-84(s0)
20402cc6:	c78d                	beqz	a5,20402cf0 <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402cc8:	fac42503          	lw	a0,-84(s0)
20402ccc:	9d9ff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20402cd0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20402cd4:	fa842783          	lw	a5,-88(s0)
20402cd8:	2307a783          	lw	a5,560(a5)
20402cdc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20402ce0:	fa842783          	lw	a5,-88(s0)
20402ce4:	2287a783          	lw	a5,552(a5)
20402ce8:	fa442583          	lw	a1,-92(s0)
20402cec:	4545                	li	a0,17
20402cee:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20402cf0:	0001                	nop
20402cf2:	40f6                	lw	ra,92(sp)
20402cf4:	42e6                	lw	t0,88(sp)
20402cf6:	4356                	lw	t1,84(sp)
20402cf8:	43c6                	lw	t2,80(sp)
20402cfa:	4436                	lw	s0,76(sp)
20402cfc:	4526                	lw	a0,72(sp)
20402cfe:	4596                	lw	a1,68(sp)
20402d00:	4606                	lw	a2,64(sp)
20402d02:	56f2                	lw	a3,60(sp)
20402d04:	5762                	lw	a4,56(sp)
20402d06:	57d2                	lw	a5,52(sp)
20402d08:	5842                	lw	a6,48(sp)
20402d0a:	58b2                	lw	a7,44(sp)
20402d0c:	5e22                	lw	t3,40(sp)
20402d0e:	5e92                	lw	t4,36(sp)
20402d10:	5f02                	lw	t5,32(sp)
20402d12:	4ff2                	lw	t6,28(sp)
20402d14:	6125                	addi	sp,sp,96
20402d16:	30200073          	mret

20402d1a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402d1a:	711d                	addi	sp,sp,-96
20402d1c:	ce86                	sw	ra,92(sp)
20402d1e:	cc96                	sw	t0,88(sp)
20402d20:	ca9a                	sw	t1,84(sp)
20402d22:	c89e                	sw	t2,80(sp)
20402d24:	c6a2                	sw	s0,76(sp)
20402d26:	c4aa                	sw	a0,72(sp)
20402d28:	c2ae                	sw	a1,68(sp)
20402d2a:	c0b2                	sw	a2,64(sp)
20402d2c:	de36                	sw	a3,60(sp)
20402d2e:	dc3a                	sw	a4,56(sp)
20402d30:	da3e                	sw	a5,52(sp)
20402d32:	d842                	sw	a6,48(sp)
20402d34:	d646                	sw	a7,44(sp)
20402d36:	d472                	sw	t3,40(sp)
20402d38:	d276                	sw	t4,36(sp)
20402d3a:	d07a                	sw	t5,32(sp)
20402d3c:	ce7e                	sw	t6,28(sp)
20402d3e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d40:	9bbff0ef          	jal	ra,204026fa <__metal_myhart_id>
20402d44:	872a                	mv	a4,a0
20402d46:	070a                	slli	a4,a4,0x2
20402d48:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402d4c:	97ba                	add	a5,a5,a4
20402d4e:	439c                	lw	a5,0(a5)
20402d50:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402d54:	fac42783          	lw	a5,-84(s0)
20402d58:	c78d                	beqz	a5,20402d82 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402d5a:	fac42503          	lw	a0,-84(s0)
20402d5e:	947ff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20402d62:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402d66:	fa842783          	lw	a5,-88(s0)
20402d6a:	2487a783          	lw	a5,584(a5)
20402d6e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20402d72:	fa842783          	lw	a5,-88(s0)
20402d76:	2407a783          	lw	a5,576(a5)
20402d7a:	fa442583          	lw	a1,-92(s0)
20402d7e:	4549                	li	a0,18
20402d80:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20402d82:	0001                	nop
20402d84:	40f6                	lw	ra,92(sp)
20402d86:	42e6                	lw	t0,88(sp)
20402d88:	4356                	lw	t1,84(sp)
20402d8a:	43c6                	lw	t2,80(sp)
20402d8c:	4436                	lw	s0,76(sp)
20402d8e:	4526                	lw	a0,72(sp)
20402d90:	4596                	lw	a1,68(sp)
20402d92:	4606                	lw	a2,64(sp)
20402d94:	56f2                	lw	a3,60(sp)
20402d96:	5762                	lw	a4,56(sp)
20402d98:	57d2                	lw	a5,52(sp)
20402d9a:	5842                	lw	a6,48(sp)
20402d9c:	58b2                	lw	a7,44(sp)
20402d9e:	5e22                	lw	t3,40(sp)
20402da0:	5e92                	lw	t4,36(sp)
20402da2:	5f02                	lw	t5,32(sp)
20402da4:	4ff2                	lw	t6,28(sp)
20402da6:	6125                	addi	sp,sp,96
20402da8:	30200073          	mret

20402dac <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
20402dac:	711d                	addi	sp,sp,-96
20402dae:	ce86                	sw	ra,92(sp)
20402db0:	cc96                	sw	t0,88(sp)
20402db2:	ca9a                	sw	t1,84(sp)
20402db4:	c89e                	sw	t2,80(sp)
20402db6:	c6a2                	sw	s0,76(sp)
20402db8:	c4aa                	sw	a0,72(sp)
20402dba:	c2ae                	sw	a1,68(sp)
20402dbc:	c0b2                	sw	a2,64(sp)
20402dbe:	de36                	sw	a3,60(sp)
20402dc0:	dc3a                	sw	a4,56(sp)
20402dc2:	da3e                	sw	a5,52(sp)
20402dc4:	d842                	sw	a6,48(sp)
20402dc6:	d646                	sw	a7,44(sp)
20402dc8:	d472                	sw	t3,40(sp)
20402dca:	d276                	sw	t4,36(sp)
20402dcc:	d07a                	sw	t5,32(sp)
20402dce:	ce7e                	sw	t6,28(sp)
20402dd0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402dd2:	929ff0ef          	jal	ra,204026fa <__metal_myhart_id>
20402dd6:	872a                	mv	a4,a0
20402dd8:	070a                	slli	a4,a4,0x2
20402dda:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402dde:	97ba                	add	a5,a5,a4
20402de0:	439c                	lw	a5,0(a5)
20402de2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20402de6:	fac42783          	lw	a5,-84(s0)
20402dea:	c78d                	beqz	a5,20402e14 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402dec:	fac42503          	lw	a0,-84(s0)
20402df0:	8b5ff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20402df4:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20402df8:	fa842783          	lw	a5,-88(s0)
20402dfc:	2607a783          	lw	a5,608(a5)
20402e00:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20402e04:	fa842783          	lw	a5,-88(s0)
20402e08:	2587a783          	lw	a5,600(a5)
20402e0c:	fa442583          	lw	a1,-92(s0)
20402e10:	454d                	li	a0,19
20402e12:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20402e14:	0001                	nop
20402e16:	40f6                	lw	ra,92(sp)
20402e18:	42e6                	lw	t0,88(sp)
20402e1a:	4356                	lw	t1,84(sp)
20402e1c:	43c6                	lw	t2,80(sp)
20402e1e:	4436                	lw	s0,76(sp)
20402e20:	4526                	lw	a0,72(sp)
20402e22:	4596                	lw	a1,68(sp)
20402e24:	4606                	lw	a2,64(sp)
20402e26:	56f2                	lw	a3,60(sp)
20402e28:	5762                	lw	a4,56(sp)
20402e2a:	57d2                	lw	a5,52(sp)
20402e2c:	5842                	lw	a6,48(sp)
20402e2e:	58b2                	lw	a7,44(sp)
20402e30:	5e22                	lw	t3,40(sp)
20402e32:	5e92                	lw	t4,36(sp)
20402e34:	5f02                	lw	t5,32(sp)
20402e36:	4ff2                	lw	t6,28(sp)
20402e38:	6125                	addi	sp,sp,96
20402e3a:	30200073          	mret

20402e3e <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
20402e3e:	711d                	addi	sp,sp,-96
20402e40:	ce86                	sw	ra,92(sp)
20402e42:	cc96                	sw	t0,88(sp)
20402e44:	ca9a                	sw	t1,84(sp)
20402e46:	c89e                	sw	t2,80(sp)
20402e48:	c6a2                	sw	s0,76(sp)
20402e4a:	c4aa                	sw	a0,72(sp)
20402e4c:	c2ae                	sw	a1,68(sp)
20402e4e:	c0b2                	sw	a2,64(sp)
20402e50:	de36                	sw	a3,60(sp)
20402e52:	dc3a                	sw	a4,56(sp)
20402e54:	da3e                	sw	a5,52(sp)
20402e56:	d842                	sw	a6,48(sp)
20402e58:	d646                	sw	a7,44(sp)
20402e5a:	d472                	sw	t3,40(sp)
20402e5c:	d276                	sw	t4,36(sp)
20402e5e:	d07a                	sw	t5,32(sp)
20402e60:	ce7e                	sw	t6,28(sp)
20402e62:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e64:	897ff0ef          	jal	ra,204026fa <__metal_myhart_id>
20402e68:	872a                	mv	a4,a0
20402e6a:	070a                	slli	a4,a4,0x2
20402e6c:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402e70:	97ba                	add	a5,a5,a4
20402e72:	439c                	lw	a5,0(a5)
20402e74:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20402e78:	fac42783          	lw	a5,-84(s0)
20402e7c:	c78d                	beqz	a5,20402ea6 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e7e:	fac42503          	lw	a0,-84(s0)
20402e82:	823ff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20402e86:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20402e8a:	fa842783          	lw	a5,-88(s0)
20402e8e:	2787a783          	lw	a5,632(a5)
20402e92:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20402e96:	fa842783          	lw	a5,-88(s0)
20402e9a:	2707a783          	lw	a5,624(a5)
20402e9e:	fa442583          	lw	a1,-92(s0)
20402ea2:	4551                	li	a0,20
20402ea4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20402ea6:	0001                	nop
20402ea8:	40f6                	lw	ra,92(sp)
20402eaa:	42e6                	lw	t0,88(sp)
20402eac:	4356                	lw	t1,84(sp)
20402eae:	43c6                	lw	t2,80(sp)
20402eb0:	4436                	lw	s0,76(sp)
20402eb2:	4526                	lw	a0,72(sp)
20402eb4:	4596                	lw	a1,68(sp)
20402eb6:	4606                	lw	a2,64(sp)
20402eb8:	56f2                	lw	a3,60(sp)
20402eba:	5762                	lw	a4,56(sp)
20402ebc:	57d2                	lw	a5,52(sp)
20402ebe:	5842                	lw	a6,48(sp)
20402ec0:	58b2                	lw	a7,44(sp)
20402ec2:	5e22                	lw	t3,40(sp)
20402ec4:	5e92                	lw	t4,36(sp)
20402ec6:	5f02                	lw	t5,32(sp)
20402ec8:	4ff2                	lw	t6,28(sp)
20402eca:	6125                	addi	sp,sp,96
20402ecc:	30200073          	mret

20402ed0 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20402ed0:	711d                	addi	sp,sp,-96
20402ed2:	ce86                	sw	ra,92(sp)
20402ed4:	cc96                	sw	t0,88(sp)
20402ed6:	ca9a                	sw	t1,84(sp)
20402ed8:	c89e                	sw	t2,80(sp)
20402eda:	c6a2                	sw	s0,76(sp)
20402edc:	c4aa                	sw	a0,72(sp)
20402ede:	c2ae                	sw	a1,68(sp)
20402ee0:	c0b2                	sw	a2,64(sp)
20402ee2:	de36                	sw	a3,60(sp)
20402ee4:	dc3a                	sw	a4,56(sp)
20402ee6:	da3e                	sw	a5,52(sp)
20402ee8:	d842                	sw	a6,48(sp)
20402eea:	d646                	sw	a7,44(sp)
20402eec:	d472                	sw	t3,40(sp)
20402eee:	d276                	sw	t4,36(sp)
20402ef0:	d07a                	sw	t5,32(sp)
20402ef2:	ce7e                	sw	t6,28(sp)
20402ef4:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ef6:	805ff0ef          	jal	ra,204026fa <__metal_myhart_id>
20402efa:	872a                	mv	a4,a0
20402efc:	070a                	slli	a4,a4,0x2
20402efe:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402f02:	97ba                	add	a5,a5,a4
20402f04:	439c                	lw	a5,0(a5)
20402f06:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20402f0a:	fac42783          	lw	a5,-84(s0)
20402f0e:	c78d                	beqz	a5,20402f38 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f10:	fac42503          	lw	a0,-84(s0)
20402f14:	f90ff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20402f18:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
20402f1c:	fa842783          	lw	a5,-88(s0)
20402f20:	2907a783          	lw	a5,656(a5)
20402f24:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20402f28:	fa842783          	lw	a5,-88(s0)
20402f2c:	2887a783          	lw	a5,648(a5)
20402f30:	fa442583          	lw	a1,-92(s0)
20402f34:	4555                	li	a0,21
20402f36:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20402f38:	0001                	nop
20402f3a:	40f6                	lw	ra,92(sp)
20402f3c:	42e6                	lw	t0,88(sp)
20402f3e:	4356                	lw	t1,84(sp)
20402f40:	43c6                	lw	t2,80(sp)
20402f42:	4436                	lw	s0,76(sp)
20402f44:	4526                	lw	a0,72(sp)
20402f46:	4596                	lw	a1,68(sp)
20402f48:	4606                	lw	a2,64(sp)
20402f4a:	56f2                	lw	a3,60(sp)
20402f4c:	5762                	lw	a4,56(sp)
20402f4e:	57d2                	lw	a5,52(sp)
20402f50:	5842                	lw	a6,48(sp)
20402f52:	58b2                	lw	a7,44(sp)
20402f54:	5e22                	lw	t3,40(sp)
20402f56:	5e92                	lw	t4,36(sp)
20402f58:	5f02                	lw	t5,32(sp)
20402f5a:	4ff2                	lw	t6,28(sp)
20402f5c:	6125                	addi	sp,sp,96
20402f5e:	30200073          	mret

20402f62 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20402f62:	711d                	addi	sp,sp,-96
20402f64:	ce86                	sw	ra,92(sp)
20402f66:	cc96                	sw	t0,88(sp)
20402f68:	ca9a                	sw	t1,84(sp)
20402f6a:	c89e                	sw	t2,80(sp)
20402f6c:	c6a2                	sw	s0,76(sp)
20402f6e:	c4aa                	sw	a0,72(sp)
20402f70:	c2ae                	sw	a1,68(sp)
20402f72:	c0b2                	sw	a2,64(sp)
20402f74:	de36                	sw	a3,60(sp)
20402f76:	dc3a                	sw	a4,56(sp)
20402f78:	da3e                	sw	a5,52(sp)
20402f7a:	d842                	sw	a6,48(sp)
20402f7c:	d646                	sw	a7,44(sp)
20402f7e:	d472                	sw	t3,40(sp)
20402f80:	d276                	sw	t4,36(sp)
20402f82:	d07a                	sw	t5,32(sp)
20402f84:	ce7e                	sw	t6,28(sp)
20402f86:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f88:	f72ff0ef          	jal	ra,204026fa <__metal_myhart_id>
20402f8c:	872a                	mv	a4,a0
20402f8e:	070a                	slli	a4,a4,0x2
20402f90:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402f94:	97ba                	add	a5,a5,a4
20402f96:	439c                	lw	a5,0(a5)
20402f98:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
20402f9c:	fac42783          	lw	a5,-84(s0)
20402fa0:	c78d                	beqz	a5,20402fca <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402fa2:	fac42503          	lw	a0,-84(s0)
20402fa6:	efeff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20402faa:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
20402fae:	fa842783          	lw	a5,-88(s0)
20402fb2:	2a87a783          	lw	a5,680(a5)
20402fb6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
20402fba:	fa842783          	lw	a5,-88(s0)
20402fbe:	2a07a783          	lw	a5,672(a5)
20402fc2:	fa442583          	lw	a1,-92(s0)
20402fc6:	4559                	li	a0,22
20402fc8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
20402fca:	0001                	nop
20402fcc:	40f6                	lw	ra,92(sp)
20402fce:	42e6                	lw	t0,88(sp)
20402fd0:	4356                	lw	t1,84(sp)
20402fd2:	43c6                	lw	t2,80(sp)
20402fd4:	4436                	lw	s0,76(sp)
20402fd6:	4526                	lw	a0,72(sp)
20402fd8:	4596                	lw	a1,68(sp)
20402fda:	4606                	lw	a2,64(sp)
20402fdc:	56f2                	lw	a3,60(sp)
20402fde:	5762                	lw	a4,56(sp)
20402fe0:	57d2                	lw	a5,52(sp)
20402fe2:	5842                	lw	a6,48(sp)
20402fe4:	58b2                	lw	a7,44(sp)
20402fe6:	5e22                	lw	t3,40(sp)
20402fe8:	5e92                	lw	t4,36(sp)
20402fea:	5f02                	lw	t5,32(sp)
20402fec:	4ff2                	lw	t6,28(sp)
20402fee:	6125                	addi	sp,sp,96
20402ff0:	30200073          	mret

20402ff4 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20402ff4:	711d                	addi	sp,sp,-96
20402ff6:	ce86                	sw	ra,92(sp)
20402ff8:	cc96                	sw	t0,88(sp)
20402ffa:	ca9a                	sw	t1,84(sp)
20402ffc:	c89e                	sw	t2,80(sp)
20402ffe:	c6a2                	sw	s0,76(sp)
20403000:	c4aa                	sw	a0,72(sp)
20403002:	c2ae                	sw	a1,68(sp)
20403004:	c0b2                	sw	a2,64(sp)
20403006:	de36                	sw	a3,60(sp)
20403008:	dc3a                	sw	a4,56(sp)
2040300a:	da3e                	sw	a5,52(sp)
2040300c:	d842                	sw	a6,48(sp)
2040300e:	d646                	sw	a7,44(sp)
20403010:	d472                	sw	t3,40(sp)
20403012:	d276                	sw	t4,36(sp)
20403014:	d07a                	sw	t5,32(sp)
20403016:	ce7e                	sw	t6,28(sp)
20403018:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040301a:	ee0ff0ef          	jal	ra,204026fa <__metal_myhart_id>
2040301e:	872a                	mv	a4,a0
20403020:	070a                	slli	a4,a4,0x2
20403022:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20403026:	97ba                	add	a5,a5,a4
20403028:	439c                	lw	a5,0(a5)
2040302a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
2040302e:	fac42783          	lw	a5,-84(s0)
20403032:	c78d                	beqz	a5,2040305c <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403034:	fac42503          	lw	a0,-84(s0)
20403038:	e6cff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
2040303c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20403040:	fa842783          	lw	a5,-88(s0)
20403044:	2c07a783          	lw	a5,704(a5)
20403048:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
2040304c:	fa842783          	lw	a5,-88(s0)
20403050:	2b87a783          	lw	a5,696(a5)
20403054:	fa442583          	lw	a1,-92(s0)
20403058:	455d                	li	a0,23
2040305a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
2040305c:	0001                	nop
2040305e:	40f6                	lw	ra,92(sp)
20403060:	42e6                	lw	t0,88(sp)
20403062:	4356                	lw	t1,84(sp)
20403064:	43c6                	lw	t2,80(sp)
20403066:	4436                	lw	s0,76(sp)
20403068:	4526                	lw	a0,72(sp)
2040306a:	4596                	lw	a1,68(sp)
2040306c:	4606                	lw	a2,64(sp)
2040306e:	56f2                	lw	a3,60(sp)
20403070:	5762                	lw	a4,56(sp)
20403072:	57d2                	lw	a5,52(sp)
20403074:	5842                	lw	a6,48(sp)
20403076:	58b2                	lw	a7,44(sp)
20403078:	5e22                	lw	t3,40(sp)
2040307a:	5e92                	lw	t4,36(sp)
2040307c:	5f02                	lw	t5,32(sp)
2040307e:	4ff2                	lw	t6,28(sp)
20403080:	6125                	addi	sp,sp,96
20403082:	30200073          	mret

20403086 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20403086:	711d                	addi	sp,sp,-96
20403088:	ce86                	sw	ra,92(sp)
2040308a:	cc96                	sw	t0,88(sp)
2040308c:	ca9a                	sw	t1,84(sp)
2040308e:	c89e                	sw	t2,80(sp)
20403090:	c6a2                	sw	s0,76(sp)
20403092:	c4aa                	sw	a0,72(sp)
20403094:	c2ae                	sw	a1,68(sp)
20403096:	c0b2                	sw	a2,64(sp)
20403098:	de36                	sw	a3,60(sp)
2040309a:	dc3a                	sw	a4,56(sp)
2040309c:	da3e                	sw	a5,52(sp)
2040309e:	d842                	sw	a6,48(sp)
204030a0:	d646                	sw	a7,44(sp)
204030a2:	d472                	sw	t3,40(sp)
204030a4:	d276                	sw	t4,36(sp)
204030a6:	d07a                	sw	t5,32(sp)
204030a8:	ce7e                	sw	t6,28(sp)
204030aa:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204030ac:	e4eff0ef          	jal	ra,204026fa <__metal_myhart_id>
204030b0:	872a                	mv	a4,a0
204030b2:	070a                	slli	a4,a4,0x2
204030b4:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
204030b8:	97ba                	add	a5,a5,a4
204030ba:	439c                	lw	a5,0(a5)
204030bc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
204030c0:	fac42783          	lw	a5,-84(s0)
204030c4:	c78d                	beqz	a5,204030ee <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204030c6:	fac42503          	lw	a0,-84(s0)
204030ca:	ddaff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
204030ce:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
204030d2:	fa842783          	lw	a5,-88(s0)
204030d6:	2d87a783          	lw	a5,728(a5)
204030da:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
204030de:	fa842783          	lw	a5,-88(s0)
204030e2:	2d07a783          	lw	a5,720(a5)
204030e6:	fa442583          	lw	a1,-92(s0)
204030ea:	4561                	li	a0,24
204030ec:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
204030ee:	0001                	nop
204030f0:	40f6                	lw	ra,92(sp)
204030f2:	42e6                	lw	t0,88(sp)
204030f4:	4356                	lw	t1,84(sp)
204030f6:	43c6                	lw	t2,80(sp)
204030f8:	4436                	lw	s0,76(sp)
204030fa:	4526                	lw	a0,72(sp)
204030fc:	4596                	lw	a1,68(sp)
204030fe:	4606                	lw	a2,64(sp)
20403100:	56f2                	lw	a3,60(sp)
20403102:	5762                	lw	a4,56(sp)
20403104:	57d2                	lw	a5,52(sp)
20403106:	5842                	lw	a6,48(sp)
20403108:	58b2                	lw	a7,44(sp)
2040310a:	5e22                	lw	t3,40(sp)
2040310c:	5e92                	lw	t4,36(sp)
2040310e:	5f02                	lw	t5,32(sp)
20403110:	4ff2                	lw	t6,28(sp)
20403112:	6125                	addi	sp,sp,96
20403114:	30200073          	mret

20403118 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20403118:	711d                	addi	sp,sp,-96
2040311a:	ce86                	sw	ra,92(sp)
2040311c:	cc96                	sw	t0,88(sp)
2040311e:	ca9a                	sw	t1,84(sp)
20403120:	c89e                	sw	t2,80(sp)
20403122:	c6a2                	sw	s0,76(sp)
20403124:	c4aa                	sw	a0,72(sp)
20403126:	c2ae                	sw	a1,68(sp)
20403128:	c0b2                	sw	a2,64(sp)
2040312a:	de36                	sw	a3,60(sp)
2040312c:	dc3a                	sw	a4,56(sp)
2040312e:	da3e                	sw	a5,52(sp)
20403130:	d842                	sw	a6,48(sp)
20403132:	d646                	sw	a7,44(sp)
20403134:	d472                	sw	t3,40(sp)
20403136:	d276                	sw	t4,36(sp)
20403138:	d07a                	sw	t5,32(sp)
2040313a:	ce7e                	sw	t6,28(sp)
2040313c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040313e:	dbcff0ef          	jal	ra,204026fa <__metal_myhart_id>
20403142:	872a                	mv	a4,a0
20403144:	070a                	slli	a4,a4,0x2
20403146:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
2040314a:	97ba                	add	a5,a5,a4
2040314c:	439c                	lw	a5,0(a5)
2040314e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20403152:	fac42783          	lw	a5,-84(s0)
20403156:	c78d                	beqz	a5,20403180 <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403158:	fac42503          	lw	a0,-84(s0)
2040315c:	d48ff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20403160:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20403164:	fa842783          	lw	a5,-88(s0)
20403168:	2f07a783          	lw	a5,752(a5)
2040316c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20403170:	fa842783          	lw	a5,-88(s0)
20403174:	2e87a783          	lw	a5,744(a5)
20403178:	fa442583          	lw	a1,-92(s0)
2040317c:	4565                	li	a0,25
2040317e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20403180:	0001                	nop
20403182:	40f6                	lw	ra,92(sp)
20403184:	42e6                	lw	t0,88(sp)
20403186:	4356                	lw	t1,84(sp)
20403188:	43c6                	lw	t2,80(sp)
2040318a:	4436                	lw	s0,76(sp)
2040318c:	4526                	lw	a0,72(sp)
2040318e:	4596                	lw	a1,68(sp)
20403190:	4606                	lw	a2,64(sp)
20403192:	56f2                	lw	a3,60(sp)
20403194:	5762                	lw	a4,56(sp)
20403196:	57d2                	lw	a5,52(sp)
20403198:	5842                	lw	a6,48(sp)
2040319a:	58b2                	lw	a7,44(sp)
2040319c:	5e22                	lw	t3,40(sp)
2040319e:	5e92                	lw	t4,36(sp)
204031a0:	5f02                	lw	t5,32(sp)
204031a2:	4ff2                	lw	t6,28(sp)
204031a4:	6125                	addi	sp,sp,96
204031a6:	30200073          	mret

204031aa <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
204031aa:	711d                	addi	sp,sp,-96
204031ac:	ce86                	sw	ra,92(sp)
204031ae:	cc96                	sw	t0,88(sp)
204031b0:	ca9a                	sw	t1,84(sp)
204031b2:	c89e                	sw	t2,80(sp)
204031b4:	c6a2                	sw	s0,76(sp)
204031b6:	c4aa                	sw	a0,72(sp)
204031b8:	c2ae                	sw	a1,68(sp)
204031ba:	c0b2                	sw	a2,64(sp)
204031bc:	de36                	sw	a3,60(sp)
204031be:	dc3a                	sw	a4,56(sp)
204031c0:	da3e                	sw	a5,52(sp)
204031c2:	d842                	sw	a6,48(sp)
204031c4:	d646                	sw	a7,44(sp)
204031c6:	d472                	sw	t3,40(sp)
204031c8:	d276                	sw	t4,36(sp)
204031ca:	d07a                	sw	t5,32(sp)
204031cc:	ce7e                	sw	t6,28(sp)
204031ce:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204031d0:	d2aff0ef          	jal	ra,204026fa <__metal_myhart_id>
204031d4:	872a                	mv	a4,a0
204031d6:	070a                	slli	a4,a4,0x2
204031d8:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
204031dc:	97ba                	add	a5,a5,a4
204031de:	439c                	lw	a5,0(a5)
204031e0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
204031e4:	fac42783          	lw	a5,-84(s0)
204031e8:	c78d                	beqz	a5,20403212 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204031ea:	fac42503          	lw	a0,-84(s0)
204031ee:	cb6ff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
204031f2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
204031f6:	fa842783          	lw	a5,-88(s0)
204031fa:	3087a783          	lw	a5,776(a5)
204031fe:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403202:	fa842783          	lw	a5,-88(s0)
20403206:	3007a783          	lw	a5,768(a5)
2040320a:	fa442583          	lw	a1,-92(s0)
2040320e:	4569                	li	a0,26
20403210:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403212:	0001                	nop
20403214:	40f6                	lw	ra,92(sp)
20403216:	42e6                	lw	t0,88(sp)
20403218:	4356                	lw	t1,84(sp)
2040321a:	43c6                	lw	t2,80(sp)
2040321c:	4436                	lw	s0,76(sp)
2040321e:	4526                	lw	a0,72(sp)
20403220:	4596                	lw	a1,68(sp)
20403222:	4606                	lw	a2,64(sp)
20403224:	56f2                	lw	a3,60(sp)
20403226:	5762                	lw	a4,56(sp)
20403228:	57d2                	lw	a5,52(sp)
2040322a:	5842                	lw	a6,48(sp)
2040322c:	58b2                	lw	a7,44(sp)
2040322e:	5e22                	lw	t3,40(sp)
20403230:	5e92                	lw	t4,36(sp)
20403232:	5f02                	lw	t5,32(sp)
20403234:	4ff2                	lw	t6,28(sp)
20403236:	6125                	addi	sp,sp,96
20403238:	30200073          	mret

2040323c <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
2040323c:	711d                	addi	sp,sp,-96
2040323e:	ce86                	sw	ra,92(sp)
20403240:	cc96                	sw	t0,88(sp)
20403242:	ca9a                	sw	t1,84(sp)
20403244:	c89e                	sw	t2,80(sp)
20403246:	c6a2                	sw	s0,76(sp)
20403248:	c4aa                	sw	a0,72(sp)
2040324a:	c2ae                	sw	a1,68(sp)
2040324c:	c0b2                	sw	a2,64(sp)
2040324e:	de36                	sw	a3,60(sp)
20403250:	dc3a                	sw	a4,56(sp)
20403252:	da3e                	sw	a5,52(sp)
20403254:	d842                	sw	a6,48(sp)
20403256:	d646                	sw	a7,44(sp)
20403258:	d472                	sw	t3,40(sp)
2040325a:	d276                	sw	t4,36(sp)
2040325c:	d07a                	sw	t5,32(sp)
2040325e:	ce7e                	sw	t6,28(sp)
20403260:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403262:	c98ff0ef          	jal	ra,204026fa <__metal_myhart_id>
20403266:	872a                	mv	a4,a0
20403268:	070a                	slli	a4,a4,0x2
2040326a:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
2040326e:	97ba                	add	a5,a5,a4
20403270:	439c                	lw	a5,0(a5)
20403272:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20403276:	fac42783          	lw	a5,-84(s0)
2040327a:	c78d                	beqz	a5,204032a4 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040327c:	fac42503          	lw	a0,-84(s0)
20403280:	c24ff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20403284:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403288:	fa842783          	lw	a5,-88(s0)
2040328c:	3207a783          	lw	a5,800(a5)
20403290:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403294:	fa842783          	lw	a5,-88(s0)
20403298:	3187a783          	lw	a5,792(a5)
2040329c:	fa442583          	lw	a1,-92(s0)
204032a0:	456d                	li	a0,27
204032a2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
204032a4:	0001                	nop
204032a6:	40f6                	lw	ra,92(sp)
204032a8:	42e6                	lw	t0,88(sp)
204032aa:	4356                	lw	t1,84(sp)
204032ac:	43c6                	lw	t2,80(sp)
204032ae:	4436                	lw	s0,76(sp)
204032b0:	4526                	lw	a0,72(sp)
204032b2:	4596                	lw	a1,68(sp)
204032b4:	4606                	lw	a2,64(sp)
204032b6:	56f2                	lw	a3,60(sp)
204032b8:	5762                	lw	a4,56(sp)
204032ba:	57d2                	lw	a5,52(sp)
204032bc:	5842                	lw	a6,48(sp)
204032be:	58b2                	lw	a7,44(sp)
204032c0:	5e22                	lw	t3,40(sp)
204032c2:	5e92                	lw	t4,36(sp)
204032c4:	5f02                	lw	t5,32(sp)
204032c6:	4ff2                	lw	t6,28(sp)
204032c8:	6125                	addi	sp,sp,96
204032ca:	30200073          	mret

204032ce <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
204032ce:	711d                	addi	sp,sp,-96
204032d0:	ce86                	sw	ra,92(sp)
204032d2:	cc96                	sw	t0,88(sp)
204032d4:	ca9a                	sw	t1,84(sp)
204032d6:	c89e                	sw	t2,80(sp)
204032d8:	c6a2                	sw	s0,76(sp)
204032da:	c4aa                	sw	a0,72(sp)
204032dc:	c2ae                	sw	a1,68(sp)
204032de:	c0b2                	sw	a2,64(sp)
204032e0:	de36                	sw	a3,60(sp)
204032e2:	dc3a                	sw	a4,56(sp)
204032e4:	da3e                	sw	a5,52(sp)
204032e6:	d842                	sw	a6,48(sp)
204032e8:	d646                	sw	a7,44(sp)
204032ea:	d472                	sw	t3,40(sp)
204032ec:	d276                	sw	t4,36(sp)
204032ee:	d07a                	sw	t5,32(sp)
204032f0:	ce7e                	sw	t6,28(sp)
204032f2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204032f4:	c06ff0ef          	jal	ra,204026fa <__metal_myhart_id>
204032f8:	872a                	mv	a4,a0
204032fa:	070a                	slli	a4,a4,0x2
204032fc:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20403300:	97ba                	add	a5,a5,a4
20403302:	439c                	lw	a5,0(a5)
20403304:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403308:	fac42783          	lw	a5,-84(s0)
2040330c:	c78d                	beqz	a5,20403336 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040330e:	fac42503          	lw	a0,-84(s0)
20403312:	b92ff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20403316:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
2040331a:	fa842783          	lw	a5,-88(s0)
2040331e:	3387a783          	lw	a5,824(a5)
20403322:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20403326:	fa842783          	lw	a5,-88(s0)
2040332a:	3307a783          	lw	a5,816(a5)
2040332e:	fa442583          	lw	a1,-92(s0)
20403332:	4571                	li	a0,28
20403334:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20403336:	0001                	nop
20403338:	40f6                	lw	ra,92(sp)
2040333a:	42e6                	lw	t0,88(sp)
2040333c:	4356                	lw	t1,84(sp)
2040333e:	43c6                	lw	t2,80(sp)
20403340:	4436                	lw	s0,76(sp)
20403342:	4526                	lw	a0,72(sp)
20403344:	4596                	lw	a1,68(sp)
20403346:	4606                	lw	a2,64(sp)
20403348:	56f2                	lw	a3,60(sp)
2040334a:	5762                	lw	a4,56(sp)
2040334c:	57d2                	lw	a5,52(sp)
2040334e:	5842                	lw	a6,48(sp)
20403350:	58b2                	lw	a7,44(sp)
20403352:	5e22                	lw	t3,40(sp)
20403354:	5e92                	lw	t4,36(sp)
20403356:	5f02                	lw	t5,32(sp)
20403358:	4ff2                	lw	t6,28(sp)
2040335a:	6125                	addi	sp,sp,96
2040335c:	30200073          	mret

20403360 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20403360:	711d                	addi	sp,sp,-96
20403362:	ce86                	sw	ra,92(sp)
20403364:	cc96                	sw	t0,88(sp)
20403366:	ca9a                	sw	t1,84(sp)
20403368:	c89e                	sw	t2,80(sp)
2040336a:	c6a2                	sw	s0,76(sp)
2040336c:	c4aa                	sw	a0,72(sp)
2040336e:	c2ae                	sw	a1,68(sp)
20403370:	c0b2                	sw	a2,64(sp)
20403372:	de36                	sw	a3,60(sp)
20403374:	dc3a                	sw	a4,56(sp)
20403376:	da3e                	sw	a5,52(sp)
20403378:	d842                	sw	a6,48(sp)
2040337a:	d646                	sw	a7,44(sp)
2040337c:	d472                	sw	t3,40(sp)
2040337e:	d276                	sw	t4,36(sp)
20403380:	d07a                	sw	t5,32(sp)
20403382:	ce7e                	sw	t6,28(sp)
20403384:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403386:	b74ff0ef          	jal	ra,204026fa <__metal_myhart_id>
2040338a:	872a                	mv	a4,a0
2040338c:	070a                	slli	a4,a4,0x2
2040338e:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20403392:	97ba                	add	a5,a5,a4
20403394:	439c                	lw	a5,0(a5)
20403396:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
2040339a:	fac42783          	lw	a5,-84(s0)
2040339e:	c78d                	beqz	a5,204033c8 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204033a0:	fac42503          	lw	a0,-84(s0)
204033a4:	b00ff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
204033a8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
204033ac:	fa842783          	lw	a5,-88(s0)
204033b0:	3507a783          	lw	a5,848(a5)
204033b4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
204033b8:	fa842783          	lw	a5,-88(s0)
204033bc:	3487a783          	lw	a5,840(a5)
204033c0:	fa442583          	lw	a1,-92(s0)
204033c4:	4575                	li	a0,29
204033c6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
204033c8:	0001                	nop
204033ca:	40f6                	lw	ra,92(sp)
204033cc:	42e6                	lw	t0,88(sp)
204033ce:	4356                	lw	t1,84(sp)
204033d0:	43c6                	lw	t2,80(sp)
204033d2:	4436                	lw	s0,76(sp)
204033d4:	4526                	lw	a0,72(sp)
204033d6:	4596                	lw	a1,68(sp)
204033d8:	4606                	lw	a2,64(sp)
204033da:	56f2                	lw	a3,60(sp)
204033dc:	5762                	lw	a4,56(sp)
204033de:	57d2                	lw	a5,52(sp)
204033e0:	5842                	lw	a6,48(sp)
204033e2:	58b2                	lw	a7,44(sp)
204033e4:	5e22                	lw	t3,40(sp)
204033e6:	5e92                	lw	t4,36(sp)
204033e8:	5f02                	lw	t5,32(sp)
204033ea:	4ff2                	lw	t6,28(sp)
204033ec:	6125                	addi	sp,sp,96
204033ee:	30200073          	mret

204033f2 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
204033f2:	711d                	addi	sp,sp,-96
204033f4:	ce86                	sw	ra,92(sp)
204033f6:	cc96                	sw	t0,88(sp)
204033f8:	ca9a                	sw	t1,84(sp)
204033fa:	c89e                	sw	t2,80(sp)
204033fc:	c6a2                	sw	s0,76(sp)
204033fe:	c4aa                	sw	a0,72(sp)
20403400:	c2ae                	sw	a1,68(sp)
20403402:	c0b2                	sw	a2,64(sp)
20403404:	de36                	sw	a3,60(sp)
20403406:	dc3a                	sw	a4,56(sp)
20403408:	da3e                	sw	a5,52(sp)
2040340a:	d842                	sw	a6,48(sp)
2040340c:	d646                	sw	a7,44(sp)
2040340e:	d472                	sw	t3,40(sp)
20403410:	d276                	sw	t4,36(sp)
20403412:	d07a                	sw	t5,32(sp)
20403414:	ce7e                	sw	t6,28(sp)
20403416:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403418:	ae2ff0ef          	jal	ra,204026fa <__metal_myhart_id>
2040341c:	872a                	mv	a4,a0
2040341e:	070a                	slli	a4,a4,0x2
20403420:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20403424:	97ba                	add	a5,a5,a4
20403426:	439c                	lw	a5,0(a5)
20403428:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
2040342c:	fac42783          	lw	a5,-84(s0)
20403430:	c78d                	beqz	a5,2040345a <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403432:	fac42503          	lw	a0,-84(s0)
20403436:	a6eff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
2040343a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
2040343e:	fa842783          	lw	a5,-88(s0)
20403442:	3687a783          	lw	a5,872(a5)
20403446:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
2040344a:	fa842783          	lw	a5,-88(s0)
2040344e:	3607a783          	lw	a5,864(a5)
20403452:	fa442583          	lw	a1,-92(s0)
20403456:	4579                	li	a0,30
20403458:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
2040345a:	0001                	nop
2040345c:	40f6                	lw	ra,92(sp)
2040345e:	42e6                	lw	t0,88(sp)
20403460:	4356                	lw	t1,84(sp)
20403462:	43c6                	lw	t2,80(sp)
20403464:	4436                	lw	s0,76(sp)
20403466:	4526                	lw	a0,72(sp)
20403468:	4596                	lw	a1,68(sp)
2040346a:	4606                	lw	a2,64(sp)
2040346c:	56f2                	lw	a3,60(sp)
2040346e:	5762                	lw	a4,56(sp)
20403470:	57d2                	lw	a5,52(sp)
20403472:	5842                	lw	a6,48(sp)
20403474:	58b2                	lw	a7,44(sp)
20403476:	5e22                	lw	t3,40(sp)
20403478:	5e92                	lw	t4,36(sp)
2040347a:	5f02                	lw	t5,32(sp)
2040347c:	4ff2                	lw	t6,28(sp)
2040347e:	6125                	addi	sp,sp,96
20403480:	30200073          	mret

20403484 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403484:	711d                	addi	sp,sp,-96
20403486:	ce86                	sw	ra,92(sp)
20403488:	cc96                	sw	t0,88(sp)
2040348a:	ca9a                	sw	t1,84(sp)
2040348c:	c89e                	sw	t2,80(sp)
2040348e:	c6a2                	sw	s0,76(sp)
20403490:	c4aa                	sw	a0,72(sp)
20403492:	c2ae                	sw	a1,68(sp)
20403494:	c0b2                	sw	a2,64(sp)
20403496:	de36                	sw	a3,60(sp)
20403498:	dc3a                	sw	a4,56(sp)
2040349a:	da3e                	sw	a5,52(sp)
2040349c:	d842                	sw	a6,48(sp)
2040349e:	d646                	sw	a7,44(sp)
204034a0:	d472                	sw	t3,40(sp)
204034a2:	d276                	sw	t4,36(sp)
204034a4:	d07a                	sw	t5,32(sp)
204034a6:	ce7e                	sw	t6,28(sp)
204034a8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204034aa:	a50ff0ef          	jal	ra,204026fa <__metal_myhart_id>
204034ae:	872a                	mv	a4,a0
204034b0:	070a                	slli	a4,a4,0x2
204034b2:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
204034b6:	97ba                	add	a5,a5,a4
204034b8:	439c                	lw	a5,0(a5)
204034ba:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
204034be:	fac42783          	lw	a5,-84(s0)
204034c2:	c78d                	beqz	a5,204034ec <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204034c4:	fac42503          	lw	a0,-84(s0)
204034c8:	9dcff0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
204034cc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
204034d0:	fa842783          	lw	a5,-88(s0)
204034d4:	3807a783          	lw	a5,896(a5)
204034d8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
204034dc:	fa842783          	lw	a5,-88(s0)
204034e0:	3787a783          	lw	a5,888(a5)
204034e4:	fa442583          	lw	a1,-92(s0)
204034e8:	457d                	li	a0,31
204034ea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
204034ec:	0001                	nop
204034ee:	40f6                	lw	ra,92(sp)
204034f0:	42e6                	lw	t0,88(sp)
204034f2:	4356                	lw	t1,84(sp)
204034f4:	43c6                	lw	t2,80(sp)
204034f6:	4436                	lw	s0,76(sp)
204034f8:	4526                	lw	a0,72(sp)
204034fa:	4596                	lw	a1,68(sp)
204034fc:	4606                	lw	a2,64(sp)
204034fe:	56f2                	lw	a3,60(sp)
20403500:	5762                	lw	a4,56(sp)
20403502:	57d2                	lw	a5,52(sp)
20403504:	5842                	lw	a6,48(sp)
20403506:	58b2                	lw	a7,44(sp)
20403508:	5e22                	lw	t3,40(sp)
2040350a:	5e92                	lw	t4,36(sp)
2040350c:	5f02                	lw	t5,32(sp)
2040350e:	4ff2                	lw	t6,28(sp)
20403510:	6125                	addi	sp,sp,96
20403512:	30200073          	mret

20403516 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403516:	1101                	addi	sp,sp,-32
20403518:	ce22                	sw	s0,28(sp)
2040351a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2040351c:	305027f3          	csrr	a5,mtvec
20403520:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403524:	fec42783          	lw	a5,-20(s0)
20403528:	03f7f793          	andi	a5,a5,63
2040352c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
20403530:	fec42703          	lw	a4,-20(s0)
20403534:	4789                	li	a5,2
20403536:	00f70d63          	beq	a4,a5,20403550 <__metal_controller_interrupt_vector_mode+0x3a>
2040353a:	fec42703          	lw	a4,-20(s0)
2040353e:	478d                	li	a5,3
20403540:	00f70a63          	beq	a4,a5,20403554 <__metal_controller_interrupt_vector_mode+0x3e>
20403544:	fec42703          	lw	a4,-20(s0)
20403548:	4785                	li	a5,1
2040354a:	00f70763          	beq	a4,a5,20403558 <__metal_controller_interrupt_vector_mode+0x42>
2040354e:	a039                	j	2040355c <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
20403550:	478d                	li	a5,3
20403552:	a031                	j	2040355e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403554:	4791                	li	a5,4
20403556:	a021                	j	2040355e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403558:	4785                	li	a5,1
2040355a:	a011                	j	2040355e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
2040355c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
2040355e:	853e                	mv	a0,a5
20403560:	4472                	lw	s0,28(sp)
20403562:	6105                	addi	sp,sp,32
20403564:	8082                	ret

20403566 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403566:	7179                	addi	sp,sp,-48
20403568:	d622                	sw	s0,44(sp)
2040356a:	1800                	addi	s0,sp,48
2040356c:	fca42e23          	sw	a0,-36(s0)
20403570:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403574:	305027f3          	csrr	a5,mtvec
20403578:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
2040357c:	fec42783          	lw	a5,-20(s0)
20403580:	fc07f793          	andi	a5,a5,-64
20403584:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403588:	fd842783          	lw	a5,-40(s0)
2040358c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20403590:	fdc42703          	lw	a4,-36(s0)
20403594:	4791                	li	a5,4
20403596:	06e7e063          	bltu	a5,a4,204035f6 <__metal_controller_interrupt_vector+0x90>
2040359a:	fdc42783          	lw	a5,-36(s0)
2040359e:	00279713          	slli	a4,a5,0x2
204035a2:	204057b7          	lui	a5,0x20405
204035a6:	64478793          	addi	a5,a5,1604 # 20405644 <__metal_driver_vtable_riscv_clint0+0x4c>
204035aa:	97ba                	add	a5,a5,a4
204035ac:	439c                	lw	a5,0(a5)
204035ae:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204035b0:	fe842783          	lw	a5,-24(s0)
204035b4:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
204035b8:	fec42783          	lw	a5,-20(s0)
204035bc:	0027e793          	ori	a5,a5,2
204035c0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
204035c4:	a80d                	j	204035f6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204035c6:	fe842783          	lw	a5,-24(s0)
204035ca:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
204035ce:	fec42783          	lw	a5,-20(s0)
204035d2:	0037e793          	ori	a5,a5,3
204035d6:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
204035da:	a831                	j	204035f6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
204035dc:	fe842783          	lw	a5,-24(s0)
204035e0:	0017e793          	ori	a5,a5,1
204035e4:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
204035e8:	a039                	j	204035f6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
204035ea:	fe842783          	lw	a5,-24(s0)
204035ee:	9bf1                	andi	a5,a5,-4
204035f0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
204035f4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
204035f6:	0001                	nop
204035f8:	5432                	lw	s0,44(sp)
204035fa:	6145                	addi	sp,sp,48
204035fc:	8082                	ret

204035fe <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
204035fe:	1101                	addi	sp,sp,-32
20403600:	ce22                	sw	s0,28(sp)
20403602:	1000                	addi	s0,sp,32
20403604:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403608:	fec42783          	lw	a5,-20(s0)
2040360c:	17f5                	addi	a5,a5,-3
2040360e:	4771                	li	a4,28
20403610:	00f76d63          	bltu	a4,a5,2040362a <__metal_valid_interrupt_id+0x2c>
20403614:	00279713          	slli	a4,a5,0x2
20403618:	204057b7          	lui	a5,0x20405
2040361c:	65878793          	addi	a5,a5,1624 # 20405658 <__metal_driver_vtable_riscv_clint0+0x60>
20403620:	97ba                	add	a5,a5,a4
20403622:	439c                	lw	a5,0(a5)
20403624:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20403626:	4785                	li	a5,1
20403628:	a019                	j	2040362e <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
2040362a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
2040362c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
2040362e:	853e                	mv	a0,a5
20403630:	4472                	lw	s0,28(sp)
20403632:	6105                	addi	sp,sp,32
20403634:	8082                	ret

20403636 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20403636:	7179                	addi	sp,sp,-48
20403638:	d606                	sw	ra,44(sp)
2040363a:	d422                	sw	s0,40(sp)
2040363c:	1800                	addi	s0,sp,48
2040363e:	fca42e23          	sw	a0,-36(s0)
20403642:	fcb42c23          	sw	a1,-40(s0)
20403646:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
2040364a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
2040364e:	fdc42783          	lw	a5,-36(s0)
20403652:	e399                	bnez	a5,20403658 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20403654:	57fd                	li	a5,-1
20403656:	a849                	j	204036e8 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20403658:	fd842703          	lw	a4,-40(s0)
2040365c:	47fd                	li	a5,31
2040365e:	08e7e063          	bltu	a5,a4,204036de <__metal_local_interrupt_enable+0xa8>
20403662:	fd842783          	lw	a5,-40(s0)
20403666:	00279713          	slli	a4,a5,0x2
2040366a:	204057b7          	lui	a5,0x20405
2040366e:	6cc78793          	addi	a5,a5,1740 # 204056cc <__metal_driver_vtable_riscv_clint0+0xd4>
20403672:	97ba                	add	a5,a5,a4
20403674:	439c                	lw	a5,0(a5)
20403676:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403678:	fd442783          	lw	a5,-44(s0)
2040367c:	c781                	beqz	a5,20403684 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
2040367e:	896ff0ef          	jal	ra,20402714 <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403682:	a08d                	j	204036e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403684:	8a8ff0ef          	jal	ra,2040272c <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403688:	a8b1                	j	204036e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
2040368a:	fd442783          	lw	a5,-44(s0)
2040368e:	c781                	beqz	a5,20403696 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20403690:	8b4ff0ef          	jal	ra,20402744 <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403694:	a881                	j	204036e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403696:	8c6ff0ef          	jal	ra,2040275c <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
2040369a:	a0a9                	j	204036e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040369c:	fd442783          	lw	a5,-44(s0)
204036a0:	c781                	beqz	a5,204036a8 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
204036a2:	8d2ff0ef          	jal	ra,20402774 <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
204036a6:	a83d                	j	204036e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
204036a8:	8e6ff0ef          	jal	ra,2040278e <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
204036ac:	a825                	j	204036e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
204036ae:	fd442783          	lw	a5,-44(s0)
204036b2:	c781                	beqz	a5,204036ba <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
204036b4:	8f4ff0ef          	jal	ra,204027a8 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
204036b8:	a035                	j	204036e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
204036ba:	90aff0ef          	jal	ra,204027c4 <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
204036be:	a01d                	j	204036e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
204036c0:	fd442783          	lw	a5,-44(s0)
204036c4:	c799                	beqz	a5,204036d2 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
204036c6:	fd842783          	lw	a5,-40(s0)
204036ca:	853e                	mv	a0,a5
204036cc:	914ff0ef          	jal	ra,204027e0 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
204036d0:	a811                	j	204036e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
204036d2:	fd842783          	lw	a5,-40(s0)
204036d6:	853e                	mv	a0,a5
204036d8:	934ff0ef          	jal	ra,2040280c <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
204036dc:	a021                	j	204036e4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
204036de:	57fd                	li	a5,-1
204036e0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
204036e4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
204036e8:	853e                	mv	a0,a5
204036ea:	50b2                	lw	ra,44(sp)
204036ec:	5422                	lw	s0,40(sp)
204036ee:	6145                	addi	sp,sp,48
204036f0:	8082                	ret

204036f2 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
204036f2:	7179                	addi	sp,sp,-48
204036f4:	d622                	sw	s0,44(sp)
204036f6:	1800                	addi	s0,sp,48
204036f8:	fca42e23          	sw	a0,-36(s0)
204036fc:	fcb42c23          	sw	a1,-40(s0)
20403700:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403704:	fdc42783          	lw	a5,-36(s0)
20403708:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040370c:	fd842703          	lw	a4,-40(s0)
20403710:	47ad                	li	a5,11
20403712:	02e7c263          	blt	a5,a4,20403736 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403716:	fd442783          	lw	a5,-44(s0)
2040371a:	cf91                	beqz	a5,20403736 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040371c:	fec42703          	lw	a4,-20(s0)
20403720:	fd842783          	lw	a5,-40(s0)
20403724:	0e078793          	addi	a5,a5,224
20403728:	078a                	slli	a5,a5,0x2
2040372a:	97ba                	add	a5,a5,a4
2040372c:	fd442703          	lw	a4,-44(s0)
20403730:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20403732:	4781                	li	a5,0
20403734:	a011                	j	20403738 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20403736:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20403738:	853e                	mv	a0,a5
2040373a:	5432                	lw	s0,44(sp)
2040373c:	6145                	addi	sp,sp,48
2040373e:	8082                	ret

20403740 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
20403740:	7139                	addi	sp,sp,-64
20403742:	de06                	sw	ra,60(sp)
20403744:	dc22                	sw	s0,56(sp)
20403746:	0080                	addi	s0,sp,64
20403748:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040374c:	fcc42783          	lw	a5,-52(s0)
20403750:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20403754:	fe442783          	lw	a5,-28(s0)
20403758:	43dc                	lw	a5,4(a5)
2040375a:	10079d63          	bnez	a5,20403874 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
2040375e:	57fd                	li	a5,-1
20403760:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20403764:	57fd                	li	a5,-1
20403766:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
2040376a:	301027f3          	csrr	a5,misa
2040376e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20403772:	fe042703          	lw	a4,-32(s0)
20403776:	6789                	lui	a5,0x2
20403778:	8ff9                	and	a5,a5,a4
2040377a:	e799                	bnez	a5,20403788 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
2040377c:	fe042703          	lw	a4,-32(s0)
20403780:	000407b7          	lui	a5,0x40
20403784:	8ff9                	and	a5,a5,a4
20403786:	c799                	beqz	a5,20403794 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403788:	57fd                	li	a5,-1
2040378a:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040378e:	57fd                	li	a5,-1
20403790:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403794:	fe042703          	lw	a4,-32(s0)
20403798:	000407b7          	lui	a5,0x40
2040379c:	8ff9                	and	a5,a5,a4
2040379e:	c781                	beqz	a5,204037a6 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
204037a0:	57fd                	li	a5,-1
204037a2:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
204037a6:	fe042623          	sw	zero,-20(s0)
204037aa:	a0b9                	j	204037f8 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
204037ac:	fe442683          	lw	a3,-28(s0)
204037b0:	fec42703          	lw	a4,-20(s0)
204037b4:	87ba                	mv	a5,a4
204037b6:	0786                	slli	a5,a5,0x1
204037b8:	97ba                	add	a5,a5,a4
204037ba:	078e                	slli	a5,a5,0x3
204037bc:	97b6                	add	a5,a5,a3
204037be:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
204037c2:	fe442683          	lw	a3,-28(s0)
204037c6:	fec42703          	lw	a4,-20(s0)
204037ca:	87ba                	mv	a5,a4
204037cc:	0786                	slli	a5,a5,0x1
204037ce:	97ba                	add	a5,a5,a4
204037d0:	078e                	slli	a5,a5,0x3
204037d2:	97b6                	add	a5,a5,a3
204037d4:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
204037d8:	fe442683          	lw	a3,-28(s0)
204037dc:	fec42703          	lw	a4,-20(s0)
204037e0:	87ba                	mv	a5,a4
204037e2:	0786                	slli	a5,a5,0x1
204037e4:	97ba                	add	a5,a5,a4
204037e6:	078e                	slli	a5,a5,0x3
204037e8:	97b6                	add	a5,a5,a3
204037ea:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
204037ee:	fec42783          	lw	a5,-20(s0)
204037f2:	0785                	addi	a5,a5,1
204037f4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
204037f8:	fec42703          	lw	a4,-20(s0)
204037fc:	47fd                	li	a5,31
204037fe:	fae7d7e3          	bge	a5,a4,204037ac <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403802:	fe042423          	sw	zero,-24(s0)
20403806:	a01d                	j	2040382c <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403808:	fe442703          	lw	a4,-28(s0)
2040380c:	fe842783          	lw	a5,-24(s0)
20403810:	0e078793          	addi	a5,a5,224
20403814:	078a                	slli	a5,a5,0x2
20403816:	97ba                	add	a5,a5,a4
20403818:	20403737          	lui	a4,0x20403
2040381c:	83870713          	addi	a4,a4,-1992 # 20402838 <__metal_default_exception_handler>
20403820:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403822:	fe842783          	lw	a5,-24(s0)
20403826:	0785                	addi	a5,a5,1
20403828:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
2040382c:	fe842703          	lw	a4,-24(s0)
20403830:	47ad                	li	a5,11
20403832:	fce7dbe3          	bge	a5,a4,20403808 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20403836:	204037b7          	lui	a5,0x20403
2040383a:	a8078593          	addi	a1,a5,-1408 # 20402a80 <__metal_exception_handler>
2040383e:	4501                	li	a0,0
20403840:	331d                	jal	20403566 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20403842:	301027f3          	csrr	a5,misa
20403846:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
2040384a:	fdc42703          	lw	a4,-36(s0)
2040384e:	67c1                	lui	a5,0x10
20403850:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20403854:	8ff9                	and	a5,a5,a4
20403856:	cb99                	beqz	a5,2040386c <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20403858:	300027f3          	csrr	a5,mstatus
2040385c:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20403860:	fdc42703          	lw	a4,-36(s0)
20403864:	6789                	lui	a5,0x2
20403866:	8fd9                	or	a5,a5,a4
20403868:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
2040386c:	fe442783          	lw	a5,-28(s0)
20403870:	4705                	li	a4,1
20403872:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20403874:	0001                	nop
20403876:	50f2                	lw	ra,60(sp)
20403878:	5462                	lw	s0,56(sp)
2040387a:	6121                	addi	sp,sp,64
2040387c:	8082                	ret

2040387e <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
2040387e:	7179                	addi	sp,sp,-48
20403880:	d606                	sw	ra,44(sp)
20403882:	d422                	sw	s0,40(sp)
20403884:	1800                	addi	s0,sp,48
20403886:	fca42e23          	sw	a0,-36(s0)
2040388a:	fcb42c23          	sw	a1,-40(s0)
2040388e:	fcc42a23          	sw	a2,-44(s0)
20403892:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403896:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040389a:	fdc42783          	lw	a5,-36(s0)
2040389e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
204038a2:	fd842503          	lw	a0,-40(s0)
204038a6:	3ba1                	jal	204035fe <__metal_valid_interrupt_id>
204038a8:	87aa                	mv	a5,a0
204038aa:	e399                	bnez	a5,204038b0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
204038ac:	57d5                	li	a5,-11
204038ae:	aa11                	j	204039c2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
204038b0:	fd442783          	lw	a5,-44(s0)
204038b4:	cf85                	beqz	a5,204038ec <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
204038b6:	fe842683          	lw	a3,-24(s0)
204038ba:	fd842703          	lw	a4,-40(s0)
204038be:	87ba                	mv	a5,a4
204038c0:	0786                	slli	a5,a5,0x1
204038c2:	97ba                	add	a5,a5,a4
204038c4:	078e                	slli	a5,a5,0x3
204038c6:	97b6                	add	a5,a5,a3
204038c8:	fd442703          	lw	a4,-44(s0)
204038cc:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
204038d0:	fe842683          	lw	a3,-24(s0)
204038d4:	fd842703          	lw	a4,-40(s0)
204038d8:	87ba                	mv	a5,a4
204038da:	0786                	slli	a5,a5,0x1
204038dc:	97ba                	add	a5,a5,a4
204038de:	078e                	slli	a5,a5,0x3
204038e0:	97b6                	add	a5,a5,a3
204038e2:	fd042703          	lw	a4,-48(s0)
204038e6:	08e7ac23          	sw	a4,152(a5)
204038ea:	a8d1                	j	204039be <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
204038ec:	fd842783          	lw	a5,-40(s0)
204038f0:	17f5                	addi	a5,a5,-3
204038f2:	4771                	li	a4,28
204038f4:	0cf76263          	bltu	a4,a5,204039b8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
204038f8:	00279713          	slli	a4,a5,0x2
204038fc:	204057b7          	lui	a5,0x20405
20403900:	74c78793          	addi	a5,a5,1868 # 2040574c <__metal_driver_vtable_riscv_clint0+0x154>
20403904:	97ba                	add	a5,a5,a4
20403906:	439c                	lw	a5,0(a5)
20403908:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
2040390a:	fe842683          	lw	a3,-24(s0)
2040390e:	fd842703          	lw	a4,-40(s0)
20403912:	87ba                	mv	a5,a4
20403914:	0786                	slli	a5,a5,0x1
20403916:	97ba                	add	a5,a5,a4
20403918:	078e                	slli	a5,a5,0x3
2040391a:	97b6                	add	a5,a5,a3
2040391c:	20403737          	lui	a4,0x20403
20403920:	92470713          	addi	a4,a4,-1756 # 20402924 <__metal_default_sw_handler>
20403924:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20403928:	fe842683          	lw	a3,-24(s0)
2040392c:	fd842703          	lw	a4,-40(s0)
20403930:	87ba                	mv	a5,a4
20403932:	0786                	slli	a5,a5,0x1
20403934:	97ba                	add	a5,a5,a4
20403936:	078e                	slli	a5,a5,0x3
20403938:	97b6                	add	a5,a5,a3
2040393a:	fd042703          	lw	a4,-48(s0)
2040393e:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20403942:	a8b5                	j	204039be <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20403944:	fe842683          	lw	a3,-24(s0)
20403948:	fd842703          	lw	a4,-40(s0)
2040394c:	87ba                	mv	a5,a4
2040394e:	0786                	slli	a5,a5,0x1
20403950:	97ba                	add	a5,a5,a4
20403952:	078e                	slli	a5,a5,0x3
20403954:	97b6                	add	a5,a5,a3
20403956:	20403737          	lui	a4,0x20403
2040395a:	a1670713          	addi	a4,a4,-1514 # 20402a16 <__metal_default_timer_handler>
2040395e:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20403962:	fe842683          	lw	a3,-24(s0)
20403966:	fd842703          	lw	a4,-40(s0)
2040396a:	87ba                	mv	a5,a4
2040396c:	0786                	slli	a5,a5,0x1
2040396e:	97ba                	add	a5,a5,a4
20403970:	078e                	slli	a5,a5,0x3
20403972:	97b6                	add	a5,a5,a3
20403974:	fd042703          	lw	a4,-48(s0)
20403978:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
2040397c:	a089                	j	204039be <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
2040397e:	fe842683          	lw	a3,-24(s0)
20403982:	fd842703          	lw	a4,-40(s0)
20403986:	87ba                	mv	a5,a4
20403988:	0786                	slli	a5,a5,0x1
2040398a:	97ba                	add	a5,a5,a4
2040398c:	078e                	slli	a5,a5,0x3
2040398e:	97b6                	add	a5,a5,a3
20403990:	20403737          	lui	a4,0x20403
20403994:	85070713          	addi	a4,a4,-1968 # 20402850 <__metal_default_interrupt_handler>
20403998:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
2040399c:	fe842683          	lw	a3,-24(s0)
204039a0:	fd842703          	lw	a4,-40(s0)
204039a4:	87ba                	mv	a5,a4
204039a6:	0786                	slli	a5,a5,0x1
204039a8:	97ba                	add	a5,a5,a4
204039aa:	078e                	slli	a5,a5,0x3
204039ac:	97b6                	add	a5,a5,a3
204039ae:	fd042703          	lw	a4,-48(s0)
204039b2:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
204039b6:	a021                	j	204039be <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
204039b8:	57d1                	li	a5,-12
204039ba:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
204039be:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
204039c2:	853e                	mv	a0,a5
204039c4:	50b2                	lw	ra,44(sp)
204039c6:	5422                	lw	s0,40(sp)
204039c8:	6145                	addi	sp,sp,48
204039ca:	8082                	ret

204039cc <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
204039cc:	1101                	addi	sp,sp,-32
204039ce:	ce06                	sw	ra,28(sp)
204039d0:	cc22                	sw	s0,24(sp)
204039d2:	1000                	addi	s0,sp,32
204039d4:	fea42623          	sw	a0,-20(s0)
204039d8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
204039dc:	fe842783          	lw	a5,-24(s0)
204039e0:	4605                	li	a2,1
204039e2:	85be                	mv	a1,a5
204039e4:	fec42503          	lw	a0,-20(s0)
204039e8:	c4fff0ef          	jal	ra,20403636 <__metal_local_interrupt_enable>
204039ec:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
204039ee:	853e                	mv	a0,a5
204039f0:	40f2                	lw	ra,28(sp)
204039f2:	4462                	lw	s0,24(sp)
204039f4:	6105                	addi	sp,sp,32
204039f6:	8082                	ret

204039f8 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
204039f8:	1101                	addi	sp,sp,-32
204039fa:	ce06                	sw	ra,28(sp)
204039fc:	cc22                	sw	s0,24(sp)
204039fe:	1000                	addi	s0,sp,32
20403a00:	fea42623          	sw	a0,-20(s0)
20403a04:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403a08:	fe842783          	lw	a5,-24(s0)
20403a0c:	4601                	li	a2,0
20403a0e:	85be                	mv	a1,a5
20403a10:	fec42503          	lw	a0,-20(s0)
20403a14:	c23ff0ef          	jal	ra,20403636 <__metal_local_interrupt_enable>
20403a18:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403a1a:	853e                	mv	a0,a5
20403a1c:	40f2                	lw	ra,28(sp)
20403a1e:	4462                	lw	s0,24(sp)
20403a20:	6105                	addi	sp,sp,32
20403a22:	8082                	ret

20403a24 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20403a24:	1101                	addi	sp,sp,-32
20403a26:	ce06                	sw	ra,28(sp)
20403a28:	cc22                	sw	s0,24(sp)
20403a2a:	1000                	addi	s0,sp,32
20403a2c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20403a30:	ae7ff0ef          	jal	ra,20403516 <__metal_controller_interrupt_vector_mode>
20403a34:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20403a36:	853e                	mv	a0,a5
20403a38:	40f2                	lw	ra,28(sp)
20403a3a:	4462                	lw	s0,24(sp)
20403a3c:	6105                	addi	sp,sp,32
20403a3e:	8082                	ret

20403a40 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20403a40:	7179                	addi	sp,sp,-48
20403a42:	d606                	sw	ra,44(sp)
20403a44:	d422                	sw	s0,40(sp)
20403a46:	1800                	addi	s0,sp,48
20403a48:	fca42e23          	sw	a0,-36(s0)
20403a4c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403a50:	fdc42783          	lw	a5,-36(s0)
20403a54:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20403a58:	fd842783          	lw	a5,-40(s0)
20403a5c:	eb99                	bnez	a5,20403a72 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20403a5e:	204037b7          	lui	a5,0x20403
20403a62:	a8078593          	addi	a1,a5,-1408 # 20402a80 <__metal_exception_handler>
20403a66:	fd842503          	lw	a0,-40(s0)
20403a6a:	afdff0ef          	jal	ra,20403566 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20403a6e:	4781                	li	a5,0
20403a70:	a00d                	j	20403a92 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20403a72:	fd842703          	lw	a4,-40(s0)
20403a76:	4785                	li	a5,1
20403a78:	00f71c63          	bne	a4,a5,20403a90 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20403a7c:	204057b7          	lui	a5,0x20405
20403a80:	38078593          	addi	a1,a5,896 # 20405380 <__metal_vector_table>
20403a84:	fd842503          	lw	a0,-40(s0)
20403a88:	adfff0ef          	jal	ra,20403566 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20403a8c:	4781                	li	a5,0
20403a8e:	a011                	j	20403a92 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20403a90:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20403a92:	853e                	mv	a0,a5
20403a94:	50b2                	lw	ra,44(sp)
20403a96:	5422                	lw	s0,40(sp)
20403a98:	6145                	addi	sp,sp,48
20403a9a:	8082                	ret

20403a9c <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20403a9c:	1101                	addi	sp,sp,-32
20403a9e:	ce22                	sw	s0,28(sp)
20403aa0:	1000                	addi	s0,sp,32
20403aa2:	fea42623          	sw	a0,-20(s0)
20403aa6:	feb42423          	sw	a1,-24(s0)
20403aaa:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20403aae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
20403ab0:	853e                	mv	a0,a5
20403ab2:	4472                	lw	s0,28(sp)
20403ab4:	6105                	addi	sp,sp,32
20403ab6:	8082                	ret

20403ab8 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20403ab8:	7139                	addi	sp,sp,-64
20403aba:	de22                	sw	s0,60(sp)
20403abc:	0080                	addi	s0,sp,64
20403abe:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20403ac2:	4301                	li	t1,0
20403ac4:	4381                	li	t2,0
20403ac6:	fe642423          	sw	t1,-24(s0)
20403aca:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20403ace:	b8002573          	csrr	a0,mcycleh
20403ad2:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20403ad6:	b0002573          	csrr	a0,mcycle
20403ada:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20403ade:	b8002573          	csrr	a0,mcycleh
20403ae2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20403ae6:	fe442883          	lw	a7,-28(s0)
20403aea:	fdc42503          	lw	a0,-36(s0)
20403aee:	02a89563          	bne	a7,a0,20403b18 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20403af2:	fe442503          	lw	a0,-28(s0)
20403af6:	85aa                	mv	a1,a0
20403af8:	4601                	li	a2,0
20403afa:	00059813          	slli	a6,a1,0x0
20403afe:	4781                	li	a5,0
20403b00:	fe042603          	lw	a2,-32(s0)
20403b04:	86b2                	mv	a3,a2
20403b06:	4701                	li	a4,0
20403b08:	00d7e633          	or	a2,a5,a3
20403b0c:	fec42423          	sw	a2,-24(s0)
20403b10:	00e867b3          	or	a5,a6,a4
20403b14:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403b18:	fe842783          	lw	a5,-24(s0)
20403b1c:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20403b20:	853e                	mv	a0,a5
20403b22:	85c2                	mv	a1,a6
20403b24:	5472                	lw	s0,60(sp)
20403b26:	6121                	addi	sp,sp,64
20403b28:	8082                	ret

20403b2a <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20403b2a:	7179                	addi	sp,sp,-48
20403b2c:	d606                	sw	ra,44(sp)
20403b2e:	d422                	sw	s0,40(sp)
20403b30:	d24a                	sw	s2,36(sp)
20403b32:	d04e                	sw	s3,32(sp)
20403b34:	1800                	addi	s0,sp,48
20403b36:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20403b3a:	fdc42783          	lw	a5,-36(s0)
20403b3e:	e781                	bnez	a5,20403b46 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20403b40:	4901                	li	s2,0
20403b42:	4981                	li	s3,0
20403b44:	a821                	j	20403b5c <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20403b46:	fdc42503          	lw	a0,-36(s0)
20403b4a:	b31fe0ef          	jal	ra,2040267a <__metal_driver_cpu_timebase>
20403b4e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20403b52:	fec42783          	lw	a5,-20(s0)
20403b56:	893e                	mv	s2,a5
20403b58:	87fd                	srai	a5,a5,0x1f
20403b5a:	89be                	mv	s3,a5
20403b5c:	87ca                	mv	a5,s2
20403b5e:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20403b60:	853e                	mv	a0,a5
20403b62:	85c2                	mv	a1,a6
20403b64:	50b2                	lw	ra,44(sp)
20403b66:	5422                	lw	s0,40(sp)
20403b68:	5912                	lw	s2,36(sp)
20403b6a:	5982                	lw	s3,32(sp)
20403b6c:	6145                	addi	sp,sp,48
20403b6e:	8082                	ret

20403b70 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20403b70:	7179                	addi	sp,sp,-48
20403b72:	d606                	sw	ra,44(sp)
20403b74:	d422                	sw	s0,40(sp)
20403b76:	1800                	addi	s0,sp,48
20403b78:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20403b7c:	4781                	li	a5,0
20403b7e:	4801                	li	a6,0
20403b80:	fef42023          	sw	a5,-32(s0)
20403b84:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403b88:	fdc42503          	lw	a0,-36(s0)
20403b8c:	b19fe0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20403b90:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20403b94:	fec42783          	lw	a5,-20(s0)
20403b98:	c78d                	beqz	a5,20403bc2 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403b9a:	fec42783          	lw	a5,-20(s0)
20403b9e:	13c7a783          	lw	a5,316(a5)
20403ba2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20403ba6:	fe842783          	lw	a5,-24(s0)
20403baa:	cf81                	beqz	a5,20403bc2 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20403bac:	fe842783          	lw	a5,-24(s0)
20403bb0:	439c                	lw	a5,0(a5)
20403bb2:	43f8                	lw	a4,68(a5)
20403bb4:	fe040793          	addi	a5,s0,-32
20403bb8:	863e                	mv	a2,a5
20403bba:	4585                	li	a1,1
20403bbc:	fe842503          	lw	a0,-24(s0)
20403bc0:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20403bc2:	fe042783          	lw	a5,-32(s0)
20403bc6:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
20403bca:	853e                	mv	a0,a5
20403bcc:	85c2                	mv	a1,a6
20403bce:	50b2                	lw	ra,44(sp)
20403bd0:	5422                	lw	s0,40(sp)
20403bd2:	6145                	addi	sp,sp,48
20403bd4:	8082                	ret

20403bd6 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20403bd6:	7179                	addi	sp,sp,-48
20403bd8:	d606                	sw	ra,44(sp)
20403bda:	d422                	sw	s0,40(sp)
20403bdc:	d226                	sw	s1,36(sp)
20403bde:	1800                	addi	s0,sp,48
20403be0:	fca42e23          	sw	a0,-36(s0)
20403be4:	fcb42823          	sw	a1,-48(s0)
20403be8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20403bec:	57fd                	li	a5,-1
20403bee:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403bf2:	fdc42503          	lw	a0,-36(s0)
20403bf6:	aaffe0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20403bfa:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20403bfe:	fe842783          	lw	a5,-24(s0)
20403c02:	cf8d                	beqz	a5,20403c3c <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403c04:	fe842783          	lw	a5,-24(s0)
20403c08:	13c7a783          	lw	a5,316(a5)
20403c0c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20403c10:	fe442783          	lw	a5,-28(s0)
20403c14:	c785                	beqz	a5,20403c3c <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20403c16:	fe442783          	lw	a5,-28(s0)
20403c1a:	439c                	lw	a5,0(a5)
20403c1c:	47a4                	lw	s1,72(a5)
20403c1e:	fdc42503          	lw	a0,-36(s0)
20403c22:	a35fe0ef          	jal	ra,20402656 <__metal_driver_cpu_hartid>
20403c26:	87aa                	mv	a5,a0
20403c28:	fd042603          	lw	a2,-48(s0)
20403c2c:	fd442683          	lw	a3,-44(s0)
20403c30:	85be                	mv	a1,a5
20403c32:	fe442503          	lw	a0,-28(s0)
20403c36:	9482                	jalr	s1
20403c38:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20403c3c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20403c40:	853e                	mv	a0,a5
20403c42:	50b2                	lw	ra,44(sp)
20403c44:	5422                	lw	s0,40(sp)
20403c46:	5492                	lw	s1,36(sp)
20403c48:	6145                	addi	sp,sp,48
20403c4a:	8082                	ret

20403c4c <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20403c4c:	1101                	addi	sp,sp,-32
20403c4e:	ce22                	sw	s0,28(sp)
20403c50:	1000                	addi	s0,sp,32
20403c52:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403c56:	81018793          	addi	a5,gp,-2032 # 80000798 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403c5a:	853e                	mv	a0,a5
20403c5c:	4472                	lw	s0,28(sp)
20403c5e:	6105                	addi	sp,sp,32
20403c60:	8082                	ret

20403c62 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20403c62:	1101                	addi	sp,sp,-32
20403c64:	ce22                	sw	s0,28(sp)
20403c66:	1000                	addi	s0,sp,32
20403c68:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20403c6c:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20403c6e:	853e                	mv	a0,a5
20403c70:	4472                	lw	s0,28(sp)
20403c72:	6105                	addi	sp,sp,32
20403c74:	8082                	ret

20403c76 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20403c76:	1101                	addi	sp,sp,-32
20403c78:	ce22                	sw	s0,28(sp)
20403c7a:	1000                	addi	s0,sp,32
20403c7c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403c80:	81018793          	addi	a5,gp,-2032 # 80000798 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20403c84:	853e                	mv	a0,a5
20403c86:	4472                	lw	s0,28(sp)
20403c88:	6105                	addi	sp,sp,32
20403c8a:	8082                	ret

20403c8c <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403c8c:	1101                	addi	sp,sp,-32
20403c8e:	ce22                	sw	s0,28(sp)
20403c90:	1000                	addi	s0,sp,32
20403c92:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20403c96:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403c98:	853e                	mv	a0,a5
20403c9a:	4472                	lw	s0,28(sp)
20403c9c:	6105                	addi	sp,sp,32
20403c9e:	8082                	ret

20403ca0 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403ca0:	7179                	addi	sp,sp,-48
20403ca2:	d606                	sw	ra,44(sp)
20403ca4:	d422                	sw	s0,40(sp)
20403ca6:	1800                	addi	s0,sp,48
20403ca8:	fca42e23          	sw	a0,-36(s0)
20403cac:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20403cb0:	57fd                	li	a5,-1
20403cb2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403cb6:	fdc42503          	lw	a0,-36(s0)
20403cba:	9ebfe0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20403cbe:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20403cc2:	fe842783          	lw	a5,-24(s0)
20403cc6:	c79d                	beqz	a5,20403cf4 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403cc8:	fe842783          	lw	a5,-24(s0)
20403ccc:	0dc7a783          	lw	a5,220(a5)
20403cd0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20403cd4:	fe442783          	lw	a5,-28(s0)
20403cd8:	cf91                	beqz	a5,20403cf4 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
20403cda:	fe442783          	lw	a5,-28(s0)
20403cde:	439c                	lw	a5,0(a5)
20403ce0:	43f8                	lw	a4,68(a5)
20403ce2:	fd840793          	addi	a5,s0,-40
20403ce6:	863e                	mv	a2,a5
20403ce8:	458d                	li	a1,3
20403cea:	fe442503          	lw	a0,-28(s0)
20403cee:	9702                	jalr	a4
20403cf0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20403cf4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20403cf8:	853e                	mv	a0,a5
20403cfa:	50b2                	lw	ra,44(sp)
20403cfc:	5422                	lw	s0,40(sp)
20403cfe:	6145                	addi	sp,sp,48
20403d00:	8082                	ret

20403d02 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403d02:	7179                	addi	sp,sp,-48
20403d04:	d606                	sw	ra,44(sp)
20403d06:	d422                	sw	s0,40(sp)
20403d08:	1800                	addi	s0,sp,48
20403d0a:	fca42e23          	sw	a0,-36(s0)
20403d0e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20403d12:	57fd                	li	a5,-1
20403d14:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403d18:	fdc42503          	lw	a0,-36(s0)
20403d1c:	989fe0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20403d20:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20403d24:	fe842783          	lw	a5,-24(s0)
20403d28:	c79d                	beqz	a5,20403d56 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403d2a:	fe842783          	lw	a5,-24(s0)
20403d2e:	0dc7a783          	lw	a5,220(a5)
20403d32:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20403d36:	fe442783          	lw	a5,-28(s0)
20403d3a:	cf91                	beqz	a5,20403d56 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20403d3c:	fe442783          	lw	a5,-28(s0)
20403d40:	439c                	lw	a5,0(a5)
20403d42:	43f8                	lw	a4,68(a5)
20403d44:	fd840793          	addi	a5,s0,-40
20403d48:	863e                	mv	a2,a5
20403d4a:	4589                	li	a1,2
20403d4c:	fe442503          	lw	a0,-28(s0)
20403d50:	9702                	jalr	a4
20403d52:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20403d56:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20403d5a:	853e                	mv	a0,a5
20403d5c:	50b2                	lw	ra,44(sp)
20403d5e:	5422                	lw	s0,40(sp)
20403d60:	6145                	addi	sp,sp,48
20403d62:	8082                	ret

20403d64 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20403d64:	7179                	addi	sp,sp,-48
20403d66:	d606                	sw	ra,44(sp)
20403d68:	d422                	sw	s0,40(sp)
20403d6a:	1800                	addi	s0,sp,48
20403d6c:	fca42e23          	sw	a0,-36(s0)
20403d70:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20403d74:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403d78:	fdc42503          	lw	a0,-36(s0)
20403d7c:	929fe0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20403d80:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20403d84:	fe842783          	lw	a5,-24(s0)
20403d88:	c79d                	beqz	a5,20403db6 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403d8a:	fe842783          	lw	a5,-24(s0)
20403d8e:	0dc7a783          	lw	a5,220(a5)
20403d92:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20403d96:	fe442783          	lw	a5,-28(s0)
20403d9a:	cf91                	beqz	a5,20403db6 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20403d9c:	fe442783          	lw	a5,-28(s0)
20403da0:	439c                	lw	a5,0(a5)
20403da2:	43f8                	lw	a4,68(a5)
20403da4:	fd840793          	addi	a5,s0,-40
20403da8:	863e                	mv	a2,a5
20403daa:	4591                	li	a1,4
20403dac:	fe442503          	lw	a0,-28(s0)
20403db0:	9702                	jalr	a4
20403db2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20403db6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
20403dba:	853e                	mv	a0,a5
20403dbc:	50b2                	lw	ra,44(sp)
20403dbe:	5422                	lw	s0,40(sp)
20403dc0:	6145                	addi	sp,sp,48
20403dc2:	8082                	ret

20403dc4 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20403dc4:	1101                	addi	sp,sp,-32
20403dc6:	ce06                	sw	ra,28(sp)
20403dc8:	cc22                	sw	s0,24(sp)
20403dca:	1000                	addi	s0,sp,32
20403dcc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20403dd0:	fec42503          	lw	a0,-20(s0)
20403dd4:	8d1fe0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20403dd8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
20403dda:	853e                	mv	a0,a5
20403ddc:	40f2                	lw	ra,28(sp)
20403dde:	4462                	lw	s0,24(sp)
20403de0:	6105                	addi	sp,sp,32
20403de2:	8082                	ret

20403de4 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20403de4:	7179                	addi	sp,sp,-48
20403de6:	d606                	sw	ra,44(sp)
20403de8:	d422                	sw	s0,40(sp)
20403dea:	1800                	addi	s0,sp,48
20403dec:	fca42e23          	sw	a0,-36(s0)
20403df0:	fcb42c23          	sw	a1,-40(s0)
20403df4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403df8:	fdc42503          	lw	a0,-36(s0)
20403dfc:	8a9fe0ef          	jal	ra,204026a4 <__metal_driver_cpu_interrupt_controller>
20403e00:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20403e04:	fec42783          	lw	a5,-20(s0)
20403e08:	cb99                	beqz	a5,20403e1e <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20403e0a:	fd442603          	lw	a2,-44(s0)
20403e0e:	fd842583          	lw	a1,-40(s0)
20403e12:	fec42503          	lw	a0,-20(s0)
20403e16:	8ddff0ef          	jal	ra,204036f2 <__metal_exception_register>
20403e1a:	87aa                	mv	a5,a0
20403e1c:	a011                	j	20403e20 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20403e1e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20403e20:	853e                	mv	a0,a5
20403e22:	50b2                	lw	ra,44(sp)
20403e24:	5422                	lw	s0,40(sp)
20403e26:	6145                	addi	sp,sp,48
20403e28:	8082                	ret

20403e2a <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403e2a:	1101                	addi	sp,sp,-32
20403e2c:	ce22                	sw	s0,28(sp)
20403e2e:	1000                	addi	s0,sp,32
20403e30:	fea42623          	sw	a0,-20(s0)
20403e34:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20403e38:	fe842783          	lw	a5,-24(s0)
20403e3c:	0007d783          	lhu	a5,0(a5)
20403e40:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20403e44:	478d                	li	a5,3
20403e46:	00f71463          	bne	a4,a5,20403e4e <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20403e4a:	4791                	li	a5,4
20403e4c:	a011                	j	20403e50 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20403e4e:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20403e50:	853e                	mv	a0,a5
20403e52:	4472                	lw	s0,28(sp)
20403e54:	6105                	addi	sp,sp,32
20403e56:	8082                	ret

20403e58 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20403e58:	7179                	addi	sp,sp,-48
20403e5a:	d622                	sw	s0,44(sp)
20403e5c:	1800                	addi	s0,sp,48
20403e5e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403e62:	341027f3          	csrr	a5,mepc
20403e66:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20403e6a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20403e6e:	853e                	mv	a0,a5
20403e70:	5432                	lw	s0,44(sp)
20403e72:	6145                	addi	sp,sp,48
20403e74:	8082                	ret

20403e76 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20403e76:	1101                	addi	sp,sp,-32
20403e78:	ce22                	sw	s0,28(sp)
20403e7a:	1000                	addi	s0,sp,32
20403e7c:	fea42623          	sw	a0,-20(s0)
20403e80:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20403e84:	fe842783          	lw	a5,-24(s0)
20403e88:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20403e8c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20403e8e:	853e                	mv	a0,a5
20403e90:	4472                	lw	s0,28(sp)
20403e92:	6105                	addi	sp,sp,32
20403e94:	8082                	ret

20403e96 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20403e96:	1101                	addi	sp,sp,-32
20403e98:	ce22                	sw	s0,28(sp)
20403e9a:	1000                	addi	s0,sp,32
20403e9c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403ea0:	fec42703          	lw	a4,-20(s0)
20403ea4:	800007b7          	lui	a5,0x80000
20403ea8:	46878793          	addi	a5,a5,1128 # 80000468 <metal_segment_heap_target_end+0xffffefcc>
20403eac:	00f71563          	bne	a4,a5,20403eb6 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20403eb0:	0c0007b7          	lui	a5,0xc000
20403eb4:	a011                	j	20403eb8 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20403eb6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
20403eb8:	853e                	mv	a0,a5
20403eba:	4472                	lw	s0,28(sp)
20403ebc:	6105                	addi	sp,sp,32
20403ebe:	8082                	ret

20403ec0 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20403ec0:	1101                	addi	sp,sp,-32
20403ec2:	ce22                	sw	s0,28(sp)
20403ec4:	1000                	addi	s0,sp,32
20403ec6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403eca:	fec42703          	lw	a4,-20(s0)
20403ece:	800007b7          	lui	a5,0x80000
20403ed2:	46878793          	addi	a5,a5,1128 # 80000468 <metal_segment_heap_target_end+0xffffefcc>
20403ed6:	00f71463          	bne	a4,a5,20403ede <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
20403eda:	47ed                	li	a5,27
20403edc:	a011                	j	20403ee0 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
20403ede:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
20403ee0:	853e                	mv	a0,a5
20403ee2:	4472                	lw	s0,28(sp)
20403ee4:	6105                	addi	sp,sp,32
20403ee6:	8082                	ret

20403ee8 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20403ee8:	1101                	addi	sp,sp,-32
20403eea:	ce22                	sw	s0,28(sp)
20403eec:	1000                	addi	s0,sp,32
20403eee:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403ef2:	fec42703          	lw	a4,-20(s0)
20403ef6:	800007b7          	lui	a5,0x80000
20403efa:	46878793          	addi	a5,a5,1128 # 80000468 <metal_segment_heap_target_end+0xffffefcc>
20403efe:	00f71463          	bne	a4,a5,20403f06 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20403f02:	479d                	li	a5,7
20403f04:	a011                	j	20403f08 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20403f06:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
20403f08:	853e                	mv	a0,a5
20403f0a:	4472                	lw	s0,28(sp)
20403f0c:	6105                	addi	sp,sp,32
20403f0e:	8082                	ret

20403f10 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20403f10:	1101                	addi	sp,sp,-32
20403f12:	ce22                	sw	s0,28(sp)
20403f14:	1000                	addi	s0,sp,32
20403f16:	fea42623          	sw	a0,-20(s0)
20403f1a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
20403f1e:	fe842783          	lw	a5,-24(s0)
20403f22:	e791                	bnez	a5,20403f2e <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403f24:	800007b7          	lui	a5,0x80000
20403f28:	0b078793          	addi	a5,a5,176 # 800000b0 <metal_segment_heap_target_end+0xffffec14>
20403f2c:	a011                	j	20403f30 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
20403f2e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
20403f30:	853e                	mv	a0,a5
20403f32:	4472                	lw	s0,28(sp)
20403f34:	6105                	addi	sp,sp,32
20403f36:	8082                	ret

20403f38 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20403f38:	1101                	addi	sp,sp,-32
20403f3a:	ce22                	sw	s0,28(sp)
20403f3c:	1000                	addi	s0,sp,32
20403f3e:	fea42623          	sw	a0,-20(s0)
20403f42:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
20403f46:	fe842783          	lw	a5,-24(s0)
20403f4a:	e399                	bnez	a5,20403f50 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
20403f4c:	47ad                	li	a5,11
20403f4e:	a011                	j	20403f52 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
20403f50:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
20403f52:	853e                	mv	a0,a5
20403f54:	4472                	lw	s0,28(sp)
20403f56:	6105                	addi	sp,sp,32
20403f58:	8082                	ret

20403f5a <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20403f5a:	7179                	addi	sp,sp,-48
20403f5c:	d606                	sw	ra,44(sp)
20403f5e:	d422                	sw	s0,40(sp)
20403f60:	1800                	addi	s0,sp,48
20403f62:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403f66:	fdc42503          	lw	a0,-36(s0)
20403f6a:	3735                	jal	20403e96 <__metal_driver_sifive_plic0_control_base>
20403f6c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403f70:	fec42703          	lw	a4,-20(s0)
20403f74:	002007b7          	lui	a5,0x200
20403f78:	0791                	addi	a5,a5,4
20403f7a:	97ba                	add	a5,a5,a4
20403f7c:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20403f7e:	853e                	mv	a0,a5
20403f80:	50b2                	lw	ra,44(sp)
20403f82:	5422                	lw	s0,40(sp)
20403f84:	6145                	addi	sp,sp,48
20403f86:	8082                	ret

20403f88 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20403f88:	7179                	addi	sp,sp,-48
20403f8a:	d606                	sw	ra,44(sp)
20403f8c:	d422                	sw	s0,40(sp)
20403f8e:	1800                	addi	s0,sp,48
20403f90:	fca42e23          	sw	a0,-36(s0)
20403f94:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403f98:	fdc42503          	lw	a0,-36(s0)
20403f9c:	3ded                	jal	20403e96 <__metal_driver_sifive_plic0_control_base>
20403f9e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403fa2:	fec42703          	lw	a4,-20(s0)
20403fa6:	002007b7          	lui	a5,0x200
20403faa:	0791                	addi	a5,a5,4
20403fac:	97ba                	add	a5,a5,a4
20403fae:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20403fb0:	fd842783          	lw	a5,-40(s0)
20403fb4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20403fb6:	0001                	nop
20403fb8:	50b2                	lw	ra,44(sp)
20403fba:	5422                	lw	s0,40(sp)
20403fbc:	6145                	addi	sp,sp,48
20403fbe:	8082                	ret

20403fc0 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20403fc0:	7179                	addi	sp,sp,-48
20403fc2:	d606                	sw	ra,44(sp)
20403fc4:	d422                	sw	s0,40(sp)
20403fc6:	1800                	addi	s0,sp,48
20403fc8:	fca42e23          	sw	a0,-36(s0)
20403fcc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403fd0:	fdc42503          	lw	a0,-36(s0)
20403fd4:	35c9                	jal	20403e96 <__metal_driver_sifive_plic0_control_base>
20403fd6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403fda:	fec42703          	lw	a4,-20(s0)
20403fde:	002007b7          	lui	a5,0x200
20403fe2:	97ba                	add	a5,a5,a4
20403fe4:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20403fe6:	fd842783          	lw	a5,-40(s0)
20403fea:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
20403fec:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
20403fee:	853e                	mv	a0,a5
20403ff0:	50b2                	lw	ra,44(sp)
20403ff2:	5422                	lw	s0,40(sp)
20403ff4:	6145                	addi	sp,sp,48
20403ff6:	8082                	ret

20403ff8 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20403ff8:	7179                	addi	sp,sp,-48
20403ffa:	d606                	sw	ra,44(sp)
20403ffc:	d422                	sw	s0,40(sp)
20403ffe:	1800                	addi	s0,sp,48
20404000:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404004:	fdc42503          	lw	a0,-36(s0)
20404008:	3579                	jal	20403e96 <__metal_driver_sifive_plic0_control_base>
2040400a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040400e:	fec42703          	lw	a4,-20(s0)
20404012:	002007b7          	lui	a5,0x200
20404016:	97ba                	add	a5,a5,a4
20404018:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
2040401a:	853e                	mv	a0,a5
2040401c:	50b2                	lw	ra,44(sp)
2040401e:	5422                	lw	s0,40(sp)
20404020:	6145                	addi	sp,sp,48
20404022:	8082                	ret

20404024 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20404024:	7179                	addi	sp,sp,-48
20404026:	d606                	sw	ra,44(sp)
20404028:	d422                	sw	s0,40(sp)
2040402a:	1800                	addi	s0,sp,48
2040402c:	fca42e23          	sw	a0,-36(s0)
20404030:	fcb42c23          	sw	a1,-40(s0)
20404034:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20404038:	fdc42503          	lw	a0,-36(s0)
2040403c:	3da9                	jal	20403e96 <__metal_driver_sifive_plic0_control_base>
2040403e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20404042:	fdc42503          	lw	a0,-36(s0)
20404046:	354d                	jal	20403ee8 <__metal_driver_sifive_plic0_max_priority>
20404048:	87aa                	mv	a5,a0
2040404a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
2040404e:	fe842783          	lw	a5,-24(s0)
20404052:	c785                	beqz	a5,2040407a <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20404054:	fd442703          	lw	a4,-44(s0)
20404058:	fe842783          	lw	a5,-24(s0)
2040405c:	00f77f63          	bgeu	a4,a5,2040407a <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404060:	fd842783          	lw	a5,-40(s0)
20404064:	078a                	slli	a5,a5,0x2
20404066:	873e                	mv	a4,a5
20404068:	fec42783          	lw	a5,-20(s0)
2040406c:	97ba                	add	a5,a5,a4
2040406e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20404070:	fd442783          	lw	a5,-44(s0)
20404074:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20404076:	4781                	li	a5,0
20404078:	a011                	j	2040407c <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
2040407a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
2040407c:	853e                	mv	a0,a5
2040407e:	50b2                	lw	ra,44(sp)
20404080:	5422                	lw	s0,40(sp)
20404082:	6145                	addi	sp,sp,48
20404084:	8082                	ret

20404086 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20404086:	7179                	addi	sp,sp,-48
20404088:	d606                	sw	ra,44(sp)
2040408a:	d422                	sw	s0,40(sp)
2040408c:	1800                	addi	s0,sp,48
2040408e:	fca42e23          	sw	a0,-36(s0)
20404092:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404096:	fdc42503          	lw	a0,-36(s0)
2040409a:	3bf5                	jal	20403e96 <__metal_driver_sifive_plic0_control_base>
2040409c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204040a0:	fd842783          	lw	a5,-40(s0)
204040a4:	078a                	slli	a5,a5,0x2
204040a6:	873e                	mv	a4,a5
204040a8:	fec42783          	lw	a5,-20(s0)
204040ac:	97ba                	add	a5,a5,a4
204040ae:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
204040b0:	853e                	mv	a0,a5
204040b2:	50b2                	lw	ra,44(sp)
204040b4:	5422                	lw	s0,40(sp)
204040b6:	6145                	addi	sp,sp,48
204040b8:	8082                	ret

204040ba <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
204040ba:	7179                	addi	sp,sp,-48
204040bc:	d606                	sw	ra,44(sp)
204040be:	d422                	sw	s0,40(sp)
204040c0:	1800                	addi	s0,sp,48
204040c2:	fca42e23          	sw	a0,-36(s0)
204040c6:	fcb42c23          	sw	a1,-40(s0)
204040ca:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204040ce:	fdc42503          	lw	a0,-36(s0)
204040d2:	33d1                	jal	20403e96 <__metal_driver_sifive_plic0_control_base>
204040d4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204040d8:	fd842783          	lw	a5,-40(s0)
204040dc:	8795                	srai	a5,a5,0x5
204040de:	078a                	slli	a5,a5,0x2
204040e0:	873e                	mv	a4,a5
204040e2:	fec42783          	lw	a5,-20(s0)
204040e6:	973e                	add	a4,a4,a5
204040e8:	6789                	lui	a5,0x2
204040ea:	97ba                	add	a5,a5,a4
204040ec:	439c                	lw	a5,0(a5)
204040ee:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
204040f2:	fd442783          	lw	a5,-44(s0)
204040f6:	cf81                	beqz	a5,2040410e <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
204040f8:	fd842783          	lw	a5,-40(s0)
204040fc:	8bfd                	andi	a5,a5,31
204040fe:	4705                	li	a4,1
20404100:	00f717b3          	sll	a5,a4,a5
20404104:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404106:	fe842783          	lw	a5,-24(s0)
2040410a:	8fd9                	or	a5,a5,a4
2040410c:	a829                	j	20404126 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
2040410e:	fd842783          	lw	a5,-40(s0)
20404112:	8bfd                	andi	a5,a5,31
20404114:	4705                	li	a4,1
20404116:	00f717b3          	sll	a5,a4,a5
2040411a:	fff7c793          	not	a5,a5
2040411e:	873e                	mv	a4,a5
20404120:	fe842783          	lw	a5,-24(s0)
20404124:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404126:	fd842703          	lw	a4,-40(s0)
2040412a:	8715                	srai	a4,a4,0x5
2040412c:	070a                	slli	a4,a4,0x2
2040412e:	86ba                	mv	a3,a4
20404130:	fec42703          	lw	a4,-20(s0)
20404134:	96ba                	add	a3,a3,a4
20404136:	6709                	lui	a4,0x2
20404138:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
2040413a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
2040413c:	0001                	nop
2040413e:	50b2                	lw	ra,44(sp)
20404140:	5422                	lw	s0,40(sp)
20404142:	6145                	addi	sp,sp,48
20404144:	8082                	ret

20404146 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20404146:	1101                	addi	sp,sp,-32
20404148:	ce06                	sw	ra,28(sp)
2040414a:	cc22                	sw	s0,24(sp)
2040414c:	1000                	addi	s0,sp,32
2040414e:	fea42623          	sw	a0,-20(s0)
20404152:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20404156:	12c00513          	li	a0,300
2040415a:	1d0010ef          	jal	ra,2040532a <metal_shutdown>

2040415e <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
2040415e:	7179                	addi	sp,sp,-48
20404160:	d606                	sw	ra,44(sp)
20404162:	d422                	sw	s0,40(sp)
20404164:	1800                	addi	s0,sp,48
20404166:	fca42e23          	sw	a0,-36(s0)
2040416a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
2040416e:	fd842783          	lw	a5,-40(s0)
20404172:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20404176:	fec42503          	lw	a0,-20(s0)
2040417a:	33c5                	jal	20403f5a <__metal_plic0_claim_interrupt>
2040417c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20404180:	fec42503          	lw	a0,-20(s0)
20404184:	d3dff0ef          	jal	ra,20403ec0 <__metal_driver_sifive_plic0_num_interrupts>
20404188:	87aa                	mv	a5,a0
2040418a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
2040418e:	fe842703          	lw	a4,-24(s0)
20404192:	fe442783          	lw	a5,-28(s0)
20404196:	04f77263          	bgeu	a4,a5,204041da <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
2040419a:	fec42703          	lw	a4,-20(s0)
2040419e:	fe842783          	lw	a5,-24(s0)
204041a2:	078a                	slli	a5,a5,0x2
204041a4:	97ba                	add	a5,a5,a4
204041a6:	479c                	lw	a5,8(a5)
204041a8:	cb8d                	beqz	a5,204041da <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
204041aa:	fec42703          	lw	a4,-20(s0)
204041ae:	fe842783          	lw	a5,-24(s0)
204041b2:	078a                	slli	a5,a5,0x2
204041b4:	97ba                	add	a5,a5,a4
204041b6:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
204041ba:	fe842603          	lw	a2,-24(s0)
204041be:	fec42683          	lw	a3,-20(s0)
204041c2:	fe842703          	lw	a4,-24(s0)
204041c6:	87ba                	mv	a5,a4
204041c8:	0786                	slli	a5,a5,0x1
204041ca:	97ba                	add	a5,a5,a4
204041cc:	078e                	slli	a5,a5,0x3
204041ce:	97b6                	add	a5,a5,a3
204041d0:	0887a783          	lw	a5,136(a5)
204041d4:	85be                	mv	a1,a5
204041d6:	8532                	mv	a0,a2
204041d8:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
204041da:	fe842583          	lw	a1,-24(s0)
204041de:	fec42503          	lw	a0,-20(s0)
204041e2:	335d                	jal	20403f88 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
204041e4:	0001                	nop
204041e6:	50b2                	lw	ra,44(sp)
204041e8:	5422                	lw	s0,40(sp)
204041ea:	6145                	addi	sp,sp,48
204041ec:	8082                	ret

204041ee <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
204041ee:	7139                	addi	sp,sp,-64
204041f0:	de06                	sw	ra,60(sp)
204041f2:	dc22                	sw	s0,56(sp)
204041f4:	0080                	addi	s0,sp,64
204041f6:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204041fa:	fcc42783          	lw	a5,-52(s0)
204041fe:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20404202:	fe442783          	lw	a5,-28(s0)
20404206:	43dc                	lw	a5,4(a5)
20404208:	12079063          	bnez	a5,20404328 <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040420c:	fe042623          	sw	zero,-20(s0)
20404210:	a221                	j	20404318 <__metal_driver_riscv_plic0_init+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20404212:	fcc42503          	lw	a0,-52(s0)
20404216:	cabff0ef          	jal	ra,20403ec0 <__metal_driver_sifive_plic0_num_interrupts>
2040421a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
2040421e:	fec42583          	lw	a1,-20(s0)
20404222:	fcc42503          	lw	a0,-52(s0)
20404226:	cebff0ef          	jal	ra,20403f10 <__metal_driver_sifive_plic0_interrupt_parents>
2040422a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
2040422e:	fec42583          	lw	a1,-20(s0)
20404232:	fcc42503          	lw	a0,-52(s0)
20404236:	d03ff0ef          	jal	ra,20403f38 <__metal_driver_sifive_plic0_interrupt_lines>
2040423a:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
2040423e:	fdc42783          	lw	a5,-36(s0)
20404242:	439c                	lw	a5,0(a5)
20404244:	439c                	lw	a5,0(a5)
20404246:	fdc42503          	lw	a0,-36(s0)
2040424a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
2040424c:	fe042423          	sw	zero,-24(s0)
20404250:	a085                	j	204042b0 <__metal_driver_riscv_plic0_init+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20404252:	4601                	li	a2,0
20404254:	fe842583          	lw	a1,-24(s0)
20404258:	fe442503          	lw	a0,-28(s0)
2040425c:	3db9                	jal	204040ba <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
2040425e:	4601                	li	a2,0
20404260:	fe842583          	lw	a1,-24(s0)
20404264:	fcc42503          	lw	a0,-52(s0)
20404268:	3b75                	jal	20404024 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
2040426a:	fe442703          	lw	a4,-28(s0)
2040426e:	fe842783          	lw	a5,-24(s0)
20404272:	078a                	slli	a5,a5,0x2
20404274:	97ba                	add	a5,a5,a4
20404276:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
2040427a:	fe442683          	lw	a3,-28(s0)
2040427e:	fe842703          	lw	a4,-24(s0)
20404282:	87ba                	mv	a5,a4
20404284:	0786                	slli	a5,a5,0x1
20404286:	97ba                	add	a5,a5,a4
20404288:	078e                	slli	a5,a5,0x3
2040428a:	97b6                	add	a5,a5,a3
2040428c:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20404290:	fe442683          	lw	a3,-28(s0)
20404294:	fe842703          	lw	a4,-24(s0)
20404298:	87ba                	mv	a5,a4
2040429a:	0786                	slli	a5,a5,0x1
2040429c:	97ba                	add	a5,a5,a4
2040429e:	078e                	slli	a5,a5,0x3
204042a0:	97b6                	add	a5,a5,a3
204042a2:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
204042a6:	fe842783          	lw	a5,-24(s0)
204042aa:	0785                	addi	a5,a5,1
204042ac:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
204042b0:	fe842703          	lw	a4,-24(s0)
204042b4:	fe042783          	lw	a5,-32(s0)
204042b8:	f8f74de3          	blt	a4,a5,20404252 <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
204042bc:	4581                	li	a1,0
204042be:	fcc42503          	lw	a0,-52(s0)
204042c2:	cffff0ef          	jal	ra,20403fc0 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
204042c6:	fdc42783          	lw	a5,-36(s0)
204042ca:	439c                	lw	a5,0(a5)
204042cc:	4fdc                	lw	a5,28(a5)
204042ce:	fe442683          	lw	a3,-28(s0)
204042d2:	4601                	li	a2,0
204042d4:	fd842583          	lw	a1,-40(s0)
204042d8:	fdc42503          	lw	a0,-36(s0)
204042dc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
204042de:	fdc42783          	lw	a5,-36(s0)
204042e2:	439c                	lw	a5,0(a5)
204042e4:	4fd8                	lw	a4,28(a5)
204042e6:	fe442683          	lw	a3,-28(s0)
204042ea:	204047b7          	lui	a5,0x20404
204042ee:	15e78613          	addi	a2,a5,350 # 2040415e <__metal_plic0_handler>
204042f2:	fd842583          	lw	a1,-40(s0)
204042f6:	fdc42503          	lw	a0,-36(s0)
204042fa:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
204042fc:	fdc42783          	lw	a5,-36(s0)
20404300:	439c                	lw	a5,0(a5)
20404302:	53dc                	lw	a5,36(a5)
20404304:	fd842583          	lw	a1,-40(s0)
20404308:	fdc42503          	lw	a0,-36(s0)
2040430c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040430e:	fec42783          	lw	a5,-20(s0)
20404312:	0785                	addi	a5,a5,1
20404314:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404318:	fec42783          	lw	a5,-20(s0)
2040431c:	eef05be3          	blez	a5,20404212 <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20404320:	fe442783          	lw	a5,-28(s0)
20404324:	4705                	li	a4,1
20404326:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20404328:	0001                	nop
2040432a:	50f2                	lw	ra,60(sp)
2040432c:	5462                	lw	s0,56(sp)
2040432e:	6121                	addi	sp,sp,64
20404330:	8082                	ret

20404332 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20404332:	7179                	addi	sp,sp,-48
20404334:	d606                	sw	ra,44(sp)
20404336:	d422                	sw	s0,40(sp)
20404338:	1800                	addi	s0,sp,48
2040433a:	fca42e23          	sw	a0,-36(s0)
2040433e:	fcb42c23          	sw	a1,-40(s0)
20404342:	fcc42a23          	sw	a2,-44(s0)
20404346:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040434a:	fdc42783          	lw	a5,-36(s0)
2040434e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404352:	fdc42503          	lw	a0,-36(s0)
20404356:	b6bff0ef          	jal	ra,20403ec0 <__metal_driver_sifive_plic0_num_interrupts>
2040435a:	872a                	mv	a4,a0
2040435c:	fd842783          	lw	a5,-40(s0)
20404360:	00e7c463          	blt	a5,a4,20404368 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20404364:	57fd                	li	a5,-1
20404366:	a051                	j	204043ea <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20404368:	fd442783          	lw	a5,-44(s0)
2040436c:	cf9d                	beqz	a5,204043aa <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
2040436e:	4609                	li	a2,2
20404370:	fd842583          	lw	a1,-40(s0)
20404374:	fdc42503          	lw	a0,-36(s0)
20404378:	cadff0ef          	jal	ra,20404024 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
2040437c:	fec42703          	lw	a4,-20(s0)
20404380:	fd842783          	lw	a5,-40(s0)
20404384:	078a                	slli	a5,a5,0x2
20404386:	97ba                	add	a5,a5,a4
20404388:	fd442703          	lw	a4,-44(s0)
2040438c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
2040438e:	fec42683          	lw	a3,-20(s0)
20404392:	fd842703          	lw	a4,-40(s0)
20404396:	87ba                	mv	a5,a4
20404398:	0786                	slli	a5,a5,0x1
2040439a:	97ba                	add	a5,a5,a4
2040439c:	078e                	slli	a5,a5,0x3
2040439e:	97b6                	add	a5,a5,a3
204043a0:	fd042703          	lw	a4,-48(s0)
204043a4:	08e7a423          	sw	a4,136(a5)
204043a8:	a081                	j	204043e8 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
204043aa:	4605                	li	a2,1
204043ac:	fd842583          	lw	a1,-40(s0)
204043b0:	fdc42503          	lw	a0,-36(s0)
204043b4:	c71ff0ef          	jal	ra,20404024 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
204043b8:	fec42703          	lw	a4,-20(s0)
204043bc:	fd842783          	lw	a5,-40(s0)
204043c0:	078a                	slli	a5,a5,0x2
204043c2:	97ba                	add	a5,a5,a4
204043c4:	20404737          	lui	a4,0x20404
204043c8:	14670713          	addi	a4,a4,326 # 20404146 <__metal_plic0_default_handler>
204043cc:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
204043ce:	fec42683          	lw	a3,-20(s0)
204043d2:	fd842703          	lw	a4,-40(s0)
204043d6:	87ba                	mv	a5,a4
204043d8:	0786                	slli	a5,a5,0x1
204043da:	97ba                	add	a5,a5,a4
204043dc:	078e                	slli	a5,a5,0x3
204043de:	97b6                	add	a5,a5,a3
204043e0:	fd042703          	lw	a4,-48(s0)
204043e4:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
204043e8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
204043ea:	853e                	mv	a0,a5
204043ec:	50b2                	lw	ra,44(sp)
204043ee:	5422                	lw	s0,40(sp)
204043f0:	6145                	addi	sp,sp,48
204043f2:	8082                	ret

204043f4 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
204043f4:	7179                	addi	sp,sp,-48
204043f6:	d606                	sw	ra,44(sp)
204043f8:	d422                	sw	s0,40(sp)
204043fa:	1800                	addi	s0,sp,48
204043fc:	fca42e23          	sw	a0,-36(s0)
20404400:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404404:	fdc42783          	lw	a5,-36(s0)
20404408:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2040440c:	fdc42503          	lw	a0,-36(s0)
20404410:	ab1ff0ef          	jal	ra,20403ec0 <__metal_driver_sifive_plic0_num_interrupts>
20404414:	872a                	mv	a4,a0
20404416:	fd842783          	lw	a5,-40(s0)
2040441a:	00e7c463          	blt	a5,a4,20404422 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040441e:	57fd                	li	a5,-1
20404420:	a809                	j	20404432 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20404422:	4605                	li	a2,1
20404424:	fd842583          	lw	a1,-40(s0)
20404428:	fec42503          	lw	a0,-20(s0)
2040442c:	c8fff0ef          	jal	ra,204040ba <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
20404430:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20404432:	853e                	mv	a0,a5
20404434:	50b2                	lw	ra,44(sp)
20404436:	5422                	lw	s0,40(sp)
20404438:	6145                	addi	sp,sp,48
2040443a:	8082                	ret

2040443c <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
2040443c:	7179                	addi	sp,sp,-48
2040443e:	d606                	sw	ra,44(sp)
20404440:	d422                	sw	s0,40(sp)
20404442:	1800                	addi	s0,sp,48
20404444:	fca42e23          	sw	a0,-36(s0)
20404448:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040444c:	fdc42783          	lw	a5,-36(s0)
20404450:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404454:	fdc42503          	lw	a0,-36(s0)
20404458:	a69ff0ef          	jal	ra,20403ec0 <__metal_driver_sifive_plic0_num_interrupts>
2040445c:	872a                	mv	a4,a0
2040445e:	fd842783          	lw	a5,-40(s0)
20404462:	00e7c463          	blt	a5,a4,2040446a <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20404466:	57fd                	li	a5,-1
20404468:	a809                	j	2040447a <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
2040446a:	4601                	li	a2,0
2040446c:	fd842583          	lw	a1,-40(s0)
20404470:	fec42503          	lw	a0,-20(s0)
20404474:	c47ff0ef          	jal	ra,204040ba <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20404478:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
2040447a:	853e                	mv	a0,a5
2040447c:	50b2                	lw	ra,44(sp)
2040447e:	5422                	lw	s0,40(sp)
20404480:	6145                	addi	sp,sp,48
20404482:	8082                	ret

20404484 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404484:	1101                	addi	sp,sp,-32
20404486:	ce22                	sw	s0,28(sp)
20404488:	1000                	addi	s0,sp,32
2040448a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040448e:	fec42703          	lw	a4,-20(s0)
20404492:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404496:	00f71563          	bne	a4,a5,204044a0 <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
2040449a:	100127b7          	lui	a5,0x10012
2040449e:	a011                	j	204044a2 <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
204044a0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
204044a2:	853e                	mv	a0,a5
204044a4:	4472                	lw	s0,28(sp)
204044a6:	6105                	addi	sp,sp,32
204044a8:	8082                	ret

204044aa <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
204044aa:	1101                	addi	sp,sp,-32
204044ac:	ce22                	sw	s0,28(sp)
204044ae:	1000                	addi	s0,sp,32
204044b0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204044b4:	fec42703          	lw	a4,-20(s0)
204044b8:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
204044bc:	00f71763          	bne	a4,a5,204044ca <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
204044c0:	800007b7          	lui	a5,0x80000
204044c4:	46878793          	addi	a5,a5,1128 # 80000468 <metal_segment_heap_target_end+0xffffefcc>
204044c8:	a011                	j	204044cc <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
204044ca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
204044cc:	853e                	mv	a0,a5
204044ce:	4472                	lw	s0,28(sp)
204044d0:	6105                	addi	sp,sp,32
204044d2:	8082                	ret

204044d4 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
204044d4:	1101                	addi	sp,sp,-32
204044d6:	ce22                	sw	s0,28(sp)
204044d8:	1000                	addi	s0,sp,32
204044da:	fea42623          	sw	a0,-20(s0)
204044de:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
204044e2:	fec42703          	lw	a4,-20(s0)
204044e6:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
204044ea:	00f71763          	bne	a4,a5,204044f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
204044ee:	fe842783          	lw	a5,-24(s0)
204044f2:	e399                	bnez	a5,204044f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
204044f4:	479d                	li	a5,7
204044f6:	a269                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
204044f8:	fec42703          	lw	a4,-20(s0)
204044fc:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404500:	00f71963          	bne	a4,a5,20404512 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
20404504:	fe842703          	lw	a4,-24(s0)
20404508:	4785                	li	a5,1
2040450a:	00f71463          	bne	a4,a5,20404512 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
2040450e:	47a1                	li	a5,8
20404510:	aa85                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404512:	fec42703          	lw	a4,-20(s0)
20404516:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
2040451a:	00f71963          	bne	a4,a5,2040452c <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
2040451e:	fe842703          	lw	a4,-24(s0)
20404522:	4789                	li	a5,2
20404524:	00f71463          	bne	a4,a5,2040452c <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
20404528:	47a5                	li	a5,9
2040452a:	aa99                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
2040452c:	fec42703          	lw	a4,-20(s0)
20404530:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404534:	00f71963          	bne	a4,a5,20404546 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
20404538:	fe842703          	lw	a4,-24(s0)
2040453c:	478d                	li	a5,3
2040453e:	00f71463          	bne	a4,a5,20404546 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
20404542:	47a9                	li	a5,10
20404544:	aa35                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404546:	fec42703          	lw	a4,-20(s0)
2040454a:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
2040454e:	00f71963          	bne	a4,a5,20404560 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
20404552:	fe842703          	lw	a4,-24(s0)
20404556:	4791                	li	a5,4
20404558:	00f71463          	bne	a4,a5,20404560 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
2040455c:	47ad                	li	a5,11
2040455e:	a20d                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
20404560:	fec42703          	lw	a4,-20(s0)
20404564:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404568:	00f71963          	bne	a4,a5,2040457a <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
2040456c:	fe842703          	lw	a4,-24(s0)
20404570:	4795                	li	a5,5
20404572:	00f71463          	bne	a4,a5,2040457a <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
20404576:	47b1                	li	a5,12
20404578:	a221                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
2040457a:	fec42703          	lw	a4,-20(s0)
2040457e:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404582:	00f71963          	bne	a4,a5,20404594 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
20404586:	fe842703          	lw	a4,-24(s0)
2040458a:	4799                	li	a5,6
2040458c:	00f71463          	bne	a4,a5,20404594 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
20404590:	47b5                	li	a5,13
20404592:	a0fd                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404594:	fec42703          	lw	a4,-20(s0)
20404598:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
2040459c:	00f71963          	bne	a4,a5,204045ae <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
204045a0:	fe842703          	lw	a4,-24(s0)
204045a4:	479d                	li	a5,7
204045a6:	00f71463          	bne	a4,a5,204045ae <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
204045aa:	47b9                	li	a5,14
204045ac:	a8d1                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
204045ae:	fec42703          	lw	a4,-20(s0)
204045b2:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
204045b6:	00f71963          	bne	a4,a5,204045c8 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
204045ba:	fe842703          	lw	a4,-24(s0)
204045be:	47a1                	li	a5,8
204045c0:	00f71463          	bne	a4,a5,204045c8 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
204045c4:	47bd                	li	a5,15
204045c6:	a86d                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
204045c8:	fec42703          	lw	a4,-20(s0)
204045cc:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
204045d0:	00f71963          	bne	a4,a5,204045e2 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
204045d4:	fe842703          	lw	a4,-24(s0)
204045d8:	47a5                	li	a5,9
204045da:	00f71463          	bne	a4,a5,204045e2 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
204045de:	47c1                	li	a5,16
204045e0:	a045                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
204045e2:	fec42703          	lw	a4,-20(s0)
204045e6:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
204045ea:	00f71963          	bne	a4,a5,204045fc <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
204045ee:	fe842703          	lw	a4,-24(s0)
204045f2:	47a9                	li	a5,10
204045f4:	00f71463          	bne	a4,a5,204045fc <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
204045f8:	47c5                	li	a5,17
204045fa:	a059                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
204045fc:	fec42703          	lw	a4,-20(s0)
20404600:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404604:	00f71963          	bne	a4,a5,20404616 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
20404608:	fe842703          	lw	a4,-24(s0)
2040460c:	47ad                	li	a5,11
2040460e:	00f71463          	bne	a4,a5,20404616 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
20404612:	47c9                	li	a5,18
20404614:	a0b5                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404616:	fec42703          	lw	a4,-20(s0)
2040461a:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
2040461e:	00f71963          	bne	a4,a5,20404630 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
20404622:	fe842703          	lw	a4,-24(s0)
20404626:	47b1                	li	a5,12
20404628:	00f71463          	bne	a4,a5,20404630 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
2040462c:	47cd                	li	a5,19
2040462e:	a889                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
20404630:	fec42703          	lw	a4,-20(s0)
20404634:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404638:	00f71963          	bne	a4,a5,2040464a <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
2040463c:	fe842703          	lw	a4,-24(s0)
20404640:	47b5                	li	a5,13
20404642:	00f71463          	bne	a4,a5,2040464a <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
20404646:	47d1                	li	a5,20
20404648:	a825                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
2040464a:	fec42703          	lw	a4,-20(s0)
2040464e:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404652:	00f71963          	bne	a4,a5,20404664 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
20404656:	fe842703          	lw	a4,-24(s0)
2040465a:	47b9                	li	a5,14
2040465c:	00f71463          	bne	a4,a5,20404664 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
20404660:	47d5                	li	a5,21
20404662:	a839                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404664:	fec42703          	lw	a4,-20(s0)
20404668:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
2040466c:	00f71963          	bne	a4,a5,2040467e <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
20404670:	fe842703          	lw	a4,-24(s0)
20404674:	47bd                	li	a5,15
20404676:	00f71463          	bne	a4,a5,2040467e <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
2040467a:	47d9                	li	a5,22
2040467c:	a011                	j	20404680 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
2040467e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
20404680:	853e                	mv	a0,a5
20404682:	4472                	lw	s0,28(sp)
20404684:	6105                	addi	sp,sp,32
20404686:	8082                	ret

20404688 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404688:	7179                	addi	sp,sp,-48
2040468a:	d606                	sw	ra,44(sp)
2040468c:	d422                	sw	s0,40(sp)
2040468e:	1800                	addi	s0,sp,48
20404690:	fca42e23          	sw	a0,-36(s0)
20404694:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404698:	fdc42503          	lw	a0,-36(s0)
2040469c:	de9ff0ef          	jal	ra,20404484 <__metal_driver_sifive_gpio0_base>
204046a0:	87aa                	mv	a5,a0
204046a2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
204046a6:	fec42783          	lw	a5,-20(s0)
204046aa:	0791                	addi	a5,a5,4
204046ac:	4398                	lw	a4,0(a5)
204046ae:	fd842783          	lw	a5,-40(s0)
204046b2:	fec42683          	lw	a3,-20(s0)
204046b6:	0691                	addi	a3,a3,4
204046b8:	8fd9                	or	a5,a5,a4
204046ba:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
204046bc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
204046be:	853e                	mv	a0,a5
204046c0:	50b2                	lw	ra,44(sp)
204046c2:	5422                	lw	s0,40(sp)
204046c4:	6145                	addi	sp,sp,48
204046c6:	8082                	ret

204046c8 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
204046c8:	7179                	addi	sp,sp,-48
204046ca:	d606                	sw	ra,44(sp)
204046cc:	d422                	sw	s0,40(sp)
204046ce:	1800                	addi	s0,sp,48
204046d0:	fca42e23          	sw	a0,-36(s0)
204046d4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204046d8:	fdc42503          	lw	a0,-36(s0)
204046dc:	da9ff0ef          	jal	ra,20404484 <__metal_driver_sifive_gpio0_base>
204046e0:	87aa                	mv	a5,a0
204046e2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
204046e6:	fec42783          	lw	a5,-20(s0)
204046ea:	0791                	addi	a5,a5,4
204046ec:	439c                	lw	a5,0(a5)
204046ee:	fd842703          	lw	a4,-40(s0)
204046f2:	fff74713          	not	a4,a4
204046f6:	86ba                	mv	a3,a4
204046f8:	fec42703          	lw	a4,-20(s0)
204046fc:	0711                	addi	a4,a4,4
204046fe:	8ff5                	and	a5,a5,a3
20404700:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
20404702:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
20404704:	853e                	mv	a0,a5
20404706:	50b2                	lw	ra,44(sp)
20404708:	5422                	lw	s0,40(sp)
2040470a:	6145                	addi	sp,sp,48
2040470c:	8082                	ret

2040470e <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
2040470e:	7179                	addi	sp,sp,-48
20404710:	d606                	sw	ra,44(sp)
20404712:	d422                	sw	s0,40(sp)
20404714:	1800                	addi	s0,sp,48
20404716:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040471a:	fdc42503          	lw	a0,-36(s0)
2040471e:	d67ff0ef          	jal	ra,20404484 <__metal_driver_sifive_gpio0_base>
20404722:	87aa                	mv	a5,a0
20404724:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20404728:	fec42783          	lw	a5,-20(s0)
2040472c:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
2040472e:	853e                	mv	a0,a5
20404730:	50b2                	lw	ra,44(sp)
20404732:	5422                	lw	s0,40(sp)
20404734:	6145                	addi	sp,sp,48
20404736:	8082                	ret

20404738 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20404738:	7179                	addi	sp,sp,-48
2040473a:	d606                	sw	ra,44(sp)
2040473c:	d422                	sw	s0,40(sp)
2040473e:	1800                	addi	s0,sp,48
20404740:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404744:	fdc42503          	lw	a0,-36(s0)
20404748:	d3dff0ef          	jal	ra,20404484 <__metal_driver_sifive_gpio0_base>
2040474c:	87aa                	mv	a5,a0
2040474e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
20404752:	fec42783          	lw	a5,-20(s0)
20404756:	07b1                	addi	a5,a5,12
20404758:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
2040475a:	853e                	mv	a0,a5
2040475c:	50b2                	lw	ra,44(sp)
2040475e:	5422                	lw	s0,40(sp)
20404760:	6145                	addi	sp,sp,48
20404762:	8082                	ret

20404764 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
20404764:	7179                	addi	sp,sp,-48
20404766:	d606                	sw	ra,44(sp)
20404768:	d422                	sw	s0,40(sp)
2040476a:	1800                	addi	s0,sp,48
2040476c:	fca42e23          	sw	a0,-36(s0)
20404770:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404774:	fdc42503          	lw	a0,-36(s0)
20404778:	d0dff0ef          	jal	ra,20404484 <__metal_driver_sifive_gpio0_base>
2040477c:	87aa                	mv	a5,a0
2040477e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20404782:	fec42783          	lw	a5,-20(s0)
20404786:	07a1                	addi	a5,a5,8
20404788:	439c                	lw	a5,0(a5)
2040478a:	fd842703          	lw	a4,-40(s0)
2040478e:	fff74713          	not	a4,a4
20404792:	86ba                	mv	a3,a4
20404794:	fec42703          	lw	a4,-20(s0)
20404798:	0721                	addi	a4,a4,8
2040479a:	8ff5                	and	a5,a5,a3
2040479c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
2040479e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
204047a0:	853e                	mv	a0,a5
204047a2:	50b2                	lw	ra,44(sp)
204047a4:	5422                	lw	s0,40(sp)
204047a6:	6145                	addi	sp,sp,48
204047a8:	8082                	ret

204047aa <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
204047aa:	7179                	addi	sp,sp,-48
204047ac:	d606                	sw	ra,44(sp)
204047ae:	d422                	sw	s0,40(sp)
204047b0:	1800                	addi	s0,sp,48
204047b2:	fca42e23          	sw	a0,-36(s0)
204047b6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204047ba:	fdc42503          	lw	a0,-36(s0)
204047be:	cc7ff0ef          	jal	ra,20404484 <__metal_driver_sifive_gpio0_base>
204047c2:	87aa                	mv	a5,a0
204047c4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
204047c8:	fec42783          	lw	a5,-20(s0)
204047cc:	07a1                	addi	a5,a5,8
204047ce:	4398                	lw	a4,0(a5)
204047d0:	fd842783          	lw	a5,-40(s0)
204047d4:	fec42683          	lw	a3,-20(s0)
204047d8:	06a1                	addi	a3,a3,8
204047da:	8fd9                	or	a5,a5,a4
204047dc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
204047de:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
204047e0:	853e                	mv	a0,a5
204047e2:	50b2                	lw	ra,44(sp)
204047e4:	5422                	lw	s0,40(sp)
204047e6:	6145                	addi	sp,sp,48
204047e8:	8082                	ret

204047ea <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
204047ea:	7179                	addi	sp,sp,-48
204047ec:	d606                	sw	ra,44(sp)
204047ee:	d422                	sw	s0,40(sp)
204047f0:	1800                	addi	s0,sp,48
204047f2:	fca42e23          	sw	a0,-36(s0)
204047f6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204047fa:	fdc42503          	lw	a0,-36(s0)
204047fe:	c87ff0ef          	jal	ra,20404484 <__metal_driver_sifive_gpio0_base>
20404802:	87aa                	mv	a5,a0
20404804:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20404808:	fec42783          	lw	a5,-20(s0)
2040480c:	07b1                	addi	a5,a5,12
2040480e:	4398                	lw	a4,0(a5)
20404810:	fd842783          	lw	a5,-40(s0)
20404814:	fec42683          	lw	a3,-20(s0)
20404818:	06b1                	addi	a3,a3,12
2040481a:	8fd9                	or	a5,a5,a4
2040481c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
2040481e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404820:	853e                	mv	a0,a5
20404822:	50b2                	lw	ra,44(sp)
20404824:	5422                	lw	s0,40(sp)
20404826:	6145                	addi	sp,sp,48
20404828:	8082                	ret

2040482a <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
2040482a:	7179                	addi	sp,sp,-48
2040482c:	d606                	sw	ra,44(sp)
2040482e:	d422                	sw	s0,40(sp)
20404830:	1800                	addi	s0,sp,48
20404832:	fca42e23          	sw	a0,-36(s0)
20404836:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040483a:	fdc42503          	lw	a0,-36(s0)
2040483e:	c47ff0ef          	jal	ra,20404484 <__metal_driver_sifive_gpio0_base>
20404842:	87aa                	mv	a5,a0
20404844:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
20404848:	fec42783          	lw	a5,-20(s0)
2040484c:	07b1                	addi	a5,a5,12
2040484e:	439c                	lw	a5,0(a5)
20404850:	fd842703          	lw	a4,-40(s0)
20404854:	fff74713          	not	a4,a4
20404858:	86ba                	mv	a3,a4
2040485a:	fec42703          	lw	a4,-20(s0)
2040485e:	0731                	addi	a4,a4,12
20404860:	8ff5                	and	a5,a5,a3
20404862:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
20404864:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
20404866:	853e                	mv	a0,a5
20404868:	50b2                	lw	ra,44(sp)
2040486a:	5422                	lw	s0,40(sp)
2040486c:	6145                	addi	sp,sp,48
2040486e:	8082                	ret

20404870 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20404870:	7179                	addi	sp,sp,-48
20404872:	d606                	sw	ra,44(sp)
20404874:	d422                	sw	s0,40(sp)
20404876:	1800                	addi	s0,sp,48
20404878:	fca42e23          	sw	a0,-36(s0)
2040487c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404880:	fdc42503          	lw	a0,-36(s0)
20404884:	c01ff0ef          	jal	ra,20404484 <__metal_driver_sifive_gpio0_base>
20404888:	87aa                	mv	a5,a0
2040488a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
2040488e:	fec42783          	lw	a5,-20(s0)
20404892:	07b1                	addi	a5,a5,12
20404894:	4398                	lw	a4,0(a5)
20404896:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
2040489a:	fec42683          	lw	a3,-20(s0)
2040489e:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
204048a0:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
204048a2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
204048a4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
204048a6:	853e                	mv	a0,a5
204048a8:	50b2                	lw	ra,44(sp)
204048aa:	5422                	lw	s0,40(sp)
204048ac:	6145                	addi	sp,sp,48
204048ae:	8082                	ret

204048b0 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
204048b0:	7179                	addi	sp,sp,-48
204048b2:	d606                	sw	ra,44(sp)
204048b4:	d422                	sw	s0,40(sp)
204048b6:	1800                	addi	s0,sp,48
204048b8:	fca42e23          	sw	a0,-36(s0)
204048bc:	fcb42c23          	sw	a1,-40(s0)
204048c0:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204048c4:	fdc42503          	lw	a0,-36(s0)
204048c8:	bbdff0ef          	jal	ra,20404484 <__metal_driver_sifive_gpio0_base>
204048cc:	87aa                	mv	a5,a0
204048ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
204048d2:	fec42783          	lw	a5,-20(s0)
204048d6:	03c78793          	addi	a5,a5,60
204048da:	439c                	lw	a5,0(a5)
204048dc:	fd842703          	lw	a4,-40(s0)
204048e0:	fff74713          	not	a4,a4
204048e4:	86ba                	mv	a3,a4
204048e6:	fec42703          	lw	a4,-20(s0)
204048ea:	03c70713          	addi	a4,a4,60
204048ee:	8ff5                	and	a5,a5,a3
204048f0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
204048f2:	fec42783          	lw	a5,-20(s0)
204048f6:	03878793          	addi	a5,a5,56
204048fa:	4398                	lw	a4,0(a5)
204048fc:	fd442783          	lw	a5,-44(s0)
20404900:	fec42683          	lw	a3,-20(s0)
20404904:	03868693          	addi	a3,a3,56
20404908:	8fd9                	or	a5,a5,a4
2040490a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
2040490c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
2040490e:	853e                	mv	a0,a5
20404910:	50b2                	lw	ra,44(sp)
20404912:	5422                	lw	s0,40(sp)
20404914:	6145                	addi	sp,sp,48
20404916:	8082                	ret

20404918 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20404918:	7179                	addi	sp,sp,-48
2040491a:	d606                	sw	ra,44(sp)
2040491c:	d422                	sw	s0,40(sp)
2040491e:	1800                	addi	s0,sp,48
20404920:	fca42e23          	sw	a0,-36(s0)
20404924:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404928:	fdc42503          	lw	a0,-36(s0)
2040492c:	b59ff0ef          	jal	ra,20404484 <__metal_driver_sifive_gpio0_base>
20404930:	87aa                	mv	a5,a0
20404932:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
20404936:	fec42783          	lw	a5,-20(s0)
2040493a:	03878793          	addi	a5,a5,56
2040493e:	439c                	lw	a5,0(a5)
20404940:	fd842703          	lw	a4,-40(s0)
20404944:	fff74713          	not	a4,a4
20404948:	86ba                	mv	a3,a4
2040494a:	fec42703          	lw	a4,-20(s0)
2040494e:	03870713          	addi	a4,a4,56
20404952:	8ff5                	and	a5,a5,a3
20404954:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
20404956:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20404958:	853e                	mv	a0,a5
2040495a:	50b2                	lw	ra,44(sp)
2040495c:	5422                	lw	s0,40(sp)
2040495e:	6145                	addi	sp,sp,48
20404960:	8082                	ret

20404962 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404962:	7179                	addi	sp,sp,-48
20404964:	d606                	sw	ra,44(sp)
20404966:	d422                	sw	s0,40(sp)
20404968:	1800                	addi	s0,sp,48
2040496a:	fca42e23          	sw	a0,-36(s0)
2040496e:	fcb42c23          	sw	a1,-40(s0)
20404972:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404976:	fdc42503          	lw	a0,-36(s0)
2040497a:	b0bff0ef          	jal	ra,20404484 <__metal_driver_sifive_gpio0_base>
2040497e:	87aa                	mv	a5,a0
20404980:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20404984:	fd442703          	lw	a4,-44(s0)
20404988:	479d                	li	a5,7
2040498a:	1ce7e963          	bltu	a5,a4,20404b5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
2040498e:	fd442783          	lw	a5,-44(s0)
20404992:	00279713          	slli	a4,a5,0x2
20404996:	204067b7          	lui	a5,0x20406
2040499a:	89878793          	addi	a5,a5,-1896 # 20405898 <__metal_driver_vtable_riscv_plic0+0x4c>
2040499e:	97ba                	add	a5,a5,a4
204049a0:	439c                	lw	a5,0(a5)
204049a2:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
204049a4:	fec42783          	lw	a5,-20(s0)
204049a8:	07e1                	addi	a5,a5,24
204049aa:	439c                	lw	a5,0(a5)
204049ac:	fd842703          	lw	a4,-40(s0)
204049b0:	fff74713          	not	a4,a4
204049b4:	86ba                	mv	a3,a4
204049b6:	fec42703          	lw	a4,-20(s0)
204049ba:	0761                	addi	a4,a4,24
204049bc:	8ff5                	and	a5,a5,a3
204049be:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
204049c0:	fec42783          	lw	a5,-20(s0)
204049c4:	02078793          	addi	a5,a5,32
204049c8:	439c                	lw	a5,0(a5)
204049ca:	fd842703          	lw	a4,-40(s0)
204049ce:	fff74713          	not	a4,a4
204049d2:	86ba                	mv	a3,a4
204049d4:	fec42703          	lw	a4,-20(s0)
204049d8:	02070713          	addi	a4,a4,32
204049dc:	8ff5                	and	a5,a5,a3
204049de:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
204049e0:	fec42783          	lw	a5,-20(s0)
204049e4:	02878793          	addi	a5,a5,40
204049e8:	439c                	lw	a5,0(a5)
204049ea:	fd842703          	lw	a4,-40(s0)
204049ee:	fff74713          	not	a4,a4
204049f2:	86ba                	mv	a3,a4
204049f4:	fec42703          	lw	a4,-20(s0)
204049f8:	02870713          	addi	a4,a4,40
204049fc:	8ff5                	and	a5,a5,a3
204049fe:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20404a00:	fec42783          	lw	a5,-20(s0)
20404a04:	03078793          	addi	a5,a5,48
20404a08:	439c                	lw	a5,0(a5)
20404a0a:	fd842703          	lw	a4,-40(s0)
20404a0e:	fff74713          	not	a4,a4
20404a12:	86ba                	mv	a3,a4
20404a14:	fec42703          	lw	a4,-20(s0)
20404a18:	03070713          	addi	a4,a4,48
20404a1c:	8ff5                	and	a5,a5,a3
20404a1e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404a20:	aa35                	j	20404b5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404a22:	fec42783          	lw	a5,-20(s0)
20404a26:	07e1                	addi	a5,a5,24
20404a28:	4398                	lw	a4,0(a5)
20404a2a:	fd842783          	lw	a5,-40(s0)
20404a2e:	fec42683          	lw	a3,-20(s0)
20404a32:	06e1                	addi	a3,a3,24
20404a34:	8fd9                	or	a5,a5,a4
20404a36:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20404a38:	a215                	j	20404b5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404a3a:	fec42783          	lw	a5,-20(s0)
20404a3e:	02078793          	addi	a5,a5,32
20404a42:	4398                	lw	a4,0(a5)
20404a44:	fd842783          	lw	a5,-40(s0)
20404a48:	fec42683          	lw	a3,-20(s0)
20404a4c:	02068693          	addi	a3,a3,32
20404a50:	8fd9                	or	a5,a5,a4
20404a52:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20404a54:	a221                	j	20404b5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404a56:	fec42783          	lw	a5,-20(s0)
20404a5a:	07e1                	addi	a5,a5,24
20404a5c:	4398                	lw	a4,0(a5)
20404a5e:	fd842783          	lw	a5,-40(s0)
20404a62:	fec42683          	lw	a3,-20(s0)
20404a66:	06e1                	addi	a3,a3,24
20404a68:	8fd9                	or	a5,a5,a4
20404a6a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404a6c:	fec42783          	lw	a5,-20(s0)
20404a70:	02078793          	addi	a5,a5,32
20404a74:	4398                	lw	a4,0(a5)
20404a76:	fd842783          	lw	a5,-40(s0)
20404a7a:	fec42683          	lw	a3,-20(s0)
20404a7e:	02068693          	addi	a3,a3,32
20404a82:	8fd9                	or	a5,a5,a4
20404a84:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20404a86:	a8d9                	j	20404b5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404a88:	fec42783          	lw	a5,-20(s0)
20404a8c:	02878793          	addi	a5,a5,40
20404a90:	4398                	lw	a4,0(a5)
20404a92:	fd842783          	lw	a5,-40(s0)
20404a96:	fec42683          	lw	a3,-20(s0)
20404a9a:	02868693          	addi	a3,a3,40
20404a9e:	8fd9                	or	a5,a5,a4
20404aa0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20404aa2:	a86d                	j	20404b5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404aa4:	fec42783          	lw	a5,-20(s0)
20404aa8:	03078793          	addi	a5,a5,48
20404aac:	4398                	lw	a4,0(a5)
20404aae:	fd842783          	lw	a5,-40(s0)
20404ab2:	fec42683          	lw	a3,-20(s0)
20404ab6:	03068693          	addi	a3,a3,48
20404aba:	8fd9                	or	a5,a5,a4
20404abc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20404abe:	a879                	j	20404b5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404ac0:	fec42783          	lw	a5,-20(s0)
20404ac4:	02878793          	addi	a5,a5,40
20404ac8:	4398                	lw	a4,0(a5)
20404aca:	fd842783          	lw	a5,-40(s0)
20404ace:	fec42683          	lw	a3,-20(s0)
20404ad2:	02868693          	addi	a3,a3,40
20404ad6:	8fd9                	or	a5,a5,a4
20404ad8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404ada:	fec42783          	lw	a5,-20(s0)
20404ade:	03078793          	addi	a5,a5,48
20404ae2:	4398                	lw	a4,0(a5)
20404ae4:	fd842783          	lw	a5,-40(s0)
20404ae8:	fec42683          	lw	a3,-20(s0)
20404aec:	03068693          	addi	a3,a3,48
20404af0:	8fd9                	or	a5,a5,a4
20404af2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20404af4:	a0a5                	j	20404b5c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404af6:	fec42783          	lw	a5,-20(s0)
20404afa:	07e1                	addi	a5,a5,24
20404afc:	4398                	lw	a4,0(a5)
20404afe:	fd842783          	lw	a5,-40(s0)
20404b02:	fec42683          	lw	a3,-20(s0)
20404b06:	06e1                	addi	a3,a3,24
20404b08:	8fd9                	or	a5,a5,a4
20404b0a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404b0c:	fec42783          	lw	a5,-20(s0)
20404b10:	02078793          	addi	a5,a5,32
20404b14:	4398                	lw	a4,0(a5)
20404b16:	fd842783          	lw	a5,-40(s0)
20404b1a:	fec42683          	lw	a3,-20(s0)
20404b1e:	02068693          	addi	a3,a3,32
20404b22:	8fd9                	or	a5,a5,a4
20404b24:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404b26:	fec42783          	lw	a5,-20(s0)
20404b2a:	02878793          	addi	a5,a5,40
20404b2e:	4398                	lw	a4,0(a5)
20404b30:	fd842783          	lw	a5,-40(s0)
20404b34:	fec42683          	lw	a3,-20(s0)
20404b38:	02868693          	addi	a3,a3,40
20404b3c:	8fd9                	or	a5,a5,a4
20404b3e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404b40:	fec42783          	lw	a5,-20(s0)
20404b44:	03078793          	addi	a5,a5,48
20404b48:	4398                	lw	a4,0(a5)
20404b4a:	fd842783          	lw	a5,-40(s0)
20404b4e:	fec42683          	lw	a3,-20(s0)
20404b52:	03068693          	addi	a3,a3,48
20404b56:	8fd9                	or	a5,a5,a4
20404b58:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20404b5a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20404b5c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20404b5e:	853e                	mv	a0,a5
20404b60:	50b2                	lw	ra,44(sp)
20404b62:	5422                	lw	s0,40(sp)
20404b64:	6145                	addi	sp,sp,48
20404b66:	8082                	ret

20404b68 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404b68:	7179                	addi	sp,sp,-48
20404b6a:	d606                	sw	ra,44(sp)
20404b6c:	d422                	sw	s0,40(sp)
20404b6e:	1800                	addi	s0,sp,48
20404b70:	fca42e23          	sw	a0,-36(s0)
20404b74:	fcb42c23          	sw	a1,-40(s0)
20404b78:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404b7c:	fdc42503          	lw	a0,-36(s0)
20404b80:	905ff0ef          	jal	ra,20404484 <__metal_driver_sifive_gpio0_base>
20404b84:	87aa                	mv	a5,a0
20404b86:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20404b8a:	fd442703          	lw	a4,-44(s0)
20404b8e:	479d                	li	a5,7
20404b90:	14e7ea63          	bltu	a5,a4,20404ce4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
20404b94:	fd442783          	lw	a5,-44(s0)
20404b98:	00279713          	slli	a4,a5,0x2
20404b9c:	204067b7          	lui	a5,0x20406
20404ba0:	8b878793          	addi	a5,a5,-1864 # 204058b8 <__metal_driver_vtable_riscv_plic0+0x6c>
20404ba4:	97ba                	add	a5,a5,a4
20404ba6:	439c                	lw	a5,0(a5)
20404ba8:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404baa:	fec42783          	lw	a5,-20(s0)
20404bae:	07f1                	addi	a5,a5,28
20404bb0:	4398                	lw	a4,0(a5)
20404bb2:	fd842783          	lw	a5,-40(s0)
20404bb6:	fec42683          	lw	a3,-20(s0)
20404bba:	06f1                	addi	a3,a3,28
20404bbc:	8fd9                	or	a5,a5,a4
20404bbe:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20404bc0:	a215                	j	20404ce4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404bc2:	fec42783          	lw	a5,-20(s0)
20404bc6:	02478793          	addi	a5,a5,36
20404bca:	4398                	lw	a4,0(a5)
20404bcc:	fd842783          	lw	a5,-40(s0)
20404bd0:	fec42683          	lw	a3,-20(s0)
20404bd4:	02468693          	addi	a3,a3,36
20404bd8:	8fd9                	or	a5,a5,a4
20404bda:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20404bdc:	a221                	j	20404ce4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404bde:	fec42783          	lw	a5,-20(s0)
20404be2:	07f1                	addi	a5,a5,28
20404be4:	4398                	lw	a4,0(a5)
20404be6:	fd842783          	lw	a5,-40(s0)
20404bea:	fec42683          	lw	a3,-20(s0)
20404bee:	06f1                	addi	a3,a3,28
20404bf0:	8fd9                	or	a5,a5,a4
20404bf2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404bf4:	fec42783          	lw	a5,-20(s0)
20404bf8:	02478793          	addi	a5,a5,36
20404bfc:	4398                	lw	a4,0(a5)
20404bfe:	fd842783          	lw	a5,-40(s0)
20404c02:	fec42683          	lw	a3,-20(s0)
20404c06:	02468693          	addi	a3,a3,36
20404c0a:	8fd9                	or	a5,a5,a4
20404c0c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20404c0e:	a8d9                	j	20404ce4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404c10:	fec42783          	lw	a5,-20(s0)
20404c14:	02c78793          	addi	a5,a5,44
20404c18:	4398                	lw	a4,0(a5)
20404c1a:	fd842783          	lw	a5,-40(s0)
20404c1e:	fec42683          	lw	a3,-20(s0)
20404c22:	02c68693          	addi	a3,a3,44
20404c26:	8fd9                	or	a5,a5,a4
20404c28:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20404c2a:	a86d                	j	20404ce4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404c2c:	fec42783          	lw	a5,-20(s0)
20404c30:	03478793          	addi	a5,a5,52
20404c34:	4398                	lw	a4,0(a5)
20404c36:	fd842783          	lw	a5,-40(s0)
20404c3a:	fec42683          	lw	a3,-20(s0)
20404c3e:	03468693          	addi	a3,a3,52
20404c42:	8fd9                	or	a5,a5,a4
20404c44:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20404c46:	a879                	j	20404ce4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404c48:	fec42783          	lw	a5,-20(s0)
20404c4c:	02c78793          	addi	a5,a5,44
20404c50:	4398                	lw	a4,0(a5)
20404c52:	fd842783          	lw	a5,-40(s0)
20404c56:	fec42683          	lw	a3,-20(s0)
20404c5a:	02c68693          	addi	a3,a3,44
20404c5e:	8fd9                	or	a5,a5,a4
20404c60:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404c62:	fec42783          	lw	a5,-20(s0)
20404c66:	03478793          	addi	a5,a5,52
20404c6a:	4398                	lw	a4,0(a5)
20404c6c:	fd842783          	lw	a5,-40(s0)
20404c70:	fec42683          	lw	a3,-20(s0)
20404c74:	03468693          	addi	a3,a3,52
20404c78:	8fd9                	or	a5,a5,a4
20404c7a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20404c7c:	a0a5                	j	20404ce4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404c7e:	fec42783          	lw	a5,-20(s0)
20404c82:	07f1                	addi	a5,a5,28
20404c84:	4398                	lw	a4,0(a5)
20404c86:	fd842783          	lw	a5,-40(s0)
20404c8a:	fec42683          	lw	a3,-20(s0)
20404c8e:	06f1                	addi	a3,a3,28
20404c90:	8fd9                	or	a5,a5,a4
20404c92:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404c94:	fec42783          	lw	a5,-20(s0)
20404c98:	02478793          	addi	a5,a5,36
20404c9c:	4398                	lw	a4,0(a5)
20404c9e:	fd842783          	lw	a5,-40(s0)
20404ca2:	fec42683          	lw	a3,-20(s0)
20404ca6:	02468693          	addi	a3,a3,36
20404caa:	8fd9                	or	a5,a5,a4
20404cac:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404cae:	fec42783          	lw	a5,-20(s0)
20404cb2:	02c78793          	addi	a5,a5,44
20404cb6:	4398                	lw	a4,0(a5)
20404cb8:	fd842783          	lw	a5,-40(s0)
20404cbc:	fec42683          	lw	a3,-20(s0)
20404cc0:	02c68693          	addi	a3,a3,44
20404cc4:	8fd9                	or	a5,a5,a4
20404cc6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404cc8:	fec42783          	lw	a5,-20(s0)
20404ccc:	03478793          	addi	a5,a5,52
20404cd0:	4398                	lw	a4,0(a5)
20404cd2:	fd842783          	lw	a5,-40(s0)
20404cd6:	fec42683          	lw	a3,-20(s0)
20404cda:	03468693          	addi	a3,a3,52
20404cde:	8fd9                	or	a5,a5,a4
20404ce0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20404ce2:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20404ce4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20404ce6:	853e                	mv	a0,a5
20404ce8:	50b2                	lw	ra,44(sp)
20404cea:	5422                	lw	s0,40(sp)
20404cec:	6145                	addi	sp,sp,48
20404cee:	8082                	ret

20404cf0 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20404cf0:	1101                	addi	sp,sp,-32
20404cf2:	ce06                	sw	ra,28(sp)
20404cf4:	cc22                	sw	s0,24(sp)
20404cf6:	1000                	addi	s0,sp,32
20404cf8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20404cfc:	fec42503          	lw	a0,-20(s0)
20404d00:	faaff0ef          	jal	ra,204044aa <__metal_driver_sifive_gpio0_interrupt_parent>
20404d04:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20404d06:	853e                	mv	a0,a5
20404d08:	40f2                	lw	ra,28(sp)
20404d0a:	4462                	lw	s0,24(sp)
20404d0c:	6105                	addi	sp,sp,32
20404d0e:	8082                	ret

20404d10 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20404d10:	7179                	addi	sp,sp,-48
20404d12:	d606                	sw	ra,44(sp)
20404d14:	d422                	sw	s0,40(sp)
20404d16:	1800                	addi	s0,sp,48
20404d18:	fca42e23          	sw	a0,-36(s0)
20404d1c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404d20:	fd842583          	lw	a1,-40(s0)
20404d24:	fdc42503          	lw	a0,-36(s0)
20404d28:	facff0ef          	jal	ra,204044d4 <__metal_driver_sifive_gpio0_interrupt_lines>
20404d2c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404d30:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20404d34:	853e                	mv	a0,a5
20404d36:	50b2                	lw	ra,44(sp)
20404d38:	5422                	lw	s0,40(sp)
20404d3a:	6145                	addi	sp,sp,48
20404d3c:	8082                	ret

20404d3e <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
20404d3e:	1101                	addi	sp,sp,-32
20404d40:	ce22                	sw	s0,28(sp)
20404d42:	1000                	addi	s0,sp,32
20404d44:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404d48:	fec42703          	lw	a4,-20(s0)
20404d4c:	800007b7          	lui	a5,0x80000
20404d50:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2cc>
20404d54:	00f71563          	bne	a4,a5,20404d5e <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20404d58:	100137b7          	lui	a5,0x10013
20404d5c:	a011                	j	20404d60 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
20404d5e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
20404d60:	853e                	mv	a0,a5
20404d62:	4472                	lw	s0,28(sp)
20404d64:	6105                	addi	sp,sp,32
20404d66:	8082                	ret

20404d68 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20404d68:	1101                	addi	sp,sp,-32
20404d6a:	ce22                	sw	s0,28(sp)
20404d6c:	1000                	addi	s0,sp,32
20404d6e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404d72:	fec42703          	lw	a4,-20(s0)
20404d76:	800007b7          	lui	a5,0x80000
20404d7a:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2cc>
20404d7e:	00f71763          	bne	a4,a5,20404d8c <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404d82:	800007b7          	lui	a5,0x80000
20404d86:	46878793          	addi	a5,a5,1128 # 80000468 <metal_segment_heap_target_end+0xffffefcc>
20404d8a:	a011                	j	20404d8e <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20404d8c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
20404d8e:	853e                	mv	a0,a5
20404d90:	4472                	lw	s0,28(sp)
20404d92:	6105                	addi	sp,sp,32
20404d94:	8082                	ret

20404d96 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20404d96:	1101                	addi	sp,sp,-32
20404d98:	ce22                	sw	s0,28(sp)
20404d9a:	1000                	addi	s0,sp,32
20404d9c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404da0:	fec42703          	lw	a4,-20(s0)
20404da4:	800007b7          	lui	a5,0x80000
20404da8:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2cc>
20404dac:	00f71463          	bne	a4,a5,20404db4 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
20404db0:	4795                	li	a5,5
20404db2:	a011                	j	20404db6 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20404db4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
20404db6:	853e                	mv	a0,a5
20404db8:	4472                	lw	s0,28(sp)
20404dba:	6105                	addi	sp,sp,32
20404dbc:	8082                	ret

20404dbe <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
20404dbe:	1101                	addi	sp,sp,-32
20404dc0:	ce22                	sw	s0,28(sp)
20404dc2:	1000                	addi	s0,sp,32
20404dc4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404dc8:	fec42703          	lw	a4,-20(s0)
20404dcc:	800007b7          	lui	a5,0x80000
20404dd0:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2cc>
20404dd4:	00f71763          	bne	a4,a5,20404de2 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20404dd8:	800007b7          	lui	a5,0x80000
20404ddc:	0a078793          	addi	a5,a5,160 # 800000a0 <metal_segment_heap_target_end+0xffffec04>
20404de0:	a011                	j	20404de4 <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
20404de2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
20404de4:	853e                	mv	a0,a5
20404de6:	4472                	lw	s0,28(sp)
20404de8:	6105                	addi	sp,sp,32
20404dea:	8082                	ret

20404dec <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20404dec:	1101                	addi	sp,sp,-32
20404dee:	ce22                	sw	s0,28(sp)
20404df0:	1000                	addi	s0,sp,32
20404df2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404df6:	fec42703          	lw	a4,-20(s0)
20404dfa:	800007b7          	lui	a5,0x80000
20404dfe:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2cc>
20404e02:	00f71563          	bne	a4,a5,20404e0c <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20404e06:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404e0a:	a011                	j	20404e0e <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20404e0c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
20404e0e:	853e                	mv	a0,a5
20404e10:	4472                	lw	s0,28(sp)
20404e12:	6105                	addi	sp,sp,32
20404e14:	8082                	ret

20404e16 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20404e16:	1101                	addi	sp,sp,-32
20404e18:	ce22                	sw	s0,28(sp)
20404e1a:	1000                	addi	s0,sp,32
20404e1c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404e20:	fec42703          	lw	a4,-20(s0)
20404e24:	800007b7          	lui	a5,0x80000
20404e28:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2cc>
20404e2c:	00f71563          	bne	a4,a5,20404e36 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
20404e30:	000307b7          	lui	a5,0x30
20404e34:	a011                	j	20404e38 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20404e36:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
20404e38:	853e                	mv	a0,a5
20404e3a:	4472                	lw	s0,28(sp)
20404e3c:	6105                	addi	sp,sp,32
20404e3e:	8082                	ret

20404e40 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20404e40:	1101                	addi	sp,sp,-32
20404e42:	ce22                	sw	s0,28(sp)
20404e44:	1000                	addi	s0,sp,32
20404e46:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404e4a:	fec42703          	lw	a4,-20(s0)
20404e4e:	800007b7          	lui	a5,0x80000
20404e52:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2cc>
20404e56:	00f71563          	bne	a4,a5,20404e60 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
20404e5a:	000307b7          	lui	a5,0x30
20404e5e:	a011                	j	20404e62 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20404e60:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
20404e62:	853e                	mv	a0,a5
20404e64:	4472                	lw	s0,28(sp)
20404e66:	6105                	addi	sp,sp,32
20404e68:	8082                	ret

20404e6a <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20404e6a:	1101                	addi	sp,sp,-32
20404e6c:	ce06                	sw	ra,28(sp)
20404e6e:	cc22                	sw	s0,24(sp)
20404e70:	1000                	addi	s0,sp,32
20404e72:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20404e76:	fec42503          	lw	a0,-20(s0)
20404e7a:	35fd                	jal	20404d68 <__metal_driver_sifive_uart0_interrupt_parent>
20404e7c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20404e7e:	853e                	mv	a0,a5
20404e80:	40f2                	lw	ra,28(sp)
20404e82:	4462                	lw	s0,24(sp)
20404e84:	6105                	addi	sp,sp,32
20404e86:	8082                	ret

20404e88 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20404e88:	1101                	addi	sp,sp,-32
20404e8a:	ce06                	sw	ra,28(sp)
20404e8c:	cc22                	sw	s0,24(sp)
20404e8e:	1000                	addi	s0,sp,32
20404e90:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20404e94:	fec42503          	lw	a0,-20(s0)
20404e98:	3dfd                	jal	20404d96 <__metal_driver_sifive_uart0_interrupt_line>
20404e9a:	87aa                	mv	a5,a0
20404e9c:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20404ea0:	853e                	mv	a0,a5
20404ea2:	40f2                	lw	ra,28(sp)
20404ea4:	4462                	lw	s0,24(sp)
20404ea6:	6105                	addi	sp,sp,32
20404ea8:	8082                	ret

20404eaa <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20404eaa:	7179                	addi	sp,sp,-48
20404eac:	d606                	sw	ra,44(sp)
20404eae:	d422                	sw	s0,40(sp)
20404eb0:	1800                	addi	s0,sp,48
20404eb2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404eb6:	fdc42503          	lw	a0,-36(s0)
20404eba:	3551                	jal	20404d3e <__metal_driver_sifive_uart0_control_base>
20404ebc:	87aa                	mv	a5,a0
20404ebe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20404ec2:	fec42783          	lw	a5,-20(s0)
20404ec6:	439c                	lw	a5,0(a5)
20404ec8:	fff7c793          	not	a5,a5
20404ecc:	83fd                	srli	a5,a5,0x1f
20404ece:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20404ed2:	853e                	mv	a0,a5
20404ed4:	50b2                	lw	ra,44(sp)
20404ed6:	5422                	lw	s0,40(sp)
20404ed8:	6145                	addi	sp,sp,48
20404eda:	8082                	ret

20404edc <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20404edc:	7179                	addi	sp,sp,-48
20404ede:	d606                	sw	ra,44(sp)
20404ee0:	d422                	sw	s0,40(sp)
20404ee2:	1800                	addi	s0,sp,48
20404ee4:	fca42e23          	sw	a0,-36(s0)
20404ee8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404eec:	fdc42503          	lw	a0,-36(s0)
20404ef0:	e4fff0ef          	jal	ra,20404d3e <__metal_driver_sifive_uart0_control_base>
20404ef4:	87aa                	mv	a5,a0
20404ef6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20404efa:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20404efc:	fdc42503          	lw	a0,-36(s0)
20404f00:	376d                	jal	20404eaa <__metal_driver_sifive_uart0_txready>
20404f02:	87aa                	mv	a5,a0
20404f04:	dfe5                	beqz	a5,20404efc <__metal_driver_sifive_uart0_putc+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20404f06:	fec42783          	lw	a5,-20(s0)
20404f0a:	fd842703          	lw	a4,-40(s0)
20404f0e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20404f10:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20404f12:	853e                	mv	a0,a5
20404f14:	50b2                	lw	ra,44(sp)
20404f16:	5422                	lw	s0,40(sp)
20404f18:	6145                	addi	sp,sp,48
20404f1a:	8082                	ret

20404f1c <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20404f1c:	7179                	addi	sp,sp,-48
20404f1e:	d606                	sw	ra,44(sp)
20404f20:	d422                	sw	s0,40(sp)
20404f22:	1800                	addi	s0,sp,48
20404f24:	fca42e23          	sw	a0,-36(s0)
20404f28:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404f2c:	fdc42503          	lw	a0,-36(s0)
20404f30:	e0fff0ef          	jal	ra,20404d3e <__metal_driver_sifive_uart0_control_base>
20404f34:	87aa                	mv	a5,a0
20404f36:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
20404f3a:	fec42783          	lw	a5,-20(s0)
20404f3e:	0791                	addi	a5,a5,4
20404f40:	439c                	lw	a5,0(a5)
20404f42:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20404f46:	fe842783          	lw	a5,-24(s0)
20404f4a:	0007d763          	bgez	a5,20404f58 <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20404f4e:	fd842783          	lw	a5,-40(s0)
20404f52:	577d                	li	a4,-1
20404f54:	c398                	sw	a4,0(a5)
20404f56:	a801                	j	20404f66 <__metal_driver_sifive_uart0_getc+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20404f58:	fe842783          	lw	a5,-24(s0)
20404f5c:	0ff7f713          	andi	a4,a5,255
20404f60:	fd842783          	lw	a5,-40(s0)
20404f64:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20404f66:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20404f68:	853e                	mv	a0,a5
20404f6a:	50b2                	lw	ra,44(sp)
20404f6c:	5422                	lw	s0,40(sp)
20404f6e:	6145                	addi	sp,sp,48
20404f70:	8082                	ret

20404f72 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20404f72:	7179                	addi	sp,sp,-48
20404f74:	d622                	sw	s0,44(sp)
20404f76:	1800                	addi	s0,sp,48
20404f78:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404f7c:	fdc42783          	lw	a5,-36(s0)
20404f80:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20404f84:	fec42783          	lw	a5,-20(s0)
20404f88:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
20404f8a:	853e                	mv	a0,a5
20404f8c:	5432                	lw	s0,44(sp)
20404f8e:	6145                	addi	sp,sp,48
20404f90:	8082                	ret

20404f92 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20404f92:	7179                	addi	sp,sp,-48
20404f94:	d606                	sw	ra,44(sp)
20404f96:	d422                	sw	s0,40(sp)
20404f98:	1800                	addi	s0,sp,48
20404f9a:	fca42e23          	sw	a0,-36(s0)
20404f9e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404fa2:	fdc42783          	lw	a5,-36(s0)
20404fa6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20404faa:	fdc42503          	lw	a0,-36(s0)
20404fae:	d91ff0ef          	jal	ra,20404d3e <__metal_driver_sifive_uart0_control_base>
20404fb2:	87aa                	mv	a5,a0
20404fb4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404fb8:	fdc42503          	lw	a0,-36(s0)
20404fbc:	e03ff0ef          	jal	ra,20404dbe <__metal_driver_sifive_uart0_clock>
20404fc0:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20404fc4:	fd842703          	lw	a4,-40(s0)
20404fc8:	fec42783          	lw	a5,-20(s0)
20404fcc:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
20404fce:	fe442783          	lw	a5,-28(s0)
20404fd2:	cbb1                	beqz	a5,20405026 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20404fd4:	fe442783          	lw	a5,-28(s0)
20404fd8:	439c                	lw	a5,0(a5)
20404fda:	439c                	lw	a5,0(a5)
20404fdc:	fe442503          	lw	a0,-28(s0)
20404fe0:	9782                	jalr	a5
20404fe2:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20404fe6:	fe042703          	lw	a4,-32(s0)
20404fea:	fd842783          	lw	a5,-40(s0)
20404fee:	02f747b3          	div	a5,a4,a5
20404ff2:	fff78713          	addi	a4,a5,-1
20404ff6:	fe842783          	lw	a5,-24(s0)
20404ffa:	07e1                	addi	a5,a5,24
20404ffc:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20404ffe:	fe842783          	lw	a5,-24(s0)
20405002:	07a1                	addi	a5,a5,8
20405004:	439c                	lw	a5,0(a5)
20405006:	fe842703          	lw	a4,-24(s0)
2040500a:	0721                	addi	a4,a4,8
2040500c:	0017e793          	ori	a5,a5,1
20405010:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20405012:	fe842783          	lw	a5,-24(s0)
20405016:	07b1                	addi	a5,a5,12
20405018:	439c                	lw	a5,0(a5)
2040501a:	fe842703          	lw	a4,-24(s0)
2040501e:	0731                	addi	a4,a4,12
20405020:	0017e793          	ori	a5,a5,1
20405024:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20405026:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20405028:	853e                	mv	a0,a5
2040502a:	50b2                	lw	ra,44(sp)
2040502c:	5422                	lw	s0,40(sp)
2040502e:	6145                	addi	sp,sp,48
20405030:	8082                	ret

20405032 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20405032:	7139                	addi	sp,sp,-64
20405034:	de06                	sw	ra,60(sp)
20405036:	dc22                	sw	s0,56(sp)
20405038:	0080                	addi	s0,sp,64
2040503a:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
2040503e:	fcc42783          	lw	a5,-52(s0)
20405042:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20405046:	fcc42503          	lw	a0,-52(s0)
2040504a:	cf5ff0ef          	jal	ra,20404d3e <__metal_driver_sifive_uart0_control_base>
2040504e:	87aa                	mv	a5,a0
20405050:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20405054:	fcc42503          	lw	a0,-52(s0)
20405058:	d67ff0ef          	jal	ra,20404dbe <__metal_driver_sifive_uart0_clock>
2040505c:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20405060:	fe842783          	lw	a5,-24(s0)
20405064:	07a1                	addi	a5,a5,8
20405066:	4398                	lw	a4,0(a5)
20405068:	fe842783          	lw	a5,-24(s0)
2040506c:	07a1                	addi	a5,a5,8
2040506e:	86be                	mv	a3,a5
20405070:	fff907b7          	lui	a5,0xfff90
20405074:	17fd                	addi	a5,a5,-1
20405076:	8ff9                	and	a5,a5,a4
20405078:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
2040507a:	fe842783          	lw	a5,-24(s0)
2040507e:	07a1                	addi	a5,a5,8
20405080:	4398                	lw	a4,0(a5)
20405082:	fe842783          	lw	a5,-24(s0)
20405086:	07a1                	addi	a5,a5,8
20405088:	86be                	mv	a3,a5
2040508a:	67c1                	lui	a5,0x10
2040508c:	8fd9                	or	a5,a5,a4
2040508e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20405090:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20405092:	fe842783          	lw	a5,-24(s0)
20405096:	07d1                	addi	a5,a5,20
20405098:	439c                	lw	a5,0(a5)
2040509a:	8b85                	andi	a5,a5,1
2040509c:	dbfd                	beqz	a5,20405092 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
2040509e:	fe842783          	lw	a5,-24(s0)
204050a2:	07a1                	addi	a5,a5,8
204050a4:	439c                	lw	a5,0(a5)
204050a6:	8b89                	andi	a5,a5,2
204050a8:	c399                	beqz	a5,204050ae <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
204050aa:	47a5                	li	a5,9
204050ac:	a011                	j	204050b0 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
204050ae:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
204050b0:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
204050b4:	fe442783          	lw	a5,-28(s0)
204050b8:	439c                	lw	a5,0(a5)
204050ba:	439c                	lw	a5,0(a5)
204050bc:	fe442503          	lw	a0,-28(s0)
204050c0:	9782                	jalr	a5
204050c2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
204050c6:	fe042703          	lw	a4,-32(s0)
204050ca:	fdc42783          	lw	a5,-36(s0)
204050ce:	02f707b3          	mul	a5,a4,a5
204050d2:	873e                	mv	a4,a5
204050d4:	fec42783          	lw	a5,-20(s0)
204050d8:	43dc                	lw	a5,4(a5)
204050da:	02f757b3          	divu	a5,a4,a5
204050de:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
204050e2:	fc042a23          	sw	zero,-44(s0)
204050e6:	a039                	j	204050f4 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
204050e8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
204050ea:	fd442783          	lw	a5,-44(s0)
204050ee:	0785                	addi	a5,a5,1
204050f0:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
204050f4:	fd442783          	lw	a5,-44(s0)
204050f8:	fd842703          	lw	a4,-40(s0)
204050fc:	fee7c6e3          	blt	a5,a4,204050e8 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20405100:	0001                	nop
20405102:	50f2                	lw	ra,60(sp)
20405104:	5462                	lw	s0,56(sp)
20405106:	6121                	addi	sp,sp,64
20405108:	8082                	ret

2040510a <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
2040510a:	7179                	addi	sp,sp,-48
2040510c:	d606                	sw	ra,44(sp)
2040510e:	d422                	sw	s0,40(sp)
20405110:	1800                	addi	s0,sp,48
20405112:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20405116:	fdc42783          	lw	a5,-36(s0)
2040511a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
2040511e:	fec42703          	lw	a4,-20(s0)
20405122:	fec42783          	lw	a5,-20(s0)
20405126:	43dc                	lw	a5,4(a5)
20405128:	85be                	mv	a1,a5
2040512a:	853a                	mv	a0,a4
2040512c:	de1fc0ef          	jal	ra,20401f0c <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20405130:	0001                	nop
20405132:	50b2                	lw	ra,44(sp)
20405134:	5422                	lw	s0,40(sp)
20405136:	6145                	addi	sp,sp,48
20405138:	8082                	ret

2040513a <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
2040513a:	7139                	addi	sp,sp,-64
2040513c:	de06                	sw	ra,60(sp)
2040513e:	dc22                	sw	s0,56(sp)
20405140:	0080                	addi	s0,sp,64
20405142:	fca42623          	sw	a0,-52(s0)
20405146:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
2040514a:	fcc42783          	lw	a5,-52(s0)
2040514e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405152:	fcc42503          	lw	a0,-52(s0)
20405156:	c69ff0ef          	jal	ra,20404dbe <__metal_driver_sifive_uart0_clock>
2040515a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
2040515e:	fcc42503          	lw	a0,-52(s0)
20405162:	c8bff0ef          	jal	ra,20404dec <__metal_driver_sifive_uart0_pinmux>
20405166:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
2040516a:	fe842783          	lw	a5,-24(s0)
2040516e:	c7b9                	beqz	a5,204051bc <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20405170:	fec42783          	lw	a5,-20(s0)
20405174:	20405737          	lui	a4,0x20405
20405178:	03270713          	addi	a4,a4,50 # 20405032 <pre_rate_change_callback_func>
2040517c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
2040517e:	fec42783          	lw	a5,-20(s0)
20405182:	fcc42703          	lw	a4,-52(s0)
20405186:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20405188:	fec42783          	lw	a5,-20(s0)
2040518c:	07a1                	addi	a5,a5,8
2040518e:	85be                	mv	a1,a5
20405190:	fe842503          	lw	a0,-24(s0)
20405194:	20f1                	jal	20405260 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20405196:	fec42783          	lw	a5,-20(s0)
2040519a:	20405737          	lui	a4,0x20405
2040519e:	10a70713          	addi	a4,a4,266 # 2040510a <post_rate_change_callback_func>
204051a2:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
204051a4:	fec42783          	lw	a5,-20(s0)
204051a8:	fcc42703          	lw	a4,-52(s0)
204051ac:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
204051ae:	fec42783          	lw	a5,-20(s0)
204051b2:	07d1                	addi	a5,a5,20
204051b4:	85be                	mv	a1,a5
204051b6:	fe842503          	lw	a0,-24(s0)
204051ba:	28d9                	jal	20405290 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
204051bc:	fec42783          	lw	a5,-20(s0)
204051c0:	fc842583          	lw	a1,-56(s0)
204051c4:	853e                	mv	a0,a5
204051c6:	d47fc0ef          	jal	ra,20401f0c <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
204051ca:	fe442783          	lw	a5,-28(s0)
204051ce:	cb95                	beqz	a5,20405202 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
204051d0:	fcc42503          	lw	a0,-52(s0)
204051d4:	c43ff0ef          	jal	ra,20404e16 <__metal_driver_sifive_uart0_pinmux_output_selector>
204051d8:	87aa                	mv	a5,a0
204051da:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
204051de:	fcc42503          	lw	a0,-52(s0)
204051e2:	c5fff0ef          	jal	ra,20404e40 <__metal_driver_sifive_uart0_pinmux_source_selector>
204051e6:	87aa                	mv	a5,a0
204051e8:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
204051ec:	fe442783          	lw	a5,-28(s0)
204051f0:	439c                	lw	a5,0(a5)
204051f2:	53dc                	lw	a5,36(a5)
204051f4:	fdc42603          	lw	a2,-36(s0)
204051f8:	fe042583          	lw	a1,-32(s0)
204051fc:	fe442503          	lw	a0,-28(s0)
20405200:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20405202:	0001                	nop
20405204:	50f2                	lw	ra,60(sp)
20405206:	5462                	lw	s0,56(sp)
20405208:	6121                	addi	sp,sp,64
2040520a:	8082                	ret

2040520c <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
2040520c:	7179                	addi	sp,sp,-48
2040520e:	d622                	sw	s0,44(sp)
20405210:	1800                	addi	s0,sp,48
20405212:	fca42e23          	sw	a0,-36(s0)
20405216:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
2040521a:	fd842783          	lw	a5,-40(s0)
2040521e:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20405222:	fdc42783          	lw	a5,-36(s0)
20405226:	e781                	bnez	a5,2040522e <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20405228:	fd842783          	lw	a5,-40(s0)
2040522c:	a035                	j	20405258 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
2040522e:	fdc42783          	lw	a5,-36(s0)
20405232:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20405236:	a031                	j	20405242 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20405238:	fec42783          	lw	a5,-20(s0)
2040523c:	479c                	lw	a5,8(a5)
2040523e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20405242:	fec42783          	lw	a5,-20(s0)
20405246:	479c                	lw	a5,8(a5)
20405248:	fbe5                	bnez	a5,20405238 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
2040524a:	fec42783          	lw	a5,-20(s0)
2040524e:	fd842703          	lw	a4,-40(s0)
20405252:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20405254:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20405258:	853e                	mv	a0,a5
2040525a:	5432                	lw	s0,44(sp)
2040525c:	6145                	addi	sp,sp,48
2040525e:	8082                	ret

20405260 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405260:	1101                	addi	sp,sp,-32
20405262:	ce06                	sw	ra,28(sp)
20405264:	cc22                	sw	s0,24(sp)
20405266:	1000                	addi	s0,sp,32
20405268:	fea42623          	sw	a0,-20(s0)
2040526c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20405270:	fec42783          	lw	a5,-20(s0)
20405274:	43dc                	lw	a5,4(a5)
20405276:	fe842583          	lw	a1,-24(s0)
2040527a:	853e                	mv	a0,a5
2040527c:	3f41                	jal	2040520c <_metal_clock_append_to_callbacks>
2040527e:	872a                	mv	a4,a0
20405280:	fec42783          	lw	a5,-20(s0)
20405284:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20405286:	0001                	nop
20405288:	40f2                	lw	ra,28(sp)
2040528a:	4462                	lw	s0,24(sp)
2040528c:	6105                	addi	sp,sp,32
2040528e:	8082                	ret

20405290 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405290:	1101                	addi	sp,sp,-32
20405292:	ce06                	sw	ra,28(sp)
20405294:	cc22                	sw	s0,24(sp)
20405296:	1000                	addi	s0,sp,32
20405298:	fea42623          	sw	a0,-20(s0)
2040529c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
204052a0:	fec42783          	lw	a5,-20(s0)
204052a4:	479c                	lw	a5,8(a5)
204052a6:	fe842583          	lw	a1,-24(s0)
204052aa:	853e                	mv	a0,a5
204052ac:	3785                	jal	2040520c <_metal_clock_append_to_callbacks>
204052ae:	872a                	mv	a4,a0
204052b0:	fec42783          	lw	a5,-20(s0)
204052b4:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
204052b6:	0001                	nop
204052b8:	40f2                	lw	ra,28(sp)
204052ba:	4462                	lw	s0,24(sp)
204052bc:	6105                	addi	sp,sp,32
204052be:	8082                	ret

204052c0 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
204052c0:	1101                	addi	sp,sp,-32
204052c2:	ce06                	sw	ra,28(sp)
204052c4:	cc22                	sw	s0,24(sp)
204052c6:	1000                	addi	s0,sp,32
204052c8:	fea42623          	sw	a0,-20(s0)
204052cc:	fec42783          	lw	a5,-20(s0)
204052d0:	439c                	lw	a5,0(a5)
204052d2:	57dc                	lw	a5,44(a5)
204052d4:	fec42503          	lw	a0,-20(s0)
204052d8:	9782                	jalr	a5
204052da:	87aa                	mv	a5,a0
204052dc:	853e                	mv	a0,a5
204052de:	40f2                	lw	ra,28(sp)
204052e0:	4462                	lw	s0,24(sp)
204052e2:	6105                	addi	sp,sp,32
204052e4:	8082                	ret

204052e6 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
204052e6:	1101                	addi	sp,sp,-32
204052e8:	ce22                	sw	s0,28(sp)
204052ea:	1000                	addi	s0,sp,32
204052ec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
204052f0:	fec42783          	lw	a5,-20(s0)
204052f4:	eb89                	bnez	a5,20405306 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
204052f6:	fec42703          	lw	a4,-20(s0)
204052fa:	070a                	slli	a4,a4,0x2
204052fc:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20405300:	97ba                	add	a5,a5,a4
20405302:	439c                	lw	a5,0(a5)
20405304:	a011                	j	20405308 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20405306:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20405308:	853e                	mv	a0,a5
2040530a:	4472                	lw	s0,28(sp)
2040530c:	6105                	addi	sp,sp,32
2040530e:	8082                	ret

20405310 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20405310:	1101                	addi	sp,sp,-32
20405312:	ce22                	sw	s0,28(sp)
20405314:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405316:	f14027f3          	csrr	a5,mhartid
2040531a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
2040531e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20405322:	853e                	mv	a0,a5
20405324:	4472                	lw	s0,28(sp)
20405326:	6105                	addi	sp,sp,32
20405328:	8082                	ret

2040532a <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
2040532a:	1101                	addi	sp,sp,-32
2040532c:	ce22                	sw	s0,28(sp)
2040532e:	1000                	addi	s0,sp,32
20405330:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20405334:	0001                	nop
20405336:	bffd                	j	20405334 <metal_shutdown+0xa>
	...

20405380 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405380:	ce8fd06f          	j	20402868 <metal_interrupt_vector_handler>

20405384 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405384:	ce4fd06f          	j	20402868 <metal_interrupt_vector_handler>

20405388 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405388:	ce0fd06f          	j	20402868 <metal_interrupt_vector_handler>

2040538c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040538c:	d0afd06f          	j	20402896 <metal_software_interrupt_vector_handler>

20405390 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405390:	cd8fd06f          	j	20402868 <metal_interrupt_vector_handler>

20405394 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405394:	cd4fd06f          	j	20402868 <metal_interrupt_vector_handler>

20405398 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405398:	cd0fd06f          	j	20402868 <metal_interrupt_vector_handler>

2040539c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040539c:	decfd06f          	j	20402988 <metal_timer_interrupt_vector_handler>

204053a0 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
204053a0:	cc8fd06f          	j	20402868 <metal_interrupt_vector_handler>

204053a4 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
204053a4:	cc4fd06f          	j	20402868 <metal_interrupt_vector_handler>

204053a8 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
204053a8:	cc0fd06f          	j	20402868 <metal_interrupt_vector_handler>

204053ac <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
204053ac:	cbcfd06f          	j	20402868 <metal_interrupt_vector_handler>

204053b0 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
204053b0:	cb8fd06f          	j	20402868 <metal_interrupt_vector_handler>

204053b4 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
204053b4:	cb4fd06f          	j	20402868 <metal_interrupt_vector_handler>

204053b8 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
204053b8:	cb0fd06f          	j	20402868 <metal_interrupt_vector_handler>

204053bc <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
204053bc:	cacfd06f          	j	20402868 <metal_interrupt_vector_handler>

204053c0 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
204053c0:	837fd06f          	j	20402bf6 <metal_lc0_interrupt_vector_handler>

204053c4 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
204053c4:	8c5fd06f          	j	20402c88 <metal_lc1_interrupt_vector_handler>

204053c8 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
204053c8:	953fd06f          	j	20402d1a <metal_lc2_interrupt_vector_handler>

204053cc <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
204053cc:	9e1fd06f          	j	20402dac <metal_lc3_interrupt_vector_handler>

204053d0 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
204053d0:	a6ffd06f          	j	20402e3e <metal_lc4_interrupt_vector_handler>

204053d4 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
204053d4:	afdfd06f          	j	20402ed0 <metal_lc5_interrupt_vector_handler>

204053d8 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
204053d8:	b8bfd06f          	j	20402f62 <metal_lc6_interrupt_vector_handler>

204053dc <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
204053dc:	c19fd06f          	j	20402ff4 <metal_lc7_interrupt_vector_handler>

204053e0 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
204053e0:	ca7fd06f          	j	20403086 <metal_lc8_interrupt_vector_handler>

204053e4 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
204053e4:	d35fd06f          	j	20403118 <metal_lc9_interrupt_vector_handler>

204053e8 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
204053e8:	dc3fd06f          	j	204031aa <metal_lc10_interrupt_vector_handler>

204053ec <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
204053ec:	e51fd06f          	j	2040323c <metal_lc11_interrupt_vector_handler>

204053f0 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
204053f0:	edffd06f          	j	204032ce <metal_lc12_interrupt_vector_handler>

204053f4 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
204053f4:	f6dfd06f          	j	20403360 <metal_lc13_interrupt_vector_handler>

204053f8 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
204053f8:	ffbfd06f          	j	204033f2 <metal_lc14_interrupt_vector_handler>

204053fc <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
204053fc:	888fe06f          	j	20403484 <metal_lc15_interrupt_vector_handler>

20405400 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405400:	1101                	addi	sp,sp,-32
20405402:	ce22                	sw	s0,28(sp)
20405404:	1000                	addi	s0,sp,32
20405406:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040540a:	fec42703          	lw	a4,-20(s0)
2040540e:	800007b7          	lui	a5,0x80000
20405412:	0a078793          	addi	a5,a5,160 # 800000a0 <metal_segment_heap_target_end+0xffffec04>
20405416:	00f71763          	bne	a4,a5,20405424 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040541a:	03dfd7b7          	lui	a5,0x3dfd
2040541e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405422:	a011                	j	20405426 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
20405424:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
20405426:	853e                	mv	a0,a5
20405428:	4472                	lw	s0,28(sp)
2040542a:	6105                	addi	sp,sp,32
2040542c:	8082                	ret

2040542e <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
2040542e:	1101                	addi	sp,sp,-32
20405430:	ce06                	sw	ra,28(sp)
20405432:	cc22                	sw	s0,24(sp)
20405434:	1000                	addi	s0,sp,32
20405436:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2040543a:	fec42503          	lw	a0,-20(s0)
2040543e:	37c9                	jal	20405400 <__metal_driver_fixed_clock_rate>
20405440:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405442:	853e                	mv	a0,a5
20405444:	40f2                	lw	ra,28(sp)
20405446:	4462                	lw	s0,24(sp)
20405448:	6105                	addi	sp,sp,32
2040544a:	8082                	ret

2040544c <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
2040544c:	1101                	addi	sp,sp,-32
2040544e:	ce06                	sw	ra,28(sp)
20405450:	cc22                	sw	s0,24(sp)
20405452:	1000                	addi	s0,sp,32
20405454:	fea42623          	sw	a0,-20(s0)
20405458:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
2040545c:	fec42503          	lw	a0,-20(s0)
20405460:	37f9                	jal	2040542e <__metal_driver_fixed_clock_get_rate_hz>
20405462:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20405464:	853e                	mv	a0,a5
20405466:	40f2                	lw	ra,28(sp)
20405468:	4462                	lw	s0,24(sp)
2040546a:	6105                	addi	sp,sp,32
2040546c:	8082                	ret

2040546e <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
2040546e:	1101                	addi	sp,sp,-32
20405470:	ce06                	sw	ra,28(sp)
20405472:	cc22                	sw	s0,24(sp)
20405474:	1000                	addi	s0,sp,32
20405476:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
2040547a:	fec42503          	lw	a0,-20(s0)
2040547e:	3575                	jal	2040532a <metal_shutdown>
