
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/debug/AsconTest.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/debug/AsconTest.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x0000725c memsz 0x0000725c flags rwx
    LOAD off    0x00008730 vaddr 0x80001730 paddr 0x80001730 align 2**12
         filesz 0x00000000 memsz 0x00002454 flags rw-
    LOAD off    0x00009000 vaddr 0x80000000 paddr 0x20407260 align 2**12
         filesz 0x00001730 memsz 0x00001730 flags rw-
    LOAD off    0x0000a730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x0000a730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             0000019e  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00006a86  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           000005d0  20406c88  20406c88  00007c88  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20407258  20407258  00008258  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00001730  80000000  20407260  00009000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              00001854  80001730  80001730  00008730  2**3  ALLOC
  6 .stack            00000400  80002f84  80002f84  00008730  2**0  ALLOC
  7 .heap             00000800  80003384  80003384  00008730  2**0  ALLOC
  8 .debug_info       00014b92  00000000  00000000  0000a730  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     0000277b  00000000  00000000  0001f2c2  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000908  00000000  00000000  00021a40  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     000007a0  00000000  00000000  00022348  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00009669  00000000  00000000  00022ae8  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        00003822  00000000  00000000  0002c151  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002f973  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002f99b  2**0  CONTENTS, READONLY
 16 .debug_frame      000025ac  00000000  00000000  0002f9c8  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20406c88 l    d  .rodata	00000000 .rodata
20407258 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80001730 l    d  .bss	00000000 .bss
80002f84 l    d  .stack	00000000 .stack
80003384 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
2040013e l       .init	00000000 _skip_init
20406f08 l       .rodata	00000000 argv
20406f0c l       .rodata	00000000 envp
20406f10 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 AsconTest.c
20400502 l     F .text	00000404 ROUND
20400906 l     F .text	0000008e P12
20400994 l     F .text	00000052 P6
80000000 l     O .data	000007d0 asso_text.2803
800007d0 l     O .data	000007d0 plain_text.2802
8000173c l     O .bss	000007e0 cipher_text.2804
80000fa0 l     O .data	00000010 Key.2809
80000fb0 l     O .data	00000010 Nonce.2806
80001f1c l     O .bss	00000028 hash.2808
80001f44 l     O .bss	000007d0 rand_arr.2805
80002714 l     O .bss	000007e0 dec_text.2807
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
204023d8 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20402928 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80001710 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80002ef4 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20403646 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
204036f0 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20403716 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
2040373a l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20403776 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
204038d6 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20403e16 l     F .text	00000024 __metal_driver_cpu_hartid
20403e3a l     F .text	0000002a __metal_driver_cpu_timebase
20403e64 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
2040569a l     F .text	0000002a __metal_driver_sifive_plic0_control_base
204056c4 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
204056ec l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20405714 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
2040573c l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20405ca0 l     F .text	00000026 __metal_driver_sifive_gpio0_base
20405cc6 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20405cf0 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
2040655a l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20406584 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
204065b2 l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
204065da l     F .text	0000002e __metal_driver_sifive_uart0_clock
20406608 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20406632 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
2040665c l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20406856 l     F .text	000000d8 pre_rate_change_callback_func
2040692e l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20406b80 l       .text	00000000 IRQ_0
20406b84 l       .text	00000000 IRQ_1
20406b88 l       .text	00000000 IRQ_2
20406b8c l       .text	00000000 IRQ_3
20406b90 l       .text	00000000 IRQ_4
20406b94 l       .text	00000000 IRQ_5
20406b98 l       .text	00000000 IRQ_6
20406b9c l       .text	00000000 IRQ_7
20406ba0 l       .text	00000000 IRQ_8
20406ba4 l       .text	00000000 IRQ_9
20406ba8 l       .text	00000000 IRQ_10
20406bac l       .text	00000000 IRQ_11
20406bb0 l       .text	00000000 IRQ_12
20406bb4 l       .text	00000000 IRQ_13
20406bb8 l       .text	00000000 IRQ_14
20406bbc l       .text	00000000 IRQ_15
20406bc0 l       .text	00000000 IRQ_LC0
20406bc4 l       .text	00000000 IRQ_LC1
20406bc8 l       .text	00000000 IRQ_LC2
20406bcc l       .text	00000000 IRQ_LC3
20406bd0 l       .text	00000000 IRQ_LC4
20406bd4 l       .text	00000000 IRQ_LC5
20406bd8 l       .text	00000000 IRQ_LC6
20406bdc l       .text	00000000 IRQ_LC7
20406be0 l       .text	00000000 IRQ_LC8
20406be4 l       .text	00000000 IRQ_LC9
20406be8 l       .text	00000000 IRQ_LC10
20406bec l       .text	00000000 IRQ_LC11
20406bf0 l       .text	00000000 IRQ_LC12
20406bf4 l       .text	00000000 IRQ_LC13
20406bf8 l       .text	00000000 IRQ_LC14
20406bfc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20406c00 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000fc0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
2040725c l       .init_array	00000000 __fini_array_end
2040725c l       .init_array	00000000 __fini_array_start
2040725c l       .init_array	00000000 __init_array_end
20407258 l       .init_array	00000000 __preinit_array_end
20407258 l       .init_array	00000000 __init_array_start
20407258 l       .init_array	00000000 __preinit_array_start
20401ec4 g     F .text	0000002c putchar
20407238 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
20402dae g     F .text	00000030 _isatty_r
2040463e  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20401f72 g     F .text	000000da _puts_r
204009e6 g     F .text	0000007a printstate
20402dde g     F .text	00000034 _lseek_r
204067b6 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
20403ab2 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
204045ac  w    F .text	00000092 metal_lc3_interrupt_vector_handler
204018d4 g     F .text	0000001e rdcycle
20404dfe g     F .text	00000038 __metal_valid_interrupt_id
20401e80 g     F .text	00000044 printf
20405228 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80001f08 g       .data	00000000 __global_pointer$
20406a30 g     F .text	00000054 _metal_clock_append_to_callbacks
2040578e g     F .text	0000003a __metal_plic0_complete_interrupt
20405080 g     F .text	00000150 __metal_driver_riscv_cpu_controller_interrupt_register
20402cdc g     F .text	00000036 __sseek
2040248e g     F .text	0000006a __sinit
2040205a g     F .text	000000c0 __swbuf_r
2040244a g     F .text	00000044 __sfmoreglue
20402e2e g     F .text	00000002 __malloc_unlock
20406b0e g     F .text	0000002a metal_cpu_get
800016e8 g     O .data	00000020 __metal_dt_serial_10013000
20406134 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20406f1c g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80002f84 g       .bss	00000000 metal_segment_bss_target_end
204037a6 g     F .text	0000009a __metal_clint0_mtime_get
2040562e g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20405ee4 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
204033c6 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
204066ca g     F .text	00000034 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80001730 g       .bss	00000000 metal_segment_bss_target_start
20403840 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20402d7c g     F .text	00000032 _fstat_r
20406384 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80002f80 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20406a84 g     F .text	00000032 metal_clock_register_pre_rate_change_callback
20404918  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20407170 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20407130 g     O .rodata	00000040 __metal_driver_vtable_cpu
204036c2 g     F .text	0000002e metal_uart_set_baud_rate
2040695e g     F .text	000000d2 __metal_driver_sifive_uart0_init
204004e2 g     F .text	00000020 SEED
204052bc g     F .text	00000072 __metal_driver_cpu_mcycle_get
80003384 g       .heap	00000000 metal_segment_heap_target_start
20402440 g     F .text	0000000a _cleanup_r
80001720 g     O .data	00000004 __metal_dt_cpu_0
20404886  w    F .text	00000092 metal_lc8_interrupt_vector_handler
2040204c g     F .text	0000000e puts
20404b60  w    F .text	00000092 metal_lc13_interrupt_vector_handler
20403ff8 g     F .text	00000018 __metal_default_exception_handler
20403236 g     F .text	00000026 _fstat
20401010 g     F .text	0000066e crypto_aead_decrypt
20403de2 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20405830 g     F .text	00000066 __metal_plic0_set_priority
20405244 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20403e8e g     F .text	0000002c __metal_driver_cpu_get
204070e4 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
2040049c g     F .text	00000046 RAND
20403eec g     F .text	00000018 __metal_interrupt_global_disable
204047f4  w    F .text	00000092 metal_lc7_interrupt_vector_handler
204049aa  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20402c2e g     F .text	00000030 _sbrk_r
20405c58 g     F .text	00000048 __metal_driver_riscv_plic0_disable
20404ef2 g     F .text	0000004e __metal_exception_register
204031e0 g     F .text	00000034 _read_r
20405450 g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20405fc6 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
204040e4 g     F .text	00000066 __metal_default_sw_handler
20406ab6 g     F .text	00000032 metal_clock_register_post_rate_change_callback
20406686 g     F .text	00000020 __metal_driver_sifive_uart0_interrupt_controller
2040325c g     F .text	00000020 _isatty
2040608c g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80001728 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000170c g     O .data	00000004 _global_impure_ptr
2040414a  w    F .text	00000092 metal_timer_interrupt_vector_handler
20403436 g     F .text	0000006a __libc_init_array
20406006 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
20404a3c  w    F .text	00000092 metal_lc11_interrupt_vector_handler
204051d0 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
204032d0 g     F .text	0000007e _sbrk
20405f80 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
2040017c g     F .init	00000002 _init
20403f4e g     F .text	0000001a __metal_interrupt_timer_disable
2040617e g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20405506 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
204071fc g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
204060cc g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
204033fe g     F .text	00000038 __libc_fini_array
2040650c g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20405490 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20403fa0 g     F .text	0000002c __metal_interrupt_local_enable
20403dae g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
204035f4 g     F .text	0000002c metal_tty_putc
2040595a g     F .text	00000018 __metal_plic0_default_handler
20401ef0 g     F .text	00000082 _putc_r
80001020 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20406e6c g     O .rodata	00000020 __sf_fake_stderr
20403f84 g     F .text	0000001c __metal_interrupt_external_disable
204066a6 g     F .text	00000024 __metal_driver_sifive_uart0_get_interrupt_id
204052a0 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
20404f40 g     F .text	00000140 __metal_driver_riscv_cpu_controller_interrupt_init
20402952 g     F .text	00000042 __sfputs_r
204055e8 g     F .text	00000046 __metal_driver_cpu_exception_register
20403f04 g     F .text	00000018 __metal_interrupt_software_enable
20404488  w    F .text	00000092 metal_lc1_interrupt_vector_handler
20402e12 g     F .text	0000001a memchr
2040279e g     F .text	000000ac _free_r
80001738 g     O .bss	00000004 _global_atexit
20400a60 g     F .text	000005b0 crypto_aead_encrypt
20404d16 g     F .text	00000050 __metal_controller_interrupt_vector_mode
2040352c g     F .text	000000c8 __call_exitprocs
80003384 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
2040327c g     F .text	0000002a _lseek
204055c8 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
2040565c g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20403f68 g     F .text	0000001c __metal_interrupt_external_enable
204034a0 g     F .text	0000008c __register_exitproc
204066fe g     F .text	00000042 __metal_driver_sifive_uart0_putc
20405a06 g     F .text	00000148 __metal_driver_riscv_plic0_init
20405c10 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20405f54 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20400200 g     F .text	000000be printC
20404762  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20403eba g     F .text	0000001a __metal_myhart_id
2040652c g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20400450 g     F .text	0000004c HASH
20404056  w    F .text	0000008e metal_software_interrupt_vector_handler
204051fc g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20402d4c g     F .text	00000030 _close_r
20406796 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
2040167e g     F .text	00000256 crypto_hash
20403994 g     F .text	000000da __metal_driver_riscv_clint0_register
80001718 g     O .data	00000008 __metal_dt_clint_2000000
2040211a g     F .text	00000110 __swsetup_r
204024f8 g     F .text	0000009e __sfp
20402c5e g     F .text	00000030 __sread
20405ea4 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
2040017e  w    F .init	00000000 secondary_main
20404028  w    F .text	0000002e metal_interrupt_vector_handler
20402e2c g     F .text	00000002 __malloc_lock
20402374 g     F .text	00000064 _fflush_r
20405802 g     F .text	0000002e __metal_plic0_get_threshold
20406e8c g     O .rodata	00000020 __sf_fake_stdin
20404e36 g     F .text	000000bc __metal_local_interrupt_enable
20403c78 g     F .text	00000136 __metal_driver_riscv_clint0_command_request
204026f6 g     F .text	000000a8 memset
204046d0  w    F .text	00000092 metal_lc5_interrupt_vector_handler
204018f2 g     F .text	0000058e main
80001730 g       .data	00000000 metal_segment_data_target_end
204054a4 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20405568 g     F .text	00000060 __metal_driver_cpu_get_msip
20406b52 g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
2040567a g     F .text	00000020 __metal_driver_cpu_set_exception_pc
2040575e g     F .text	00000030 __metal_plic0_claim_interrupt
20402d12 g     F .text	00000006 __sclose
20404ace  w    F .text	00000092 metal_lc12_interrupt_vector_handler
2040284a g     F .text	000000de _malloc_r
20403a96 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
2040532e g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20406b38 g     F .text	0000001a metal_cpu_get_current_hartid
2040037a g     F .text	000000d6 AEAD_DEC
20406b80 g       .text	00000000 __metal_vector_table
20407260 g       *ABS*	00000000 metal_segment_itim_source_start
80001714  w    O .data	00000004 __metal_cpu_table
80001030 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
2040017c g     F .init	00000002 _fini
20401e80 g     F .text	00000044 iprintf
20403ed4 g     F .text	00000018 __metal_interrupt_global_enable
204033bc g     F .text	0000000a atexit
20403620 g     F .text	00000026 metal_tty_putc_raw
20402d18 g     F .text	00000034 _write_r
20403f34 g     F .text	0000001a __metal_interrupt_timer_enable
20406740 g     F .text	00000056 __metal_driver_sifive_uart0_getc
20403bbe g     F .text	000000ba __metal_driver_riscv_clint0_disable
20402e30 g     F .text	0000010c _printf_common
80001708 g     O .data	00000004 _impure_ptr
204053da g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
2040222a g     F .text	0000014a __sflush_r
20406c2e g     F .text	00000020 __metal_driver_fixed_clock_get_rate_hz
20403b06 g     F .text	000000b8 __metal_driver_riscv_clint0_enable
20407260 g       *ABS*	00000000 metal_segment_data_source_start
80003b84 g       .heap	00000000 metal_segment_heap_target_end
20404d66 g     F .text	00000098 __metal_controller_interrupt_vector
800013e8 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20402602 g     F .text	00000058 __swhatbuf_r
20406046 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
204041dc g     F .text	0000006a __metal_default_timer_handler
2040334e g     F .text	0000006e _write
20405972 g     F .text	00000094 __metal_plic0_handler
2040451a  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20404c84  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20406ae8 g     F .text	00000026 metal_cpu_interrupt_controller
20402c8e g     F .text	0000004e __swrite
204033d2 g     F .text	0000002c exit
20402994 g     F .text	0000029a _vfiprintf_r
20402596 g     F .text	0000006c _fwalk_reent
20406c4e g     F .text	00000024 __metal_driver_fixed_clock_set_rate_hz
20406eac g     O .rodata	00000020 __sf_fake_stdout
80001724 g     O .data	00000004 __metal_dt_gpio_10012000
20404010 g     F .text	00000018 __metal_default_interrupt_handler
20403694 g     F .text	0000002e metal_uart_putc
204032a6 g     F .text	0000002a _read
20405f2a g     F .text	0000002a __metal_driver_sifive_gpio0_input
20404280 g     F .text	00000150 __metal_exception_handler
204043f6  w    F .text	00000092 metal_lc0_interrupt_vector_handler
20406c72 g     F .text	00000014 _exit
20405374 g     F .text	00000066 __metal_driver_cpu_mtime_get
2040265a g     F .text	0000009c __smakebuf_r
20403a6e g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20402f3c g     F .text	000002a4 _printf_i
80001734 g     O .bss	00000004 __malloc_sbrk_start
20404bf2  w    F .text	00000092 metal_lc14_interrupt_vector_handler
2040390c g     F .text	00000088 __metal_driver_riscv_clint0_init
80001730 g     O .bss	00000004 __malloc_free_list
204002be g     F .text	000000bc AEAD_ENC
20402994 g     F .text	0000029a _vfprintf_r
20405466 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
204058cc g     F .text	0000008e __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
2040547a g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20403fcc g     F .text	0000002c __metal_interrupt_local_disable
20403f1c g     F .text	00000018 __metal_interrupt_software_disable
20405896 g     F .text	00000036 __metal_plic0_get_priority
20403668 g     F .text	0000002c metal_uart_init
204057c8 g     F .text	0000003a __metal_plic0_set_threshold
20403214 g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20405b4e g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc02197          	auipc	gp,0x5fc02
20400004:	f0818193          	addi	gp,gp,-248 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc02197          	auipc	gp,0x5fc02
20400084:	e8818193          	addi	gp,gp,-376 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	5fc03117          	auipc	sp,0x5fc03
2040008c:	2fc10113          	addi	sp,sp,764 # 80003384 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
20400090:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
20400092:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400096:	00a28563          	beq	t0,a0,204000a0 <_start+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
2040009a:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
2040009c:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009e:	bfe5                	j	20400096 <_start+0x18>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
204000a0:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a4:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a8:	08551b63          	bne	a0,t0,2040013e <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000ac:	00007297          	auipc	t0,0x7
204000b0:	1b428293          	addi	t0,t0,436 # 20407260 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b4:	5fc00317          	auipc	t1,0x5fc00
204000b8:	f4c30313          	addi	t1,t1,-180 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000bc:	82818393          	addi	t2,gp,-2008 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000c0:	00628c63          	beq	t0,t1,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c4:	00735a63          	bge	t1,t2,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000cc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ce:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000d2:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d4:	fe734ae3          	blt	t1,t2,204000c8 <_start+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d8:	00007297          	auipc	t0,0x7
204000dc:	18828293          	addi	t0,t0,392 # 20407260 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000e0:	e7c00317          	auipc	t1,0xe7c00
204000e4:	f2030313          	addi	t1,t1,-224 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e8:	e7c00397          	auipc	t2,0xe7c00
204000ec:	f1838393          	addi	t2,t2,-232 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000f0:	00628c63          	beq	t0,t1,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f4:	00735a63          	bge	t1,t2,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000fc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fe:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
20400102:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400104:	fe734ae3          	blt	t1,t2,204000f8 <_start+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400108:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
2040010c:	5fc01317          	auipc	t1,0x5fc01
20400110:	62430313          	addi	t1,t1,1572 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400114:	5fc03397          	auipc	t2,0x5fc03
20400118:	e7038393          	addi	t2,t2,-400 # 80002f84 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
2040011c:	00735763          	bge	t1,t2,2040012a <_start+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400120:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
20400124:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
20400126:	fe734de3          	blt	t1,t2,20400120 <_start+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2040012a:	c211                	beqz	a2,2040012e <_start+0xb0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
2040012c:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
2040012e:	00003517          	auipc	a0,0x3
20400132:	2d050513          	addi	a0,a0,720 # 204033fe <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
20400136:	286030ef          	jal	ra,204033bc <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
2040013a:	2fc030ef          	jal	ra,20403436 <__libc_init_array>

2040013e <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
2040013e:	3f0d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400140:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
20400144:	00010737          	lui	a4,0x10
20400148:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
2040014c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
2040014e:	cb89                	beqz	a5,20400160 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400150:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
20400154:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
20400156:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400158:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
2040015c:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400160:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
20400162:	00007597          	auipc	a1,0x7
20400166:	da658593          	addi	a1,a1,-602 # 20406f08 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
2040016a:	00007617          	auipc	a2,0x7
2040016e:	da260613          	addi	a2,a2,-606 # 20406f0c <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
20400172:	2031                	jal	2040017e <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
20400174:	25e030ef          	jal	ra,204033d2 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400178:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
2040017a:	8082                	ret

2040017c <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
2040017c:	8082                	ret

2040017e <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
2040017e:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400180:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
20400182:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
20400186:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
2040018a:	00628563          	beq	t0,t1,20400194 <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
2040018e:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
20400192:	bff5                	j	2040018e <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
20400194:	75e010ef          	jal	ra,204018f2 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400198:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
2040019a:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
2040019c:	8082                	ret

Disassembly of section .text:

20400200 <printC>:
printC():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:45

u32 RAND(u32 *return_addr, u32 num_rands);

u32 SEED();

void printC(u32 *arr, u32 a_len, int cipher, int del) {
20400200:	7179                	addi	sp,sp,-48
20400202:	d606                	sw	ra,44(sp)
20400204:	d422                	sw	s0,40(sp)
20400206:	1800                	addi	s0,sp,48
20400208:	fca42e23          	sw	a0,-36(s0)
2040020c:	fcb42c23          	sw	a1,-40(s0)
20400210:	fcc42a23          	sw	a2,-44(s0)
20400214:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:46
    int len = (a_len % 8 == 0) ? (a_len / 4) * 2 : (a_len / 4) * 2 + 2;
20400218:	fd842783          	lw	a5,-40(s0)
2040021c:	8b9d                	andi	a5,a5,7
2040021e:	e791                	bnez	a5,2040022a <printC+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:46 (discriminator 1)
20400220:	fd842783          	lw	a5,-40(s0)
20400224:	8389                	srli	a5,a5,0x2
20400226:	0786                	slli	a5,a5,0x1
20400228:	a031                	j	20400234 <printC+0x34>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:46 (discriminator 2)
2040022a:	fd842783          	lw	a5,-40(s0)
2040022e:	8389                	srli	a5,a5,0x2
20400230:	0785                	addi	a5,a5,1
20400232:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:46 (discriminator 4)
20400234:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:47 (discriminator 4)
    len = (cipher) ? len + 4 : len;
20400238:	fd442783          	lw	a5,-44(s0)
2040023c:	c789                	beqz	a5,20400246 <printC+0x46>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:47 (discriminator 1)
2040023e:	fe842783          	lw	a5,-24(s0)
20400242:	0791                	addi	a5,a5,4
20400244:	a019                	j	2040024a <printC+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:47 (discriminator 2)
20400246:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:47 (discriminator 4)
2040024a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:48 (discriminator 4)
    for (int i = 0; i < len; i++) {
2040024e:	fe042623          	sw	zero,-20(s0)
20400252:	a881                	j	204002a2 <printC+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:49
        if (i % 2 == 0) {
20400254:	fec42783          	lw	a5,-20(s0)
20400258:	8b85                	andi	a5,a5,1
2040025a:	e781                	bnez	a5,20400262 <printC+0x62>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:50
            printf("\n");
2040025c:	4529                	li	a0,10
2040025e:	467010ef          	jal	ra,20401ec4 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:52
        }
        printf("%08x ", arr[i], i);
20400262:	fec42783          	lw	a5,-20(s0)
20400266:	078a                	slli	a5,a5,0x2
20400268:	fdc42703          	lw	a4,-36(s0)
2040026c:	97ba                	add	a5,a5,a4
2040026e:	439c                	lw	a5,0(a5)
20400270:	fec42603          	lw	a2,-20(s0)
20400274:	85be                	mv	a1,a5
20400276:	204077b7          	lui	a5,0x20407
2040027a:	c8878513          	addi	a0,a5,-888 # 20406c88 <_exit+0x16>
2040027e:	403010ef          	jal	ra,20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:53
        if (del) {
20400282:	fd042783          	lw	a5,-48(s0)
20400286:	cb89                	beqz	a5,20400298 <printC+0x98>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:54
            arr[i] = 0;
20400288:	fec42783          	lw	a5,-20(s0)
2040028c:	078a                	slli	a5,a5,0x2
2040028e:	fdc42703          	lw	a4,-36(s0)
20400292:	97ba                	add	a5,a5,a4
20400294:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:48 (discriminator 2)
    for (int i = 0; i < len; i++) {
20400298:	fec42783          	lw	a5,-20(s0)
2040029c:	0785                	addi	a5,a5,1
2040029e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:48 (discriminator 1)
204002a2:	fec42703          	lw	a4,-20(s0)
204002a6:	fe842783          	lw	a5,-24(s0)
204002aa:	faf745e3          	blt	a4,a5,20400254 <printC+0x54>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:57
        }
    }
    printf("\n");
204002ae:	4529                	li	a0,10
204002b0:	415010ef          	jal	ra,20401ec4 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:58
}
204002b4:	0001                	nop
204002b6:	50b2                	lw	ra,44(sp)
204002b8:	5422                	lw	s0,40(sp)
204002ba:	6145                	addi	sp,sp,48
204002bc:	8082                	ret

204002be <AEAD_ENC>:
AEAD_ENC():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:68
}

u32 AEAD_ENC(u32 *ad_addr, u32 ad_len,
             u32 *p_addr, u32 p_len,
             u32 *c_addr, u32 *nonce_addr,
             u32 *key_addr) {
204002be:	7139                	addi	sp,sp,-64
204002c0:	de22                	sw	s0,60(sp)
204002c2:	0080                	addi	s0,sp,64
204002c4:	fca42e23          	sw	a0,-36(s0)
204002c8:	fcb42c23          	sw	a1,-40(s0)
204002cc:	fcc42a23          	sw	a2,-44(s0)
204002d0:	fcd42823          	sw	a3,-48(s0)
204002d4:	fce42623          	sw	a4,-52(s0)
204002d8:	fcf42423          	sw	a5,-56(s0)
204002dc:	fd042223          	sw	a6,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:69
    u32 rd = 0;
204002e0:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:71
    //printf("Init Enc\n");
    asm volatile("fence");
204002e4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:72
    ROCC_INSTRUCTION_DS(0, rd, nonce_addr, Enc_Set_Nonce);
204002e8:	fc842783          	lw	a5,-56(s0)
204002ec:	85be                	mv	a1,a5
204002ee:	2805e50b          	0x2805e50b
204002f2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:73
    asm volatile("fence":: : "memory");
204002f6:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:77
    //printf("Set Nonce finish : %08x \n", rd);


    asm volatile("fence");
204002fa:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:78
    ROCC_INSTRUCTION_DS(0, rd, key_addr, Enc_Set_Key);
204002fe:	fc442783          	lw	a5,-60(s0)
20400302:	85be                	mv	a1,a5
20400304:	2a05e50b          	0x2a05e50b
20400308:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:79
    asm volatile("fence":: : "memory");
2040030c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:82
    //printf("Set Key  finish : %07x \n", rd);

    asm volatile("fence");
20400310:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:83
    ROCC_INSTRUCTION_DSS(0, rd, p_addr, p_len, Enc_Set_P);
20400314:	fd442783          	lw	a5,-44(s0)
20400318:	85be                	mv	a1,a5
2040031a:	fd042603          	lw	a2,-48(s0)
2040031e:	22c5f50b          	0x22c5f50b
20400322:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:84
    asm volatile("fence":: : "memory");
20400326:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:87
    //printf("Set Plain text finish length : %08x \n", rd);

    asm volatile("fence");
2040032a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:88
    ROCC_INSTRUCTION_DSS(0, rd, ad_addr, ad_len, Enc_Set_AD);
2040032e:	fdc42783          	lw	a5,-36(s0)
20400332:	85be                	mv	a1,a5
20400334:	fd842603          	lw	a2,-40(s0)
20400338:	24c5f50b          	0x24c5f50b
2040033c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:89
    asm volatile("fence":: : "memory");
20400340:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:92
    //printf("Set Associated Data finish length: %08x \n", rd);

    asm volatile("fence");
20400344:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:93
    ROCC_INSTRUCTION_DS(0, rd, c_addr, Enc_Set_C_Tag);
20400348:	fcc42783          	lw	a5,-52(s0)
2040034c:	85be                	mv	a1,a5
2040034e:	2605e50b          	0x2605e50b
20400352:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:94
    asm volatile("fence":: : "memory");
20400356:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:97
    //printf("Set Dec addr: %08x \n", rd);

    asm volatile("fence");
2040035a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:98
    ROCC_INSTRUCTION_DS(0, rd, rd, Enc_Init);
2040035e:	fec42583          	lw	a1,-20(s0)
20400362:	2c05e50b          	0x2c05e50b
20400366:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:99
    asm volatile("fence":: : "memory");
2040036a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:101
    //printf("Finish AEAD Dec %08x \n", rd);
    return rd;
2040036e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:102
}
20400372:	853e                	mv	a0,a5
20400374:	5472                	lw	s0,60(sp)
20400376:	6121                	addi	sp,sp,64
20400378:	8082                	ret

2040037a <AEAD_DEC>:
AEAD_DEC():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:107

u32 AEAD_DEC(u32 *ad_addr, u32 ad_len,
             u32 *c_addr, u32 c_len,
             u32 *d_addr, u32 *nonce_addr,
             u32 *key_addr, u32 *tag_addr) {
2040037a:	7139                	addi	sp,sp,-64
2040037c:	de22                	sw	s0,60(sp)
2040037e:	0080                	addi	s0,sp,64
20400380:	fca42e23          	sw	a0,-36(s0)
20400384:	fcb42c23          	sw	a1,-40(s0)
20400388:	fcc42a23          	sw	a2,-44(s0)
2040038c:	fcd42823          	sw	a3,-48(s0)
20400390:	fce42623          	sw	a4,-52(s0)
20400394:	fcf42423          	sw	a5,-56(s0)
20400398:	fd042223          	sw	a6,-60(s0)
2040039c:	fd142023          	sw	a7,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:108
    u32 rd = 0;
204003a0:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:110
    // printf("Init DEC\n");
    asm volatile("fence");
204003a4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:111
    ROCC_INSTRUCTION_DS(0, rd, nonce_addr, Enc_Set_Nonce);
204003a8:	fc842783          	lw	a5,-56(s0)
204003ac:	85be                	mv	a1,a5
204003ae:	2805e50b          	0x2805e50b
204003b2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:112
    asm volatile("fence":: : "memory");
204003b6:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:115
    //printf("Set Nonce finish : %08x \n", rd);

    asm volatile("fence");
204003ba:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:116
    ROCC_INSTRUCTION_DS(0, rd, tag_addr, Dec_Load_Tag);
204003be:	fc042783          	lw	a5,-64(s0)
204003c2:	85be                	mv	a1,a5
204003c4:	2e05e50b          	0x2e05e50b
204003c8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:117
    asm volatile("fence":: : "memory");
204003cc:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:120
    //printf("Load Tag finish : %08x \n", rd);

    asm volatile("fence");
204003d0:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:121
    ROCC_INSTRUCTION_DS(0, rd, key_addr, Enc_Set_Key);
204003d4:	fc442783          	lw	a5,-60(s0)
204003d8:	85be                	mv	a1,a5
204003da:	2a05e50b          	0x2a05e50b
204003de:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:122
    asm volatile("fence":: : "memory");
204003e2:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:125
    //printf("Set Key  finish : %07x \n", rd);

    asm volatile("fence");
204003e6:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:126
    ROCC_INSTRUCTION_DSS(0, rd, c_addr, c_len, Enc_Set_P);
204003ea:	fd442783          	lw	a5,-44(s0)
204003ee:	85be                	mv	a1,a5
204003f0:	fd042603          	lw	a2,-48(s0)
204003f4:	22c5f50b          	0x22c5f50b
204003f8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:127
    asm volatile("fence":: : "memory");
204003fc:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:130
    //printf("Set Plain text finish length : %08x \n", rd);

    asm volatile("fence");
20400400:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:131
    ROCC_INSTRUCTION_DSS(0, rd, ad_addr, ad_len, Enc_Set_AD);
20400404:	fdc42783          	lw	a5,-36(s0)
20400408:	85be                	mv	a1,a5
2040040a:	fd842603          	lw	a2,-40(s0)
2040040e:	24c5f50b          	0x24c5f50b
20400412:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:132
    asm volatile("fence":: : "memory");
20400416:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:135
    //printf("Set Associated Data finish length: %08x \n", rd);

    asm volatile("fence");
2040041a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:136
    ROCC_INSTRUCTION_DS(0, rd, d_addr, Enc_Set_C_Tag);
2040041e:	fcc42783          	lw	a5,-52(s0)
20400422:	85be                	mv	a1,a5
20400424:	2605e50b          	0x2605e50b
20400428:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:137
    asm volatile("fence":: : "memory");
2040042c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:140
    //printf("Set Dec addr: %08x \n", rd);

    asm volatile("fence");
20400430:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:141
    ROCC_INSTRUCTION_DS(0, rd, rd, Dec_Init);
20400434:	fec42583          	lw	a1,-20(s0)
20400438:	3005e50b          	0x3005e50b
2040043c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:142
    asm volatile("fence":: : "memory");
20400440:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:144
    //printf("Finish AEAD Dec %08x \n", rd);
    return rd;
20400444:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:145
}
20400448:	853e                	mv	a0,a5
2040044a:	5472                	lw	s0,60(sp)
2040044c:	6121                	addi	sp,sp,64
2040044e:	8082                	ret

20400450 <HASH>:
HASH():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:148

u32 HASH(u32 *m_addr, u32 m_len,
         u32 *h_addr) {
20400450:	7179                	addi	sp,sp,-48
20400452:	d622                	sw	s0,44(sp)
20400454:	1800                	addi	s0,sp,48
20400456:	fca42e23          	sw	a0,-36(s0)
2040045a:	fcb42c23          	sw	a1,-40(s0)
2040045e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:151
    u32 rd;
    //printf("Init Hash\n");
    asm volatile("fence");
20400462:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:152
    ROCC_INSTRUCTION_DSS(0, rd, m_addr, m_len, Hash_Set_M);
20400466:	fdc42783          	lw	a5,-36(s0)
2040046a:	85be                	mv	a1,a5
2040046c:	fd842603          	lw	a2,-40(s0)
20400470:	62c5f50b          	0x62c5f50b
20400474:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:153
    asm volatile("fence":: : "memory");
20400478:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:156
    //printf("Set M : %08x \n", rd);

    asm volatile("fence");
2040047c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:157
    ROCC_INSTRUCTION_DS(0, rd, h_addr, Hash_Init);
20400480:	fd442783          	lw	a5,-44(s0)
20400484:	85be                	mv	a1,a5
20400486:	6405e50b          	0x6405e50b
2040048a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:158
    asm volatile("fence":: : "memory");
2040048e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:160
    //printf(" Finish Hash: %08x \n", rd);
    return 0;
20400492:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:161
}
20400494:	853e                	mv	a0,a5
20400496:	5432                	lw	s0,44(sp)
20400498:	6145                	addi	sp,sp,48
2040049a:	8082                	ret

2040049c <RAND>:
RAND():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:163

u32 RAND(u32 *return_addr, u32 num_rands) {
2040049c:	7179                	addi	sp,sp,-48
2040049e:	d606                	sw	ra,44(sp)
204004a0:	d422                	sw	s0,40(sp)
204004a2:	1800                	addi	s0,sp,48
204004a4:	fca42e23          	sw	a0,-36(s0)
204004a8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:165
    u32 rd;
    asm volatile("fence");
204004ac:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:166
    ROCC_INSTRUCTION_DSS(0, rd, return_addr, num_rands, R_Rand);
204004b0:	fdc42783          	lw	a5,-36(s0)
204004b4:	85be                	mv	a1,a5
204004b6:	fd842603          	lw	a2,-40(s0)
204004ba:	84c5f50b          	0x84c5f50b
204004be:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:167
    asm volatile("fence":: : "memory");
204004c2:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:168
    printf(" Finish Rand: %08x \n", rd);
204004c6:	fec42583          	lw	a1,-20(s0)
204004ca:	204077b7          	lui	a5,0x20407
204004ce:	c9078513          	addi	a0,a5,-880 # 20406c90 <_exit+0x1e>
204004d2:	1af010ef          	jal	ra,20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:169
    return 0;
204004d6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:170
}
204004d8:	853e                	mv	a0,a5
204004da:	50b2                	lw	ra,44(sp)
204004dc:	5422                	lw	s0,40(sp)
204004de:	6145                	addi	sp,sp,48
204004e0:	8082                	ret

204004e2 <SEED>:
SEED():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:172

u32 SEED() {
204004e2:	1101                	addi	sp,sp,-32
204004e4:	ce22                	sw	s0,28(sp)
204004e6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:174
    u32 rd;
    asm volatile("fence");
204004e8:	0ff0000f          	fence
204004ec:	8200450b          	0x8200450b
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:175
    ROCC_INSTRUCTION_D(0, rd, R_Seed);
204004f0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:176
    asm volatile("fence":: : "memory");
204004f4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:177
    return 0;
204004f8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../AsconHW/AEAD_HW.h:178
}
204004fa:	853e                	mv	a0,a5
204004fc:	4472                	lw	s0,28(sp)
204004fe:	6105                	addi	sp,sp,32
20400500:	8082                	ret

20400502 <ROUND>:
ROUND():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:47
    }
    return res;

}

static inline void ROUND(ascon_state_t *s, u32 C) {
20400502:	711d                	addi	sp,sp,-96
20400504:	cea2                	sw	s0,92(sp)
20400506:	1080                	addi	s0,sp,96
20400508:	faa42623          	sw	a0,-84(s0)
2040050c:	fab42423          	sw	a1,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:50
    ascon_state_t t;
    // addition of round constant
    s->xl[2] ^=C;
20400510:	fac42783          	lw	a5,-84(s0)
20400514:	4fd8                	lw	a4,28(a5)
20400516:	fa842783          	lw	a5,-88(s0)
2040051a:	8f3d                	xor	a4,a4,a5
2040051c:	fac42783          	lw	a5,-84(s0)
20400520:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:54
    // printstate(" round constant", s);
    // substitution layer

    s->xh[0] ^= s->xh[4];
20400522:	fac42783          	lw	a5,-84(s0)
20400526:	4398                	lw	a4,0(a5)
20400528:	fac42783          	lw	a5,-84(s0)
2040052c:	4b9c                	lw	a5,16(a5)
2040052e:	8f3d                	xor	a4,a4,a5
20400530:	fac42783          	lw	a5,-84(s0)
20400534:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:55
    s->xl[0] ^= s->xl[4];
20400536:	fac42783          	lw	a5,-84(s0)
2040053a:	4bd8                	lw	a4,20(a5)
2040053c:	fac42783          	lw	a5,-84(s0)
20400540:	53dc                	lw	a5,36(a5)
20400542:	8f3d                	xor	a4,a4,a5
20400544:	fac42783          	lw	a5,-84(s0)
20400548:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:57

    s->xh[4] ^= s->xh[3];
2040054a:	fac42783          	lw	a5,-84(s0)
2040054e:	4b98                	lw	a4,16(a5)
20400550:	fac42783          	lw	a5,-84(s0)
20400554:	47dc                	lw	a5,12(a5)
20400556:	8f3d                	xor	a4,a4,a5
20400558:	fac42783          	lw	a5,-84(s0)
2040055c:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:58
    s->xl[4] ^= s->xl[3];
2040055e:	fac42783          	lw	a5,-84(s0)
20400562:	53d8                	lw	a4,36(a5)
20400564:	fac42783          	lw	a5,-84(s0)
20400568:	539c                	lw	a5,32(a5)
2040056a:	8f3d                	xor	a4,a4,a5
2040056c:	fac42783          	lw	a5,-84(s0)
20400570:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:60

    s->xh[2] ^= s->xh[1];
20400572:	fac42783          	lw	a5,-84(s0)
20400576:	4798                	lw	a4,8(a5)
20400578:	fac42783          	lw	a5,-84(s0)
2040057c:	43dc                	lw	a5,4(a5)
2040057e:	8f3d                	xor	a4,a4,a5
20400580:	fac42783          	lw	a5,-84(s0)
20400584:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:61
    s->xl[2] ^= s->xl[1];
20400586:	fac42783          	lw	a5,-84(s0)
2040058a:	4fd8                	lw	a4,28(a5)
2040058c:	fac42783          	lw	a5,-84(s0)
20400590:	4f9c                	lw	a5,24(a5)
20400592:	8f3d                	xor	a4,a4,a5
20400594:	fac42783          	lw	a5,-84(s0)
20400598:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:63
    // start of keccak s-box
    t.xh[0] = s->xh[0] ^ (~s->xh[1] & s->xh[2]);
2040059a:	fac42783          	lw	a5,-84(s0)
2040059e:	4398                	lw	a4,0(a5)
204005a0:	fac42783          	lw	a5,-84(s0)
204005a4:	43dc                	lw	a5,4(a5)
204005a6:	fff7c693          	not	a3,a5
204005aa:	fac42783          	lw	a5,-84(s0)
204005ae:	479c                	lw	a5,8(a5)
204005b0:	8ff5                	and	a5,a5,a3
204005b2:	8fb9                	xor	a5,a5,a4
204005b4:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:64
    t.xl[0] = s->xl[0] ^ (~s->xl[1] & s->xl[2]);
204005b8:	fac42783          	lw	a5,-84(s0)
204005bc:	4bd8                	lw	a4,20(a5)
204005be:	fac42783          	lw	a5,-84(s0)
204005c2:	4f9c                	lw	a5,24(a5)
204005c4:	fff7c693          	not	a3,a5
204005c8:	fac42783          	lw	a5,-84(s0)
204005cc:	4fdc                	lw	a5,28(a5)
204005ce:	8ff5                	and	a5,a5,a3
204005d0:	8fb9                	xor	a5,a5,a4
204005d2:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:66

    t.xh[1] = s->xh[1] ^ (~s->xh[2] & s->xh[3]);
204005d6:	fac42783          	lw	a5,-84(s0)
204005da:	43d8                	lw	a4,4(a5)
204005dc:	fac42783          	lw	a5,-84(s0)
204005e0:	479c                	lw	a5,8(a5)
204005e2:	fff7c693          	not	a3,a5
204005e6:	fac42783          	lw	a5,-84(s0)
204005ea:	47dc                	lw	a5,12(a5)
204005ec:	8ff5                	and	a5,a5,a3
204005ee:	8fb9                	xor	a5,a5,a4
204005f0:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:67
    t.xl[1] = s->xl[1] ^ (~s->xl[2] & s->xl[3]);
204005f4:	fac42783          	lw	a5,-84(s0)
204005f8:	4f98                	lw	a4,24(a5)
204005fa:	fac42783          	lw	a5,-84(s0)
204005fe:	4fdc                	lw	a5,28(a5)
20400600:	fff7c693          	not	a3,a5
20400604:	fac42783          	lw	a5,-84(s0)
20400608:	539c                	lw	a5,32(a5)
2040060a:	8ff5                	and	a5,a5,a3
2040060c:	8fb9                	xor	a5,a5,a4
2040060e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:69

    t.xh[2] = s->xh[2] ^ (~s->xh[3] & s->xh[4]);
20400612:	fac42783          	lw	a5,-84(s0)
20400616:	4798                	lw	a4,8(a5)
20400618:	fac42783          	lw	a5,-84(s0)
2040061c:	47dc                	lw	a5,12(a5)
2040061e:	fff7c693          	not	a3,a5
20400622:	fac42783          	lw	a5,-84(s0)
20400626:	4b9c                	lw	a5,16(a5)
20400628:	8ff5                	and	a5,a5,a3
2040062a:	8fb9                	xor	a5,a5,a4
2040062c:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:70
    t.xl[2] = s->xl[2] ^ (~s->xl[3] & s->xl[4]);
20400630:	fac42783          	lw	a5,-84(s0)
20400634:	4fd8                	lw	a4,28(a5)
20400636:	fac42783          	lw	a5,-84(s0)
2040063a:	539c                	lw	a5,32(a5)
2040063c:	fff7c693          	not	a3,a5
20400640:	fac42783          	lw	a5,-84(s0)
20400644:	53dc                	lw	a5,36(a5)
20400646:	8ff5                	and	a5,a5,a3
20400648:	8fb9                	xor	a5,a5,a4
2040064a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:72

    t.xh[3] = s->xh[3] ^ (~s->xh[4] & s->xh[0]);
2040064e:	fac42783          	lw	a5,-84(s0)
20400652:	47d8                	lw	a4,12(a5)
20400654:	fac42783          	lw	a5,-84(s0)
20400658:	4b9c                	lw	a5,16(a5)
2040065a:	fff7c693          	not	a3,a5
2040065e:	fac42783          	lw	a5,-84(s0)
20400662:	439c                	lw	a5,0(a5)
20400664:	8ff5                	and	a5,a5,a3
20400666:	8fb9                	xor	a5,a5,a4
20400668:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:73
    t.xl[3] = s->xl[3] ^ (~s->xl[4] & s->xl[0]);
2040066c:	fac42783          	lw	a5,-84(s0)
20400670:	5398                	lw	a4,32(a5)
20400672:	fac42783          	lw	a5,-84(s0)
20400676:	53dc                	lw	a5,36(a5)
20400678:	fff7c693          	not	a3,a5
2040067c:	fac42783          	lw	a5,-84(s0)
20400680:	4bdc                	lw	a5,20(a5)
20400682:	8ff5                	and	a5,a5,a3
20400684:	8fb9                	xor	a5,a5,a4
20400686:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:75

    t.xh[4] = s->xh[4] ^ (~s->xh[0] & s->xh[1]);
2040068a:	fac42783          	lw	a5,-84(s0)
2040068e:	4b98                	lw	a4,16(a5)
20400690:	fac42783          	lw	a5,-84(s0)
20400694:	439c                	lw	a5,0(a5)
20400696:	fff7c693          	not	a3,a5
2040069a:	fac42783          	lw	a5,-84(s0)
2040069e:	43dc                	lw	a5,4(a5)
204006a0:	8ff5                	and	a5,a5,a3
204006a2:	8fb9                	xor	a5,a5,a4
204006a4:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:76
    t.xl[4] = s->xl[4] ^ (~s->xl[0] & s->xl[1]);
204006a8:	fac42783          	lw	a5,-84(s0)
204006ac:	53d8                	lw	a4,36(a5)
204006ae:	fac42783          	lw	a5,-84(s0)
204006b2:	4bdc                	lw	a5,20(a5)
204006b4:	fff7c693          	not	a3,a5
204006b8:	fac42783          	lw	a5,-84(s0)
204006bc:	4f9c                	lw	a5,24(a5)
204006be:	8ff5                	and	a5,a5,a3
204006c0:	8fb9                	xor	a5,a5,a4
204006c2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:78
    // end of keccak s-box
    t.xh[1] ^= t.xh[0];
204006c6:	fcc42703          	lw	a4,-52(s0)
204006ca:	fc842783          	lw	a5,-56(s0)
204006ce:	8fb9                	xor	a5,a5,a4
204006d0:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:79
    t.xh[0] ^= t.xh[4];
204006d4:	fc842703          	lw	a4,-56(s0)
204006d8:	fd842783          	lw	a5,-40(s0)
204006dc:	8fb9                	xor	a5,a5,a4
204006de:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:80
    t.xh[3] ^= t.xh[2];
204006e2:	fd442703          	lw	a4,-44(s0)
204006e6:	fd042783          	lw	a5,-48(s0)
204006ea:	8fb9                	xor	a5,a5,a4
204006ec:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:81
    t.xh[2] = ~t.xh[2];
204006f0:	fd042783          	lw	a5,-48(s0)
204006f4:	fff7c793          	not	a5,a5
204006f8:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:82
    t.xl[1] ^= t.xl[0];
204006fc:	fe042703          	lw	a4,-32(s0)
20400700:	fdc42783          	lw	a5,-36(s0)
20400704:	8fb9                	xor	a5,a5,a4
20400706:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:83
    t.xl[0] ^= t.xl[4];
2040070a:	fdc42703          	lw	a4,-36(s0)
2040070e:	fec42783          	lw	a5,-20(s0)
20400712:	8fb9                	xor	a5,a5,a4
20400714:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:84
    t.xl[3] ^= t.xl[2];
20400718:	fe842703          	lw	a4,-24(s0)
2040071c:	fe442783          	lw	a5,-28(s0)
20400720:	8fb9                	xor	a5,a5,a4
20400722:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:85
    t.xl[2] = ~t.xl[2];
20400726:	fe442783          	lw	a5,-28(s0)
2040072a:	fff7c793          	not	a5,a5
2040072e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:91
    // printstate(" substitution layer", &t);
    u64  ror1;
    u64  ror2;
    //linear diffusion layer

    s->xh[0] = t.xh[0] ^ RORH(19,t.xh[0],t.xl[0]) ^ RORH(28,t.xh[0], t.xl[0]);
20400732:	fc842703          	lw	a4,-56(s0)
20400736:	fdc42783          	lw	a5,-36(s0)
2040073a:	00d79693          	slli	a3,a5,0xd
2040073e:	fc842783          	lw	a5,-56(s0)
20400742:	83cd                	srli	a5,a5,0x13
20400744:	8fd5                	or	a5,a5,a3
20400746:	8f3d                	xor	a4,a4,a5
20400748:	fdc42783          	lw	a5,-36(s0)
2040074c:	00479693          	slli	a3,a5,0x4
20400750:	fc842783          	lw	a5,-56(s0)
20400754:	83f1                	srli	a5,a5,0x1c
20400756:	8fd5                	or	a5,a5,a3
20400758:	8f3d                	xor	a4,a4,a5
2040075a:	fac42783          	lw	a5,-84(s0)
2040075e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:92
    s->xl[0] = t.xl[0] ^ RORL(19,t.xh[0],t.xl[0]) ^ RORL(28,t.xh[0], t.xl[0]);
20400760:	fdc42703          	lw	a4,-36(s0)
20400764:	fc842783          	lw	a5,-56(s0)
20400768:	00d79693          	slli	a3,a5,0xd
2040076c:	fdc42783          	lw	a5,-36(s0)
20400770:	83cd                	srli	a5,a5,0x13
20400772:	8fd5                	or	a5,a5,a3
20400774:	8f3d                	xor	a4,a4,a5
20400776:	fc842783          	lw	a5,-56(s0)
2040077a:	00479693          	slli	a3,a5,0x4
2040077e:	fdc42783          	lw	a5,-36(s0)
20400782:	83f1                	srli	a5,a5,0x1c
20400784:	8fd5                	or	a5,a5,a3
20400786:	8f3d                	xor	a4,a4,a5
20400788:	fac42783          	lw	a5,-84(s0)
2040078c:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:94

    s->xh[1] = t.xh[1] ^ RORH(61,t.xh[1],t.xl[1]) ^ RORH(39,t.xh[1], t.xl[1]);
2040078e:	fcc42703          	lw	a4,-52(s0)
20400792:	fcc42783          	lw	a5,-52(s0)
20400796:	00379693          	slli	a3,a5,0x3
2040079a:	fe042783          	lw	a5,-32(s0)
2040079e:	83f5                	srli	a5,a5,0x1d
204007a0:	8fd5                	or	a5,a5,a3
204007a2:	8f3d                	xor	a4,a4,a5
204007a4:	fcc42783          	lw	a5,-52(s0)
204007a8:	01979693          	slli	a3,a5,0x19
204007ac:	fe042783          	lw	a5,-32(s0)
204007b0:	839d                	srli	a5,a5,0x7
204007b2:	8fd5                	or	a5,a5,a3
204007b4:	8f3d                	xor	a4,a4,a5
204007b6:	fac42783          	lw	a5,-84(s0)
204007ba:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:95
    s->xl[1] = t.xl[1] ^ RORL(61,t.xh[1],t.xl[1]) ^ RORL(39,t.xh[1], t.xl[1]);
204007bc:	fe042703          	lw	a4,-32(s0)
204007c0:	fe042783          	lw	a5,-32(s0)
204007c4:	00379693          	slli	a3,a5,0x3
204007c8:	fcc42783          	lw	a5,-52(s0)
204007cc:	83f5                	srli	a5,a5,0x1d
204007ce:	8fd5                	or	a5,a5,a3
204007d0:	8f3d                	xor	a4,a4,a5
204007d2:	fe042783          	lw	a5,-32(s0)
204007d6:	01979693          	slli	a3,a5,0x19
204007da:	fcc42783          	lw	a5,-52(s0)
204007de:	839d                	srli	a5,a5,0x7
204007e0:	8fd5                	or	a5,a5,a3
204007e2:	8f3d                	xor	a4,a4,a5
204007e4:	fac42783          	lw	a5,-84(s0)
204007e8:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:97

    s->xh[2] = t.xh[2] ^ RORH(1,t.xh[2],t.xl[2]) ^ RORH(6,t.xh[2], t.xl[2]);
204007ea:	fd042703          	lw	a4,-48(s0)
204007ee:	fe442783          	lw	a5,-28(s0)
204007f2:	01f79693          	slli	a3,a5,0x1f
204007f6:	fd042783          	lw	a5,-48(s0)
204007fa:	8385                	srli	a5,a5,0x1
204007fc:	8fd5                	or	a5,a5,a3
204007fe:	8f3d                	xor	a4,a4,a5
20400800:	fe442783          	lw	a5,-28(s0)
20400804:	01a79693          	slli	a3,a5,0x1a
20400808:	fd042783          	lw	a5,-48(s0)
2040080c:	8399                	srli	a5,a5,0x6
2040080e:	8fd5                	or	a5,a5,a3
20400810:	8f3d                	xor	a4,a4,a5
20400812:	fac42783          	lw	a5,-84(s0)
20400816:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:98
    s->xl[2] = t.xl[2] ^ RORL(1,t.xh[2],t.xl[2]) ^ RORL(6,t.xh[2], t.xl[2]);
20400818:	fe442703          	lw	a4,-28(s0)
2040081c:	fd042783          	lw	a5,-48(s0)
20400820:	01f79693          	slli	a3,a5,0x1f
20400824:	fe442783          	lw	a5,-28(s0)
20400828:	8385                	srli	a5,a5,0x1
2040082a:	8fd5                	or	a5,a5,a3
2040082c:	8f3d                	xor	a4,a4,a5
2040082e:	fd042783          	lw	a5,-48(s0)
20400832:	01a79693          	slli	a3,a5,0x1a
20400836:	fe442783          	lw	a5,-28(s0)
2040083a:	8399                	srli	a5,a5,0x6
2040083c:	8fd5                	or	a5,a5,a3
2040083e:	8f3d                	xor	a4,a4,a5
20400840:	fac42783          	lw	a5,-84(s0)
20400844:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:100

    s->xh[3] = t.xh[3] ^ RORH(10,t.xh[3],t.xl[3]) ^ RORH(17,t.xh[3], t.xl[3]);
20400846:	fd442703          	lw	a4,-44(s0)
2040084a:	fe842783          	lw	a5,-24(s0)
2040084e:	01679693          	slli	a3,a5,0x16
20400852:	fd442783          	lw	a5,-44(s0)
20400856:	83a9                	srli	a5,a5,0xa
20400858:	8fd5                	or	a5,a5,a3
2040085a:	8f3d                	xor	a4,a4,a5
2040085c:	fe842783          	lw	a5,-24(s0)
20400860:	00f79693          	slli	a3,a5,0xf
20400864:	fd442783          	lw	a5,-44(s0)
20400868:	83c5                	srli	a5,a5,0x11
2040086a:	8fd5                	or	a5,a5,a3
2040086c:	8f3d                	xor	a4,a4,a5
2040086e:	fac42783          	lw	a5,-84(s0)
20400872:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:101
    s->xl[3] = t.xl[3] ^ RORL(10,t.xh[3],t.xl[3]) ^ RORL(17,t.xh[3], t.xl[3]);
20400874:	fe842703          	lw	a4,-24(s0)
20400878:	fd442783          	lw	a5,-44(s0)
2040087c:	01679693          	slli	a3,a5,0x16
20400880:	fe842783          	lw	a5,-24(s0)
20400884:	83a9                	srli	a5,a5,0xa
20400886:	8fd5                	or	a5,a5,a3
20400888:	8f3d                	xor	a4,a4,a5
2040088a:	fd442783          	lw	a5,-44(s0)
2040088e:	00f79693          	slli	a3,a5,0xf
20400892:	fe842783          	lw	a5,-24(s0)
20400896:	83c5                	srli	a5,a5,0x11
20400898:	8fd5                	or	a5,a5,a3
2040089a:	8f3d                	xor	a4,a4,a5
2040089c:	fac42783          	lw	a5,-84(s0)
204008a0:	d398                	sw	a4,32(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:103

    s->xh[4] = t.xh[4] ^ RORH(7,t.xh[4],t.xl[4]) ^ RORH(41,t.xh[4], t.xl[4]);
204008a2:	fd842703          	lw	a4,-40(s0)
204008a6:	fec42783          	lw	a5,-20(s0)
204008aa:	01979693          	slli	a3,a5,0x19
204008ae:	fd842783          	lw	a5,-40(s0)
204008b2:	839d                	srli	a5,a5,0x7
204008b4:	8fd5                	or	a5,a5,a3
204008b6:	8f3d                	xor	a4,a4,a5
204008b8:	fd842783          	lw	a5,-40(s0)
204008bc:	01779693          	slli	a3,a5,0x17
204008c0:	fec42783          	lw	a5,-20(s0)
204008c4:	83a5                	srli	a5,a5,0x9
204008c6:	8fd5                	or	a5,a5,a3
204008c8:	8f3d                	xor	a4,a4,a5
204008ca:	fac42783          	lw	a5,-84(s0)
204008ce:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:104
    s->xl[4] = t.xl[4] ^ RORL(7,t.xh[4],t.xl[4]) ^ RORL(41,t.xh[4], t.xl[4]);
204008d0:	fec42703          	lw	a4,-20(s0)
204008d4:	fd842783          	lw	a5,-40(s0)
204008d8:	01979693          	slli	a3,a5,0x19
204008dc:	fec42783          	lw	a5,-20(s0)
204008e0:	839d                	srli	a5,a5,0x7
204008e2:	8fd5                	or	a5,a5,a3
204008e4:	8f3d                	xor	a4,a4,a5
204008e6:	fec42783          	lw	a5,-20(s0)
204008ea:	01779693          	slli	a3,a5,0x17
204008ee:	fd842783          	lw	a5,-40(s0)
204008f2:	83a5                	srli	a5,a5,0x9
204008f4:	8fd5                	or	a5,a5,a3
204008f6:	8f3d                	xor	a4,a4,a5
204008f8:	fac42783          	lw	a5,-84(s0)
204008fc:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:107

    //printstate(" round output", s);
}
204008fe:	0001                	nop
20400900:	4476                	lw	s0,92(sp)
20400902:	6125                	addi	sp,sp,96
20400904:	8082                	ret

20400906 <P12>:
P12():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:110


static inline void P12(ascon_state_t* s) {
20400906:	1101                	addi	sp,sp,-32
20400908:	ce06                	sw	ra,28(sp)
2040090a:	cc22                	sw	s0,24(sp)
2040090c:	1000                	addi	s0,sp,32
2040090e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:111
  ROUND(s, 0xf0);
20400912:	0f000593          	li	a1,240
20400916:	fec42503          	lw	a0,-20(s0)
2040091a:	36e5                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:112
  ROUND(s, 0xe1);
2040091c:	0e100593          	li	a1,225
20400920:	fec42503          	lw	a0,-20(s0)
20400924:	3ef9                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:113
  ROUND(s, 0xd2);
20400926:	0d200593          	li	a1,210
2040092a:	fec42503          	lw	a0,-20(s0)
2040092e:	3ed1                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:114
  ROUND(s, 0xc3);
20400930:	0c300593          	li	a1,195
20400934:	fec42503          	lw	a0,-20(s0)
20400938:	36e9                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:115
  ROUND(s, 0xb4);
2040093a:	0b400593          	li	a1,180
2040093e:	fec42503          	lw	a0,-20(s0)
20400942:	36c1                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:116
  ROUND(s, 0xa5);
20400944:	0a500593          	li	a1,165
20400948:	fec42503          	lw	a0,-20(s0)
2040094c:	3e5d                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:117
  ROUND(s, 0x96);
2040094e:	09600593          	li	a1,150
20400952:	fec42503          	lw	a0,-20(s0)
20400956:	3675                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:118
  ROUND(s, 0x87);
20400958:	08700593          	li	a1,135
2040095c:	fec42503          	lw	a0,-20(s0)
20400960:	364d                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:119
  ROUND(s, 0x78);
20400962:	07800593          	li	a1,120
20400966:	fec42503          	lw	a0,-20(s0)
2040096a:	3e61                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:120
  ROUND(s, 0x69);
2040096c:	06900593          	li	a1,105
20400970:	fec42503          	lw	a0,-20(s0)
20400974:	3679                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:121
  ROUND(s, 0x5a);
20400976:	05a00593          	li	a1,90
2040097a:	fec42503          	lw	a0,-20(s0)
2040097e:	3651                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:122
  ROUND(s, 0x4b);
20400980:	04b00593          	li	a1,75
20400984:	fec42503          	lw	a0,-20(s0)
20400988:	3ead                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:123
}
2040098a:	0001                	nop
2040098c:	40f2                	lw	ra,28(sp)
2040098e:	4462                	lw	s0,24(sp)
20400990:	6105                	addi	sp,sp,32
20400992:	8082                	ret

20400994 <P6>:
P6():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:136
  ROUND(s, 0x69);
  ROUND(s, 0x5a);
  ROUND(s, 0x4b);
}

static inline void P6(ascon_state_t* s) {
20400994:	1101                	addi	sp,sp,-32
20400996:	ce06                	sw	ra,28(sp)
20400998:	cc22                	sw	s0,24(sp)
2040099a:	1000                	addi	s0,sp,32
2040099c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:137
  ROUND(s, 0x96);
204009a0:	09600593          	li	a1,150
204009a4:	fec42503          	lw	a0,-20(s0)
204009a8:	3ea9                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:138
  ROUND(s, 0x87);
204009aa:	08700593          	li	a1,135
204009ae:	fec42503          	lw	a0,-20(s0)
204009b2:	3e81                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:139
  ROUND(s, 0x78);
204009b4:	07800593          	li	a1,120
204009b8:	fec42503          	lw	a0,-20(s0)
204009bc:	3699                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:140
  ROUND(s, 0x69);
204009be:	06900593          	li	a1,105
204009c2:	fec42503          	lw	a0,-20(s0)
204009c6:	3e35                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:141
  ROUND(s, 0x5a);
204009c8:	05a00593          	li	a1,90
204009cc:	fec42503          	lw	a0,-20(s0)
204009d0:	3e0d                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:142
  ROUND(s, 0x4b);
204009d2:	04b00593          	li	a1,75
204009d6:	fec42503          	lw	a0,-20(s0)
204009da:	3625                	jal	20400502 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/round.h:143
}
204009dc:	0001                	nop
204009de:	40f2                	lw	ra,28(sp)
204009e0:	4462                	lw	s0,24(sp)
204009e2:	6105                	addi	sp,sp,32
204009e4:	8082                	ret

204009e6 <printstate>:
printstate():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/util.h:57
        mask.xl = 0x00000000;
    }
    return mask;
}*/

void printstate(const char *text, const ascon_state_t *s, int debug) {
204009e6:	7179                	addi	sp,sp,-48
204009e8:	d606                	sw	ra,44(sp)
204009ea:	d422                	sw	s0,40(sp)
204009ec:	1800                	addi	s0,sp,48
204009ee:	fca42e23          	sw	a0,-36(s0)
204009f2:	fcb42c23          	sw	a1,-40(s0)
204009f6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/util.h:58
    if(debug){
204009fa:	fd442783          	lw	a5,-44(s0)
204009fe:	cfa1                	beqz	a5,20400a56 <printstate+0x70>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/util.h:59
    printf("%s\n", text);
20400a00:	fdc42503          	lw	a0,-36(s0)
20400a04:	648010ef          	jal	ra,2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/util.h:60
    for (int i = 0; i < 5; i++) {
20400a08:	fe042623          	sw	zero,-20(s0)
20400a0c:	a82d                	j	20400a46 <printstate+0x60>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/util.h:61 (discriminator 3)
        printf("%08X %08X \n", s->xh[i], s->xl[i]);
20400a0e:	fd842703          	lw	a4,-40(s0)
20400a12:	fec42783          	lw	a5,-20(s0)
20400a16:	078a                	slli	a5,a5,0x2
20400a18:	97ba                	add	a5,a5,a4
20400a1a:	4394                	lw	a3,0(a5)
20400a1c:	fd842703          	lw	a4,-40(s0)
20400a20:	fec42783          	lw	a5,-20(s0)
20400a24:	0791                	addi	a5,a5,4
20400a26:	078a                	slli	a5,a5,0x2
20400a28:	97ba                	add	a5,a5,a4
20400a2a:	43dc                	lw	a5,4(a5)
20400a2c:	863e                	mv	a2,a5
20400a2e:	85b6                	mv	a1,a3
20400a30:	204077b7          	lui	a5,0x20407
20400a34:	ca878513          	addi	a0,a5,-856 # 20406ca8 <_exit+0x36>
20400a38:	448010ef          	jal	ra,20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/util.h:60 (discriminator 3)
    for (int i = 0; i < 5; i++) {
20400a3c:	fec42783          	lw	a5,-20(s0)
20400a40:	0785                	addi	a5,a5,1
20400a42:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/util.h:60 (discriminator 1)
20400a46:	fec42703          	lw	a4,-20(s0)
20400a4a:	4791                	li	a5,4
20400a4c:	fce7d1e3          	bge	a5,a4,20400a0e <printstate+0x28>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/util.h:63
    }
    printf("\n");}
20400a50:	4529                	li	a0,10
20400a52:	472010ef          	jal	ra,20401ec4 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/util.h:64
}
20400a56:	0001                	nop
20400a58:	50b2                	lw	ra,44(sp)
20400a5a:	5422                	lw	s0,40(sp)
20400a5c:	6145                	addi	sp,sp,48
20400a5e:	8082                	ret

20400a60 <crypto_aead_encrypt>:
crypto_aead_encrypt():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:15
#include "util.h"

#define A_128_IV_H 0x80400c06
#define A_128_IV_L 0x00000000

int crypto_aead_encrypt(u32 *c, u32 *clen, u32 *m, u32 mlen, u32 *ad, u32 adlen, u32 *npub, u32 *k, int debug) {
20400a60:	7119                	addi	sp,sp,-128
20400a62:	de86                	sw	ra,124(sp)
20400a64:	dca2                	sw	s0,120(sp)
20400a66:	0100                	addi	s0,sp,128
20400a68:	f8a42e23          	sw	a0,-100(s0)
20400a6c:	f8b42c23          	sw	a1,-104(s0)
20400a70:	f8c42a23          	sw	a2,-108(s0)
20400a74:	f8d42823          	sw	a3,-112(s0)
20400a78:	f8e42623          	sw	a4,-116(s0)
20400a7c:	f8f42423          	sw	a5,-120(s0)
20400a80:	f9042223          	sw	a6,-124(s0)
20400a84:	f9142023          	sw	a7,-128(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:17
    /* set plaintext size */
    *clen = mlen + 16;
20400a88:	f9042783          	lw	a5,-112(s0)
20400a8c:	01078713          	addi	a4,a5,16
20400a90:	f9842783          	lw	a5,-104(s0)
20400a94:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:21

    /* load key and nonce */
    u64 K0, K1, N0, N1;
    K0.xh = k[0];
20400a96:	f8042783          	lw	a5,-128(s0)
20400a9a:	439c                	lw	a5,0(a5)
20400a9c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:22
    K0.xl = k[1];
20400aa0:	f8042783          	lw	a5,-128(s0)
20400aa4:	43dc                	lw	a5,4(a5)
20400aa6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:23
    K1.xh = k[2];
20400aaa:	f8042783          	lw	a5,-128(s0)
20400aae:	479c                	lw	a5,8(a5)
20400ab0:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:24
    K1.xl = k[3];
20400ab4:	f8042783          	lw	a5,-128(s0)
20400ab8:	47dc                	lw	a5,12(a5)
20400aba:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:25
    N0.xh = npub[0];
20400abe:	f8442783          	lw	a5,-124(s0)
20400ac2:	439c                	lw	a5,0(a5)
20400ac4:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:26
    N0.xl = npub[1];
20400ac8:	f8442783          	lw	a5,-124(s0)
20400acc:	43dc                	lw	a5,4(a5)
20400ace:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:27
    N1.xh = npub[2];
20400ad2:	f8442783          	lw	a5,-124(s0)
20400ad6:	479c                	lw	a5,8(a5)
20400ad8:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:28
    N1.xl = npub[3];
20400adc:	f8442783          	lw	a5,-124(s0)
20400ae0:	47dc                	lw	a5,12(a5)
20400ae2:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:32

    /* initialize */
    ascon_state_t s;
    s.xh[0] = A_128_IV_H;
20400ae6:	804017b7          	lui	a5,0x80401
20400aea:	c0678793          	addi	a5,a5,-1018 # 80400c06 <metal_segment_heap_target_end+0x3fd082>
20400aee:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:33
    s.xl[0] = A_128_IV_L;
20400af2:	fa042e23          	sw	zero,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:34
    s.xh[1] = K0.xh;
20400af6:	fe842783          	lw	a5,-24(s0)
20400afa:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:35
    s.xl[1] = K0.xl;
20400afe:	fec42783          	lw	a5,-20(s0)
20400b02:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:36
    s.xh[2] = K1.xh;
20400b06:	fe042783          	lw	a5,-32(s0)
20400b0a:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:37
    s.xl[2] = K1.xl;
20400b0e:	fe442783          	lw	a5,-28(s0)
20400b12:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:38
    s.xh[3] = N0.xh;
20400b16:	fd842783          	lw	a5,-40(s0)
20400b1a:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:39
    s.xl[3] = N0.xl;
20400b1e:	fdc42783          	lw	a5,-36(s0)
20400b22:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:40
    s.xh[4] = N1.xh;
20400b26:	fd042783          	lw	a5,-48(s0)
20400b2a:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:41
    s.xl[4] = N1.xl;
20400b2e:	fd442783          	lw	a5,-44(s0)
20400b32:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:42
    printstate("After init", &s, debug);
20400b36:	fa840793          	addi	a5,s0,-88
20400b3a:	4010                	lw	a2,0(s0)
20400b3c:	85be                	mv	a1,a5
20400b3e:	204077b7          	lui	a5,0x20407
20400b42:	cb478513          	addi	a0,a5,-844 # 20406cb4 <_exit+0x42>
20400b46:	3545                	jal	204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:43
    P12(&s);
20400b48:	fa840793          	addi	a5,s0,-88
20400b4c:	853e                	mv	a0,a5
20400b4e:	3b65                	jal	20400906 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:45

    s.xh[3] ^= K0.xh;
20400b50:	fb442703          	lw	a4,-76(s0)
20400b54:	fe842783          	lw	a5,-24(s0)
20400b58:	8fb9                	xor	a5,a5,a4
20400b5a:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:46
    s.xl[3] ^= K0.xl;
20400b5e:	fc842703          	lw	a4,-56(s0)
20400b62:	fec42783          	lw	a5,-20(s0)
20400b66:	8fb9                	xor	a5,a5,a4
20400b68:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:47
    s.xh[4] ^= K1.xh;
20400b6c:	fb842703          	lw	a4,-72(s0)
20400b70:	fe042783          	lw	a5,-32(s0)
20400b74:	8fb9                	xor	a5,a5,a4
20400b76:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:48
    s.xl[4] ^= K1.xl;
20400b7a:	fcc42703          	lw	a4,-52(s0)
20400b7e:	fe442783          	lw	a5,-28(s0)
20400b82:	8fb9                	xor	a5,a5,a4
20400b84:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:49
    printstate("Xor 2 key", &s, debug);
20400b88:	fa840793          	addi	a5,s0,-88
20400b8c:	4010                	lw	a2,0(s0)
20400b8e:	85be                	mv	a1,a5
20400b90:	204077b7          	lui	a5,0x20407
20400b94:	cc078513          	addi	a0,a5,-832 # 20406cc0 <_exit+0x4e>
20400b98:	35b9                	jal	204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:51

    if (adlen) {
20400b9a:	f8842783          	lw	a5,-120(s0)
20400b9e:	16078263          	beqz	a5,20400d02 <crypto_aead_encrypt+0x2a2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:52
        while (adlen >= 8) {
20400ba2:	a8a9                	j	20400bfc <crypto_aead_encrypt+0x19c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:53
            s.xh[0] ^= *ad;
20400ba4:	fa842703          	lw	a4,-88(s0)
20400ba8:	f8c42783          	lw	a5,-116(s0)
20400bac:	439c                	lw	a5,0(a5)
20400bae:	8fb9                	xor	a5,a5,a4
20400bb0:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:54
            ad++;
20400bb4:	f8c42783          	lw	a5,-116(s0)
20400bb8:	0791                	addi	a5,a5,4
20400bba:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:55
            s.xl[0] ^= *ad;
20400bbe:	fbc42703          	lw	a4,-68(s0)
20400bc2:	f8c42783          	lw	a5,-116(s0)
20400bc6:	439c                	lw	a5,0(a5)
20400bc8:	8fb9                	xor	a5,a5,a4
20400bca:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:56
            ad++;
20400bce:	f8c42783          	lw	a5,-116(s0)
20400bd2:	0791                	addi	a5,a5,4
20400bd4:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:57
            P6(&s);
20400bd8:	fa840793          	addi	a5,s0,-88
20400bdc:	853e                	mv	a0,a5
20400bde:	3b5d                	jal	20400994 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:58
            printstate("Absorb AD", &s, debug);
20400be0:	fa840793          	addi	a5,s0,-88
20400be4:	4010                	lw	a2,0(s0)
20400be6:	85be                	mv	a1,a5
20400be8:	204077b7          	lui	a5,0x20407
20400bec:	ccc78513          	addi	a0,a5,-820 # 20406ccc <_exit+0x5a>
20400bf0:	3bdd                	jal	204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:59
            adlen -= 8;
20400bf2:	f8842783          	lw	a5,-120(s0)
20400bf6:	17e1                	addi	a5,a5,-8
20400bf8:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:52
        while (adlen >= 8) {
20400bfc:	f8842703          	lw	a4,-120(s0)
20400c00:	479d                	li	a5,7
20400c02:	fae7e1e3          	bltu	a5,a4,20400ba4 <crypto_aead_encrypt+0x144>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:61
        }
        s.xh[0] ^= TRUNH(adlen, *ad);
20400c06:	fa842703          	lw	a4,-88(s0)
20400c0a:	f8842683          	lw	a3,-120(s0)
20400c0e:	4791                	li	a5,4
20400c10:	00d7f663          	bgeu	a5,a3,20400c1c <crypto_aead_encrypt+0x1bc>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:61 (discriminator 1)
20400c14:	f8c42783          	lw	a5,-116(s0)
20400c18:	439c                	lw	a5,0(a5)
20400c1a:	a025                	j	20400c42 <crypto_aead_encrypt+0x1e2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:61 (discriminator 2)
20400c1c:	f8842783          	lw	a5,-120(s0)
20400c20:	c385                	beqz	a5,20400c40 <crypto_aead_encrypt+0x1e0>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:61 (discriminator 4)
20400c22:	f8c42783          	lw	a5,-116(s0)
20400c26:	4394                	lw	a3,0(a5)
20400c28:	f8842603          	lw	a2,-120(s0)
20400c2c:	4781                	li	a5,0
20400c2e:	8f91                	sub	a5,a5,a2
20400c30:	078e                	slli	a5,a5,0x3
20400c32:	02078793          	addi	a5,a5,32
20400c36:	567d                	li	a2,-1
20400c38:	00f617b3          	sll	a5,a2,a5
20400c3c:	8ff5                	and	a5,a5,a3
20400c3e:	a011                	j	20400c42 <crypto_aead_encrypt+0x1e2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:61 (discriminator 5)
20400c40:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:61 (discriminator 8)
20400c42:	8fb9                	xor	a5,a5,a4
20400c44:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:62 (discriminator 8)
        ad++;
20400c48:	f8c42783          	lw	a5,-116(s0)
20400c4c:	0791                	addi	a5,a5,4
20400c4e:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:63 (discriminator 8)
        s.xl[0] ^= TRUNL(adlen, *ad);
20400c52:	fbc42703          	lw	a4,-68(s0)
20400c56:	f8842683          	lw	a3,-120(s0)
20400c5a:	4791                	li	a5,4
20400c5c:	02d7f163          	bgeu	a5,a3,20400c7e <crypto_aead_encrypt+0x21e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:63 (discriminator 1)
20400c60:	f8c42783          	lw	a5,-116(s0)
20400c64:	4394                	lw	a3,0(a5)
20400c66:	f8842603          	lw	a2,-120(s0)
20400c6a:	4781                	li	a5,0
20400c6c:	8f91                	sub	a5,a5,a2
20400c6e:	078e                	slli	a5,a5,0x3
20400c70:	04078793          	addi	a5,a5,64
20400c74:	567d                	li	a2,-1
20400c76:	00f617b3          	sll	a5,a2,a5
20400c7a:	8ff5                	and	a5,a5,a3
20400c7c:	a011                	j	20400c80 <crypto_aead_encrypt+0x220>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:63 (discriminator 2)
20400c7e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:63 (discriminator 4)
20400c80:	8fb9                	xor	a5,a5,a4
20400c82:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:65 (discriminator 4)

        s.xh[0] ^= PADH(adlen);
20400c86:	fa842703          	lw	a4,-88(s0)
20400c8a:	f8842683          	lw	a3,-120(s0)
20400c8e:	478d                	li	a5,3
20400c90:	00d7ea63          	bltu	a5,a3,20400ca4 <crypto_aead_encrypt+0x244>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:65 (discriminator 1)
20400c94:	f8842783          	lw	a5,-120(s0)
20400c98:	078e                	slli	a5,a5,0x3
20400c9a:	800006b7          	lui	a3,0x80000
20400c9e:	00f6d7b3          	srl	a5,a3,a5
20400ca2:	a011                	j	20400ca6 <crypto_aead_encrypt+0x246>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:65 (discriminator 2)
20400ca4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:65 (discriminator 4)
20400ca6:	8fb9                	xor	a5,a5,a4
20400ca8:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:66 (discriminator 4)
        s.xl[0] ^= PADL(adlen);
20400cac:	fbc42703          	lw	a4,-68(s0)
20400cb0:	f8842683          	lw	a3,-120(s0)
20400cb4:	478d                	li	a5,3
20400cb6:	02d7f563          	bgeu	a5,a3,20400ce0 <crypto_aead_encrypt+0x280>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:66 (discriminator 1)
20400cba:	f8842683          	lw	a3,-120(s0)
20400cbe:	47a1                	li	a5,8
20400cc0:	00f68e63          	beq	a3,a5,20400cdc <crypto_aead_encrypt+0x27c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:66 (discriminator 3)
20400cc4:	f8842683          	lw	a3,-120(s0)
20400cc8:	200007b7          	lui	a5,0x20000
20400ccc:	17f1                	addi	a5,a5,-4
20400cce:	97b6                	add	a5,a5,a3
20400cd0:	078e                	slli	a5,a5,0x3
20400cd2:	800006b7          	lui	a3,0x80000
20400cd6:	00f6d7b3          	srl	a5,a3,a5
20400cda:	a021                	j	20400ce2 <crypto_aead_encrypt+0x282>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:66 (discriminator 4)
20400cdc:	4781                	li	a5,0
20400cde:	a011                	j	20400ce2 <crypto_aead_encrypt+0x282>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:66 (discriminator 2)
20400ce0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:66 (discriminator 8)
20400ce2:	8fb9                	xor	a5,a5,a4
20400ce4:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:67 (discriminator 8)
        printstate("Padded AD", &s, debug);
20400ce8:	fa840793          	addi	a5,s0,-88
20400cec:	4010                	lw	a2,0(s0)
20400cee:	85be                	mv	a1,a5
20400cf0:	204077b7          	lui	a5,0x20407
20400cf4:	cd878513          	addi	a0,a5,-808 # 20406cd8 <_exit+0x66>
20400cf8:	31fd                	jal	204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:68 (discriminator 8)
        P6(&s);
20400cfa:	fa840793          	addi	a5,s0,-88
20400cfe:	853e                	mv	a0,a5
20400d00:	3951                	jal	20400994 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:71
    }
    /* domain separation */
    s.xl[4] ^= 1;
20400d02:	fcc42783          	lw	a5,-52(s0)
20400d06:	0017c793          	xori	a5,a5,1
20400d0a:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:72
    printstate("Domain Separation", &s, debug);
20400d0e:	fa840793          	addi	a5,s0,-88
20400d12:	4010                	lw	a2,0(s0)
20400d14:	85be                	mv	a1,a5
20400d16:	204077b7          	lui	a5,0x20407
20400d1a:	ce478513          	addi	a0,a5,-796 # 20406ce4 <_exit+0x72>
20400d1e:	31e1                	jal	204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:74

    while (mlen >= 8) {
20400d20:	a049                	j	20400da2 <crypto_aead_encrypt+0x342>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:75
        s.xh[0] ^= *m;
20400d22:	fa842703          	lw	a4,-88(s0)
20400d26:	f9442783          	lw	a5,-108(s0)
20400d2a:	439c                	lw	a5,0(a5)
20400d2c:	8fb9                	xor	a5,a5,a4
20400d2e:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:76
        m++;
20400d32:	f9442783          	lw	a5,-108(s0)
20400d36:	0791                	addi	a5,a5,4
20400d38:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:77
        s.xl[0] ^= *m;
20400d3c:	fbc42703          	lw	a4,-68(s0)
20400d40:	f9442783          	lw	a5,-108(s0)
20400d44:	439c                	lw	a5,0(a5)
20400d46:	8fb9                	xor	a5,a5,a4
20400d48:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:78
        m++;
20400d4c:	f9442783          	lw	a5,-108(s0)
20400d50:	0791                	addi	a5,a5,4
20400d52:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:79
        *c = s.xh[0];
20400d56:	fa842703          	lw	a4,-88(s0)
20400d5a:	f9c42783          	lw	a5,-100(s0)
20400d5e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:80
        c++;
20400d60:	f9c42783          	lw	a5,-100(s0)
20400d64:	0791                	addi	a5,a5,4
20400d66:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:81
        *c = s.xl[0];
20400d6a:	fbc42703          	lw	a4,-68(s0)
20400d6e:	f9c42783          	lw	a5,-100(s0)
20400d72:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:82
        c++;
20400d74:	f9c42783          	lw	a5,-100(s0)
20400d78:	0791                	addi	a5,a5,4
20400d7a:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:83
        mlen -= 8;
20400d7e:	f9042783          	lw	a5,-112(s0)
20400d82:	17e1                	addi	a5,a5,-8
20400d84:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:84
        printstate("Absorb M", &s, debug);
20400d88:	fa840793          	addi	a5,s0,-88
20400d8c:	4010                	lw	a2,0(s0)
20400d8e:	85be                	mv	a1,a5
20400d90:	204077b7          	lui	a5,0x20407
20400d94:	cf878513          	addi	a0,a5,-776 # 20406cf8 <_exit+0x86>
20400d98:	31b9                	jal	204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:85
        P6(&s);
20400d9a:	fa840793          	addi	a5,s0,-88
20400d9e:	853e                	mv	a0,a5
20400da0:	3ed5                	jal	20400994 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:74
    while (mlen >= 8) {
20400da2:	f9042703          	lw	a4,-112(s0)
20400da6:	479d                	li	a5,7
20400da8:	f6e7ede3          	bltu	a5,a4,20400d22 <crypto_aead_encrypt+0x2c2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:88
    }
    /* final block*/
    s.xh[0] ^= TRUNH(mlen, *m);
20400dac:	fa842703          	lw	a4,-88(s0)
20400db0:	f9042683          	lw	a3,-112(s0)
20400db4:	4791                	li	a5,4
20400db6:	00d7f663          	bgeu	a5,a3,20400dc2 <crypto_aead_encrypt+0x362>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:88 (discriminator 1)
20400dba:	f9442783          	lw	a5,-108(s0)
20400dbe:	439c                	lw	a5,0(a5)
20400dc0:	a025                	j	20400de8 <crypto_aead_encrypt+0x388>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:88 (discriminator 2)
20400dc2:	f9042783          	lw	a5,-112(s0)
20400dc6:	c385                	beqz	a5,20400de6 <crypto_aead_encrypt+0x386>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:88 (discriminator 4)
20400dc8:	f9442783          	lw	a5,-108(s0)
20400dcc:	4394                	lw	a3,0(a5)
20400dce:	f9042603          	lw	a2,-112(s0)
20400dd2:	4781                	li	a5,0
20400dd4:	8f91                	sub	a5,a5,a2
20400dd6:	078e                	slli	a5,a5,0x3
20400dd8:	02078793          	addi	a5,a5,32
20400ddc:	567d                	li	a2,-1
20400dde:	00f617b3          	sll	a5,a2,a5
20400de2:	8ff5                	and	a5,a5,a3
20400de4:	a011                	j	20400de8 <crypto_aead_encrypt+0x388>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:88 (discriminator 5)
20400de6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:88 (discriminator 8)
20400de8:	8fb9                	xor	a5,a5,a4
20400dea:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:89 (discriminator 8)
    m++;
20400dee:	f9442783          	lw	a5,-108(s0)
20400df2:	0791                	addi	a5,a5,4
20400df4:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:90 (discriminator 8)
    s.xl[0] ^= TRUNL(mlen, *m);
20400df8:	fbc42703          	lw	a4,-68(s0)
20400dfc:	f9042683          	lw	a3,-112(s0)
20400e00:	4791                	li	a5,4
20400e02:	02d7f163          	bgeu	a5,a3,20400e24 <crypto_aead_encrypt+0x3c4>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:90 (discriminator 1)
20400e06:	f9442783          	lw	a5,-108(s0)
20400e0a:	4394                	lw	a3,0(a5)
20400e0c:	f9042603          	lw	a2,-112(s0)
20400e10:	4781                	li	a5,0
20400e12:	8f91                	sub	a5,a5,a2
20400e14:	078e                	slli	a5,a5,0x3
20400e16:	04078793          	addi	a5,a5,64
20400e1a:	567d                	li	a2,-1
20400e1c:	00f617b3          	sll	a5,a2,a5
20400e20:	8ff5                	and	a5,a5,a3
20400e22:	a011                	j	20400e26 <crypto_aead_encrypt+0x3c6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:90 (discriminator 2)
20400e24:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:90 (discriminator 4)
20400e26:	8fb9                	xor	a5,a5,a4
20400e28:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:92 (discriminator 4)

    if (mlen) {
20400e2c:	f9042783          	lw	a5,-112(s0)
20400e30:	cfbd                	beqz	a5,20400eae <crypto_aead_encrypt+0x44e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:93
        *c = TRUNH(mlen, s.xh[0]);
20400e32:	f9042703          	lw	a4,-112(s0)
20400e36:	4791                	li	a5,4
20400e38:	00e7f563          	bgeu	a5,a4,20400e42 <crypto_aead_encrypt+0x3e2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:93 (discriminator 1)
20400e3c:	fa842783          	lw	a5,-88(s0)
20400e40:	a01d                	j	20400e66 <crypto_aead_encrypt+0x406>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:93 (discriminator 2)
20400e42:	f9042783          	lw	a5,-112(s0)
20400e46:	cf99                	beqz	a5,20400e64 <crypto_aead_encrypt+0x404>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:93 (discriminator 4)
20400e48:	fa842703          	lw	a4,-88(s0)
20400e4c:	f9042683          	lw	a3,-112(s0)
20400e50:	4781                	li	a5,0
20400e52:	8f95                	sub	a5,a5,a3
20400e54:	078e                	slli	a5,a5,0x3
20400e56:	02078793          	addi	a5,a5,32
20400e5a:	56fd                	li	a3,-1
20400e5c:	00f697b3          	sll	a5,a3,a5
20400e60:	8ff9                	and	a5,a5,a4
20400e62:	a011                	j	20400e66 <crypto_aead_encrypt+0x406>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:93 (discriminator 5)
20400e64:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:93 (discriminator 8)
20400e66:	f9c42703          	lw	a4,-100(s0)
20400e6a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:94 (discriminator 8)
        c++;
20400e6c:	f9c42783          	lw	a5,-100(s0)
20400e70:	0791                	addi	a5,a5,4
20400e72:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:95 (discriminator 8)
        *c = TRUNL(mlen, s.xl[0]);
20400e76:	f9042703          	lw	a4,-112(s0)
20400e7a:	4791                	li	a5,4
20400e7c:	02e7f063          	bgeu	a5,a4,20400e9c <crypto_aead_encrypt+0x43c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:95 (discriminator 1)
20400e80:	fbc42703          	lw	a4,-68(s0)
20400e84:	f9042683          	lw	a3,-112(s0)
20400e88:	4781                	li	a5,0
20400e8a:	8f95                	sub	a5,a5,a3
20400e8c:	078e                	slli	a5,a5,0x3
20400e8e:	04078793          	addi	a5,a5,64
20400e92:	56fd                	li	a3,-1
20400e94:	00f697b3          	sll	a5,a3,a5
20400e98:	8ff9                	and	a5,a5,a4
20400e9a:	a011                	j	20400e9e <crypto_aead_encrypt+0x43e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:95 (discriminator 2)
20400e9c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:95 (discriminator 4)
20400e9e:	f9c42703          	lw	a4,-100(s0)
20400ea2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:96 (discriminator 4)
        c++;
20400ea4:	f9c42783          	lw	a5,-100(s0)
20400ea8:	0791                	addi	a5,a5,4
20400eaa:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:98
    }
    s.xh[0] ^= PADH(mlen);
20400eae:	fa842703          	lw	a4,-88(s0)
20400eb2:	f9042683          	lw	a3,-112(s0)
20400eb6:	478d                	li	a5,3
20400eb8:	00d7ea63          	bltu	a5,a3,20400ecc <crypto_aead_encrypt+0x46c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:98 (discriminator 1)
20400ebc:	f9042783          	lw	a5,-112(s0)
20400ec0:	078e                	slli	a5,a5,0x3
20400ec2:	800006b7          	lui	a3,0x80000
20400ec6:	00f6d7b3          	srl	a5,a3,a5
20400eca:	a011                	j	20400ece <crypto_aead_encrypt+0x46e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:98 (discriminator 2)
20400ecc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:98 (discriminator 4)
20400ece:	8fb9                	xor	a5,a5,a4
20400ed0:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:99 (discriminator 4)
    s.xl[0] ^= PADL(mlen);
20400ed4:	fbc42703          	lw	a4,-68(s0)
20400ed8:	f9042683          	lw	a3,-112(s0)
20400edc:	478d                	li	a5,3
20400ede:	02d7f563          	bgeu	a5,a3,20400f08 <crypto_aead_encrypt+0x4a8>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:99 (discriminator 1)
20400ee2:	f9042683          	lw	a3,-112(s0)
20400ee6:	47a1                	li	a5,8
20400ee8:	00f68e63          	beq	a3,a5,20400f04 <crypto_aead_encrypt+0x4a4>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:99 (discriminator 3)
20400eec:	f9042683          	lw	a3,-112(s0)
20400ef0:	200007b7          	lui	a5,0x20000
20400ef4:	17f1                	addi	a5,a5,-4
20400ef6:	97b6                	add	a5,a5,a3
20400ef8:	078e                	slli	a5,a5,0x3
20400efa:	800006b7          	lui	a3,0x80000
20400efe:	00f6d7b3          	srl	a5,a3,a5
20400f02:	a021                	j	20400f0a <crypto_aead_encrypt+0x4aa>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:99 (discriminator 4)
20400f04:	4781                	li	a5,0
20400f06:	a011                	j	20400f0a <crypto_aead_encrypt+0x4aa>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:99 (discriminator 2)
20400f08:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:99 (discriminator 8)
20400f0a:	8fb9                	xor	a5,a5,a4
20400f0c:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:100 (discriminator 8)
    printstate("Pad M", &s, debug);
20400f10:	fa840793          	addi	a5,s0,-88
20400f14:	4010                	lw	a2,0(s0)
20400f16:	85be                	mv	a1,a5
20400f18:	204077b7          	lui	a5,0x20407
20400f1c:	d0478513          	addi	a0,a5,-764 # 20406d04 <_exit+0x92>
20400f20:	34d9                	jal	204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:102 (discriminator 8)
    /* Ending */
    s.xh[1] ^= K0.xh;
20400f22:	fac42703          	lw	a4,-84(s0)
20400f26:	fe842783          	lw	a5,-24(s0)
20400f2a:	8fb9                	xor	a5,a5,a4
20400f2c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:103 (discriminator 8)
    s.xl[1] ^= K0.xl;
20400f30:	fc042703          	lw	a4,-64(s0)
20400f34:	fec42783          	lw	a5,-20(s0)
20400f38:	8fb9                	xor	a5,a5,a4
20400f3a:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:104 (discriminator 8)
    s.xh[2] ^= K1.xh;
20400f3e:	fb042703          	lw	a4,-80(s0)
20400f42:	fe042783          	lw	a5,-32(s0)
20400f46:	8fb9                	xor	a5,a5,a4
20400f48:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:105 (discriminator 8)
    s.xl[2] ^= K1.xl;
20400f4c:	fc442703          	lw	a4,-60(s0)
20400f50:	fe442783          	lw	a5,-28(s0)
20400f54:	8fb9                	xor	a5,a5,a4
20400f56:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:106 (discriminator 8)
    printstate("Xor key 1", &s, debug);
20400f5a:	fa840793          	addi	a5,s0,-88
20400f5e:	4010                	lw	a2,0(s0)
20400f60:	85be                	mv	a1,a5
20400f62:	204077b7          	lui	a5,0x20407
20400f66:	d0c78513          	addi	a0,a5,-756 # 20406d0c <_exit+0x9a>
20400f6a:	3cb5                	jal	204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:108 (discriminator 8)

    P12(&s);
20400f6c:	fa840793          	addi	a5,s0,-88
20400f70:	853e                	mv	a0,a5
20400f72:	3a51                	jal	20400906 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:109 (discriminator 8)
    s.xh[3] ^= K0.xh;
20400f74:	fb442703          	lw	a4,-76(s0)
20400f78:	fe842783          	lw	a5,-24(s0)
20400f7c:	8fb9                	xor	a5,a5,a4
20400f7e:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:110 (discriminator 8)
    s.xl[3] ^= K0.xl;
20400f82:	fc842703          	lw	a4,-56(s0)
20400f86:	fec42783          	lw	a5,-20(s0)
20400f8a:	8fb9                	xor	a5,a5,a4
20400f8c:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:111 (discriminator 8)
    s.xh[4] ^= K1.xh;
20400f90:	fb842703          	lw	a4,-72(s0)
20400f94:	fe042783          	lw	a5,-32(s0)
20400f98:	8fb9                	xor	a5,a5,a4
20400f9a:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:112 (discriminator 8)
    s.xl[4] ^= K1.xl;
20400f9e:	fcc42703          	lw	a4,-52(s0)
20400fa2:	fe442783          	lw	a5,-28(s0)
20400fa6:	8fb9                	xor	a5,a5,a4
20400fa8:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:113 (discriminator 8)
    printstate("Xor key 2", &s, debug);
20400fac:	fa840793          	addi	a5,s0,-88
20400fb0:	4010                	lw	a2,0(s0)
20400fb2:	85be                	mv	a1,a5
20400fb4:	204077b7          	lui	a5,0x20407
20400fb8:	d1878513          	addi	a0,a5,-744 # 20406d18 <_exit+0xa6>
20400fbc:	342d                	jal	204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:116 (discriminator 8)

    /* TAG*/
    *c = s.xh[3];
20400fbe:	fb442703          	lw	a4,-76(s0)
20400fc2:	f9c42783          	lw	a5,-100(s0)
20400fc6:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:117 (discriminator 8)
    c++;
20400fc8:	f9c42783          	lw	a5,-100(s0)
20400fcc:	0791                	addi	a5,a5,4
20400fce:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:118 (discriminator 8)
    *c = s.xl[3];
20400fd2:	fc842703          	lw	a4,-56(s0)
20400fd6:	f9c42783          	lw	a5,-100(s0)
20400fda:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:119 (discriminator 8)
    c++;
20400fdc:	f9c42783          	lw	a5,-100(s0)
20400fe0:	0791                	addi	a5,a5,4
20400fe2:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:120 (discriminator 8)
    *c = s.xh[4];
20400fe6:	fb842703          	lw	a4,-72(s0)
20400fea:	f9c42783          	lw	a5,-100(s0)
20400fee:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:121 (discriminator 8)
    c++;
20400ff0:	f9c42783          	lw	a5,-100(s0)
20400ff4:	0791                	addi	a5,a5,4
20400ff6:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:122 (discriminator 8)
    *c = s.xl[4];
20400ffa:	fcc42703          	lw	a4,-52(s0)
20400ffe:	f9c42783          	lw	a5,-100(s0)
20401002:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:123 (discriminator 8)
    return 0;
20401004:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:124 (discriminator 8)
}
20401006:	853e                	mv	a0,a5
20401008:	50f6                	lw	ra,124(sp)
2040100a:	5466                	lw	s0,120(sp)
2040100c:	6109                	addi	sp,sp,128
2040100e:	8082                	ret

20401010 <crypto_aead_decrypt>:
crypto_aead_decrypt():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:126

int crypto_aead_decrypt(u32 *m, u32 *mlen, u32 *c, u32 clen, u32 *ad, u32 adlen, u32 *npub, u32 *k, int debug) {
20401010:	7135                	addi	sp,sp,-160
20401012:	cf06                	sw	ra,156(sp)
20401014:	cd22                	sw	s0,152(sp)
20401016:	1100                	addi	s0,sp,160
20401018:	f6a42e23          	sw	a0,-132(s0)
2040101c:	f6b42c23          	sw	a1,-136(s0)
20401020:	f6c42a23          	sw	a2,-140(s0)
20401024:	f6d42823          	sw	a3,-144(s0)
20401028:	f6e42623          	sw	a4,-148(s0)
2040102c:	f6f42423          	sw	a5,-152(s0)
20401030:	f7042223          	sw	a6,-156(s0)
20401034:	f7142023          	sw	a7,-160(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:128
    /* set plaintext size */
    *mlen = clen;
20401038:	f7842783          	lw	a5,-136(s0)
2040103c:	f7042703          	lw	a4,-144(s0)
20401040:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:131
    /* load key and nonce */
    u64 K0, K1, N0, N1;
    K0.xh = k[0];
20401042:	f6042783          	lw	a5,-160(s0)
20401046:	439c                	lw	a5,0(a5)
20401048:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:132
    K0.xl = k[1];
2040104c:	f6042783          	lw	a5,-160(s0)
20401050:	43dc                	lw	a5,4(a5)
20401052:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:133
    K1.xh = k[2];
20401056:	f6042783          	lw	a5,-160(s0)
2040105a:	479c                	lw	a5,8(a5)
2040105c:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:134
    K1.xl = k[3];
20401060:	f6042783          	lw	a5,-160(s0)
20401064:	47dc                	lw	a5,12(a5)
20401066:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:135
    N0.xh = npub[0];
2040106a:	f6442783          	lw	a5,-156(s0)
2040106e:	439c                	lw	a5,0(a5)
20401070:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:136
    N0.xl = npub[1];
20401074:	f6442783          	lw	a5,-156(s0)
20401078:	43dc                	lw	a5,4(a5)
2040107a:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:137
    N1.xh = npub[2];
2040107e:	f6442783          	lw	a5,-156(s0)
20401082:	479c                	lw	a5,8(a5)
20401084:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:138
    N1.xl = npub[3];
20401088:	f6442783          	lw	a5,-156(s0)
2040108c:	47dc                	lw	a5,12(a5)
2040108e:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:142

    /* initialize */
    ascon_state_t s;
    s.xh[0] = A_128_IV_H;
20401092:	804017b7          	lui	a5,0x80401
20401096:	c0678793          	addi	a5,a5,-1018 # 80400c06 <metal_segment_heap_target_end+0x3fd082>
2040109a:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:143
    s.xl[0] = A_128_IV_L;
2040109e:	fa042823          	sw	zero,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:144
    s.xh[1] = K0.xh;
204010a2:	fdc42783          	lw	a5,-36(s0)
204010a6:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:145
    s.xl[1] = K0.xl;
204010aa:	fe042783          	lw	a5,-32(s0)
204010ae:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:146
    s.xh[2] = K1.xh;
204010b2:	fd442783          	lw	a5,-44(s0)
204010b6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:147
    s.xl[2] = K1.xl;
204010ba:	fd842783          	lw	a5,-40(s0)
204010be:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:148
    s.xh[3] = N0.xh;
204010c2:	fcc42783          	lw	a5,-52(s0)
204010c6:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:149
    s.xl[3] = N0.xl;
204010ca:	fd042783          	lw	a5,-48(s0)
204010ce:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:150
    s.xh[4] = N1.xh;
204010d2:	fc442783          	lw	a5,-60(s0)
204010d6:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:151
    s.xl[4] = N1.xl;
204010da:	fc842783          	lw	a5,-56(s0)
204010de:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:152
    printstate("After init", &s, debug);
204010e2:	f9c40793          	addi	a5,s0,-100
204010e6:	4010                	lw	a2,0(s0)
204010e8:	85be                	mv	a1,a5
204010ea:	204077b7          	lui	a5,0x20407
204010ee:	cb478513          	addi	a0,a5,-844 # 20406cb4 <_exit+0x42>
204010f2:	38d5                	jal	204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:153
    P12(&s);
204010f4:	f9c40793          	addi	a5,s0,-100
204010f8:	853e                	mv	a0,a5
204010fa:	80dff0ef          	jal	ra,20400906 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:155

    s.xh[3] ^= K0.xh;
204010fe:	fa842703          	lw	a4,-88(s0)
20401102:	fdc42783          	lw	a5,-36(s0)
20401106:	8fb9                	xor	a5,a5,a4
20401108:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:156
    s.xl[3] ^= K0.xl;
2040110c:	fbc42703          	lw	a4,-68(s0)
20401110:	fe042783          	lw	a5,-32(s0)
20401114:	8fb9                	xor	a5,a5,a4
20401116:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:157
    s.xh[4] ^= K1.xh;
2040111a:	fac42703          	lw	a4,-84(s0)
2040111e:	fd442783          	lw	a5,-44(s0)
20401122:	8fb9                	xor	a5,a5,a4
20401124:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:158
    s.xl[4] ^= K1.xl;
20401128:	fc042703          	lw	a4,-64(s0)
2040112c:	fd842783          	lw	a5,-40(s0)
20401130:	8fb9                	xor	a5,a5,a4
20401132:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:159
    printstate("Xor 2 key", &s, debug);
20401136:	f9c40793          	addi	a5,s0,-100
2040113a:	4010                	lw	a2,0(s0)
2040113c:	85be                	mv	a1,a5
2040113e:	204077b7          	lui	a5,0x20407
20401142:	cc078513          	addi	a0,a5,-832 # 20406cc0 <_exit+0x4e>
20401146:	8a1ff0ef          	jal	ra,204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:161

    if (adlen) {
2040114a:	f6842783          	lw	a5,-152(s0)
2040114e:	16078663          	beqz	a5,204012ba <crypto_aead_decrypt+0x2aa>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:162
        while (adlen >= 8) {
20401152:	a8b9                	j	204011b0 <crypto_aead_decrypt+0x1a0>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:163
            s.xh[0] ^= *ad;
20401154:	f9c42703          	lw	a4,-100(s0)
20401158:	f6c42783          	lw	a5,-148(s0)
2040115c:	439c                	lw	a5,0(a5)
2040115e:	8fb9                	xor	a5,a5,a4
20401160:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:164
            ad++;
20401164:	f6c42783          	lw	a5,-148(s0)
20401168:	0791                	addi	a5,a5,4
2040116a:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:165
            s.xl[0] ^= *ad;
2040116e:	fb042703          	lw	a4,-80(s0)
20401172:	f6c42783          	lw	a5,-148(s0)
20401176:	439c                	lw	a5,0(a5)
20401178:	8fb9                	xor	a5,a5,a4
2040117a:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:166
            ad++;
2040117e:	f6c42783          	lw	a5,-148(s0)
20401182:	0791                	addi	a5,a5,4
20401184:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:167
            P6(&s);
20401188:	f9c40793          	addi	a5,s0,-100
2040118c:	853e                	mv	a0,a5
2040118e:	807ff0ef          	jal	ra,20400994 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:168
            printstate("Absorb AD", &s, debug);
20401192:	f9c40793          	addi	a5,s0,-100
20401196:	4010                	lw	a2,0(s0)
20401198:	85be                	mv	a1,a5
2040119a:	204077b7          	lui	a5,0x20407
2040119e:	ccc78513          	addi	a0,a5,-820 # 20406ccc <_exit+0x5a>
204011a2:	845ff0ef          	jal	ra,204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:169
            adlen -= 8;
204011a6:	f6842783          	lw	a5,-152(s0)
204011aa:	17e1                	addi	a5,a5,-8
204011ac:	f6f42423          	sw	a5,-152(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:162
        while (adlen >= 8) {
204011b0:	f6842703          	lw	a4,-152(s0)
204011b4:	479d                	li	a5,7
204011b6:	f8e7efe3          	bltu	a5,a4,20401154 <crypto_aead_decrypt+0x144>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:171
        }
        s.xh[0] ^= TRUNH(adlen, *ad);
204011ba:	f9c42703          	lw	a4,-100(s0)
204011be:	f6842683          	lw	a3,-152(s0)
204011c2:	4791                	li	a5,4
204011c4:	00d7f663          	bgeu	a5,a3,204011d0 <crypto_aead_decrypt+0x1c0>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:171 (discriminator 1)
204011c8:	f6c42783          	lw	a5,-148(s0)
204011cc:	439c                	lw	a5,0(a5)
204011ce:	a025                	j	204011f6 <crypto_aead_decrypt+0x1e6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:171 (discriminator 2)
204011d0:	f6842783          	lw	a5,-152(s0)
204011d4:	c385                	beqz	a5,204011f4 <crypto_aead_decrypt+0x1e4>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:171 (discriminator 4)
204011d6:	f6c42783          	lw	a5,-148(s0)
204011da:	4394                	lw	a3,0(a5)
204011dc:	f6842603          	lw	a2,-152(s0)
204011e0:	4781                	li	a5,0
204011e2:	8f91                	sub	a5,a5,a2
204011e4:	078e                	slli	a5,a5,0x3
204011e6:	02078793          	addi	a5,a5,32
204011ea:	567d                	li	a2,-1
204011ec:	00f617b3          	sll	a5,a2,a5
204011f0:	8ff5                	and	a5,a5,a3
204011f2:	a011                	j	204011f6 <crypto_aead_decrypt+0x1e6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:171 (discriminator 5)
204011f4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:171 (discriminator 8)
204011f6:	8fb9                	xor	a5,a5,a4
204011f8:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:172 (discriminator 8)
        ad++;
204011fc:	f6c42783          	lw	a5,-148(s0)
20401200:	0791                	addi	a5,a5,4
20401202:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:173 (discriminator 8)
        s.xl[0] ^= TRUNL(adlen, *ad);
20401206:	fb042703          	lw	a4,-80(s0)
2040120a:	f6842683          	lw	a3,-152(s0)
2040120e:	4791                	li	a5,4
20401210:	02d7f163          	bgeu	a5,a3,20401232 <crypto_aead_decrypt+0x222>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:173 (discriminator 1)
20401214:	f6c42783          	lw	a5,-148(s0)
20401218:	4394                	lw	a3,0(a5)
2040121a:	f6842603          	lw	a2,-152(s0)
2040121e:	4781                	li	a5,0
20401220:	8f91                	sub	a5,a5,a2
20401222:	078e                	slli	a5,a5,0x3
20401224:	04078793          	addi	a5,a5,64
20401228:	567d                	li	a2,-1
2040122a:	00f617b3          	sll	a5,a2,a5
2040122e:	8ff5                	and	a5,a5,a3
20401230:	a011                	j	20401234 <crypto_aead_decrypt+0x224>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:173 (discriminator 2)
20401232:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:173 (discriminator 4)
20401234:	8fb9                	xor	a5,a5,a4
20401236:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:175 (discriminator 4)

        s.xh[0] ^= PADH(adlen);
2040123a:	f9c42703          	lw	a4,-100(s0)
2040123e:	f6842683          	lw	a3,-152(s0)
20401242:	478d                	li	a5,3
20401244:	00d7ea63          	bltu	a5,a3,20401258 <crypto_aead_decrypt+0x248>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:175 (discriminator 1)
20401248:	f6842783          	lw	a5,-152(s0)
2040124c:	078e                	slli	a5,a5,0x3
2040124e:	800006b7          	lui	a3,0x80000
20401252:	00f6d7b3          	srl	a5,a3,a5
20401256:	a011                	j	2040125a <crypto_aead_decrypt+0x24a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:175 (discriminator 2)
20401258:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:175 (discriminator 4)
2040125a:	8fb9                	xor	a5,a5,a4
2040125c:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:176 (discriminator 4)
        s.xl[0] ^= PADL(adlen);
20401260:	fb042703          	lw	a4,-80(s0)
20401264:	f6842683          	lw	a3,-152(s0)
20401268:	478d                	li	a5,3
2040126a:	02d7f563          	bgeu	a5,a3,20401294 <crypto_aead_decrypt+0x284>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:176 (discriminator 1)
2040126e:	f6842683          	lw	a3,-152(s0)
20401272:	47a1                	li	a5,8
20401274:	00f68e63          	beq	a3,a5,20401290 <crypto_aead_decrypt+0x280>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:176 (discriminator 3)
20401278:	f6842683          	lw	a3,-152(s0)
2040127c:	200007b7          	lui	a5,0x20000
20401280:	17f1                	addi	a5,a5,-4
20401282:	97b6                	add	a5,a5,a3
20401284:	078e                	slli	a5,a5,0x3
20401286:	800006b7          	lui	a3,0x80000
2040128a:	00f6d7b3          	srl	a5,a3,a5
2040128e:	a021                	j	20401296 <crypto_aead_decrypt+0x286>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:176 (discriminator 4)
20401290:	4781                	li	a5,0
20401292:	a011                	j	20401296 <crypto_aead_decrypt+0x286>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:176 (discriminator 2)
20401294:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:176 (discriminator 8)
20401296:	8fb9                	xor	a5,a5,a4
20401298:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:177 (discriminator 8)
        printstate("Padded AD", &s, debug);
2040129c:	f9c40793          	addi	a5,s0,-100
204012a0:	4010                	lw	a2,0(s0)
204012a2:	85be                	mv	a1,a5
204012a4:	204077b7          	lui	a5,0x20407
204012a8:	cd878513          	addi	a0,a5,-808 # 20406cd8 <_exit+0x66>
204012ac:	f3aff0ef          	jal	ra,204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:178 (discriminator 8)
        P6(&s);
204012b0:	f9c40793          	addi	a5,s0,-100
204012b4:	853e                	mv	a0,a5
204012b6:	edeff0ef          	jal	ra,20400994 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:181
    }
    /* domain separation */
    s.xl[4] ^= 1;
204012ba:	fc042783          	lw	a5,-64(s0)
204012be:	0017c793          	xori	a5,a5,1
204012c2:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:182
    printstate("Domain Separation", &s, debug);
204012c6:	f9c40793          	addi	a5,s0,-100
204012ca:	4010                	lw	a2,0(s0)
204012cc:	85be                	mv	a1,a5
204012ce:	204077b7          	lui	a5,0x20407
204012d2:	ce478513          	addi	a0,a5,-796 # 20406ce4 <_exit+0x72>
204012d6:	f10ff0ef          	jal	ra,204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:184
    u32 ch, cl;
    while (clen >= 8) {
204012da:	a859                	j	20401370 <crypto_aead_decrypt+0x360>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:186
        // printf("clen %d\n", clen);
        ch = *c;
204012dc:	f7442783          	lw	a5,-140(s0)
204012e0:	439c                	lw	a5,0(a5)
204012e2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:187
        c++;
204012e6:	f7442783          	lw	a5,-140(s0)
204012ea:	0791                	addi	a5,a5,4
204012ec:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:188
        cl = *c;
204012f0:	f7442783          	lw	a5,-140(s0)
204012f4:	439c                	lw	a5,0(a5)
204012f6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:189
        c++;
204012fa:	f7442783          	lw	a5,-140(s0)
204012fe:	0791                	addi	a5,a5,4
20401300:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:190
        *m = s.xh[0] ^ ch;
20401304:	f9c42703          	lw	a4,-100(s0)
20401308:	fec42783          	lw	a5,-20(s0)
2040130c:	8f3d                	xor	a4,a4,a5
2040130e:	f7c42783          	lw	a5,-132(s0)
20401312:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:191
        m++;
20401314:	f7c42783          	lw	a5,-132(s0)
20401318:	0791                	addi	a5,a5,4
2040131a:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:192
        *m = s.xl[0] ^ cl;
2040131e:	fb042703          	lw	a4,-80(s0)
20401322:	fe842783          	lw	a5,-24(s0)
20401326:	8f3d                	xor	a4,a4,a5
20401328:	f7c42783          	lw	a5,-132(s0)
2040132c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:193
        m++;
2040132e:	f7c42783          	lw	a5,-132(s0)
20401332:	0791                	addi	a5,a5,4
20401334:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:195

        s.xh[0] = ch;
20401338:	fec42783          	lw	a5,-20(s0)
2040133c:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:196
        s.xl[0] = cl;
20401340:	fe842783          	lw	a5,-24(s0)
20401344:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:197
        clen -= 8;
20401348:	f7042783          	lw	a5,-144(s0)
2040134c:	17e1                	addi	a5,a5,-8
2040134e:	f6f42823          	sw	a5,-144(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:198
        printstate("Absorb M", &s, debug);
20401352:	f9c40793          	addi	a5,s0,-100
20401356:	4010                	lw	a2,0(s0)
20401358:	85be                	mv	a1,a5
2040135a:	204077b7          	lui	a5,0x20407
2040135e:	cf878513          	addi	a0,a5,-776 # 20406cf8 <_exit+0x86>
20401362:	e84ff0ef          	jal	ra,204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:199
        P6(&s);
20401366:	f9c40793          	addi	a5,s0,-100
2040136a:	853e                	mv	a0,a5
2040136c:	e28ff0ef          	jal	ra,20400994 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:184
    while (clen >= 8) {
20401370:	f7042703          	lw	a4,-144(s0)
20401374:	479d                	li	a5,7
20401376:	f6e7e3e3          	bltu	a5,a4,204012dc <crypto_aead_decrypt+0x2cc>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:202
    }
    /* final block*/
    ch = 0;
2040137a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:203
    cl = 0;
2040137e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:204
    if (clen) {
20401382:	f7042783          	lw	a5,-144(s0)
20401386:	10078863          	beqz	a5,20401496 <crypto_aead_decrypt+0x486>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:205
        ch = TRUNH(clen, *c);
2040138a:	f7042703          	lw	a4,-144(s0)
2040138e:	4791                	li	a5,4
20401390:	00e7f663          	bgeu	a5,a4,2040139c <crypto_aead_decrypt+0x38c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:205 (discriminator 1)
20401394:	f7442783          	lw	a5,-140(s0)
20401398:	439c                	lw	a5,0(a5)
2040139a:	a025                	j	204013c2 <crypto_aead_decrypt+0x3b2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:205 (discriminator 2)
2040139c:	f7042783          	lw	a5,-144(s0)
204013a0:	c385                	beqz	a5,204013c0 <crypto_aead_decrypt+0x3b0>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:205 (discriminator 4)
204013a2:	f7442783          	lw	a5,-140(s0)
204013a6:	4398                	lw	a4,0(a5)
204013a8:	f7042683          	lw	a3,-144(s0)
204013ac:	4781                	li	a5,0
204013ae:	8f95                	sub	a5,a5,a3
204013b0:	078e                	slli	a5,a5,0x3
204013b2:	02078793          	addi	a5,a5,32
204013b6:	56fd                	li	a3,-1
204013b8:	00f697b3          	sll	a5,a3,a5
204013bc:	8ff9                	and	a5,a5,a4
204013be:	a011                	j	204013c2 <crypto_aead_decrypt+0x3b2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:205 (discriminator 5)
204013c0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:205 (discriminator 8)
204013c2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:206 (discriminator 8)
        c++;
204013c6:	f7442783          	lw	a5,-140(s0)
204013ca:	0791                	addi	a5,a5,4
204013cc:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:207 (discriminator 8)
        cl = TRUNL(clen, *c);
204013d0:	f7042703          	lw	a4,-144(s0)
204013d4:	4791                	li	a5,4
204013d6:	02e7f163          	bgeu	a5,a4,204013f8 <crypto_aead_decrypt+0x3e8>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:207 (discriminator 1)
204013da:	f7442783          	lw	a5,-140(s0)
204013de:	4398                	lw	a4,0(a5)
204013e0:	f7042683          	lw	a3,-144(s0)
204013e4:	4781                	li	a5,0
204013e6:	8f95                	sub	a5,a5,a3
204013e8:	078e                	slli	a5,a5,0x3
204013ea:	04078793          	addi	a5,a5,64
204013ee:	56fd                	li	a3,-1
204013f0:	00f697b3          	sll	a5,a3,a5
204013f4:	8ff9                	and	a5,a5,a4
204013f6:	a011                	j	204013fa <crypto_aead_decrypt+0x3ea>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:207 (discriminator 2)
204013f8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:207 (discriminator 4)
204013fa:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:208 (discriminator 4)
        c++;
204013fe:	f7442783          	lw	a5,-140(s0)
20401402:	0791                	addi	a5,a5,4
20401404:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:209 (discriminator 4)
        *m = TRUNH(clen, s.xh[0] ^ ch);
20401408:	f7042703          	lw	a4,-144(s0)
2040140c:	4791                	li	a5,4
2040140e:	00e7f863          	bgeu	a5,a4,2040141e <crypto_aead_decrypt+0x40e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:209 (discriminator 1)
20401412:	f9c42703          	lw	a4,-100(s0)
20401416:	fec42783          	lw	a5,-20(s0)
2040141a:	8fb9                	xor	a5,a5,a4
2040141c:	a035                	j	20401448 <crypto_aead_decrypt+0x438>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:209 (discriminator 2)
2040141e:	f7042783          	lw	a5,-144(s0)
20401422:	c395                	beqz	a5,20401446 <crypto_aead_decrypt+0x436>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:209 (discriminator 4)
20401424:	f9c42703          	lw	a4,-100(s0)
20401428:	fec42783          	lw	a5,-20(s0)
2040142c:	8f3d                	xor	a4,a4,a5
2040142e:	f7042683          	lw	a3,-144(s0)
20401432:	4781                	li	a5,0
20401434:	8f95                	sub	a5,a5,a3
20401436:	078e                	slli	a5,a5,0x3
20401438:	02078793          	addi	a5,a5,32
2040143c:	56fd                	li	a3,-1
2040143e:	00f697b3          	sll	a5,a3,a5
20401442:	8ff9                	and	a5,a5,a4
20401444:	a011                	j	20401448 <crypto_aead_decrypt+0x438>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:209 (discriminator 5)
20401446:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:209 (discriminator 8)
20401448:	f7c42703          	lw	a4,-132(s0)
2040144c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:210 (discriminator 8)
        m++;
2040144e:	f7c42783          	lw	a5,-132(s0)
20401452:	0791                	addi	a5,a5,4
20401454:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:211 (discriminator 8)
        *m = TRUNL(clen, s.xl[0] ^ cl);
20401458:	f7042703          	lw	a4,-144(s0)
2040145c:	4791                	li	a5,4
2040145e:	02e7f363          	bgeu	a5,a4,20401484 <crypto_aead_decrypt+0x474>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:211 (discriminator 1)
20401462:	fb042703          	lw	a4,-80(s0)
20401466:	fe842783          	lw	a5,-24(s0)
2040146a:	8f3d                	xor	a4,a4,a5
2040146c:	f7042683          	lw	a3,-144(s0)
20401470:	4781                	li	a5,0
20401472:	8f95                	sub	a5,a5,a3
20401474:	078e                	slli	a5,a5,0x3
20401476:	04078793          	addi	a5,a5,64
2040147a:	56fd                	li	a3,-1
2040147c:	00f697b3          	sll	a5,a3,a5
20401480:	8ff9                	and	a5,a5,a4
20401482:	a011                	j	20401486 <crypto_aead_decrypt+0x476>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:211 (discriminator 2)
20401484:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:211 (discriminator 4)
20401486:	f7c42703          	lw	a4,-132(s0)
2040148a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:212 (discriminator 4)
        m++;
2040148c:	f7c42783          	lw	a5,-132(s0)
20401490:	0791                	addi	a5,a5,4
20401492:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:214
    }
    s.xh[0] = CLEARH(clen, s.xh[0]);
20401496:	f7042703          	lw	a4,-144(s0)
2040149a:	4791                	li	a5,4
2040149c:	02e7e863          	bltu	a5,a4,204014cc <crypto_aead_decrypt+0x4bc>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:214 (discriminator 1)
204014a0:	f7042783          	lw	a5,-144(s0)
204014a4:	e781                	bnez	a5,204014ac <crypto_aead_decrypt+0x49c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:214 (discriminator 3)
204014a6:	f9c42783          	lw	a5,-100(s0)
204014aa:	a015                	j	204014ce <crypto_aead_decrypt+0x4be>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:214 (discriminator 4)
204014ac:	f9c42703          	lw	a4,-100(s0)
204014b0:	f7042683          	lw	a3,-144(s0)
204014b4:	4781                	li	a5,0
204014b6:	8f95                	sub	a5,a5,a3
204014b8:	078e                	slli	a5,a5,0x3
204014ba:	02078793          	addi	a5,a5,32
204014be:	56fd                	li	a3,-1
204014c0:	00f697b3          	sll	a5,a3,a5
204014c4:	fff7c793          	not	a5,a5
204014c8:	8ff9                	and	a5,a5,a4
204014ca:	a011                	j	204014ce <crypto_aead_decrypt+0x4be>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:214 (discriminator 2)
204014cc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:214 (discriminator 8)
204014ce:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:215 (discriminator 8)
    s.xl[0] = CLEARL(clen, s.xl[0]);
204014d2:	f7042703          	lw	a4,-144(s0)
204014d6:	4791                	li	a5,4
204014d8:	02e7f263          	bgeu	a5,a4,204014fc <crypto_aead_decrypt+0x4ec>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:215 (discriminator 1)
204014dc:	fb042703          	lw	a4,-80(s0)
204014e0:	f7042683          	lw	a3,-144(s0)
204014e4:	4781                	li	a5,0
204014e6:	8f95                	sub	a5,a5,a3
204014e8:	078e                	slli	a5,a5,0x3
204014ea:	04078793          	addi	a5,a5,64
204014ee:	56fd                	li	a3,-1
204014f0:	00f697b3          	sll	a5,a3,a5
204014f4:	fff7c793          	not	a5,a5
204014f8:	8ff9                	and	a5,a5,a4
204014fa:	a019                	j	20401500 <crypto_aead_decrypt+0x4f0>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:215 (discriminator 2)
204014fc:	fb042783          	lw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:215 (discriminator 4)
20401500:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:216 (discriminator 4)
    printstate("clear bytes", &s, debug);
20401504:	f9c40793          	addi	a5,s0,-100
20401508:	4010                	lw	a2,0(s0)
2040150a:	85be                	mv	a1,a5
2040150c:	204077b7          	lui	a5,0x20407
20401510:	d2478513          	addi	a0,a5,-732 # 20406d24 <_exit+0xb2>
20401514:	cd2ff0ef          	jal	ra,204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:217 (discriminator 4)
    s.xh[0] |= ch;
20401518:	f9c42703          	lw	a4,-100(s0)
2040151c:	fec42783          	lw	a5,-20(s0)
20401520:	8fd9                	or	a5,a5,a4
20401522:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:218 (discriminator 4)
    s.xl[0] |= cl;
20401526:	fb042703          	lw	a4,-80(s0)
2040152a:	fe842783          	lw	a5,-24(s0)
2040152e:	8fd9                	or	a5,a5,a4
20401530:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:219 (discriminator 4)
    s.xh[0] ^= PADH(clen);
20401534:	f9c42703          	lw	a4,-100(s0)
20401538:	f7042683          	lw	a3,-144(s0)
2040153c:	478d                	li	a5,3
2040153e:	00d7ea63          	bltu	a5,a3,20401552 <crypto_aead_decrypt+0x542>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:219 (discriminator 1)
20401542:	f7042783          	lw	a5,-144(s0)
20401546:	078e                	slli	a5,a5,0x3
20401548:	800006b7          	lui	a3,0x80000
2040154c:	00f6d7b3          	srl	a5,a3,a5
20401550:	a011                	j	20401554 <crypto_aead_decrypt+0x544>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:219 (discriminator 2)
20401552:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:219 (discriminator 4)
20401554:	8fb9                	xor	a5,a5,a4
20401556:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:220 (discriminator 4)
    s.xl[0] ^= PADL(clen);
2040155a:	fb042703          	lw	a4,-80(s0)
2040155e:	f7042683          	lw	a3,-144(s0)
20401562:	478d                	li	a5,3
20401564:	02d7f563          	bgeu	a5,a3,2040158e <crypto_aead_decrypt+0x57e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:220 (discriminator 1)
20401568:	f7042683          	lw	a3,-144(s0)
2040156c:	47a1                	li	a5,8
2040156e:	00f68e63          	beq	a3,a5,2040158a <crypto_aead_decrypt+0x57a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:220 (discriminator 3)
20401572:	f7042683          	lw	a3,-144(s0)
20401576:	200007b7          	lui	a5,0x20000
2040157a:	17f1                	addi	a5,a5,-4
2040157c:	97b6                	add	a5,a5,a3
2040157e:	078e                	slli	a5,a5,0x3
20401580:	800006b7          	lui	a3,0x80000
20401584:	00f6d7b3          	srl	a5,a3,a5
20401588:	a021                	j	20401590 <crypto_aead_decrypt+0x580>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:220 (discriminator 4)
2040158a:	4781                	li	a5,0
2040158c:	a011                	j	20401590 <crypto_aead_decrypt+0x580>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:220 (discriminator 2)
2040158e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:220 (discriminator 8)
20401590:	8fb9                	xor	a5,a5,a4
20401592:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:221 (discriminator 8)
    printstate("Pad M", &s, debug);
20401596:	f9c40793          	addi	a5,s0,-100
2040159a:	4010                	lw	a2,0(s0)
2040159c:	85be                	mv	a1,a5
2040159e:	204077b7          	lui	a5,0x20407
204015a2:	d0478513          	addi	a0,a5,-764 # 20406d04 <_exit+0x92>
204015a6:	c40ff0ef          	jal	ra,204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:223 (discriminator 8)
    /* Ending */
    s.xh[1] ^= K0.xh;
204015aa:	fa042703          	lw	a4,-96(s0)
204015ae:	fdc42783          	lw	a5,-36(s0)
204015b2:	8fb9                	xor	a5,a5,a4
204015b4:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:224 (discriminator 8)
    s.xl[1] ^= K0.xl;
204015b8:	fb442703          	lw	a4,-76(s0)
204015bc:	fe042783          	lw	a5,-32(s0)
204015c0:	8fb9                	xor	a5,a5,a4
204015c2:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:225 (discriminator 8)
    s.xh[2] ^= K1.xh;
204015c6:	fa442703          	lw	a4,-92(s0)
204015ca:	fd442783          	lw	a5,-44(s0)
204015ce:	8fb9                	xor	a5,a5,a4
204015d0:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:226 (discriminator 8)
    s.xl[2] ^= K1.xl;
204015d4:	fb842703          	lw	a4,-72(s0)
204015d8:	fd842783          	lw	a5,-40(s0)
204015dc:	8fb9                	xor	a5,a5,a4
204015de:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:227 (discriminator 8)
    printstate("Xor key 1", &s, debug);
204015e2:	f9c40793          	addi	a5,s0,-100
204015e6:	4010                	lw	a2,0(s0)
204015e8:	85be                	mv	a1,a5
204015ea:	204077b7          	lui	a5,0x20407
204015ee:	d0c78513          	addi	a0,a5,-756 # 20406d0c <_exit+0x9a>
204015f2:	bf4ff0ef          	jal	ra,204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:229 (discriminator 8)

    P12(&s);
204015f6:	f9c40793          	addi	a5,s0,-100
204015fa:	853e                	mv	a0,a5
204015fc:	b0aff0ef          	jal	ra,20400906 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:230 (discriminator 8)
    s.xh[3] ^= K0.xh;
20401600:	fa842703          	lw	a4,-88(s0)
20401604:	fdc42783          	lw	a5,-36(s0)
20401608:	8fb9                	xor	a5,a5,a4
2040160a:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:231 (discriminator 8)
    s.xl[3] ^= K0.xl;
2040160e:	fbc42703          	lw	a4,-68(s0)
20401612:	fe042783          	lw	a5,-32(s0)
20401616:	8fb9                	xor	a5,a5,a4
20401618:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:232 (discriminator 8)
    s.xh[4] ^= K1.xh;
2040161c:	fac42703          	lw	a4,-84(s0)
20401620:	fd442783          	lw	a5,-44(s0)
20401624:	8fb9                	xor	a5,a5,a4
20401626:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:233 (discriminator 8)
    s.xl[4] ^= K1.xl;
2040162a:	fc042703          	lw	a4,-64(s0)
2040162e:	fd842783          	lw	a5,-40(s0)
20401632:	8fb9                	xor	a5,a5,a4
20401634:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:234 (discriminator 8)
    printstate("Xor key 2", &s, debug);
20401638:	f9c40793          	addi	a5,s0,-100
2040163c:	4010                	lw	a2,0(s0)
2040163e:	85be                	mv	a1,a5
20401640:	204077b7          	lui	a5,0x20407
20401644:	d1878513          	addi	a0,a5,-744 # 20406d18 <_exit+0xa6>
20401648:	b9eff0ef          	jal	ra,204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:238 (discriminator 8)

    /* TAG*/
    u32 Tag[4];
    Tag[0] = s.xh[3];
2040164c:	fa842783          	lw	a5,-88(s0)
20401650:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:239 (discriminator 8)
    Tag[1] = s.xl[3];
20401654:	fbc42783          	lw	a5,-68(s0)
20401658:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:240 (discriminator 8)
    Tag[2] = s.xh[4];
2040165c:	fac42783          	lw	a5,-84(s0)
20401660:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:241 (discriminator 8)
    Tag[3] = s.xl[4];
20401664:	fc042783          	lw	a5,-64(s0)
20401668:	f8f42c23          	sw	a5,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:242 (discriminator 8)
    int res = 0;
2040166c:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:247 (discriminator 8)
    /*for(int i = 0 ; i < 4; i ++){
        res |= c[i] ^ Tag[i];
        printf("%08x  %08x\n", c[i], Tag[i]);
    }*/
    return res;
20401670:	fe442783          	lw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:248 (discriminator 8)
}
20401674:	853e                	mv	a0,a5
20401676:	40fa                	lw	ra,156(sp)
20401678:	446a                	lw	s0,152(sp)
2040167a:	610d                	addi	sp,sp,160
2040167c:	8082                	ret

2040167e <crypto_hash>:
crypto_hash():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:250

int crypto_hash(u32 *m, u32 mlen, u32 *h, int debug) {
2040167e:	715d                	addi	sp,sp,-80
20401680:	c686                	sw	ra,76(sp)
20401682:	c4a2                	sw	s0,72(sp)
20401684:	0880                	addi	s0,sp,80
20401686:	faa42e23          	sw	a0,-68(s0)
2040168a:	fab42c23          	sw	a1,-72(s0)
2040168e:	fac42a23          	sw	a2,-76(s0)
20401692:	fad42823          	sw	a3,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:254

    /* initialize */
    ascon_state_t s;
    s.xh[0] = 0x00400c00;
20401696:	004017b7          	lui	a5,0x401
2040169a:	c0078793          	addi	a5,a5,-1024 # 400c00 <__heap_size+0x400400>
2040169e:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:255
    s.xl[0] = 0x00000100;
204016a2:	10000793          	li	a5,256
204016a6:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:256
    s.xh[1] = 0;
204016aa:	fc042423          	sw	zero,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:257
    s.xl[1] = 0;
204016ae:	fc042e23          	sw	zero,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:258
    s.xh[2] = 0;
204016b2:	fc042623          	sw	zero,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:259
    s.xl[2] = 0;
204016b6:	fe042023          	sw	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:260
    s.xh[3] = 0;
204016ba:	fc042823          	sw	zero,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:261
    s.xl[3] = 0;
204016be:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:262
    s.xh[4] = 0;
204016c2:	fc042a23          	sw	zero,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:263
    s.xl[4] = 0;
204016c6:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:264
    printstate("After init", &s, debug);
204016ca:	fc440793          	addi	a5,s0,-60
204016ce:	fb042603          	lw	a2,-80(s0)
204016d2:	85be                	mv	a1,a5
204016d4:	204077b7          	lui	a5,0x20407
204016d8:	cb478513          	addi	a0,a5,-844 # 20406cb4 <_exit+0x42>
204016dc:	b0aff0ef          	jal	ra,204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:265
    P12(&s);
204016e0:	fc440793          	addi	a5,s0,-60
204016e4:	853e                	mv	a0,a5
204016e6:	a20ff0ef          	jal	ra,20400906 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:268


    if (mlen) {
204016ea:	fb842783          	lw	a5,-72(s0)
204016ee:	16078863          	beqz	a5,2040185e <crypto_hash+0x1e0>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:269
        while (mlen >= 8) {
204016f2:	a085                	j	20401752 <crypto_hash+0xd4>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:270
            s.xh[0] ^= *m;
204016f4:	fc442703          	lw	a4,-60(s0)
204016f8:	fbc42783          	lw	a5,-68(s0)
204016fc:	439c                	lw	a5,0(a5)
204016fe:	8fb9                	xor	a5,a5,a4
20401700:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:271
            m++;
20401704:	fbc42783          	lw	a5,-68(s0)
20401708:	0791                	addi	a5,a5,4
2040170a:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:272
            s.xl[0] ^= *m;
2040170e:	fd842703          	lw	a4,-40(s0)
20401712:	fbc42783          	lw	a5,-68(s0)
20401716:	439c                	lw	a5,0(a5)
20401718:	8fb9                	xor	a5,a5,a4
2040171a:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:273
            m++;
2040171e:	fbc42783          	lw	a5,-68(s0)
20401722:	0791                	addi	a5,a5,4
20401724:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:274
            P12(&s);
20401728:	fc440793          	addi	a5,s0,-60
2040172c:	853e                	mv	a0,a5
2040172e:	9d8ff0ef          	jal	ra,20400906 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:275
            printstate("Absorb AD", &s, debug);
20401732:	fc440793          	addi	a5,s0,-60
20401736:	fb042603          	lw	a2,-80(s0)
2040173a:	85be                	mv	a1,a5
2040173c:	204077b7          	lui	a5,0x20407
20401740:	ccc78513          	addi	a0,a5,-820 # 20406ccc <_exit+0x5a>
20401744:	aa2ff0ef          	jal	ra,204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:276
            mlen -= 8;
20401748:	fb842783          	lw	a5,-72(s0)
2040174c:	17e1                	addi	a5,a5,-8
2040174e:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:269
        while (mlen >= 8) {
20401752:	fb842703          	lw	a4,-72(s0)
20401756:	479d                	li	a5,7
20401758:	f8e7eee3          	bltu	a5,a4,204016f4 <crypto_hash+0x76>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:278
        }
        s.xh[0] ^= TRUNH(mlen, *m);
2040175c:	fc442703          	lw	a4,-60(s0)
20401760:	fb842683          	lw	a3,-72(s0)
20401764:	4791                	li	a5,4
20401766:	00d7f663          	bgeu	a5,a3,20401772 <crypto_hash+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:278 (discriminator 1)
2040176a:	fbc42783          	lw	a5,-68(s0)
2040176e:	439c                	lw	a5,0(a5)
20401770:	a025                	j	20401798 <crypto_hash+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:278 (discriminator 2)
20401772:	fb842783          	lw	a5,-72(s0)
20401776:	c385                	beqz	a5,20401796 <crypto_hash+0x118>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:278 (discriminator 4)
20401778:	fbc42783          	lw	a5,-68(s0)
2040177c:	4394                	lw	a3,0(a5)
2040177e:	fb842603          	lw	a2,-72(s0)
20401782:	4781                	li	a5,0
20401784:	8f91                	sub	a5,a5,a2
20401786:	078e                	slli	a5,a5,0x3
20401788:	02078793          	addi	a5,a5,32
2040178c:	567d                	li	a2,-1
2040178e:	00f617b3          	sll	a5,a2,a5
20401792:	8ff5                	and	a5,a5,a3
20401794:	a011                	j	20401798 <crypto_hash+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:278 (discriminator 5)
20401796:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:278 (discriminator 8)
20401798:	8fb9                	xor	a5,a5,a4
2040179a:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:279 (discriminator 8)
        m++;
2040179e:	fbc42783          	lw	a5,-68(s0)
204017a2:	0791                	addi	a5,a5,4
204017a4:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:280 (discriminator 8)
        s.xl[0] ^= TRUNL(mlen, *m);
204017a8:	fd842703          	lw	a4,-40(s0)
204017ac:	fb842683          	lw	a3,-72(s0)
204017b0:	4791                	li	a5,4
204017b2:	02d7f163          	bgeu	a5,a3,204017d4 <crypto_hash+0x156>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:280 (discriminator 1)
204017b6:	fbc42783          	lw	a5,-68(s0)
204017ba:	4394                	lw	a3,0(a5)
204017bc:	fb842603          	lw	a2,-72(s0)
204017c0:	4781                	li	a5,0
204017c2:	8f91                	sub	a5,a5,a2
204017c4:	078e                	slli	a5,a5,0x3
204017c6:	04078793          	addi	a5,a5,64
204017ca:	567d                	li	a2,-1
204017cc:	00f617b3          	sll	a5,a2,a5
204017d0:	8ff5                	and	a5,a5,a3
204017d2:	a011                	j	204017d6 <crypto_hash+0x158>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:280 (discriminator 2)
204017d4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:280 (discriminator 4)
204017d6:	8fb9                	xor	a5,a5,a4
204017d8:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:282 (discriminator 4)

        s.xh[0] ^= PADH(mlen);
204017dc:	fc442703          	lw	a4,-60(s0)
204017e0:	fb842683          	lw	a3,-72(s0)
204017e4:	478d                	li	a5,3
204017e6:	00d7ea63          	bltu	a5,a3,204017fa <crypto_hash+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:282 (discriminator 1)
204017ea:	fb842783          	lw	a5,-72(s0)
204017ee:	078e                	slli	a5,a5,0x3
204017f0:	800006b7          	lui	a3,0x80000
204017f4:	00f6d7b3          	srl	a5,a3,a5
204017f8:	a011                	j	204017fc <crypto_hash+0x17e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:282 (discriminator 2)
204017fa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:282 (discriminator 4)
204017fc:	8fb9                	xor	a5,a5,a4
204017fe:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:283 (discriminator 4)
        s.xl[0] ^= PADL(mlen);
20401802:	fd842703          	lw	a4,-40(s0)
20401806:	fb842683          	lw	a3,-72(s0)
2040180a:	478d                	li	a5,3
2040180c:	02d7f563          	bgeu	a5,a3,20401836 <crypto_hash+0x1b8>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:283 (discriminator 1)
20401810:	fb842683          	lw	a3,-72(s0)
20401814:	47a1                	li	a5,8
20401816:	00f68e63          	beq	a3,a5,20401832 <crypto_hash+0x1b4>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:283 (discriminator 3)
2040181a:	fb842683          	lw	a3,-72(s0)
2040181e:	200007b7          	lui	a5,0x20000
20401822:	17f1                	addi	a5,a5,-4
20401824:	97b6                	add	a5,a5,a3
20401826:	078e                	slli	a5,a5,0x3
20401828:	800006b7          	lui	a3,0x80000
2040182c:	00f6d7b3          	srl	a5,a3,a5
20401830:	a021                	j	20401838 <crypto_hash+0x1ba>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:283 (discriminator 4)
20401832:	4781                	li	a5,0
20401834:	a011                	j	20401838 <crypto_hash+0x1ba>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:283 (discriminator 2)
20401836:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:283 (discriminator 8)
20401838:	8fb9                	xor	a5,a5,a4
2040183a:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:284 (discriminator 8)
        printstate("Padded AD", &s, debug);
2040183e:	fc440793          	addi	a5,s0,-60
20401842:	fb042603          	lw	a2,-80(s0)
20401846:	85be                	mv	a1,a5
20401848:	204077b7          	lui	a5,0x20407
2040184c:	cd878513          	addi	a0,a5,-808 # 20406cd8 <_exit+0x66>
20401850:	996ff0ef          	jal	ra,204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:285 (discriminator 8)
        P12(&s);
20401854:	fc440793          	addi	a5,s0,-60
20401858:	853e                	mv	a0,a5
2040185a:	8acff0ef          	jal	ra,20400906 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:287
    }
    for(int i = 0 ; i < 4 ; i++){
2040185e:	fe042623          	sw	zero,-20(s0)
20401862:	a8b1                	j	204018be <crypto_hash+0x240>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:288
        h[i*2] = s.xh[0] ;
20401864:	fec42783          	lw	a5,-20(s0)
20401868:	078e                	slli	a5,a5,0x3
2040186a:	fb442703          	lw	a4,-76(s0)
2040186e:	97ba                	add	a5,a5,a4
20401870:	fc442703          	lw	a4,-60(s0)
20401874:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:289
        h[i*2+1] = s.xl[0] ;
20401876:	fec42783          	lw	a5,-20(s0)
2040187a:	078e                	slli	a5,a5,0x3
2040187c:	0791                	addi	a5,a5,4
2040187e:	fb442703          	lw	a4,-76(s0)
20401882:	97ba                	add	a5,a5,a4
20401884:	fd842703          	lw	a4,-40(s0)
20401888:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:290
        if(i < 3){
2040188a:	fec42703          	lw	a4,-20(s0)
2040188e:	4789                	li	a5,2
20401890:	00e7c763          	blt	a5,a4,2040189e <crypto_hash+0x220>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:291
            P12(&s);
20401894:	fc440793          	addi	a5,s0,-60
20401898:	853e                	mv	a0,a5
2040189a:	86cff0ef          	jal	ra,20400906 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:293 (discriminator 2)
        }
        printstate("Hash Round",&s,debug);
2040189e:	fc440793          	addi	a5,s0,-60
204018a2:	fb042603          	lw	a2,-80(s0)
204018a6:	85be                	mv	a1,a5
204018a8:	204077b7          	lui	a5,0x20407
204018ac:	d3078513          	addi	a0,a5,-720 # 20406d30 <_exit+0xbe>
204018b0:	936ff0ef          	jal	ra,204009e6 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:287 (discriminator 2)
    for(int i = 0 ; i < 4 ; i++){
204018b4:	fec42783          	lw	a5,-20(s0)
204018b8:	0785                	addi	a5,a5,1
204018ba:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:287 (discriminator 1)
204018be:	fec42703          	lw	a4,-20(s0)
204018c2:	478d                	li	a5,3
204018c4:	fae7d0e3          	bge	a5,a4,20401864 <crypto_hash+0x1e6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:295
    }
    return 0;
204018c8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../Asconref/aead.h:296
}
204018ca:	853e                	mv	a0,a5
204018cc:	40b6                	lw	ra,76(sp)
204018ce:	4426                	lw	s0,72(sp)
204018d0:	6161                	addi	sp,sp,80
204018d2:	8082                	ret

204018d4 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../RoCCcommon/csr.h:49

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
204018d4:	1101                	addi	sp,sp,-32
204018d6:	ce22                	sw	s0,28(sp)
204018d8:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../RoCCcommon/csr.h:50
    int tmp = 0;
204018da:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../RoCCcommon/csr.h:51
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
204018de:	b00027f3          	csrr	a5,mcycle
204018e2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../RoCCcommon/csr.h:52
    return tmp;
204018e6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/../RoCCcommon/csr.h:53
}
204018ea:	853e                	mv	a0,a5
204018ec:	4472                	lw	s0,28(sp)
204018ee:	6105                	addi	sp,sp,32
204018f0:	8082                	ret

204018f2 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:6
#include "../AsconHW/AEAD_HW.h"
#include "../Asconref/aead.h"
#include <stdio.h>
#include "../RoCCcommon/csr.h"

int main(void) {
204018f2:	7139                	addi	sp,sp,-64
204018f4:	de06                	sw	ra,60(sp)
204018f6:	dc22                	sw	s0,56(sp)
204018f8:	0080                	addi	s0,sp,64
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:7
    u32 plain_len = 32;
204018fa:	02000793          	li	a5,32
204018fe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:8
    u32 asso_len = 32; /// CReo que asignaste a memoria
20401902:	02000793          	li	a5,32
20401906:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:9
    u32 clen = 0;
2040190a:	fc042823          	sw	zero,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:10
    u32 num_rand = 12;
2040190e:	47b1                	li	a5,12
20401910:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:13


    u32 plain_len_int = plain_len / 8;
20401914:	fec42783          	lw	a5,-20(s0)
20401918:	838d                	srli	a5,a5,0x3
2040191a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:14
    plain_len_int = (plain_len % 8 == 0) ? plain_len_int * 2 : plain_len_int * 2 + 2;
2040191e:	fec42783          	lw	a5,-20(s0)
20401922:	8b9d                	andi	a5,a5,7
20401924:	e789                	bnez	a5,2040192e <main+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:14 (discriminator 1)
20401926:	fe042783          	lw	a5,-32(s0)
2040192a:	0786                	slli	a5,a5,0x1
2040192c:	a029                	j	20401936 <main+0x44>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:14 (discriminator 2)
2040192e:	fe042783          	lw	a5,-32(s0)
20401932:	0785                	addi	a5,a5,1
20401934:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:14 (discriminator 4)
20401936:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:30 (discriminator 4)
    static u32 Key[4] = {0x11111111, 0x22222222, 0x33333333, 0x44444445};

    static u32 *tag_addr;


    printf("Init Ascon Dec \n");
2040193a:	204077b7          	lui	a5,0x20407
2040193e:	d3c78513          	addi	a0,a5,-708 # 20406d3c <_exit+0xca>
20401942:	70a000ef          	jal	ra,2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:31 (discriminator 4)
    printf("Ad addr = %08x\n", asso_text);
20401946:	800007b7          	lui	a5,0x80000
2040194a:	00078593          	mv	a1,a5
2040194e:	204077b7          	lui	a5,0x20407
20401952:	d4c78513          	addi	a0,a5,-692 # 20406d4c <_exit+0xda>
20401956:	232d                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:32 (discriminator 4)
    printf("Pl addr = %08x\n", plain_text);
20401958:	800007b7          	lui	a5,0x80000
2040195c:	7d078593          	addi	a1,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffcc4c>
20401960:	204077b7          	lui	a5,0x20407
20401964:	d5c78513          	addi	a0,a5,-676 # 20406d5c <_exit+0xea>
20401968:	2b21                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:33 (discriminator 4)
    printf("Ct addr = %08x\n", cipher_text);
2040196a:	800017b7          	lui	a5,0x80001
2040196e:	73c78593          	addi	a1,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffdbb8>
20401972:	204077b7          	lui	a5,0x20407
20401976:	d6c78513          	addi	a0,a5,-660 # 20406d6c <_exit+0xfa>
2040197a:	2319                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:34 (discriminator 4)
    printf("Ke addr = %08x\n", Key);
2040197c:	800017b7          	lui	a5,0x80001
20401980:	fa078593          	addi	a1,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffd41c>
20401984:	204077b7          	lui	a5,0x20407
20401988:	d7c78513          	addi	a0,a5,-644 # 20406d7c <_exit+0x10a>
2040198c:	29d5                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:35 (discriminator 4)
    printf("Np addr = %08x\n", Nonce);
2040198e:	800017b7          	lui	a5,0x80001
20401992:	fb078593          	addi	a1,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffd42c>
20401996:	204077b7          	lui	a5,0x20407
2040199a:	d8c78513          	addi	a0,a5,-628 # 20406d8c <_exit+0x11a>
2040199e:	21cd                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:36 (discriminator 4)
    printf("hash addr = %08x\n", hash);
204019a0:	01418593          	addi	a1,gp,20 # 80001f1c <hash.2808>
204019a4:	204077b7          	lui	a5,0x20407
204019a8:	d9c78513          	addi	a0,a5,-612 # 20406d9c <_exit+0x12a>
204019ac:	29d1                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:38 (discriminator 4)
    unsigned start, end;
    int rd = 0;
204019ae:	fc042e23          	sw	zero,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:40 (discriminator 4)
    // RoCC
    write_csr(mstatus, MSTATUS_XS);
204019b2:	67e1                	lui	a5,0x18
204019b4:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:48 (discriminator 4)
    HASH(plain_text,plain_len,hash);
    printf(" Finish Hash: %07x \n", rd);
    printC(hash,9,0,1);*/


    printf("Hash HW: \n");
204019b8:	204077b7          	lui	a5,0x20407
204019bc:	db078513          	addi	a0,a5,-592 # 20406db0 <_exit+0x13e>
204019c0:	68c000ef          	jal	ra,2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:49 (discriminator 4)
    start = rdcycle();
204019c4:	3f01                	jal	204018d4 <rdcycle>
204019c6:	87aa                	mv	a5,a0
204019c8:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:50 (discriminator 4)
    HASH(plain_text, plain_len, hash);
204019cc:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2808>
204019d0:	fec42583          	lw	a1,-20(s0)
204019d4:	800007b7          	lui	a5,0x80000
204019d8:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffcc4c>
204019dc:	a75fe0ef          	jal	ra,20400450 <HASH>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:51 (discriminator 4)
    end = rdcycle();
204019e0:	3dd5                	jal	204018d4 <rdcycle>
204019e2:	87aa                	mv	a5,a0
204019e4:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:52 (discriminator 4)
    printf("Total time HW = %d cycles\n", end - start);
204019e8:	fd442703          	lw	a4,-44(s0)
204019ec:	fd842783          	lw	a5,-40(s0)
204019f0:	40f707b3          	sub	a5,a4,a5
204019f4:	85be                	mv	a1,a5
204019f6:	204077b7          	lui	a5,0x20407
204019fa:	dbc78513          	addi	a0,a5,-580 # 20406dbc <_exit+0x14a>
204019fe:	2149                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:53 (discriminator 4)
    printC(hash, 8, 1, 1);
20401a00:	4685                	li	a3,1
20401a02:	4605                	li	a2,1
20401a04:	45a1                	li	a1,8
20401a06:	01418513          	addi	a0,gp,20 # 80001f1c <hash.2808>
20401a0a:	ff6fe0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:54 (discriminator 4)
    printf("\nX\n");
20401a0e:	204077b7          	lui	a5,0x20407
20401a12:	dd878513          	addi	a0,a5,-552 # 20406dd8 <_exit+0x166>
20401a16:	636000ef          	jal	ra,2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:55 (discriminator 4)
    printf("Hash SW: \n");
20401a1a:	204077b7          	lui	a5,0x20407
20401a1e:	ddc78513          	addi	a0,a5,-548 # 20406ddc <_exit+0x16a>
20401a22:	62a000ef          	jal	ra,2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:56 (discriminator 4)
    start = rdcycle();
20401a26:	357d                	jal	204018d4 <rdcycle>
20401a28:	87aa                	mv	a5,a0
20401a2a:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:57 (discriminator 4)
    crypto_hash(plain_text, plain_len, hash, 0);
20401a2e:	4681                	li	a3,0
20401a30:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2808>
20401a34:	fec42583          	lw	a1,-20(s0)
20401a38:	800007b7          	lui	a5,0x80000
20401a3c:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffcc4c>
20401a40:	393d                	jal	2040167e <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:58 (discriminator 4)
    end = rdcycle();
20401a42:	3d49                	jal	204018d4 <rdcycle>
20401a44:	87aa                	mv	a5,a0
20401a46:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:59 (discriminator 4)
    printf("Total time SW = %d cycles\n", end - start);
20401a4a:	fd442703          	lw	a4,-44(s0)
20401a4e:	fd842783          	lw	a5,-40(s0)
20401a52:	40f707b3          	sub	a5,a4,a5
20401a56:	85be                	mv	a1,a5
20401a58:	204077b7          	lui	a5,0x20407
20401a5c:	de878513          	addi	a0,a5,-536 # 20406de8 <_exit+0x176>
20401a60:	2105                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:60 (discriminator 4)
    printC(hash, 8, 1, 1);
20401a62:	4685                	li	a3,1
20401a64:	4605                	li	a2,1
20401a66:	45a1                	li	a1,8
20401a68:	01418513          	addi	a0,gp,20 # 80001f1c <hash.2808>
20401a6c:	f94fe0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:61 (discriminator 4)
    printf("\nX\n");
20401a70:	204077b7          	lui	a5,0x20407
20401a74:	dd878513          	addi	a0,a5,-552 # 20406dd8 <_exit+0x166>
20401a78:	2bd1                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:64 (discriminator 4)


    printf("Rand Seed: \n");
20401a7a:	204077b7          	lui	a5,0x20407
20401a7e:	e0478513          	addi	a0,a5,-508 # 20406e04 <_exit+0x192>
20401a82:	23e9                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:65 (discriminator 4)
    start = rdcycle();
20401a84:	3d81                	jal	204018d4 <rdcycle>
20401a86:	87aa                	mv	a5,a0
20401a88:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:66 (discriminator 4)
    SEED();
20401a8c:	a57fe0ef          	jal	ra,204004e2 <SEED>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:67 (discriminator 4)
    end = rdcycle();
20401a90:	3591                	jal	204018d4 <rdcycle>
20401a92:	87aa                	mv	a5,a0
20401a94:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:68 (discriminator 4)
    printf("Total time HW = %08x cycles\n", end - start);
20401a98:	fd442703          	lw	a4,-44(s0)
20401a9c:	fd842783          	lw	a5,-40(s0)
20401aa0:	40f707b3          	sub	a5,a4,a5
20401aa4:	85be                	mv	a1,a5
20401aa6:	204077b7          	lui	a5,0x20407
20401aaa:	e1078513          	addi	a0,a5,-496 # 20406e10 <_exit+0x19e>
20401aae:	2ec9                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:69 (discriminator 4)
    printf("Rand HW: \n");
20401ab0:	204077b7          	lui	a5,0x20407
20401ab4:	e3078513          	addi	a0,a5,-464 # 20406e30 <_exit+0x1be>
20401ab8:	2b51                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:70 (discriminator 4)
    start = rdcycle();
20401aba:	3d29                	jal	204018d4 <rdcycle>
20401abc:	87aa                	mv	a5,a0
20401abe:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:71 (discriminator 4)
    RAND(rand_arr, num_rand);
20401ac2:	fe442583          	lw	a1,-28(s0)
20401ac6:	800027b7          	lui	a5,0x80002
20401aca:	f4478513          	addi	a0,a5,-188 # 80001f44 <metal_segment_heap_target_end+0xffffe3c0>
20401ace:	9cffe0ef          	jal	ra,2040049c <RAND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:72 (discriminator 4)
    end = rdcycle();
20401ad2:	3509                	jal	204018d4 <rdcycle>
20401ad4:	87aa                	mv	a5,a0
20401ad6:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:73 (discriminator 4)
    printf("Total time HW = %08x cycles\n", end - start);
20401ada:	fd442703          	lw	a4,-44(s0)
20401ade:	fd842783          	lw	a5,-40(s0)
20401ae2:	40f707b3          	sub	a5,a4,a5
20401ae6:	85be                	mv	a1,a5
20401ae8:	204077b7          	lui	a5,0x20407
20401aec:	e1078513          	addi	a0,a5,-496 # 20406e10 <_exit+0x19e>
20401af0:	2e41                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:74 (discriminator 4)
    printC(rand_arr, num_rand * 4, 0, 1);
20401af2:	fe442783          	lw	a5,-28(s0)
20401af6:	078a                	slli	a5,a5,0x2
20401af8:	4685                	li	a3,1
20401afa:	4601                	li	a2,0
20401afc:	85be                	mv	a1,a5
20401afe:	800027b7          	lui	a5,0x80002
20401b02:	f4478513          	addi	a0,a5,-188 # 80001f44 <metal_segment_heap_target_end+0xffffe3c0>
20401b06:	efafe0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:75 (discriminator 4)
    printf("\nX\n");
20401b0a:	204077b7          	lui	a5,0x20407
20401b0e:	dd878513          	addi	a0,a5,-552 # 20406dd8 <_exit+0x166>
20401b12:	2b2d                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:77 (discriminator 4)

    printf("Enc HW: \n");
20401b14:	204077b7          	lui	a5,0x20407
20401b18:	e3c78513          	addi	a0,a5,-452 # 20406e3c <_exit+0x1ca>
20401b1c:	2b05                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:78 (discriminator 4)
    start = rdcycle();
20401b1e:	3b5d                	jal	204018d4 <rdcycle>
20401b20:	87aa                	mv	a5,a0
20401b22:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:79 (discriminator 4)
    AEAD_ENC(asso_text, asso_len, plain_text, plain_len, cipher_text, Nonce, Key);
20401b26:	800017b7          	lui	a5,0x80001
20401b2a:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffd41c>
20401b2e:	800017b7          	lui	a5,0x80001
20401b32:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffd42c>
20401b36:	80001737          	lui	a4,0x80001
20401b3a:	73c70713          	addi	a4,a4,1852 # 8000173c <metal_segment_heap_target_end+0xffffdbb8>
20401b3e:	fec42683          	lw	a3,-20(s0)
20401b42:	80000637          	lui	a2,0x80000
20401b46:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffcc4c>
20401b4a:	fe842583          	lw	a1,-24(s0)
20401b4e:	80000537          	lui	a0,0x80000
20401b52:	00050513          	mv	a0,a0
20401b56:	f68fe0ef          	jal	ra,204002be <AEAD_ENC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:80 (discriminator 4)
    end = rdcycle();
20401b5a:	3bad                	jal	204018d4 <rdcycle>
20401b5c:	87aa                	mv	a5,a0
20401b5e:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:81 (discriminator 4)
    printf("Total time HW = %d cycles\n", end - start);
20401b62:	fd442703          	lw	a4,-44(s0)
20401b66:	fd842783          	lw	a5,-40(s0)
20401b6a:	40f707b3          	sub	a5,a4,a5
20401b6e:	85be                	mv	a1,a5
20401b70:	204077b7          	lui	a5,0x20407
20401b74:	dbc78513          	addi	a0,a5,-580 # 20406dbc <_exit+0x14a>
20401b78:	2621                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:82 (discriminator 4)
    printC(cipher_text, plain_len_int + 4, 1, 1);
20401b7a:	fe042783          	lw	a5,-32(s0)
20401b7e:	0791                	addi	a5,a5,4
20401b80:	4685                	li	a3,1
20401b82:	4605                	li	a2,1
20401b84:	85be                	mv	a1,a5
20401b86:	800017b7          	lui	a5,0x80001
20401b8a:	73c78513          	addi	a0,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffdbb8>
20401b8e:	e72fe0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:83 (discriminator 4)
    printf("\nX\n");
20401b92:	204077b7          	lui	a5,0x20407
20401b96:	dd878513          	addi	a0,a5,-552 # 20406dd8 <_exit+0x166>
20401b9a:	294d                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:84 (discriminator 4)
    printf("Enc SW: \n");
20401b9c:	204077b7          	lui	a5,0x20407
20401ba0:	e4878513          	addi	a0,a5,-440 # 20406e48 <_exit+0x1d6>
20401ba4:	2165                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:85 (discriminator 4)
    start = rdcycle();
20401ba6:	333d                	jal	204018d4 <rdcycle>
20401ba8:	87aa                	mv	a5,a0
20401baa:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:86 (discriminator 4)
    crypto_aead_encrypt(cipher_text, &clen, plain_text, plain_len, asso_text, asso_len, Nonce, Key, 0);
20401bae:	fd040593          	addi	a1,s0,-48
20401bb2:	c002                	sw	zero,0(sp)
20401bb4:	800017b7          	lui	a5,0x80001
20401bb8:	fa078893          	addi	a7,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffd41c>
20401bbc:	800017b7          	lui	a5,0x80001
20401bc0:	fb078813          	addi	a6,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffd42c>
20401bc4:	fe842783          	lw	a5,-24(s0)
20401bc8:	80000737          	lui	a4,0x80000
20401bcc:	00070713          	mv	a4,a4
20401bd0:	fec42683          	lw	a3,-20(s0)
20401bd4:	80000637          	lui	a2,0x80000
20401bd8:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffcc4c>
20401bdc:	80001537          	lui	a0,0x80001
20401be0:	73c50513          	addi	a0,a0,1852 # 8000173c <metal_segment_heap_target_end+0xffffdbb8>
20401be4:	e7dfe0ef          	jal	ra,20400a60 <crypto_aead_encrypt>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:87 (discriminator 4)
    end = rdcycle();
20401be8:	31f5                	jal	204018d4 <rdcycle>
20401bea:	87aa                	mv	a5,a0
20401bec:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:88 (discriminator 4)
    printf("Total time SW = %d cycles\n", end - start);
20401bf0:	fd442703          	lw	a4,-44(s0)
20401bf4:	fd842783          	lw	a5,-40(s0)
20401bf8:	40f707b3          	sub	a5,a4,a5
20401bfc:	85be                	mv	a1,a5
20401bfe:	204077b7          	lui	a5,0x20407
20401c02:	de878513          	addi	a0,a5,-536 # 20406de8 <_exit+0x176>
20401c06:	2cad                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:89 (discriminator 4)
    printC(cipher_text, plain_len_int + 4, 1, 1);
20401c08:	fe042783          	lw	a5,-32(s0)
20401c0c:	0791                	addi	a5,a5,4
20401c0e:	4685                	li	a3,1
20401c10:	4605                	li	a2,1
20401c12:	85be                	mv	a1,a5
20401c14:	800017b7          	lui	a5,0x80001
20401c18:	73c78513          	addi	a0,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffdbb8>
20401c1c:	de4fe0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:90 (discriminator 4)
    printf("\nX\n");
20401c20:	204077b7          	lui	a5,0x20407
20401c24:	dd878513          	addi	a0,a5,-552 # 20406dd8 <_exit+0x166>
20401c28:	2115                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:92 (discriminator 4)

    printf("Rand Seed: \n");
20401c2a:	204077b7          	lui	a5,0x20407
20401c2e:	e0478513          	addi	a0,a5,-508 # 20406e04 <_exit+0x192>
20401c32:	2929                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:93 (discriminator 4)
    start = rdcycle();
20401c34:	3145                	jal	204018d4 <rdcycle>
20401c36:	87aa                	mv	a5,a0
20401c38:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:94 (discriminator 4)
    SEED();
20401c3c:	8a7fe0ef          	jal	ra,204004e2 <SEED>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:95 (discriminator 4)
    end = rdcycle();
20401c40:	3951                	jal	204018d4 <rdcycle>
20401c42:	87aa                	mv	a5,a0
20401c44:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:96 (discriminator 4)
    printf("Total time HW = %08x cycles\n", end - start);
20401c48:	fd442703          	lw	a4,-44(s0)
20401c4c:	fd842783          	lw	a5,-40(s0)
20401c50:	40f707b3          	sub	a5,a4,a5
20401c54:	85be                	mv	a1,a5
20401c56:	204077b7          	lui	a5,0x20407
20401c5a:	e1078513          	addi	a0,a5,-496 # 20406e10 <_exit+0x19e>
20401c5e:	240d                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:97 (discriminator 4)
    printf("Rand HW: \n");
20401c60:	204077b7          	lui	a5,0x20407
20401c64:	e3078513          	addi	a0,a5,-464 # 20406e30 <_exit+0x1be>
20401c68:	26d5                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:98 (discriminator 4)
    start = rdcycle();
20401c6a:	31ad                	jal	204018d4 <rdcycle>
20401c6c:	87aa                	mv	a5,a0
20401c6e:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:99 (discriminator 4)
    RAND(rand_arr, num_rand);
20401c72:	fe442583          	lw	a1,-28(s0)
20401c76:	800027b7          	lui	a5,0x80002
20401c7a:	f4478513          	addi	a0,a5,-188 # 80001f44 <metal_segment_heap_target_end+0xffffe3c0>
20401c7e:	81ffe0ef          	jal	ra,2040049c <RAND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:100 (discriminator 4)
    end = rdcycle();
20401c82:	3989                	jal	204018d4 <rdcycle>
20401c84:	87aa                	mv	a5,a0
20401c86:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:101 (discriminator 4)
    printf("Total time HW = %08x cycles\n", end - start);
20401c8a:	fd442703          	lw	a4,-44(s0)
20401c8e:	fd842783          	lw	a5,-40(s0)
20401c92:	40f707b3          	sub	a5,a4,a5
20401c96:	85be                	mv	a1,a5
20401c98:	204077b7          	lui	a5,0x20407
20401c9c:	e1078513          	addi	a0,a5,-496 # 20406e10 <_exit+0x19e>
20401ca0:	22c5                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:102 (discriminator 4)
    printC(rand_arr, num_rand * 4, 0, 1);
20401ca2:	fe442783          	lw	a5,-28(s0)
20401ca6:	078a                	slli	a5,a5,0x2
20401ca8:	4685                	li	a3,1
20401caa:	4601                	li	a2,0
20401cac:	85be                	mv	a1,a5
20401cae:	800027b7          	lui	a5,0x80002
20401cb2:	f4478513          	addi	a0,a5,-188 # 80001f44 <metal_segment_heap_target_end+0xffffe3c0>
20401cb6:	d4afe0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:103 (discriminator 4)
    printf("\nX\n");
20401cba:	204077b7          	lui	a5,0x20407
20401cbe:	dd878513          	addi	a0,a5,-552 # 20406dd8 <_exit+0x166>
20401cc2:	2669                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:105 (discriminator 4)

    printf("Dec HW: \n");
20401cc4:	204077b7          	lui	a5,0x20407
20401cc8:	e5478513          	addi	a0,a5,-428 # 20406e54 <_exit+0x1e2>
20401ccc:	2641                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:106 (discriminator 4)
    start = rdcycle();
20401cce:	3119                	jal	204018d4 <rdcycle>
20401cd0:	87aa                	mv	a5,a0
20401cd2:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:107 (discriminator 4)
    AEAD_DEC(asso_text, asso_len, plain_text, plain_len, cipher_text, Nonce, Key, dec_text);
20401cd6:	800027b7          	lui	a5,0x80002
20401cda:	71478893          	addi	a7,a5,1812 # 80002714 <metal_segment_heap_target_end+0xffffeb90>
20401cde:	800017b7          	lui	a5,0x80001
20401ce2:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffd41c>
20401ce6:	800017b7          	lui	a5,0x80001
20401cea:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffd42c>
20401cee:	80001737          	lui	a4,0x80001
20401cf2:	73c70713          	addi	a4,a4,1852 # 8000173c <metal_segment_heap_target_end+0xffffdbb8>
20401cf6:	fec42683          	lw	a3,-20(s0)
20401cfa:	80000637          	lui	a2,0x80000
20401cfe:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffcc4c>
20401d02:	fe842583          	lw	a1,-24(s0)
20401d06:	80000537          	lui	a0,0x80000
20401d0a:	00050513          	mv	a0,a0
20401d0e:	e6cfe0ef          	jal	ra,2040037a <AEAD_DEC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:108 (discriminator 4)
    end = rdcycle();
20401d12:	36c9                	jal	204018d4 <rdcycle>
20401d14:	87aa                	mv	a5,a0
20401d16:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:109 (discriminator 4)
    printf("Total time HW = %d cycles\n", end - start);
20401d1a:	fd442703          	lw	a4,-44(s0)
20401d1e:	fd842783          	lw	a5,-40(s0)
20401d22:	40f707b3          	sub	a5,a4,a5
20401d26:	85be                	mv	a1,a5
20401d28:	204077b7          	lui	a5,0x20407
20401d2c:	dbc78513          	addi	a0,a5,-580 # 20406dbc <_exit+0x14a>
20401d30:	2a81                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:110 (discriminator 4)
    printC(cipher_text, plain_len_int, 1, 1);
20401d32:	4685                	li	a3,1
20401d34:	4605                	li	a2,1
20401d36:	fe042583          	lw	a1,-32(s0)
20401d3a:	800017b7          	lui	a5,0x80001
20401d3e:	73c78513          	addi	a0,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffdbb8>
20401d42:	cbefe0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:111 (discriminator 4)
    printf("\nX\n");
20401d46:	204077b7          	lui	a5,0x20407
20401d4a:	dd878513          	addi	a0,a5,-552 # 20406dd8 <_exit+0x166>
20401d4e:	2cfd                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:112 (discriminator 4)
    printf("Dec SW: \n");
20401d50:	204077b7          	lui	a5,0x20407
20401d54:	e6078513          	addi	a0,a5,-416 # 20406e60 <_exit+0x1ee>
20401d58:	2cd5                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:113 (discriminator 4)
    start = rdcycle();
20401d5a:	3ead                	jal	204018d4 <rdcycle>
20401d5c:	87aa                	mv	a5,a0
20401d5e:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:114 (discriminator 4)
    crypto_aead_decrypt(cipher_text, &clen, plain_text, plain_len, asso_text, asso_len, Nonce, Key, 0);
20401d62:	fd040593          	addi	a1,s0,-48
20401d66:	c002                	sw	zero,0(sp)
20401d68:	800017b7          	lui	a5,0x80001
20401d6c:	fa078893          	addi	a7,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffd41c>
20401d70:	800017b7          	lui	a5,0x80001
20401d74:	fb078813          	addi	a6,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffd42c>
20401d78:	fe842783          	lw	a5,-24(s0)
20401d7c:	80000737          	lui	a4,0x80000
20401d80:	00070713          	mv	a4,a4
20401d84:	fec42683          	lw	a3,-20(s0)
20401d88:	80000637          	lui	a2,0x80000
20401d8c:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffcc4c>
20401d90:	80001537          	lui	a0,0x80001
20401d94:	73c50513          	addi	a0,a0,1852 # 8000173c <metal_segment_heap_target_end+0xffffdbb8>
20401d98:	a78ff0ef          	jal	ra,20401010 <crypto_aead_decrypt>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:115 (discriminator 4)
    end = rdcycle();
20401d9c:	3e25                	jal	204018d4 <rdcycle>
20401d9e:	87aa                	mv	a5,a0
20401da0:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:116 (discriminator 4)
    printf("Total time SW = %d cycles\n", end - start);
20401da4:	fd442703          	lw	a4,-44(s0)
20401da8:	fd842783          	lw	a5,-40(s0)
20401dac:	40f707b3          	sub	a5,a4,a5
20401db0:	85be                	mv	a1,a5
20401db2:	204077b7          	lui	a5,0x20407
20401db6:	de878513          	addi	a0,a5,-536 # 20406de8 <_exit+0x176>
20401dba:	20d9                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:117 (discriminator 4)
    printC(cipher_text, plain_len_int, 1, 1);
20401dbc:	4685                	li	a3,1
20401dbe:	4605                	li	a2,1
20401dc0:	fe042583          	lw	a1,-32(s0)
20401dc4:	800017b7          	lui	a5,0x80001
20401dc8:	73c78513          	addi	a0,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffdbb8>
20401dcc:	c34fe0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:118 (discriminator 4)
    printf("\nX\n");
20401dd0:	204077b7          	lui	a5,0x20407
20401dd4:	dd878513          	addi	a0,a5,-552 # 20406dd8 <_exit+0x166>
20401dd8:	2c95                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:120 (discriminator 4)

    printf("Rand Seed: \n");
20401dda:	204077b7          	lui	a5,0x20407
20401dde:	e0478513          	addi	a0,a5,-508 # 20406e04 <_exit+0x192>
20401de2:	24ad                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:121 (discriminator 4)
    start = rdcycle();
20401de4:	3cc5                	jal	204018d4 <rdcycle>
20401de6:	87aa                	mv	a5,a0
20401de8:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:122 (discriminator 4)
    SEED();
20401dec:	ef6fe0ef          	jal	ra,204004e2 <SEED>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:123 (discriminator 4)
    end = rdcycle();
20401df0:	34d5                	jal	204018d4 <rdcycle>
20401df2:	87aa                	mv	a5,a0
20401df4:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:124 (discriminator 4)
    printf("Total time HW = %08x cycles\n", end - start);
20401df8:	fd442703          	lw	a4,-44(s0)
20401dfc:	fd842783          	lw	a5,-40(s0)
20401e00:	40f707b3          	sub	a5,a4,a5
20401e04:	85be                	mv	a1,a5
20401e06:	204077b7          	lui	a5,0x20407
20401e0a:	e1078513          	addi	a0,a5,-496 # 20406e10 <_exit+0x19e>
20401e0e:	288d                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:125 (discriminator 4)
    printf("Rand HW: \n");
20401e10:	204077b7          	lui	a5,0x20407
20401e14:	e3078513          	addi	a0,a5,-464 # 20406e30 <_exit+0x1be>
20401e18:	2c15                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:126 (discriminator 4)
    start = rdcycle();
20401e1a:	3c6d                	jal	204018d4 <rdcycle>
20401e1c:	87aa                	mv	a5,a0
20401e1e:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:127 (discriminator 4)
    RAND(rand_arr, num_rand);
20401e22:	fe442583          	lw	a1,-28(s0)
20401e26:	800027b7          	lui	a5,0x80002
20401e2a:	f4478513          	addi	a0,a5,-188 # 80001f44 <metal_segment_heap_target_end+0xffffe3c0>
20401e2e:	e6efe0ef          	jal	ra,2040049c <RAND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:128 (discriminator 4)
    end = rdcycle();
20401e32:	344d                	jal	204018d4 <rdcycle>
20401e34:	87aa                	mv	a5,a0
20401e36:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:129 (discriminator 4)
    printf("Total time HW = %08x cycles\n", end - start);
20401e3a:	fd442703          	lw	a4,-44(s0)
20401e3e:	fd842783          	lw	a5,-40(s0)
20401e42:	40f707b3          	sub	a5,a4,a5
20401e46:	85be                	mv	a1,a5
20401e48:	204077b7          	lui	a5,0x20407
20401e4c:	e1078513          	addi	a0,a5,-496 # 20406e10 <_exit+0x19e>
20401e50:	2805                	jal	20401e80 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:130 (discriminator 4)
    printC(rand_arr, num_rand * 4, 0, 1);
20401e52:	fe442783          	lw	a5,-28(s0)
20401e56:	078a                	slli	a5,a5,0x2
20401e58:	4685                	li	a3,1
20401e5a:	4601                	li	a2,0
20401e5c:	85be                	mv	a1,a5
20401e5e:	800027b7          	lui	a5,0x80002
20401e62:	f4478513          	addi	a0,a5,-188 # 80001f44 <metal_segment_heap_target_end+0xffffe3c0>
20401e66:	b9afe0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:131 (discriminator 4)
    printf("\nX\n");
20401e6a:	204077b7          	lui	a5,0x20407
20401e6e:	dd878513          	addi	a0,a5,-552 # 20406dd8 <_exit+0x166>
20401e72:	2ae9                	jal	2040204c <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:134 (discriminator 4)


    return 0;
20401e74:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconTest/AsconTest.c:137 (discriminator 4)


20401e76:	853e                	mv	a0,a5
20401e78:	50f2                	lw	ra,60(sp)
20401e7a:	5462                	lw	s0,56(sp)
20401e7c:	6121                	addi	sp,sp,64
20401e7e:	8082                	ret

20401e80 <iprintf>:
printf():
20401e80:	7139                	addi	sp,sp,-64
20401e82:	da3e                	sw	a5,52(sp)
20401e84:	d22e                	sw	a1,36(sp)
20401e86:	d432                	sw	a2,40(sp)
20401e88:	d636                	sw	a3,44(sp)
20401e8a:	d83a                	sw	a4,48(sp)
20401e8c:	dc42                	sw	a6,56(sp)
20401e8e:	de46                	sw	a7,60(sp)
20401e90:	5fc00797          	auipc	a5,0x5fc00
20401e94:	87878793          	addi	a5,a5,-1928 # 80001708 <_impure_ptr>
20401e98:	cc22                	sw	s0,24(sp)
20401e9a:	4380                	lw	s0,0(a5)
20401e9c:	ca26                	sw	s1,20(sp)
20401e9e:	ce06                	sw	ra,28(sp)
20401ea0:	84aa                	mv	s1,a0
20401ea2:	c409                	beqz	s0,20401eac <iprintf+0x2c>
20401ea4:	4c1c                	lw	a5,24(s0)
20401ea6:	e399                	bnez	a5,20401eac <iprintf+0x2c>
20401ea8:	8522                	mv	a0,s0
20401eaa:	23d5                	jal	2040248e <__sinit>
20401eac:	440c                	lw	a1,8(s0)
20401eae:	1054                	addi	a3,sp,36
20401eb0:	8626                	mv	a2,s1
20401eb2:	8522                	mv	a0,s0
20401eb4:	c636                	sw	a3,12(sp)
20401eb6:	2df000ef          	jal	ra,20402994 <_vfiprintf_r>
20401eba:	40f2                	lw	ra,28(sp)
20401ebc:	4462                	lw	s0,24(sp)
20401ebe:	44d2                	lw	s1,20(sp)
20401ec0:	6121                	addi	sp,sp,64
20401ec2:	8082                	ret

20401ec4 <putchar>:
putchar():
20401ec4:	1101                	addi	sp,sp,-32
20401ec6:	5fc00797          	auipc	a5,0x5fc00
20401eca:	84278793          	addi	a5,a5,-1982 # 80001708 <_impure_ptr>
20401ece:	cc22                	sw	s0,24(sp)
20401ed0:	4380                	lw	s0,0(a5)
20401ed2:	ce06                	sw	ra,28(sp)
20401ed4:	85aa                	mv	a1,a0
20401ed6:	c419                	beqz	s0,20401ee4 <putchar+0x20>
20401ed8:	4c1c                	lw	a5,24(s0)
20401eda:	e789                	bnez	a5,20401ee4 <putchar+0x20>
20401edc:	c62a                	sw	a0,12(sp)
20401ede:	8522                	mv	a0,s0
20401ee0:	237d                	jal	2040248e <__sinit>
20401ee2:	45b2                	lw	a1,12(sp)
20401ee4:	4410                	lw	a2,8(s0)
20401ee6:	8522                	mv	a0,s0
20401ee8:	4462                	lw	s0,24(sp)
20401eea:	40f2                	lw	ra,28(sp)
20401eec:	6105                	addi	sp,sp,32
20401eee:	a009                	j	20401ef0 <_putc_r>

20401ef0 <_putc_r>:
_putc_r():
20401ef0:	1101                	addi	sp,sp,-32
20401ef2:	cc22                	sw	s0,24(sp)
20401ef4:	ce06                	sw	ra,28(sp)
20401ef6:	842a                	mv	s0,a0
20401ef8:	c901                	beqz	a0,20401f08 <_putc_r+0x18>
20401efa:	4d1c                	lw	a5,24(a0)
20401efc:	e791                	bnez	a5,20401f08 <_putc_r+0x18>
20401efe:	c632                	sw	a2,12(sp)
20401f00:	c42e                	sw	a1,8(sp)
20401f02:	2371                	jal	2040248e <__sinit>
20401f04:	4632                	lw	a2,12(sp)
20401f06:	45a2                	lw	a1,8(sp)
20401f08:	00005797          	auipc	a5,0x5
20401f0c:	f8478793          	addi	a5,a5,-124 # 20406e8c <__sf_fake_stdin>
20401f10:	02f61563          	bne	a2,a5,20401f3a <_putc_r+0x4a>
20401f14:	4050                	lw	a2,4(s0)
20401f16:	461c                	lw	a5,8(a2)
20401f18:	17fd                	addi	a5,a5,-1
20401f1a:	c61c                	sw	a5,8(a2)
20401f1c:	0207df63          	bgez	a5,20401f5a <_putc_r+0x6a>
20401f20:	4e18                	lw	a4,24(a2)
20401f22:	00e7c763          	blt	a5,a4,20401f30 <_putc_r+0x40>
20401f26:	0ff5f793          	andi	a5,a1,255
20401f2a:	4729                	li	a4,10
20401f2c:	02e79763          	bne	a5,a4,20401f5a <_putc_r+0x6a>
20401f30:	8522                	mv	a0,s0
20401f32:	4462                	lw	s0,24(sp)
20401f34:	40f2                	lw	ra,28(sp)
20401f36:	6105                	addi	sp,sp,32
20401f38:	a20d                	j	2040205a <__swbuf_r>
20401f3a:	00005797          	auipc	a5,0x5
20401f3e:	f7278793          	addi	a5,a5,-142 # 20406eac <__sf_fake_stdout>
20401f42:	00f61463          	bne	a2,a5,20401f4a <_putc_r+0x5a>
20401f46:	4410                	lw	a2,8(s0)
20401f48:	b7f9                	j	20401f16 <_putc_r+0x26>
20401f4a:	00005797          	auipc	a5,0x5
20401f4e:	f2278793          	addi	a5,a5,-222 # 20406e6c <__sf_fake_stderr>
20401f52:	fcf612e3          	bne	a2,a5,20401f16 <_putc_r+0x26>
20401f56:	4450                	lw	a2,12(s0)
20401f58:	bf7d                	j	20401f16 <_putc_r+0x26>
20401f5a:	421c                	lw	a5,0(a2)
20401f5c:	0ff5f513          	andi	a0,a1,255
20401f60:	00178713          	addi	a4,a5,1
20401f64:	c218                	sw	a4,0(a2)
20401f66:	00b78023          	sb	a1,0(a5)
20401f6a:	40f2                	lw	ra,28(sp)
20401f6c:	4462                	lw	s0,24(sp)
20401f6e:	6105                	addi	sp,sp,32
20401f70:	8082                	ret

20401f72 <_puts_r>:
_puts_r():
20401f72:	1101                	addi	sp,sp,-32
20401f74:	ca26                	sw	s1,20(sp)
20401f76:	c84a                	sw	s2,16(sp)
20401f78:	ce06                	sw	ra,28(sp)
20401f7a:	cc22                	sw	s0,24(sp)
20401f7c:	c64e                	sw	s3,12(sp)
20401f7e:	c452                	sw	s4,8(sp)
20401f80:	84aa                	mv	s1,a0
20401f82:	892e                	mv	s2,a1
20401f84:	c501                	beqz	a0,20401f8c <_puts_r+0x1a>
20401f86:	4d1c                	lw	a5,24(a0)
20401f88:	e391                	bnez	a5,20401f8c <_puts_r+0x1a>
20401f8a:	2311                	jal	2040248e <__sinit>
20401f8c:	4c9c                	lw	a5,24(s1)
20401f8e:	4480                	lw	s0,8(s1)
20401f90:	e399                	bnez	a5,20401f96 <_puts_r+0x24>
20401f92:	8526                	mv	a0,s1
20401f94:	29ed                	jal	2040248e <__sinit>
20401f96:	00005797          	auipc	a5,0x5
20401f9a:	ef678793          	addi	a5,a5,-266 # 20406e8c <__sf_fake_stdin>
20401f9e:	02f41c63          	bne	s0,a5,20401fd6 <_puts_r+0x64>
20401fa2:	40c0                	lw	s0,4(s1)
20401fa4:	00c45783          	lhu	a5,12(s0)
20401fa8:	8ba1                	andi	a5,a5,8
20401faa:	c7b1                	beqz	a5,20401ff6 <_puts_r+0x84>
20401fac:	481c                	lw	a5,16(s0)
20401fae:	c7a1                	beqz	a5,20401ff6 <_puts_r+0x84>
20401fb0:	59fd                	li	s3,-1
20401fb2:	4a29                	li	s4,10
20401fb4:	441c                	lw	a5,8(s0)
20401fb6:	00094583          	lbu	a1,0(s2)
20401fba:	17fd                	addi	a5,a5,-1
20401fbc:	e9b1                	bnez	a1,20402010 <_puts_r+0x9e>
20401fbe:	c41c                	sw	a5,8(s0)
20401fc0:	0607de63          	bgez	a5,2040203c <_puts_r+0xca>
20401fc4:	8622                	mv	a2,s0
20401fc6:	45a9                	li	a1,10
20401fc8:	8526                	mv	a0,s1
20401fca:	2841                	jal	2040205a <__swbuf_r>
20401fcc:	57fd                	li	a5,-1
20401fce:	02f50863          	beq	a0,a5,20401ffe <_puts_r+0x8c>
20401fd2:	4529                	li	a0,10
20401fd4:	a035                	j	20402000 <_puts_r+0x8e>
20401fd6:	00005797          	auipc	a5,0x5
20401fda:	ed678793          	addi	a5,a5,-298 # 20406eac <__sf_fake_stdout>
20401fde:	00f41463          	bne	s0,a5,20401fe6 <_puts_r+0x74>
20401fe2:	4480                	lw	s0,8(s1)
20401fe4:	b7c1                	j	20401fa4 <_puts_r+0x32>
20401fe6:	00005797          	auipc	a5,0x5
20401fea:	e8678793          	addi	a5,a5,-378 # 20406e6c <__sf_fake_stderr>
20401fee:	faf41be3          	bne	s0,a5,20401fa4 <_puts_r+0x32>
20401ff2:	44c0                	lw	s0,12(s1)
20401ff4:	bf45                	j	20401fa4 <_puts_r+0x32>
20401ff6:	85a2                	mv	a1,s0
20401ff8:	8526                	mv	a0,s1
20401ffa:	2205                	jal	2040211a <__swsetup_r>
20401ffc:	d955                	beqz	a0,20401fb0 <_puts_r+0x3e>
20401ffe:	557d                	li	a0,-1
20402000:	40f2                	lw	ra,28(sp)
20402002:	4462                	lw	s0,24(sp)
20402004:	44d2                	lw	s1,20(sp)
20402006:	4942                	lw	s2,16(sp)
20402008:	49b2                	lw	s3,12(sp)
2040200a:	4a22                	lw	s4,8(sp)
2040200c:	6105                	addi	sp,sp,32
2040200e:	8082                	ret
20402010:	c41c                	sw	a5,8(s0)
20402012:	0905                	addi	s2,s2,1
20402014:	0007d763          	bgez	a5,20402022 <_puts_r+0xb0>
20402018:	4c18                	lw	a4,24(s0)
2040201a:	00e7cb63          	blt	a5,a4,20402030 <_puts_r+0xbe>
2040201e:	01458963          	beq	a1,s4,20402030 <_puts_r+0xbe>
20402022:	401c                	lw	a5,0(s0)
20402024:	00178713          	addi	a4,a5,1
20402028:	c018                	sw	a4,0(s0)
2040202a:	00b78023          	sb	a1,0(a5)
2040202e:	b759                	j	20401fb4 <_puts_r+0x42>
20402030:	8622                	mv	a2,s0
20402032:	8526                	mv	a0,s1
20402034:	201d                	jal	2040205a <__swbuf_r>
20402036:	f7351fe3          	bne	a0,s3,20401fb4 <_puts_r+0x42>
2040203a:	b7d1                	j	20401ffe <_puts_r+0x8c>
2040203c:	401c                	lw	a5,0(s0)
2040203e:	00178713          	addi	a4,a5,1
20402042:	c018                	sw	a4,0(s0)
20402044:	4729                	li	a4,10
20402046:	00e78023          	sb	a4,0(a5)
2040204a:	b761                	j	20401fd2 <_puts_r+0x60>

2040204c <puts>:
puts():
2040204c:	5fbff797          	auipc	a5,0x5fbff
20402050:	6bc78793          	addi	a5,a5,1724 # 80001708 <_impure_ptr>
20402054:	85aa                	mv	a1,a0
20402056:	4388                	lw	a0,0(a5)
20402058:	bf29                	j	20401f72 <_puts_r>

2040205a <__swbuf_r>:
__swbuf_r():
2040205a:	1101                	addi	sp,sp,-32
2040205c:	cc22                	sw	s0,24(sp)
2040205e:	ca26                	sw	s1,20(sp)
20402060:	c84a                	sw	s2,16(sp)
20402062:	ce06                	sw	ra,28(sp)
20402064:	c64e                	sw	s3,12(sp)
20402066:	84aa                	mv	s1,a0
20402068:	892e                	mv	s2,a1
2040206a:	8432                	mv	s0,a2
2040206c:	c501                	beqz	a0,20402074 <__swbuf_r+0x1a>
2040206e:	4d1c                	lw	a5,24(a0)
20402070:	e391                	bnez	a5,20402074 <__swbuf_r+0x1a>
20402072:	2931                	jal	2040248e <__sinit>
20402074:	00005797          	auipc	a5,0x5
20402078:	e1878793          	addi	a5,a5,-488 # 20406e8c <__sf_fake_stdin>
2040207c:	06f41963          	bne	s0,a5,204020ee <__swbuf_r+0x94>
20402080:	40c0                	lw	s0,4(s1)
20402082:	4c1c                	lw	a5,24(s0)
20402084:	c41c                	sw	a5,8(s0)
20402086:	00c45783          	lhu	a5,12(s0)
2040208a:	8ba1                	andi	a5,a5,8
2040208c:	c3c9                	beqz	a5,2040210e <__swbuf_r+0xb4>
2040208e:	481c                	lw	a5,16(s0)
20402090:	cfbd                	beqz	a5,2040210e <__swbuf_r+0xb4>
20402092:	481c                	lw	a5,16(s0)
20402094:	4008                	lw	a0,0(s0)
20402096:	0ff97993          	andi	s3,s2,255
2040209a:	0ff97913          	andi	s2,s2,255
2040209e:	8d1d                	sub	a0,a0,a5
204020a0:	485c                	lw	a5,20(s0)
204020a2:	00f54663          	blt	a0,a5,204020ae <__swbuf_r+0x54>
204020a6:	85a2                	mv	a1,s0
204020a8:	8526                	mv	a0,s1
204020aa:	24e9                	jal	20402374 <_fflush_r>
204020ac:	e52d                	bnez	a0,20402116 <__swbuf_r+0xbc>
204020ae:	441c                	lw	a5,8(s0)
204020b0:	0505                	addi	a0,a0,1
204020b2:	17fd                	addi	a5,a5,-1
204020b4:	c41c                	sw	a5,8(s0)
204020b6:	401c                	lw	a5,0(s0)
204020b8:	00178713          	addi	a4,a5,1
204020bc:	c018                	sw	a4,0(s0)
204020be:	01378023          	sb	s3,0(a5)
204020c2:	485c                	lw	a5,20(s0)
204020c4:	00a78963          	beq	a5,a0,204020d6 <__swbuf_r+0x7c>
204020c8:	00c45783          	lhu	a5,12(s0)
204020cc:	8b85                	andi	a5,a5,1
204020ce:	cb81                	beqz	a5,204020de <__swbuf_r+0x84>
204020d0:	47a9                	li	a5,10
204020d2:	00f91663          	bne	s2,a5,204020de <__swbuf_r+0x84>
204020d6:	85a2                	mv	a1,s0
204020d8:	8526                	mv	a0,s1
204020da:	2c69                	jal	20402374 <_fflush_r>
204020dc:	ed0d                	bnez	a0,20402116 <__swbuf_r+0xbc>
204020de:	40f2                	lw	ra,28(sp)
204020e0:	4462                	lw	s0,24(sp)
204020e2:	854a                	mv	a0,s2
204020e4:	44d2                	lw	s1,20(sp)
204020e6:	4942                	lw	s2,16(sp)
204020e8:	49b2                	lw	s3,12(sp)
204020ea:	6105                	addi	sp,sp,32
204020ec:	8082                	ret
204020ee:	00005797          	auipc	a5,0x5
204020f2:	dbe78793          	addi	a5,a5,-578 # 20406eac <__sf_fake_stdout>
204020f6:	00f41463          	bne	s0,a5,204020fe <__swbuf_r+0xa4>
204020fa:	4480                	lw	s0,8(s1)
204020fc:	b759                	j	20402082 <__swbuf_r+0x28>
204020fe:	00005797          	auipc	a5,0x5
20402102:	d6e78793          	addi	a5,a5,-658 # 20406e6c <__sf_fake_stderr>
20402106:	f6f41ee3          	bne	s0,a5,20402082 <__swbuf_r+0x28>
2040210a:	44c0                	lw	s0,12(s1)
2040210c:	bf9d                	j	20402082 <__swbuf_r+0x28>
2040210e:	85a2                	mv	a1,s0
20402110:	8526                	mv	a0,s1
20402112:	2021                	jal	2040211a <__swsetup_r>
20402114:	dd3d                	beqz	a0,20402092 <__swbuf_r+0x38>
20402116:	597d                	li	s2,-1
20402118:	b7d9                	j	204020de <__swbuf_r+0x84>

2040211a <__swsetup_r>:
__swsetup_r():
2040211a:	1141                	addi	sp,sp,-16
2040211c:	5fbff797          	auipc	a5,0x5fbff
20402120:	5ec78793          	addi	a5,a5,1516 # 80001708 <_impure_ptr>
20402124:	c226                	sw	s1,4(sp)
20402126:	4384                	lw	s1,0(a5)
20402128:	c422                	sw	s0,8(sp)
2040212a:	c04a                	sw	s2,0(sp)
2040212c:	c606                	sw	ra,12(sp)
2040212e:	892a                	mv	s2,a0
20402130:	842e                	mv	s0,a1
20402132:	c489                	beqz	s1,2040213c <__swsetup_r+0x22>
20402134:	4c9c                	lw	a5,24(s1)
20402136:	e399                	bnez	a5,2040213c <__swsetup_r+0x22>
20402138:	8526                	mv	a0,s1
2040213a:	2e91                	jal	2040248e <__sinit>
2040213c:	00005797          	auipc	a5,0x5
20402140:	d5078793          	addi	a5,a5,-688 # 20406e8c <__sf_fake_stdin>
20402144:	02f41c63          	bne	s0,a5,2040217c <__swsetup_r+0x62>
20402148:	40c0                	lw	s0,4(s1)
2040214a:	00c41703          	lh	a4,12(s0)
2040214e:	01071793          	slli	a5,a4,0x10
20402152:	83c1                	srli	a5,a5,0x10
20402154:	0087f693          	andi	a3,a5,8
20402158:	eeb5                	bnez	a3,204021d4 <__swsetup_r+0xba>
2040215a:	0107f693          	andi	a3,a5,16
2040215e:	ee9d                	bnez	a3,2040219c <__swsetup_r+0x82>
20402160:	47a5                	li	a5,9
20402162:	00f92023          	sw	a5,0(s2)
20402166:	04076713          	ori	a4,a4,64
2040216a:	00e41623          	sh	a4,12(s0)
2040216e:	557d                	li	a0,-1
20402170:	40b2                	lw	ra,12(sp)
20402172:	4422                	lw	s0,8(sp)
20402174:	4492                	lw	s1,4(sp)
20402176:	4902                	lw	s2,0(sp)
20402178:	0141                	addi	sp,sp,16
2040217a:	8082                	ret
2040217c:	00005797          	auipc	a5,0x5
20402180:	d3078793          	addi	a5,a5,-720 # 20406eac <__sf_fake_stdout>
20402184:	00f41463          	bne	s0,a5,2040218c <__swsetup_r+0x72>
20402188:	4480                	lw	s0,8(s1)
2040218a:	b7c1                	j	2040214a <__swsetup_r+0x30>
2040218c:	00005797          	auipc	a5,0x5
20402190:	ce078793          	addi	a5,a5,-800 # 20406e6c <__sf_fake_stderr>
20402194:	faf41be3          	bne	s0,a5,2040214a <__swsetup_r+0x30>
20402198:	44c0                	lw	s0,12(s1)
2040219a:	bf45                	j	2040214a <__swsetup_r+0x30>
2040219c:	8b91                	andi	a5,a5,4
2040219e:	c78d                	beqz	a5,204021c8 <__swsetup_r+0xae>
204021a0:	584c                	lw	a1,52(s0)
204021a2:	c989                	beqz	a1,204021b4 <__swsetup_r+0x9a>
204021a4:	04440793          	addi	a5,s0,68
204021a8:	00f58463          	beq	a1,a5,204021b0 <__swsetup_r+0x96>
204021ac:	854a                	mv	a0,s2
204021ae:	2bc5                	jal	2040279e <_free_r>
204021b0:	02042a23          	sw	zero,52(s0)
204021b4:	00c45783          	lhu	a5,12(s0)
204021b8:	00042223          	sw	zero,4(s0)
204021bc:	fdb7f793          	andi	a5,a5,-37
204021c0:	00f41623          	sh	a5,12(s0)
204021c4:	481c                	lw	a5,16(s0)
204021c6:	c01c                	sw	a5,0(s0)
204021c8:	00c45783          	lhu	a5,12(s0)
204021cc:	0087e793          	ori	a5,a5,8
204021d0:	00f41623          	sh	a5,12(s0)
204021d4:	481c                	lw	a5,16(s0)
204021d6:	ef81                	bnez	a5,204021ee <__swsetup_r+0xd4>
204021d8:	00c45783          	lhu	a5,12(s0)
204021dc:	20000713          	li	a4,512
204021e0:	2807f793          	andi	a5,a5,640
204021e4:	00e78563          	beq	a5,a4,204021ee <__swsetup_r+0xd4>
204021e8:	85a2                	mv	a1,s0
204021ea:	854a                	mv	a0,s2
204021ec:	21bd                	jal	2040265a <__smakebuf_r>
204021ee:	00c45783          	lhu	a5,12(s0)
204021f2:	0017f713          	andi	a4,a5,1
204021f6:	c705                	beqz	a4,2040221e <__swsetup_r+0x104>
204021f8:	485c                	lw	a5,20(s0)
204021fa:	00042423          	sw	zero,8(s0)
204021fe:	40f007b3          	neg	a5,a5
20402202:	cc1c                	sw	a5,24(s0)
20402204:	481c                	lw	a5,16(s0)
20402206:	4501                	li	a0,0
20402208:	f7a5                	bnez	a5,20402170 <__swsetup_r+0x56>
2040220a:	00c41783          	lh	a5,12(s0)
2040220e:	0807f713          	andi	a4,a5,128
20402212:	df39                	beqz	a4,20402170 <__swsetup_r+0x56>
20402214:	0407e793          	ori	a5,a5,64
20402218:	00f41623          	sh	a5,12(s0)
2040221c:	bf89                	j	2040216e <__swsetup_r+0x54>
2040221e:	8b89                	andi	a5,a5,2
20402220:	4701                	li	a4,0
20402222:	e391                	bnez	a5,20402226 <__swsetup_r+0x10c>
20402224:	4858                	lw	a4,20(s0)
20402226:	c418                	sw	a4,8(s0)
20402228:	bff1                	j	20402204 <__swsetup_r+0xea>

2040222a <__sflush_r>:
__sflush_r():
2040222a:	00c5d783          	lhu	a5,12(a1)
2040222e:	1101                	addi	sp,sp,-32
20402230:	cc22                	sw	s0,24(sp)
20402232:	ca26                	sw	s1,20(sp)
20402234:	ce06                	sw	ra,28(sp)
20402236:	c84a                	sw	s2,16(sp)
20402238:	c64e                	sw	s3,12(sp)
2040223a:	0087f713          	andi	a4,a5,8
2040223e:	84aa                	mv	s1,a0
20402240:	842e                	mv	s0,a1
20402242:	e765                	bnez	a4,2040232a <__sflush_r+0x100>
20402244:	41d8                	lw	a4,4(a1)
20402246:	00e04763          	bgtz	a4,20402254 <__sflush_r+0x2a>
2040224a:	41b8                	lw	a4,64(a1)
2040224c:	00e04463          	bgtz	a4,20402254 <__sflush_r+0x2a>
20402250:	4501                	li	a0,0
20402252:	a0c1                	j	20402312 <__sflush_r+0xe8>
20402254:	5458                	lw	a4,44(s0)
20402256:	df6d                	beqz	a4,20402250 <__sflush_r+0x26>
20402258:	0004a903          	lw	s2,0(s1)
2040225c:	01379693          	slli	a3,a5,0x13
20402260:	0004a023          	sw	zero,0(s1)
20402264:	0606de63          	bgez	a3,204022e0 <__sflush_r+0xb6>
20402268:	4868                	lw	a0,84(s0)
2040226a:	00c45783          	lhu	a5,12(s0)
2040226e:	8b91                	andi	a5,a5,4
20402270:	c799                	beqz	a5,2040227e <__sflush_r+0x54>
20402272:	405c                	lw	a5,4(s0)
20402274:	8d1d                	sub	a0,a0,a5
20402276:	585c                	lw	a5,52(s0)
20402278:	c399                	beqz	a5,2040227e <__sflush_r+0x54>
2040227a:	403c                	lw	a5,64(s0)
2040227c:	8d1d                	sub	a0,a0,a5
2040227e:	545c                	lw	a5,44(s0)
20402280:	500c                	lw	a1,32(s0)
20402282:	862a                	mv	a2,a0
20402284:	4681                	li	a3,0
20402286:	8526                	mv	a0,s1
20402288:	9782                	jalr	a5
2040228a:	57fd                	li	a5,-1
2040228c:	00c45703          	lhu	a4,12(s0)
20402290:	00f51d63          	bne	a0,a5,204022aa <__sflush_r+0x80>
20402294:	4094                	lw	a3,0(s1)
20402296:	47f5                	li	a5,29
20402298:	08d7e463          	bltu	a5,a3,20402320 <__sflush_r+0xf6>
2040229c:	204007b7          	lui	a5,0x20400
204022a0:	0785                	addi	a5,a5,1
204022a2:	00d7d7b3          	srl	a5,a5,a3
204022a6:	8b85                	andi	a5,a5,1
204022a8:	cfa5                	beqz	a5,20402320 <__sflush_r+0xf6>
204022aa:	481c                	lw	a5,16(s0)
204022ac:	00042223          	sw	zero,4(s0)
204022b0:	c01c                	sw	a5,0(s0)
204022b2:	01371793          	slli	a5,a4,0x13
204022b6:	0007d863          	bgez	a5,204022c6 <__sflush_r+0x9c>
204022ba:	57fd                	li	a5,-1
204022bc:	00f51463          	bne	a0,a5,204022c4 <__sflush_r+0x9a>
204022c0:	409c                	lw	a5,0(s1)
204022c2:	e391                	bnez	a5,204022c6 <__sflush_r+0x9c>
204022c4:	c868                	sw	a0,84(s0)
204022c6:	584c                	lw	a1,52(s0)
204022c8:	0124a023          	sw	s2,0(s1)
204022cc:	d1d1                	beqz	a1,20402250 <__sflush_r+0x26>
204022ce:	04440793          	addi	a5,s0,68
204022d2:	00f58463          	beq	a1,a5,204022da <__sflush_r+0xb0>
204022d6:	8526                	mv	a0,s1
204022d8:	21d9                	jal	2040279e <_free_r>
204022da:	02042a23          	sw	zero,52(s0)
204022de:	bf8d                	j	20402250 <__sflush_r+0x26>
204022e0:	500c                	lw	a1,32(s0)
204022e2:	4685                	li	a3,1
204022e4:	4601                	li	a2,0
204022e6:	8526                	mv	a0,s1
204022e8:	9702                	jalr	a4
204022ea:	57fd                	li	a5,-1
204022ec:	f6f51fe3          	bne	a0,a5,2040226a <__sflush_r+0x40>
204022f0:	409c                	lw	a5,0(s1)
204022f2:	dfa5                	beqz	a5,2040226a <__sflush_r+0x40>
204022f4:	4775                	li	a4,29
204022f6:	00e78563          	beq	a5,a4,20402300 <__sflush_r+0xd6>
204022fa:	4759                	li	a4,22
204022fc:	00e79563          	bne	a5,a4,20402306 <__sflush_r+0xdc>
20402300:	0124a023          	sw	s2,0(s1)
20402304:	b7b1                	j	20402250 <__sflush_r+0x26>
20402306:	00c45783          	lhu	a5,12(s0)
2040230a:	0407e793          	ori	a5,a5,64
2040230e:	00f41623          	sh	a5,12(s0)
20402312:	40f2                	lw	ra,28(sp)
20402314:	4462                	lw	s0,24(sp)
20402316:	44d2                	lw	s1,20(sp)
20402318:	4942                	lw	s2,16(sp)
2040231a:	49b2                	lw	s3,12(sp)
2040231c:	6105                	addi	sp,sp,32
2040231e:	8082                	ret
20402320:	04076713          	ori	a4,a4,64
20402324:	00e41623          	sh	a4,12(s0)
20402328:	b7ed                	j	20402312 <__sflush_r+0xe8>
2040232a:	0105a983          	lw	s3,16(a1)
2040232e:	f20981e3          	beqz	s3,20402250 <__sflush_r+0x26>
20402332:	0005a903          	lw	s2,0(a1)
20402336:	8b8d                	andi	a5,a5,3
20402338:	0135a023          	sw	s3,0(a1)
2040233c:	41390933          	sub	s2,s2,s3
20402340:	4701                	li	a4,0
20402342:	e391                	bnez	a5,20402346 <__sflush_r+0x11c>
20402344:	49d8                	lw	a4,20(a1)
20402346:	c418                	sw	a4,8(s0)
20402348:	f12054e3          	blez	s2,20402250 <__sflush_r+0x26>
2040234c:	541c                	lw	a5,40(s0)
2040234e:	500c                	lw	a1,32(s0)
20402350:	86ca                	mv	a3,s2
20402352:	864e                	mv	a2,s3
20402354:	8526                	mv	a0,s1
20402356:	9782                	jalr	a5
20402358:	00a04a63          	bgtz	a0,2040236c <__sflush_r+0x142>
2040235c:	00c45783          	lhu	a5,12(s0)
20402360:	557d                	li	a0,-1
20402362:	0407e793          	ori	a5,a5,64
20402366:	00f41623          	sh	a5,12(s0)
2040236a:	b765                	j	20402312 <__sflush_r+0xe8>
2040236c:	99aa                	add	s3,s3,a0
2040236e:	40a90933          	sub	s2,s2,a0
20402372:	bfd9                	j	20402348 <__sflush_r+0x11e>

20402374 <_fflush_r>:
_fflush_r():
20402374:	499c                	lw	a5,16(a1)
20402376:	cfb9                	beqz	a5,204023d4 <_fflush_r+0x60>
20402378:	1101                	addi	sp,sp,-32
2040237a:	cc22                	sw	s0,24(sp)
2040237c:	ce06                	sw	ra,28(sp)
2040237e:	842a                	mv	s0,a0
20402380:	c511                	beqz	a0,2040238c <_fflush_r+0x18>
20402382:	4d1c                	lw	a5,24(a0)
20402384:	e781                	bnez	a5,2040238c <_fflush_r+0x18>
20402386:	c62e                	sw	a1,12(sp)
20402388:	2219                	jal	2040248e <__sinit>
2040238a:	45b2                	lw	a1,12(sp)
2040238c:	00005797          	auipc	a5,0x5
20402390:	b0078793          	addi	a5,a5,-1280 # 20406e8c <__sf_fake_stdin>
20402394:	00f59b63          	bne	a1,a5,204023aa <_fflush_r+0x36>
20402398:	404c                	lw	a1,4(s0)
2040239a:	00c59783          	lh	a5,12(a1)
2040239e:	c795                	beqz	a5,204023ca <_fflush_r+0x56>
204023a0:	8522                	mv	a0,s0
204023a2:	4462                	lw	s0,24(sp)
204023a4:	40f2                	lw	ra,28(sp)
204023a6:	6105                	addi	sp,sp,32
204023a8:	b549                	j	2040222a <__sflush_r>
204023aa:	00005797          	auipc	a5,0x5
204023ae:	b0278793          	addi	a5,a5,-1278 # 20406eac <__sf_fake_stdout>
204023b2:	00f59463          	bne	a1,a5,204023ba <_fflush_r+0x46>
204023b6:	440c                	lw	a1,8(s0)
204023b8:	b7cd                	j	2040239a <_fflush_r+0x26>
204023ba:	00005797          	auipc	a5,0x5
204023be:	ab278793          	addi	a5,a5,-1358 # 20406e6c <__sf_fake_stderr>
204023c2:	fcf59ce3          	bne	a1,a5,2040239a <_fflush_r+0x26>
204023c6:	444c                	lw	a1,12(s0)
204023c8:	bfc9                	j	2040239a <_fflush_r+0x26>
204023ca:	40f2                	lw	ra,28(sp)
204023cc:	4462                	lw	s0,24(sp)
204023ce:	4501                	li	a0,0
204023d0:	6105                	addi	sp,sp,32
204023d2:	8082                	ret
204023d4:	4501                	li	a0,0
204023d6:	8082                	ret

204023d8 <std>:
std():
204023d8:	1141                	addi	sp,sp,-16
204023da:	c422                	sw	s0,8(sp)
204023dc:	c606                	sw	ra,12(sp)
204023de:	842a                	mv	s0,a0
204023e0:	00b51623          	sh	a1,12(a0)
204023e4:	00c51723          	sh	a2,14(a0)
204023e8:	00052023          	sw	zero,0(a0)
204023ec:	00052223          	sw	zero,4(a0)
204023f0:	00052423          	sw	zero,8(a0)
204023f4:	06052223          	sw	zero,100(a0)
204023f8:	00052823          	sw	zero,16(a0)
204023fc:	00052a23          	sw	zero,20(a0)
20402400:	00052c23          	sw	zero,24(a0)
20402404:	4621                	li	a2,8
20402406:	4581                	li	a1,0
20402408:	05c50513          	addi	a0,a0,92
2040240c:	24ed                	jal	204026f6 <memset>
2040240e:	00001797          	auipc	a5,0x1
20402412:	85078793          	addi	a5,a5,-1968 # 20402c5e <__sread>
20402416:	d05c                	sw	a5,36(s0)
20402418:	00001797          	auipc	a5,0x1
2040241c:	87678793          	addi	a5,a5,-1930 # 20402c8e <__swrite>
20402420:	d41c                	sw	a5,40(s0)
20402422:	00001797          	auipc	a5,0x1
20402426:	8ba78793          	addi	a5,a5,-1862 # 20402cdc <__sseek>
2040242a:	d45c                	sw	a5,44(s0)
2040242c:	00001797          	auipc	a5,0x1
20402430:	8e678793          	addi	a5,a5,-1818 # 20402d12 <__sclose>
20402434:	d000                	sw	s0,32(s0)
20402436:	d81c                	sw	a5,48(s0)
20402438:	40b2                	lw	ra,12(sp)
2040243a:	4422                	lw	s0,8(sp)
2040243c:	0141                	addi	sp,sp,16
2040243e:	8082                	ret

20402440 <_cleanup_r>:
_cleanup_r():
20402440:	00000597          	auipc	a1,0x0
20402444:	f3458593          	addi	a1,a1,-204 # 20402374 <_fflush_r>
20402448:	a2b9                	j	20402596 <_fwalk_reent>

2040244a <__sfmoreglue>:
__sfmoreglue():
2040244a:	1141                	addi	sp,sp,-16
2040244c:	c226                	sw	s1,4(sp)
2040244e:	06800613          	li	a2,104
20402452:	fff58493          	addi	s1,a1,-1
20402456:	02c484b3          	mul	s1,s1,a2
2040245a:	c04a                	sw	s2,0(sp)
2040245c:	892e                	mv	s2,a1
2040245e:	c422                	sw	s0,8(sp)
20402460:	c606                	sw	ra,12(sp)
20402462:	07448593          	addi	a1,s1,116
20402466:	26d5                	jal	2040284a <_malloc_r>
20402468:	842a                	mv	s0,a0
2040246a:	c919                	beqz	a0,20402480 <__sfmoreglue+0x36>
2040246c:	00052023          	sw	zero,0(a0)
20402470:	01252223          	sw	s2,4(a0)
20402474:	0531                	addi	a0,a0,12
20402476:	c408                	sw	a0,8(s0)
20402478:	06848613          	addi	a2,s1,104
2040247c:	4581                	li	a1,0
2040247e:	2ca5                	jal	204026f6 <memset>
20402480:	8522                	mv	a0,s0
20402482:	40b2                	lw	ra,12(sp)
20402484:	4422                	lw	s0,8(sp)
20402486:	4492                	lw	s1,4(sp)
20402488:	4902                	lw	s2,0(sp)
2040248a:	0141                	addi	sp,sp,16
2040248c:	8082                	ret

2040248e <__sinit>:
__sinit():
2040248e:	4d1c                	lw	a5,24(a0)
20402490:	e3bd                	bnez	a5,204024f6 <__sinit+0x68>
20402492:	1141                	addi	sp,sp,-16
20402494:	c606                	sw	ra,12(sp)
20402496:	c422                	sw	s0,8(sp)
20402498:	00000797          	auipc	a5,0x0
2040249c:	fa878793          	addi	a5,a5,-88 # 20402440 <_cleanup_r>
204024a0:	d51c                	sw	a5,40(a0)
204024a2:	5fbff797          	auipc	a5,0x5fbff
204024a6:	26a78793          	addi	a5,a5,618 # 8000170c <_global_impure_ptr>
204024aa:	439c                	lw	a5,0(a5)
204024ac:	04052423          	sw	zero,72(a0)
204024b0:	04052623          	sw	zero,76(a0)
204024b4:	04052823          	sw	zero,80(a0)
204024b8:	00f51463          	bne	a0,a5,204024c0 <__sinit+0x32>
204024bc:	4785                	li	a5,1
204024be:	cd1c                	sw	a5,24(a0)
204024c0:	842a                	mv	s0,a0
204024c2:	281d                	jal	204024f8 <__sfp>
204024c4:	c048                	sw	a0,4(s0)
204024c6:	8522                	mv	a0,s0
204024c8:	2805                	jal	204024f8 <__sfp>
204024ca:	c408                	sw	a0,8(s0)
204024cc:	8522                	mv	a0,s0
204024ce:	202d                	jal	204024f8 <__sfp>
204024d0:	c448                	sw	a0,12(s0)
204024d2:	4048                	lw	a0,4(s0)
204024d4:	4601                	li	a2,0
204024d6:	4591                	li	a1,4
204024d8:	3701                	jal	204023d8 <std>
204024da:	4408                	lw	a0,8(s0)
204024dc:	4605                	li	a2,1
204024de:	45a5                	li	a1,9
204024e0:	3de5                	jal	204023d8 <std>
204024e2:	4448                	lw	a0,12(s0)
204024e4:	4609                	li	a2,2
204024e6:	45c9                	li	a1,18
204024e8:	3dc5                	jal	204023d8 <std>
204024ea:	4785                	li	a5,1
204024ec:	cc1c                	sw	a5,24(s0)
204024ee:	40b2                	lw	ra,12(sp)
204024f0:	4422                	lw	s0,8(sp)
204024f2:	0141                	addi	sp,sp,16
204024f4:	8082                	ret
204024f6:	8082                	ret

204024f8 <__sfp>:
__sfp():
204024f8:	1141                	addi	sp,sp,-16
204024fa:	5fbff797          	auipc	a5,0x5fbff
204024fe:	21278793          	addi	a5,a5,530 # 8000170c <_global_impure_ptr>
20402502:	c226                	sw	s1,4(sp)
20402504:	4384                	lw	s1,0(a5)
20402506:	c04a                	sw	s2,0(sp)
20402508:	c606                	sw	ra,12(sp)
2040250a:	4c9c                	lw	a5,24(s1)
2040250c:	c422                	sw	s0,8(sp)
2040250e:	892a                	mv	s2,a0
20402510:	e399                	bnez	a5,20402516 <__sfp+0x1e>
20402512:	8526                	mv	a0,s1
20402514:	3fad                	jal	2040248e <__sinit>
20402516:	04848493          	addi	s1,s1,72
2040251a:	4480                	lw	s0,8(s1)
2040251c:	40dc                	lw	a5,4(s1)
2040251e:	17fd                	addi	a5,a5,-1
20402520:	0007d663          	bgez	a5,2040252c <__sfp+0x34>
20402524:	409c                	lw	a5,0(s1)
20402526:	cfb1                	beqz	a5,20402582 <__sfp+0x8a>
20402528:	4084                	lw	s1,0(s1)
2040252a:	bfc5                	j	2040251a <__sfp+0x22>
2040252c:	00c41703          	lh	a4,12(s0)
20402530:	e731                	bnez	a4,2040257c <__sfp+0x84>
20402532:	77c1                	lui	a5,0xffff0
20402534:	0785                	addi	a5,a5,1
20402536:	06042223          	sw	zero,100(s0)
2040253a:	00042023          	sw	zero,0(s0)
2040253e:	00042223          	sw	zero,4(s0)
20402542:	00042423          	sw	zero,8(s0)
20402546:	c45c                	sw	a5,12(s0)
20402548:	00042823          	sw	zero,16(s0)
2040254c:	00042a23          	sw	zero,20(s0)
20402550:	00042c23          	sw	zero,24(s0)
20402554:	4621                	li	a2,8
20402556:	4581                	li	a1,0
20402558:	05c40513          	addi	a0,s0,92
2040255c:	2a69                	jal	204026f6 <memset>
2040255e:	02042a23          	sw	zero,52(s0)
20402562:	02042c23          	sw	zero,56(s0)
20402566:	04042423          	sw	zero,72(s0)
2040256a:	04042623          	sw	zero,76(s0)
2040256e:	8522                	mv	a0,s0
20402570:	40b2                	lw	ra,12(sp)
20402572:	4422                	lw	s0,8(sp)
20402574:	4492                	lw	s1,4(sp)
20402576:	4902                	lw	s2,0(sp)
20402578:	0141                	addi	sp,sp,16
2040257a:	8082                	ret
2040257c:	06840413          	addi	s0,s0,104
20402580:	bf79                	j	2040251e <__sfp+0x26>
20402582:	4591                	li	a1,4
20402584:	854a                	mv	a0,s2
20402586:	35d1                	jal	2040244a <__sfmoreglue>
20402588:	c088                	sw	a0,0(s1)
2040258a:	842a                	mv	s0,a0
2040258c:	fd51                	bnez	a0,20402528 <__sfp+0x30>
2040258e:	47b1                	li	a5,12
20402590:	00f92023          	sw	a5,0(s2)
20402594:	bfe9                	j	2040256e <__sfp+0x76>

20402596 <_fwalk_reent>:
_fwalk_reent():
20402596:	7179                	addi	sp,sp,-48
20402598:	d422                	sw	s0,40(sp)
2040259a:	d04a                	sw	s2,32(sp)
2040259c:	cc52                	sw	s4,24(sp)
2040259e:	ca56                	sw	s5,20(sp)
204025a0:	c85a                	sw	s6,16(sp)
204025a2:	c65e                	sw	s7,12(sp)
204025a4:	d606                	sw	ra,44(sp)
204025a6:	d226                	sw	s1,36(sp)
204025a8:	ce4e                	sw	s3,28(sp)
204025aa:	8a2a                	mv	s4,a0
204025ac:	8aae                	mv	s5,a1
204025ae:	04850413          	addi	s0,a0,72
204025b2:	4901                	li	s2,0
204025b4:	4b05                	li	s6,1
204025b6:	5bfd                	li	s7,-1
204025b8:	ec09                	bnez	s0,204025d2 <_fwalk_reent+0x3c>
204025ba:	50b2                	lw	ra,44(sp)
204025bc:	5422                	lw	s0,40(sp)
204025be:	854a                	mv	a0,s2
204025c0:	5492                	lw	s1,36(sp)
204025c2:	5902                	lw	s2,32(sp)
204025c4:	49f2                	lw	s3,28(sp)
204025c6:	4a62                	lw	s4,24(sp)
204025c8:	4ad2                	lw	s5,20(sp)
204025ca:	4b42                	lw	s6,16(sp)
204025cc:	4bb2                	lw	s7,12(sp)
204025ce:	6145                	addi	sp,sp,48
204025d0:	8082                	ret
204025d2:	4404                	lw	s1,8(s0)
204025d4:	00442983          	lw	s3,4(s0)
204025d8:	19fd                	addi	s3,s3,-1
204025da:	0009d463          	bgez	s3,204025e2 <_fwalk_reent+0x4c>
204025de:	4000                	lw	s0,0(s0)
204025e0:	bfe1                	j	204025b8 <_fwalk_reent+0x22>
204025e2:	00c4d783          	lhu	a5,12(s1)
204025e6:	00fb7b63          	bgeu	s6,a5,204025fc <_fwalk_reent+0x66>
204025ea:	00e49783          	lh	a5,14(s1)
204025ee:	01778763          	beq	a5,s7,204025fc <_fwalk_reent+0x66>
204025f2:	85a6                	mv	a1,s1
204025f4:	8552                	mv	a0,s4
204025f6:	9a82                	jalr	s5
204025f8:	00a96933          	or	s2,s2,a0
204025fc:	06848493          	addi	s1,s1,104
20402600:	bfe1                	j	204025d8 <_fwalk_reent+0x42>

20402602 <__swhatbuf_r>:
__swhatbuf_r():
20402602:	7119                	addi	sp,sp,-128
20402604:	daa6                	sw	s1,116(sp)
20402606:	84ae                	mv	s1,a1
20402608:	00e59583          	lh	a1,14(a1)
2040260c:	dca2                	sw	s0,120(sp)
2040260e:	de86                	sw	ra,124(sp)
20402610:	8432                	mv	s0,a2
20402612:	0005dc63          	bgez	a1,2040262a <__swhatbuf_r+0x28>
20402616:	00c4d783          	lhu	a5,12(s1)
2040261a:	0006a023          	sw	zero,0(a3) # 80000000 <metal_segment_heap_target_end+0xffffc47c>
2040261e:	0807f793          	andi	a5,a5,128
20402622:	e39d                	bnez	a5,20402648 <__swhatbuf_r+0x46>
20402624:	40000793          	li	a5,1024
20402628:	a015                	j	2040264c <__swhatbuf_r+0x4a>
2040262a:	0830                	addi	a2,sp,24
2040262c:	c636                	sw	a3,12(sp)
2040262e:	27b9                	jal	20402d7c <_fstat_r>
20402630:	46b2                	lw	a3,12(sp)
20402632:	fe0542e3          	bltz	a0,20402616 <__swhatbuf_r+0x14>
20402636:	4772                	lw	a4,28(sp)
20402638:	67bd                	lui	a5,0xf
2040263a:	8ff9                	and	a5,a5,a4
2040263c:	7779                	lui	a4,0xffffe
2040263e:	97ba                	add	a5,a5,a4
20402640:	0017b793          	seqz	a5,a5
20402644:	c29c                	sw	a5,0(a3)
20402646:	bff9                	j	20402624 <__swhatbuf_r+0x22>
20402648:	04000793          	li	a5,64
2040264c:	c01c                	sw	a5,0(s0)
2040264e:	50f6                	lw	ra,124(sp)
20402650:	5466                	lw	s0,120(sp)
20402652:	54d6                	lw	s1,116(sp)
20402654:	4501                	li	a0,0
20402656:	6109                	addi	sp,sp,128
20402658:	8082                	ret

2040265a <__smakebuf_r>:
__smakebuf_r():
2040265a:	00c5d783          	lhu	a5,12(a1)
2040265e:	1101                	addi	sp,sp,-32
20402660:	cc22                	sw	s0,24(sp)
20402662:	ce06                	sw	ra,28(sp)
20402664:	ca26                	sw	s1,20(sp)
20402666:	c84a                	sw	s2,16(sp)
20402668:	8b89                	andi	a5,a5,2
2040266a:	842e                	mv	s0,a1
2040266c:	cf89                	beqz	a5,20402686 <__smakebuf_r+0x2c>
2040266e:	04740793          	addi	a5,s0,71
20402672:	c01c                	sw	a5,0(s0)
20402674:	c81c                	sw	a5,16(s0)
20402676:	4785                	li	a5,1
20402678:	c85c                	sw	a5,20(s0)
2040267a:	40f2                	lw	ra,28(sp)
2040267c:	4462                	lw	s0,24(sp)
2040267e:	44d2                	lw	s1,20(sp)
20402680:	4942                	lw	s2,16(sp)
20402682:	6105                	addi	sp,sp,32
20402684:	8082                	ret
20402686:	0074                	addi	a3,sp,12
20402688:	0030                	addi	a2,sp,8
2040268a:	84aa                	mv	s1,a0
2040268c:	3f9d                	jal	20402602 <__swhatbuf_r>
2040268e:	45a2                	lw	a1,8(sp)
20402690:	892a                	mv	s2,a0
20402692:	8526                	mv	a0,s1
20402694:	2a5d                	jal	2040284a <_malloc_r>
20402696:	ed01                	bnez	a0,204026ae <__smakebuf_r+0x54>
20402698:	00c41783          	lh	a5,12(s0)
2040269c:	2007f713          	andi	a4,a5,512
204026a0:	ff69                	bnez	a4,2040267a <__smakebuf_r+0x20>
204026a2:	9bf1                	andi	a5,a5,-4
204026a4:	0027e793          	ori	a5,a5,2
204026a8:	00f41623          	sh	a5,12(s0)
204026ac:	b7c9                	j	2040266e <__smakebuf_r+0x14>
204026ae:	00000797          	auipc	a5,0x0
204026b2:	d9278793          	addi	a5,a5,-622 # 20402440 <_cleanup_r>
204026b6:	d49c                	sw	a5,40(s1)
204026b8:	00c45783          	lhu	a5,12(s0)
204026bc:	c008                	sw	a0,0(s0)
204026be:	c808                	sw	a0,16(s0)
204026c0:	0807e793          	ori	a5,a5,128
204026c4:	00f41623          	sh	a5,12(s0)
204026c8:	47a2                	lw	a5,8(sp)
204026ca:	c85c                	sw	a5,20(s0)
204026cc:	47b2                	lw	a5,12(sp)
204026ce:	cf89                	beqz	a5,204026e8 <__smakebuf_r+0x8e>
204026d0:	00e41583          	lh	a1,14(s0)
204026d4:	8526                	mv	a0,s1
204026d6:	2de1                	jal	20402dae <_isatty_r>
204026d8:	c901                	beqz	a0,204026e8 <__smakebuf_r+0x8e>
204026da:	00c45783          	lhu	a5,12(s0)
204026de:	9bf1                	andi	a5,a5,-4
204026e0:	0017e793          	ori	a5,a5,1
204026e4:	00f41623          	sh	a5,12(s0)
204026e8:	00c45783          	lhu	a5,12(s0)
204026ec:	00f96933          	or	s2,s2,a5
204026f0:	01241623          	sh	s2,12(s0)
204026f4:	b759                	j	2040267a <__smakebuf_r+0x20>

204026f6 <memset>:
memset():
204026f6:	433d                	li	t1,15
204026f8:	872a                	mv	a4,a0
204026fa:	02c37363          	bgeu	t1,a2,20402720 <memset+0x2a>
204026fe:	00f77793          	andi	a5,a4,15
20402702:	efbd                	bnez	a5,20402780 <memset+0x8a>
20402704:	e5ad                	bnez	a1,2040276e <memset+0x78>
20402706:	ff067693          	andi	a3,a2,-16
2040270a:	8a3d                	andi	a2,a2,15
2040270c:	96ba                	add	a3,a3,a4
2040270e:	c30c                	sw	a1,0(a4)
20402710:	c34c                	sw	a1,4(a4)
20402712:	c70c                	sw	a1,8(a4)
20402714:	c74c                	sw	a1,12(a4)
20402716:	0741                	addi	a4,a4,16
20402718:	fed76be3          	bltu	a4,a3,2040270e <memset+0x18>
2040271c:	e211                	bnez	a2,20402720 <memset+0x2a>
2040271e:	8082                	ret
20402720:	40c306b3          	sub	a3,t1,a2
20402724:	068a                	slli	a3,a3,0x2
20402726:	00000297          	auipc	t0,0x0
2040272a:	9696                	add	a3,a3,t0
2040272c:	00a68067          	jr	10(a3)
20402730:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffa48a>
20402734:	00b706a3          	sb	a1,13(a4)
20402738:	00b70623          	sb	a1,12(a4)
2040273c:	00b705a3          	sb	a1,11(a4)
20402740:	00b70523          	sb	a1,10(a4)
20402744:	00b704a3          	sb	a1,9(a4)
20402748:	00b70423          	sb	a1,8(a4)
2040274c:	00b703a3          	sb	a1,7(a4)
20402750:	00b70323          	sb	a1,6(a4)
20402754:	00b702a3          	sb	a1,5(a4)
20402758:	00b70223          	sb	a1,4(a4)
2040275c:	00b701a3          	sb	a1,3(a4)
20402760:	00b70123          	sb	a1,2(a4)
20402764:	00b700a3          	sb	a1,1(a4)
20402768:	00b70023          	sb	a1,0(a4)
2040276c:	8082                	ret
2040276e:	0ff5f593          	andi	a1,a1,255
20402772:	00859693          	slli	a3,a1,0x8
20402776:	8dd5                	or	a1,a1,a3
20402778:	01059693          	slli	a3,a1,0x10
2040277c:	8dd5                	or	a1,a1,a3
2040277e:	b761                	j	20402706 <memset+0x10>
20402780:	00279693          	slli	a3,a5,0x2
20402784:	00000297          	auipc	t0,0x0
20402788:	9696                	add	a3,a3,t0
2040278a:	8286                	mv	t0,ra
2040278c:	fa8680e7          	jalr	-88(a3)
20402790:	8096                	mv	ra,t0
20402792:	17c1                	addi	a5,a5,-16
20402794:	8f1d                	sub	a4,a4,a5
20402796:	963e                	add	a2,a2,a5
20402798:	f8c374e3          	bgeu	t1,a2,20402720 <memset+0x2a>
2040279c:	b7a5                	j	20402704 <memset+0xe>

2040279e <_free_r>:
_free_r():
2040279e:	c5cd                	beqz	a1,20402848 <_free_r+0xaa>
204027a0:	ffc5a783          	lw	a5,-4(a1)
204027a4:	1141                	addi	sp,sp,-16
204027a6:	c422                	sw	s0,8(sp)
204027a8:	c606                	sw	ra,12(sp)
204027aa:	c226                	sw	s1,4(sp)
204027ac:	ffc58413          	addi	s0,a1,-4
204027b0:	0007d363          	bgez	a5,204027b6 <_free_r+0x18>
204027b4:	943e                	add	s0,s0,a5
204027b6:	84aa                	mv	s1,a0
204027b8:	2d95                	jal	20402e2c <__malloc_lock>
204027ba:	5fbff797          	auipc	a5,0x5fbff
204027be:	f7678793          	addi	a5,a5,-138 # 80001730 <metal_segment_data_target_end>
204027c2:	439c                	lw	a5,0(a5)
204027c4:	ef89                	bnez	a5,204027de <_free_r+0x40>
204027c6:	00042223          	sw	zero,4(s0)
204027ca:	5fbff797          	auipc	a5,0x5fbff
204027ce:	f687a323          	sw	s0,-154(a5) # 80001730 <metal_segment_data_target_end>
204027d2:	4422                	lw	s0,8(sp)
204027d4:	40b2                	lw	ra,12(sp)
204027d6:	8526                	mv	a0,s1
204027d8:	4492                	lw	s1,4(sp)
204027da:	0141                	addi	sp,sp,16
204027dc:	ad89                	j	20402e2e <__malloc_unlock>
204027de:	00f47e63          	bgeu	s0,a5,204027fa <_free_r+0x5c>
204027e2:	4014                	lw	a3,0(s0)
204027e4:	00d40733          	add	a4,s0,a3
204027e8:	00e79663          	bne	a5,a4,204027f4 <_free_r+0x56>
204027ec:	4398                	lw	a4,0(a5)
204027ee:	43dc                	lw	a5,4(a5)
204027f0:	9736                	add	a4,a4,a3
204027f2:	c018                	sw	a4,0(s0)
204027f4:	c05c                	sw	a5,4(s0)
204027f6:	bfd1                	j	204027ca <_free_r+0x2c>
204027f8:	87ba                	mv	a5,a4
204027fa:	43d8                	lw	a4,4(a5)
204027fc:	c319                	beqz	a4,20402802 <_free_r+0x64>
204027fe:	fee47de3          	bgeu	s0,a4,204027f8 <_free_r+0x5a>
20402802:	4394                	lw	a3,0(a5)
20402804:	00d78633          	add	a2,a5,a3
20402808:	00861f63          	bne	a2,s0,20402826 <_free_r+0x88>
2040280c:	4010                	lw	a2,0(s0)
2040280e:	96b2                	add	a3,a3,a2
20402810:	c394                	sw	a3,0(a5)
20402812:	00d78633          	add	a2,a5,a3
20402816:	fac71ee3          	bne	a4,a2,204027d2 <_free_r+0x34>
2040281a:	4310                	lw	a2,0(a4)
2040281c:	4358                	lw	a4,4(a4)
2040281e:	96b2                	add	a3,a3,a2
20402820:	c394                	sw	a3,0(a5)
20402822:	c3d8                	sw	a4,4(a5)
20402824:	b77d                	j	204027d2 <_free_r+0x34>
20402826:	00c47563          	bgeu	s0,a2,20402830 <_free_r+0x92>
2040282a:	47b1                	li	a5,12
2040282c:	c09c                	sw	a5,0(s1)
2040282e:	b755                	j	204027d2 <_free_r+0x34>
20402830:	4010                	lw	a2,0(s0)
20402832:	00c406b3          	add	a3,s0,a2
20402836:	00d71663          	bne	a4,a3,20402842 <_free_r+0xa4>
2040283a:	4314                	lw	a3,0(a4)
2040283c:	4358                	lw	a4,4(a4)
2040283e:	96b2                	add	a3,a3,a2
20402840:	c014                	sw	a3,0(s0)
20402842:	c058                	sw	a4,4(s0)
20402844:	c3c0                	sw	s0,4(a5)
20402846:	b771                	j	204027d2 <_free_r+0x34>
20402848:	8082                	ret

2040284a <_malloc_r>:
_malloc_r():
2040284a:	1101                	addi	sp,sp,-32
2040284c:	ca26                	sw	s1,20(sp)
2040284e:	00358493          	addi	s1,a1,3
20402852:	98f1                	andi	s1,s1,-4
20402854:	ce06                	sw	ra,28(sp)
20402856:	cc22                	sw	s0,24(sp)
20402858:	c84a                	sw	s2,16(sp)
2040285a:	c64e                	sw	s3,12(sp)
2040285c:	04a1                	addi	s1,s1,8
2040285e:	47b1                	li	a5,12
20402860:	04f4f763          	bgeu	s1,a5,204028ae <_malloc_r+0x64>
20402864:	44b1                	li	s1,12
20402866:	04b4e663          	bltu	s1,a1,204028b2 <_malloc_r+0x68>
2040286a:	892a                	mv	s2,a0
2040286c:	23c1                	jal	20402e2c <__malloc_lock>
2040286e:	5fbff797          	auipc	a5,0x5fbff
20402872:	ec278793          	addi	a5,a5,-318 # 80001730 <metal_segment_data_target_end>
20402876:	4398                	lw	a4,0(a5)
20402878:	843a                	mv	s0,a4
2040287a:	e431                	bnez	s0,204028c6 <_malloc_r+0x7c>
2040287c:	5fbff797          	auipc	a5,0x5fbff
20402880:	eb878793          	addi	a5,a5,-328 # 80001734 <__malloc_sbrk_start>
20402884:	439c                	lw	a5,0(a5)
20402886:	eb81                	bnez	a5,20402896 <_malloc_r+0x4c>
20402888:	4581                	li	a1,0
2040288a:	854a                	mv	a0,s2
2040288c:	264d                	jal	20402c2e <_sbrk_r>
2040288e:	5fbff797          	auipc	a5,0x5fbff
20402892:	eaa7a323          	sw	a0,-346(a5) # 80001734 <__malloc_sbrk_start>
20402896:	85a6                	mv	a1,s1
20402898:	854a                	mv	a0,s2
2040289a:	2e51                	jal	20402c2e <_sbrk_r>
2040289c:	59fd                	li	s3,-1
2040289e:	07351963          	bne	a0,s3,20402910 <_malloc_r+0xc6>
204028a2:	47b1                	li	a5,12
204028a4:	00f92023          	sw	a5,0(s2)
204028a8:	854a                	mv	a0,s2
204028aa:	2351                	jal	20402e2e <__malloc_unlock>
204028ac:	a029                	j	204028b6 <_malloc_r+0x6c>
204028ae:	fa04dce3          	bgez	s1,20402866 <_malloc_r+0x1c>
204028b2:	47b1                	li	a5,12
204028b4:	c11c                	sw	a5,0(a0)
204028b6:	4501                	li	a0,0
204028b8:	40f2                	lw	ra,28(sp)
204028ba:	4462                	lw	s0,24(sp)
204028bc:	44d2                	lw	s1,20(sp)
204028be:	4942                	lw	s2,16(sp)
204028c0:	49b2                	lw	s3,12(sp)
204028c2:	6105                	addi	sp,sp,32
204028c4:	8082                	ret
204028c6:	401c                	lw	a5,0(s0)
204028c8:	8f85                	sub	a5,a5,s1
204028ca:	0407c063          	bltz	a5,2040290a <_malloc_r+0xc0>
204028ce:	46ad                	li	a3,11
204028d0:	00f6f663          	bgeu	a3,a5,204028dc <_malloc_r+0x92>
204028d4:	c01c                	sw	a5,0(s0)
204028d6:	943e                	add	s0,s0,a5
204028d8:	c004                	sw	s1,0(s0)
204028da:	a801                	j	204028ea <_malloc_r+0xa0>
204028dc:	405c                	lw	a5,4(s0)
204028de:	02871463          	bne	a4,s0,20402906 <_malloc_r+0xbc>
204028e2:	5fbff717          	auipc	a4,0x5fbff
204028e6:	e4f72723          	sw	a5,-434(a4) # 80001730 <metal_segment_data_target_end>
204028ea:	854a                	mv	a0,s2
204028ec:	2389                	jal	20402e2e <__malloc_unlock>
204028ee:	00b40513          	addi	a0,s0,11
204028f2:	00440793          	addi	a5,s0,4
204028f6:	9961                	andi	a0,a0,-8
204028f8:	40f50733          	sub	a4,a0,a5
204028fc:	df55                	beqz	a4,204028b8 <_malloc_r+0x6e>
204028fe:	943a                	add	s0,s0,a4
20402900:	8f89                	sub	a5,a5,a0
20402902:	c01c                	sw	a5,0(s0)
20402904:	bf55                	j	204028b8 <_malloc_r+0x6e>
20402906:	c35c                	sw	a5,4(a4)
20402908:	b7cd                	j	204028ea <_malloc_r+0xa0>
2040290a:	8722                	mv	a4,s0
2040290c:	4040                	lw	s0,4(s0)
2040290e:	b7b5                	j	2040287a <_malloc_r+0x30>
20402910:	00350413          	addi	s0,a0,3
20402914:	9871                	andi	s0,s0,-4
20402916:	fc8501e3          	beq	a0,s0,204028d8 <_malloc_r+0x8e>
2040291a:	40a405b3          	sub	a1,s0,a0
2040291e:	854a                	mv	a0,s2
20402920:	2639                	jal	20402c2e <_sbrk_r>
20402922:	fb351be3          	bne	a0,s3,204028d8 <_malloc_r+0x8e>
20402926:	bfb5                	j	204028a2 <_malloc_r+0x58>

20402928 <__sfputc_r>:
__sfputc_r():
20402928:	461c                	lw	a5,8(a2)
2040292a:	17fd                	addi	a5,a5,-1
2040292c:	c61c                	sw	a5,8(a2)
2040292e:	0007da63          	bgez	a5,20402942 <__sfputc_r+0x1a>
20402932:	4e18                	lw	a4,24(a2)
20402934:	00e7c563          	blt	a5,a4,2040293e <__sfputc_r+0x16>
20402938:	47a9                	li	a5,10
2040293a:	00f59463          	bne	a1,a5,20402942 <__sfputc_r+0x1a>
2040293e:	f1cff06f          	j	2040205a <__swbuf_r>
20402942:	421c                	lw	a5,0(a2)
20402944:	852e                	mv	a0,a1
20402946:	00178713          	addi	a4,a5,1
2040294a:	c218                	sw	a4,0(a2)
2040294c:	00b78023          	sb	a1,0(a5)
20402950:	8082                	ret

20402952 <__sfputs_r>:
__sfputs_r():
20402952:	1101                	addi	sp,sp,-32
20402954:	cc22                	sw	s0,24(sp)
20402956:	ca26                	sw	s1,20(sp)
20402958:	c84a                	sw	s2,16(sp)
2040295a:	c64e                	sw	s3,12(sp)
2040295c:	c452                	sw	s4,8(sp)
2040295e:	ce06                	sw	ra,28(sp)
20402960:	892a                	mv	s2,a0
20402962:	89ae                	mv	s3,a1
20402964:	8432                	mv	s0,a2
20402966:	00d604b3          	add	s1,a2,a3
2040296a:	5a7d                	li	s4,-1
2040296c:	00941463          	bne	s0,s1,20402974 <__sfputs_r+0x22>
20402970:	4501                	li	a0,0
20402972:	a809                	j	20402984 <__sfputs_r+0x32>
20402974:	00044583          	lbu	a1,0(s0)
20402978:	864e                	mv	a2,s3
2040297a:	854a                	mv	a0,s2
2040297c:	3775                	jal	20402928 <__sfputc_r>
2040297e:	0405                	addi	s0,s0,1
20402980:	ff4516e3          	bne	a0,s4,2040296c <__sfputs_r+0x1a>
20402984:	40f2                	lw	ra,28(sp)
20402986:	4462                	lw	s0,24(sp)
20402988:	44d2                	lw	s1,20(sp)
2040298a:	4942                	lw	s2,16(sp)
2040298c:	49b2                	lw	s3,12(sp)
2040298e:	4a22                	lw	s4,8(sp)
20402990:	6105                	addi	sp,sp,32
20402992:	8082                	ret

20402994 <_vfiprintf_r>:
_vfiprintf_r():
20402994:	7135                	addi	sp,sp,-160
20402996:	cd22                	sw	s0,152(sp)
20402998:	cb26                	sw	s1,148(sp)
2040299a:	c94a                	sw	s2,144(sp)
2040299c:	c74e                	sw	s3,140(sp)
2040299e:	cf06                	sw	ra,156(sp)
204029a0:	c552                	sw	s4,136(sp)
204029a2:	c356                	sw	s5,132(sp)
204029a4:	c15a                	sw	s6,128(sp)
204029a6:	dede                	sw	s7,124(sp)
204029a8:	dce2                	sw	s8,120(sp)
204029aa:	dae6                	sw	s9,116(sp)
204029ac:	89aa                	mv	s3,a0
204029ae:	84ae                	mv	s1,a1
204029b0:	8932                	mv	s2,a2
204029b2:	8436                	mv	s0,a3
204029b4:	c509                	beqz	a0,204029be <_vfiprintf_r+0x2a>
204029b6:	4d1c                	lw	a5,24(a0)
204029b8:	e399                	bnez	a5,204029be <_vfiprintf_r+0x2a>
204029ba:	ad5ff0ef          	jal	ra,2040248e <__sinit>
204029be:	00004797          	auipc	a5,0x4
204029c2:	4ce78793          	addi	a5,a5,1230 # 20406e8c <__sf_fake_stdin>
204029c6:	0cf49b63          	bne	s1,a5,20402a9c <_vfiprintf_r+0x108>
204029ca:	0049a483          	lw	s1,4(s3)
204029ce:	00c4d783          	lhu	a5,12(s1)
204029d2:	8ba1                	andi	a5,a5,8
204029d4:	c7f5                	beqz	a5,20402ac0 <_vfiprintf_r+0x12c>
204029d6:	489c                	lw	a5,16(s1)
204029d8:	c7e5                	beqz	a5,20402ac0 <_vfiprintf_r+0x12c>
204029da:	02000793          	li	a5,32
204029de:	02f104a3          	sb	a5,41(sp)
204029e2:	03000793          	li	a5,48
204029e6:	d202                	sw	zero,36(sp)
204029e8:	02f10523          	sb	a5,42(sp)
204029ec:	c622                	sw	s0,12(sp)
204029ee:	02500b93          	li	s7,37
204029f2:	00004a97          	auipc	s5,0x4
204029f6:	4daa8a93          	addi	s5,s5,1242 # 20406ecc <__sf_fake_stdout+0x20>
204029fa:	4c05                	li	s8,1
204029fc:	4b29                	li	s6,10
204029fe:	844a                	mv	s0,s2
20402a00:	00044783          	lbu	a5,0(s0)
20402a04:	c399                	beqz	a5,20402a0a <_vfiprintf_r+0x76>
20402a06:	0f779063          	bne	a5,s7,20402ae6 <_vfiprintf_r+0x152>
20402a0a:	41240cb3          	sub	s9,s0,s2
20402a0e:	000c8d63          	beqz	s9,20402a28 <_vfiprintf_r+0x94>
20402a12:	86e6                	mv	a3,s9
20402a14:	864a                	mv	a2,s2
20402a16:	85a6                	mv	a1,s1
20402a18:	854e                	mv	a0,s3
20402a1a:	3f25                	jal	20402952 <__sfputs_r>
20402a1c:	57fd                	li	a5,-1
20402a1e:	1ef50663          	beq	a0,a5,20402c0a <_vfiprintf_r+0x276>
20402a22:	5692                	lw	a3,36(sp)
20402a24:	96e6                	add	a3,a3,s9
20402a26:	d236                	sw	a3,36(sp)
20402a28:	00044783          	lbu	a5,0(s0)
20402a2c:	1c078f63          	beqz	a5,20402c0a <_vfiprintf_r+0x276>
20402a30:	57fd                	li	a5,-1
20402a32:	00140913          	addi	s2,s0,1
20402a36:	c802                	sw	zero,16(sp)
20402a38:	ce02                	sw	zero,28(sp)
20402a3a:	ca3e                	sw	a5,20(sp)
20402a3c:	cc02                	sw	zero,24(sp)
20402a3e:	040109a3          	sb	zero,83(sp)
20402a42:	d482                	sw	zero,104(sp)
20402a44:	00094583          	lbu	a1,0(s2)
20402a48:	4615                	li	a2,5
20402a4a:	8556                	mv	a0,s5
20402a4c:	26d9                	jal	20402e12 <memchr>
20402a4e:	00190413          	addi	s0,s2,1
20402a52:	47c2                	lw	a5,16(sp)
20402a54:	e959                	bnez	a0,20402aea <_vfiprintf_r+0x156>
20402a56:	0107f713          	andi	a4,a5,16
20402a5a:	c709                	beqz	a4,20402a64 <_vfiprintf_r+0xd0>
20402a5c:	02000713          	li	a4,32
20402a60:	04e109a3          	sb	a4,83(sp)
20402a64:	0087f713          	andi	a4,a5,8
20402a68:	c709                	beqz	a4,20402a72 <_vfiprintf_r+0xde>
20402a6a:	02b00713          	li	a4,43
20402a6e:	04e109a3          	sb	a4,83(sp)
20402a72:	00094683          	lbu	a3,0(s2)
20402a76:	02a00713          	li	a4,42
20402a7a:	08e68063          	beq	a3,a4,20402afa <_vfiprintf_r+0x166>
20402a7e:	47f2                	lw	a5,28(sp)
20402a80:	844a                	mv	s0,s2
20402a82:	4681                	li	a3,0
20402a84:	4625                	li	a2,9
20402a86:	00044703          	lbu	a4,0(s0)
20402a8a:	00140593          	addi	a1,s0,1
20402a8e:	fd070713          	addi	a4,a4,-48
20402a92:	0ae67963          	bgeu	a2,a4,20402b44 <_vfiprintf_r+0x1b0>
20402a96:	cab5                	beqz	a3,20402b0a <_vfiprintf_r+0x176>
20402a98:	ce3e                	sw	a5,28(sp)
20402a9a:	a885                	j	20402b0a <_vfiprintf_r+0x176>
20402a9c:	00004797          	auipc	a5,0x4
20402aa0:	41078793          	addi	a5,a5,1040 # 20406eac <__sf_fake_stdout>
20402aa4:	00f49563          	bne	s1,a5,20402aae <_vfiprintf_r+0x11a>
20402aa8:	0089a483          	lw	s1,8(s3)
20402aac:	b70d                	j	204029ce <_vfiprintf_r+0x3a>
20402aae:	00004797          	auipc	a5,0x4
20402ab2:	3be78793          	addi	a5,a5,958 # 20406e6c <__sf_fake_stderr>
20402ab6:	f0f49ce3          	bne	s1,a5,204029ce <_vfiprintf_r+0x3a>
20402aba:	00c9a483          	lw	s1,12(s3)
20402abe:	bf01                	j	204029ce <_vfiprintf_r+0x3a>
20402ac0:	85a6                	mv	a1,s1
20402ac2:	854e                	mv	a0,s3
20402ac4:	e56ff0ef          	jal	ra,2040211a <__swsetup_r>
20402ac8:	d909                	beqz	a0,204029da <_vfiprintf_r+0x46>
20402aca:	557d                	li	a0,-1
20402acc:	40fa                	lw	ra,156(sp)
20402ace:	446a                	lw	s0,152(sp)
20402ad0:	44da                	lw	s1,148(sp)
20402ad2:	494a                	lw	s2,144(sp)
20402ad4:	49ba                	lw	s3,140(sp)
20402ad6:	4a2a                	lw	s4,136(sp)
20402ad8:	4a9a                	lw	s5,132(sp)
20402ada:	4b0a                	lw	s6,128(sp)
20402adc:	5bf6                	lw	s7,124(sp)
20402ade:	5c66                	lw	s8,120(sp)
20402ae0:	5cd6                	lw	s9,116(sp)
20402ae2:	610d                	addi	sp,sp,160
20402ae4:	8082                	ret
20402ae6:	0405                	addi	s0,s0,1
20402ae8:	bf21                	j	20402a00 <_vfiprintf_r+0x6c>
20402aea:	41550533          	sub	a0,a0,s5
20402aee:	00ac1533          	sll	a0,s8,a0
20402af2:	8fc9                	or	a5,a5,a0
20402af4:	c83e                	sw	a5,16(sp)
20402af6:	8922                	mv	s2,s0
20402af8:	b7b1                	j	20402a44 <_vfiprintf_r+0xb0>
20402afa:	4732                	lw	a4,12(sp)
20402afc:	00470693          	addi	a3,a4,4
20402b00:	4318                	lw	a4,0(a4)
20402b02:	c636                	sw	a3,12(sp)
20402b04:	02074963          	bltz	a4,20402b36 <_vfiprintf_r+0x1a2>
20402b08:	ce3a                	sw	a4,28(sp)
20402b0a:	00044703          	lbu	a4,0(s0)
20402b0e:	02e00793          	li	a5,46
20402b12:	04f71f63          	bne	a4,a5,20402b70 <_vfiprintf_r+0x1dc>
20402b16:	00144703          	lbu	a4,1(s0)
20402b1a:	02a00793          	li	a5,42
20402b1e:	02f71b63          	bne	a4,a5,20402b54 <_vfiprintf_r+0x1c0>
20402b22:	47b2                	lw	a5,12(sp)
20402b24:	0409                	addi	s0,s0,2
20402b26:	00478713          	addi	a4,a5,4
20402b2a:	439c                	lw	a5,0(a5)
20402b2c:	c63a                	sw	a4,12(sp)
20402b2e:	0207c163          	bltz	a5,20402b50 <_vfiprintf_r+0x1bc>
20402b32:	ca3e                	sw	a5,20(sp)
20402b34:	a835                	j	20402b70 <_vfiprintf_r+0x1dc>
20402b36:	40e00733          	neg	a4,a4
20402b3a:	0027e793          	ori	a5,a5,2
20402b3e:	ce3a                	sw	a4,28(sp)
20402b40:	c83e                	sw	a5,16(sp)
20402b42:	b7e1                	j	20402b0a <_vfiprintf_r+0x176>
20402b44:	036787b3          	mul	a5,a5,s6
20402b48:	4685                	li	a3,1
20402b4a:	842e                	mv	s0,a1
20402b4c:	97ba                	add	a5,a5,a4
20402b4e:	bf25                	j	20402a86 <_vfiprintf_r+0xf2>
20402b50:	57fd                	li	a5,-1
20402b52:	b7c5                	j	20402b32 <_vfiprintf_r+0x19e>
20402b54:	0405                	addi	s0,s0,1
20402b56:	ca02                	sw	zero,20(sp)
20402b58:	4681                	li	a3,0
20402b5a:	4781                	li	a5,0
20402b5c:	4625                	li	a2,9
20402b5e:	00044703          	lbu	a4,0(s0)
20402b62:	00140593          	addi	a1,s0,1
20402b66:	fd070713          	addi	a4,a4,-48
20402b6a:	06e67663          	bgeu	a2,a4,20402bd6 <_vfiprintf_r+0x242>
20402b6e:	f2f1                	bnez	a3,20402b32 <_vfiprintf_r+0x19e>
20402b70:	00044583          	lbu	a1,0(s0)
20402b74:	460d                	li	a2,3
20402b76:	00004517          	auipc	a0,0x4
20402b7a:	35e50513          	addi	a0,a0,862 # 20406ed4 <__sf_fake_stdout+0x28>
20402b7e:	2c51                	jal	20402e12 <memchr>
20402b80:	cd11                	beqz	a0,20402b9c <_vfiprintf_r+0x208>
20402b82:	00004797          	auipc	a5,0x4
20402b86:	35278793          	addi	a5,a5,850 # 20406ed4 <__sf_fake_stdout+0x28>
20402b8a:	8d1d                	sub	a0,a0,a5
20402b8c:	04000793          	li	a5,64
20402b90:	00a797b3          	sll	a5,a5,a0
20402b94:	4542                	lw	a0,16(sp)
20402b96:	0405                	addi	s0,s0,1
20402b98:	8d5d                	or	a0,a0,a5
20402b9a:	c82a                	sw	a0,16(sp)
20402b9c:	00044583          	lbu	a1,0(s0)
20402ba0:	4619                	li	a2,6
20402ba2:	00004517          	auipc	a0,0x4
20402ba6:	33650513          	addi	a0,a0,822 # 20406ed8 <__sf_fake_stdout+0x2c>
20402baa:	00140913          	addi	s2,s0,1
20402bae:	02b10423          	sb	a1,40(sp)
20402bb2:	2485                	jal	20402e12 <memchr>
20402bb4:	c13d                	beqz	a0,20402c1a <_vfiprintf_r+0x286>
20402bb6:	dfbfd797          	auipc	a5,0xdfbfd
20402bba:	44a78793          	addi	a5,a5,1098 # 0 <__metal_boot_hart>
20402bbe:	e795                	bnez	a5,20402bea <_vfiprintf_r+0x256>
20402bc0:	4742                	lw	a4,16(sp)
20402bc2:	47b2                	lw	a5,12(sp)
20402bc4:	10077713          	andi	a4,a4,256
20402bc8:	cf09                	beqz	a4,20402be2 <_vfiprintf_r+0x24e>
20402bca:	0791                	addi	a5,a5,4
20402bcc:	c63e                	sw	a5,12(sp)
20402bce:	5792                	lw	a5,36(sp)
20402bd0:	97d2                	add	a5,a5,s4
20402bd2:	d23e                	sw	a5,36(sp)
20402bd4:	b52d                	j	204029fe <_vfiprintf_r+0x6a>
20402bd6:	036787b3          	mul	a5,a5,s6
20402bda:	4685                	li	a3,1
20402bdc:	842e                	mv	s0,a1
20402bde:	97ba                	add	a5,a5,a4
20402be0:	bfbd                	j	20402b5e <_vfiprintf_r+0x1ca>
20402be2:	079d                	addi	a5,a5,7
20402be4:	9be1                	andi	a5,a5,-8
20402be6:	07a1                	addi	a5,a5,8
20402be8:	b7d5                	j	20402bcc <_vfiprintf_r+0x238>
20402bea:	0078                	addi	a4,sp,12
20402bec:	00000697          	auipc	a3,0x0
20402bf0:	d6668693          	addi	a3,a3,-666 # 20402952 <__sfputs_r>
20402bf4:	8626                	mv	a2,s1
20402bf6:	080c                	addi	a1,sp,16
20402bf8:	854e                	mv	a0,s3
20402bfa:	00000097          	auipc	ra,0x0
20402bfe:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
20402c02:	57fd                	li	a5,-1
20402c04:	8a2a                	mv	s4,a0
20402c06:	fcf514e3          	bne	a0,a5,20402bce <_vfiprintf_r+0x23a>
20402c0a:	00c4d783          	lhu	a5,12(s1)
20402c0e:	0407f793          	andi	a5,a5,64
20402c12:	ea079ce3          	bnez	a5,20402aca <_vfiprintf_r+0x136>
20402c16:	5512                	lw	a0,36(sp)
20402c18:	bd55                	j	20402acc <_vfiprintf_r+0x138>
20402c1a:	0078                	addi	a4,sp,12
20402c1c:	00000697          	auipc	a3,0x0
20402c20:	d3668693          	addi	a3,a3,-714 # 20402952 <__sfputs_r>
20402c24:	8626                	mv	a2,s1
20402c26:	080c                	addi	a1,sp,16
20402c28:	854e                	mv	a0,s3
20402c2a:	2e09                	jal	20402f3c <_printf_i>
20402c2c:	bfd9                	j	20402c02 <_vfiprintf_r+0x26e>

20402c2e <_sbrk_r>:
_sbrk_r():
20402c2e:	1141                	addi	sp,sp,-16
20402c30:	c422                	sw	s0,8(sp)
20402c32:	842a                	mv	s0,a0
20402c34:	852e                	mv	a0,a1
20402c36:	5fc00797          	auipc	a5,0x5fc00
20402c3a:	3407a523          	sw	zero,842(a5) # 80002f80 <errno>
20402c3e:	c606                	sw	ra,12(sp)
20402c40:	2d41                	jal	204032d0 <_sbrk>
20402c42:	57fd                	li	a5,-1
20402c44:	00f51963          	bne	a0,a5,20402c56 <_sbrk_r+0x28>
20402c48:	5fc00797          	auipc	a5,0x5fc00
20402c4c:	33878793          	addi	a5,a5,824 # 80002f80 <errno>
20402c50:	439c                	lw	a5,0(a5)
20402c52:	c391                	beqz	a5,20402c56 <_sbrk_r+0x28>
20402c54:	c01c                	sw	a5,0(s0)
20402c56:	40b2                	lw	ra,12(sp)
20402c58:	4422                	lw	s0,8(sp)
20402c5a:	0141                	addi	sp,sp,16
20402c5c:	8082                	ret

20402c5e <__sread>:
__sread():
20402c5e:	1141                	addi	sp,sp,-16
20402c60:	c422                	sw	s0,8(sp)
20402c62:	842e                	mv	s0,a1
20402c64:	00e59583          	lh	a1,14(a1)
20402c68:	c606                	sw	ra,12(sp)
20402c6a:	2b9d                	jal	204031e0 <_read_r>
20402c6c:	00054963          	bltz	a0,20402c7e <__sread+0x20>
20402c70:	487c                	lw	a5,84(s0)
20402c72:	97aa                	add	a5,a5,a0
20402c74:	c87c                	sw	a5,84(s0)
20402c76:	40b2                	lw	ra,12(sp)
20402c78:	4422                	lw	s0,8(sp)
20402c7a:	0141                	addi	sp,sp,16
20402c7c:	8082                	ret
20402c7e:	00c45783          	lhu	a5,12(s0)
20402c82:	777d                	lui	a4,0xfffff
20402c84:	177d                	addi	a4,a4,-1
20402c86:	8ff9                	and	a5,a5,a4
20402c88:	00f41623          	sh	a5,12(s0)
20402c8c:	b7ed                	j	20402c76 <__sread+0x18>

20402c8e <__swrite>:
__swrite():
20402c8e:	00c5d783          	lhu	a5,12(a1)
20402c92:	1101                	addi	sp,sp,-32
20402c94:	cc22                	sw	s0,24(sp)
20402c96:	ca26                	sw	s1,20(sp)
20402c98:	c84a                	sw	s2,16(sp)
20402c9a:	c64e                	sw	s3,12(sp)
20402c9c:	ce06                	sw	ra,28(sp)
20402c9e:	1007f793          	andi	a5,a5,256
20402ca2:	84aa                	mv	s1,a0
20402ca4:	842e                	mv	s0,a1
20402ca6:	8932                	mv	s2,a2
20402ca8:	89b6                	mv	s3,a3
20402caa:	c791                	beqz	a5,20402cb6 <__swrite+0x28>
20402cac:	00e59583          	lh	a1,14(a1)
20402cb0:	4689                	li	a3,2
20402cb2:	4601                	li	a2,0
20402cb4:	222d                	jal	20402dde <_lseek_r>
20402cb6:	00c45783          	lhu	a5,12(s0)
20402cba:	777d                	lui	a4,0xfffff
20402cbc:	177d                	addi	a4,a4,-1
20402cbe:	8ff9                	and	a5,a5,a4
20402cc0:	00f41623          	sh	a5,12(s0)
20402cc4:	00e41583          	lh	a1,14(s0)
20402cc8:	4462                	lw	s0,24(sp)
20402cca:	40f2                	lw	ra,28(sp)
20402ccc:	86ce                	mv	a3,s3
20402cce:	864a                	mv	a2,s2
20402cd0:	49b2                	lw	s3,12(sp)
20402cd2:	4942                	lw	s2,16(sp)
20402cd4:	8526                	mv	a0,s1
20402cd6:	44d2                	lw	s1,20(sp)
20402cd8:	6105                	addi	sp,sp,32
20402cda:	a83d                	j	20402d18 <_write_r>

20402cdc <__sseek>:
__sseek():
20402cdc:	1141                	addi	sp,sp,-16
20402cde:	c422                	sw	s0,8(sp)
20402ce0:	842e                	mv	s0,a1
20402ce2:	00e59583          	lh	a1,14(a1)
20402ce6:	c606                	sw	ra,12(sp)
20402ce8:	28dd                	jal	20402dde <_lseek_r>
20402cea:	57fd                	li	a5,-1
20402cec:	00c45703          	lhu	a4,12(s0)
20402cf0:	00f51b63          	bne	a0,a5,20402d06 <__sseek+0x2a>
20402cf4:	77fd                	lui	a5,0xfffff
20402cf6:	17fd                	addi	a5,a5,-1
20402cf8:	8ff9                	and	a5,a5,a4
20402cfa:	00f41623          	sh	a5,12(s0)
20402cfe:	40b2                	lw	ra,12(sp)
20402d00:	4422                	lw	s0,8(sp)
20402d02:	0141                	addi	sp,sp,16
20402d04:	8082                	ret
20402d06:	6785                	lui	a5,0x1
20402d08:	8fd9                	or	a5,a5,a4
20402d0a:	00f41623          	sh	a5,12(s0)
20402d0e:	c868                	sw	a0,84(s0)
20402d10:	b7fd                	j	20402cfe <__sseek+0x22>

20402d12 <__sclose>:
__sclose():
20402d12:	00e59583          	lh	a1,14(a1)
20402d16:	a81d                	j	20402d4c <_close_r>

20402d18 <_write_r>:
_write_r():
20402d18:	1141                	addi	sp,sp,-16
20402d1a:	c422                	sw	s0,8(sp)
20402d1c:	842a                	mv	s0,a0
20402d1e:	852e                	mv	a0,a1
20402d20:	85b2                	mv	a1,a2
20402d22:	8636                	mv	a2,a3
20402d24:	5fc00797          	auipc	a5,0x5fc00
20402d28:	2407ae23          	sw	zero,604(a5) # 80002f80 <errno>
20402d2c:	c606                	sw	ra,12(sp)
20402d2e:	2505                	jal	2040334e <_write>
20402d30:	57fd                	li	a5,-1
20402d32:	00f51963          	bne	a0,a5,20402d44 <_write_r+0x2c>
20402d36:	5fc00797          	auipc	a5,0x5fc00
20402d3a:	24a78793          	addi	a5,a5,586 # 80002f80 <errno>
20402d3e:	439c                	lw	a5,0(a5)
20402d40:	c391                	beqz	a5,20402d44 <_write_r+0x2c>
20402d42:	c01c                	sw	a5,0(s0)
20402d44:	40b2                	lw	ra,12(sp)
20402d46:	4422                	lw	s0,8(sp)
20402d48:	0141                	addi	sp,sp,16
20402d4a:	8082                	ret

20402d4c <_close_r>:
_close_r():
20402d4c:	1141                	addi	sp,sp,-16
20402d4e:	c422                	sw	s0,8(sp)
20402d50:	842a                	mv	s0,a0
20402d52:	852e                	mv	a0,a1
20402d54:	5fc00797          	auipc	a5,0x5fc00
20402d58:	2207a623          	sw	zero,556(a5) # 80002f80 <errno>
20402d5c:	c606                	sw	ra,12(sp)
20402d5e:	295d                	jal	20403214 <_close>
20402d60:	57fd                	li	a5,-1
20402d62:	00f51963          	bne	a0,a5,20402d74 <_close_r+0x28>
20402d66:	5fc00797          	auipc	a5,0x5fc00
20402d6a:	21a78793          	addi	a5,a5,538 # 80002f80 <errno>
20402d6e:	439c                	lw	a5,0(a5)
20402d70:	c391                	beqz	a5,20402d74 <_close_r+0x28>
20402d72:	c01c                	sw	a5,0(s0)
20402d74:	40b2                	lw	ra,12(sp)
20402d76:	4422                	lw	s0,8(sp)
20402d78:	0141                	addi	sp,sp,16
20402d7a:	8082                	ret

20402d7c <_fstat_r>:
_fstat_r():
20402d7c:	1141                	addi	sp,sp,-16
20402d7e:	c422                	sw	s0,8(sp)
20402d80:	842a                	mv	s0,a0
20402d82:	852e                	mv	a0,a1
20402d84:	85b2                	mv	a1,a2
20402d86:	5fc00797          	auipc	a5,0x5fc00
20402d8a:	1e07ad23          	sw	zero,506(a5) # 80002f80 <errno>
20402d8e:	c606                	sw	ra,12(sp)
20402d90:	215d                	jal	20403236 <_fstat>
20402d92:	57fd                	li	a5,-1
20402d94:	00f51963          	bne	a0,a5,20402da6 <_fstat_r+0x2a>
20402d98:	5fc00797          	auipc	a5,0x5fc00
20402d9c:	1e878793          	addi	a5,a5,488 # 80002f80 <errno>
20402da0:	439c                	lw	a5,0(a5)
20402da2:	c391                	beqz	a5,20402da6 <_fstat_r+0x2a>
20402da4:	c01c                	sw	a5,0(s0)
20402da6:	40b2                	lw	ra,12(sp)
20402da8:	4422                	lw	s0,8(sp)
20402daa:	0141                	addi	sp,sp,16
20402dac:	8082                	ret

20402dae <_isatty_r>:
_isatty_r():
20402dae:	1141                	addi	sp,sp,-16
20402db0:	c422                	sw	s0,8(sp)
20402db2:	842a                	mv	s0,a0
20402db4:	852e                	mv	a0,a1
20402db6:	5fc00797          	auipc	a5,0x5fc00
20402dba:	1c07a523          	sw	zero,458(a5) # 80002f80 <errno>
20402dbe:	c606                	sw	ra,12(sp)
20402dc0:	2971                	jal	2040325c <_isatty>
20402dc2:	57fd                	li	a5,-1
20402dc4:	00f51963          	bne	a0,a5,20402dd6 <_isatty_r+0x28>
20402dc8:	5fc00797          	auipc	a5,0x5fc00
20402dcc:	1b878793          	addi	a5,a5,440 # 80002f80 <errno>
20402dd0:	439c                	lw	a5,0(a5)
20402dd2:	c391                	beqz	a5,20402dd6 <_isatty_r+0x28>
20402dd4:	c01c                	sw	a5,0(s0)
20402dd6:	40b2                	lw	ra,12(sp)
20402dd8:	4422                	lw	s0,8(sp)
20402dda:	0141                	addi	sp,sp,16
20402ddc:	8082                	ret

20402dde <_lseek_r>:
_lseek_r():
20402dde:	1141                	addi	sp,sp,-16
20402de0:	c422                	sw	s0,8(sp)
20402de2:	842a                	mv	s0,a0
20402de4:	852e                	mv	a0,a1
20402de6:	85b2                	mv	a1,a2
20402de8:	8636                	mv	a2,a3
20402dea:	5fc00797          	auipc	a5,0x5fc00
20402dee:	1807ab23          	sw	zero,406(a5) # 80002f80 <errno>
20402df2:	c606                	sw	ra,12(sp)
20402df4:	2161                	jal	2040327c <_lseek>
20402df6:	57fd                	li	a5,-1
20402df8:	00f51963          	bne	a0,a5,20402e0a <_lseek_r+0x2c>
20402dfc:	5fc00797          	auipc	a5,0x5fc00
20402e00:	18478793          	addi	a5,a5,388 # 80002f80 <errno>
20402e04:	439c                	lw	a5,0(a5)
20402e06:	c391                	beqz	a5,20402e0a <_lseek_r+0x2c>
20402e08:	c01c                	sw	a5,0(s0)
20402e0a:	40b2                	lw	ra,12(sp)
20402e0c:	4422                	lw	s0,8(sp)
20402e0e:	0141                	addi	sp,sp,16
20402e10:	8082                	ret

20402e12 <memchr>:
memchr():
20402e12:	0ff5f593          	andi	a1,a1,255
20402e16:	962a                	add	a2,a2,a0
20402e18:	00c51463          	bne	a0,a2,20402e20 <memchr+0xe>
20402e1c:	4501                	li	a0,0
20402e1e:	8082                	ret
20402e20:	00054783          	lbu	a5,0(a0)
20402e24:	feb78de3          	beq	a5,a1,20402e1e <memchr+0xc>
20402e28:	0505                	addi	a0,a0,1
20402e2a:	b7fd                	j	20402e18 <memchr+0x6>

20402e2c <__malloc_lock>:
__malloc_lock():
20402e2c:	8082                	ret

20402e2e <__malloc_unlock>:
__malloc_unlock():
20402e2e:	8082                	ret

20402e30 <_printf_common>:
_printf_common():
20402e30:	7179                	addi	sp,sp,-48
20402e32:	ca56                	sw	s5,20(sp)
20402e34:	499c                	lw	a5,16(a1)
20402e36:	8aba                	mv	s5,a4
20402e38:	4598                	lw	a4,8(a1)
20402e3a:	d422                	sw	s0,40(sp)
20402e3c:	d226                	sw	s1,36(sp)
20402e3e:	ce4e                	sw	s3,28(sp)
20402e40:	cc52                	sw	s4,24(sp)
20402e42:	d606                	sw	ra,44(sp)
20402e44:	d04a                	sw	s2,32(sp)
20402e46:	c85a                	sw	s6,16(sp)
20402e48:	c65e                	sw	s7,12(sp)
20402e4a:	89aa                	mv	s3,a0
20402e4c:	842e                	mv	s0,a1
20402e4e:	84b2                	mv	s1,a2
20402e50:	8a36                	mv	s4,a3
20402e52:	00e7d363          	bge	a5,a4,20402e58 <_printf_common+0x28>
20402e56:	87ba                	mv	a5,a4
20402e58:	c09c                	sw	a5,0(s1)
20402e5a:	04344703          	lbu	a4,67(s0)
20402e5e:	c319                	beqz	a4,20402e64 <_printf_common+0x34>
20402e60:	0785                	addi	a5,a5,1
20402e62:	c09c                	sw	a5,0(s1)
20402e64:	401c                	lw	a5,0(s0)
20402e66:	0207f793          	andi	a5,a5,32
20402e6a:	c781                	beqz	a5,20402e72 <_printf_common+0x42>
20402e6c:	409c                	lw	a5,0(s1)
20402e6e:	0789                	addi	a5,a5,2
20402e70:	c09c                	sw	a5,0(s1)
20402e72:	00042903          	lw	s2,0(s0)
20402e76:	00697913          	andi	s2,s2,6
20402e7a:	00091a63          	bnez	s2,20402e8e <_printf_common+0x5e>
20402e7e:	01940b13          	addi	s6,s0,25
20402e82:	5bfd                	li	s7,-1
20402e84:	445c                	lw	a5,12(s0)
20402e86:	4098                	lw	a4,0(s1)
20402e88:	8f99                	sub	a5,a5,a4
20402e8a:	04f94c63          	blt	s2,a5,20402ee2 <_printf_common+0xb2>
20402e8e:	401c                	lw	a5,0(s0)
20402e90:	04344683          	lbu	a3,67(s0)
20402e94:	0207f793          	andi	a5,a5,32
20402e98:	00d036b3          	snez	a3,a3
20402e9c:	eba5                	bnez	a5,20402f0c <_printf_common+0xdc>
20402e9e:	04340613          	addi	a2,s0,67
20402ea2:	85d2                	mv	a1,s4
20402ea4:	854e                	mv	a0,s3
20402ea6:	9a82                	jalr	s5
20402ea8:	57fd                	li	a5,-1
20402eaa:	04f50363          	beq	a0,a5,20402ef0 <_printf_common+0xc0>
20402eae:	401c                	lw	a5,0(s0)
20402eb0:	4611                	li	a2,4
20402eb2:	4098                	lw	a4,0(s1)
20402eb4:	8b99                	andi	a5,a5,6
20402eb6:	4454                	lw	a3,12(s0)
20402eb8:	4481                	li	s1,0
20402eba:	00c79763          	bne	a5,a2,20402ec8 <_printf_common+0x98>
20402ebe:	40e684b3          	sub	s1,a3,a4
20402ec2:	0004d363          	bgez	s1,20402ec8 <_printf_common+0x98>
20402ec6:	4481                	li	s1,0
20402ec8:	441c                	lw	a5,8(s0)
20402eca:	4818                	lw	a4,16(s0)
20402ecc:	00f75463          	bge	a4,a5,20402ed4 <_printf_common+0xa4>
20402ed0:	8f99                	sub	a5,a5,a4
20402ed2:	94be                	add	s1,s1,a5
20402ed4:	4901                	li	s2,0
20402ed6:	0469                	addi	s0,s0,26
20402ed8:	5b7d                	li	s6,-1
20402eda:	05249863          	bne	s1,s2,20402f2a <_printf_common+0xfa>
20402ede:	4501                	li	a0,0
20402ee0:	a809                	j	20402ef2 <_printf_common+0xc2>
20402ee2:	4685                	li	a3,1
20402ee4:	865a                	mv	a2,s6
20402ee6:	85d2                	mv	a1,s4
20402ee8:	854e                	mv	a0,s3
20402eea:	9a82                	jalr	s5
20402eec:	01751e63          	bne	a0,s7,20402f08 <_printf_common+0xd8>
20402ef0:	557d                	li	a0,-1
20402ef2:	50b2                	lw	ra,44(sp)
20402ef4:	5422                	lw	s0,40(sp)
20402ef6:	5492                	lw	s1,36(sp)
20402ef8:	5902                	lw	s2,32(sp)
20402efa:	49f2                	lw	s3,28(sp)
20402efc:	4a62                	lw	s4,24(sp)
20402efe:	4ad2                	lw	s5,20(sp)
20402f00:	4b42                	lw	s6,16(sp)
20402f02:	4bb2                	lw	s7,12(sp)
20402f04:	6145                	addi	sp,sp,48
20402f06:	8082                	ret
20402f08:	0905                	addi	s2,s2,1
20402f0a:	bfad                	j	20402e84 <_printf_common+0x54>
20402f0c:	00d40733          	add	a4,s0,a3
20402f10:	03000613          	li	a2,48
20402f14:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffb4bf>
20402f18:	04544703          	lbu	a4,69(s0)
20402f1c:	00168793          	addi	a5,a3,1
20402f20:	97a2                	add	a5,a5,s0
20402f22:	0689                	addi	a3,a3,2
20402f24:	04e781a3          	sb	a4,67(a5)
20402f28:	bf9d                	j	20402e9e <_printf_common+0x6e>
20402f2a:	4685                	li	a3,1
20402f2c:	8622                	mv	a2,s0
20402f2e:	85d2                	mv	a1,s4
20402f30:	854e                	mv	a0,s3
20402f32:	9a82                	jalr	s5
20402f34:	fb650ee3          	beq	a0,s6,20402ef0 <_printf_common+0xc0>
20402f38:	0905                	addi	s2,s2,1
20402f3a:	b745                	j	20402eda <_printf_common+0xaa>

20402f3c <_printf_i>:
_printf_i():
20402f3c:	7179                	addi	sp,sp,-48
20402f3e:	d422                	sw	s0,40(sp)
20402f40:	d226                	sw	s1,36(sp)
20402f42:	d04a                	sw	s2,32(sp)
20402f44:	ce4e                	sw	s3,28(sp)
20402f46:	d606                	sw	ra,44(sp)
20402f48:	cc52                	sw	s4,24(sp)
20402f4a:	ca56                	sw	s5,20(sp)
20402f4c:	c85a                	sw	s6,16(sp)
20402f4e:	89b6                	mv	s3,a3
20402f50:	0185c683          	lbu	a3,24(a1)
20402f54:	06e00793          	li	a5,110
20402f58:	8932                	mv	s2,a2
20402f5a:	84aa                	mv	s1,a0
20402f5c:	842e                	mv	s0,a1
20402f5e:	04358613          	addi	a2,a1,67
20402f62:	1ef68063          	beq	a3,a5,20403142 <_printf_i+0x206>
20402f66:	06d7e263          	bltu	a5,a3,20402fca <_printf_i+0x8e>
20402f6a:	06300793          	li	a5,99
20402f6e:	0af68263          	beq	a3,a5,20403012 <_printf_i+0xd6>
20402f72:	00d7ed63          	bltu	a5,a3,20402f8c <_printf_i+0x50>
20402f76:	1e068a63          	beqz	a3,2040316a <_printf_i+0x22e>
20402f7a:	05800793          	li	a5,88
20402f7e:	16f68663          	beq	a3,a5,204030ea <_printf_i+0x1ae>
20402f82:	04240a93          	addi	s5,s0,66
20402f86:	04d40123          	sb	a3,66(s0)
20402f8a:	a869                	j	20403024 <_printf_i+0xe8>
20402f8c:	06400793          	li	a5,100
20402f90:	00f68663          	beq	a3,a5,20402f9c <_printf_i+0x60>
20402f94:	06900793          	li	a5,105
20402f98:	fef695e3          	bne	a3,a5,20402f82 <_printf_i+0x46>
20402f9c:	401c                	lw	a5,0(s0)
20402f9e:	4308                	lw	a0,0(a4)
20402fa0:	0807f693          	andi	a3,a5,128
20402fa4:	00450593          	addi	a1,a0,4
20402fa8:	c2c1                	beqz	a3,20403028 <_printf_i+0xec>
20402faa:	411c                	lw	a5,0(a0)
20402fac:	c30c                	sw	a1,0(a4)
20402fae:	0007d863          	bgez	a5,20402fbe <_printf_i+0x82>
20402fb2:	02d00713          	li	a4,45
20402fb6:	40f007b3          	neg	a5,a5
20402fba:	04e401a3          	sb	a4,67(s0)
20402fbe:	00004697          	auipc	a3,0x4
20402fc2:	f2268693          	addi	a3,a3,-222 # 20406ee0 <__sf_fake_stdout+0x34>
20402fc6:	4729                	li	a4,10
20402fc8:	a065                	j	20403070 <_printf_i+0x134>
20402fca:	07300793          	li	a5,115
20402fce:	1af68263          	beq	a3,a5,20403172 <_printf_i+0x236>
20402fd2:	00d7ef63          	bltu	a5,a3,20402ff0 <_printf_i+0xb4>
20402fd6:	06f00793          	li	a5,111
20402fda:	04f68f63          	beq	a3,a5,20403038 <_printf_i+0xfc>
20402fde:	07000793          	li	a5,112
20402fe2:	faf690e3          	bne	a3,a5,20402f82 <_printf_i+0x46>
20402fe6:	419c                	lw	a5,0(a1)
20402fe8:	0207e793          	ori	a5,a5,32
20402fec:	c19c                	sw	a5,0(a1)
20402fee:	a809                	j	20403000 <_printf_i+0xc4>
20402ff0:	07500793          	li	a5,117
20402ff4:	04f68263          	beq	a3,a5,20403038 <_printf_i+0xfc>
20402ff8:	07800793          	li	a5,120
20402ffc:	f8f693e3          	bne	a3,a5,20402f82 <_printf_i+0x46>
20403000:	07800793          	li	a5,120
20403004:	04f402a3          	sb	a5,69(s0)
20403008:	00004697          	auipc	a3,0x4
2040300c:	eec68693          	addi	a3,a3,-276 # 20406ef4 <__sf_fake_stdout+0x48>
20403010:	a0dd                	j	204030f6 <_printf_i+0x1ba>
20403012:	431c                	lw	a5,0(a4)
20403014:	04258a93          	addi	s5,a1,66
20403018:	00478693          	addi	a3,a5,4
2040301c:	439c                	lw	a5,0(a5)
2040301e:	c314                	sw	a3,0(a4)
20403020:	04f58123          	sb	a5,66(a1)
20403024:	4785                	li	a5,1
20403026:	a2b5                	j	20403192 <_printf_i+0x256>
20403028:	0407f693          	andi	a3,a5,64
2040302c:	411c                	lw	a5,0(a0)
2040302e:	c30c                	sw	a1,0(a4)
20403030:	debd                	beqz	a3,20402fae <_printf_i+0x72>
20403032:	07c2                	slli	a5,a5,0x10
20403034:	87c1                	srai	a5,a5,0x10
20403036:	bfa5                	j	20402fae <_printf_i+0x72>
20403038:	400c                	lw	a1,0(s0)
2040303a:	431c                	lw	a5,0(a4)
2040303c:	0805f813          	andi	a6,a1,128
20403040:	00478513          	addi	a0,a5,4
20403044:	00080563          	beqz	a6,2040304e <_printf_i+0x112>
20403048:	c308                	sw	a0,0(a4)
2040304a:	439c                	lw	a5,0(a5)
2040304c:	a039                	j	2040305a <_printf_i+0x11e>
2040304e:	0405f593          	andi	a1,a1,64
20403052:	c308                	sw	a0,0(a4)
20403054:	d9fd                	beqz	a1,2040304a <_printf_i+0x10e>
20403056:	0007d783          	lhu	a5,0(a5)
2040305a:	06f00713          	li	a4,111
2040305e:	0ce68a63          	beq	a3,a4,20403132 <_printf_i+0x1f6>
20403062:	00004697          	auipc	a3,0x4
20403066:	e7e68693          	addi	a3,a3,-386 # 20406ee0 <__sf_fake_stdout+0x34>
2040306a:	4729                	li	a4,10
2040306c:	040401a3          	sb	zero,67(s0)
20403070:	404c                	lw	a1,4(s0)
20403072:	c40c                	sw	a1,8(s0)
20403074:	0005c563          	bltz	a1,2040307e <_printf_i+0x142>
20403078:	4008                	lw	a0,0(s0)
2040307a:	996d                	andi	a0,a0,-5
2040307c:	c008                	sw	a0,0(s0)
2040307e:	e399                	bnez	a5,20403084 <_printf_i+0x148>
20403080:	8ab2                	mv	s5,a2
20403082:	cd91                	beqz	a1,2040309e <_printf_i+0x162>
20403084:	8ab2                	mv	s5,a2
20403086:	02e7f5b3          	remu	a1,a5,a4
2040308a:	1afd                	addi	s5,s5,-1
2040308c:	95b6                	add	a1,a1,a3
2040308e:	0005c583          	lbu	a1,0(a1)
20403092:	00ba8023          	sb	a1,0(s5)
20403096:	02e7d5b3          	divu	a1,a5,a4
2040309a:	0ae7f263          	bgeu	a5,a4,2040313e <_printf_i+0x202>
2040309e:	47a1                	li	a5,8
204030a0:	00f71e63          	bne	a4,a5,204030bc <_printf_i+0x180>
204030a4:	401c                	lw	a5,0(s0)
204030a6:	8b85                	andi	a5,a5,1
204030a8:	cb91                	beqz	a5,204030bc <_printf_i+0x180>
204030aa:	4058                	lw	a4,4(s0)
204030ac:	481c                	lw	a5,16(s0)
204030ae:	00e7c763          	blt	a5,a4,204030bc <_printf_i+0x180>
204030b2:	03000793          	li	a5,48
204030b6:	fefa8fa3          	sb	a5,-1(s5)
204030ba:	1afd                	addi	s5,s5,-1
204030bc:	41560633          	sub	a2,a2,s5
204030c0:	c810                	sw	a2,16(s0)
204030c2:	874e                	mv	a4,s3
204030c4:	86ca                	mv	a3,s2
204030c6:	0070                	addi	a2,sp,12
204030c8:	85a2                	mv	a1,s0
204030ca:	8526                	mv	a0,s1
204030cc:	3395                	jal	20402e30 <_printf_common>
204030ce:	5a7d                	li	s4,-1
204030d0:	0d451563          	bne	a0,s4,2040319a <_printf_i+0x25e>
204030d4:	557d                	li	a0,-1
204030d6:	50b2                	lw	ra,44(sp)
204030d8:	5422                	lw	s0,40(sp)
204030da:	5492                	lw	s1,36(sp)
204030dc:	5902                	lw	s2,32(sp)
204030de:	49f2                	lw	s3,28(sp)
204030e0:	4a62                	lw	s4,24(sp)
204030e2:	4ad2                	lw	s5,20(sp)
204030e4:	4b42                	lw	s6,16(sp)
204030e6:	6145                	addi	sp,sp,48
204030e8:	8082                	ret
204030ea:	04d582a3          	sb	a3,69(a1)
204030ee:	00004697          	auipc	a3,0x4
204030f2:	df268693          	addi	a3,a3,-526 # 20406ee0 <__sf_fake_stdout+0x34>
204030f6:	400c                	lw	a1,0(s0)
204030f8:	4308                	lw	a0,0(a4)
204030fa:	0805f813          	andi	a6,a1,128
204030fe:	411c                	lw	a5,0(a0)
20403100:	0511                	addi	a0,a0,4
20403102:	02080063          	beqz	a6,20403122 <_printf_i+0x1e6>
20403106:	c308                	sw	a0,0(a4)
20403108:	0015f713          	andi	a4,a1,1
2040310c:	c701                	beqz	a4,20403114 <_printf_i+0x1d8>
2040310e:	0205e593          	ori	a1,a1,32
20403112:	c00c                	sw	a1,0(s0)
20403114:	4741                	li	a4,16
20403116:	fbb9                	bnez	a5,2040306c <_printf_i+0x130>
20403118:	400c                	lw	a1,0(s0)
2040311a:	fdf5f593          	andi	a1,a1,-33
2040311e:	c00c                	sw	a1,0(s0)
20403120:	b7b1                	j	2040306c <_printf_i+0x130>
20403122:	0405f813          	andi	a6,a1,64
20403126:	c308                	sw	a0,0(a4)
20403128:	fe0800e3          	beqz	a6,20403108 <_printf_i+0x1cc>
2040312c:	07c2                	slli	a5,a5,0x10
2040312e:	83c1                	srli	a5,a5,0x10
20403130:	bfe1                	j	20403108 <_printf_i+0x1cc>
20403132:	00004697          	auipc	a3,0x4
20403136:	dae68693          	addi	a3,a3,-594 # 20406ee0 <__sf_fake_stdout+0x34>
2040313a:	4721                	li	a4,8
2040313c:	bf05                	j	2040306c <_printf_i+0x130>
2040313e:	87ae                	mv	a5,a1
20403140:	b799                	j	20403086 <_printf_i+0x14a>
20403142:	4194                	lw	a3,0(a1)
20403144:	431c                	lw	a5,0(a4)
20403146:	49cc                	lw	a1,20(a1)
20403148:	0806f813          	andi	a6,a3,128
2040314c:	00478513          	addi	a0,a5,4
20403150:	00080663          	beqz	a6,2040315c <_printf_i+0x220>
20403154:	c308                	sw	a0,0(a4)
20403156:	439c                	lw	a5,0(a5)
20403158:	c38c                	sw	a1,0(a5)
2040315a:	a801                	j	2040316a <_printf_i+0x22e>
2040315c:	c308                	sw	a0,0(a4)
2040315e:	0406f693          	andi	a3,a3,64
20403162:	439c                	lw	a5,0(a5)
20403164:	daf5                	beqz	a3,20403158 <_printf_i+0x21c>
20403166:	00b79023          	sh	a1,0(a5)
2040316a:	00042823          	sw	zero,16(s0)
2040316e:	8ab2                	mv	s5,a2
20403170:	bf89                	j	204030c2 <_printf_i+0x186>
20403172:	431c                	lw	a5,0(a4)
20403174:	41d0                	lw	a2,4(a1)
20403176:	4581                	li	a1,0
20403178:	00478693          	addi	a3,a5,4
2040317c:	c314                	sw	a3,0(a4)
2040317e:	0007aa83          	lw	s5,0(a5)
20403182:	8556                	mv	a0,s5
20403184:	c8fff0ef          	jal	ra,20402e12 <memchr>
20403188:	c501                	beqz	a0,20403190 <_printf_i+0x254>
2040318a:	41550533          	sub	a0,a0,s5
2040318e:	c048                	sw	a0,4(s0)
20403190:	405c                	lw	a5,4(s0)
20403192:	c81c                	sw	a5,16(s0)
20403194:	040401a3          	sb	zero,67(s0)
20403198:	b72d                	j	204030c2 <_printf_i+0x186>
2040319a:	4814                	lw	a3,16(s0)
2040319c:	8656                	mv	a2,s5
2040319e:	85ca                	mv	a1,s2
204031a0:	8526                	mv	a0,s1
204031a2:	9982                	jalr	s3
204031a4:	f34508e3          	beq	a0,s4,204030d4 <_printf_i+0x198>
204031a8:	401c                	lw	a5,0(s0)
204031aa:	8b89                	andi	a5,a5,2
204031ac:	e78d                	bnez	a5,204031d6 <_printf_i+0x29a>
204031ae:	47b2                	lw	a5,12(sp)
204031b0:	4448                	lw	a0,12(s0)
204031b2:	f2f552e3          	bge	a0,a5,204030d6 <_printf_i+0x19a>
204031b6:	853e                	mv	a0,a5
204031b8:	bf39                	j	204030d6 <_printf_i+0x19a>
204031ba:	4685                	li	a3,1
204031bc:	8656                	mv	a2,s5
204031be:	85ca                	mv	a1,s2
204031c0:	8526                	mv	a0,s1
204031c2:	9982                	jalr	s3
204031c4:	f16508e3          	beq	a0,s6,204030d4 <_printf_i+0x198>
204031c8:	0a05                	addi	s4,s4,1
204031ca:	445c                	lw	a5,12(s0)
204031cc:	4732                	lw	a4,12(sp)
204031ce:	8f99                	sub	a5,a5,a4
204031d0:	fefa45e3          	blt	s4,a5,204031ba <_printf_i+0x27e>
204031d4:	bfe9                	j	204031ae <_printf_i+0x272>
204031d6:	4a01                	li	s4,0
204031d8:	01940a93          	addi	s5,s0,25
204031dc:	5b7d                	li	s6,-1
204031de:	b7f5                	j	204031ca <_printf_i+0x28e>

204031e0 <_read_r>:
_read_r():
204031e0:	1141                	addi	sp,sp,-16
204031e2:	c422                	sw	s0,8(sp)
204031e4:	842a                	mv	s0,a0
204031e6:	852e                	mv	a0,a1
204031e8:	85b2                	mv	a1,a2
204031ea:	8636                	mv	a2,a3
204031ec:	5fc00797          	auipc	a5,0x5fc00
204031f0:	d807aa23          	sw	zero,-620(a5) # 80002f80 <errno>
204031f4:	c606                	sw	ra,12(sp)
204031f6:	2845                	jal	204032a6 <_read>
204031f8:	57fd                	li	a5,-1
204031fa:	00f51963          	bne	a0,a5,2040320c <_read_r+0x2c>
204031fe:	5fc00797          	auipc	a5,0x5fc00
20403202:	d8278793          	addi	a5,a5,-638 # 80002f80 <errno>
20403206:	439c                	lw	a5,0(a5)
20403208:	c391                	beqz	a5,2040320c <_read_r+0x2c>
2040320a:	c01c                	sw	a5,0(s0)
2040320c:	40b2                	lw	ra,12(sp)
2040320e:	4422                	lw	s0,8(sp)
20403210:	0141                	addi	sp,sp,16
20403212:	8082                	ret

20403214 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20403214:	1101                	addi	sp,sp,-32
20403216:	ce06                	sw	ra,28(sp)
20403218:	cc22                	sw	s0,24(sp)
2040321a:	1000                	addi	s0,sp,32
2040321c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20403220:	225d                	jal	204033c6 <__errno>
20403222:	872a                	mv	a4,a0
20403224:	05800793          	li	a5,88
20403228:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
2040322a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
2040322c:	853e                	mv	a0,a5
2040322e:	40f2                	lw	ra,28(sp)
20403230:	4462                	lw	s0,24(sp)
20403232:	6105                	addi	sp,sp,32
20403234:	8082                	ret

20403236 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20403236:	1101                	addi	sp,sp,-32
20403238:	ce06                	sw	ra,28(sp)
2040323a:	cc22                	sw	s0,24(sp)
2040323c:	1000                	addi	s0,sp,32
2040323e:	fea42623          	sw	a0,-20(s0)
20403242:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20403246:	2241                	jal	204033c6 <__errno>
20403248:	872a                	mv	a4,a0
2040324a:	fa800793          	li	a5,-88
2040324e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20403250:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20403252:	853e                	mv	a0,a5
20403254:	40f2                	lw	ra,28(sp)
20403256:	4462                	lw	s0,24(sp)
20403258:	6105                	addi	sp,sp,32
2040325a:	8082                	ret

2040325c <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
2040325c:	1101                	addi	sp,sp,-32
2040325e:	ce22                	sw	s0,28(sp)
20403260:	1000                	addi	s0,sp,32
20403262:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20403266:	fec42783          	lw	a5,-20(s0)
2040326a:	17fd                	addi	a5,a5,-1
2040326c:	0017b793          	seqz	a5,a5
20403270:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20403274:	853e                	mv	a0,a5
20403276:	4472                	lw	s0,28(sp)
20403278:	6105                	addi	sp,sp,32
2040327a:	8082                	ret

2040327c <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
2040327c:	1101                	addi	sp,sp,-32
2040327e:	ce06                	sw	ra,28(sp)
20403280:	cc22                	sw	s0,24(sp)
20403282:	1000                	addi	s0,sp,32
20403284:	fea42623          	sw	a0,-20(s0)
20403288:	feb42423          	sw	a1,-24(s0)
2040328c:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20403290:	2a1d                	jal	204033c6 <__errno>
20403292:	872a                	mv	a4,a0
20403294:	05800793          	li	a5,88
20403298:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
2040329a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
2040329c:	853e                	mv	a0,a5
2040329e:	40f2                	lw	ra,28(sp)
204032a0:	4462                	lw	s0,24(sp)
204032a2:	6105                	addi	sp,sp,32
204032a4:	8082                	ret

204032a6 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
204032a6:	1101                	addi	sp,sp,-32
204032a8:	ce06                	sw	ra,28(sp)
204032aa:	cc22                	sw	s0,24(sp)
204032ac:	1000                	addi	s0,sp,32
204032ae:	fea42623          	sw	a0,-20(s0)
204032b2:	feb42423          	sw	a1,-24(s0)
204032b6:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
204032ba:	2231                	jal	204033c6 <__errno>
204032bc:	872a                	mv	a4,a0
204032be:	05800793          	li	a5,88
204032c2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
204032c4:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
204032c6:	853e                	mv	a0,a5
204032c8:	40f2                	lw	ra,28(sp)
204032ca:	4462                	lw	s0,24(sp)
204032cc:	6105                	addi	sp,sp,32
204032ce:	8082                	ret

204032d0 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
204032d0:	7179                	addi	sp,sp,-48
204032d2:	d622                	sw	s0,44(sp)
204032d4:	1800                	addi	s0,sp,48
204032d6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
204032da:	800017b7          	lui	a5,0x80001
204032de:	7107a783          	lw	a5,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffdb8c>
204032e2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
204032e6:	800037b7          	lui	a5,0x80003
204032ea:	38478713          	addi	a4,a5,900 # 80003384 <metal_segment_heap_target_end+0xfffff800>
204032ee:	800047b7          	lui	a5,0x80004
204032f2:	b8478793          	addi	a5,a5,-1148 # 80003b84 <metal_segment_heap_target_end+0x0>
204032f6:	00f71463          	bne	a4,a5,204032fe <_sbrk+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
204032fa:	57fd                	li	a5,-1
204032fc:	a0a9                	j	20403346 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
204032fe:	800017b7          	lui	a5,0x80001
20403302:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffdb8c>
20403306:	fdc42783          	lw	a5,-36(s0)
2040330a:	973e                	add	a4,a4,a5
2040330c:	800047b7          	lui	a5,0x80004
20403310:	b8478793          	addi	a5,a5,-1148 # 80003b84 <metal_segment_heap_target_end+0x0>
20403314:	02f77063          	bgeu	a4,a5,20403334 <_sbrk+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20403318:	800017b7          	lui	a5,0x80001
2040331c:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffdb8c>
20403320:	fdc42783          	lw	a5,-36(s0)
20403324:	973e                	add	a4,a4,a5
20403326:	800017b7          	lui	a5,0x80001
2040332a:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffdb8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
2040332e:	fec42783          	lw	a5,-20(s0)
20403332:	a811                	j	20403346 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20403334:	800017b7          	lui	a5,0x80001
20403338:	80004737          	lui	a4,0x80004
2040333c:	b8470713          	addi	a4,a4,-1148 # 80003b84 <metal_segment_heap_target_end+0x0>
20403340:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffdb8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20403344:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20403346:	853e                	mv	a0,a5
20403348:	5432                	lw	s0,44(sp)
2040334a:	6145                	addi	sp,sp,48
2040334c:	8082                	ret

2040334e <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
2040334e:	7179                	addi	sp,sp,-48
20403350:	d606                	sw	ra,44(sp)
20403352:	d422                	sw	s0,40(sp)
20403354:	1800                	addi	s0,sp,48
20403356:	fca42e23          	sw	a0,-36(s0)
2040335a:	fcb42c23          	sw	a1,-40(s0)
2040335e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20403362:	fdc42703          	lw	a4,-36(s0)
20403366:	4785                	li	a5,1
20403368:	00f70963          	beq	a4,a5,2040337a <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
2040336c:	28a9                	jal	204033c6 <__errno>
2040336e:	872a                	mv	a4,a0
20403370:	05800793          	li	a5,88
20403374:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20403376:	57fd                	li	a5,-1
20403378:	a82d                	j	204033b2 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
2040337a:	fd842783          	lw	a5,-40(s0)
2040337e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20403382:	fe042623          	sw	zero,-20(s0)
20403386:	a839                	j	204033a4 <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20403388:	fe842703          	lw	a4,-24(s0)
2040338c:	fec42783          	lw	a5,-20(s0)
20403390:	97ba                	add	a5,a5,a4
20403392:	0007c783          	lbu	a5,0(a5)
20403396:	853e                	mv	a0,a5
20403398:	2cb1                	jal	204035f4 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
2040339a:	fec42783          	lw	a5,-20(s0)
2040339e:	0785                	addi	a5,a5,1
204033a0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
204033a4:	fec42703          	lw	a4,-20(s0)
204033a8:	fd442783          	lw	a5,-44(s0)
204033ac:	fcf76ee3          	bltu	a4,a5,20403388 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
204033b0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
204033b2:	853e                	mv	a0,a5
204033b4:	50b2                	lw	ra,44(sp)
204033b6:	5422                	lw	s0,40(sp)
204033b8:	6145                	addi	sp,sp,48
204033ba:	8082                	ret

204033bc <atexit>:
atexit():
204033bc:	85aa                	mv	a1,a0
204033be:	4681                	li	a3,0
204033c0:	4601                	li	a2,0
204033c2:	4501                	li	a0,0
204033c4:	a8f1                	j	204034a0 <__register_exitproc>

204033c6 <__errno>:
__errno():
204033c6:	5fbfe797          	auipc	a5,0x5fbfe
204033ca:	34278793          	addi	a5,a5,834 # 80001708 <_impure_ptr>
204033ce:	4388                	lw	a0,0(a5)
204033d0:	8082                	ret

204033d2 <exit>:
exit():
204033d2:	1141                	addi	sp,sp,-16
204033d4:	c422                	sw	s0,8(sp)
204033d6:	c606                	sw	ra,12(sp)
204033d8:	00000797          	auipc	a5,0x0
204033dc:	15478793          	addi	a5,a5,340 # 2040352c <__call_exitprocs>
204033e0:	842a                	mv	s0,a0
204033e2:	c399                	beqz	a5,204033e8 <exit+0x16>
204033e4:	4581                	li	a1,0
204033e6:	2299                	jal	2040352c <__call_exitprocs>
204033e8:	5fbfe797          	auipc	a5,0x5fbfe
204033ec:	32478793          	addi	a5,a5,804 # 8000170c <_global_impure_ptr>
204033f0:	4388                	lw	a0,0(a5)
204033f2:	551c                	lw	a5,40(a0)
204033f4:	c391                	beqz	a5,204033f8 <exit+0x26>
204033f6:	9782                	jalr	a5
204033f8:	8522                	mv	a0,s0
204033fa:	079030ef          	jal	ra,20406c72 <_exit>

204033fe <__libc_fini_array>:
__libc_fini_array():
204033fe:	1141                	addi	sp,sp,-16
20403400:	00004797          	auipc	a5,0x4
20403404:	e5c78793          	addi	a5,a5,-420 # 2040725c <__fini_array_end>
20403408:	c422                	sw	s0,8(sp)
2040340a:	00004417          	auipc	s0,0x4
2040340e:	e5240413          	addi	s0,s0,-430 # 2040725c <__fini_array_end>
20403412:	8c1d                	sub	s0,s0,a5
20403414:	c226                	sw	s1,4(sp)
20403416:	c606                	sw	ra,12(sp)
20403418:	8409                	srai	s0,s0,0x2
2040341a:	84be                	mv	s1,a5
2040341c:	e411                	bnez	s0,20403428 <__libc_fini_array+0x2a>
2040341e:	40b2                	lw	ra,12(sp)
20403420:	4422                	lw	s0,8(sp)
20403422:	4492                	lw	s1,4(sp)
20403424:	0141                	addi	sp,sp,16
20403426:	8082                	ret
20403428:	147d                	addi	s0,s0,-1
2040342a:	00241793          	slli	a5,s0,0x2
2040342e:	97a6                	add	a5,a5,s1
20403430:	439c                	lw	a5,0(a5)
20403432:	9782                	jalr	a5
20403434:	b7e5                	j	2040341c <__libc_fini_array+0x1e>

20403436 <__libc_init_array>:
__libc_init_array():
20403436:	1141                	addi	sp,sp,-16
20403438:	00004797          	auipc	a5,0x4
2040343c:	e2078793          	addi	a5,a5,-480 # 20407258 <__init_array_start>
20403440:	c422                	sw	s0,8(sp)
20403442:	00004417          	auipc	s0,0x4
20403446:	e1640413          	addi	s0,s0,-490 # 20407258 <__init_array_start>
2040344a:	8c1d                	sub	s0,s0,a5
2040344c:	c226                	sw	s1,4(sp)
2040344e:	c04a                	sw	s2,0(sp)
20403450:	c606                	sw	ra,12(sp)
20403452:	8409                	srai	s0,s0,0x2
20403454:	4481                	li	s1,0
20403456:	893e                	mv	s2,a5
20403458:	02849663          	bne	s1,s0,20403484 <__libc_init_array+0x4e>
2040345c:	00004797          	auipc	a5,0x4
20403460:	dfc78793          	addi	a5,a5,-516 # 20407258 <__init_array_start>
20403464:	00004417          	auipc	s0,0x4
20403468:	df840413          	addi	s0,s0,-520 # 2040725c <__fini_array_end>
2040346c:	8c1d                	sub	s0,s0,a5
2040346e:	8409                	srai	s0,s0,0x2
20403470:	4481                	li	s1,0
20403472:	893e                	mv	s2,a5
20403474:	00849f63          	bne	s1,s0,20403492 <__libc_init_array+0x5c>
20403478:	40b2                	lw	ra,12(sp)
2040347a:	4422                	lw	s0,8(sp)
2040347c:	4492                	lw	s1,4(sp)
2040347e:	4902                	lw	s2,0(sp)
20403480:	0141                	addi	sp,sp,16
20403482:	8082                	ret
20403484:	00249793          	slli	a5,s1,0x2
20403488:	97ca                	add	a5,a5,s2
2040348a:	439c                	lw	a5,0(a5)
2040348c:	0485                	addi	s1,s1,1
2040348e:	9782                	jalr	a5
20403490:	b7e1                	j	20403458 <__libc_init_array+0x22>
20403492:	00249793          	slli	a5,s1,0x2
20403496:	97ca                	add	a5,a5,s2
20403498:	439c                	lw	a5,0(a5)
2040349a:	0485                	addi	s1,s1,1
2040349c:	9782                	jalr	a5
2040349e:	bfd9                	j	20403474 <__libc_init_array+0x3e>

204034a0 <__register_exitproc>:
__register_exitproc():
204034a0:	5fbfe797          	auipc	a5,0x5fbfe
204034a4:	29878793          	addi	a5,a5,664 # 80001738 <_global_atexit>
204034a8:	439c                	lw	a5,0(a5)
204034aa:	8e2a                	mv	t3,a0
204034ac:	e78d                	bnez	a5,204034d6 <__register_exitproc+0x36>
204034ae:	5fc00717          	auipc	a4,0x5fc00
204034b2:	a4670713          	addi	a4,a4,-1466 # 80002ef4 <_global_atexit0>
204034b6:	5fbfe797          	auipc	a5,0x5fbfe
204034ba:	28e7a123          	sw	a4,642(a5) # 80001738 <_global_atexit>
204034be:	dfbfd517          	auipc	a0,0xdfbfd
204034c2:	b4250513          	addi	a0,a0,-1214 # 0 <__metal_boot_hart>
204034c6:	87ba                	mv	a5,a4
204034c8:	c519                	beqz	a0,204034d6 <__register_exitproc+0x36>
204034ca:	411c                	lw	a5,0(a0)
204034cc:	5fc00517          	auipc	a0,0x5fc00
204034d0:	aaf52823          	sw	a5,-1360(a0) # 80002f7c <_global_atexit0+0x88>
204034d4:	87ba                	mv	a5,a4
204034d6:	43d8                	lw	a4,4(a5)
204034d8:	487d                	li	a6,31
204034da:	557d                	li	a0,-1
204034dc:	04e84763          	blt	a6,a4,2040352a <__register_exitproc+0x8a>
204034e0:	020e0e63          	beqz	t3,2040351c <__register_exitproc+0x7c>
204034e4:	0887a803          	lw	a6,136(a5)
204034e8:	04080163          	beqz	a6,2040352a <__register_exitproc+0x8a>
204034ec:	00271893          	slli	a7,a4,0x2
204034f0:	98c2                	add	a7,a7,a6
204034f2:	00c8a023          	sw	a2,0(a7)
204034f6:	10082303          	lw	t1,256(a6)
204034fa:	4605                	li	a2,1
204034fc:	00e61633          	sll	a2,a2,a4
20403500:	00c36333          	or	t1,t1,a2
20403504:	10682023          	sw	t1,256(a6)
20403508:	08d8a023          	sw	a3,128(a7)
2040350c:	4689                	li	a3,2
2040350e:	00de1763          	bne	t3,a3,2040351c <__register_exitproc+0x7c>
20403512:	10482683          	lw	a3,260(a6)
20403516:	8e55                	or	a2,a2,a3
20403518:	10c82223          	sw	a2,260(a6)
2040351c:	00170693          	addi	a3,a4,1
20403520:	070a                	slli	a4,a4,0x2
20403522:	c3d4                	sw	a3,4(a5)
20403524:	97ba                	add	a5,a5,a4
20403526:	c78c                	sw	a1,8(a5)
20403528:	4501                	li	a0,0
2040352a:	8082                	ret

2040352c <__call_exitprocs>:
__call_exitprocs():
2040352c:	7179                	addi	sp,sp,-48
2040352e:	cc52                	sw	s4,24(sp)
20403530:	ca56                	sw	s5,20(sp)
20403532:	c85a                	sw	s6,16(sp)
20403534:	c65e                	sw	s7,12(sp)
20403536:	d606                	sw	ra,44(sp)
20403538:	d422                	sw	s0,40(sp)
2040353a:	d226                	sw	s1,36(sp)
2040353c:	d04a                	sw	s2,32(sp)
2040353e:	ce4e                	sw	s3,28(sp)
20403540:	c462                	sw	s8,8(sp)
20403542:	8b2a                	mv	s6,a0
20403544:	8a2e                	mv	s4,a1
20403546:	5fbfea97          	auipc	s5,0x5fbfe
2040354a:	1f2a8a93          	addi	s5,s5,498 # 80001738 <_global_atexit>
2040354e:	4b85                	li	s7,1
20403550:	000aa403          	lw	s0,0(s5)
20403554:	c811                	beqz	s0,20403568 <__call_exitprocs+0x3c>
20403556:	4044                	lw	s1,4(s0)
20403558:	08842983          	lw	s3,136(s0)
2040355c:	fff48913          	addi	s2,s1,-1
20403560:	048a                	slli	s1,s1,0x2
20403562:	94a2                	add	s1,s1,s0
20403564:	00095e63          	bgez	s2,20403580 <__call_exitprocs+0x54>
20403568:	50b2                	lw	ra,44(sp)
2040356a:	5422                	lw	s0,40(sp)
2040356c:	5492                	lw	s1,36(sp)
2040356e:	5902                	lw	s2,32(sp)
20403570:	49f2                	lw	s3,28(sp)
20403572:	4a62                	lw	s4,24(sp)
20403574:	4ad2                	lw	s5,20(sp)
20403576:	4b42                	lw	s6,16(sp)
20403578:	4bb2                	lw	s7,12(sp)
2040357a:	4c22                	lw	s8,8(sp)
2040357c:	6145                	addi	sp,sp,48
2040357e:	8082                	ret
20403580:	000a0e63          	beqz	s4,2040359c <__call_exitprocs+0x70>
20403584:	00099563          	bnez	s3,2040358e <__call_exitprocs+0x62>
20403588:	197d                	addi	s2,s2,-1
2040358a:	14f1                	addi	s1,s1,-4
2040358c:	bfe1                	j	20403564 <__call_exitprocs+0x38>
2040358e:	00291793          	slli	a5,s2,0x2
20403592:	97ce                	add	a5,a5,s3
20403594:	0807a783          	lw	a5,128(a5)
20403598:	ff4798e3          	bne	a5,s4,20403588 <__call_exitprocs+0x5c>
2040359c:	4058                	lw	a4,4(s0)
2040359e:	40dc                	lw	a5,4(s1)
204035a0:	177d                	addi	a4,a4,-1
204035a2:	03271863          	bne	a4,s2,204035d2 <__call_exitprocs+0xa6>
204035a6:	01242223          	sw	s2,4(s0)
204035aa:	dff9                	beqz	a5,20403588 <__call_exitprocs+0x5c>
204035ac:	00442c03          	lw	s8,4(s0)
204035b0:	00098863          	beqz	s3,204035c0 <__call_exitprocs+0x94>
204035b4:	1009a683          	lw	a3,256(s3)
204035b8:	012b9733          	sll	a4,s7,s2
204035bc:	8ef9                	and	a3,a3,a4
204035be:	ee89                	bnez	a3,204035d8 <__call_exitprocs+0xac>
204035c0:	9782                	jalr	a5
204035c2:	4058                	lw	a4,4(s0)
204035c4:	000aa783          	lw	a5,0(s5)
204035c8:	f98714e3          	bne	a4,s8,20403550 <__call_exitprocs+0x24>
204035cc:	faf40ee3          	beq	s0,a5,20403588 <__call_exitprocs+0x5c>
204035d0:	b741                	j	20403550 <__call_exitprocs+0x24>
204035d2:	0004a223          	sw	zero,4(s1)
204035d6:	bfd1                	j	204035aa <__call_exitprocs+0x7e>
204035d8:	00291693          	slli	a3,s2,0x2
204035dc:	96ce                	add	a3,a3,s3
204035de:	428c                	lw	a1,0(a3)
204035e0:	1049a683          	lw	a3,260(s3)
204035e4:	8f75                	and	a4,a4,a3
204035e6:	e701                	bnez	a4,204035ee <__call_exitprocs+0xc2>
204035e8:	855a                	mv	a0,s6
204035ea:	9782                	jalr	a5
204035ec:	bfd9                	j	204035c2 <__call_exitprocs+0x96>
204035ee:	852e                	mv	a0,a1
204035f0:	9782                	jalr	a5
204035f2:	bfc1                	j	204035c2 <__call_exitprocs+0x96>

204035f4 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
204035f4:	1101                	addi	sp,sp,-32
204035f6:	ce06                	sw	ra,28(sp)
204035f8:	cc22                	sw	s0,24(sp)
204035fa:	1000                	addi	s0,sp,32
204035fc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20403600:	fec42703          	lw	a4,-20(s0)
20403604:	47a9                	li	a5,10
20403606:	00f71463          	bne	a4,a5,2040360e <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
2040360a:	4535                	li	a0,13
2040360c:	2811                	jal	20403620 <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
2040360e:	fec42503          	lw	a0,-20(s0)
20403612:	2039                	jal	20403620 <metal_tty_putc_raw>
20403614:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20403616:	853e                	mv	a0,a5
20403618:	40f2                	lw	ra,28(sp)
2040361a:	4462                	lw	s0,24(sp)
2040361c:	6105                	addi	sp,sp,32
2040361e:	8082                	ret

20403620 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20403620:	1101                	addi	sp,sp,-32
20403622:	ce06                	sw	ra,28(sp)
20403624:	cc22                	sw	s0,24(sp)
20403626:	1000                	addi	s0,sp,32
20403628:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
2040362c:	fec42583          	lw	a1,-20(s0)
20403630:	800017b7          	lui	a5,0x80001
20403634:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffdb64>
20403638:	28b1                	jal	20403694 <metal_uart_putc>
2040363a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
2040363c:	853e                	mv	a0,a5
2040363e:	40f2                	lw	ra,28(sp)
20403640:	4462                	lw	s0,24(sp)
20403642:	6105                	addi	sp,sp,32
20403644:	8082                	ret

20403646 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20403646:	1141                	addi	sp,sp,-16
20403648:	c606                	sw	ra,12(sp)
2040364a:	c422                	sw	s0,8(sp)
2040364c:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
2040364e:	67f1                	lui	a5,0x1c
20403650:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20403654:	800017b7          	lui	a5,0x80001
20403658:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffdb64>
2040365c:	2031                	jal	20403668 <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
2040365e:	0001                	nop
20403660:	40b2                	lw	ra,12(sp)
20403662:	4422                	lw	s0,8(sp)
20403664:	0141                	addi	sp,sp,16
20403666:	8082                	ret

20403668 <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20403668:	1101                	addi	sp,sp,-32
2040366a:	ce06                	sw	ra,28(sp)
2040366c:	cc22                	sw	s0,24(sp)
2040366e:	1000                	addi	s0,sp,32
20403670:	fea42623          	sw	a0,-20(s0)
20403674:	feb42423          	sw	a1,-24(s0)
20403678:	fec42783          	lw	a5,-20(s0)
2040367c:	439c                	lw	a5,0(a5)
2040367e:	439c                	lw	a5,0(a5)
20403680:	fe842583          	lw	a1,-24(s0)
20403684:	fec42503          	lw	a0,-20(s0)
20403688:	9782                	jalr	a5
2040368a:	0001                	nop
2040368c:	40f2                	lw	ra,28(sp)
2040368e:	4462                	lw	s0,24(sp)
20403690:	6105                	addi	sp,sp,32
20403692:	8082                	ret

20403694 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20403694:	1101                	addi	sp,sp,-32
20403696:	ce06                	sw	ra,28(sp)
20403698:	cc22                	sw	s0,24(sp)
2040369a:	1000                	addi	s0,sp,32
2040369c:	fea42623          	sw	a0,-20(s0)
204036a0:	feb42423          	sw	a1,-24(s0)
204036a4:	fec42783          	lw	a5,-20(s0)
204036a8:	439c                	lw	a5,0(a5)
204036aa:	43dc                	lw	a5,4(a5)
204036ac:	fe842583          	lw	a1,-24(s0)
204036b0:	fec42503          	lw	a0,-20(s0)
204036b4:	9782                	jalr	a5
204036b6:	87aa                	mv	a5,a0
204036b8:	853e                	mv	a0,a5
204036ba:	40f2                	lw	ra,28(sp)
204036bc:	4462                	lw	s0,24(sp)
204036be:	6105                	addi	sp,sp,32
204036c0:	8082                	ret

204036c2 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
204036c2:	1101                	addi	sp,sp,-32
204036c4:	ce06                	sw	ra,28(sp)
204036c6:	cc22                	sw	s0,24(sp)
204036c8:	1000                	addi	s0,sp,32
204036ca:	fea42623          	sw	a0,-20(s0)
204036ce:	feb42423          	sw	a1,-24(s0)
204036d2:	fec42783          	lw	a5,-20(s0)
204036d6:	439c                	lw	a5,0(a5)
204036d8:	4bdc                	lw	a5,20(a5)
204036da:	fe842583          	lw	a1,-24(s0)
204036de:	fec42503          	lw	a0,-20(s0)
204036e2:	9782                	jalr	a5
204036e4:	87aa                	mv	a5,a0
204036e6:	853e                	mv	a0,a5
204036e8:	40f2                	lw	ra,28(sp)
204036ea:	4462                	lw	s0,24(sp)
204036ec:	6105                	addi	sp,sp,32
204036ee:	8082                	ret

204036f0 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
204036f0:	1101                	addi	sp,sp,-32
204036f2:	ce22                	sw	s0,28(sp)
204036f4:	1000                	addi	s0,sp,32
204036f6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204036fa:	fec42703          	lw	a4,-20(s0)
204036fe:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
20403702:	00f71563          	bne	a4,a5,2040370c <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20403706:	020007b7          	lui	a5,0x2000
2040370a:	a011                	j	2040370e <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
2040370c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
2040370e:	853e                	mv	a0,a5
20403710:	4472                	lw	s0,28(sp)
20403712:	6105                	addi	sp,sp,32
20403714:	8082                	ret

20403716 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20403716:	1101                	addi	sp,sp,-32
20403718:	ce22                	sw	s0,28(sp)
2040371a:	1000                	addi	s0,sp,32
2040371c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20403720:	fec42703          	lw	a4,-20(s0)
20403724:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
20403728:	00f71463          	bne	a4,a5,20403730 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
2040372c:	4789                	li	a5,2
2040372e:	a011                	j	20403732 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20403730:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
20403732:	853e                	mv	a0,a5
20403734:	4472                	lw	s0,28(sp)
20403736:	6105                	addi	sp,sp,32
20403738:	8082                	ret

2040373a <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
2040373a:	1101                	addi	sp,sp,-32
2040373c:	ce22                	sw	s0,28(sp)
2040373e:	1000                	addi	s0,sp,32
20403740:	fea42623          	sw	a0,-20(s0)
20403744:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
20403748:	fe842783          	lw	a5,-24(s0)
2040374c:	e791                	bnez	a5,20403758 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
2040374e:	800017b7          	lui	a5,0x80001
20403752:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffd4ac>
20403756:	a821                	j	2040376e <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20403758:	fe842703          	lw	a4,-24(s0)
2040375c:	4785                	li	a5,1
2040375e:	00f71763          	bne	a4,a5,2040376c <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403762:	800017b7          	lui	a5,0x80001
20403766:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffd4ac>
2040376a:	a011                	j	2040376e <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
2040376c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
2040376e:	853e                	mv	a0,a5
20403770:	4472                	lw	s0,28(sp)
20403772:	6105                	addi	sp,sp,32
20403774:	8082                	ret

20403776 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20403776:	1101                	addi	sp,sp,-32
20403778:	ce22                	sw	s0,28(sp)
2040377a:	1000                	addi	s0,sp,32
2040377c:	fea42623          	sw	a0,-20(s0)
20403780:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
20403784:	fe842783          	lw	a5,-24(s0)
20403788:	e399                	bnez	a5,2040378e <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
2040378a:	478d                	li	a5,3
2040378c:	a809                	j	2040379e <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
2040378e:	fe842703          	lw	a4,-24(s0)
20403792:	4785                	li	a5,1
20403794:	00f71463          	bne	a4,a5,2040379c <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
20403798:	479d                	li	a5,7
2040379a:	a011                	j	2040379e <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
2040379c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
2040379e:	853e                	mv	a0,a5
204037a0:	4472                	lw	s0,28(sp)
204037a2:	6105                	addi	sp,sp,32
204037a4:	8082                	ret

204037a6 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
204037a6:	715d                	addi	sp,sp,-80
204037a8:	c686                	sw	ra,76(sp)
204037aa:	c4a2                	sw	s0,72(sp)
204037ac:	c2ca                	sw	s2,68(sp)
204037ae:	c0ce                	sw	s3,64(sp)
204037b0:	de52                	sw	s4,60(sp)
204037b2:	dc56                	sw	s5,56(sp)
204037b4:	da5a                	sw	s6,52(sp)
204037b6:	d85e                	sw	s7,48(sp)
204037b8:	d662                	sw	s8,44(sp)
204037ba:	d466                	sw	s9,40(sp)
204037bc:	0880                	addi	s0,sp,80
204037be:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
204037c2:	fbc42783          	lw	a5,-68(s0)
204037c6:	853e                	mv	a0,a5
204037c8:	3725                	jal	204036f0 <__metal_driver_sifive_clint0_control_base>
204037ca:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
204037ce:	fcc42703          	lw	a4,-52(s0)
204037d2:	67b1                	lui	a5,0xc
204037d4:	17f1                	addi	a5,a5,-4
204037d6:	97ba                	add	a5,a5,a4
204037d8:	439c                	lw	a5,0(a5)
204037da:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
204037de:	fcc42703          	lw	a4,-52(s0)
204037e2:	67b1                	lui	a5,0xc
204037e4:	17e1                	addi	a5,a5,-8
204037e6:	97ba                	add	a5,a5,a4
204037e8:	439c                	lw	a5,0(a5)
204037ea:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
204037ee:	fcc42703          	lw	a4,-52(s0)
204037f2:	67b1                	lui	a5,0xc
204037f4:	17f1                	addi	a5,a5,-4
204037f6:	97ba                	add	a5,a5,a4
204037f8:	439c                	lw	a5,0(a5)
204037fa:	fc842703          	lw	a4,-56(s0)
204037fe:	fcf718e3          	bne	a4,a5,204037ce <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20403802:	fc842783          	lw	a5,-56(s0)
20403806:	8c3e                	mv	s8,a5
20403808:	4c81                	li	s9,0
2040380a:	000c1993          	slli	s3,s8,0x0
2040380e:	4901                	li	s2,0
20403810:	fc442783          	lw	a5,-60(s0)
20403814:	8a3e                	mv	s4,a5
20403816:	4a81                	li	s5,0
20403818:	01496b33          	or	s6,s2,s4
2040381c:	0159ebb3          	or	s7,s3,s5
20403820:	87da                	mv	a5,s6
20403822:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
20403824:	853e                	mv	a0,a5
20403826:	85c2                	mv	a1,a6
20403828:	40b6                	lw	ra,76(sp)
2040382a:	4426                	lw	s0,72(sp)
2040382c:	4916                	lw	s2,68(sp)
2040382e:	4986                	lw	s3,64(sp)
20403830:	5a72                	lw	s4,60(sp)
20403832:	5ae2                	lw	s5,56(sp)
20403834:	5b52                	lw	s6,52(sp)
20403836:	5bc2                	lw	s7,48(sp)
20403838:	5c32                	lw	s8,44(sp)
2040383a:	5ca2                	lw	s9,40(sp)
2040383c:	6161                	addi	sp,sp,80
2040383e:	8082                	ret

20403840 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20403840:	7179                	addi	sp,sp,-48
20403842:	d606                	sw	ra,44(sp)
20403844:	d422                	sw	s0,40(sp)
20403846:	d24a                	sw	s2,36(sp)
20403848:	d04e                	sw	s3,32(sp)
2040384a:	1800                	addi	s0,sp,48
2040384c:	fca42e23          	sw	a0,-36(s0)
20403850:	fcb42c23          	sw	a1,-40(s0)
20403854:	fcc42823          	sw	a2,-48(s0)
20403858:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
2040385c:	fdc42783          	lw	a5,-36(s0)
20403860:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20403864:	fec42783          	lw	a5,-20(s0)
20403868:	853e                	mv	a0,a5
2040386a:	3559                	jal	204036f0 <__metal_driver_sifive_clint0_control_base>
2040386c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20403870:	fd842783          	lw	a5,-40(s0)
20403874:	078e                	slli	a5,a5,0x3
20403876:	873e                	mv	a4,a5
20403878:	fe842783          	lw	a5,-24(s0)
2040387c:	973e                	add	a4,a4,a5
2040387e:	6791                	lui	a5,0x4
20403880:	0791                	addi	a5,a5,4
20403882:	97ba                	add	a5,a5,a4
20403884:	873e                	mv	a4,a5
20403886:	57fd                	li	a5,-1
20403888:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
2040388a:	fd842783          	lw	a5,-40(s0)
2040388e:	078e                	slli	a5,a5,0x3
20403890:	873e                	mv	a4,a5
20403892:	fe842783          	lw	a5,-24(s0)
20403896:	973e                	add	a4,a4,a5
20403898:	6791                	lui	a5,0x4
2040389a:	97ba                	add	a5,a5,a4
2040389c:	873e                	mv	a4,a5
2040389e:	fd042783          	lw	a5,-48(s0)
204038a2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
204038a4:	fd442783          	lw	a5,-44(s0)
204038a8:	0007d913          	srli	s2,a5,0x0
204038ac:	4981                	li	s3,0
204038ae:	fd842783          	lw	a5,-40(s0)
204038b2:	078e                	slli	a5,a5,0x3
204038b4:	873e                	mv	a4,a5
204038b6:	fe842783          	lw	a5,-24(s0)
204038ba:	973e                	add	a4,a4,a5
204038bc:	6791                	lui	a5,0x4
204038be:	0791                	addi	a5,a5,4
204038c0:	97ba                	add	a5,a5,a4
204038c2:	874a                	mv	a4,s2
204038c4:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
204038c6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
204038c8:	853e                	mv	a0,a5
204038ca:	50b2                	lw	ra,44(sp)
204038cc:	5422                	lw	s0,40(sp)
204038ce:	5912                	lw	s2,36(sp)
204038d0:	5982                	lw	s3,32(sp)
204038d2:	6145                	addi	sp,sp,48
204038d4:	8082                	ret

204038d6 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
204038d6:	1101                	addi	sp,sp,-32
204038d8:	ce06                	sw	ra,28(sp)
204038da:	cc22                	sw	s0,24(sp)
204038dc:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
204038de:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
204038e2:	f14027f3          	csrr	a5,mhartid
204038e6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
204038ea:	fec42783          	lw	a5,-20(s0)
204038ee:	853e                	mv	a0,a5
204038f0:	21e030ef          	jal	ra,20406b0e <metal_cpu_get>
204038f4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
204038f8:	fe842503          	lw	a0,-24(s0)
204038fc:	1ec030ef          	jal	ra,20406ae8 <metal_cpu_interrupt_controller>
20403900:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20403902:	853e                	mv	a0,a5
20403904:	40f2                	lw	ra,28(sp)
20403906:	4462                	lw	s0,24(sp)
20403908:	6105                	addi	sp,sp,32
2040390a:	8082                	ret

2040390c <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
2040390c:	7139                	addi	sp,sp,-64
2040390e:	de06                	sw	ra,60(sp)
20403910:	dc22                	sw	s0,56(sp)
20403912:	0080                	addi	s0,sp,64
20403914:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20403918:	fcc42503          	lw	a0,-52(s0)
2040391c:	3bed                	jal	20403716 <__metal_driver_sifive_clint0_num_interrupts>
2040391e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20403922:	fcc42783          	lw	a5,-52(s0)
20403926:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
2040392a:	fe442783          	lw	a5,-28(s0)
2040392e:	43dc                	lw	a5,4(a5)
20403930:	efa9                	bnez	a5,2040398a <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20403932:	fe042623          	sw	zero,-20(s0)
20403936:	a081                	j	20403976 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20403938:	fec42583          	lw	a1,-20(s0)
2040393c:	fcc42503          	lw	a0,-52(s0)
20403940:	3bed                	jal	2040373a <__metal_driver_sifive_clint0_interrupt_parents>
20403942:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20403946:	fec42583          	lw	a1,-20(s0)
2040394a:	fcc42503          	lw	a0,-52(s0)
2040394e:	3525                	jal	20403776 <__metal_driver_sifive_clint0_interrupt_lines>
20403950:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20403954:	fe042783          	lw	a5,-32(s0)
20403958:	439c                	lw	a5,0(a5)
2040395a:	4fdc                	lw	a5,28(a5)
2040395c:	fcc42683          	lw	a3,-52(s0)
20403960:	4601                	li	a2,0
20403962:	fdc42583          	lw	a1,-36(s0)
20403966:	fe042503          	lw	a0,-32(s0)
2040396a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
2040396c:	fec42783          	lw	a5,-20(s0)
20403970:	0785                	addi	a5,a5,1
20403972:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20403976:	fec42703          	lw	a4,-20(s0)
2040397a:	fe842783          	lw	a5,-24(s0)
2040397e:	faf74de3          	blt	a4,a5,20403938 <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20403982:	fe442783          	lw	a5,-28(s0)
20403986:	4705                	li	a4,1
20403988:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
2040398a:	0001                	nop
2040398c:	50f2                	lw	ra,60(sp)
2040398e:	5462                	lw	s0,56(sp)
20403990:	6121                	addi	sp,sp,64
20403992:	8082                	ret

20403994 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20403994:	7139                	addi	sp,sp,-64
20403996:	de06                	sw	ra,60(sp)
20403998:	dc22                	sw	s0,56(sp)
2040399a:	0080                	addi	s0,sp,64
2040399c:	fca42623          	sw	a0,-52(s0)
204039a0:	fcb42423          	sw	a1,-56(s0)
204039a4:	fcc42223          	sw	a2,-60(s0)
204039a8:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
204039ac:	57fd                	li	a5,-1
204039ae:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
204039b2:	364010ef          	jal	ra,20404d16 <__metal_controller_interrupt_vector_mode>
204039b6:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
204039ba:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
204039be:	3f21                	jal	204038d6 <_get_cpu_intc>
204039c0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204039c4:	fcc42503          	lw	a0,-52(s0)
204039c8:	33b9                	jal	20403716 <__metal_driver_sifive_clint0_num_interrupts>
204039ca:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
204039ce:	fe042703          	lw	a4,-32(s0)
204039d2:	4785                	li	a5,1
204039d4:	00f70863          	beq	a4,a5,204039e4 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
204039d8:	fe042783          	lw	a5,-32(s0)
204039dc:	c781                	beqz	a5,204039e4 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
204039de:	fec42783          	lw	a5,-20(s0)
204039e2:	a049                	j	20403a64 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
204039e4:	fe042223          	sw	zero,-28(s0)
204039e8:	a091                	j	20403a2c <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204039ea:	fe442583          	lw	a1,-28(s0)
204039ee:	fcc42503          	lw	a0,-52(s0)
204039f2:	3351                	jal	20403776 <__metal_driver_sifive_clint0_interrupt_lines>
204039f4:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204039f8:	fe442583          	lw	a1,-28(s0)
204039fc:	fcc42503          	lw	a0,-52(s0)
20403a00:	3b2d                	jal	2040373a <__metal_driver_sifive_clint0_interrupt_parents>
20403a02:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20403a06:	fdc42703          	lw	a4,-36(s0)
20403a0a:	fe842783          	lw	a5,-24(s0)
20403a0e:	00f71863          	bne	a4,a5,20403a1e <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20403a12:	fc842703          	lw	a4,-56(s0)
20403a16:	fd442783          	lw	a5,-44(s0)
20403a1a:	02f70063          	beq	a4,a5,20403a3a <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20403a1e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20403a22:	fe442783          	lw	a5,-28(s0)
20403a26:	0785                	addi	a5,a5,1
20403a28:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20403a2c:	fe442703          	lw	a4,-28(s0)
20403a30:	fd842783          	lw	a5,-40(s0)
20403a34:	faf74be3          	blt	a4,a5,204039ea <__metal_driver_riscv_clint0_register+0x56>
20403a38:	a011                	j	20403a3c <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20403a3a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20403a3c:	fe842783          	lw	a5,-24(s0)
20403a40:	c385                	beqz	a5,20403a60 <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20403a42:	fe842783          	lw	a5,-24(s0)
20403a46:	439c                	lw	a5,0(a5)
20403a48:	4fdc                	lw	a5,28(a5)
20403a4a:	fc042683          	lw	a3,-64(s0)
20403a4e:	fc442603          	lw	a2,-60(s0)
20403a52:	fc842583          	lw	a1,-56(s0)
20403a56:	fe842503          	lw	a0,-24(s0)
20403a5a:	9782                	jalr	a5
20403a5c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20403a60:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20403a64:	853e                	mv	a0,a5
20403a66:	50f2                	lw	ra,60(sp)
20403a68:	5462                	lw	s0,56(sp)
20403a6a:	6121                	addi	sp,sp,64
20403a6c:	8082                	ret

20403a6e <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20403a6e:	7179                	addi	sp,sp,-48
20403a70:	d622                	sw	s0,44(sp)
20403a72:	1800                	addi	s0,sp,48
20403a74:	fca42e23          	sw	a0,-36(s0)
20403a78:	fcb42c23          	sw	a1,-40(s0)
20403a7c:	fcc42a23          	sw	a2,-44(s0)
20403a80:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20403a84:	57fd                	li	a5,-1
20403a86:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20403a8a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20403a8e:	853e                	mv	a0,a5
20403a90:	5432                	lw	s0,44(sp)
20403a92:	6145                	addi	sp,sp,48
20403a94:	8082                	ret

20403a96 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20403a96:	1101                	addi	sp,sp,-32
20403a98:	ce06                	sw	ra,28(sp)
20403a9a:	cc22                	sw	s0,24(sp)
20403a9c:	1000                	addi	s0,sp,32
20403a9e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20403aa2:	274010ef          	jal	ra,20404d16 <__metal_controller_interrupt_vector_mode>
20403aa6:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
20403aa8:	853e                	mv	a0,a5
20403aaa:	40f2                	lw	ra,28(sp)
20403aac:	4462                	lw	s0,24(sp)
20403aae:	6105                	addi	sp,sp,32
20403ab0:	8082                	ret

20403ab2 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20403ab2:	7179                	addi	sp,sp,-48
20403ab4:	d606                	sw	ra,44(sp)
20403ab6:	d422                	sw	s0,40(sp)
20403ab8:	1800                	addi	s0,sp,48
20403aba:	fca42e23          	sw	a0,-36(s0)
20403abe:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20403ac2:	57fd                	li	a5,-1
20403ac4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20403ac8:	3539                	jal	204038d6 <_get_cpu_intc>
20403aca:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20403ace:	fe842783          	lw	a5,-24(s0)
20403ad2:	c395                	beqz	a5,20403af6 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20403ad4:	fd842703          	lw	a4,-40(s0)
20403ad8:	4785                	li	a5,1
20403ada:	00e7ef63          	bltu	a5,a4,20403af8 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20403ade:	fe842783          	lw	a5,-24(s0)
20403ae2:	439c                	lw	a5,0(a5)
20403ae4:	43dc                	lw	a5,4(a5)
20403ae6:	fd842583          	lw	a1,-40(s0)
20403aea:	fe842503          	lw	a0,-24(s0)
20403aee:	9782                	jalr	a5
20403af0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
20403af4:	a011                	j	20403af8 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20403af6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
20403af8:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20403afc:	853e                	mv	a0,a5
20403afe:	50b2                	lw	ra,44(sp)
20403b00:	5422                	lw	s0,40(sp)
20403b02:	6145                	addi	sp,sp,48
20403b04:	8082                	ret

20403b06 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20403b06:	7139                	addi	sp,sp,-64
20403b08:	de06                	sw	ra,60(sp)
20403b0a:	dc22                	sw	s0,56(sp)
20403b0c:	0080                	addi	s0,sp,64
20403b0e:	fca42623          	sw	a0,-52(s0)
20403b12:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20403b16:	57fd                	li	a5,-1
20403b18:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20403b1c:	fc842783          	lw	a5,-56(s0)
20403b20:	cbc1                	beqz	a5,20403bb0 <__metal_driver_riscv_clint0_enable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20403b22:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20403b26:	3b45                	jal	204038d6 <_get_cpu_intc>
20403b28:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20403b2c:	fcc42503          	lw	a0,-52(s0)
20403b30:	be7ff0ef          	jal	ra,20403716 <__metal_driver_sifive_clint0_num_interrupts>
20403b34:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20403b38:	fe042223          	sw	zero,-28(s0)
20403b3c:	a0a1                	j	20403b84 <__metal_driver_riscv_clint0_enable+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20403b3e:	fe442583          	lw	a1,-28(s0)
20403b42:	fcc42503          	lw	a0,-52(s0)
20403b46:	c31ff0ef          	jal	ra,20403776 <__metal_driver_sifive_clint0_interrupt_lines>
20403b4a:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20403b4e:	fe442583          	lw	a1,-28(s0)
20403b52:	fcc42503          	lw	a0,-52(s0)
20403b56:	be5ff0ef          	jal	ra,2040373a <__metal_driver_sifive_clint0_interrupt_parents>
20403b5a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20403b5e:	fe042703          	lw	a4,-32(s0)
20403b62:	fe842783          	lw	a5,-24(s0)
20403b66:	00f71863          	bne	a4,a5,20403b76 <__metal_driver_riscv_clint0_enable+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20403b6a:	fc842703          	lw	a4,-56(s0)
20403b6e:	fd842783          	lw	a5,-40(s0)
20403b72:	02f70063          	beq	a4,a5,20403b92 <__metal_driver_riscv_clint0_enable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20403b76:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20403b7a:	fe442783          	lw	a5,-28(s0)
20403b7e:	0785                	addi	a5,a5,1
20403b80:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20403b84:	fe442703          	lw	a4,-28(s0)
20403b88:	fdc42783          	lw	a5,-36(s0)
20403b8c:	faf749e3          	blt	a4,a5,20403b3e <__metal_driver_riscv_clint0_enable+0x38>
20403b90:	a011                	j	20403b94 <__metal_driver_riscv_clint0_enable+0x8e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20403b92:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20403b94:	fe842783          	lw	a5,-24(s0)
20403b98:	cf81                	beqz	a5,20403bb0 <__metal_driver_riscv_clint0_enable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20403b9a:	fe842783          	lw	a5,-24(s0)
20403b9e:	439c                	lw	a5,0(a5)
20403ba0:	53dc                	lw	a5,36(a5)
20403ba2:	fc842583          	lw	a1,-56(s0)
20403ba6:	fe842503          	lw	a0,-24(s0)
20403baa:	9782                	jalr	a5
20403bac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20403bb0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20403bb4:	853e                	mv	a0,a5
20403bb6:	50f2                	lw	ra,60(sp)
20403bb8:	5462                	lw	s0,56(sp)
20403bba:	6121                	addi	sp,sp,64
20403bbc:	8082                	ret

20403bbe <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20403bbe:	7139                	addi	sp,sp,-64
20403bc0:	de06                	sw	ra,60(sp)
20403bc2:	dc22                	sw	s0,56(sp)
20403bc4:	0080                	addi	s0,sp,64
20403bc6:	fca42623          	sw	a0,-52(s0)
20403bca:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20403bce:	57fd                	li	a5,-1
20403bd0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20403bd4:	fc842783          	lw	a5,-56(s0)
20403bd8:	cbc9                	beqz	a5,20403c6a <__metal_driver_riscv_clint0_disable+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20403bda:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20403bde:	cf9ff0ef          	jal	ra,204038d6 <_get_cpu_intc>
20403be2:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20403be6:	fcc42503          	lw	a0,-52(s0)
20403bea:	b2dff0ef          	jal	ra,20403716 <__metal_driver_sifive_clint0_num_interrupts>
20403bee:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20403bf2:	fe042223          	sw	zero,-28(s0)
20403bf6:	a0a1                	j	20403c3e <__metal_driver_riscv_clint0_disable+0x80>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20403bf8:	fe442583          	lw	a1,-28(s0)
20403bfc:	fcc42503          	lw	a0,-52(s0)
20403c00:	b77ff0ef          	jal	ra,20403776 <__metal_driver_sifive_clint0_interrupt_lines>
20403c04:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20403c08:	fe442583          	lw	a1,-28(s0)
20403c0c:	fcc42503          	lw	a0,-52(s0)
20403c10:	b2bff0ef          	jal	ra,2040373a <__metal_driver_sifive_clint0_interrupt_parents>
20403c14:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20403c18:	fe042703          	lw	a4,-32(s0)
20403c1c:	fe842783          	lw	a5,-24(s0)
20403c20:	00f71863          	bne	a4,a5,20403c30 <__metal_driver_riscv_clint0_disable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20403c24:	fc842703          	lw	a4,-56(s0)
20403c28:	fd842783          	lw	a5,-40(s0)
20403c2c:	02f70063          	beq	a4,a5,20403c4c <__metal_driver_riscv_clint0_disable+0x8e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20403c30:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20403c34:	fe442783          	lw	a5,-28(s0)
20403c38:	0785                	addi	a5,a5,1
20403c3a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20403c3e:	fe442703          	lw	a4,-28(s0)
20403c42:	fdc42783          	lw	a5,-36(s0)
20403c46:	faf749e3          	blt	a4,a5,20403bf8 <__metal_driver_riscv_clint0_disable+0x3a>
20403c4a:	a011                	j	20403c4e <__metal_driver_riscv_clint0_disable+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20403c4c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20403c4e:	fe842783          	lw	a5,-24(s0)
20403c52:	cf81                	beqz	a5,20403c6a <__metal_driver_riscv_clint0_disable+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20403c54:	fe842783          	lw	a5,-24(s0)
20403c58:	439c                	lw	a5,0(a5)
20403c5a:	579c                	lw	a5,40(a5)
20403c5c:	fc842583          	lw	a1,-56(s0)
20403c60:	fe842503          	lw	a0,-24(s0)
20403c64:	9782                	jalr	a5
20403c66:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20403c6a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
20403c6e:	853e                	mv	a0,a5
20403c70:	50f2                	lw	ra,60(sp)
20403c72:	5462                	lw	s0,56(sp)
20403c74:	6121                	addi	sp,sp,64
20403c76:	8082                	ret

20403c78 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20403c78:	7179                	addi	sp,sp,-48
20403c7a:	d606                	sw	ra,44(sp)
20403c7c:	d422                	sw	s0,40(sp)
20403c7e:	1800                	addi	s0,sp,48
20403c80:	fca42e23          	sw	a0,-36(s0)
20403c84:	fcb42c23          	sw	a1,-40(s0)
20403c88:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
20403c8c:	57fd                	li	a5,-1
20403c8e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20403c92:	fdc42783          	lw	a5,-36(s0)
20403c96:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20403c9a:	fdc42503          	lw	a0,-36(s0)
20403c9e:	a53ff0ef          	jal	ra,204036f0 <__metal_driver_sifive_clint0_control_base>
20403ca2:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20403ca6:	fd842703          	lw	a4,-40(s0)
20403caa:	4789                	li	a5,2
20403cac:	04f70963          	beq	a4,a5,20403cfe <__metal_driver_riscv_clint0_command_request+0x86>
20403cb0:	fd842703          	lw	a4,-40(s0)
20403cb4:	4789                	li	a5,2
20403cb6:	00e7c863          	blt	a5,a4,20403cc6 <__metal_driver_riscv_clint0_command_request+0x4e>
20403cba:	fd842703          	lw	a4,-40(s0)
20403cbe:	4785                	li	a5,1
20403cc0:	00f70e63          	beq	a4,a5,20403cdc <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20403cc4:	a8f1                	j	20403da0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20403cc6:	fd842703          	lw	a4,-40(s0)
20403cca:	478d                	li	a5,3
20403ccc:	04f70d63          	beq	a4,a5,20403d26 <__metal_driver_riscv_clint0_command_request+0xae>
20403cd0:	fd842703          	lw	a4,-40(s0)
20403cd4:	4791                	li	a5,4
20403cd6:	08f70963          	beq	a4,a5,20403d68 <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20403cda:	a0d9                	j	20403da0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20403cdc:	fd442783          	lw	a5,-44(s0)
20403ce0:	cbcd                	beqz	a5,20403d92 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20403ce2:	fe842503          	lw	a0,-24(s0)
20403ce6:	ac1ff0ef          	jal	ra,204037a6 <__metal_clint0_mtime_get>
20403cea:	87aa                	mv	a5,a0
20403cec:	882e                	mv	a6,a1
20403cee:	fd442703          	lw	a4,-44(s0)
20403cf2:	c31c                	sw	a5,0(a4)
20403cf4:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20403cf8:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20403cfc:	a859                	j	20403d92 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20403cfe:	fd442783          	lw	a5,-44(s0)
20403d02:	cbd1                	beqz	a5,20403d96 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20403d04:	fd442783          	lw	a5,-44(s0)
20403d08:	439c                	lw	a5,0(a5)
20403d0a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d0e:	fe042783          	lw	a5,-32(s0)
20403d12:	078a                	slli	a5,a5,0x2
20403d14:	873e                	mv	a4,a5
20403d16:	fe442783          	lw	a5,-28(s0)
20403d1a:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20403d1c:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20403d20:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20403d24:	a88d                	j	20403d96 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20403d26:	fd442783          	lw	a5,-44(s0)
20403d2a:	cba5                	beqz	a5,20403d9a <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20403d2c:	fd442783          	lw	a5,-44(s0)
20403d30:	439c                	lw	a5,0(a5)
20403d32:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d36:	fe042783          	lw	a5,-32(s0)
20403d3a:	078a                	slli	a5,a5,0x2
20403d3c:	873e                	mv	a4,a5
20403d3e:	fe442783          	lw	a5,-28(s0)
20403d42:	97ba                	add	a5,a5,a4
20403d44:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20403d46:	4785                	li	a5,1
20403d48:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20403d4a:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d4e:	fe042783          	lw	a5,-32(s0)
20403d52:	078a                	slli	a5,a5,0x2
20403d54:	873e                	mv	a4,a5
20403d56:	fe442783          	lw	a5,-28(s0)
20403d5a:	97ba                	add	a5,a5,a4
20403d5c:	439c                	lw	a5,0(a5)
20403d5e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20403d62:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20403d66:	a815                	j	20403d9a <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20403d68:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20403d6c:	fd442783          	lw	a5,-44(s0)
20403d70:	c79d                	beqz	a5,20403d9e <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20403d72:	fd442783          	lw	a5,-44(s0)
20403d76:	439c                	lw	a5,0(a5)
20403d78:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d7c:	fe042783          	lw	a5,-32(s0)
20403d80:	078a                	slli	a5,a5,0x2
20403d82:	873e                	mv	a4,a5
20403d84:	fe442783          	lw	a5,-28(s0)
20403d88:	97ba                	add	a5,a5,a4
20403d8a:	439c                	lw	a5,0(a5)
20403d8c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20403d90:	a039                	j	20403d9e <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20403d92:	0001                	nop
20403d94:	a031                	j	20403da0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20403d96:	0001                	nop
20403d98:	a021                	j	20403da0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20403d9a:	0001                	nop
20403d9c:	a011                	j	20403da0 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20403d9e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20403da0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
20403da4:	853e                	mv	a0,a5
20403da6:	50b2                	lw	ra,44(sp)
20403da8:	5422                	lw	s0,40(sp)
20403daa:	6145                	addi	sp,sp,48
20403dac:	8082                	ret

20403dae <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20403dae:	7179                	addi	sp,sp,-48
20403db0:	d606                	sw	ra,44(sp)
20403db2:	d422                	sw	s0,40(sp)
20403db4:	1800                	addi	s0,sp,48
20403db6:	fca42e23          	sw	a0,-36(s0)
20403dba:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20403dbe:	57b020ef          	jal	ra,20406b38 <metal_cpu_get_current_hartid>
20403dc2:	87aa                	mv	a5,a0
20403dc4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20403dc8:	fec40793          	addi	a5,s0,-20
20403dcc:	863e                	mv	a2,a5
20403dce:	4589                	li	a1,2
20403dd0:	fdc42503          	lw	a0,-36(s0)
20403dd4:	3555                	jal	20403c78 <__metal_driver_riscv_clint0_command_request>
20403dd6:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20403dd8:	853e                	mv	a0,a5
20403dda:	50b2                	lw	ra,44(sp)
20403ddc:	5422                	lw	s0,40(sp)
20403dde:	6145                	addi	sp,sp,48
20403de0:	8082                	ret

20403de2 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20403de2:	7179                	addi	sp,sp,-48
20403de4:	d606                	sw	ra,44(sp)
20403de6:	d422                	sw	s0,40(sp)
20403de8:	1800                	addi	s0,sp,48
20403dea:	fca42e23          	sw	a0,-36(s0)
20403dee:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
20403df2:	547020ef          	jal	ra,20406b38 <metal_cpu_get_current_hartid>
20403df6:	87aa                	mv	a5,a0
20403df8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
20403dfc:	fec40793          	addi	a5,s0,-20
20403e00:	863e                	mv	a2,a5
20403e02:	458d                	li	a1,3
20403e04:	fdc42503          	lw	a0,-36(s0)
20403e08:	3d85                	jal	20403c78 <__metal_driver_riscv_clint0_command_request>
20403e0a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20403e0c:	853e                	mv	a0,a5
20403e0e:	50b2                	lw	ra,44(sp)
20403e10:	5422                	lw	s0,40(sp)
20403e12:	6145                	addi	sp,sp,48
20403e14:	8082                	ret

20403e16 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20403e16:	1101                	addi	sp,sp,-32
20403e18:	ce22                	sw	s0,28(sp)
20403e1a:	1000                	addi	s0,sp,32
20403e1c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20403e20:	fec42703          	lw	a4,-20(s0)
20403e24:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20403e28:	00f71463          	bne	a4,a5,20403e30 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
20403e2c:	4781                	li	a5,0
20403e2e:	a011                	j	20403e32 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
20403e30:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
20403e32:	853e                	mv	a0,a5
20403e34:	4472                	lw	s0,28(sp)
20403e36:	6105                	addi	sp,sp,32
20403e38:	8082                	ret

20403e3a <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20403e3a:	1101                	addi	sp,sp,-32
20403e3c:	ce22                	sw	s0,28(sp)
20403e3e:	1000                	addi	s0,sp,32
20403e40:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20403e44:	fec42703          	lw	a4,-20(s0)
20403e48:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20403e4c:	00f71763          	bne	a4,a5,20403e5a <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
20403e50:	000f47b7          	lui	a5,0xf4
20403e54:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20403e58:	a011                	j	20403e5c <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
20403e5a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
20403e5c:	853e                	mv	a0,a5
20403e5e:	4472                	lw	s0,28(sp)
20403e60:	6105                	addi	sp,sp,32
20403e62:	8082                	ret

20403e64 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
20403e64:	1101                	addi	sp,sp,-32
20403e66:	ce22                	sw	s0,28(sp)
20403e68:	1000                	addi	s0,sp,32
20403e6a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20403e6e:	fec42703          	lw	a4,-20(s0)
20403e72:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20403e76:	00f71763          	bne	a4,a5,20403e84 <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20403e7a:	800017b7          	lui	a5,0x80001
20403e7e:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffd4ac>
20403e82:	a011                	j	20403e86 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
20403e84:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
20403e86:	853e                	mv	a0,a5
20403e88:	4472                	lw	s0,28(sp)
20403e8a:	6105                	addi	sp,sp,32
20403e8c:	8082                	ret

20403e8e <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20403e8e:	1101                	addi	sp,sp,-32
20403e90:	ce22                	sw	s0,28(sp)
20403e92:	1000                	addi	s0,sp,32
20403e94:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20403e98:	fec42783          	lw	a5,-20(s0)
20403e9c:	00f04a63          	bgtz	a5,20403eb0 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20403ea0:	fec42703          	lw	a4,-20(s0)
20403ea4:	070a                	slli	a4,a4,0x2
20403ea6:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403eaa:	97ba                	add	a5,a5,a4
20403eac:	439c                	lw	a5,0(a5)
20403eae:	a011                	j	20403eb2 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20403eb0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20403eb2:	853e                	mv	a0,a5
20403eb4:	4472                	lw	s0,28(sp)
20403eb6:	6105                	addi	sp,sp,32
20403eb8:	8082                	ret

20403eba <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20403eba:	1101                	addi	sp,sp,-32
20403ebc:	ce22                	sw	s0,28(sp)
20403ebe:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20403ec0:	f14027f3          	csrr	a5,mhartid
20403ec4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20403ec8:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20403ecc:	853e                	mv	a0,a5
20403ece:	4472                	lw	s0,28(sp)
20403ed0:	6105                	addi	sp,sp,32
20403ed2:	8082                	ret

20403ed4 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20403ed4:	1101                	addi	sp,sp,-32
20403ed6:	ce22                	sw	s0,28(sp)
20403ed8:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20403eda:	47a1                	li	a5,8
20403edc:	3007a7f3          	csrrs	a5,mstatus,a5
20403ee0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
20403ee4:	0001                	nop
20403ee6:	4472                	lw	s0,28(sp)
20403ee8:	6105                	addi	sp,sp,32
20403eea:	8082                	ret

20403eec <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20403eec:	1101                	addi	sp,sp,-32
20403eee:	ce22                	sw	s0,28(sp)
20403ef0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20403ef2:	47a1                	li	a5,8
20403ef4:	3007b7f3          	csrrc	a5,mstatus,a5
20403ef8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
20403efc:	0001                	nop
20403efe:	4472                	lw	s0,28(sp)
20403f00:	6105                	addi	sp,sp,32
20403f02:	8082                	ret

20403f04 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
20403f04:	1101                	addi	sp,sp,-32
20403f06:	ce22                	sw	s0,28(sp)
20403f08:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20403f0a:	47a1                	li	a5,8
20403f0c:	3047a7f3          	csrrs	a5,mie,a5
20403f10:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
20403f14:	0001                	nop
20403f16:	4472                	lw	s0,28(sp)
20403f18:	6105                	addi	sp,sp,32
20403f1a:	8082                	ret

20403f1c <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20403f1c:	1101                	addi	sp,sp,-32
20403f1e:	ce22                	sw	s0,28(sp)
20403f20:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20403f22:	47a1                	li	a5,8
20403f24:	3047b7f3          	csrrc	a5,mie,a5
20403f28:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
20403f2c:	0001                	nop
20403f2e:	4472                	lw	s0,28(sp)
20403f30:	6105                	addi	sp,sp,32
20403f32:	8082                	ret

20403f34 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
20403f34:	1101                	addi	sp,sp,-32
20403f36:	ce22                	sw	s0,28(sp)
20403f38:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20403f3a:	08000793          	li	a5,128
20403f3e:	3047a7f3          	csrrs	a5,mie,a5
20403f42:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20403f46:	0001                	nop
20403f48:	4472                	lw	s0,28(sp)
20403f4a:	6105                	addi	sp,sp,32
20403f4c:	8082                	ret

20403f4e <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20403f4e:	1101                	addi	sp,sp,-32
20403f50:	ce22                	sw	s0,28(sp)
20403f52:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20403f54:	08000793          	li	a5,128
20403f58:	3047b7f3          	csrrc	a5,mie,a5
20403f5c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20403f60:	0001                	nop
20403f62:	4472                	lw	s0,28(sp)
20403f64:	6105                	addi	sp,sp,32
20403f66:	8082                	ret

20403f68 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20403f68:	1101                	addi	sp,sp,-32
20403f6a:	ce22                	sw	s0,28(sp)
20403f6c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20403f6e:	6785                	lui	a5,0x1
20403f70:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20403f74:	3047a7f3          	csrrs	a5,mie,a5
20403f78:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20403f7c:	0001                	nop
20403f7e:	4472                	lw	s0,28(sp)
20403f80:	6105                	addi	sp,sp,32
20403f82:	8082                	ret

20403f84 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
20403f84:	1101                	addi	sp,sp,-32
20403f86:	ce22                	sw	s0,28(sp)
20403f88:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20403f8a:	6785                	lui	a5,0x1
20403f8c:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20403f90:	3047b7f3          	csrrc	a5,mie,a5
20403f94:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20403f98:	0001                	nop
20403f9a:	4472                	lw	s0,28(sp)
20403f9c:	6105                	addi	sp,sp,32
20403f9e:	8082                	ret

20403fa0 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20403fa0:	7179                	addi	sp,sp,-48
20403fa2:	d622                	sw	s0,44(sp)
20403fa4:	1800                	addi	s0,sp,48
20403fa6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20403faa:	fdc42783          	lw	a5,-36(s0)
20403fae:	4705                	li	a4,1
20403fb0:	00f717b3          	sll	a5,a4,a5
20403fb4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20403fb8:	fec42783          	lw	a5,-20(s0)
20403fbc:	3047a7f3          	csrrs	a5,mie,a5
20403fc0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
20403fc4:	0001                	nop
20403fc6:	5432                	lw	s0,44(sp)
20403fc8:	6145                	addi	sp,sp,48
20403fca:	8082                	ret

20403fcc <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20403fcc:	7179                	addi	sp,sp,-48
20403fce:	d622                	sw	s0,44(sp)
20403fd0:	1800                	addi	s0,sp,48
20403fd2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
20403fd6:	fdc42783          	lw	a5,-36(s0)
20403fda:	4705                	li	a4,1
20403fdc:	00f717b3          	sll	a5,a4,a5
20403fe0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20403fe4:	fec42783          	lw	a5,-20(s0)
20403fe8:	3047b7f3          	csrrc	a5,mie,a5
20403fec:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20403ff0:	0001                	nop
20403ff2:	5432                	lw	s0,44(sp)
20403ff4:	6145                	addi	sp,sp,48
20403ff6:	8082                	ret

20403ff8 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20403ff8:	1101                	addi	sp,sp,-32
20403ffa:	ce06                	sw	ra,28(sp)
20403ffc:	cc22                	sw	s0,24(sp)
20403ffe:	1000                	addi	s0,sp,32
20404000:	fea42623          	sw	a0,-20(s0)
20404004:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20404008:	06400513          	li	a0,100
2040400c:	347020ef          	jal	ra,20406b52 <metal_shutdown>

20404010 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20404010:	1101                	addi	sp,sp,-32
20404012:	ce06                	sw	ra,28(sp)
20404014:	cc22                	sw	s0,24(sp)
20404016:	1000                	addi	s0,sp,32
20404018:	fea42623          	sw	a0,-20(s0)
2040401c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20404020:	0c800513          	li	a0,200
20404024:	32f020ef          	jal	ra,20406b52 <metal_shutdown>

20404028 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20404028:	715d                	addi	sp,sp,-80
2040402a:	c686                	sw	ra,76(sp)
2040402c:	c496                	sw	t0,72(sp)
2040402e:	c29a                	sw	t1,68(sp)
20404030:	c09e                	sw	t2,64(sp)
20404032:	de22                	sw	s0,60(sp)
20404034:	dc2a                	sw	a0,56(sp)
20404036:	da2e                	sw	a1,52(sp)
20404038:	d832                	sw	a2,48(sp)
2040403a:	d636                	sw	a3,44(sp)
2040403c:	d43a                	sw	a4,40(sp)
2040403e:	d23e                	sw	a5,36(sp)
20404040:	d042                	sw	a6,32(sp)
20404042:	ce46                	sw	a7,28(sp)
20404044:	cc72                	sw	t3,24(sp)
20404046:	ca76                	sw	t4,20(sp)
20404048:	c87a                	sw	t5,16(sp)
2040404a:	c67e                	sw	t6,12(sp)
2040404c:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
2040404e:	12c00513          	li	a0,300
20404052:	301020ef          	jal	ra,20406b52 <metal_shutdown>

20404056 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20404056:	711d                	addi	sp,sp,-96
20404058:	ce86                	sw	ra,92(sp)
2040405a:	cc96                	sw	t0,88(sp)
2040405c:	ca9a                	sw	t1,84(sp)
2040405e:	c89e                	sw	t2,80(sp)
20404060:	c6a2                	sw	s0,76(sp)
20404062:	c4aa                	sw	a0,72(sp)
20404064:	c2ae                	sw	a1,68(sp)
20404066:	c0b2                	sw	a2,64(sp)
20404068:	de36                	sw	a3,60(sp)
2040406a:	dc3a                	sw	a4,56(sp)
2040406c:	da3e                	sw	a5,52(sp)
2040406e:	d842                	sw	a6,48(sp)
20404070:	d646                	sw	a7,44(sp)
20404072:	d472                	sw	t3,40(sp)
20404074:	d276                	sw	t4,36(sp)
20404076:	d07a                	sw	t5,32(sp)
20404078:	ce7e                	sw	t6,28(sp)
2040407a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040407c:	3d3d                	jal	20403eba <__metal_myhart_id>
2040407e:	872a                	mv	a4,a0
20404080:	070a                	slli	a4,a4,0x2
20404082:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20404086:	97ba                	add	a5,a5,a4
20404088:	439c                	lw	a5,0(a5)
2040408a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
2040408e:	fac42783          	lw	a5,-84(s0)
20404092:	c785                	beqz	a5,204040ba <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404094:	fac42503          	lw	a0,-84(s0)
20404098:	33f1                	jal	20403e64 <__metal_driver_cpu_interrupt_controller>
2040409a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
2040409e:	fa842783          	lw	a5,-88(s0)
204040a2:	0e07a783          	lw	a5,224(a5)
204040a6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
204040aa:	fa842783          	lw	a5,-88(s0)
204040ae:	0d87a783          	lw	a5,216(a5)
204040b2:	fa442583          	lw	a1,-92(s0)
204040b6:	450d                	li	a0,3
204040b8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
204040ba:	0001                	nop
204040bc:	40f6                	lw	ra,92(sp)
204040be:	42e6                	lw	t0,88(sp)
204040c0:	4356                	lw	t1,84(sp)
204040c2:	43c6                	lw	t2,80(sp)
204040c4:	4436                	lw	s0,76(sp)
204040c6:	4526                	lw	a0,72(sp)
204040c8:	4596                	lw	a1,68(sp)
204040ca:	4606                	lw	a2,64(sp)
204040cc:	56f2                	lw	a3,60(sp)
204040ce:	5762                	lw	a4,56(sp)
204040d0:	57d2                	lw	a5,52(sp)
204040d2:	5842                	lw	a6,48(sp)
204040d4:	58b2                	lw	a7,44(sp)
204040d6:	5e22                	lw	t3,40(sp)
204040d8:	5e92                	lw	t4,36(sp)
204040da:	5f02                	lw	t5,32(sp)
204040dc:	4ff2                	lw	t6,28(sp)
204040de:	6125                	addi	sp,sp,96
204040e0:	30200073          	mret

204040e4 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
204040e4:	7179                	addi	sp,sp,-48
204040e6:	d606                	sw	ra,44(sp)
204040e8:	d422                	sw	s0,40(sp)
204040ea:	1800                	addi	s0,sp,48
204040ec:	fca42e23          	sw	a0,-36(s0)
204040f0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204040f4:	33d9                	jal	20403eba <__metal_myhart_id>
204040f6:	872a                	mv	a4,a0
204040f8:	070a                	slli	a4,a4,0x2
204040fa:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204040fe:	97ba                	add	a5,a5,a4
20404100:	439c                	lw	a5,0(a5)
20404102:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20404106:	342027f3          	csrr	a5,mcause
2040410a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
2040410e:	fec42783          	lw	a5,-20(s0)
20404112:	c79d                	beqz	a5,20404140 <__metal_default_sw_handler+0x5c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404114:	fec42503          	lw	a0,-20(s0)
20404118:	d4dff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
2040411c:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20404120:	fe842783          	lw	a5,-24(s0)
20404124:	3ff7f793          	andi	a5,a5,1023
20404128:	fe442703          	lw	a4,-28(s0)
2040412c:	0e078793          	addi	a5,a5,224
20404130:	078a                	slli	a5,a5,0x2
20404132:	97ba                	add	a5,a5,a4
20404134:	479c                	lw	a5,8(a5)
20404136:	fdc42583          	lw	a1,-36(s0)
2040413a:	fec42503          	lw	a0,-20(s0)
2040413e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20404140:	0001                	nop
20404142:	50b2                	lw	ra,44(sp)
20404144:	5422                	lw	s0,40(sp)
20404146:	6145                	addi	sp,sp,48
20404148:	8082                	ret

2040414a <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
2040414a:	711d                	addi	sp,sp,-96
2040414c:	ce86                	sw	ra,92(sp)
2040414e:	cc96                	sw	t0,88(sp)
20404150:	ca9a                	sw	t1,84(sp)
20404152:	c89e                	sw	t2,80(sp)
20404154:	c6a2                	sw	s0,76(sp)
20404156:	c4aa                	sw	a0,72(sp)
20404158:	c2ae                	sw	a1,68(sp)
2040415a:	c0b2                	sw	a2,64(sp)
2040415c:	de36                	sw	a3,60(sp)
2040415e:	dc3a                	sw	a4,56(sp)
20404160:	da3e                	sw	a5,52(sp)
20404162:	d842                	sw	a6,48(sp)
20404164:	d646                	sw	a7,44(sp)
20404166:	d472                	sw	t3,40(sp)
20404168:	d276                	sw	t4,36(sp)
2040416a:	d07a                	sw	t5,32(sp)
2040416c:	ce7e                	sw	t6,28(sp)
2040416e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404170:	d4bff0ef          	jal	ra,20403eba <__metal_myhart_id>
20404174:	872a                	mv	a4,a0
20404176:	070a                	slli	a4,a4,0x2
20404178:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040417c:	97ba                	add	a5,a5,a4
2040417e:	439c                	lw	a5,0(a5)
20404180:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20404184:	fac42783          	lw	a5,-84(s0)
20404188:	c78d                	beqz	a5,204041b2 <metal_timer_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040418a:	fac42503          	lw	a0,-84(s0)
2040418e:	cd7ff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
20404192:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20404196:	fa842783          	lw	a5,-88(s0)
2040419a:	1407a783          	lw	a5,320(a5)
2040419e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
204041a2:	fa842783          	lw	a5,-88(s0)
204041a6:	1387a783          	lw	a5,312(a5)
204041aa:	fa442583          	lw	a1,-92(s0)
204041ae:	451d                	li	a0,7
204041b0:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
204041b2:	0001                	nop
204041b4:	40f6                	lw	ra,92(sp)
204041b6:	42e6                	lw	t0,88(sp)
204041b8:	4356                	lw	t1,84(sp)
204041ba:	43c6                	lw	t2,80(sp)
204041bc:	4436                	lw	s0,76(sp)
204041be:	4526                	lw	a0,72(sp)
204041c0:	4596                	lw	a1,68(sp)
204041c2:	4606                	lw	a2,64(sp)
204041c4:	56f2                	lw	a3,60(sp)
204041c6:	5762                	lw	a4,56(sp)
204041c8:	57d2                	lw	a5,52(sp)
204041ca:	5842                	lw	a6,48(sp)
204041cc:	58b2                	lw	a7,44(sp)
204041ce:	5e22                	lw	t3,40(sp)
204041d0:	5e92                	lw	t4,36(sp)
204041d2:	5f02                	lw	t5,32(sp)
204041d4:	4ff2                	lw	t6,28(sp)
204041d6:	6125                	addi	sp,sp,96
204041d8:	30200073          	mret

204041dc <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
204041dc:	7179                	addi	sp,sp,-48
204041de:	d606                	sw	ra,44(sp)
204041e0:	d422                	sw	s0,40(sp)
204041e2:	1800                	addi	s0,sp,48
204041e4:	fca42e23          	sw	a0,-36(s0)
204041e8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
204041ec:	ccfff0ef          	jal	ra,20403eba <__metal_myhart_id>
204041f0:	87aa                	mv	a5,a0
204041f2:	853e                	mv	a0,a5
204041f4:	c9bff0ef          	jal	ra,20403e8e <__metal_driver_cpu_get>
204041f8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
204041fc:	fec42503          	lw	a0,-20(s0)
20404200:	174010ef          	jal	ra,20405374 <__metal_driver_cpu_mtime_get>
20404204:	fea42023          	sw	a0,-32(s0)
20404208:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
2040420c:	fe042783          	lw	a5,-32(s0)
20404210:	fe442803          	lw	a6,-28(s0)
20404214:	45a9                	li	a1,10
20404216:	4601                	li	a2,0
20404218:	00b786b3          	add	a3,a5,a1
2040421c:	8536                	mv	a0,a3
2040421e:	00f53533          	sltu	a0,a0,a5
20404222:	00c80733          	add	a4,a6,a2
20404226:	00e507b3          	add	a5,a0,a4
2040422a:	873e                	mv	a4,a5
2040422c:	87b6                	mv	a5,a3
2040422e:	883a                	mv	a6,a4
20404230:	85be                	mv	a1,a5
20404232:	8642                	mv	a2,a6
20404234:	fec42503          	lw	a0,-20(s0)
20404238:	1a2010ef          	jal	ra,204053da <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
2040423c:	0001                	nop
2040423e:	50b2                	lw	ra,44(sp)
20404240:	5422                	lw	s0,40(sp)
20404242:	6145                	addi	sp,sp,48
20404244:	8082                	ret
	...

20404280 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20404280:	7119                	addi	sp,sp,-128
20404282:	de86                	sw	ra,124(sp)
20404284:	dc96                	sw	t0,120(sp)
20404286:	da9a                	sw	t1,116(sp)
20404288:	d89e                	sw	t2,112(sp)
2040428a:	d6a2                	sw	s0,108(sp)
2040428c:	d4aa                	sw	a0,104(sp)
2040428e:	d2ae                	sw	a1,100(sp)
20404290:	d0b2                	sw	a2,96(sp)
20404292:	ceb6                	sw	a3,92(sp)
20404294:	ccba                	sw	a4,88(sp)
20404296:	cabe                	sw	a5,84(sp)
20404298:	c8c2                	sw	a6,80(sp)
2040429a:	c6c6                	sw	a7,76(sp)
2040429c:	c4f2                	sw	t3,72(sp)
2040429e:	c2f6                	sw	t4,68(sp)
204042a0:	c0fa                	sw	t5,64(sp)
204042a2:	de7e                	sw	t6,60(sp)
204042a4:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204042a6:	c15ff0ef          	jal	ra,20403eba <__metal_myhart_id>
204042aa:	872a                	mv	a4,a0
204042ac:	070a                	slli	a4,a4,0x2
204042ae:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204042b2:	97ba                	add	a5,a5,a4
204042b4:	439c                	lw	a5,0(a5)
204042b6:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204042ba:	342027f3          	csrr	a5,mcause
204042be:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204042c2:	341027f3          	csrr	a5,mepc
204042c6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
204042ca:	343027f3          	csrr	a5,mtval
204042ce:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
204042d2:	305027f3          	csrr	a5,mtvec
204042d6:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
204042da:	fac42783          	lw	a5,-84(s0)
204042de:	c7e9                	beqz	a5,204043a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204042e0:	fac42503          	lw	a0,-84(s0)
204042e4:	b81ff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
204042e8:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
204042ec:	fa842783          	lw	a5,-88(s0)
204042f0:	3ff7f793          	andi	a5,a5,1023
204042f4:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
204042f8:	fa842783          	lw	a5,-88(s0)
204042fc:	0807d863          	bgez	a5,2040438c <__metal_exception_handler+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20404300:	f9442703          	lw	a4,-108(s0)
20404304:	47ad                	li	a5,11
20404306:	00e7d763          	bge	a5,a4,20404314 <__metal_exception_handler+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
2040430a:	f9c42783          	lw	a5,-100(s0)
2040430e:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20404312:	ef9d                	bnez	a5,20404350 <__metal_exception_handler+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20404314:	f9842683          	lw	a3,-104(s0)
20404318:	f9442703          	lw	a4,-108(s0)
2040431c:	87ba                	mv	a5,a4
2040431e:	0786                	slli	a5,a5,0x1
20404320:	97ba                	add	a5,a5,a4
20404322:	078e                	slli	a5,a5,0x3
20404324:	97b6                	add	a5,a5,a3
20404326:	0987a783          	lw	a5,152(a5)
2040432a:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
2040432e:	f9842683          	lw	a3,-104(s0)
20404332:	f9442703          	lw	a4,-108(s0)
20404336:	87ba                	mv	a5,a4
20404338:	0786                	slli	a5,a5,0x1
2040433a:	97ba                	add	a5,a5,a4
2040433c:	078e                	slli	a5,a5,0x3
2040433e:	97b6                	add	a5,a5,a3
20404340:	0907a783          	lw	a5,144(a5)
20404344:	f8c42583          	lw	a1,-116(s0)
20404348:	f9442503          	lw	a0,-108(s0)
2040434c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
2040434e:	a8a9                	j	204043a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20404350:	f9c42783          	lw	a5,-100(s0)
20404354:	03f7f713          	andi	a4,a5,63
20404358:	4789                	li	a5,2
2040435a:	04f71763          	bne	a4,a5,204043a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
2040435e:	307027f3          	csrr	a5,mtvt
20404362:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20404366:	f9842783          	lw	a5,-104(s0)
2040436a:	0dc7a783          	lw	a5,220(a5)
2040436e:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20404372:	f9042783          	lw	a5,-112(s0)
20404376:	439c                	lw	a5,0(a5)
20404378:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
2040437c:	f8842783          	lw	a5,-120(s0)
20404380:	f8c42583          	lw	a1,-116(s0)
20404384:	f9442503          	lw	a0,-108(s0)
20404388:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
2040438a:	a839                	j	204043a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
2040438c:	f9842703          	lw	a4,-104(s0)
20404390:	f9442783          	lw	a5,-108(s0)
20404394:	0e078793          	addi	a5,a5,224
20404398:	078a                	slli	a5,a5,0x2
2040439a:	97ba                	add	a5,a5,a4
2040439c:	479c                	lw	a5,8(a5)
2040439e:	f9442583          	lw	a1,-108(s0)
204043a2:	fac42503          	lw	a0,-84(s0)
204043a6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
204043a8:	50f6                	lw	ra,124(sp)
204043aa:	52e6                	lw	t0,120(sp)
204043ac:	5356                	lw	t1,116(sp)
204043ae:	53c6                	lw	t2,112(sp)
204043b0:	5436                	lw	s0,108(sp)
204043b2:	5526                	lw	a0,104(sp)
204043b4:	5596                	lw	a1,100(sp)
204043b6:	5606                	lw	a2,96(sp)
204043b8:	46f6                	lw	a3,92(sp)
204043ba:	4766                	lw	a4,88(sp)
204043bc:	47d6                	lw	a5,84(sp)
204043be:	4846                	lw	a6,80(sp)
204043c0:	48b6                	lw	a7,76(sp)
204043c2:	4e26                	lw	t3,72(sp)
204043c4:	4e96                	lw	t4,68(sp)
204043c6:	4f06                	lw	t5,64(sp)
204043c8:	5ff2                	lw	t6,60(sp)
204043ca:	6109                	addi	sp,sp,128
204043cc:	30200073          	mret
	...

204043f6 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
204043f6:	711d                	addi	sp,sp,-96
204043f8:	ce86                	sw	ra,92(sp)
204043fa:	cc96                	sw	t0,88(sp)
204043fc:	ca9a                	sw	t1,84(sp)
204043fe:	c89e                	sw	t2,80(sp)
20404400:	c6a2                	sw	s0,76(sp)
20404402:	c4aa                	sw	a0,72(sp)
20404404:	c2ae                	sw	a1,68(sp)
20404406:	c0b2                	sw	a2,64(sp)
20404408:	de36                	sw	a3,60(sp)
2040440a:	dc3a                	sw	a4,56(sp)
2040440c:	da3e                	sw	a5,52(sp)
2040440e:	d842                	sw	a6,48(sp)
20404410:	d646                	sw	a7,44(sp)
20404412:	d472                	sw	t3,40(sp)
20404414:	d276                	sw	t4,36(sp)
20404416:	d07a                	sw	t5,32(sp)
20404418:	ce7e                	sw	t6,28(sp)
2040441a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040441c:	a9fff0ef          	jal	ra,20403eba <__metal_myhart_id>
20404420:	872a                	mv	a4,a0
20404422:	070a                	slli	a4,a4,0x2
20404424:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20404428:	97ba                	add	a5,a5,a4
2040442a:	439c                	lw	a5,0(a5)
2040442c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20404430:	fac42783          	lw	a5,-84(s0)
20404434:	c78d                	beqz	a5,2040445e <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404436:	fac42503          	lw	a0,-84(s0)
2040443a:	a2bff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
2040443e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20404442:	fa842783          	lw	a5,-88(s0)
20404446:	2187a783          	lw	a5,536(a5)
2040444a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
2040444e:	fa842783          	lw	a5,-88(s0)
20404452:	2107a783          	lw	a5,528(a5)
20404456:	fa442583          	lw	a1,-92(s0)
2040445a:	4541                	li	a0,16
2040445c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
2040445e:	0001                	nop
20404460:	40f6                	lw	ra,92(sp)
20404462:	42e6                	lw	t0,88(sp)
20404464:	4356                	lw	t1,84(sp)
20404466:	43c6                	lw	t2,80(sp)
20404468:	4436                	lw	s0,76(sp)
2040446a:	4526                	lw	a0,72(sp)
2040446c:	4596                	lw	a1,68(sp)
2040446e:	4606                	lw	a2,64(sp)
20404470:	56f2                	lw	a3,60(sp)
20404472:	5762                	lw	a4,56(sp)
20404474:	57d2                	lw	a5,52(sp)
20404476:	5842                	lw	a6,48(sp)
20404478:	58b2                	lw	a7,44(sp)
2040447a:	5e22                	lw	t3,40(sp)
2040447c:	5e92                	lw	t4,36(sp)
2040447e:	5f02                	lw	t5,32(sp)
20404480:	4ff2                	lw	t6,28(sp)
20404482:	6125                	addi	sp,sp,96
20404484:	30200073          	mret

20404488 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20404488:	711d                	addi	sp,sp,-96
2040448a:	ce86                	sw	ra,92(sp)
2040448c:	cc96                	sw	t0,88(sp)
2040448e:	ca9a                	sw	t1,84(sp)
20404490:	c89e                	sw	t2,80(sp)
20404492:	c6a2                	sw	s0,76(sp)
20404494:	c4aa                	sw	a0,72(sp)
20404496:	c2ae                	sw	a1,68(sp)
20404498:	c0b2                	sw	a2,64(sp)
2040449a:	de36                	sw	a3,60(sp)
2040449c:	dc3a                	sw	a4,56(sp)
2040449e:	da3e                	sw	a5,52(sp)
204044a0:	d842                	sw	a6,48(sp)
204044a2:	d646                	sw	a7,44(sp)
204044a4:	d472                	sw	t3,40(sp)
204044a6:	d276                	sw	t4,36(sp)
204044a8:	d07a                	sw	t5,32(sp)
204044aa:	ce7e                	sw	t6,28(sp)
204044ac:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204044ae:	a0dff0ef          	jal	ra,20403eba <__metal_myhart_id>
204044b2:	872a                	mv	a4,a0
204044b4:	070a                	slli	a4,a4,0x2
204044b6:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204044ba:	97ba                	add	a5,a5,a4
204044bc:	439c                	lw	a5,0(a5)
204044be:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
204044c2:	fac42783          	lw	a5,-84(s0)
204044c6:	c78d                	beqz	a5,204044f0 <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204044c8:	fac42503          	lw	a0,-84(s0)
204044cc:	999ff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
204044d0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
204044d4:	fa842783          	lw	a5,-88(s0)
204044d8:	2307a783          	lw	a5,560(a5)
204044dc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
204044e0:	fa842783          	lw	a5,-88(s0)
204044e4:	2287a783          	lw	a5,552(a5)
204044e8:	fa442583          	lw	a1,-92(s0)
204044ec:	4545                	li	a0,17
204044ee:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
204044f0:	0001                	nop
204044f2:	40f6                	lw	ra,92(sp)
204044f4:	42e6                	lw	t0,88(sp)
204044f6:	4356                	lw	t1,84(sp)
204044f8:	43c6                	lw	t2,80(sp)
204044fa:	4436                	lw	s0,76(sp)
204044fc:	4526                	lw	a0,72(sp)
204044fe:	4596                	lw	a1,68(sp)
20404500:	4606                	lw	a2,64(sp)
20404502:	56f2                	lw	a3,60(sp)
20404504:	5762                	lw	a4,56(sp)
20404506:	57d2                	lw	a5,52(sp)
20404508:	5842                	lw	a6,48(sp)
2040450a:	58b2                	lw	a7,44(sp)
2040450c:	5e22                	lw	t3,40(sp)
2040450e:	5e92                	lw	t4,36(sp)
20404510:	5f02                	lw	t5,32(sp)
20404512:	4ff2                	lw	t6,28(sp)
20404514:	6125                	addi	sp,sp,96
20404516:	30200073          	mret

2040451a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
2040451a:	711d                	addi	sp,sp,-96
2040451c:	ce86                	sw	ra,92(sp)
2040451e:	cc96                	sw	t0,88(sp)
20404520:	ca9a                	sw	t1,84(sp)
20404522:	c89e                	sw	t2,80(sp)
20404524:	c6a2                	sw	s0,76(sp)
20404526:	c4aa                	sw	a0,72(sp)
20404528:	c2ae                	sw	a1,68(sp)
2040452a:	c0b2                	sw	a2,64(sp)
2040452c:	de36                	sw	a3,60(sp)
2040452e:	dc3a                	sw	a4,56(sp)
20404530:	da3e                	sw	a5,52(sp)
20404532:	d842                	sw	a6,48(sp)
20404534:	d646                	sw	a7,44(sp)
20404536:	d472                	sw	t3,40(sp)
20404538:	d276                	sw	t4,36(sp)
2040453a:	d07a                	sw	t5,32(sp)
2040453c:	ce7e                	sw	t6,28(sp)
2040453e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404540:	97bff0ef          	jal	ra,20403eba <__metal_myhart_id>
20404544:	872a                	mv	a4,a0
20404546:	070a                	slli	a4,a4,0x2
20404548:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040454c:	97ba                	add	a5,a5,a4
2040454e:	439c                	lw	a5,0(a5)
20404550:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20404554:	fac42783          	lw	a5,-84(s0)
20404558:	c78d                	beqz	a5,20404582 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040455a:	fac42503          	lw	a0,-84(s0)
2040455e:	907ff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
20404562:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20404566:	fa842783          	lw	a5,-88(s0)
2040456a:	2487a783          	lw	a5,584(a5)
2040456e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20404572:	fa842783          	lw	a5,-88(s0)
20404576:	2407a783          	lw	a5,576(a5)
2040457a:	fa442583          	lw	a1,-92(s0)
2040457e:	4549                	li	a0,18
20404580:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20404582:	0001                	nop
20404584:	40f6                	lw	ra,92(sp)
20404586:	42e6                	lw	t0,88(sp)
20404588:	4356                	lw	t1,84(sp)
2040458a:	43c6                	lw	t2,80(sp)
2040458c:	4436                	lw	s0,76(sp)
2040458e:	4526                	lw	a0,72(sp)
20404590:	4596                	lw	a1,68(sp)
20404592:	4606                	lw	a2,64(sp)
20404594:	56f2                	lw	a3,60(sp)
20404596:	5762                	lw	a4,56(sp)
20404598:	57d2                	lw	a5,52(sp)
2040459a:	5842                	lw	a6,48(sp)
2040459c:	58b2                	lw	a7,44(sp)
2040459e:	5e22                	lw	t3,40(sp)
204045a0:	5e92                	lw	t4,36(sp)
204045a2:	5f02                	lw	t5,32(sp)
204045a4:	4ff2                	lw	t6,28(sp)
204045a6:	6125                	addi	sp,sp,96
204045a8:	30200073          	mret

204045ac <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
204045ac:	711d                	addi	sp,sp,-96
204045ae:	ce86                	sw	ra,92(sp)
204045b0:	cc96                	sw	t0,88(sp)
204045b2:	ca9a                	sw	t1,84(sp)
204045b4:	c89e                	sw	t2,80(sp)
204045b6:	c6a2                	sw	s0,76(sp)
204045b8:	c4aa                	sw	a0,72(sp)
204045ba:	c2ae                	sw	a1,68(sp)
204045bc:	c0b2                	sw	a2,64(sp)
204045be:	de36                	sw	a3,60(sp)
204045c0:	dc3a                	sw	a4,56(sp)
204045c2:	da3e                	sw	a5,52(sp)
204045c4:	d842                	sw	a6,48(sp)
204045c6:	d646                	sw	a7,44(sp)
204045c8:	d472                	sw	t3,40(sp)
204045ca:	d276                	sw	t4,36(sp)
204045cc:	d07a                	sw	t5,32(sp)
204045ce:	ce7e                	sw	t6,28(sp)
204045d0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204045d2:	8e9ff0ef          	jal	ra,20403eba <__metal_myhart_id>
204045d6:	872a                	mv	a4,a0
204045d8:	070a                	slli	a4,a4,0x2
204045da:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204045de:	97ba                	add	a5,a5,a4
204045e0:	439c                	lw	a5,0(a5)
204045e2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
204045e6:	fac42783          	lw	a5,-84(s0)
204045ea:	c78d                	beqz	a5,20404614 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204045ec:	fac42503          	lw	a0,-84(s0)
204045f0:	875ff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
204045f4:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
204045f8:	fa842783          	lw	a5,-88(s0)
204045fc:	2607a783          	lw	a5,608(a5)
20404600:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20404604:	fa842783          	lw	a5,-88(s0)
20404608:	2587a783          	lw	a5,600(a5)
2040460c:	fa442583          	lw	a1,-92(s0)
20404610:	454d                	li	a0,19
20404612:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20404614:	0001                	nop
20404616:	40f6                	lw	ra,92(sp)
20404618:	42e6                	lw	t0,88(sp)
2040461a:	4356                	lw	t1,84(sp)
2040461c:	43c6                	lw	t2,80(sp)
2040461e:	4436                	lw	s0,76(sp)
20404620:	4526                	lw	a0,72(sp)
20404622:	4596                	lw	a1,68(sp)
20404624:	4606                	lw	a2,64(sp)
20404626:	56f2                	lw	a3,60(sp)
20404628:	5762                	lw	a4,56(sp)
2040462a:	57d2                	lw	a5,52(sp)
2040462c:	5842                	lw	a6,48(sp)
2040462e:	58b2                	lw	a7,44(sp)
20404630:	5e22                	lw	t3,40(sp)
20404632:	5e92                	lw	t4,36(sp)
20404634:	5f02                	lw	t5,32(sp)
20404636:	4ff2                	lw	t6,28(sp)
20404638:	6125                	addi	sp,sp,96
2040463a:	30200073          	mret

2040463e <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
2040463e:	711d                	addi	sp,sp,-96
20404640:	ce86                	sw	ra,92(sp)
20404642:	cc96                	sw	t0,88(sp)
20404644:	ca9a                	sw	t1,84(sp)
20404646:	c89e                	sw	t2,80(sp)
20404648:	c6a2                	sw	s0,76(sp)
2040464a:	c4aa                	sw	a0,72(sp)
2040464c:	c2ae                	sw	a1,68(sp)
2040464e:	c0b2                	sw	a2,64(sp)
20404650:	de36                	sw	a3,60(sp)
20404652:	dc3a                	sw	a4,56(sp)
20404654:	da3e                	sw	a5,52(sp)
20404656:	d842                	sw	a6,48(sp)
20404658:	d646                	sw	a7,44(sp)
2040465a:	d472                	sw	t3,40(sp)
2040465c:	d276                	sw	t4,36(sp)
2040465e:	d07a                	sw	t5,32(sp)
20404660:	ce7e                	sw	t6,28(sp)
20404662:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404664:	857ff0ef          	jal	ra,20403eba <__metal_myhart_id>
20404668:	872a                	mv	a4,a0
2040466a:	070a                	slli	a4,a4,0x2
2040466c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20404670:	97ba                	add	a5,a5,a4
20404672:	439c                	lw	a5,0(a5)
20404674:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20404678:	fac42783          	lw	a5,-84(s0)
2040467c:	c78d                	beqz	a5,204046a6 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040467e:	fac42503          	lw	a0,-84(s0)
20404682:	fe2ff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
20404686:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
2040468a:	fa842783          	lw	a5,-88(s0)
2040468e:	2787a783          	lw	a5,632(a5)
20404692:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20404696:	fa842783          	lw	a5,-88(s0)
2040469a:	2707a783          	lw	a5,624(a5)
2040469e:	fa442583          	lw	a1,-92(s0)
204046a2:	4551                	li	a0,20
204046a4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
204046a6:	0001                	nop
204046a8:	40f6                	lw	ra,92(sp)
204046aa:	42e6                	lw	t0,88(sp)
204046ac:	4356                	lw	t1,84(sp)
204046ae:	43c6                	lw	t2,80(sp)
204046b0:	4436                	lw	s0,76(sp)
204046b2:	4526                	lw	a0,72(sp)
204046b4:	4596                	lw	a1,68(sp)
204046b6:	4606                	lw	a2,64(sp)
204046b8:	56f2                	lw	a3,60(sp)
204046ba:	5762                	lw	a4,56(sp)
204046bc:	57d2                	lw	a5,52(sp)
204046be:	5842                	lw	a6,48(sp)
204046c0:	58b2                	lw	a7,44(sp)
204046c2:	5e22                	lw	t3,40(sp)
204046c4:	5e92                	lw	t4,36(sp)
204046c6:	5f02                	lw	t5,32(sp)
204046c8:	4ff2                	lw	t6,28(sp)
204046ca:	6125                	addi	sp,sp,96
204046cc:	30200073          	mret

204046d0 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
204046d0:	711d                	addi	sp,sp,-96
204046d2:	ce86                	sw	ra,92(sp)
204046d4:	cc96                	sw	t0,88(sp)
204046d6:	ca9a                	sw	t1,84(sp)
204046d8:	c89e                	sw	t2,80(sp)
204046da:	c6a2                	sw	s0,76(sp)
204046dc:	c4aa                	sw	a0,72(sp)
204046de:	c2ae                	sw	a1,68(sp)
204046e0:	c0b2                	sw	a2,64(sp)
204046e2:	de36                	sw	a3,60(sp)
204046e4:	dc3a                	sw	a4,56(sp)
204046e6:	da3e                	sw	a5,52(sp)
204046e8:	d842                	sw	a6,48(sp)
204046ea:	d646                	sw	a7,44(sp)
204046ec:	d472                	sw	t3,40(sp)
204046ee:	d276                	sw	t4,36(sp)
204046f0:	d07a                	sw	t5,32(sp)
204046f2:	ce7e                	sw	t6,28(sp)
204046f4:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204046f6:	fc4ff0ef          	jal	ra,20403eba <__metal_myhart_id>
204046fa:	872a                	mv	a4,a0
204046fc:	070a                	slli	a4,a4,0x2
204046fe:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20404702:	97ba                	add	a5,a5,a4
20404704:	439c                	lw	a5,0(a5)
20404706:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
2040470a:	fac42783          	lw	a5,-84(s0)
2040470e:	c78d                	beqz	a5,20404738 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404710:	fac42503          	lw	a0,-84(s0)
20404714:	f50ff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
20404718:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
2040471c:	fa842783          	lw	a5,-88(s0)
20404720:	2907a783          	lw	a5,656(a5)
20404724:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20404728:	fa842783          	lw	a5,-88(s0)
2040472c:	2887a783          	lw	a5,648(a5)
20404730:	fa442583          	lw	a1,-92(s0)
20404734:	4555                	li	a0,21
20404736:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20404738:	0001                	nop
2040473a:	40f6                	lw	ra,92(sp)
2040473c:	42e6                	lw	t0,88(sp)
2040473e:	4356                	lw	t1,84(sp)
20404740:	43c6                	lw	t2,80(sp)
20404742:	4436                	lw	s0,76(sp)
20404744:	4526                	lw	a0,72(sp)
20404746:	4596                	lw	a1,68(sp)
20404748:	4606                	lw	a2,64(sp)
2040474a:	56f2                	lw	a3,60(sp)
2040474c:	5762                	lw	a4,56(sp)
2040474e:	57d2                	lw	a5,52(sp)
20404750:	5842                	lw	a6,48(sp)
20404752:	58b2                	lw	a7,44(sp)
20404754:	5e22                	lw	t3,40(sp)
20404756:	5e92                	lw	t4,36(sp)
20404758:	5f02                	lw	t5,32(sp)
2040475a:	4ff2                	lw	t6,28(sp)
2040475c:	6125                	addi	sp,sp,96
2040475e:	30200073          	mret

20404762 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20404762:	711d                	addi	sp,sp,-96
20404764:	ce86                	sw	ra,92(sp)
20404766:	cc96                	sw	t0,88(sp)
20404768:	ca9a                	sw	t1,84(sp)
2040476a:	c89e                	sw	t2,80(sp)
2040476c:	c6a2                	sw	s0,76(sp)
2040476e:	c4aa                	sw	a0,72(sp)
20404770:	c2ae                	sw	a1,68(sp)
20404772:	c0b2                	sw	a2,64(sp)
20404774:	de36                	sw	a3,60(sp)
20404776:	dc3a                	sw	a4,56(sp)
20404778:	da3e                	sw	a5,52(sp)
2040477a:	d842                	sw	a6,48(sp)
2040477c:	d646                	sw	a7,44(sp)
2040477e:	d472                	sw	t3,40(sp)
20404780:	d276                	sw	t4,36(sp)
20404782:	d07a                	sw	t5,32(sp)
20404784:	ce7e                	sw	t6,28(sp)
20404786:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404788:	f32ff0ef          	jal	ra,20403eba <__metal_myhart_id>
2040478c:	872a                	mv	a4,a0
2040478e:	070a                	slli	a4,a4,0x2
20404790:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20404794:	97ba                	add	a5,a5,a4
20404796:	439c                	lw	a5,0(a5)
20404798:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
2040479c:	fac42783          	lw	a5,-84(s0)
204047a0:	c78d                	beqz	a5,204047ca <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204047a2:	fac42503          	lw	a0,-84(s0)
204047a6:	ebeff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
204047aa:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
204047ae:	fa842783          	lw	a5,-88(s0)
204047b2:	2a87a783          	lw	a5,680(a5)
204047b6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
204047ba:	fa842783          	lw	a5,-88(s0)
204047be:	2a07a783          	lw	a5,672(a5)
204047c2:	fa442583          	lw	a1,-92(s0)
204047c6:	4559                	li	a0,22
204047c8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
204047ca:	0001                	nop
204047cc:	40f6                	lw	ra,92(sp)
204047ce:	42e6                	lw	t0,88(sp)
204047d0:	4356                	lw	t1,84(sp)
204047d2:	43c6                	lw	t2,80(sp)
204047d4:	4436                	lw	s0,76(sp)
204047d6:	4526                	lw	a0,72(sp)
204047d8:	4596                	lw	a1,68(sp)
204047da:	4606                	lw	a2,64(sp)
204047dc:	56f2                	lw	a3,60(sp)
204047de:	5762                	lw	a4,56(sp)
204047e0:	57d2                	lw	a5,52(sp)
204047e2:	5842                	lw	a6,48(sp)
204047e4:	58b2                	lw	a7,44(sp)
204047e6:	5e22                	lw	t3,40(sp)
204047e8:	5e92                	lw	t4,36(sp)
204047ea:	5f02                	lw	t5,32(sp)
204047ec:	4ff2                	lw	t6,28(sp)
204047ee:	6125                	addi	sp,sp,96
204047f0:	30200073          	mret

204047f4 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
204047f4:	711d                	addi	sp,sp,-96
204047f6:	ce86                	sw	ra,92(sp)
204047f8:	cc96                	sw	t0,88(sp)
204047fa:	ca9a                	sw	t1,84(sp)
204047fc:	c89e                	sw	t2,80(sp)
204047fe:	c6a2                	sw	s0,76(sp)
20404800:	c4aa                	sw	a0,72(sp)
20404802:	c2ae                	sw	a1,68(sp)
20404804:	c0b2                	sw	a2,64(sp)
20404806:	de36                	sw	a3,60(sp)
20404808:	dc3a                	sw	a4,56(sp)
2040480a:	da3e                	sw	a5,52(sp)
2040480c:	d842                	sw	a6,48(sp)
2040480e:	d646                	sw	a7,44(sp)
20404810:	d472                	sw	t3,40(sp)
20404812:	d276                	sw	t4,36(sp)
20404814:	d07a                	sw	t5,32(sp)
20404816:	ce7e                	sw	t6,28(sp)
20404818:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040481a:	ea0ff0ef          	jal	ra,20403eba <__metal_myhart_id>
2040481e:	872a                	mv	a4,a0
20404820:	070a                	slli	a4,a4,0x2
20404822:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20404826:	97ba                	add	a5,a5,a4
20404828:	439c                	lw	a5,0(a5)
2040482a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
2040482e:	fac42783          	lw	a5,-84(s0)
20404832:	c78d                	beqz	a5,2040485c <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404834:	fac42503          	lw	a0,-84(s0)
20404838:	e2cff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
2040483c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20404840:	fa842783          	lw	a5,-88(s0)
20404844:	2c07a783          	lw	a5,704(a5)
20404848:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
2040484c:	fa842783          	lw	a5,-88(s0)
20404850:	2b87a783          	lw	a5,696(a5)
20404854:	fa442583          	lw	a1,-92(s0)
20404858:	455d                	li	a0,23
2040485a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
2040485c:	0001                	nop
2040485e:	40f6                	lw	ra,92(sp)
20404860:	42e6                	lw	t0,88(sp)
20404862:	4356                	lw	t1,84(sp)
20404864:	43c6                	lw	t2,80(sp)
20404866:	4436                	lw	s0,76(sp)
20404868:	4526                	lw	a0,72(sp)
2040486a:	4596                	lw	a1,68(sp)
2040486c:	4606                	lw	a2,64(sp)
2040486e:	56f2                	lw	a3,60(sp)
20404870:	5762                	lw	a4,56(sp)
20404872:	57d2                	lw	a5,52(sp)
20404874:	5842                	lw	a6,48(sp)
20404876:	58b2                	lw	a7,44(sp)
20404878:	5e22                	lw	t3,40(sp)
2040487a:	5e92                	lw	t4,36(sp)
2040487c:	5f02                	lw	t5,32(sp)
2040487e:	4ff2                	lw	t6,28(sp)
20404880:	6125                	addi	sp,sp,96
20404882:	30200073          	mret

20404886 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20404886:	711d                	addi	sp,sp,-96
20404888:	ce86                	sw	ra,92(sp)
2040488a:	cc96                	sw	t0,88(sp)
2040488c:	ca9a                	sw	t1,84(sp)
2040488e:	c89e                	sw	t2,80(sp)
20404890:	c6a2                	sw	s0,76(sp)
20404892:	c4aa                	sw	a0,72(sp)
20404894:	c2ae                	sw	a1,68(sp)
20404896:	c0b2                	sw	a2,64(sp)
20404898:	de36                	sw	a3,60(sp)
2040489a:	dc3a                	sw	a4,56(sp)
2040489c:	da3e                	sw	a5,52(sp)
2040489e:	d842                	sw	a6,48(sp)
204048a0:	d646                	sw	a7,44(sp)
204048a2:	d472                	sw	t3,40(sp)
204048a4:	d276                	sw	t4,36(sp)
204048a6:	d07a                	sw	t5,32(sp)
204048a8:	ce7e                	sw	t6,28(sp)
204048aa:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204048ac:	e0eff0ef          	jal	ra,20403eba <__metal_myhart_id>
204048b0:	872a                	mv	a4,a0
204048b2:	070a                	slli	a4,a4,0x2
204048b4:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204048b8:	97ba                	add	a5,a5,a4
204048ba:	439c                	lw	a5,0(a5)
204048bc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
204048c0:	fac42783          	lw	a5,-84(s0)
204048c4:	c78d                	beqz	a5,204048ee <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204048c6:	fac42503          	lw	a0,-84(s0)
204048ca:	d9aff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
204048ce:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
204048d2:	fa842783          	lw	a5,-88(s0)
204048d6:	2d87a783          	lw	a5,728(a5)
204048da:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
204048de:	fa842783          	lw	a5,-88(s0)
204048e2:	2d07a783          	lw	a5,720(a5)
204048e6:	fa442583          	lw	a1,-92(s0)
204048ea:	4561                	li	a0,24
204048ec:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
204048ee:	0001                	nop
204048f0:	40f6                	lw	ra,92(sp)
204048f2:	42e6                	lw	t0,88(sp)
204048f4:	4356                	lw	t1,84(sp)
204048f6:	43c6                	lw	t2,80(sp)
204048f8:	4436                	lw	s0,76(sp)
204048fa:	4526                	lw	a0,72(sp)
204048fc:	4596                	lw	a1,68(sp)
204048fe:	4606                	lw	a2,64(sp)
20404900:	56f2                	lw	a3,60(sp)
20404902:	5762                	lw	a4,56(sp)
20404904:	57d2                	lw	a5,52(sp)
20404906:	5842                	lw	a6,48(sp)
20404908:	58b2                	lw	a7,44(sp)
2040490a:	5e22                	lw	t3,40(sp)
2040490c:	5e92                	lw	t4,36(sp)
2040490e:	5f02                	lw	t5,32(sp)
20404910:	4ff2                	lw	t6,28(sp)
20404912:	6125                	addi	sp,sp,96
20404914:	30200073          	mret

20404918 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20404918:	711d                	addi	sp,sp,-96
2040491a:	ce86                	sw	ra,92(sp)
2040491c:	cc96                	sw	t0,88(sp)
2040491e:	ca9a                	sw	t1,84(sp)
20404920:	c89e                	sw	t2,80(sp)
20404922:	c6a2                	sw	s0,76(sp)
20404924:	c4aa                	sw	a0,72(sp)
20404926:	c2ae                	sw	a1,68(sp)
20404928:	c0b2                	sw	a2,64(sp)
2040492a:	de36                	sw	a3,60(sp)
2040492c:	dc3a                	sw	a4,56(sp)
2040492e:	da3e                	sw	a5,52(sp)
20404930:	d842                	sw	a6,48(sp)
20404932:	d646                	sw	a7,44(sp)
20404934:	d472                	sw	t3,40(sp)
20404936:	d276                	sw	t4,36(sp)
20404938:	d07a                	sw	t5,32(sp)
2040493a:	ce7e                	sw	t6,28(sp)
2040493c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040493e:	d7cff0ef          	jal	ra,20403eba <__metal_myhart_id>
20404942:	872a                	mv	a4,a0
20404944:	070a                	slli	a4,a4,0x2
20404946:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040494a:	97ba                	add	a5,a5,a4
2040494c:	439c                	lw	a5,0(a5)
2040494e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20404952:	fac42783          	lw	a5,-84(s0)
20404956:	c78d                	beqz	a5,20404980 <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404958:	fac42503          	lw	a0,-84(s0)
2040495c:	d08ff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
20404960:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20404964:	fa842783          	lw	a5,-88(s0)
20404968:	2f07a783          	lw	a5,752(a5)
2040496c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20404970:	fa842783          	lw	a5,-88(s0)
20404974:	2e87a783          	lw	a5,744(a5)
20404978:	fa442583          	lw	a1,-92(s0)
2040497c:	4565                	li	a0,25
2040497e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20404980:	0001                	nop
20404982:	40f6                	lw	ra,92(sp)
20404984:	42e6                	lw	t0,88(sp)
20404986:	4356                	lw	t1,84(sp)
20404988:	43c6                	lw	t2,80(sp)
2040498a:	4436                	lw	s0,76(sp)
2040498c:	4526                	lw	a0,72(sp)
2040498e:	4596                	lw	a1,68(sp)
20404990:	4606                	lw	a2,64(sp)
20404992:	56f2                	lw	a3,60(sp)
20404994:	5762                	lw	a4,56(sp)
20404996:	57d2                	lw	a5,52(sp)
20404998:	5842                	lw	a6,48(sp)
2040499a:	58b2                	lw	a7,44(sp)
2040499c:	5e22                	lw	t3,40(sp)
2040499e:	5e92                	lw	t4,36(sp)
204049a0:	5f02                	lw	t5,32(sp)
204049a2:	4ff2                	lw	t6,28(sp)
204049a4:	6125                	addi	sp,sp,96
204049a6:	30200073          	mret

204049aa <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
204049aa:	711d                	addi	sp,sp,-96
204049ac:	ce86                	sw	ra,92(sp)
204049ae:	cc96                	sw	t0,88(sp)
204049b0:	ca9a                	sw	t1,84(sp)
204049b2:	c89e                	sw	t2,80(sp)
204049b4:	c6a2                	sw	s0,76(sp)
204049b6:	c4aa                	sw	a0,72(sp)
204049b8:	c2ae                	sw	a1,68(sp)
204049ba:	c0b2                	sw	a2,64(sp)
204049bc:	de36                	sw	a3,60(sp)
204049be:	dc3a                	sw	a4,56(sp)
204049c0:	da3e                	sw	a5,52(sp)
204049c2:	d842                	sw	a6,48(sp)
204049c4:	d646                	sw	a7,44(sp)
204049c6:	d472                	sw	t3,40(sp)
204049c8:	d276                	sw	t4,36(sp)
204049ca:	d07a                	sw	t5,32(sp)
204049cc:	ce7e                	sw	t6,28(sp)
204049ce:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204049d0:	ceaff0ef          	jal	ra,20403eba <__metal_myhart_id>
204049d4:	872a                	mv	a4,a0
204049d6:	070a                	slli	a4,a4,0x2
204049d8:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204049dc:	97ba                	add	a5,a5,a4
204049de:	439c                	lw	a5,0(a5)
204049e0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
204049e4:	fac42783          	lw	a5,-84(s0)
204049e8:	c78d                	beqz	a5,20404a12 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204049ea:	fac42503          	lw	a0,-84(s0)
204049ee:	c76ff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
204049f2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
204049f6:	fa842783          	lw	a5,-88(s0)
204049fa:	3087a783          	lw	a5,776(a5)
204049fe:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20404a02:	fa842783          	lw	a5,-88(s0)
20404a06:	3007a783          	lw	a5,768(a5)
20404a0a:	fa442583          	lw	a1,-92(s0)
20404a0e:	4569                	li	a0,26
20404a10:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20404a12:	0001                	nop
20404a14:	40f6                	lw	ra,92(sp)
20404a16:	42e6                	lw	t0,88(sp)
20404a18:	4356                	lw	t1,84(sp)
20404a1a:	43c6                	lw	t2,80(sp)
20404a1c:	4436                	lw	s0,76(sp)
20404a1e:	4526                	lw	a0,72(sp)
20404a20:	4596                	lw	a1,68(sp)
20404a22:	4606                	lw	a2,64(sp)
20404a24:	56f2                	lw	a3,60(sp)
20404a26:	5762                	lw	a4,56(sp)
20404a28:	57d2                	lw	a5,52(sp)
20404a2a:	5842                	lw	a6,48(sp)
20404a2c:	58b2                	lw	a7,44(sp)
20404a2e:	5e22                	lw	t3,40(sp)
20404a30:	5e92                	lw	t4,36(sp)
20404a32:	5f02                	lw	t5,32(sp)
20404a34:	4ff2                	lw	t6,28(sp)
20404a36:	6125                	addi	sp,sp,96
20404a38:	30200073          	mret

20404a3c <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
20404a3c:	711d                	addi	sp,sp,-96
20404a3e:	ce86                	sw	ra,92(sp)
20404a40:	cc96                	sw	t0,88(sp)
20404a42:	ca9a                	sw	t1,84(sp)
20404a44:	c89e                	sw	t2,80(sp)
20404a46:	c6a2                	sw	s0,76(sp)
20404a48:	c4aa                	sw	a0,72(sp)
20404a4a:	c2ae                	sw	a1,68(sp)
20404a4c:	c0b2                	sw	a2,64(sp)
20404a4e:	de36                	sw	a3,60(sp)
20404a50:	dc3a                	sw	a4,56(sp)
20404a52:	da3e                	sw	a5,52(sp)
20404a54:	d842                	sw	a6,48(sp)
20404a56:	d646                	sw	a7,44(sp)
20404a58:	d472                	sw	t3,40(sp)
20404a5a:	d276                	sw	t4,36(sp)
20404a5c:	d07a                	sw	t5,32(sp)
20404a5e:	ce7e                	sw	t6,28(sp)
20404a60:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404a62:	c58ff0ef          	jal	ra,20403eba <__metal_myhart_id>
20404a66:	872a                	mv	a4,a0
20404a68:	070a                	slli	a4,a4,0x2
20404a6a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20404a6e:	97ba                	add	a5,a5,a4
20404a70:	439c                	lw	a5,0(a5)
20404a72:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20404a76:	fac42783          	lw	a5,-84(s0)
20404a7a:	c78d                	beqz	a5,20404aa4 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404a7c:	fac42503          	lw	a0,-84(s0)
20404a80:	be4ff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
20404a84:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20404a88:	fa842783          	lw	a5,-88(s0)
20404a8c:	3207a783          	lw	a5,800(a5)
20404a90:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20404a94:	fa842783          	lw	a5,-88(s0)
20404a98:	3187a783          	lw	a5,792(a5)
20404a9c:	fa442583          	lw	a1,-92(s0)
20404aa0:	456d                	li	a0,27
20404aa2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20404aa4:	0001                	nop
20404aa6:	40f6                	lw	ra,92(sp)
20404aa8:	42e6                	lw	t0,88(sp)
20404aaa:	4356                	lw	t1,84(sp)
20404aac:	43c6                	lw	t2,80(sp)
20404aae:	4436                	lw	s0,76(sp)
20404ab0:	4526                	lw	a0,72(sp)
20404ab2:	4596                	lw	a1,68(sp)
20404ab4:	4606                	lw	a2,64(sp)
20404ab6:	56f2                	lw	a3,60(sp)
20404ab8:	5762                	lw	a4,56(sp)
20404aba:	57d2                	lw	a5,52(sp)
20404abc:	5842                	lw	a6,48(sp)
20404abe:	58b2                	lw	a7,44(sp)
20404ac0:	5e22                	lw	t3,40(sp)
20404ac2:	5e92                	lw	t4,36(sp)
20404ac4:	5f02                	lw	t5,32(sp)
20404ac6:	4ff2                	lw	t6,28(sp)
20404ac8:	6125                	addi	sp,sp,96
20404aca:	30200073          	mret

20404ace <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
20404ace:	711d                	addi	sp,sp,-96
20404ad0:	ce86                	sw	ra,92(sp)
20404ad2:	cc96                	sw	t0,88(sp)
20404ad4:	ca9a                	sw	t1,84(sp)
20404ad6:	c89e                	sw	t2,80(sp)
20404ad8:	c6a2                	sw	s0,76(sp)
20404ada:	c4aa                	sw	a0,72(sp)
20404adc:	c2ae                	sw	a1,68(sp)
20404ade:	c0b2                	sw	a2,64(sp)
20404ae0:	de36                	sw	a3,60(sp)
20404ae2:	dc3a                	sw	a4,56(sp)
20404ae4:	da3e                	sw	a5,52(sp)
20404ae6:	d842                	sw	a6,48(sp)
20404ae8:	d646                	sw	a7,44(sp)
20404aea:	d472                	sw	t3,40(sp)
20404aec:	d276                	sw	t4,36(sp)
20404aee:	d07a                	sw	t5,32(sp)
20404af0:	ce7e                	sw	t6,28(sp)
20404af2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404af4:	bc6ff0ef          	jal	ra,20403eba <__metal_myhart_id>
20404af8:	872a                	mv	a4,a0
20404afa:	070a                	slli	a4,a4,0x2
20404afc:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20404b00:	97ba                	add	a5,a5,a4
20404b02:	439c                	lw	a5,0(a5)
20404b04:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20404b08:	fac42783          	lw	a5,-84(s0)
20404b0c:	c78d                	beqz	a5,20404b36 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404b0e:	fac42503          	lw	a0,-84(s0)
20404b12:	b52ff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
20404b16:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20404b1a:	fa842783          	lw	a5,-88(s0)
20404b1e:	3387a783          	lw	a5,824(a5)
20404b22:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20404b26:	fa842783          	lw	a5,-88(s0)
20404b2a:	3307a783          	lw	a5,816(a5)
20404b2e:	fa442583          	lw	a1,-92(s0)
20404b32:	4571                	li	a0,28
20404b34:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20404b36:	0001                	nop
20404b38:	40f6                	lw	ra,92(sp)
20404b3a:	42e6                	lw	t0,88(sp)
20404b3c:	4356                	lw	t1,84(sp)
20404b3e:	43c6                	lw	t2,80(sp)
20404b40:	4436                	lw	s0,76(sp)
20404b42:	4526                	lw	a0,72(sp)
20404b44:	4596                	lw	a1,68(sp)
20404b46:	4606                	lw	a2,64(sp)
20404b48:	56f2                	lw	a3,60(sp)
20404b4a:	5762                	lw	a4,56(sp)
20404b4c:	57d2                	lw	a5,52(sp)
20404b4e:	5842                	lw	a6,48(sp)
20404b50:	58b2                	lw	a7,44(sp)
20404b52:	5e22                	lw	t3,40(sp)
20404b54:	5e92                	lw	t4,36(sp)
20404b56:	5f02                	lw	t5,32(sp)
20404b58:	4ff2                	lw	t6,28(sp)
20404b5a:	6125                	addi	sp,sp,96
20404b5c:	30200073          	mret

20404b60 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20404b60:	711d                	addi	sp,sp,-96
20404b62:	ce86                	sw	ra,92(sp)
20404b64:	cc96                	sw	t0,88(sp)
20404b66:	ca9a                	sw	t1,84(sp)
20404b68:	c89e                	sw	t2,80(sp)
20404b6a:	c6a2                	sw	s0,76(sp)
20404b6c:	c4aa                	sw	a0,72(sp)
20404b6e:	c2ae                	sw	a1,68(sp)
20404b70:	c0b2                	sw	a2,64(sp)
20404b72:	de36                	sw	a3,60(sp)
20404b74:	dc3a                	sw	a4,56(sp)
20404b76:	da3e                	sw	a5,52(sp)
20404b78:	d842                	sw	a6,48(sp)
20404b7a:	d646                	sw	a7,44(sp)
20404b7c:	d472                	sw	t3,40(sp)
20404b7e:	d276                	sw	t4,36(sp)
20404b80:	d07a                	sw	t5,32(sp)
20404b82:	ce7e                	sw	t6,28(sp)
20404b84:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404b86:	b34ff0ef          	jal	ra,20403eba <__metal_myhart_id>
20404b8a:	872a                	mv	a4,a0
20404b8c:	070a                	slli	a4,a4,0x2
20404b8e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20404b92:	97ba                	add	a5,a5,a4
20404b94:	439c                	lw	a5,0(a5)
20404b96:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20404b9a:	fac42783          	lw	a5,-84(s0)
20404b9e:	c78d                	beqz	a5,20404bc8 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404ba0:	fac42503          	lw	a0,-84(s0)
20404ba4:	ac0ff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
20404ba8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
20404bac:	fa842783          	lw	a5,-88(s0)
20404bb0:	3507a783          	lw	a5,848(a5)
20404bb4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20404bb8:	fa842783          	lw	a5,-88(s0)
20404bbc:	3487a783          	lw	a5,840(a5)
20404bc0:	fa442583          	lw	a1,-92(s0)
20404bc4:	4575                	li	a0,29
20404bc6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20404bc8:	0001                	nop
20404bca:	40f6                	lw	ra,92(sp)
20404bcc:	42e6                	lw	t0,88(sp)
20404bce:	4356                	lw	t1,84(sp)
20404bd0:	43c6                	lw	t2,80(sp)
20404bd2:	4436                	lw	s0,76(sp)
20404bd4:	4526                	lw	a0,72(sp)
20404bd6:	4596                	lw	a1,68(sp)
20404bd8:	4606                	lw	a2,64(sp)
20404bda:	56f2                	lw	a3,60(sp)
20404bdc:	5762                	lw	a4,56(sp)
20404bde:	57d2                	lw	a5,52(sp)
20404be0:	5842                	lw	a6,48(sp)
20404be2:	58b2                	lw	a7,44(sp)
20404be4:	5e22                	lw	t3,40(sp)
20404be6:	5e92                	lw	t4,36(sp)
20404be8:	5f02                	lw	t5,32(sp)
20404bea:	4ff2                	lw	t6,28(sp)
20404bec:	6125                	addi	sp,sp,96
20404bee:	30200073          	mret

20404bf2 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20404bf2:	711d                	addi	sp,sp,-96
20404bf4:	ce86                	sw	ra,92(sp)
20404bf6:	cc96                	sw	t0,88(sp)
20404bf8:	ca9a                	sw	t1,84(sp)
20404bfa:	c89e                	sw	t2,80(sp)
20404bfc:	c6a2                	sw	s0,76(sp)
20404bfe:	c4aa                	sw	a0,72(sp)
20404c00:	c2ae                	sw	a1,68(sp)
20404c02:	c0b2                	sw	a2,64(sp)
20404c04:	de36                	sw	a3,60(sp)
20404c06:	dc3a                	sw	a4,56(sp)
20404c08:	da3e                	sw	a5,52(sp)
20404c0a:	d842                	sw	a6,48(sp)
20404c0c:	d646                	sw	a7,44(sp)
20404c0e:	d472                	sw	t3,40(sp)
20404c10:	d276                	sw	t4,36(sp)
20404c12:	d07a                	sw	t5,32(sp)
20404c14:	ce7e                	sw	t6,28(sp)
20404c16:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404c18:	aa2ff0ef          	jal	ra,20403eba <__metal_myhart_id>
20404c1c:	872a                	mv	a4,a0
20404c1e:	070a                	slli	a4,a4,0x2
20404c20:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20404c24:	97ba                	add	a5,a5,a4
20404c26:	439c                	lw	a5,0(a5)
20404c28:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
20404c2c:	fac42783          	lw	a5,-84(s0)
20404c30:	c78d                	beqz	a5,20404c5a <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404c32:	fac42503          	lw	a0,-84(s0)
20404c36:	a2eff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
20404c3a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
20404c3e:	fa842783          	lw	a5,-88(s0)
20404c42:	3687a783          	lw	a5,872(a5)
20404c46:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20404c4a:	fa842783          	lw	a5,-88(s0)
20404c4e:	3607a783          	lw	a5,864(a5)
20404c52:	fa442583          	lw	a1,-92(s0)
20404c56:	4579                	li	a0,30
20404c58:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20404c5a:	0001                	nop
20404c5c:	40f6                	lw	ra,92(sp)
20404c5e:	42e6                	lw	t0,88(sp)
20404c60:	4356                	lw	t1,84(sp)
20404c62:	43c6                	lw	t2,80(sp)
20404c64:	4436                	lw	s0,76(sp)
20404c66:	4526                	lw	a0,72(sp)
20404c68:	4596                	lw	a1,68(sp)
20404c6a:	4606                	lw	a2,64(sp)
20404c6c:	56f2                	lw	a3,60(sp)
20404c6e:	5762                	lw	a4,56(sp)
20404c70:	57d2                	lw	a5,52(sp)
20404c72:	5842                	lw	a6,48(sp)
20404c74:	58b2                	lw	a7,44(sp)
20404c76:	5e22                	lw	t3,40(sp)
20404c78:	5e92                	lw	t4,36(sp)
20404c7a:	5f02                	lw	t5,32(sp)
20404c7c:	4ff2                	lw	t6,28(sp)
20404c7e:	6125                	addi	sp,sp,96
20404c80:	30200073          	mret

20404c84 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20404c84:	711d                	addi	sp,sp,-96
20404c86:	ce86                	sw	ra,92(sp)
20404c88:	cc96                	sw	t0,88(sp)
20404c8a:	ca9a                	sw	t1,84(sp)
20404c8c:	c89e                	sw	t2,80(sp)
20404c8e:	c6a2                	sw	s0,76(sp)
20404c90:	c4aa                	sw	a0,72(sp)
20404c92:	c2ae                	sw	a1,68(sp)
20404c94:	c0b2                	sw	a2,64(sp)
20404c96:	de36                	sw	a3,60(sp)
20404c98:	dc3a                	sw	a4,56(sp)
20404c9a:	da3e                	sw	a5,52(sp)
20404c9c:	d842                	sw	a6,48(sp)
20404c9e:	d646                	sw	a7,44(sp)
20404ca0:	d472                	sw	t3,40(sp)
20404ca2:	d276                	sw	t4,36(sp)
20404ca4:	d07a                	sw	t5,32(sp)
20404ca6:	ce7e                	sw	t6,28(sp)
20404ca8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404caa:	a10ff0ef          	jal	ra,20403eba <__metal_myhart_id>
20404cae:	872a                	mv	a4,a0
20404cb0:	070a                	slli	a4,a4,0x2
20404cb2:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20404cb6:	97ba                	add	a5,a5,a4
20404cb8:	439c                	lw	a5,0(a5)
20404cba:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
20404cbe:	fac42783          	lw	a5,-84(s0)
20404cc2:	c78d                	beqz	a5,20404cec <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404cc4:	fac42503          	lw	a0,-84(s0)
20404cc8:	99cff0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
20404ccc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
20404cd0:	fa842783          	lw	a5,-88(s0)
20404cd4:	3807a783          	lw	a5,896(a5)
20404cd8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
20404cdc:	fa842783          	lw	a5,-88(s0)
20404ce0:	3787a783          	lw	a5,888(a5)
20404ce4:	fa442583          	lw	a1,-92(s0)
20404ce8:	457d                	li	a0,31
20404cea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
20404cec:	0001                	nop
20404cee:	40f6                	lw	ra,92(sp)
20404cf0:	42e6                	lw	t0,88(sp)
20404cf2:	4356                	lw	t1,84(sp)
20404cf4:	43c6                	lw	t2,80(sp)
20404cf6:	4436                	lw	s0,76(sp)
20404cf8:	4526                	lw	a0,72(sp)
20404cfa:	4596                	lw	a1,68(sp)
20404cfc:	4606                	lw	a2,64(sp)
20404cfe:	56f2                	lw	a3,60(sp)
20404d00:	5762                	lw	a4,56(sp)
20404d02:	57d2                	lw	a5,52(sp)
20404d04:	5842                	lw	a6,48(sp)
20404d06:	58b2                	lw	a7,44(sp)
20404d08:	5e22                	lw	t3,40(sp)
20404d0a:	5e92                	lw	t4,36(sp)
20404d0c:	5f02                	lw	t5,32(sp)
20404d0e:	4ff2                	lw	t6,28(sp)
20404d10:	6125                	addi	sp,sp,96
20404d12:	30200073          	mret

20404d16 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20404d16:	1101                	addi	sp,sp,-32
20404d18:	ce22                	sw	s0,28(sp)
20404d1a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20404d1c:	305027f3          	csrr	a5,mtvec
20404d20:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20404d24:	fec42783          	lw	a5,-20(s0)
20404d28:	03f7f793          	andi	a5,a5,63
20404d2c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
20404d30:	fec42703          	lw	a4,-20(s0)
20404d34:	4789                	li	a5,2
20404d36:	00f70d63          	beq	a4,a5,20404d50 <__metal_controller_interrupt_vector_mode+0x3a>
20404d3a:	fec42703          	lw	a4,-20(s0)
20404d3e:	478d                	li	a5,3
20404d40:	00f70a63          	beq	a4,a5,20404d54 <__metal_controller_interrupt_vector_mode+0x3e>
20404d44:	fec42703          	lw	a4,-20(s0)
20404d48:	4785                	li	a5,1
20404d4a:	00f70763          	beq	a4,a5,20404d58 <__metal_controller_interrupt_vector_mode+0x42>
20404d4e:	a039                	j	20404d5c <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
20404d50:	478d                	li	a5,3
20404d52:	a031                	j	20404d5e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20404d54:	4791                	li	a5,4
20404d56:	a021                	j	20404d5e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20404d58:	4785                	li	a5,1
20404d5a:	a011                	j	20404d5e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
20404d5c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
20404d5e:	853e                	mv	a0,a5
20404d60:	4472                	lw	s0,28(sp)
20404d62:	6105                	addi	sp,sp,32
20404d64:	8082                	ret

20404d66 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20404d66:	7179                	addi	sp,sp,-48
20404d68:	d622                	sw	s0,44(sp)
20404d6a:	1800                	addi	s0,sp,48
20404d6c:	fca42e23          	sw	a0,-36(s0)
20404d70:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20404d74:	305027f3          	csrr	a5,mtvec
20404d78:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
20404d7c:	fec42783          	lw	a5,-20(s0)
20404d80:	fc07f793          	andi	a5,a5,-64
20404d84:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20404d88:	fd842783          	lw	a5,-40(s0)
20404d8c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20404d90:	fdc42703          	lw	a4,-36(s0)
20404d94:	4791                	li	a5,4
20404d96:	06e7e063          	bltu	a5,a4,20404df6 <__metal_controller_interrupt_vector+0x90>
20404d9a:	fdc42783          	lw	a5,-36(s0)
20404d9e:	00279713          	slli	a4,a5,0x2
20404da2:	204077b7          	lui	a5,0x20407
20404da6:	f6878793          	addi	a5,a5,-152 # 20406f68 <__metal_driver_vtable_riscv_clint0+0x4c>
20404daa:	97ba                	add	a5,a5,a4
20404dac:	439c                	lw	a5,0(a5)
20404dae:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20404db0:	fe842783          	lw	a5,-24(s0)
20404db4:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20404db8:	fec42783          	lw	a5,-20(s0)
20404dbc:	0027e793          	ori	a5,a5,2
20404dc0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20404dc4:	a80d                	j	20404df6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20404dc6:	fe842783          	lw	a5,-24(s0)
20404dca:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
20404dce:	fec42783          	lw	a5,-20(s0)
20404dd2:	0037e793          	ori	a5,a5,3
20404dd6:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
20404dda:	a831                	j	20404df6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
20404ddc:	fe842783          	lw	a5,-24(s0)
20404de0:	0017e793          	ori	a5,a5,1
20404de4:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20404de8:	a039                	j	20404df6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20404dea:	fe842783          	lw	a5,-24(s0)
20404dee:	9bf1                	andi	a5,a5,-4
20404df0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20404df4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20404df6:	0001                	nop
20404df8:	5432                	lw	s0,44(sp)
20404dfa:	6145                	addi	sp,sp,48
20404dfc:	8082                	ret

20404dfe <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
20404dfe:	1101                	addi	sp,sp,-32
20404e00:	ce22                	sw	s0,28(sp)
20404e02:	1000                	addi	s0,sp,32
20404e04:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20404e08:	fec42783          	lw	a5,-20(s0)
20404e0c:	17f5                	addi	a5,a5,-3
20404e0e:	4771                	li	a4,28
20404e10:	00f76d63          	bltu	a4,a5,20404e2a <__metal_valid_interrupt_id+0x2c>
20404e14:	00279713          	slli	a4,a5,0x2
20404e18:	204077b7          	lui	a5,0x20407
20404e1c:	f7c78793          	addi	a5,a5,-132 # 20406f7c <__metal_driver_vtable_riscv_clint0+0x60>
20404e20:	97ba                	add	a5,a5,a4
20404e22:	439c                	lw	a5,0(a5)
20404e24:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20404e26:	4785                	li	a5,1
20404e28:	a019                	j	20404e2e <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20404e2a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
20404e2c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
20404e2e:	853e                	mv	a0,a5
20404e30:	4472                	lw	s0,28(sp)
20404e32:	6105                	addi	sp,sp,32
20404e34:	8082                	ret

20404e36 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20404e36:	7179                	addi	sp,sp,-48
20404e38:	d606                	sw	ra,44(sp)
20404e3a:	d422                	sw	s0,40(sp)
20404e3c:	1800                	addi	s0,sp,48
20404e3e:	fca42e23          	sw	a0,-36(s0)
20404e42:	fcb42c23          	sw	a1,-40(s0)
20404e46:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20404e4a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
20404e4e:	fdc42783          	lw	a5,-36(s0)
20404e52:	e399                	bnez	a5,20404e58 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20404e54:	57fd                	li	a5,-1
20404e56:	a849                	j	20404ee8 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20404e58:	fd842703          	lw	a4,-40(s0)
20404e5c:	47fd                	li	a5,31
20404e5e:	08e7e063          	bltu	a5,a4,20404ede <__metal_local_interrupt_enable+0xa8>
20404e62:	fd842783          	lw	a5,-40(s0)
20404e66:	00279713          	slli	a4,a5,0x2
20404e6a:	204077b7          	lui	a5,0x20407
20404e6e:	ff078793          	addi	a5,a5,-16 # 20406ff0 <__metal_driver_vtable_riscv_clint0+0xd4>
20404e72:	97ba                	add	a5,a5,a4
20404e74:	439c                	lw	a5,0(a5)
20404e76:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20404e78:	fd442783          	lw	a5,-44(s0)
20404e7c:	c781                	beqz	a5,20404e84 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
20404e7e:	856ff0ef          	jal	ra,20403ed4 <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20404e82:	a08d                	j	20404ee4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20404e84:	868ff0ef          	jal	ra,20403eec <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20404e88:	a8b1                	j	20404ee4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20404e8a:	fd442783          	lw	a5,-44(s0)
20404e8e:	c781                	beqz	a5,20404e96 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20404e90:	874ff0ef          	jal	ra,20403f04 <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20404e94:	a881                	j	20404ee4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20404e96:	886ff0ef          	jal	ra,20403f1c <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20404e9a:	a0a9                	j	20404ee4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20404e9c:	fd442783          	lw	a5,-44(s0)
20404ea0:	c781                	beqz	a5,20404ea8 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20404ea2:	892ff0ef          	jal	ra,20403f34 <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20404ea6:	a83d                	j	20404ee4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20404ea8:	8a6ff0ef          	jal	ra,20403f4e <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
20404eac:	a825                	j	20404ee4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
20404eae:	fd442783          	lw	a5,-44(s0)
20404eb2:	c781                	beqz	a5,20404eba <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20404eb4:	8b4ff0ef          	jal	ra,20403f68 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20404eb8:	a035                	j	20404ee4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
20404eba:	8caff0ef          	jal	ra,20403f84 <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
20404ebe:	a01d                	j	20404ee4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20404ec0:	fd442783          	lw	a5,-44(s0)
20404ec4:	c799                	beqz	a5,20404ed2 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20404ec6:	fd842783          	lw	a5,-40(s0)
20404eca:	853e                	mv	a0,a5
20404ecc:	8d4ff0ef          	jal	ra,20403fa0 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20404ed0:	a811                	j	20404ee4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20404ed2:	fd842783          	lw	a5,-40(s0)
20404ed6:	853e                	mv	a0,a5
20404ed8:	8f4ff0ef          	jal	ra,20403fcc <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
20404edc:	a021                	j	20404ee4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
20404ede:	57fd                	li	a5,-1
20404ee0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20404ee4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20404ee8:	853e                	mv	a0,a5
20404eea:	50b2                	lw	ra,44(sp)
20404eec:	5422                	lw	s0,40(sp)
20404eee:	6145                	addi	sp,sp,48
20404ef0:	8082                	ret

20404ef2 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20404ef2:	7179                	addi	sp,sp,-48
20404ef4:	d622                	sw	s0,44(sp)
20404ef6:	1800                	addi	s0,sp,48
20404ef8:	fca42e23          	sw	a0,-36(s0)
20404efc:	fcb42c23          	sw	a1,-40(s0)
20404f00:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20404f04:	fdc42783          	lw	a5,-36(s0)
20404f08:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20404f0c:	fd842703          	lw	a4,-40(s0)
20404f10:	47ad                	li	a5,11
20404f12:	02e7c263          	blt	a5,a4,20404f36 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20404f16:	fd442783          	lw	a5,-44(s0)
20404f1a:	cf91                	beqz	a5,20404f36 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
20404f1c:	fec42703          	lw	a4,-20(s0)
20404f20:	fd842783          	lw	a5,-40(s0)
20404f24:	0e078793          	addi	a5,a5,224
20404f28:	078a                	slli	a5,a5,0x2
20404f2a:	97ba                	add	a5,a5,a4
20404f2c:	fd442703          	lw	a4,-44(s0)
20404f30:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20404f32:	4781                	li	a5,0
20404f34:	a011                	j	20404f38 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20404f36:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20404f38:	853e                	mv	a0,a5
20404f3a:	5432                	lw	s0,44(sp)
20404f3c:	6145                	addi	sp,sp,48
20404f3e:	8082                	ret

20404f40 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
20404f40:	7139                	addi	sp,sp,-64
20404f42:	de06                	sw	ra,60(sp)
20404f44:	dc22                	sw	s0,56(sp)
20404f46:	0080                	addi	s0,sp,64
20404f48:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20404f4c:	fcc42783          	lw	a5,-52(s0)
20404f50:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20404f54:	fe442783          	lw	a5,-28(s0)
20404f58:	43dc                	lw	a5,4(a5)
20404f5a:	10079e63          	bnez	a5,20405076 <__metal_driver_riscv_cpu_controller_interrupt_init+0x136>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
20404f5e:	57fd                	li	a5,-1
20404f60:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20404f64:	57fd                	li	a5,-1
20404f66:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20404f6a:	301027f3          	csrr	a5,misa
20404f6e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20404f72:	fe042703          	lw	a4,-32(s0)
20404f76:	6789                	lui	a5,0x2
20404f78:	8ff9                	and	a5,a5,a4
20404f7a:	e799                	bnez	a5,20404f88 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
20404f7c:	fe042703          	lw	a4,-32(s0)
20404f80:	000407b7          	lui	a5,0x40
20404f84:	8ff9                	and	a5,a5,a4
20404f86:	c799                	beqz	a5,20404f94 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20404f88:	57fd                	li	a5,-1
20404f8a:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
20404f8e:	57fd                	li	a5,-1
20404f90:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20404f94:	fe042703          	lw	a4,-32(s0)
20404f98:	000407b7          	lui	a5,0x40
20404f9c:	8ff9                	and	a5,a5,a4
20404f9e:	c781                	beqz	a5,20404fa6 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20404fa0:	57fd                	li	a5,-1
20404fa2:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20404fa6:	fe042623          	sw	zero,-20(s0)
20404faa:	a0b9                	j	20404ff8 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
20404fac:	fe442683          	lw	a3,-28(s0)
20404fb0:	fec42703          	lw	a4,-20(s0)
20404fb4:	87ba                	mv	a5,a4
20404fb6:	0786                	slli	a5,a5,0x1
20404fb8:	97ba                	add	a5,a5,a4
20404fba:	078e                	slli	a5,a5,0x3
20404fbc:	97b6                	add	a5,a5,a3
20404fbe:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20404fc2:	fe442683          	lw	a3,-28(s0)
20404fc6:	fec42703          	lw	a4,-20(s0)
20404fca:	87ba                	mv	a5,a4
20404fcc:	0786                	slli	a5,a5,0x1
20404fce:	97ba                	add	a5,a5,a4
20404fd0:	078e                	slli	a5,a5,0x3
20404fd2:	97b6                	add	a5,a5,a3
20404fd4:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20404fd8:	fe442683          	lw	a3,-28(s0)
20404fdc:	fec42703          	lw	a4,-20(s0)
20404fe0:	87ba                	mv	a5,a4
20404fe2:	0786                	slli	a5,a5,0x1
20404fe4:	97ba                	add	a5,a5,a4
20404fe6:	078e                	slli	a5,a5,0x3
20404fe8:	97b6                	add	a5,a5,a3
20404fea:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
20404fee:	fec42783          	lw	a5,-20(s0)
20404ff2:	0785                	addi	a5,a5,1
20404ff4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20404ff8:	fec42703          	lw	a4,-20(s0)
20404ffc:	47fd                	li	a5,31
20404ffe:	fae7d7e3          	bge	a5,a4,20404fac <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20405002:	fe042423          	sw	zero,-24(s0)
20405006:	a01d                	j	2040502c <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20405008:	fe442703          	lw	a4,-28(s0)
2040500c:	fe842783          	lw	a5,-24(s0)
20405010:	0e078793          	addi	a5,a5,224
20405014:	078a                	slli	a5,a5,0x2
20405016:	97ba                	add	a5,a5,a4
20405018:	20404737          	lui	a4,0x20404
2040501c:	ff870713          	addi	a4,a4,-8 # 20403ff8 <__metal_default_exception_handler>
20405020:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20405022:	fe842783          	lw	a5,-24(s0)
20405026:	0785                	addi	a5,a5,1
20405028:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
2040502c:	fe842703          	lw	a4,-24(s0)
20405030:	47ad                	li	a5,11
20405032:	fce7dbe3          	bge	a5,a4,20405008 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20405036:	204047b7          	lui	a5,0x20404
2040503a:	28078593          	addi	a1,a5,640 # 20404280 <__metal_exception_handler>
2040503e:	4501                	li	a0,0
20405040:	d27ff0ef          	jal	ra,20404d66 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20405044:	301027f3          	csrr	a5,misa
20405048:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
2040504c:	fdc42703          	lw	a4,-36(s0)
20405050:	67c1                	lui	a5,0x10
20405052:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20405056:	8ff9                	and	a5,a5,a4
20405058:	cb99                	beqz	a5,2040506e <__metal_driver_riscv_cpu_controller_interrupt_init+0x12e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
2040505a:	300027f3          	csrr	a5,mstatus
2040505e:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20405062:	fdc42703          	lw	a4,-36(s0)
20405066:	6789                	lui	a5,0x2
20405068:	8fd9                	or	a5,a5,a4
2040506a:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
2040506e:	fe442783          	lw	a5,-28(s0)
20405072:	4705                	li	a4,1
20405074:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20405076:	0001                	nop
20405078:	50f2                	lw	ra,60(sp)
2040507a:	5462                	lw	s0,56(sp)
2040507c:	6121                	addi	sp,sp,64
2040507e:	8082                	ret

20405080 <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20405080:	7179                	addi	sp,sp,-48
20405082:	d606                	sw	ra,44(sp)
20405084:	d422                	sw	s0,40(sp)
20405086:	1800                	addi	s0,sp,48
20405088:	fca42e23          	sw	a0,-36(s0)
2040508c:	fcb42c23          	sw	a1,-40(s0)
20405090:	fcc42a23          	sw	a2,-44(s0)
20405094:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20405098:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040509c:	fdc42783          	lw	a5,-36(s0)
204050a0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
204050a4:	fd842503          	lw	a0,-40(s0)
204050a8:	d57ff0ef          	jal	ra,20404dfe <__metal_valid_interrupt_id>
204050ac:	87aa                	mv	a5,a0
204050ae:	e399                	bnez	a5,204050b4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x34>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
204050b0:	57d5                	li	a5,-11
204050b2:	aa11                	j	204051c6 <__metal_driver_riscv_cpu_controller_interrupt_register+0x146>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
204050b4:	fd442783          	lw	a5,-44(s0)
204050b8:	cf85                	beqz	a5,204050f0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
204050ba:	fe842683          	lw	a3,-24(s0)
204050be:	fd842703          	lw	a4,-40(s0)
204050c2:	87ba                	mv	a5,a4
204050c4:	0786                	slli	a5,a5,0x1
204050c6:	97ba                	add	a5,a5,a4
204050c8:	078e                	slli	a5,a5,0x3
204050ca:	97b6                	add	a5,a5,a3
204050cc:	fd442703          	lw	a4,-44(s0)
204050d0:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
204050d4:	fe842683          	lw	a3,-24(s0)
204050d8:	fd842703          	lw	a4,-40(s0)
204050dc:	87ba                	mv	a5,a4
204050de:	0786                	slli	a5,a5,0x1
204050e0:	97ba                	add	a5,a5,a4
204050e2:	078e                	slli	a5,a5,0x3
204050e4:	97b6                	add	a5,a5,a3
204050e6:	fd042703          	lw	a4,-48(s0)
204050ea:	08e7ac23          	sw	a4,152(a5)
204050ee:	a8d1                	j	204051c2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
204050f0:	fd842783          	lw	a5,-40(s0)
204050f4:	17f5                	addi	a5,a5,-3
204050f6:	4771                	li	a4,28
204050f8:	0cf76263          	bltu	a4,a5,204051bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x13c>
204050fc:	00279713          	slli	a4,a5,0x2
20405100:	204077b7          	lui	a5,0x20407
20405104:	07078793          	addi	a5,a5,112 # 20407070 <__metal_driver_vtable_riscv_clint0+0x154>
20405108:	97ba                	add	a5,a5,a4
2040510a:	439c                	lw	a5,0(a5)
2040510c:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
2040510e:	fe842683          	lw	a3,-24(s0)
20405112:	fd842703          	lw	a4,-40(s0)
20405116:	87ba                	mv	a5,a4
20405118:	0786                	slli	a5,a5,0x1
2040511a:	97ba                	add	a5,a5,a4
2040511c:	078e                	slli	a5,a5,0x3
2040511e:	97b6                	add	a5,a5,a3
20405120:	20404737          	lui	a4,0x20404
20405124:	0e470713          	addi	a4,a4,228 # 204040e4 <__metal_default_sw_handler>
20405128:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
2040512c:	fe842683          	lw	a3,-24(s0)
20405130:	fd842703          	lw	a4,-40(s0)
20405134:	87ba                	mv	a5,a4
20405136:	0786                	slli	a5,a5,0x1
20405138:	97ba                	add	a5,a5,a4
2040513a:	078e                	slli	a5,a5,0x3
2040513c:	97b6                	add	a5,a5,a3
2040513e:	fd042703          	lw	a4,-48(s0)
20405142:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20405146:	a8b5                	j	204051c2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20405148:	fe842683          	lw	a3,-24(s0)
2040514c:	fd842703          	lw	a4,-40(s0)
20405150:	87ba                	mv	a5,a4
20405152:	0786                	slli	a5,a5,0x1
20405154:	97ba                	add	a5,a5,a4
20405156:	078e                	slli	a5,a5,0x3
20405158:	97b6                	add	a5,a5,a3
2040515a:	20404737          	lui	a4,0x20404
2040515e:	1dc70713          	addi	a4,a4,476 # 204041dc <__metal_default_timer_handler>
20405162:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20405166:	fe842683          	lw	a3,-24(s0)
2040516a:	fd842703          	lw	a4,-40(s0)
2040516e:	87ba                	mv	a5,a4
20405170:	0786                	slli	a5,a5,0x1
20405172:	97ba                	add	a5,a5,a4
20405174:	078e                	slli	a5,a5,0x3
20405176:	97b6                	add	a5,a5,a3
20405178:	fd042703          	lw	a4,-48(s0)
2040517c:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20405180:	a089                	j	204051c2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20405182:	fe842683          	lw	a3,-24(s0)
20405186:	fd842703          	lw	a4,-40(s0)
2040518a:	87ba                	mv	a5,a4
2040518c:	0786                	slli	a5,a5,0x1
2040518e:	97ba                	add	a5,a5,a4
20405190:	078e                	slli	a5,a5,0x3
20405192:	97b6                	add	a5,a5,a3
20405194:	20404737          	lui	a4,0x20404
20405198:	01070713          	addi	a4,a4,16 # 20404010 <__metal_default_interrupt_handler>
2040519c:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
204051a0:	fe842683          	lw	a3,-24(s0)
204051a4:	fd842703          	lw	a4,-40(s0)
204051a8:	87ba                	mv	a5,a4
204051aa:	0786                	slli	a5,a5,0x1
204051ac:	97ba                	add	a5,a5,a4
204051ae:	078e                	slli	a5,a5,0x3
204051b0:	97b6                	add	a5,a5,a3
204051b2:	fd042703          	lw	a4,-48(s0)
204051b6:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
204051ba:	a021                	j	204051c2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
204051bc:	57d1                	li	a5,-12
204051be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
204051c2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
204051c6:	853e                	mv	a0,a5
204051c8:	50b2                	lw	ra,44(sp)
204051ca:	5422                	lw	s0,40(sp)
204051cc:	6145                	addi	sp,sp,48
204051ce:	8082                	ret

204051d0 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
204051d0:	1101                	addi	sp,sp,-32
204051d2:	ce06                	sw	ra,28(sp)
204051d4:	cc22                	sw	s0,24(sp)
204051d6:	1000                	addi	s0,sp,32
204051d8:	fea42623          	sw	a0,-20(s0)
204051dc:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
204051e0:	fe842783          	lw	a5,-24(s0)
204051e4:	4605                	li	a2,1
204051e6:	85be                	mv	a1,a5
204051e8:	fec42503          	lw	a0,-20(s0)
204051ec:	c4bff0ef          	jal	ra,20404e36 <__metal_local_interrupt_enable>
204051f0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
204051f2:	853e                	mv	a0,a5
204051f4:	40f2                	lw	ra,28(sp)
204051f6:	4462                	lw	s0,24(sp)
204051f8:	6105                	addi	sp,sp,32
204051fa:	8082                	ret

204051fc <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
204051fc:	1101                	addi	sp,sp,-32
204051fe:	ce06                	sw	ra,28(sp)
20405200:	cc22                	sw	s0,24(sp)
20405202:	1000                	addi	s0,sp,32
20405204:	fea42623          	sw	a0,-20(s0)
20405208:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
2040520c:	fe842783          	lw	a5,-24(s0)
20405210:	4601                	li	a2,0
20405212:	85be                	mv	a1,a5
20405214:	fec42503          	lw	a0,-20(s0)
20405218:	c1fff0ef          	jal	ra,20404e36 <__metal_local_interrupt_enable>
2040521c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
2040521e:	853e                	mv	a0,a5
20405220:	40f2                	lw	ra,28(sp)
20405222:	4462                	lw	s0,24(sp)
20405224:	6105                	addi	sp,sp,32
20405226:	8082                	ret

20405228 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20405228:	1101                	addi	sp,sp,-32
2040522a:	ce06                	sw	ra,28(sp)
2040522c:	cc22                	sw	s0,24(sp)
2040522e:	1000                	addi	s0,sp,32
20405230:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20405234:	ae3ff0ef          	jal	ra,20404d16 <__metal_controller_interrupt_vector_mode>
20405238:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
2040523a:	853e                	mv	a0,a5
2040523c:	40f2                	lw	ra,28(sp)
2040523e:	4462                	lw	s0,24(sp)
20405240:	6105                	addi	sp,sp,32
20405242:	8082                	ret

20405244 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20405244:	7179                	addi	sp,sp,-48
20405246:	d606                	sw	ra,44(sp)
20405248:	d422                	sw	s0,40(sp)
2040524a:	1800                	addi	s0,sp,48
2040524c:	fca42e23          	sw	a0,-36(s0)
20405250:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20405254:	fdc42783          	lw	a5,-36(s0)
20405258:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
2040525c:	fd842783          	lw	a5,-40(s0)
20405260:	eb99                	bnez	a5,20405276 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20405262:	204047b7          	lui	a5,0x20404
20405266:	28078593          	addi	a1,a5,640 # 20404280 <__metal_exception_handler>
2040526a:	fd842503          	lw	a0,-40(s0)
2040526e:	af9ff0ef          	jal	ra,20404d66 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20405272:	4781                	li	a5,0
20405274:	a00d                	j	20405296 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20405276:	fd842703          	lw	a4,-40(s0)
2040527a:	4785                	li	a5,1
2040527c:	00f71c63          	bne	a4,a5,20405294 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20405280:	204077b7          	lui	a5,0x20407
20405284:	b8078593          	addi	a1,a5,-1152 # 20406b80 <__metal_vector_table>
20405288:	fd842503          	lw	a0,-40(s0)
2040528c:	adbff0ef          	jal	ra,20404d66 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20405290:	4781                	li	a5,0
20405292:	a011                	j	20405296 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20405294:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20405296:	853e                	mv	a0,a5
20405298:	50b2                	lw	ra,44(sp)
2040529a:	5422                	lw	s0,40(sp)
2040529c:	6145                	addi	sp,sp,48
2040529e:	8082                	ret

204052a0 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
204052a0:	1101                	addi	sp,sp,-32
204052a2:	ce22                	sw	s0,28(sp)
204052a4:	1000                	addi	s0,sp,32
204052a6:	fea42623          	sw	a0,-20(s0)
204052aa:	feb42423          	sw	a1,-24(s0)
204052ae:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
204052b2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
204052b4:	853e                	mv	a0,a5
204052b6:	4472                	lw	s0,28(sp)
204052b8:	6105                	addi	sp,sp,32
204052ba:	8082                	ret

204052bc <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
204052bc:	7139                	addi	sp,sp,-64
204052be:	de22                	sw	s0,60(sp)
204052c0:	0080                	addi	s0,sp,64
204052c2:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
204052c6:	4301                	li	t1,0
204052c8:	4381                	li	t2,0
204052ca:	fe642423          	sw	t1,-24(s0)
204052ce:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
204052d2:	b8002573          	csrr	a0,mcycleh
204052d6:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
204052da:	b0002573          	csrr	a0,mcycle
204052de:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
204052e2:	b8002573          	csrr	a0,mcycleh
204052e6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
204052ea:	fe442883          	lw	a7,-28(s0)
204052ee:	fdc42503          	lw	a0,-36(s0)
204052f2:	02a89563          	bne	a7,a0,2040531c <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
204052f6:	fe442503          	lw	a0,-28(s0)
204052fa:	85aa                	mv	a1,a0
204052fc:	4601                	li	a2,0
204052fe:	00059813          	slli	a6,a1,0x0
20405302:	4781                	li	a5,0
20405304:	fe042603          	lw	a2,-32(s0)
20405308:	86b2                	mv	a3,a2
2040530a:	4701                	li	a4,0
2040530c:	00d7e633          	or	a2,a5,a3
20405310:	fec42423          	sw	a2,-24(s0)
20405314:	00e867b3          	or	a5,a6,a4
20405318:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
2040531c:	fe842783          	lw	a5,-24(s0)
20405320:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20405324:	853e                	mv	a0,a5
20405326:	85c2                	mv	a1,a6
20405328:	5472                	lw	s0,60(sp)
2040532a:	6121                	addi	sp,sp,64
2040532c:	8082                	ret

2040532e <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
2040532e:	7179                	addi	sp,sp,-48
20405330:	d606                	sw	ra,44(sp)
20405332:	d422                	sw	s0,40(sp)
20405334:	d24a                	sw	s2,36(sp)
20405336:	d04e                	sw	s3,32(sp)
20405338:	1800                	addi	s0,sp,48
2040533a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
2040533e:	fdc42783          	lw	a5,-36(s0)
20405342:	e781                	bnez	a5,2040534a <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20405344:	4901                	li	s2,0
20405346:	4981                	li	s3,0
20405348:	a821                	j	20405360 <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
2040534a:	fdc42503          	lw	a0,-36(s0)
2040534e:	aedfe0ef          	jal	ra,20403e3a <__metal_driver_cpu_timebase>
20405352:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20405356:	fec42783          	lw	a5,-20(s0)
2040535a:	893e                	mv	s2,a5
2040535c:	87fd                	srai	a5,a5,0x1f
2040535e:	89be                	mv	s3,a5
20405360:	87ca                	mv	a5,s2
20405362:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20405364:	853e                	mv	a0,a5
20405366:	85c2                	mv	a1,a6
20405368:	50b2                	lw	ra,44(sp)
2040536a:	5422                	lw	s0,40(sp)
2040536c:	5912                	lw	s2,36(sp)
2040536e:	5982                	lw	s3,32(sp)
20405370:	6145                	addi	sp,sp,48
20405372:	8082                	ret

20405374 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20405374:	7179                	addi	sp,sp,-48
20405376:	d606                	sw	ra,44(sp)
20405378:	d422                	sw	s0,40(sp)
2040537a:	1800                	addi	s0,sp,48
2040537c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20405380:	4781                	li	a5,0
20405382:	4801                	li	a6,0
20405384:	fef42023          	sw	a5,-32(s0)
20405388:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040538c:	fdc42503          	lw	a0,-36(s0)
20405390:	ad5fe0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
20405394:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20405398:	fec42783          	lw	a5,-20(s0)
2040539c:	c78d                	beqz	a5,204053c6 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
2040539e:	fec42783          	lw	a5,-20(s0)
204053a2:	13c7a783          	lw	a5,316(a5)
204053a6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
204053aa:	fe842783          	lw	a5,-24(s0)
204053ae:	cf81                	beqz	a5,204053c6 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
204053b0:	fe842783          	lw	a5,-24(s0)
204053b4:	439c                	lw	a5,0(a5)
204053b6:	43f8                	lw	a4,68(a5)
204053b8:	fe040793          	addi	a5,s0,-32
204053bc:	863e                	mv	a2,a5
204053be:	4585                	li	a1,1
204053c0:	fe842503          	lw	a0,-24(s0)
204053c4:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
204053c6:	fe042783          	lw	a5,-32(s0)
204053ca:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
204053ce:	853e                	mv	a0,a5
204053d0:	85c2                	mv	a1,a6
204053d2:	50b2                	lw	ra,44(sp)
204053d4:	5422                	lw	s0,40(sp)
204053d6:	6145                	addi	sp,sp,48
204053d8:	8082                	ret

204053da <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
204053da:	7179                	addi	sp,sp,-48
204053dc:	d606                	sw	ra,44(sp)
204053de:	d422                	sw	s0,40(sp)
204053e0:	d226                	sw	s1,36(sp)
204053e2:	1800                	addi	s0,sp,48
204053e4:	fca42e23          	sw	a0,-36(s0)
204053e8:	fcb42823          	sw	a1,-48(s0)
204053ec:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
204053f0:	57fd                	li	a5,-1
204053f2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204053f6:	fdc42503          	lw	a0,-36(s0)
204053fa:	a6bfe0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
204053fe:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20405402:	fe842783          	lw	a5,-24(s0)
20405406:	cf8d                	beqz	a5,20405440 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20405408:	fe842783          	lw	a5,-24(s0)
2040540c:	13c7a783          	lw	a5,316(a5)
20405410:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20405414:	fe442783          	lw	a5,-28(s0)
20405418:	c785                	beqz	a5,20405440 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
2040541a:	fe442783          	lw	a5,-28(s0)
2040541e:	439c                	lw	a5,0(a5)
20405420:	47a4                	lw	s1,72(a5)
20405422:	fdc42503          	lw	a0,-36(s0)
20405426:	9f1fe0ef          	jal	ra,20403e16 <__metal_driver_cpu_hartid>
2040542a:	87aa                	mv	a5,a0
2040542c:	fd042603          	lw	a2,-48(s0)
20405430:	fd442683          	lw	a3,-44(s0)
20405434:	85be                	mv	a1,a5
20405436:	fe442503          	lw	a0,-28(s0)
2040543a:	9482                	jalr	s1
2040543c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20405440:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20405444:	853e                	mv	a0,a5
20405446:	50b2                	lw	ra,44(sp)
20405448:	5422                	lw	s0,40(sp)
2040544a:	5492                	lw	s1,36(sp)
2040544c:	6145                	addi	sp,sp,48
2040544e:	8082                	ret

20405450 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20405450:	1101                	addi	sp,sp,-32
20405452:	ce22                	sw	s0,28(sp)
20405454:	1000                	addi	s0,sp,32
20405456:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
2040545a:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
2040545e:	853e                	mv	a0,a5
20405460:	4472                	lw	s0,28(sp)
20405462:	6105                	addi	sp,sp,32
20405464:	8082                	ret

20405466 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20405466:	1101                	addi	sp,sp,-32
20405468:	ce22                	sw	s0,28(sp)
2040546a:	1000                	addi	s0,sp,32
2040546c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20405470:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20405472:	853e                	mv	a0,a5
20405474:	4472                	lw	s0,28(sp)
20405476:	6105                	addi	sp,sp,32
20405478:	8082                	ret

2040547a <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
2040547a:	1101                	addi	sp,sp,-32
2040547c:	ce22                	sw	s0,28(sp)
2040547e:	1000                	addi	s0,sp,32
20405480:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20405484:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20405488:	853e                	mv	a0,a5
2040548a:	4472                	lw	s0,28(sp)
2040548c:	6105                	addi	sp,sp,32
2040548e:	8082                	ret

20405490 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20405490:	1101                	addi	sp,sp,-32
20405492:	ce22                	sw	s0,28(sp)
20405494:	1000                	addi	s0,sp,32
20405496:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
2040549a:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
2040549c:	853e                	mv	a0,a5
2040549e:	4472                	lw	s0,28(sp)
204054a0:	6105                	addi	sp,sp,32
204054a2:	8082                	ret

204054a4 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
204054a4:	7179                	addi	sp,sp,-48
204054a6:	d606                	sw	ra,44(sp)
204054a8:	d422                	sw	s0,40(sp)
204054aa:	1800                	addi	s0,sp,48
204054ac:	fca42e23          	sw	a0,-36(s0)
204054b0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
204054b4:	57fd                	li	a5,-1
204054b6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204054ba:	fdc42503          	lw	a0,-36(s0)
204054be:	9a7fe0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
204054c2:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
204054c6:	fe842783          	lw	a5,-24(s0)
204054ca:	c79d                	beqz	a5,204054f8 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204054cc:	fe842783          	lw	a5,-24(s0)
204054d0:	0dc7a783          	lw	a5,220(a5)
204054d4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
204054d8:	fe442783          	lw	a5,-28(s0)
204054dc:	cf91                	beqz	a5,204054f8 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
204054de:	fe442783          	lw	a5,-28(s0)
204054e2:	439c                	lw	a5,0(a5)
204054e4:	43f8                	lw	a4,68(a5)
204054e6:	fd840793          	addi	a5,s0,-40
204054ea:	863e                	mv	a2,a5
204054ec:	458d                	li	a1,3
204054ee:	fe442503          	lw	a0,-28(s0)
204054f2:	9702                	jalr	a4
204054f4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
204054f8:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
204054fc:	853e                	mv	a0,a5
204054fe:	50b2                	lw	ra,44(sp)
20405500:	5422                	lw	s0,40(sp)
20405502:	6145                	addi	sp,sp,48
20405504:	8082                	ret

20405506 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20405506:	7179                	addi	sp,sp,-48
20405508:	d606                	sw	ra,44(sp)
2040550a:	d422                	sw	s0,40(sp)
2040550c:	1800                	addi	s0,sp,48
2040550e:	fca42e23          	sw	a0,-36(s0)
20405512:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20405516:	57fd                	li	a5,-1
20405518:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040551c:	fdc42503          	lw	a0,-36(s0)
20405520:	945fe0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
20405524:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20405528:	fe842783          	lw	a5,-24(s0)
2040552c:	c79d                	beqz	a5,2040555a <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040552e:	fe842783          	lw	a5,-24(s0)
20405532:	0dc7a783          	lw	a5,220(a5)
20405536:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
2040553a:	fe442783          	lw	a5,-28(s0)
2040553e:	cf91                	beqz	a5,2040555a <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20405540:	fe442783          	lw	a5,-28(s0)
20405544:	439c                	lw	a5,0(a5)
20405546:	43f8                	lw	a4,68(a5)
20405548:	fd840793          	addi	a5,s0,-40
2040554c:	863e                	mv	a2,a5
2040554e:	4589                	li	a1,2
20405550:	fe442503          	lw	a0,-28(s0)
20405554:	9702                	jalr	a4
20405556:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
2040555a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
2040555e:	853e                	mv	a0,a5
20405560:	50b2                	lw	ra,44(sp)
20405562:	5422                	lw	s0,40(sp)
20405564:	6145                	addi	sp,sp,48
20405566:	8082                	ret

20405568 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20405568:	7179                	addi	sp,sp,-48
2040556a:	d606                	sw	ra,44(sp)
2040556c:	d422                	sw	s0,40(sp)
2040556e:	1800                	addi	s0,sp,48
20405570:	fca42e23          	sw	a0,-36(s0)
20405574:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20405578:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040557c:	fdc42503          	lw	a0,-36(s0)
20405580:	8e5fe0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
20405584:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20405588:	fe842783          	lw	a5,-24(s0)
2040558c:	c79d                	beqz	a5,204055ba <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040558e:	fe842783          	lw	a5,-24(s0)
20405592:	0dc7a783          	lw	a5,220(a5)
20405596:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
2040559a:	fe442783          	lw	a5,-28(s0)
2040559e:	cf91                	beqz	a5,204055ba <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
204055a0:	fe442783          	lw	a5,-28(s0)
204055a4:	439c                	lw	a5,0(a5)
204055a6:	43f8                	lw	a4,68(a5)
204055a8:	fd840793          	addi	a5,s0,-40
204055ac:	863e                	mv	a2,a5
204055ae:	4591                	li	a1,4
204055b0:	fe442503          	lw	a0,-28(s0)
204055b4:	9702                	jalr	a4
204055b6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
204055ba:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
204055be:	853e                	mv	a0,a5
204055c0:	50b2                	lw	ra,44(sp)
204055c2:	5422                	lw	s0,40(sp)
204055c4:	6145                	addi	sp,sp,48
204055c6:	8082                	ret

204055c8 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
204055c8:	1101                	addi	sp,sp,-32
204055ca:	ce06                	sw	ra,28(sp)
204055cc:	cc22                	sw	s0,24(sp)
204055ce:	1000                	addi	s0,sp,32
204055d0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
204055d4:	fec42503          	lw	a0,-20(s0)
204055d8:	88dfe0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
204055dc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
204055de:	853e                	mv	a0,a5
204055e0:	40f2                	lw	ra,28(sp)
204055e2:	4462                	lw	s0,24(sp)
204055e4:	6105                	addi	sp,sp,32
204055e6:	8082                	ret

204055e8 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
204055e8:	7179                	addi	sp,sp,-48
204055ea:	d606                	sw	ra,44(sp)
204055ec:	d422                	sw	s0,40(sp)
204055ee:	1800                	addi	s0,sp,48
204055f0:	fca42e23          	sw	a0,-36(s0)
204055f4:	fcb42c23          	sw	a1,-40(s0)
204055f8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204055fc:	fdc42503          	lw	a0,-36(s0)
20405600:	865fe0ef          	jal	ra,20403e64 <__metal_driver_cpu_interrupt_controller>
20405604:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20405608:	fec42783          	lw	a5,-20(s0)
2040560c:	cb99                	beqz	a5,20405622 <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
2040560e:	fd442603          	lw	a2,-44(s0)
20405612:	fd842583          	lw	a1,-40(s0)
20405616:	fec42503          	lw	a0,-20(s0)
2040561a:	8d9ff0ef          	jal	ra,20404ef2 <__metal_exception_register>
2040561e:	87aa                	mv	a5,a0
20405620:	a011                	j	20405624 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20405622:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20405624:	853e                	mv	a0,a5
20405626:	50b2                	lw	ra,44(sp)
20405628:	5422                	lw	s0,40(sp)
2040562a:	6145                	addi	sp,sp,48
2040562c:	8082                	ret

2040562e <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
2040562e:	1101                	addi	sp,sp,-32
20405630:	ce22                	sw	s0,28(sp)
20405632:	1000                	addi	s0,sp,32
20405634:	fea42623          	sw	a0,-20(s0)
20405638:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
2040563c:	fe842783          	lw	a5,-24(s0)
20405640:	0007d783          	lhu	a5,0(a5)
20405644:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20405648:	478d                	li	a5,3
2040564a:	00f71463          	bne	a4,a5,20405652 <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
2040564e:	4791                	li	a5,4
20405650:	a011                	j	20405654 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20405652:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20405654:	853e                	mv	a0,a5
20405656:	4472                	lw	s0,28(sp)
20405658:	6105                	addi	sp,sp,32
2040565a:	8082                	ret

2040565c <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
2040565c:	7179                	addi	sp,sp,-48
2040565e:	d622                	sw	s0,44(sp)
20405660:	1800                	addi	s0,sp,48
20405662:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20405666:	341027f3          	csrr	a5,mepc
2040566a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
2040566e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20405672:	853e                	mv	a0,a5
20405674:	5432                	lw	s0,44(sp)
20405676:	6145                	addi	sp,sp,48
20405678:	8082                	ret

2040567a <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
2040567a:	1101                	addi	sp,sp,-32
2040567c:	ce22                	sw	s0,28(sp)
2040567e:	1000                	addi	s0,sp,32
20405680:	fea42623          	sw	a0,-20(s0)
20405684:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20405688:	fe842783          	lw	a5,-24(s0)
2040568c:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20405690:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20405692:	853e                	mv	a0,a5
20405694:	4472                	lw	s0,28(sp)
20405696:	6105                	addi	sp,sp,32
20405698:	8082                	ret

2040569a <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
2040569a:	1101                	addi	sp,sp,-32
2040569c:	ce22                	sw	s0,28(sp)
2040569e:	1000                	addi	s0,sp,32
204056a0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204056a4:	fec42703          	lw	a4,-20(s0)
204056a8:	800017b7          	lui	a5,0x80001
204056ac:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffd864>
204056b0:	00f71563          	bne	a4,a5,204056ba <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
204056b4:	0c0007b7          	lui	a5,0xc000
204056b8:	a011                	j	204056bc <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
204056ba:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
204056bc:	853e                	mv	a0,a5
204056be:	4472                	lw	s0,28(sp)
204056c0:	6105                	addi	sp,sp,32
204056c2:	8082                	ret

204056c4 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
204056c4:	1101                	addi	sp,sp,-32
204056c6:	ce22                	sw	s0,28(sp)
204056c8:	1000                	addi	s0,sp,32
204056ca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204056ce:	fec42703          	lw	a4,-20(s0)
204056d2:	800017b7          	lui	a5,0x80001
204056d6:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffd864>
204056da:	00f71463          	bne	a4,a5,204056e2 <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
204056de:	47ed                	li	a5,27
204056e0:	a011                	j	204056e4 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
204056e2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
204056e4:	853e                	mv	a0,a5
204056e6:	4472                	lw	s0,28(sp)
204056e8:	6105                	addi	sp,sp,32
204056ea:	8082                	ret

204056ec <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
204056ec:	1101                	addi	sp,sp,-32
204056ee:	ce22                	sw	s0,28(sp)
204056f0:	1000                	addi	s0,sp,32
204056f2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204056f6:	fec42703          	lw	a4,-20(s0)
204056fa:	800017b7          	lui	a5,0x80001
204056fe:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffd864>
20405702:	00f71463          	bne	a4,a5,2040570a <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20405706:	479d                	li	a5,7
20405708:	a011                	j	2040570c <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
2040570a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
2040570c:	853e                	mv	a0,a5
2040570e:	4472                	lw	s0,28(sp)
20405710:	6105                	addi	sp,sp,32
20405712:	8082                	ret

20405714 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20405714:	1101                	addi	sp,sp,-32
20405716:	ce22                	sw	s0,28(sp)
20405718:	1000                	addi	s0,sp,32
2040571a:	fea42623          	sw	a0,-20(s0)
2040571e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
20405722:	fe842783          	lw	a5,-24(s0)
20405726:	e791                	bnez	a5,20405732 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20405728:	800017b7          	lui	a5,0x80001
2040572c:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffd4ac>
20405730:	a011                	j	20405734 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
20405732:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
20405734:	853e                	mv	a0,a5
20405736:	4472                	lw	s0,28(sp)
20405738:	6105                	addi	sp,sp,32
2040573a:	8082                	ret

2040573c <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
2040573c:	1101                	addi	sp,sp,-32
2040573e:	ce22                	sw	s0,28(sp)
20405740:	1000                	addi	s0,sp,32
20405742:	fea42623          	sw	a0,-20(s0)
20405746:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
2040574a:	fe842783          	lw	a5,-24(s0)
2040574e:	e399                	bnez	a5,20405754 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
20405750:	47ad                	li	a5,11
20405752:	a011                	j	20405756 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
20405754:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
20405756:	853e                	mv	a0,a5
20405758:	4472                	lw	s0,28(sp)
2040575a:	6105                	addi	sp,sp,32
2040575c:	8082                	ret

2040575e <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
2040575e:	7179                	addi	sp,sp,-48
20405760:	d606                	sw	ra,44(sp)
20405762:	d422                	sw	s0,40(sp)
20405764:	1800                	addi	s0,sp,48
20405766:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
2040576a:	fdc42503          	lw	a0,-36(s0)
2040576e:	f2dff0ef          	jal	ra,2040569a <__metal_driver_sifive_plic0_control_base>
20405772:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20405776:	fec42703          	lw	a4,-20(s0)
2040577a:	002007b7          	lui	a5,0x200
2040577e:	0791                	addi	a5,a5,4
20405780:	97ba                	add	a5,a5,a4
20405782:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20405784:	853e                	mv	a0,a5
20405786:	50b2                	lw	ra,44(sp)
20405788:	5422                	lw	s0,40(sp)
2040578a:	6145                	addi	sp,sp,48
2040578c:	8082                	ret

2040578e <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
2040578e:	7179                	addi	sp,sp,-48
20405790:	d606                	sw	ra,44(sp)
20405792:	d422                	sw	s0,40(sp)
20405794:	1800                	addi	s0,sp,48
20405796:	fca42e23          	sw	a0,-36(s0)
2040579a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
2040579e:	fdc42503          	lw	a0,-36(s0)
204057a2:	ef9ff0ef          	jal	ra,2040569a <__metal_driver_sifive_plic0_control_base>
204057a6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204057aa:	fec42703          	lw	a4,-20(s0)
204057ae:	002007b7          	lui	a5,0x200
204057b2:	0791                	addi	a5,a5,4
204057b4:	97ba                	add	a5,a5,a4
204057b6:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
204057b8:	fd842783          	lw	a5,-40(s0)
204057bc:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
204057be:	0001                	nop
204057c0:	50b2                	lw	ra,44(sp)
204057c2:	5422                	lw	s0,40(sp)
204057c4:	6145                	addi	sp,sp,48
204057c6:	8082                	ret

204057c8 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
204057c8:	7179                	addi	sp,sp,-48
204057ca:	d606                	sw	ra,44(sp)
204057cc:	d422                	sw	s0,40(sp)
204057ce:	1800                	addi	s0,sp,48
204057d0:	fca42e23          	sw	a0,-36(s0)
204057d4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
204057d8:	fdc42503          	lw	a0,-36(s0)
204057dc:	ebfff0ef          	jal	ra,2040569a <__metal_driver_sifive_plic0_control_base>
204057e0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204057e4:	fec42703          	lw	a4,-20(s0)
204057e8:	002007b7          	lui	a5,0x200
204057ec:	97ba                	add	a5,a5,a4
204057ee:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
204057f0:	fd842783          	lw	a5,-40(s0)
204057f4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
204057f6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
204057f8:	853e                	mv	a0,a5
204057fa:	50b2                	lw	ra,44(sp)
204057fc:	5422                	lw	s0,40(sp)
204057fe:	6145                	addi	sp,sp,48
20405800:	8082                	ret

20405802 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20405802:	7179                	addi	sp,sp,-48
20405804:	d606                	sw	ra,44(sp)
20405806:	d422                	sw	s0,40(sp)
20405808:	1800                	addi	s0,sp,48
2040580a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
2040580e:	fdc42503          	lw	a0,-36(s0)
20405812:	e89ff0ef          	jal	ra,2040569a <__metal_driver_sifive_plic0_control_base>
20405816:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040581a:	fec42703          	lw	a4,-20(s0)
2040581e:	002007b7          	lui	a5,0x200
20405822:	97ba                	add	a5,a5,a4
20405824:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20405826:	853e                	mv	a0,a5
20405828:	50b2                	lw	ra,44(sp)
2040582a:	5422                	lw	s0,40(sp)
2040582c:	6145                	addi	sp,sp,48
2040582e:	8082                	ret

20405830 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20405830:	7179                	addi	sp,sp,-48
20405832:	d606                	sw	ra,44(sp)
20405834:	d422                	sw	s0,40(sp)
20405836:	1800                	addi	s0,sp,48
20405838:	fca42e23          	sw	a0,-36(s0)
2040583c:	fcb42c23          	sw	a1,-40(s0)
20405840:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20405844:	fdc42503          	lw	a0,-36(s0)
20405848:	e53ff0ef          	jal	ra,2040569a <__metal_driver_sifive_plic0_control_base>
2040584c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20405850:	fdc42503          	lw	a0,-36(s0)
20405854:	e99ff0ef          	jal	ra,204056ec <__metal_driver_sifive_plic0_max_priority>
20405858:	87aa                	mv	a5,a0
2040585a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
2040585e:	fe842783          	lw	a5,-24(s0)
20405862:	c785                	beqz	a5,2040588a <__metal_plic0_set_priority+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20405864:	fd442703          	lw	a4,-44(s0)
20405868:	fe842783          	lw	a5,-24(s0)
2040586c:	00f77f63          	bgeu	a4,a5,2040588a <__metal_plic0_set_priority+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20405870:	fd842783          	lw	a5,-40(s0)
20405874:	078a                	slli	a5,a5,0x2
20405876:	873e                	mv	a4,a5
20405878:	fec42783          	lw	a5,-20(s0)
2040587c:	97ba                	add	a5,a5,a4
2040587e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20405880:	fd442783          	lw	a5,-44(s0)
20405884:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20405886:	4781                	li	a5,0
20405888:	a011                	j	2040588c <__metal_plic0_set_priority+0x5c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
2040588a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
2040588c:	853e                	mv	a0,a5
2040588e:	50b2                	lw	ra,44(sp)
20405890:	5422                	lw	s0,40(sp)
20405892:	6145                	addi	sp,sp,48
20405894:	8082                	ret

20405896 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20405896:	7179                	addi	sp,sp,-48
20405898:	d606                	sw	ra,44(sp)
2040589a:	d422                	sw	s0,40(sp)
2040589c:	1800                	addi	s0,sp,48
2040589e:	fca42e23          	sw	a0,-36(s0)
204058a2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
204058a6:	fdc42503          	lw	a0,-36(s0)
204058aa:	df1ff0ef          	jal	ra,2040569a <__metal_driver_sifive_plic0_control_base>
204058ae:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204058b2:	fd842783          	lw	a5,-40(s0)
204058b6:	078a                	slli	a5,a5,0x2
204058b8:	873e                	mv	a4,a5
204058ba:	fec42783          	lw	a5,-20(s0)
204058be:	97ba                	add	a5,a5,a4
204058c0:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
204058c2:	853e                	mv	a0,a5
204058c4:	50b2                	lw	ra,44(sp)
204058c6:	5422                	lw	s0,40(sp)
204058c8:	6145                	addi	sp,sp,48
204058ca:	8082                	ret

204058cc <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
204058cc:	7179                	addi	sp,sp,-48
204058ce:	d606                	sw	ra,44(sp)
204058d0:	d422                	sw	s0,40(sp)
204058d2:	1800                	addi	s0,sp,48
204058d4:	fca42e23          	sw	a0,-36(s0)
204058d8:	fcb42c23          	sw	a1,-40(s0)
204058dc:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204058e0:	fdc42503          	lw	a0,-36(s0)
204058e4:	db7ff0ef          	jal	ra,2040569a <__metal_driver_sifive_plic0_control_base>
204058e8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204058ec:	fd842783          	lw	a5,-40(s0)
204058f0:	8795                	srai	a5,a5,0x5
204058f2:	078a                	slli	a5,a5,0x2
204058f4:	873e                	mv	a4,a5
204058f6:	fec42783          	lw	a5,-20(s0)
204058fa:	973e                	add	a4,a4,a5
204058fc:	6789                	lui	a5,0x2
204058fe:	97ba                	add	a5,a5,a4
20405900:	439c                	lw	a5,0(a5)
20405902:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20405906:	fd442783          	lw	a5,-44(s0)
2040590a:	cf81                	beqz	a5,20405922 <__metal_plic0_enable+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
2040590c:	fd842783          	lw	a5,-40(s0)
20405910:	8bfd                	andi	a5,a5,31
20405912:	4705                	li	a4,1
20405914:	00f717b3          	sll	a5,a4,a5
20405918:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
2040591a:	fe842783          	lw	a5,-24(s0)
2040591e:	8fd9                	or	a5,a5,a4
20405920:	a829                	j	2040593a <__metal_plic0_enable+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20405922:	fd842783          	lw	a5,-40(s0)
20405926:	8bfd                	andi	a5,a5,31
20405928:	4705                	li	a4,1
2040592a:	00f717b3          	sll	a5,a4,a5
2040592e:	fff7c793          	not	a5,a5
20405932:	873e                	mv	a4,a5
20405934:	fe842783          	lw	a5,-24(s0)
20405938:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040593a:	fd842703          	lw	a4,-40(s0)
2040593e:	8715                	srai	a4,a4,0x5
20405940:	070a                	slli	a4,a4,0x2
20405942:	86ba                	mv	a3,a4
20405944:	fec42703          	lw	a4,-20(s0)
20405948:	96ba                	add	a3,a3,a4
2040594a:	6709                	lui	a4,0x2
2040594c:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
2040594e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20405950:	0001                	nop
20405952:	50b2                	lw	ra,44(sp)
20405954:	5422                	lw	s0,40(sp)
20405956:	6145                	addi	sp,sp,48
20405958:	8082                	ret

2040595a <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
2040595a:	1101                	addi	sp,sp,-32
2040595c:	ce06                	sw	ra,28(sp)
2040595e:	cc22                	sw	s0,24(sp)
20405960:	1000                	addi	s0,sp,32
20405962:	fea42623          	sw	a0,-20(s0)
20405966:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
2040596a:	12c00513          	li	a0,300
2040596e:	1e4010ef          	jal	ra,20406b52 <metal_shutdown>

20405972 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20405972:	7179                	addi	sp,sp,-48
20405974:	d606                	sw	ra,44(sp)
20405976:	d422                	sw	s0,40(sp)
20405978:	1800                	addi	s0,sp,48
2040597a:	fca42e23          	sw	a0,-36(s0)
2040597e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20405982:	fd842783          	lw	a5,-40(s0)
20405986:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
2040598a:	fec42503          	lw	a0,-20(s0)
2040598e:	dd1ff0ef          	jal	ra,2040575e <__metal_plic0_claim_interrupt>
20405992:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20405996:	fec42503          	lw	a0,-20(s0)
2040599a:	d2bff0ef          	jal	ra,204056c4 <__metal_driver_sifive_plic0_num_interrupts>
2040599e:	87aa                	mv	a5,a0
204059a0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
204059a4:	fe842703          	lw	a4,-24(s0)
204059a8:	fe442783          	lw	a5,-28(s0)
204059ac:	04f77263          	bgeu	a4,a5,204059f0 <__metal_plic0_handler+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
204059b0:	fec42703          	lw	a4,-20(s0)
204059b4:	fe842783          	lw	a5,-24(s0)
204059b8:	078a                	slli	a5,a5,0x2
204059ba:	97ba                	add	a5,a5,a4
204059bc:	479c                	lw	a5,8(a5)
204059be:	cb8d                	beqz	a5,204059f0 <__metal_plic0_handler+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
204059c0:	fec42703          	lw	a4,-20(s0)
204059c4:	fe842783          	lw	a5,-24(s0)
204059c8:	078a                	slli	a5,a5,0x2
204059ca:	97ba                	add	a5,a5,a4
204059cc:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
204059d0:	fe842603          	lw	a2,-24(s0)
204059d4:	fec42683          	lw	a3,-20(s0)
204059d8:	fe842703          	lw	a4,-24(s0)
204059dc:	87ba                	mv	a5,a4
204059de:	0786                	slli	a5,a5,0x1
204059e0:	97ba                	add	a5,a5,a4
204059e2:	078e                	slli	a5,a5,0x3
204059e4:	97b6                	add	a5,a5,a3
204059e6:	0887a783          	lw	a5,136(a5)
204059ea:	85be                	mv	a1,a5
204059ec:	8532                	mv	a0,a2
204059ee:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
204059f0:	fe842583          	lw	a1,-24(s0)
204059f4:	fec42503          	lw	a0,-20(s0)
204059f8:	d97ff0ef          	jal	ra,2040578e <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
204059fc:	0001                	nop
204059fe:	50b2                	lw	ra,44(sp)
20405a00:	5422                	lw	s0,40(sp)
20405a02:	6145                	addi	sp,sp,48
20405a04:	8082                	ret

20405a06 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20405a06:	7139                	addi	sp,sp,-64
20405a08:	de06                	sw	ra,60(sp)
20405a0a:	dc22                	sw	s0,56(sp)
20405a0c:	0080                	addi	s0,sp,64
20405a0e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20405a12:	fcc42783          	lw	a5,-52(s0)
20405a16:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20405a1a:	fe442783          	lw	a5,-28(s0)
20405a1e:	43dc                	lw	a5,4(a5)
20405a20:	12079263          	bnez	a5,20405b44 <__metal_driver_riscv_plic0_init+0x13e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20405a24:	fe042623          	sw	zero,-20(s0)
20405a28:	a231                	j	20405b34 <__metal_driver_riscv_plic0_init+0x12e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20405a2a:	fcc42503          	lw	a0,-52(s0)
20405a2e:	c97ff0ef          	jal	ra,204056c4 <__metal_driver_sifive_plic0_num_interrupts>
20405a32:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20405a36:	fec42583          	lw	a1,-20(s0)
20405a3a:	fcc42503          	lw	a0,-52(s0)
20405a3e:	cd7ff0ef          	jal	ra,20405714 <__metal_driver_sifive_plic0_interrupt_parents>
20405a42:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20405a46:	fec42583          	lw	a1,-20(s0)
20405a4a:	fcc42503          	lw	a0,-52(s0)
20405a4e:	cefff0ef          	jal	ra,2040573c <__metal_driver_sifive_plic0_interrupt_lines>
20405a52:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
20405a56:	fdc42783          	lw	a5,-36(s0)
20405a5a:	439c                	lw	a5,0(a5)
20405a5c:	439c                	lw	a5,0(a5)
20405a5e:	fdc42503          	lw	a0,-36(s0)
20405a62:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20405a64:	fe042423          	sw	zero,-24(s0)
20405a68:	a095                	j	20405acc <__metal_driver_riscv_plic0_init+0xc6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20405a6a:	4601                	li	a2,0
20405a6c:	fe842583          	lw	a1,-24(s0)
20405a70:	fe442503          	lw	a0,-28(s0)
20405a74:	e59ff0ef          	jal	ra,204058cc <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
20405a78:	4601                	li	a2,0
20405a7a:	fe842583          	lw	a1,-24(s0)
20405a7e:	fcc42503          	lw	a0,-52(s0)
20405a82:	dafff0ef          	jal	ra,20405830 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20405a86:	fe442703          	lw	a4,-28(s0)
20405a8a:	fe842783          	lw	a5,-24(s0)
20405a8e:	078a                	slli	a5,a5,0x2
20405a90:	97ba                	add	a5,a5,a4
20405a92:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20405a96:	fe442683          	lw	a3,-28(s0)
20405a9a:	fe842703          	lw	a4,-24(s0)
20405a9e:	87ba                	mv	a5,a4
20405aa0:	0786                	slli	a5,a5,0x1
20405aa2:	97ba                	add	a5,a5,a4
20405aa4:	078e                	slli	a5,a5,0x3
20405aa6:	97b6                	add	a5,a5,a3
20405aa8:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20405aac:	fe442683          	lw	a3,-28(s0)
20405ab0:	fe842703          	lw	a4,-24(s0)
20405ab4:	87ba                	mv	a5,a4
20405ab6:	0786                	slli	a5,a5,0x1
20405ab8:	97ba                	add	a5,a5,a4
20405aba:	078e                	slli	a5,a5,0x3
20405abc:	97b6                	add	a5,a5,a3
20405abe:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20405ac2:	fe842783          	lw	a5,-24(s0)
20405ac6:	0785                	addi	a5,a5,1
20405ac8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20405acc:	fe842703          	lw	a4,-24(s0)
20405ad0:	fe042783          	lw	a5,-32(s0)
20405ad4:	f8f74be3          	blt	a4,a5,20405a6a <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
20405ad8:	4581                	li	a1,0
20405ada:	fcc42503          	lw	a0,-52(s0)
20405ade:	cebff0ef          	jal	ra,204057c8 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20405ae2:	fdc42783          	lw	a5,-36(s0)
20405ae6:	439c                	lw	a5,0(a5)
20405ae8:	4fdc                	lw	a5,28(a5)
20405aea:	fe442683          	lw	a3,-28(s0)
20405aee:	4601                	li	a2,0
20405af0:	fd842583          	lw	a1,-40(s0)
20405af4:	fdc42503          	lw	a0,-36(s0)
20405af8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
20405afa:	fdc42783          	lw	a5,-36(s0)
20405afe:	439c                	lw	a5,0(a5)
20405b00:	4fd8                	lw	a4,28(a5)
20405b02:	fe442683          	lw	a3,-28(s0)
20405b06:	204067b7          	lui	a5,0x20406
20405b0a:	97278613          	addi	a2,a5,-1678 # 20405972 <__metal_plic0_handler>
20405b0e:	fd842583          	lw	a1,-40(s0)
20405b12:	fdc42503          	lw	a0,-36(s0)
20405b16:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
20405b18:	fdc42783          	lw	a5,-36(s0)
20405b1c:	439c                	lw	a5,0(a5)
20405b1e:	53dc                	lw	a5,36(a5)
20405b20:	fd842583          	lw	a1,-40(s0)
20405b24:	fdc42503          	lw	a0,-36(s0)
20405b28:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20405b2a:	fec42783          	lw	a5,-20(s0)
20405b2e:	0785                	addi	a5,a5,1
20405b30:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20405b34:	fec42783          	lw	a5,-20(s0)
20405b38:	eef059e3          	blez	a5,20405a2a <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20405b3c:	fe442783          	lw	a5,-28(s0)
20405b40:	4705                	li	a4,1
20405b42:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20405b44:	0001                	nop
20405b46:	50f2                	lw	ra,60(sp)
20405b48:	5462                	lw	s0,56(sp)
20405b4a:	6121                	addi	sp,sp,64
20405b4c:	8082                	ret

20405b4e <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20405b4e:	7179                	addi	sp,sp,-48
20405b50:	d606                	sw	ra,44(sp)
20405b52:	d422                	sw	s0,40(sp)
20405b54:	1800                	addi	s0,sp,48
20405b56:	fca42e23          	sw	a0,-36(s0)
20405b5a:	fcb42c23          	sw	a1,-40(s0)
20405b5e:	fcc42a23          	sw	a2,-44(s0)
20405b62:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20405b66:	fdc42783          	lw	a5,-36(s0)
20405b6a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20405b6e:	fdc42503          	lw	a0,-36(s0)
20405b72:	b53ff0ef          	jal	ra,204056c4 <__metal_driver_sifive_plic0_num_interrupts>
20405b76:	872a                	mv	a4,a0
20405b78:	fd842783          	lw	a5,-40(s0)
20405b7c:	00e7c463          	blt	a5,a4,20405b84 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20405b80:	57fd                	li	a5,-1
20405b82:	a051                	j	20405c06 <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20405b84:	fd442783          	lw	a5,-44(s0)
20405b88:	cf9d                	beqz	a5,20405bc6 <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
20405b8a:	4609                	li	a2,2
20405b8c:	fd842583          	lw	a1,-40(s0)
20405b90:	fdc42503          	lw	a0,-36(s0)
20405b94:	c9dff0ef          	jal	ra,20405830 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
20405b98:	fec42703          	lw	a4,-20(s0)
20405b9c:	fd842783          	lw	a5,-40(s0)
20405ba0:	078a                	slli	a5,a5,0x2
20405ba2:	97ba                	add	a5,a5,a4
20405ba4:	fd442703          	lw	a4,-44(s0)
20405ba8:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
20405baa:	fec42683          	lw	a3,-20(s0)
20405bae:	fd842703          	lw	a4,-40(s0)
20405bb2:	87ba                	mv	a5,a4
20405bb4:	0786                	slli	a5,a5,0x1
20405bb6:	97ba                	add	a5,a5,a4
20405bb8:	078e                	slli	a5,a5,0x3
20405bba:	97b6                	add	a5,a5,a3
20405bbc:	fd042703          	lw	a4,-48(s0)
20405bc0:	08e7a423          	sw	a4,136(a5)
20405bc4:	a081                	j	20405c04 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20405bc6:	4605                	li	a2,1
20405bc8:	fd842583          	lw	a1,-40(s0)
20405bcc:	fdc42503          	lw	a0,-36(s0)
20405bd0:	c61ff0ef          	jal	ra,20405830 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20405bd4:	fec42703          	lw	a4,-20(s0)
20405bd8:	fd842783          	lw	a5,-40(s0)
20405bdc:	078a                	slli	a5,a5,0x2
20405bde:	97ba                	add	a5,a5,a4
20405be0:	20406737          	lui	a4,0x20406
20405be4:	95a70713          	addi	a4,a4,-1702 # 2040595a <__metal_plic0_default_handler>
20405be8:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
20405bea:	fec42683          	lw	a3,-20(s0)
20405bee:	fd842703          	lw	a4,-40(s0)
20405bf2:	87ba                	mv	a5,a4
20405bf4:	0786                	slli	a5,a5,0x1
20405bf6:	97ba                	add	a5,a5,a4
20405bf8:	078e                	slli	a5,a5,0x3
20405bfa:	97b6                	add	a5,a5,a3
20405bfc:	fd042703          	lw	a4,-48(s0)
20405c00:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20405c04:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
20405c06:	853e                	mv	a0,a5
20405c08:	50b2                	lw	ra,44(sp)
20405c0a:	5422                	lw	s0,40(sp)
20405c0c:	6145                	addi	sp,sp,48
20405c0e:	8082                	ret

20405c10 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20405c10:	7179                	addi	sp,sp,-48
20405c12:	d606                	sw	ra,44(sp)
20405c14:	d422                	sw	s0,40(sp)
20405c16:	1800                	addi	s0,sp,48
20405c18:	fca42e23          	sw	a0,-36(s0)
20405c1c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20405c20:	fdc42783          	lw	a5,-36(s0)
20405c24:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20405c28:	fdc42503          	lw	a0,-36(s0)
20405c2c:	a99ff0ef          	jal	ra,204056c4 <__metal_driver_sifive_plic0_num_interrupts>
20405c30:	872a                	mv	a4,a0
20405c32:	fd842783          	lw	a5,-40(s0)
20405c36:	00e7c463          	blt	a5,a4,20405c3e <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
20405c3a:	57fd                	li	a5,-1
20405c3c:	a809                	j	20405c4e <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20405c3e:	4605                	li	a2,1
20405c40:	fd842583          	lw	a1,-40(s0)
20405c44:	fec42503          	lw	a0,-20(s0)
20405c48:	c85ff0ef          	jal	ra,204058cc <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
20405c4c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20405c4e:	853e                	mv	a0,a5
20405c50:	50b2                	lw	ra,44(sp)
20405c52:	5422                	lw	s0,40(sp)
20405c54:	6145                	addi	sp,sp,48
20405c56:	8082                	ret

20405c58 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20405c58:	7179                	addi	sp,sp,-48
20405c5a:	d606                	sw	ra,44(sp)
20405c5c:	d422                	sw	s0,40(sp)
20405c5e:	1800                	addi	s0,sp,48
20405c60:	fca42e23          	sw	a0,-36(s0)
20405c64:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20405c68:	fdc42783          	lw	a5,-36(s0)
20405c6c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20405c70:	fdc42503          	lw	a0,-36(s0)
20405c74:	a51ff0ef          	jal	ra,204056c4 <__metal_driver_sifive_plic0_num_interrupts>
20405c78:	872a                	mv	a4,a0
20405c7a:	fd842783          	lw	a5,-40(s0)
20405c7e:	00e7c463          	blt	a5,a4,20405c86 <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20405c82:	57fd                	li	a5,-1
20405c84:	a809                	j	20405c96 <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20405c86:	4601                	li	a2,0
20405c88:	fd842583          	lw	a1,-40(s0)
20405c8c:	fec42503          	lw	a0,-20(s0)
20405c90:	c3dff0ef          	jal	ra,204058cc <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20405c94:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20405c96:	853e                	mv	a0,a5
20405c98:	50b2                	lw	ra,44(sp)
20405c9a:	5422                	lw	s0,40(sp)
20405c9c:	6145                	addi	sp,sp,48
20405c9e:	8082                	ret

20405ca0 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20405ca0:	1101                	addi	sp,sp,-32
20405ca2:	ce22                	sw	s0,28(sp)
20405ca4:	1000                	addi	s0,sp,32
20405ca6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20405caa:	fec42703          	lw	a4,-20(s0)
20405cae:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405cb2:	00f71563          	bne	a4,a5,20405cbc <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20405cb6:	100127b7          	lui	a5,0x10012
20405cba:	a011                	j	20405cbe <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
20405cbc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
20405cbe:	853e                	mv	a0,a5
20405cc0:	4472                	lw	s0,28(sp)
20405cc2:	6105                	addi	sp,sp,32
20405cc4:	8082                	ret

20405cc6 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
20405cc6:	1101                	addi	sp,sp,-32
20405cc8:	ce22                	sw	s0,28(sp)
20405cca:	1000                	addi	s0,sp,32
20405ccc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20405cd0:	fec42703          	lw	a4,-20(s0)
20405cd4:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405cd8:	00f71763          	bne	a4,a5,20405ce6 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20405cdc:	800017b7          	lui	a5,0x80001
20405ce0:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffd864>
20405ce4:	a011                	j	20405ce8 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
20405ce6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
20405ce8:	853e                	mv	a0,a5
20405cea:	4472                	lw	s0,28(sp)
20405cec:	6105                	addi	sp,sp,32
20405cee:	8082                	ret

20405cf0 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
20405cf0:	1101                	addi	sp,sp,-32
20405cf2:	ce22                	sw	s0,28(sp)
20405cf4:	1000                	addi	s0,sp,32
20405cf6:	fea42623          	sw	a0,-20(s0)
20405cfa:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20405cfe:	fec42703          	lw	a4,-20(s0)
20405d02:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405d06:	00f71763          	bne	a4,a5,20405d14 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
20405d0a:	fe842783          	lw	a5,-24(s0)
20405d0e:	e399                	bnez	a5,20405d14 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
20405d10:	479d                	li	a5,7
20405d12:	a269                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20405d14:	fec42703          	lw	a4,-20(s0)
20405d18:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405d1c:	00f71963          	bne	a4,a5,20405d2e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
20405d20:	fe842703          	lw	a4,-24(s0)
20405d24:	4785                	li	a5,1
20405d26:	00f71463          	bne	a4,a5,20405d2e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
20405d2a:	47a1                	li	a5,8
20405d2c:	aa85                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20405d2e:	fec42703          	lw	a4,-20(s0)
20405d32:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405d36:	00f71963          	bne	a4,a5,20405d48 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
20405d3a:	fe842703          	lw	a4,-24(s0)
20405d3e:	4789                	li	a5,2
20405d40:	00f71463          	bne	a4,a5,20405d48 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
20405d44:	47a5                	li	a5,9
20405d46:	aa99                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20405d48:	fec42703          	lw	a4,-20(s0)
20405d4c:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405d50:	00f71963          	bne	a4,a5,20405d62 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
20405d54:	fe842703          	lw	a4,-24(s0)
20405d58:	478d                	li	a5,3
20405d5a:	00f71463          	bne	a4,a5,20405d62 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
20405d5e:	47a9                	li	a5,10
20405d60:	aa35                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20405d62:	fec42703          	lw	a4,-20(s0)
20405d66:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405d6a:	00f71963          	bne	a4,a5,20405d7c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
20405d6e:	fe842703          	lw	a4,-24(s0)
20405d72:	4791                	li	a5,4
20405d74:	00f71463          	bne	a4,a5,20405d7c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
20405d78:	47ad                	li	a5,11
20405d7a:	a20d                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
20405d7c:	fec42703          	lw	a4,-20(s0)
20405d80:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405d84:	00f71963          	bne	a4,a5,20405d96 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
20405d88:	fe842703          	lw	a4,-24(s0)
20405d8c:	4795                	li	a5,5
20405d8e:	00f71463          	bne	a4,a5,20405d96 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
20405d92:	47b1                	li	a5,12
20405d94:	a221                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20405d96:	fec42703          	lw	a4,-20(s0)
20405d9a:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405d9e:	00f71963          	bne	a4,a5,20405db0 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
20405da2:	fe842703          	lw	a4,-24(s0)
20405da6:	4799                	li	a5,6
20405da8:	00f71463          	bne	a4,a5,20405db0 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
20405dac:	47b5                	li	a5,13
20405dae:	a0fd                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20405db0:	fec42703          	lw	a4,-20(s0)
20405db4:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405db8:	00f71963          	bne	a4,a5,20405dca <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
20405dbc:	fe842703          	lw	a4,-24(s0)
20405dc0:	479d                	li	a5,7
20405dc2:	00f71463          	bne	a4,a5,20405dca <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
20405dc6:	47b9                	li	a5,14
20405dc8:	a8d1                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
20405dca:	fec42703          	lw	a4,-20(s0)
20405dce:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405dd2:	00f71963          	bne	a4,a5,20405de4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
20405dd6:	fe842703          	lw	a4,-24(s0)
20405dda:	47a1                	li	a5,8
20405ddc:	00f71463          	bne	a4,a5,20405de4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
20405de0:	47bd                	li	a5,15
20405de2:	a86d                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20405de4:	fec42703          	lw	a4,-20(s0)
20405de8:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405dec:	00f71963          	bne	a4,a5,20405dfe <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
20405df0:	fe842703          	lw	a4,-24(s0)
20405df4:	47a5                	li	a5,9
20405df6:	00f71463          	bne	a4,a5,20405dfe <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
20405dfa:	47c1                	li	a5,16
20405dfc:	a045                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20405dfe:	fec42703          	lw	a4,-20(s0)
20405e02:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405e06:	00f71963          	bne	a4,a5,20405e18 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
20405e0a:	fe842703          	lw	a4,-24(s0)
20405e0e:	47a9                	li	a5,10
20405e10:	00f71463          	bne	a4,a5,20405e18 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
20405e14:	47c5                	li	a5,17
20405e16:	a059                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
20405e18:	fec42703          	lw	a4,-20(s0)
20405e1c:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405e20:	00f71963          	bne	a4,a5,20405e32 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
20405e24:	fe842703          	lw	a4,-24(s0)
20405e28:	47ad                	li	a5,11
20405e2a:	00f71463          	bne	a4,a5,20405e32 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
20405e2e:	47c9                	li	a5,18
20405e30:	a0b5                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20405e32:	fec42703          	lw	a4,-20(s0)
20405e36:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405e3a:	00f71963          	bne	a4,a5,20405e4c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
20405e3e:	fe842703          	lw	a4,-24(s0)
20405e42:	47b1                	li	a5,12
20405e44:	00f71463          	bne	a4,a5,20405e4c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
20405e48:	47cd                	li	a5,19
20405e4a:	a889                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
20405e4c:	fec42703          	lw	a4,-20(s0)
20405e50:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405e54:	00f71963          	bne	a4,a5,20405e66 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
20405e58:	fe842703          	lw	a4,-24(s0)
20405e5c:	47b5                	li	a5,13
20405e5e:	00f71463          	bne	a4,a5,20405e66 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
20405e62:	47d1                	li	a5,20
20405e64:	a825                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20405e66:	fec42703          	lw	a4,-20(s0)
20405e6a:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405e6e:	00f71963          	bne	a4,a5,20405e80 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
20405e72:	fe842703          	lw	a4,-24(s0)
20405e76:	47b9                	li	a5,14
20405e78:	00f71463          	bne	a4,a5,20405e80 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
20405e7c:	47d5                	li	a5,21
20405e7e:	a839                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20405e80:	fec42703          	lw	a4,-20(s0)
20405e84:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405e88:	00f71963          	bne	a4,a5,20405e9a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
20405e8c:	fe842703          	lw	a4,-24(s0)
20405e90:	47bd                	li	a5,15
20405e92:	00f71463          	bne	a4,a5,20405e9a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
20405e96:	47d9                	li	a5,22
20405e98:	a011                	j	20405e9c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
20405e9a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
20405e9c:	853e                	mv	a0,a5
20405e9e:	4472                	lw	s0,28(sp)
20405ea0:	6105                	addi	sp,sp,32
20405ea2:	8082                	ret

20405ea4 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20405ea4:	7179                	addi	sp,sp,-48
20405ea6:	d606                	sw	ra,44(sp)
20405ea8:	d422                	sw	s0,40(sp)
20405eaa:	1800                	addi	s0,sp,48
20405eac:	fca42e23          	sw	a0,-36(s0)
20405eb0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405eb4:	fdc42503          	lw	a0,-36(s0)
20405eb8:	de9ff0ef          	jal	ra,20405ca0 <__metal_driver_sifive_gpio0_base>
20405ebc:	87aa                	mv	a5,a0
20405ebe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20405ec2:	fec42783          	lw	a5,-20(s0)
20405ec6:	0791                	addi	a5,a5,4
20405ec8:	4398                	lw	a4,0(a5)
20405eca:	fd842783          	lw	a5,-40(s0)
20405ece:	fec42683          	lw	a3,-20(s0)
20405ed2:	0691                	addi	a3,a3,4
20405ed4:	8fd9                	or	a5,a5,a4
20405ed6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
20405ed8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
20405eda:	853e                	mv	a0,a5
20405edc:	50b2                	lw	ra,44(sp)
20405ede:	5422                	lw	s0,40(sp)
20405ee0:	6145                	addi	sp,sp,48
20405ee2:	8082                	ret

20405ee4 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20405ee4:	7179                	addi	sp,sp,-48
20405ee6:	d606                	sw	ra,44(sp)
20405ee8:	d422                	sw	s0,40(sp)
20405eea:	1800                	addi	s0,sp,48
20405eec:	fca42e23          	sw	a0,-36(s0)
20405ef0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405ef4:	fdc42503          	lw	a0,-36(s0)
20405ef8:	da9ff0ef          	jal	ra,20405ca0 <__metal_driver_sifive_gpio0_base>
20405efc:	87aa                	mv	a5,a0
20405efe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
20405f02:	fec42783          	lw	a5,-20(s0)
20405f06:	0791                	addi	a5,a5,4
20405f08:	439c                	lw	a5,0(a5)
20405f0a:	fd842703          	lw	a4,-40(s0)
20405f0e:	fff74713          	not	a4,a4
20405f12:	86ba                	mv	a3,a4
20405f14:	fec42703          	lw	a4,-20(s0)
20405f18:	0711                	addi	a4,a4,4
20405f1a:	8ff5                	and	a5,a5,a3
20405f1c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
20405f1e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
20405f20:	853e                	mv	a0,a5
20405f22:	50b2                	lw	ra,44(sp)
20405f24:	5422                	lw	s0,40(sp)
20405f26:	6145                	addi	sp,sp,48
20405f28:	8082                	ret

20405f2a <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
20405f2a:	7179                	addi	sp,sp,-48
20405f2c:	d606                	sw	ra,44(sp)
20405f2e:	d422                	sw	s0,40(sp)
20405f30:	1800                	addi	s0,sp,48
20405f32:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405f36:	fdc42503          	lw	a0,-36(s0)
20405f3a:	d67ff0ef          	jal	ra,20405ca0 <__metal_driver_sifive_gpio0_base>
20405f3e:	87aa                	mv	a5,a0
20405f40:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20405f44:	fec42783          	lw	a5,-20(s0)
20405f48:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20405f4a:	853e                	mv	a0,a5
20405f4c:	50b2                	lw	ra,44(sp)
20405f4e:	5422                	lw	s0,40(sp)
20405f50:	6145                	addi	sp,sp,48
20405f52:	8082                	ret

20405f54 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20405f54:	7179                	addi	sp,sp,-48
20405f56:	d606                	sw	ra,44(sp)
20405f58:	d422                	sw	s0,40(sp)
20405f5a:	1800                	addi	s0,sp,48
20405f5c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405f60:	fdc42503          	lw	a0,-36(s0)
20405f64:	d3dff0ef          	jal	ra,20405ca0 <__metal_driver_sifive_gpio0_base>
20405f68:	87aa                	mv	a5,a0
20405f6a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
20405f6e:	fec42783          	lw	a5,-20(s0)
20405f72:	07b1                	addi	a5,a5,12
20405f74:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
20405f76:	853e                	mv	a0,a5
20405f78:	50b2                	lw	ra,44(sp)
20405f7a:	5422                	lw	s0,40(sp)
20405f7c:	6145                	addi	sp,sp,48
20405f7e:	8082                	ret

20405f80 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
20405f80:	7179                	addi	sp,sp,-48
20405f82:	d606                	sw	ra,44(sp)
20405f84:	d422                	sw	s0,40(sp)
20405f86:	1800                	addi	s0,sp,48
20405f88:	fca42e23          	sw	a0,-36(s0)
20405f8c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405f90:	fdc42503          	lw	a0,-36(s0)
20405f94:	d0dff0ef          	jal	ra,20405ca0 <__metal_driver_sifive_gpio0_base>
20405f98:	87aa                	mv	a5,a0
20405f9a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20405f9e:	fec42783          	lw	a5,-20(s0)
20405fa2:	07a1                	addi	a5,a5,8
20405fa4:	439c                	lw	a5,0(a5)
20405fa6:	fd842703          	lw	a4,-40(s0)
20405faa:	fff74713          	not	a4,a4
20405fae:	86ba                	mv	a3,a4
20405fb0:	fec42703          	lw	a4,-20(s0)
20405fb4:	0721                	addi	a4,a4,8
20405fb6:	8ff5                	and	a5,a5,a3
20405fb8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20405fba:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20405fbc:	853e                	mv	a0,a5
20405fbe:	50b2                	lw	ra,44(sp)
20405fc0:	5422                	lw	s0,40(sp)
20405fc2:	6145                	addi	sp,sp,48
20405fc4:	8082                	ret

20405fc6 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20405fc6:	7179                	addi	sp,sp,-48
20405fc8:	d606                	sw	ra,44(sp)
20405fca:	d422                	sw	s0,40(sp)
20405fcc:	1800                	addi	s0,sp,48
20405fce:	fca42e23          	sw	a0,-36(s0)
20405fd2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405fd6:	fdc42503          	lw	a0,-36(s0)
20405fda:	cc7ff0ef          	jal	ra,20405ca0 <__metal_driver_sifive_gpio0_base>
20405fde:	87aa                	mv	a5,a0
20405fe0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
20405fe4:	fec42783          	lw	a5,-20(s0)
20405fe8:	07a1                	addi	a5,a5,8
20405fea:	4398                	lw	a4,0(a5)
20405fec:	fd842783          	lw	a5,-40(s0)
20405ff0:	fec42683          	lw	a3,-20(s0)
20405ff4:	06a1                	addi	a3,a3,8
20405ff6:	8fd9                	or	a5,a5,a4
20405ff8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
20405ffa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20405ffc:	853e                	mv	a0,a5
20405ffe:	50b2                	lw	ra,44(sp)
20406000:	5422                	lw	s0,40(sp)
20406002:	6145                	addi	sp,sp,48
20406004:	8082                	ret

20406006 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20406006:	7179                	addi	sp,sp,-48
20406008:	d606                	sw	ra,44(sp)
2040600a:	d422                	sw	s0,40(sp)
2040600c:	1800                	addi	s0,sp,48
2040600e:	fca42e23          	sw	a0,-36(s0)
20406012:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406016:	fdc42503          	lw	a0,-36(s0)
2040601a:	c87ff0ef          	jal	ra,20405ca0 <__metal_driver_sifive_gpio0_base>
2040601e:	87aa                	mv	a5,a0
20406020:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20406024:	fec42783          	lw	a5,-20(s0)
20406028:	07b1                	addi	a5,a5,12
2040602a:	4398                	lw	a4,0(a5)
2040602c:	fd842783          	lw	a5,-40(s0)
20406030:	fec42683          	lw	a3,-20(s0)
20406034:	06b1                	addi	a3,a3,12
20406036:	8fd9                	or	a5,a5,a4
20406038:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
2040603a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
2040603c:	853e                	mv	a0,a5
2040603e:	50b2                	lw	ra,44(sp)
20406040:	5422                	lw	s0,40(sp)
20406042:	6145                	addi	sp,sp,48
20406044:	8082                	ret

20406046 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20406046:	7179                	addi	sp,sp,-48
20406048:	d606                	sw	ra,44(sp)
2040604a:	d422                	sw	s0,40(sp)
2040604c:	1800                	addi	s0,sp,48
2040604e:	fca42e23          	sw	a0,-36(s0)
20406052:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406056:	fdc42503          	lw	a0,-36(s0)
2040605a:	c47ff0ef          	jal	ra,20405ca0 <__metal_driver_sifive_gpio0_base>
2040605e:	87aa                	mv	a5,a0
20406060:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
20406064:	fec42783          	lw	a5,-20(s0)
20406068:	07b1                	addi	a5,a5,12
2040606a:	439c                	lw	a5,0(a5)
2040606c:	fd842703          	lw	a4,-40(s0)
20406070:	fff74713          	not	a4,a4
20406074:	86ba                	mv	a3,a4
20406076:	fec42703          	lw	a4,-20(s0)
2040607a:	0731                	addi	a4,a4,12
2040607c:	8ff5                	and	a5,a5,a3
2040607e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
20406080:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
20406082:	853e                	mv	a0,a5
20406084:	50b2                	lw	ra,44(sp)
20406086:	5422                	lw	s0,40(sp)
20406088:	6145                	addi	sp,sp,48
2040608a:	8082                	ret

2040608c <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
2040608c:	7179                	addi	sp,sp,-48
2040608e:	d606                	sw	ra,44(sp)
20406090:	d422                	sw	s0,40(sp)
20406092:	1800                	addi	s0,sp,48
20406094:	fca42e23          	sw	a0,-36(s0)
20406098:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040609c:	fdc42503          	lw	a0,-36(s0)
204060a0:	c01ff0ef          	jal	ra,20405ca0 <__metal_driver_sifive_gpio0_base>
204060a4:	87aa                	mv	a5,a0
204060a6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
204060aa:	fec42783          	lw	a5,-20(s0)
204060ae:	07b1                	addi	a5,a5,12
204060b0:	4398                	lw	a4,0(a5)
204060b2:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
204060b6:	fec42683          	lw	a3,-20(s0)
204060ba:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
204060bc:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
204060be:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
204060c0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
204060c2:	853e                	mv	a0,a5
204060c4:	50b2                	lw	ra,44(sp)
204060c6:	5422                	lw	s0,40(sp)
204060c8:	6145                	addi	sp,sp,48
204060ca:	8082                	ret

204060cc <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
204060cc:	7179                	addi	sp,sp,-48
204060ce:	d606                	sw	ra,44(sp)
204060d0:	d422                	sw	s0,40(sp)
204060d2:	1800                	addi	s0,sp,48
204060d4:	fca42e23          	sw	a0,-36(s0)
204060d8:	fcb42c23          	sw	a1,-40(s0)
204060dc:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204060e0:	fdc42503          	lw	a0,-36(s0)
204060e4:	bbdff0ef          	jal	ra,20405ca0 <__metal_driver_sifive_gpio0_base>
204060e8:	87aa                	mv	a5,a0
204060ea:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
204060ee:	fec42783          	lw	a5,-20(s0)
204060f2:	03c78793          	addi	a5,a5,60
204060f6:	439c                	lw	a5,0(a5)
204060f8:	fd842703          	lw	a4,-40(s0)
204060fc:	fff74713          	not	a4,a4
20406100:	86ba                	mv	a3,a4
20406102:	fec42703          	lw	a4,-20(s0)
20406106:	03c70713          	addi	a4,a4,60
2040610a:	8ff5                	and	a5,a5,a3
2040610c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
2040610e:	fec42783          	lw	a5,-20(s0)
20406112:	03878793          	addi	a5,a5,56
20406116:	4398                	lw	a4,0(a5)
20406118:	fd442783          	lw	a5,-44(s0)
2040611c:	fec42683          	lw	a3,-20(s0)
20406120:	03868693          	addi	a3,a3,56
20406124:	8fd9                	or	a5,a5,a4
20406126:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20406128:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
2040612a:	853e                	mv	a0,a5
2040612c:	50b2                	lw	ra,44(sp)
2040612e:	5422                	lw	s0,40(sp)
20406130:	6145                	addi	sp,sp,48
20406132:	8082                	ret

20406134 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20406134:	7179                	addi	sp,sp,-48
20406136:	d606                	sw	ra,44(sp)
20406138:	d422                	sw	s0,40(sp)
2040613a:	1800                	addi	s0,sp,48
2040613c:	fca42e23          	sw	a0,-36(s0)
20406140:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406144:	fdc42503          	lw	a0,-36(s0)
20406148:	b59ff0ef          	jal	ra,20405ca0 <__metal_driver_sifive_gpio0_base>
2040614c:	87aa                	mv	a5,a0
2040614e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
20406152:	fec42783          	lw	a5,-20(s0)
20406156:	03878793          	addi	a5,a5,56
2040615a:	439c                	lw	a5,0(a5)
2040615c:	fd842703          	lw	a4,-40(s0)
20406160:	fff74713          	not	a4,a4
20406164:	86ba                	mv	a3,a4
20406166:	fec42703          	lw	a4,-20(s0)
2040616a:	03870713          	addi	a4,a4,56
2040616e:	8ff5                	and	a5,a5,a3
20406170:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
20406172:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20406174:	853e                	mv	a0,a5
20406176:	50b2                	lw	ra,44(sp)
20406178:	5422                	lw	s0,40(sp)
2040617a:	6145                	addi	sp,sp,48
2040617c:	8082                	ret

2040617e <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
2040617e:	7179                	addi	sp,sp,-48
20406180:	d606                	sw	ra,44(sp)
20406182:	d422                	sw	s0,40(sp)
20406184:	1800                	addi	s0,sp,48
20406186:	fca42e23          	sw	a0,-36(s0)
2040618a:	fcb42c23          	sw	a1,-40(s0)
2040618e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406192:	fdc42503          	lw	a0,-36(s0)
20406196:	b0bff0ef          	jal	ra,20405ca0 <__metal_driver_sifive_gpio0_base>
2040619a:	87aa                	mv	a5,a0
2040619c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
204061a0:	fd442703          	lw	a4,-44(s0)
204061a4:	479d                	li	a5,7
204061a6:	1ce7e963          	bltu	a5,a4,20406378 <__metal_driver_sifive_gpio0_config_int+0x1fa>
204061aa:	fd442783          	lw	a5,-44(s0)
204061ae:	00279713          	slli	a4,a5,0x2
204061b2:	204077b7          	lui	a5,0x20407
204061b6:	1bc78793          	addi	a5,a5,444 # 204071bc <__metal_driver_vtable_riscv_plic0+0x4c>
204061ba:	97ba                	add	a5,a5,a4
204061bc:	439c                	lw	a5,0(a5)
204061be:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
204061c0:	fec42783          	lw	a5,-20(s0)
204061c4:	07e1                	addi	a5,a5,24
204061c6:	439c                	lw	a5,0(a5)
204061c8:	fd842703          	lw	a4,-40(s0)
204061cc:	fff74713          	not	a4,a4
204061d0:	86ba                	mv	a3,a4
204061d2:	fec42703          	lw	a4,-20(s0)
204061d6:	0761                	addi	a4,a4,24
204061d8:	8ff5                	and	a5,a5,a3
204061da:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
204061dc:	fec42783          	lw	a5,-20(s0)
204061e0:	02078793          	addi	a5,a5,32
204061e4:	439c                	lw	a5,0(a5)
204061e6:	fd842703          	lw	a4,-40(s0)
204061ea:	fff74713          	not	a4,a4
204061ee:	86ba                	mv	a3,a4
204061f0:	fec42703          	lw	a4,-20(s0)
204061f4:	02070713          	addi	a4,a4,32
204061f8:	8ff5                	and	a5,a5,a3
204061fa:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
204061fc:	fec42783          	lw	a5,-20(s0)
20406200:	02878793          	addi	a5,a5,40
20406204:	439c                	lw	a5,0(a5)
20406206:	fd842703          	lw	a4,-40(s0)
2040620a:	fff74713          	not	a4,a4
2040620e:	86ba                	mv	a3,a4
20406210:	fec42703          	lw	a4,-20(s0)
20406214:	02870713          	addi	a4,a4,40
20406218:	8ff5                	and	a5,a5,a3
2040621a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
2040621c:	fec42783          	lw	a5,-20(s0)
20406220:	03078793          	addi	a5,a5,48
20406224:	439c                	lw	a5,0(a5)
20406226:	fd842703          	lw	a4,-40(s0)
2040622a:	fff74713          	not	a4,a4
2040622e:	86ba                	mv	a3,a4
20406230:	fec42703          	lw	a4,-20(s0)
20406234:	03070713          	addi	a4,a4,48
20406238:	8ff5                	and	a5,a5,a3
2040623a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
2040623c:	aa35                	j	20406378 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2040623e:	fec42783          	lw	a5,-20(s0)
20406242:	07e1                	addi	a5,a5,24
20406244:	4398                	lw	a4,0(a5)
20406246:	fd842783          	lw	a5,-40(s0)
2040624a:	fec42683          	lw	a3,-20(s0)
2040624e:	06e1                	addi	a3,a3,24
20406250:	8fd9                	or	a5,a5,a4
20406252:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20406254:	a215                	j	20406378 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20406256:	fec42783          	lw	a5,-20(s0)
2040625a:	02078793          	addi	a5,a5,32
2040625e:	4398                	lw	a4,0(a5)
20406260:	fd842783          	lw	a5,-40(s0)
20406264:	fec42683          	lw	a3,-20(s0)
20406268:	02068693          	addi	a3,a3,32
2040626c:	8fd9                	or	a5,a5,a4
2040626e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20406270:	a221                	j	20406378 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20406272:	fec42783          	lw	a5,-20(s0)
20406276:	07e1                	addi	a5,a5,24
20406278:	4398                	lw	a4,0(a5)
2040627a:	fd842783          	lw	a5,-40(s0)
2040627e:	fec42683          	lw	a3,-20(s0)
20406282:	06e1                	addi	a3,a3,24
20406284:	8fd9                	or	a5,a5,a4
20406286:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20406288:	fec42783          	lw	a5,-20(s0)
2040628c:	02078793          	addi	a5,a5,32
20406290:	4398                	lw	a4,0(a5)
20406292:	fd842783          	lw	a5,-40(s0)
20406296:	fec42683          	lw	a3,-20(s0)
2040629a:	02068693          	addi	a3,a3,32
2040629e:	8fd9                	or	a5,a5,a4
204062a0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
204062a2:	a8d9                	j	20406378 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204062a4:	fec42783          	lw	a5,-20(s0)
204062a8:	02878793          	addi	a5,a5,40
204062ac:	4398                	lw	a4,0(a5)
204062ae:	fd842783          	lw	a5,-40(s0)
204062b2:	fec42683          	lw	a3,-20(s0)
204062b6:	02868693          	addi	a3,a3,40
204062ba:	8fd9                	or	a5,a5,a4
204062bc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
204062be:	a86d                	j	20406378 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204062c0:	fec42783          	lw	a5,-20(s0)
204062c4:	03078793          	addi	a5,a5,48
204062c8:	4398                	lw	a4,0(a5)
204062ca:	fd842783          	lw	a5,-40(s0)
204062ce:	fec42683          	lw	a3,-20(s0)
204062d2:	03068693          	addi	a3,a3,48
204062d6:	8fd9                	or	a5,a5,a4
204062d8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
204062da:	a879                	j	20406378 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204062dc:	fec42783          	lw	a5,-20(s0)
204062e0:	02878793          	addi	a5,a5,40
204062e4:	4398                	lw	a4,0(a5)
204062e6:	fd842783          	lw	a5,-40(s0)
204062ea:	fec42683          	lw	a3,-20(s0)
204062ee:	02868693          	addi	a3,a3,40
204062f2:	8fd9                	or	a5,a5,a4
204062f4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204062f6:	fec42783          	lw	a5,-20(s0)
204062fa:	03078793          	addi	a5,a5,48
204062fe:	4398                	lw	a4,0(a5)
20406300:	fd842783          	lw	a5,-40(s0)
20406304:	fec42683          	lw	a3,-20(s0)
20406308:	03068693          	addi	a3,a3,48
2040630c:	8fd9                	or	a5,a5,a4
2040630e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20406310:	a0a5                	j	20406378 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20406312:	fec42783          	lw	a5,-20(s0)
20406316:	07e1                	addi	a5,a5,24
20406318:	4398                	lw	a4,0(a5)
2040631a:	fd842783          	lw	a5,-40(s0)
2040631e:	fec42683          	lw	a3,-20(s0)
20406322:	06e1                	addi	a3,a3,24
20406324:	8fd9                	or	a5,a5,a4
20406326:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20406328:	fec42783          	lw	a5,-20(s0)
2040632c:	02078793          	addi	a5,a5,32
20406330:	4398                	lw	a4,0(a5)
20406332:	fd842783          	lw	a5,-40(s0)
20406336:	fec42683          	lw	a3,-20(s0)
2040633a:	02068693          	addi	a3,a3,32
2040633e:	8fd9                	or	a5,a5,a4
20406340:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20406342:	fec42783          	lw	a5,-20(s0)
20406346:	02878793          	addi	a5,a5,40
2040634a:	4398                	lw	a4,0(a5)
2040634c:	fd842783          	lw	a5,-40(s0)
20406350:	fec42683          	lw	a3,-20(s0)
20406354:	02868693          	addi	a3,a3,40
20406358:	8fd9                	or	a5,a5,a4
2040635a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
2040635c:	fec42783          	lw	a5,-20(s0)
20406360:	03078793          	addi	a5,a5,48
20406364:	4398                	lw	a4,0(a5)
20406366:	fd842783          	lw	a5,-40(s0)
2040636a:	fec42683          	lw	a3,-20(s0)
2040636e:	03068693          	addi	a3,a3,48
20406372:	8fd9                	or	a5,a5,a4
20406374:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20406376:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20406378:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
2040637a:	853e                	mv	a0,a5
2040637c:	50b2                	lw	ra,44(sp)
2040637e:	5422                	lw	s0,40(sp)
20406380:	6145                	addi	sp,sp,48
20406382:	8082                	ret

20406384 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20406384:	7179                	addi	sp,sp,-48
20406386:	d606                	sw	ra,44(sp)
20406388:	d422                	sw	s0,40(sp)
2040638a:	1800                	addi	s0,sp,48
2040638c:	fca42e23          	sw	a0,-36(s0)
20406390:	fcb42c23          	sw	a1,-40(s0)
20406394:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406398:	fdc42503          	lw	a0,-36(s0)
2040639c:	905ff0ef          	jal	ra,20405ca0 <__metal_driver_sifive_gpio0_base>
204063a0:	87aa                	mv	a5,a0
204063a2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
204063a6:	fd442703          	lw	a4,-44(s0)
204063aa:	479d                	li	a5,7
204063ac:	14e7ea63          	bltu	a5,a4,20406500 <__metal_driver_sifive_gpio0_clear_int+0x17c>
204063b0:	fd442783          	lw	a5,-44(s0)
204063b4:	00279713          	slli	a4,a5,0x2
204063b8:	204077b7          	lui	a5,0x20407
204063bc:	1dc78793          	addi	a5,a5,476 # 204071dc <__metal_driver_vtable_riscv_plic0+0x6c>
204063c0:	97ba                	add	a5,a5,a4
204063c2:	439c                	lw	a5,0(a5)
204063c4:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204063c6:	fec42783          	lw	a5,-20(s0)
204063ca:	07f1                	addi	a5,a5,28
204063cc:	4398                	lw	a4,0(a5)
204063ce:	fd842783          	lw	a5,-40(s0)
204063d2:	fec42683          	lw	a3,-20(s0)
204063d6:	06f1                	addi	a3,a3,28
204063d8:	8fd9                	or	a5,a5,a4
204063da:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
204063dc:	a215                	j	20406500 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204063de:	fec42783          	lw	a5,-20(s0)
204063e2:	02478793          	addi	a5,a5,36
204063e6:	4398                	lw	a4,0(a5)
204063e8:	fd842783          	lw	a5,-40(s0)
204063ec:	fec42683          	lw	a3,-20(s0)
204063f0:	02468693          	addi	a3,a3,36
204063f4:	8fd9                	or	a5,a5,a4
204063f6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
204063f8:	a221                	j	20406500 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204063fa:	fec42783          	lw	a5,-20(s0)
204063fe:	07f1                	addi	a5,a5,28
20406400:	4398                	lw	a4,0(a5)
20406402:	fd842783          	lw	a5,-40(s0)
20406406:	fec42683          	lw	a3,-20(s0)
2040640a:	06f1                	addi	a3,a3,28
2040640c:	8fd9                	or	a5,a5,a4
2040640e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20406410:	fec42783          	lw	a5,-20(s0)
20406414:	02478793          	addi	a5,a5,36
20406418:	4398                	lw	a4,0(a5)
2040641a:	fd842783          	lw	a5,-40(s0)
2040641e:	fec42683          	lw	a3,-20(s0)
20406422:	02468693          	addi	a3,a3,36
20406426:	8fd9                	or	a5,a5,a4
20406428:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
2040642a:	a8d9                	j	20406500 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
2040642c:	fec42783          	lw	a5,-20(s0)
20406430:	02c78793          	addi	a5,a5,44
20406434:	4398                	lw	a4,0(a5)
20406436:	fd842783          	lw	a5,-40(s0)
2040643a:	fec42683          	lw	a3,-20(s0)
2040643e:	02c68693          	addi	a3,a3,44
20406442:	8fd9                	or	a5,a5,a4
20406444:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20406446:	a86d                	j	20406500 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20406448:	fec42783          	lw	a5,-20(s0)
2040644c:	03478793          	addi	a5,a5,52
20406450:	4398                	lw	a4,0(a5)
20406452:	fd842783          	lw	a5,-40(s0)
20406456:	fec42683          	lw	a3,-20(s0)
2040645a:	03468693          	addi	a3,a3,52
2040645e:	8fd9                	or	a5,a5,a4
20406460:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20406462:	a879                	j	20406500 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20406464:	fec42783          	lw	a5,-20(s0)
20406468:	02c78793          	addi	a5,a5,44
2040646c:	4398                	lw	a4,0(a5)
2040646e:	fd842783          	lw	a5,-40(s0)
20406472:	fec42683          	lw	a3,-20(s0)
20406476:	02c68693          	addi	a3,a3,44
2040647a:	8fd9                	or	a5,a5,a4
2040647c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
2040647e:	fec42783          	lw	a5,-20(s0)
20406482:	03478793          	addi	a5,a5,52
20406486:	4398                	lw	a4,0(a5)
20406488:	fd842783          	lw	a5,-40(s0)
2040648c:	fec42683          	lw	a3,-20(s0)
20406490:	03468693          	addi	a3,a3,52
20406494:	8fd9                	or	a5,a5,a4
20406496:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20406498:	a0a5                	j	20406500 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
2040649a:	fec42783          	lw	a5,-20(s0)
2040649e:	07f1                	addi	a5,a5,28
204064a0:	4398                	lw	a4,0(a5)
204064a2:	fd842783          	lw	a5,-40(s0)
204064a6:	fec42683          	lw	a3,-20(s0)
204064aa:	06f1                	addi	a3,a3,28
204064ac:	8fd9                	or	a5,a5,a4
204064ae:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204064b0:	fec42783          	lw	a5,-20(s0)
204064b4:	02478793          	addi	a5,a5,36
204064b8:	4398                	lw	a4,0(a5)
204064ba:	fd842783          	lw	a5,-40(s0)
204064be:	fec42683          	lw	a3,-20(s0)
204064c2:	02468693          	addi	a3,a3,36
204064c6:	8fd9                	or	a5,a5,a4
204064c8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
204064ca:	fec42783          	lw	a5,-20(s0)
204064ce:	02c78793          	addi	a5,a5,44
204064d2:	4398                	lw	a4,0(a5)
204064d4:	fd842783          	lw	a5,-40(s0)
204064d8:	fec42683          	lw	a3,-20(s0)
204064dc:	02c68693          	addi	a3,a3,44
204064e0:	8fd9                	or	a5,a5,a4
204064e2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204064e4:	fec42783          	lw	a5,-20(s0)
204064e8:	03478793          	addi	a5,a5,52
204064ec:	4398                	lw	a4,0(a5)
204064ee:	fd842783          	lw	a5,-40(s0)
204064f2:	fec42683          	lw	a3,-20(s0)
204064f6:	03468693          	addi	a3,a3,52
204064fa:	8fd9                	or	a5,a5,a4
204064fc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
204064fe:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20406500:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20406502:	853e                	mv	a0,a5
20406504:	50b2                	lw	ra,44(sp)
20406506:	5422                	lw	s0,40(sp)
20406508:	6145                	addi	sp,sp,48
2040650a:	8082                	ret

2040650c <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
2040650c:	1101                	addi	sp,sp,-32
2040650e:	ce06                	sw	ra,28(sp)
20406510:	cc22                	sw	s0,24(sp)
20406512:	1000                	addi	s0,sp,32
20406514:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20406518:	fec42503          	lw	a0,-20(s0)
2040651c:	faaff0ef          	jal	ra,20405cc6 <__metal_driver_sifive_gpio0_interrupt_parent>
20406520:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20406522:	853e                	mv	a0,a5
20406524:	40f2                	lw	ra,28(sp)
20406526:	4462                	lw	s0,24(sp)
20406528:	6105                	addi	sp,sp,32
2040652a:	8082                	ret

2040652c <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
2040652c:	7179                	addi	sp,sp,-48
2040652e:	d606                	sw	ra,44(sp)
20406530:	d422                	sw	s0,40(sp)
20406532:	1800                	addi	s0,sp,48
20406534:	fca42e23          	sw	a0,-36(s0)
20406538:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
2040653c:	fd842583          	lw	a1,-40(s0)
20406540:	fdc42503          	lw	a0,-36(s0)
20406544:	facff0ef          	jal	ra,20405cf0 <__metal_driver_sifive_gpio0_interrupt_lines>
20406548:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
2040654c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20406550:	853e                	mv	a0,a5
20406552:	50b2                	lw	ra,44(sp)
20406554:	5422                	lw	s0,40(sp)
20406556:	6145                	addi	sp,sp,48
20406558:	8082                	ret

2040655a <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
2040655a:	1101                	addi	sp,sp,-32
2040655c:	ce22                	sw	s0,28(sp)
2040655e:	1000                	addi	s0,sp,32
20406560:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20406564:	fec42703          	lw	a4,-20(s0)
20406568:	800017b7          	lui	a5,0x80001
2040656c:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffdb64>
20406570:	00f71563          	bne	a4,a5,2040657a <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20406574:	100137b7          	lui	a5,0x10013
20406578:	a011                	j	2040657c <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
2040657a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
2040657c:	853e                	mv	a0,a5
2040657e:	4472                	lw	s0,28(sp)
20406580:	6105                	addi	sp,sp,32
20406582:	8082                	ret

20406584 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20406584:	1101                	addi	sp,sp,-32
20406586:	ce22                	sw	s0,28(sp)
20406588:	1000                	addi	s0,sp,32
2040658a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040658e:	fec42703          	lw	a4,-20(s0)
20406592:	800017b7          	lui	a5,0x80001
20406596:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffdb64>
2040659a:	00f71763          	bne	a4,a5,204065a8 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
2040659e:	800017b7          	lui	a5,0x80001
204065a2:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffd864>
204065a6:	a011                	j	204065aa <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
204065a8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
204065aa:	853e                	mv	a0,a5
204065ac:	4472                	lw	s0,28(sp)
204065ae:	6105                	addi	sp,sp,32
204065b0:	8082                	ret

204065b2 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
204065b2:	1101                	addi	sp,sp,-32
204065b4:	ce22                	sw	s0,28(sp)
204065b6:	1000                	addi	s0,sp,32
204065b8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204065bc:	fec42703          	lw	a4,-20(s0)
204065c0:	800017b7          	lui	a5,0x80001
204065c4:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffdb64>
204065c8:	00f71463          	bne	a4,a5,204065d0 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
204065cc:	4795                	li	a5,5
204065ce:	a011                	j	204065d2 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
204065d0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
204065d2:	853e                	mv	a0,a5
204065d4:	4472                	lw	s0,28(sp)
204065d6:	6105                	addi	sp,sp,32
204065d8:	8082                	ret

204065da <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
204065da:	1101                	addi	sp,sp,-32
204065dc:	ce22                	sw	s0,28(sp)
204065de:	1000                	addi	s0,sp,32
204065e0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204065e4:	fec42703          	lw	a4,-20(s0)
204065e8:	800017b7          	lui	a5,0x80001
204065ec:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffdb64>
204065f0:	00f71763          	bne	a4,a5,204065fe <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
204065f4:	800017b7          	lui	a5,0x80001
204065f8:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffd49c>
204065fc:	a011                	j	20406600 <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
204065fe:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
20406600:	853e                	mv	a0,a5
20406602:	4472                	lw	s0,28(sp)
20406604:	6105                	addi	sp,sp,32
20406606:	8082                	ret

20406608 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20406608:	1101                	addi	sp,sp,-32
2040660a:	ce22                	sw	s0,28(sp)
2040660c:	1000                	addi	s0,sp,32
2040660e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20406612:	fec42703          	lw	a4,-20(s0)
20406616:	800017b7          	lui	a5,0x80001
2040661a:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffdb64>
2040661e:	00f71563          	bne	a4,a5,20406628 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20406622:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20406626:	a011                	j	2040662a <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20406628:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
2040662a:	853e                	mv	a0,a5
2040662c:	4472                	lw	s0,28(sp)
2040662e:	6105                	addi	sp,sp,32
20406630:	8082                	ret

20406632 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20406632:	1101                	addi	sp,sp,-32
20406634:	ce22                	sw	s0,28(sp)
20406636:	1000                	addi	s0,sp,32
20406638:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040663c:	fec42703          	lw	a4,-20(s0)
20406640:	800017b7          	lui	a5,0x80001
20406644:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffdb64>
20406648:	00f71563          	bne	a4,a5,20406652 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
2040664c:	000307b7          	lui	a5,0x30
20406650:	a011                	j	20406654 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20406652:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
20406654:	853e                	mv	a0,a5
20406656:	4472                	lw	s0,28(sp)
20406658:	6105                	addi	sp,sp,32
2040665a:	8082                	ret

2040665c <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
2040665c:	1101                	addi	sp,sp,-32
2040665e:	ce22                	sw	s0,28(sp)
20406660:	1000                	addi	s0,sp,32
20406662:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20406666:	fec42703          	lw	a4,-20(s0)
2040666a:	800017b7          	lui	a5,0x80001
2040666e:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffdb64>
20406672:	00f71563          	bne	a4,a5,2040667c <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
20406676:	000307b7          	lui	a5,0x30
2040667a:	a011                	j	2040667e <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
2040667c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
2040667e:	853e                	mv	a0,a5
20406680:	4472                	lw	s0,28(sp)
20406682:	6105                	addi	sp,sp,32
20406684:	8082                	ret

20406686 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20406686:	1101                	addi	sp,sp,-32
20406688:	ce06                	sw	ra,28(sp)
2040668a:	cc22                	sw	s0,24(sp)
2040668c:	1000                	addi	s0,sp,32
2040668e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20406692:	fec42503          	lw	a0,-20(s0)
20406696:	eefff0ef          	jal	ra,20406584 <__metal_driver_sifive_uart0_interrupt_parent>
2040669a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
2040669c:	853e                	mv	a0,a5
2040669e:	40f2                	lw	ra,28(sp)
204066a0:	4462                	lw	s0,24(sp)
204066a2:	6105                	addi	sp,sp,32
204066a4:	8082                	ret

204066a6 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
204066a6:	1101                	addi	sp,sp,-32
204066a8:	ce06                	sw	ra,28(sp)
204066aa:	cc22                	sw	s0,24(sp)
204066ac:	1000                	addi	s0,sp,32
204066ae:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
204066b2:	fec42503          	lw	a0,-20(s0)
204066b6:	efdff0ef          	jal	ra,204065b2 <__metal_driver_sifive_uart0_interrupt_line>
204066ba:	87aa                	mv	a5,a0
204066bc:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
204066c0:	853e                	mv	a0,a5
204066c2:	40f2                	lw	ra,28(sp)
204066c4:	4462                	lw	s0,24(sp)
204066c6:	6105                	addi	sp,sp,32
204066c8:	8082                	ret

204066ca <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
204066ca:	7179                	addi	sp,sp,-48
204066cc:	d606                	sw	ra,44(sp)
204066ce:	d422                	sw	s0,40(sp)
204066d0:	1800                	addi	s0,sp,48
204066d2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
204066d6:	fdc42503          	lw	a0,-36(s0)
204066da:	e81ff0ef          	jal	ra,2040655a <__metal_driver_sifive_uart0_control_base>
204066de:	87aa                	mv	a5,a0
204066e0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
204066e4:	fec42783          	lw	a5,-20(s0)
204066e8:	439c                	lw	a5,0(a5)
204066ea:	fff7c793          	not	a5,a5
204066ee:	83fd                	srli	a5,a5,0x1f
204066f0:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
204066f4:	853e                	mv	a0,a5
204066f6:	50b2                	lw	ra,44(sp)
204066f8:	5422                	lw	s0,40(sp)
204066fa:	6145                	addi	sp,sp,48
204066fc:	8082                	ret

204066fe <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
204066fe:	7179                	addi	sp,sp,-48
20406700:	d606                	sw	ra,44(sp)
20406702:	d422                	sw	s0,40(sp)
20406704:	1800                	addi	s0,sp,48
20406706:	fca42e23          	sw	a0,-36(s0)
2040670a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040670e:	fdc42503          	lw	a0,-36(s0)
20406712:	e49ff0ef          	jal	ra,2040655a <__metal_driver_sifive_uart0_control_base>
20406716:	87aa                	mv	a5,a0
20406718:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
2040671c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
2040671e:	fdc42503          	lw	a0,-36(s0)
20406722:	fa9ff0ef          	jal	ra,204066ca <__metal_driver_sifive_uart0_txready>
20406726:	87aa                	mv	a5,a0
20406728:	dbfd                	beqz	a5,2040671e <__metal_driver_sifive_uart0_putc+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
2040672a:	fec42783          	lw	a5,-20(s0)
2040672e:	fd842703          	lw	a4,-40(s0)
20406732:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20406734:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20406736:	853e                	mv	a0,a5
20406738:	50b2                	lw	ra,44(sp)
2040673a:	5422                	lw	s0,40(sp)
2040673c:	6145                	addi	sp,sp,48
2040673e:	8082                	ret

20406740 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20406740:	7179                	addi	sp,sp,-48
20406742:	d606                	sw	ra,44(sp)
20406744:	d422                	sw	s0,40(sp)
20406746:	1800                	addi	s0,sp,48
20406748:	fca42e23          	sw	a0,-36(s0)
2040674c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20406750:	fdc42503          	lw	a0,-36(s0)
20406754:	e07ff0ef          	jal	ra,2040655a <__metal_driver_sifive_uart0_control_base>
20406758:	87aa                	mv	a5,a0
2040675a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
2040675e:	fec42783          	lw	a5,-20(s0)
20406762:	0791                	addi	a5,a5,4
20406764:	439c                	lw	a5,0(a5)
20406766:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
2040676a:	fe842783          	lw	a5,-24(s0)
2040676e:	0007d763          	bgez	a5,2040677c <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20406772:	fd842783          	lw	a5,-40(s0)
20406776:	577d                	li	a4,-1
20406778:	c398                	sw	a4,0(a5)
2040677a:	a801                	j	2040678a <__metal_driver_sifive_uart0_getc+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
2040677c:	fe842783          	lw	a5,-24(s0)
20406780:	0ff7f713          	andi	a4,a5,255
20406784:	fd842783          	lw	a5,-40(s0)
20406788:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
2040678a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
2040678c:	853e                	mv	a0,a5
2040678e:	50b2                	lw	ra,44(sp)
20406790:	5422                	lw	s0,40(sp)
20406792:	6145                	addi	sp,sp,48
20406794:	8082                	ret

20406796 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20406796:	7179                	addi	sp,sp,-48
20406798:	d622                	sw	s0,44(sp)
2040679a:	1800                	addi	s0,sp,48
2040679c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
204067a0:	fdc42783          	lw	a5,-36(s0)
204067a4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
204067a8:	fec42783          	lw	a5,-20(s0)
204067ac:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
204067ae:	853e                	mv	a0,a5
204067b0:	5432                	lw	s0,44(sp)
204067b2:	6145                	addi	sp,sp,48
204067b4:	8082                	ret

204067b6 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
204067b6:	7179                	addi	sp,sp,-48
204067b8:	d606                	sw	ra,44(sp)
204067ba:	d422                	sw	s0,40(sp)
204067bc:	1800                	addi	s0,sp,48
204067be:	fca42e23          	sw	a0,-36(s0)
204067c2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
204067c6:	fdc42783          	lw	a5,-36(s0)
204067ca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
204067ce:	fdc42503          	lw	a0,-36(s0)
204067d2:	d89ff0ef          	jal	ra,2040655a <__metal_driver_sifive_uart0_control_base>
204067d6:	87aa                	mv	a5,a0
204067d8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
204067dc:	fdc42503          	lw	a0,-36(s0)
204067e0:	dfbff0ef          	jal	ra,204065da <__metal_driver_sifive_uart0_clock>
204067e4:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
204067e8:	fd842703          	lw	a4,-40(s0)
204067ec:	fec42783          	lw	a5,-20(s0)
204067f0:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
204067f2:	fe442783          	lw	a5,-28(s0)
204067f6:	cbb1                	beqz	a5,2040684a <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
204067f8:	fe442783          	lw	a5,-28(s0)
204067fc:	439c                	lw	a5,0(a5)
204067fe:	439c                	lw	a5,0(a5)
20406800:	fe442503          	lw	a0,-28(s0)
20406804:	9782                	jalr	a5
20406806:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
2040680a:	fe042703          	lw	a4,-32(s0)
2040680e:	fd842783          	lw	a5,-40(s0)
20406812:	02f747b3          	div	a5,a4,a5
20406816:	fff78713          	addi	a4,a5,-1
2040681a:	fe842783          	lw	a5,-24(s0)
2040681e:	07e1                	addi	a5,a5,24
20406820:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20406822:	fe842783          	lw	a5,-24(s0)
20406826:	07a1                	addi	a5,a5,8
20406828:	439c                	lw	a5,0(a5)
2040682a:	fe842703          	lw	a4,-24(s0)
2040682e:	0721                	addi	a4,a4,8
20406830:	0017e793          	ori	a5,a5,1
20406834:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20406836:	fe842783          	lw	a5,-24(s0)
2040683a:	07b1                	addi	a5,a5,12
2040683c:	439c                	lw	a5,0(a5)
2040683e:	fe842703          	lw	a4,-24(s0)
20406842:	0731                	addi	a4,a4,12
20406844:	0017e793          	ori	a5,a5,1
20406848:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
2040684a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
2040684c:	853e                	mv	a0,a5
2040684e:	50b2                	lw	ra,44(sp)
20406850:	5422                	lw	s0,40(sp)
20406852:	6145                	addi	sp,sp,48
20406854:	8082                	ret

20406856 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20406856:	7139                	addi	sp,sp,-64
20406858:	de06                	sw	ra,60(sp)
2040685a:	dc22                	sw	s0,56(sp)
2040685c:	0080                	addi	s0,sp,64
2040685e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20406862:	fcc42783          	lw	a5,-52(s0)
20406866:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
2040686a:	fcc42503          	lw	a0,-52(s0)
2040686e:	cedff0ef          	jal	ra,2040655a <__metal_driver_sifive_uart0_control_base>
20406872:	87aa                	mv	a5,a0
20406874:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20406878:	fcc42503          	lw	a0,-52(s0)
2040687c:	d5fff0ef          	jal	ra,204065da <__metal_driver_sifive_uart0_clock>
20406880:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20406884:	fe842783          	lw	a5,-24(s0)
20406888:	07a1                	addi	a5,a5,8
2040688a:	4398                	lw	a4,0(a5)
2040688c:	fe842783          	lw	a5,-24(s0)
20406890:	07a1                	addi	a5,a5,8
20406892:	86be                	mv	a3,a5
20406894:	fff907b7          	lui	a5,0xfff90
20406898:	17fd                	addi	a5,a5,-1
2040689a:	8ff9                	and	a5,a5,a4
2040689c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
2040689e:	fe842783          	lw	a5,-24(s0)
204068a2:	07a1                	addi	a5,a5,8
204068a4:	4398                	lw	a4,0(a5)
204068a6:	fe842783          	lw	a5,-24(s0)
204068aa:	07a1                	addi	a5,a5,8
204068ac:	86be                	mv	a3,a5
204068ae:	67c1                	lui	a5,0x10
204068b0:	8fd9                	or	a5,a5,a4
204068b2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
204068b4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
204068b6:	fe842783          	lw	a5,-24(s0)
204068ba:	07d1                	addi	a5,a5,20
204068bc:	439c                	lw	a5,0(a5)
204068be:	8b85                	andi	a5,a5,1
204068c0:	dbfd                	beqz	a5,204068b6 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
204068c2:	fe842783          	lw	a5,-24(s0)
204068c6:	07a1                	addi	a5,a5,8
204068c8:	439c                	lw	a5,0(a5)
204068ca:	8b89                	andi	a5,a5,2
204068cc:	c399                	beqz	a5,204068d2 <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
204068ce:	47a5                	li	a5,9
204068d0:	a011                	j	204068d4 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
204068d2:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
204068d4:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
204068d8:	fe442783          	lw	a5,-28(s0)
204068dc:	439c                	lw	a5,0(a5)
204068de:	439c                	lw	a5,0(a5)
204068e0:	fe442503          	lw	a0,-28(s0)
204068e4:	9782                	jalr	a5
204068e6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
204068ea:	fe042703          	lw	a4,-32(s0)
204068ee:	fdc42783          	lw	a5,-36(s0)
204068f2:	02f707b3          	mul	a5,a4,a5
204068f6:	873e                	mv	a4,a5
204068f8:	fec42783          	lw	a5,-20(s0)
204068fc:	43dc                	lw	a5,4(a5)
204068fe:	02f757b3          	divu	a5,a4,a5
20406902:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20406906:	fc042a23          	sw	zero,-44(s0)
2040690a:	a039                	j	20406918 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
2040690c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
2040690e:	fd442783          	lw	a5,-44(s0)
20406912:	0785                	addi	a5,a5,1
20406914:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20406918:	fd442783          	lw	a5,-44(s0)
2040691c:	fd842703          	lw	a4,-40(s0)
20406920:	fee7c6e3          	blt	a5,a4,2040690c <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20406924:	0001                	nop
20406926:	50f2                	lw	ra,60(sp)
20406928:	5462                	lw	s0,56(sp)
2040692a:	6121                	addi	sp,sp,64
2040692c:	8082                	ret

2040692e <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
2040692e:	7179                	addi	sp,sp,-48
20406930:	d606                	sw	ra,44(sp)
20406932:	d422                	sw	s0,40(sp)
20406934:	1800                	addi	s0,sp,48
20406936:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
2040693a:	fdc42783          	lw	a5,-36(s0)
2040693e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20406942:	fec42703          	lw	a4,-20(s0)
20406946:	fec42783          	lw	a5,-20(s0)
2040694a:	43dc                	lw	a5,4(a5)
2040694c:	85be                	mv	a1,a5
2040694e:	853a                	mv	a0,a4
20406950:	d73fc0ef          	jal	ra,204036c2 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20406954:	0001                	nop
20406956:	50b2                	lw	ra,44(sp)
20406958:	5422                	lw	s0,40(sp)
2040695a:	6145                	addi	sp,sp,48
2040695c:	8082                	ret

2040695e <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
2040695e:	7139                	addi	sp,sp,-64
20406960:	de06                	sw	ra,60(sp)
20406962:	dc22                	sw	s0,56(sp)
20406964:	0080                	addi	s0,sp,64
20406966:	fca42623          	sw	a0,-52(s0)
2040696a:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
2040696e:	fcc42783          	lw	a5,-52(s0)
20406972:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20406976:	fcc42503          	lw	a0,-52(s0)
2040697a:	c61ff0ef          	jal	ra,204065da <__metal_driver_sifive_uart0_clock>
2040697e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20406982:	fcc42503          	lw	a0,-52(s0)
20406986:	c83ff0ef          	jal	ra,20406608 <__metal_driver_sifive_uart0_pinmux>
2040698a:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
2040698e:	fe842783          	lw	a5,-24(s0)
20406992:	c7b9                	beqz	a5,204069e0 <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20406994:	fec42783          	lw	a5,-20(s0)
20406998:	20407737          	lui	a4,0x20407
2040699c:	85670713          	addi	a4,a4,-1962 # 20406856 <pre_rate_change_callback_func>
204069a0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
204069a2:	fec42783          	lw	a5,-20(s0)
204069a6:	fcc42703          	lw	a4,-52(s0)
204069aa:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
204069ac:	fec42783          	lw	a5,-20(s0)
204069b0:	07a1                	addi	a5,a5,8
204069b2:	85be                	mv	a1,a5
204069b4:	fe842503          	lw	a0,-24(s0)
204069b8:	20f1                	jal	20406a84 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
204069ba:	fec42783          	lw	a5,-20(s0)
204069be:	20407737          	lui	a4,0x20407
204069c2:	92e70713          	addi	a4,a4,-1746 # 2040692e <post_rate_change_callback_func>
204069c6:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
204069c8:	fec42783          	lw	a5,-20(s0)
204069cc:	fcc42703          	lw	a4,-52(s0)
204069d0:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
204069d2:	fec42783          	lw	a5,-20(s0)
204069d6:	07d1                	addi	a5,a5,20
204069d8:	85be                	mv	a1,a5
204069da:	fe842503          	lw	a0,-24(s0)
204069de:	28e1                	jal	20406ab6 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
204069e0:	fec42783          	lw	a5,-20(s0)
204069e4:	fc842583          	lw	a1,-56(s0)
204069e8:	853e                	mv	a0,a5
204069ea:	cd9fc0ef          	jal	ra,204036c2 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
204069ee:	fe442783          	lw	a5,-28(s0)
204069f2:	cb95                	beqz	a5,20406a26 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
204069f4:	fcc42503          	lw	a0,-52(s0)
204069f8:	c3bff0ef          	jal	ra,20406632 <__metal_driver_sifive_uart0_pinmux_output_selector>
204069fc:	87aa                	mv	a5,a0
204069fe:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20406a02:	fcc42503          	lw	a0,-52(s0)
20406a06:	c57ff0ef          	jal	ra,2040665c <__metal_driver_sifive_uart0_pinmux_source_selector>
20406a0a:	87aa                	mv	a5,a0
20406a0c:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20406a10:	fe442783          	lw	a5,-28(s0)
20406a14:	439c                	lw	a5,0(a5)
20406a16:	53dc                	lw	a5,36(a5)
20406a18:	fdc42603          	lw	a2,-36(s0)
20406a1c:	fe042583          	lw	a1,-32(s0)
20406a20:	fe442503          	lw	a0,-28(s0)
20406a24:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20406a26:	0001                	nop
20406a28:	50f2                	lw	ra,60(sp)
20406a2a:	5462                	lw	s0,56(sp)
20406a2c:	6121                	addi	sp,sp,64
20406a2e:	8082                	ret

20406a30 <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20406a30:	7179                	addi	sp,sp,-48
20406a32:	d622                	sw	s0,44(sp)
20406a34:	1800                	addi	s0,sp,48
20406a36:	fca42e23          	sw	a0,-36(s0)
20406a3a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20406a3e:	fd842783          	lw	a5,-40(s0)
20406a42:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20406a46:	fdc42783          	lw	a5,-36(s0)
20406a4a:	e781                	bnez	a5,20406a52 <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20406a4c:	fd842783          	lw	a5,-40(s0)
20406a50:	a035                	j	20406a7c <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20406a52:	fdc42783          	lw	a5,-36(s0)
20406a56:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20406a5a:	a031                	j	20406a66 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20406a5c:	fec42783          	lw	a5,-20(s0)
20406a60:	479c                	lw	a5,8(a5)
20406a62:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20406a66:	fec42783          	lw	a5,-20(s0)
20406a6a:	479c                	lw	a5,8(a5)
20406a6c:	fbe5                	bnez	a5,20406a5c <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20406a6e:	fec42783          	lw	a5,-20(s0)
20406a72:	fd842703          	lw	a4,-40(s0)
20406a76:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20406a78:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20406a7c:	853e                	mv	a0,a5
20406a7e:	5432                	lw	s0,44(sp)
20406a80:	6145                	addi	sp,sp,48
20406a82:	8082                	ret

20406a84 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20406a84:	1101                	addi	sp,sp,-32
20406a86:	ce06                	sw	ra,28(sp)
20406a88:	cc22                	sw	s0,24(sp)
20406a8a:	1000                	addi	s0,sp,32
20406a8c:	fea42623          	sw	a0,-20(s0)
20406a90:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20406a94:	fec42783          	lw	a5,-20(s0)
20406a98:	43dc                	lw	a5,4(a5)
20406a9a:	fe842583          	lw	a1,-24(s0)
20406a9e:	853e                	mv	a0,a5
20406aa0:	f91ff0ef          	jal	ra,20406a30 <_metal_clock_append_to_callbacks>
20406aa4:	872a                	mv	a4,a0
20406aa6:	fec42783          	lw	a5,-20(s0)
20406aaa:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20406aac:	0001                	nop
20406aae:	40f2                	lw	ra,28(sp)
20406ab0:	4462                	lw	s0,24(sp)
20406ab2:	6105                	addi	sp,sp,32
20406ab4:	8082                	ret

20406ab6 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20406ab6:	1101                	addi	sp,sp,-32
20406ab8:	ce06                	sw	ra,28(sp)
20406aba:	cc22                	sw	s0,24(sp)
20406abc:	1000                	addi	s0,sp,32
20406abe:	fea42623          	sw	a0,-20(s0)
20406ac2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20406ac6:	fec42783          	lw	a5,-20(s0)
20406aca:	479c                	lw	a5,8(a5)
20406acc:	fe842583          	lw	a1,-24(s0)
20406ad0:	853e                	mv	a0,a5
20406ad2:	f5fff0ef          	jal	ra,20406a30 <_metal_clock_append_to_callbacks>
20406ad6:	872a                	mv	a4,a0
20406ad8:	fec42783          	lw	a5,-20(s0)
20406adc:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20406ade:	0001                	nop
20406ae0:	40f2                	lw	ra,28(sp)
20406ae2:	4462                	lw	s0,24(sp)
20406ae4:	6105                	addi	sp,sp,32
20406ae6:	8082                	ret

20406ae8 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20406ae8:	1101                	addi	sp,sp,-32
20406aea:	ce06                	sw	ra,28(sp)
20406aec:	cc22                	sw	s0,24(sp)
20406aee:	1000                	addi	s0,sp,32
20406af0:	fea42623          	sw	a0,-20(s0)
20406af4:	fec42783          	lw	a5,-20(s0)
20406af8:	439c                	lw	a5,0(a5)
20406afa:	57dc                	lw	a5,44(a5)
20406afc:	fec42503          	lw	a0,-20(s0)
20406b00:	9782                	jalr	a5
20406b02:	87aa                	mv	a5,a0
20406b04:	853e                	mv	a0,a5
20406b06:	40f2                	lw	ra,28(sp)
20406b08:	4462                	lw	s0,24(sp)
20406b0a:	6105                	addi	sp,sp,32
20406b0c:	8082                	ret

20406b0e <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20406b0e:	1101                	addi	sp,sp,-32
20406b10:	ce22                	sw	s0,28(sp)
20406b12:	1000                	addi	s0,sp,32
20406b14:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20406b18:	fec42783          	lw	a5,-20(s0)
20406b1c:	eb89                	bnez	a5,20406b2e <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20406b1e:	fec42703          	lw	a4,-20(s0)
20406b22:	070a                	slli	a4,a4,0x2
20406b24:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20406b28:	97ba                	add	a5,a5,a4
20406b2a:	439c                	lw	a5,0(a5)
20406b2c:	a011                	j	20406b30 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20406b2e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20406b30:	853e                	mv	a0,a5
20406b32:	4472                	lw	s0,28(sp)
20406b34:	6105                	addi	sp,sp,32
20406b36:	8082                	ret

20406b38 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20406b38:	1101                	addi	sp,sp,-32
20406b3a:	ce22                	sw	s0,28(sp)
20406b3c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20406b3e:	f14027f3          	csrr	a5,mhartid
20406b42:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20406b46:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20406b4a:	853e                	mv	a0,a5
20406b4c:	4472                	lw	s0,28(sp)
20406b4e:	6105                	addi	sp,sp,32
20406b50:	8082                	ret

20406b52 <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
20406b52:	1101                	addi	sp,sp,-32
20406b54:	ce22                	sw	s0,28(sp)
20406b56:	1000                	addi	s0,sp,32
20406b58:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20406b5c:	0001                	nop
20406b5e:	bffd                	j	20406b5c <metal_shutdown+0xa>
	...

20406b80 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20406b80:	ca8fd06f          	j	20404028 <metal_interrupt_vector_handler>

20406b84 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20406b84:	ca4fd06f          	j	20404028 <metal_interrupt_vector_handler>

20406b88 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20406b88:	ca0fd06f          	j	20404028 <metal_interrupt_vector_handler>

20406b8c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
20406b8c:	ccafd06f          	j	20404056 <metal_software_interrupt_vector_handler>

20406b90 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20406b90:	c98fd06f          	j	20404028 <metal_interrupt_vector_handler>

20406b94 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20406b94:	c94fd06f          	j	20404028 <metal_interrupt_vector_handler>

20406b98 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20406b98:	c90fd06f          	j	20404028 <metal_interrupt_vector_handler>

20406b9c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
20406b9c:	daefd06f          	j	2040414a <metal_timer_interrupt_vector_handler>

20406ba0 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20406ba0:	c88fd06f          	j	20404028 <metal_interrupt_vector_handler>

20406ba4 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20406ba4:	c84fd06f          	j	20404028 <metal_interrupt_vector_handler>

20406ba8 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20406ba8:	c80fd06f          	j	20404028 <metal_interrupt_vector_handler>

20406bac <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
20406bac:	c7cfd06f          	j	20404028 <metal_interrupt_vector_handler>

20406bb0 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20406bb0:	c78fd06f          	j	20404028 <metal_interrupt_vector_handler>

20406bb4 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20406bb4:	c74fd06f          	j	20404028 <metal_interrupt_vector_handler>

20406bb8 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20406bb8:	c70fd06f          	j	20404028 <metal_interrupt_vector_handler>

20406bbc <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
20406bbc:	c6cfd06f          	j	20404028 <metal_interrupt_vector_handler>

20406bc0 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20406bc0:	837fd06f          	j	204043f6 <metal_lc0_interrupt_vector_handler>

20406bc4 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20406bc4:	8c5fd06f          	j	20404488 <metal_lc1_interrupt_vector_handler>

20406bc8 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20406bc8:	953fd06f          	j	2040451a <metal_lc2_interrupt_vector_handler>

20406bcc <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
20406bcc:	9e1fd06f          	j	204045ac <metal_lc3_interrupt_vector_handler>

20406bd0 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20406bd0:	a6ffd06f          	j	2040463e <metal_lc4_interrupt_vector_handler>

20406bd4 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20406bd4:	afdfd06f          	j	204046d0 <metal_lc5_interrupt_vector_handler>

20406bd8 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20406bd8:	b8bfd06f          	j	20404762 <metal_lc6_interrupt_vector_handler>

20406bdc <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
20406bdc:	c19fd06f          	j	204047f4 <metal_lc7_interrupt_vector_handler>

20406be0 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20406be0:	ca7fd06f          	j	20404886 <metal_lc8_interrupt_vector_handler>

20406be4 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20406be4:	d35fd06f          	j	20404918 <metal_lc9_interrupt_vector_handler>

20406be8 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20406be8:	dc3fd06f          	j	204049aa <metal_lc10_interrupt_vector_handler>

20406bec <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
20406bec:	e51fd06f          	j	20404a3c <metal_lc11_interrupt_vector_handler>

20406bf0 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20406bf0:	edffd06f          	j	20404ace <metal_lc12_interrupt_vector_handler>

20406bf4 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20406bf4:	f6dfd06f          	j	20404b60 <metal_lc13_interrupt_vector_handler>

20406bf8 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20406bf8:	ffbfd06f          	j	20404bf2 <metal_lc14_interrupt_vector_handler>

20406bfc <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
20406bfc:	888fe06f          	j	20404c84 <metal_lc15_interrupt_vector_handler>

20406c00 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20406c00:	1101                	addi	sp,sp,-32
20406c02:	ce22                	sw	s0,28(sp)
20406c04:	1000                	addi	s0,sp,32
20406c06:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
20406c0a:	fec42703          	lw	a4,-20(s0)
20406c0e:	800017b7          	lui	a5,0x80001
20406c12:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffd49c>
20406c16:	00f71763          	bne	a4,a5,20406c24 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
20406c1a:	03dfd7b7          	lui	a5,0x3dfd
20406c1e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20406c22:	a011                	j	20406c26 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
20406c24:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
20406c26:	853e                	mv	a0,a5
20406c28:	4472                	lw	s0,28(sp)
20406c2a:	6105                	addi	sp,sp,32
20406c2c:	8082                	ret

20406c2e <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
20406c2e:	1101                	addi	sp,sp,-32
20406c30:	ce06                	sw	ra,28(sp)
20406c32:	cc22                	sw	s0,24(sp)
20406c34:	1000                	addi	s0,sp,32
20406c36:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
20406c3a:	fec42503          	lw	a0,-20(s0)
20406c3e:	fc3ff0ef          	jal	ra,20406c00 <__metal_driver_fixed_clock_rate>
20406c42:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20406c44:	853e                	mv	a0,a5
20406c46:	40f2                	lw	ra,28(sp)
20406c48:	4462                	lw	s0,24(sp)
20406c4a:	6105                	addi	sp,sp,32
20406c4c:	8082                	ret

20406c4e <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
20406c4e:	1101                	addi	sp,sp,-32
20406c50:	ce06                	sw	ra,28(sp)
20406c52:	cc22                	sw	s0,24(sp)
20406c54:	1000                	addi	s0,sp,32
20406c56:	fea42623          	sw	a0,-20(s0)
20406c5a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
20406c5e:	fec42503          	lw	a0,-20(s0)
20406c62:	fcdff0ef          	jal	ra,20406c2e <__metal_driver_fixed_clock_get_rate_hz>
20406c66:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20406c68:	853e                	mv	a0,a5
20406c6a:	40f2                	lw	ra,28(sp)
20406c6c:	4462                	lw	s0,24(sp)
20406c6e:	6105                	addi	sp,sp,32
20406c70:	8082                	ret

20406c72 <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
20406c72:	1101                	addi	sp,sp,-32
20406c74:	ce06                	sw	ra,28(sp)
20406c76:	cc22                	sw	s0,24(sp)
20406c78:	1000                	addi	s0,sp,32
20406c7a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
20406c7e:	fec42503          	lw	a0,-20(s0)
20406c82:	ed1ff0ef          	jal	ra,20406b52 <metal_shutdown>
