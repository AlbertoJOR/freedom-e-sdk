
/home/albertojor/GitHub/freedom-e-sdk/software/euler/debug/euler.elf:     file format elf64-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/euler/debug/euler.elf
architecture: riscv:rv64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000020400000

Program Header:
    LOAD off    0x0000000000001000 vaddr 0x0000000020400000 paddr 0x0000000020400000 align 2**12
         filesz 0x00000000000061b0 memsz 0x00000000000061b0 flags rwx
    LOAD off    0x0000000000007b00 vaddr 0x0000000080000b00 paddr 0x0000000080000b00 align 2**12
         filesz 0x0000000000000000 memsz 0x0000000000000d34 flags rw-
    LOAD off    0x0000000000008000 vaddr 0x0000000080000000 paddr 0x00000000204061b0 align 2**12
         filesz 0x0000000000000b00 memsz 0x0000000000000b00 flags rw-
    LOAD off    0x0000000000008b00 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**12
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags ---
    LOAD off    0x0000000000008b00 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**12
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags ---

Sections:
Idx Name              Size      VMA               LMA               File off  Algn  Flags
  0 .init             0000019e  0000000020400000  0000000020400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             0000598a  0000000020400200  0000000020400200  00001200  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000618  0000000020405b90  0000000020405b90  00006b90  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000008  00000000204061a8  00000000204061a8  000071a8  2**3  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00000b00  0000000080000000  00000000204061b0  00008000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              00000134  0000000080000b00  0000000080000b00  00007b00  2**3  ALLOC
  6 .stack            00000400  0000000080000c34  0000000080000c34  00007b00  2**0  ALLOC
  7 .heap             00000800  0000000080001034  0000000080001034  00007b00  2**0  ALLOC
  8 .debug_info       00014b4e  0000000000000000  0000000000000000  00008b00  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     00002689  0000000000000000  0000000000000000  0001d64e  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000f90  0000000000000000  0000000000000000  0001fce0  2**4  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000e50  0000000000000000  0000000000000000  00020c70  2**4  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       0000778a  0000000000000000  0000000000000000  00021ac0  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        0000367f  0000000000000000  0000000000000000  0002924a  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  0000000000000000  0000000000000000  0002c8c9  2**0  CONTENTS, READONLY
 15 .riscv.attributes 00000035  0000000000000000  0000000000000000  0002c8f1  2**0  CONTENTS, READONLY
 16 .debug_frame      00003108  0000000000000000  0000000000000000  0002c928  2**3  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000000020400000 l    d  .init	0000000000000000 .init
0000000020400200 l    d  .text	0000000000000000 .text
0000000020405b90 l    d  .rodata	0000000000000000 .rodata
00000000204061a8 l    d  .init_array	0000000000000000 .init_array
0000000080000000 l    d  .data	0000000000000000 .data
0000000080000b00 l    d  .bss	0000000000000000 .bss
0000000080000c34 l    d  .stack	0000000000000000 .stack
0000000080001034 l    d  .heap	0000000000000000 .heap
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_ranges	0000000000000000 .debug_ranges
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    d  .riscv.attributes	0000000000000000 .riscv.attributes
0000000000000000 l    d  .debug_frame	0000000000000000 .debug_frame
0000000000000000 l    df *ABS*	0000000000000000 libriscv__mmachine__freedom-e310-arty-fpu_a-entry.o
0000000020400064 l       .init	0000000000000000 early_trap_vector
0000000000000000 l    df *ABS*	0000000000000000 synchronize_harts.c
0000000000000000 l    df *ABS*	0000000000000000 crt0.o
000000002040013a l       .init	0000000000000000 _skip_init
0000000020405cb8 l       .rodata	0000000000000000 argv
0000000020405cc0 l       .rodata	0000000000000000 envp
0000000020405cc8 l       .rodata	0000000000000000 name
0000000000000000 l    df *ABS*	0000000000000000 euler.c
0000000000000000 l    df *ABS*	0000000000000000 printf.c
0000000000000000 l    df *ABS*	0000000000000000 findfp.c
00000000204002fa l     F .text	0000000000000066 std
0000000000000000 l    df *ABS*	0000000000000000 fwalk.c
0000000000000000 l    df *ABS*	0000000000000000 nano-mallocr.c
0000000000000000 l    df *ABS*	0000000000000000 nano-vfprintf.c
00000000204006d8 l     F .text	000000000000002a __sfputc_r
0000000000000000 l    df *ABS*	0000000000000000 sbrkr.c
0000000000000000 l    df *ABS*	0000000000000000 stdio.c
0000000000000000 l    df *ABS*	0000000000000000 wbuf.c
0000000000000000 l    df *ABS*	0000000000000000 writer.c
0000000000000000 l    df *ABS*	0000000000000000 wsetup.c
0000000000000000 l    df *ABS*	0000000000000000 closer.c
0000000000000000 l    df *ABS*	0000000000000000 fflush.c
0000000000000000 l    df *ABS*	0000000000000000 lseekr.c
0000000000000000 l    df *ABS*	0000000000000000 makebuf.c
0000000000000000 l    df *ABS*	0000000000000000 memchr.c
0000000000000000 l    df *ABS*	0000000000000000 mlock.c
0000000000000000 l    df *ABS*	0000000000000000 nano-mallocr.c
0000000000000000 l    df *ABS*	0000000000000000 nano-vfprintf_i.c
0000000000000000 l    df *ABS*	0000000000000000 readr.c
0000000000000000 l    df *ABS*	0000000000000000 fstatr.c
0000000000000000 l    df *ABS*	0000000000000000 isattyr.c
0000000000000000 l    df *ABS*	0000000000000000 sys_close.c
0000000000000000 l    df *ABS*	0000000000000000 sys_fstat.c
0000000000000000 l    df *ABS*	0000000000000000 sys_isatty.c
0000000000000000 l    df *ABS*	0000000000000000 sys_lseek.c
0000000000000000 l    df *ABS*	0000000000000000 sys_read.c
0000000000000000 l    df *ABS*	0000000000000000 sys_sbrk.c
0000000080000ae0 l     O .data	0000000000000008 brk
0000000000000000 l    df *ABS*	0000000000000000 sys_write.c
0000000000000000 l    df *ABS*	0000000000000000 atexit.c
0000000000000000 l    df *ABS*	0000000000000000 errno.c
0000000000000000 l    df *ABS*	0000000000000000 exit.c
0000000000000000 l    df *ABS*	0000000000000000 fini.c
0000000000000000 l    df *ABS*	0000000000000000 init.c
0000000000000000 l    df *ABS*	0000000000000000 __atexit.c
0000000080000b18 l     O .bss	0000000000000118 _global_atexit0
0000000000000000 l    df *ABS*	0000000000000000 __call_atexit.c
0000000000000000 l    df *ABS*	0000000000000000 tty.c
0000000020401970 l     F .text	0000000000000024 metal_tty_init
0000000000000000 l    df *ABS*	0000000000000000 uart.c
0000000000000000 l    df *ABS*	0000000000000000 riscv_clint0.c
0000000020401a28 l     F .text	000000000000002a __metal_driver_sifive_clint0_control_base
0000000020401a52 l     F .text	0000000000000028 __metal_driver_sifive_clint0_num_interrupts
0000000020401a7a l     F .text	0000000000000044 __metal_driver_sifive_clint0_interrupt_parents
0000000020401abe l     F .text	0000000000000038 __metal_driver_sifive_clint0_interrupt_lines
0000000020401c00 l     F .text	0000000000000036 _get_cpu_intc
0000000000000000 l    df *ABS*	0000000000000000 riscv_cpu.c
00000000204021e8 l     F .text	0000000000000024 __metal_driver_cpu_hartid
000000002040220c l     F .text	000000000000002a __metal_driver_cpu_timebase
0000000020402236 l     F .text	000000000000002a __metal_driver_cpu_interrupt_controller
0000000000000000 l    df *ABS*	0000000000000000 riscv_plic0.c
0000000020404092 l     F .text	000000000000002a __metal_driver_sifive_plic0_control_base
00000000204040bc l     F .text	0000000000000028 __metal_driver_sifive_plic0_num_interrupts
00000000204040e4 l     F .text	0000000000000028 __metal_driver_sifive_plic0_max_priority
000000002040410c l     F .text	000000000000002c __metal_driver_sifive_plic0_interrupt_parents
0000000020404138 l     F .text	0000000000000026 __metal_driver_sifive_plic0_interrupt_lines
0000000000000000 l    df *ABS*	0000000000000000 sifive_gpio0.c
0000000020404710 l     F .text	0000000000000026 __metal_driver_sifive_gpio0_base
0000000020404736 l     F .text	000000000000002a __metal_driver_sifive_gpio0_interrupt_parent
0000000020404760 l     F .text	00000000000001f4 __metal_driver_sifive_gpio0_interrupt_lines
0000000000000000 l    df *ABS*	0000000000000000 sifive_uart0.c
00000000204052f0 l     F .text	000000000000002a __metal_driver_sifive_uart0_control_base
000000002040531a l     F .text	000000000000002e __metal_driver_sifive_uart0_interrupt_parent
0000000020405348 l     F .text	0000000000000028 __metal_driver_sifive_uart0_interrupt_line
0000000020405370 l     F .text	000000000000002e __metal_driver_sifive_uart0_clock
000000002040539e l     F .text	000000000000002a __metal_driver_sifive_uart0_pinmux
00000000204053c8 l     F .text	000000000000002a __metal_driver_sifive_uart0_pinmux_output_selector
00000000204053f2 l     F .text	000000000000002a __metal_driver_sifive_uart0_pinmux_source_selector
0000000020405616 l     F .text	00000000000000ec pre_rate_change_callback_func
0000000020405702 l     F .text	0000000000000032 post_rate_change_callback_func
0000000000000000 l    df *ABS*	0000000000000000 clock.c
0000000000000000 l    df *ABS*	0000000000000000 cpu.c
0000000000000000 l    df *ABS*	0000000000000000 shutdown.c
0000000000000000 l    df *ABS*	0000000000000000 libriscv__mmachine__freedom-e310-arty-fpu_a-vector.o
0000000020405a00 l       .text	0000000000000000 IRQ_0
0000000020405a04 l       .text	0000000000000000 IRQ_1
0000000020405a08 l       .text	0000000000000000 IRQ_2
0000000020405a0c l       .text	0000000000000000 IRQ_3
0000000020405a10 l       .text	0000000000000000 IRQ_4
0000000020405a14 l       .text	0000000000000000 IRQ_5
0000000020405a18 l       .text	0000000000000000 IRQ_6
0000000020405a1c l       .text	0000000000000000 IRQ_7
0000000020405a20 l       .text	0000000000000000 IRQ_8
0000000020405a24 l       .text	0000000000000000 IRQ_9
0000000020405a28 l       .text	0000000000000000 IRQ_10
0000000020405a2c l       .text	0000000000000000 IRQ_11
0000000020405a30 l       .text	0000000000000000 IRQ_12
0000000020405a34 l       .text	0000000000000000 IRQ_13
0000000020405a38 l       .text	0000000000000000 IRQ_14
0000000020405a3c l       .text	0000000000000000 IRQ_15
0000000020405a40 l       .text	0000000000000000 IRQ_LC0
0000000020405a44 l       .text	0000000000000000 IRQ_LC1
0000000020405a48 l       .text	0000000000000000 IRQ_LC2
0000000020405a4c l       .text	0000000000000000 IRQ_LC3
0000000020405a50 l       .text	0000000000000000 IRQ_LC4
0000000020405a54 l       .text	0000000000000000 IRQ_LC5
0000000020405a58 l       .text	0000000000000000 IRQ_LC6
0000000020405a5c l       .text	0000000000000000 IRQ_LC7
0000000020405a60 l       .text	0000000000000000 IRQ_LC8
0000000020405a64 l       .text	0000000000000000 IRQ_LC9
0000000020405a68 l       .text	0000000000000000 IRQ_LC10
0000000020405a6c l       .text	0000000000000000 IRQ_LC11
0000000020405a70 l       .text	0000000000000000 IRQ_LC12
0000000020405a74 l       .text	0000000000000000 IRQ_LC13
0000000020405a78 l       .text	0000000000000000 IRQ_LC14
0000000020405a7c l       .text	0000000000000000 IRQ_LC15
0000000000000000 l    df *ABS*	0000000000000000 fixed-clock.c
0000000020405b00 l     F .text	000000000000002e __metal_driver_fixed_clock_rate
0000000000000000 l    df *ABS*	0000000000000000 sys_exit.c
0000000000000000 l    df *ABS*	0000000000000000 impure.c
0000000080000000 l     O .data	00000000000000b0 impure_data
0000000000000000 l    df *ABS*	0000000000000000 inline.c
0000000000000000 l    df *ABS*	0000000000000000 
00000000204061b0 l       .init_array	0000000000000000 __fini_array_end
00000000204061b0 l       .init_array	0000000000000000 __fini_array_start
00000000204061b0 l       .init_array	0000000000000000 __init_array_end
00000000204061a8 l       .init_array	0000000000000000 __preinit_array_end
00000000204061a8 l       .init_array	0000000000000000 __init_array_start
00000000204061a8 l       .init_array	0000000000000000 __preinit_array_start
0000000020406158 g     O .rodata	0000000000000040 __metal_driver_vtable_sifive_uart0
00000000204014f2 g     F .text	000000000000002a _isatty_r
0000000020402c7e  w    F .text	00000000000000e2 metal_lc4_interrupt_vector_handler
0000000020400ebc g     F .text	000000000000002e _lseek_r
000000002040555e g     F .text	00000000000000b8 __metal_driver_sifive_uart0_set_baud_rate
0000000020401e1a g     F .text	0000000000000060 __metal_driver_riscv_clint0_set_vector_mode
0000000020402b9c  w    F .text	00000000000000e2 metal_lc3_interrupt_vector_handler
0000000020403812 g     F .text	0000000000000054 __metal_valid_interrupt_id
00000000204002b4 g     F .text	0000000000000046 printf
0000000020403c6c g     F .text	000000000000001e __metal_driver_riscv_cpu_controller_get_vector_mode
00000000800012d0 g       .data	0000000000000000 __global_pointer$
0000000020405810 g     F .text	0000000000000054 _metal_clock_append_to_callbacks
0000000020404190 g     F .text	000000000000003c __metal_plic0_complete_interrupt
0000000020403ad2 g     F .text	000000000000013e __metal_driver_riscv_cpu_controller_interrupt_register
0000000020400aa6 g     F .text	0000000000000038 __sseek
00000000204003b2 g     F .text	0000000000000076 __sinit
0000000020400ae4 g     F .text	00000000000000c6 __swbuf_r
000000002040036a g     F .text	0000000000000048 __sfmoreglue
0000000020401002 g     F .text	0000000000000002 __malloc_unlock
00000000204058ee g     F .text	000000000000002e metal_cpu_get
0000000080000a90 g     O .data	0000000000000040 __metal_dt_serial_10013000
0000000020404c92 g     F .text	000000000000005c __metal_driver_sifive_gpio0_disable_io
0000000020405cd8 g     O .rodata	0000000000000098 __metal_driver_vtable_riscv_clint0
0000000080000c34 g       .bss	0000000000000000 metal_segment_bss_target_end
0000000020401af6 g     F .text	000000000000006c __metal_clint0_mtime_get
0000000020404022 g     F .text	0000000000000032 __metal_driver_cpu_get_instruction_length
0000000000000000 g       *ABS*	0000000000000000 __metal_chicken_bit
00000000204049a6 g     F .text	0000000000000058 __metal_driver_sifive_gpio0_disable_input
00000000204016e0 g     F .text	000000000000000c __errno
0000000008000000 g       .init_array	0000000000000000 metal_segment_itim_target_start
0000000020405462 g     F .text	000000000000003c __metal_driver_sifive_uart0_txready
0000000020400074 g     F .init	000000000000000e __metal_synchronize_harts
0000000080000b00 g       .bss	0000000000000000 metal_segment_bss_target_start
0000000020401b62 g     F .text	000000000000009e __metal_driver_riscv_clint0_mtimecmp_set
00000000204014c6 g     F .text	000000000000002c _fstat_r
0000000020405028 g     F .text	0000000000000274 __metal_driver_sifive_gpio0_clear_int
0000000080000c30 g     O .bss	0000000000000004 errno
0000000000000400 g       *ABS*	0000000000000000 __stack_size
0000000020405864 g     F .text	0000000000000032 metal_clock_register_pre_rate_change_callback
00000000204030e8  w    F .text	00000000000000e2 metal_lc9_interrupt_vector_handler
0000000020406008 g     O .rodata	0000000000000098 __metal_driver_vtable_riscv_plic0
0000000020405f88 g     O .rodata	0000000000000080 __metal_driver_vtable_cpu
00000000204019f6 g     F .text	0000000000000032 metal_uart_set_baud_rate
0000000020405734 g     F .text	00000000000000dc __metal_driver_sifive_uart0_init
0000000020403d10 g     F .text	0000000000000022 __metal_driver_cpu_mcycle_get
0000000080001034 g       .heap	0000000000000000 metal_segment_heap_target_start
0000000020400360 g     F .text	000000000000000a _cleanup_r
0000000080000af0 g     O .data	0000000000000008 __metal_dt_cpu_0
0000000020403006  w    F .text	00000000000000e2 metal_lc8_interrupt_vector_handler
0000000020403470  w    F .text	00000000000000e2 metal_lc13_interrupt_vector_handler
00000000204023d6 g     F .text	000000000000001a __metal_default_exception_handler
0000000020401542 g     F .text	000000000000002a _fstat
00000000204021b0 g     F .text	0000000000000038 __metal_driver_riscv_clint0_set_interrupt
0000000020404238 g     F .text	0000000000000076 __metal_plic0_set_priority
0000000020403c8a g     F .text	0000000000000068 __metal_driver_riscv_cpu_controller_set_vector_mode
0000000020402260 g     F .text	0000000000000030 __metal_driver_cpu_get
0000000020405ef0 g     O .rodata	0000000000000098 __metal_driver_vtable_riscv_cpu_intc
00000000204022c2 g     F .text	0000000000000018 __metal_interrupt_global_disable
0000000020402f24  w    F .text	00000000000000e2 metal_lc7_interrupt_vector_handler
00000000204031ca  w    F .text	00000000000000e2 metal_lc10_interrupt_vector_handler
00000000204009fa g     F .text	000000000000002a _sbrk_r
00000000204046c0 g     F .text	0000000000000050 __metal_driver_riscv_plic0_disable
0000000020403944 g     F .text	0000000000000054 __metal_exception_register
0000000020401498 g     F .text	000000000000002e _read_r
0000000020403e2c g     F .text	000000000000001a __metal_driver_cpu_timer_controller_interrupt
0000000020404ab8 g     F .text	0000000000000052 __metal_driver_sifive_gpio0_enable_output
0000000020402542 g     F .text	000000000000006c __metal_default_sw_handler
0000000020405896 g     F .text	0000000000000032 metal_clock_register_post_rate_change_callback
000000002040541c g     F .text	0000000000000020 __metal_driver_sifive_uart0_interrupt_controller
000000002040156c g     F .text	000000000000002c _isatty
0000000020404bb4 g     F .text	0000000000000052 __metal_driver_sifive_gpio0_output_toggle
0000000020406198 g     O .rodata	0000000000000010 __metal_driver_vtable_fixed_clock
0000000080000ad8 g     O .data	0000000000000008 _global_impure_ptr
00000000204025ae  w    F .text	00000000000000e2 metal_timer_interrupt_vector_handler
0000000020401752 g     F .text	000000000000006a __libc_init_array
0000000020404b0a g     F .text	0000000000000052 __metal_driver_sifive_gpio0_output_set
00000000204032ac  w    F .text	00000000000000e2 metal_lc11_interrupt_vector_handler
0000000020403c10 g     F .text	000000000000002e __metal_driver_riscv_cpu_controller_interrupt_enable
00000000204015f8 g     F .text	0000000000000064 _sbrk
0000000020404a60 g     F .text	0000000000000058 __metal_driver_sifive_gpio0_disable_output
000000002040017c g     F .init	0000000000000002 _init
0000000020402324 g     F .text	000000000000001a __metal_interrupt_timer_disable
0000000020404cee g     F .text	000000000000033a __metal_driver_sifive_gpio0_config_int
0000000020403eee g     F .text	0000000000000066 __metal_driver_cpu_clear_sw_ipi
00000000204060e0 g     O .rodata	0000000000000078 __metal_driver_vtable_sifive_gpio0
0000000020404c06 g     F .text	000000000000008c __metal_driver_sifive_gpio0_enable_io
000000002040171a g     F .text	0000000000000038 __libc_fini_array
000000002040529c g     F .text	0000000000000020 __metal_driver_gpio_interrupt_controller
0000000020403e74 g     F .text	0000000000000014 __metal_driver_cpu_get_sw_interrupt_id
0000000080000000 g       .data	0000000000000000 metal_segment_data_target_start
0000000020402376 g     F .text	0000000000000030 __metal_interrupt_local_enable
0000000020402178 g     F .text	0000000000000038 __metal_driver_riscv_clint0_clear_interrupt
000000002040190c g     F .text	0000000000000038 metal_tty_putc
00000000204043a4 g     F .text	000000000000001a __metal_plic0_default_handler
00000000800000b0 g     O .data	0000000000000018 __metal_dt_clock_0
0000000000000800 g       *ABS*	0000000000000000 __heap_size
0000000020405bc8 g     O .rodata	0000000000000038 __sf_fake_stderr
000000002040235a g     F .text	000000000000001c __metal_interrupt_external_disable
000000002040543c g     F .text	0000000000000026 __metal_driver_sifive_uart0_get_interrupt_id
0000000020403cf2 g     F .text	000000000000001e __metal_driver_riscv_cpu_controller_command_request
0000000020403998 g     F .text	000000000000013a __metal_driver_riscv_cpu_controller_interrupt_init
0000000020400702 g     F .text	0000000000000044 __sfputs_r
0000000020403fd8 g     F .text	000000000000004a __metal_driver_cpu_exception_register
00000000204022da g     F .text	0000000000000018 __metal_interrupt_software_enable
00000000204029d8  w    F .text	00000000000000e2 metal_lc1_interrupt_vector_handler
0000000020400fe6 g     F .text	000000000000001a memchr
0000000020401004 g     F .text	00000000000000ae _free_r
0000000080000b10 g     O .bss	0000000000000008 _global_atexit
0000000020403716 g     F .text	0000000000000050 __metal_controller_interrupt_vector_mode
0000000020401846 g     F .text	00000000000000c6 __call_exitprocs
0000000080001034 g       .stack	0000000000000000 _sp
0000000020400082 g     F .init	0000000000000000 _start
0000000020401598 g     F .text	0000000000000032 _lseek
0000000020403fb8 g     F .text	0000000000000020 __metal_driver_cpu_controller_interrupt
0000000020404054 g     F .text	000000000000001e __metal_driver_cpu_get_exception_pc
000000002040233e g     F .text	000000000000001c __metal_interrupt_external_enable
00000000204017bc g     F .text	000000000000008a __register_exitproc
000000002040549e g     F .text	0000000000000044 __metal_driver_sifive_uart0_putc
0000000020404458 g     F .text	0000000000000156 __metal_driver_riscv_plic0_init
0000000020404670 g     F .text	0000000000000050 __metal_driver_riscv_plic0_enable
0000000020404a2e g     F .text	0000000000000032 __metal_driver_sifive_gpio0_output
0000000020402e42  w    F .text	00000000000000e2 metal_lc6_interrupt_vector_handler
0000000020402290 g     F .text	000000000000001a __metal_myhart_id
00000000204052bc g     F .text	0000000000000034 __metal_driver_gpio_get_interrupt_id
0000000020402460  w    F .text	00000000000000e2 metal_software_interrupt_vector_handler
0000000020403c3e g     F .text	000000000000002e __metal_driver_riscv_cpu_controller_interrupt_disable
0000000020400cee g     F .text	000000000000002a _close_r
000000002040553c g     F .text	0000000000000022 __metal_driver_sifive_uart0_get_baud_rate
0000000020401cd2 g     F .text	0000000000000100 __metal_driver_riscv_clint0_register
00000000800000c8 g     O .data	0000000000000010 __metal_dt_clint_2000000
0000000020400bd8 g     F .text	0000000000000116 __swsetup_r
0000000020400428 g     F .text	00000000000000a0 __sfp
0000000020400a24 g     F .text	0000000000000032 __sread
0000000020404954 g     F .text	0000000000000052 __metal_driver_sifive_gpio0_enable_input
000000002040017e  w    F .init	0000000000000000 secondary_main
000000002040240a  w    F .text	0000000000000056 metal_interrupt_vector_handler
0000000020401000 g     F .text	0000000000000002 __malloc_lock
0000000020400e56 g     F .text	0000000000000066 _fflush_r
0000000020404208 g     F .text	0000000000000030 __metal_plic0_get_threshold
0000000020405c00 g     O .rodata	0000000000000038 __sf_fake_stdin
0000000020403866 g     F .text	00000000000000de __metal_local_interrupt_enable
000000002040201e g     F .text	000000000000015a __metal_driver_riscv_clint0_command_request
0000000020400536 g     F .text	00000000000000aa memset
0000000020402d60  w    F .text	00000000000000e2 metal_lc5_interrupt_vector_handler
0000000020400200 g     F .text	00000000000000b4 main
0000000080000b00 g       .data	0000000000000000 metal_segment_data_target_end
0000000020403e88 g     F .text	0000000000000066 __metal_driver_cpu_set_sw_ipi
0000000020403f54 g     F .text	0000000000000064 __metal_driver_cpu_get_msip
0000000020405936 g     F .text	0000000000000010 metal_shutdown
0000000008000000 g       .init_array	0000000000000000 metal_segment_itim_target_end
0000000020404072 g     F .text	0000000000000020 __metal_driver_cpu_set_exception_pc
000000002040415e g     F .text	0000000000000032 __metal_plic0_claim_interrupt
0000000020400ade g     F .text	0000000000000006 __sclose
000000002040338e  w    F .text	00000000000000e2 metal_lc12_interrupt_vector_handler
00000000204005e0 g     F .text	00000000000000f8 _malloc_r
0000000020401dfc g     F .text	000000000000001e __metal_driver_riscv_clint0_get_vector_mode
0000000020403d32 g     F .text	0000000000000032 __metal_driver_cpu_timebase_get
0000000020400000 g       .init	0000000000000000 _enter
000000002040591c g     F .text	000000000000001a metal_cpu_get_current_hartid
0000000020405a00 g       .text	0000000000000000 __metal_vector_table
00000000204061b0 g       *ABS*	0000000000000000 metal_segment_itim_source_start
0000000080000ae8  w    O .data	0000000000000008 __metal_cpu_table
00000000800000d8 g     O .data	0000000000000570 __metal_dt_cpu_0_interrupt_controller
000000002040017c g     F .init	0000000000000002 _fini
00000000204002b4 g     F .text	0000000000000046 iprintf
00000000204022aa g     F .text	0000000000000018 __metal_interrupt_global_enable
00000000204016d6 g     F .text	000000000000000a atexit
0000000020401944 g     F .text	000000000000002c metal_tty_putc_raw
0000000020400baa g     F .text	000000000000002e _write_r
000000002040230a g     F .text	000000000000001a __metal_interrupt_timer_enable
00000000204054e2 g     F .text	000000000000005a __metal_driver_sifive_uart0_getc
0000000020401f4c g     F .text	00000000000000d2 __metal_driver_riscv_clint0_disable
00000000204010b2 g     F .text	0000000000000124 _printf_common
0000000080000ad0 g     O .data	0000000000000008 _impure_ptr
0000000020403dbc g     F .text	0000000000000070 __metal_driver_cpu_mtimecmp_set
0000000020400d18 g     F .text	000000000000013e __sflush_r
0000000020405b2e g     F .text	0000000000000020 __metal_driver_fixed_clock_get_rate_hz
0000000020401e7a g     F .text	00000000000000d2 __metal_driver_riscv_clint0_enable
00000000204061b0 g       *ABS*	0000000000000000 metal_segment_data_source_start
0000000080001834 g       .heap	0000000000000000 metal_segment_heap_target_end
0000000020403766 g     F .text	00000000000000ac __metal_controller_interrupt_vector
0000000080000648 g     O .data	0000000000000448 __metal_dt_interrupt_controller_c000000
0000000020400eea g     F .text	000000000000005a __swhatbuf_r
0000000020404b5c g     F .text	0000000000000058 __metal_driver_sifive_gpio0_output_clear
0000000020402690 g     F .text	000000000000004a __metal_default_timer_handler
000000002040165c g     F .text	000000000000007a _write
00000000204043be g     F .text	000000000000009a __metal_plic0_handler
0000000020402aba  w    F .text	00000000000000e2 metal_lc2_interrupt_vector_handler
0000000020403634  w    F .text	00000000000000e2 metal_lc15_interrupt_vector_handler
00000000204058c8 g     F .text	0000000000000026 metal_cpu_interrupt_controller
0000000020400a56 g     F .text	0000000000000050 __swrite
00000000204016ec g     F .text	000000000000002e exit
0000000020400746 g     F .text	00000000000002b4 _vfiprintf_r
00000000204004c8 g     F .text	000000000000006e _fwalk_reent
0000000020405b4e g     F .text	0000000000000024 __metal_driver_fixed_clock_set_rate_hz
0000000020405c38 g     O .rodata	0000000000000038 __sf_fake_stdout
0000000080000af8 g     O .data	0000000000000008 __metal_dt_gpio_10012000
00000000204023f0 g     F .text	000000000000001a __metal_default_interrupt_handler
00000000204019c4 g     F .text	0000000000000032 metal_uart_putc
00000000204015ca g     F .text	000000000000002e _read
00000000204049fe g     F .text	0000000000000030 __metal_driver_sifive_gpio0_input
0000000020402700 g     F .text	00000000000001a0 __metal_exception_handler
00000000204028f6  w    F .text	00000000000000e2 metal_lc0_interrupt_vector_handler
0000000020405b72 g     F .text	0000000000000018 _exit
0000000020403d64 g     F .text	0000000000000058 __metal_driver_cpu_mtime_get
0000000020400f44 g     F .text	00000000000000a2 __smakebuf_r
0000000020401dd2 g     F .text	000000000000002a __metal_driver_riscv_clint0_vector_register
00000000204011d6 g     F .text	00000000000002c2 _printf_i
0000000080000b08 g     O .bss	0000000000000008 __malloc_sbrk_start
0000000020403552  w    F .text	00000000000000e2 metal_lc14_interrupt_vector_handler
0000000020401c36 g     F .text	000000000000009c __metal_driver_riscv_clint0_init
0000000080000b00 g     O .bss	0000000000000008 __malloc_free_list
0000000020400746 g     F .text	00000000000002b4 _vfprintf_r
0000000020403e46 g     F .text	0000000000000014 __metal_driver_cpu_get_timer_interrupt_id
00000000204042ec g     F .text	00000000000000b8 __metal_plic0_enable
0000000020400072  w      .init	0000000000000000 __register_frame_info
0000000020403e5a g     F .text	000000000000001a __metal_driver_cpu_sw_controller_interrupt
00000000204023a6 g     F .text	0000000000000030 __metal_interrupt_local_disable
00000000204022f2 g     F .text	0000000000000018 __metal_interrupt_software_disable
00000000204042ae g     F .text	000000000000003e __metal_plic0_get_priority
0000000020401994 g     F .text	0000000000000030 metal_uart_init
00000000204041cc g     F .text	000000000000003c __metal_plic0_set_threshold
000000002040151c g     F .text	0000000000000026 _close
0000000000000000 g       *ABS*	0000000000000000 __metal_boot_hart
00000000204045ae g     F .text	00000000000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

0000000020400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
    20400000:	5fc01197          	auipc	gp,0x5fc01
    20400004:	2d018193          	addi	gp,gp,720 # 800012d0 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
    20400008:	00000297          	auipc	t0,0x0
    2040000c:	05c28293          	addi	t0,t0,92 # 20400064 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
    20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
    20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
    20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
    2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
    20400020:	dfc00117          	auipc	sp,0xdfc00
    20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
    20400028:	dfc00097          	auipc	ra,0xdfc00
    2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
    20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
    20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
    20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
    2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
    2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
    2040003e:	044000ef          	jal	ra,20400082 <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
    20400042:	dfc00097          	auipc	ra,0xdfc00
    20400046:	fbe08093          	addi	ra,ra,-66 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
    2040004a:	00008363          	beqz	ra,20400050 <_enter+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
    2040004e:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
    20400050:	00000297          	auipc	t0,0x0
    20400054:	00c28293          	addi	t0,t0,12 # 2040005c <_enter+0x5c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
    20400058:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
    2040005c:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
    20400060:	bff5                	j	2040005c <_enter+0x5c>
	...

0000000020400064 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
    20400064:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
    20400068:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
    2040006c:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
    20400070:	bfd5                	j	20400064 <early_trap_vector>

0000000020400072 <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
    20400072:	8082                	ret

0000000020400074 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
    20400074:	1141                	addi	sp,sp,-16
    20400076:	e422                	sd	s0,8(sp)
    20400078:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
    2040007a:	0001                	nop
    2040007c:	6422                	ld	s0,8(sp)
    2040007e:	0141                	addi	sp,sp,16
    20400080:	8082                	ret

0000000020400082 <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
    20400082:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
    20400084:	5fc01197          	auipc	gp,0x5fc01
    20400088:	24c18193          	addi	gp,gp,588 # 800012d0 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
    2040008c:	d6418113          	addi	sp,gp,-668 # 80001034 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
    20400090:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
    20400092:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
    20400096:	00a28563          	beq	t0,a0,204000a0 <_start+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
    2040009a:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
    2040009c:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
    2040009e:	bfe5                	j	20400096 <_start+0x14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
    204000a0:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
    204000a4:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
    204000a8:	08551963          	bne	a0,t0,2040013a <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
    204000ac:	00006297          	auipc	t0,0x6
    204000b0:	10428293          	addi	t0,t0,260 # 204061b0 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
    204000b4:	5fc00317          	auipc	t1,0x5fc00
    204000b8:	f4c30313          	addi	t1,t1,-180 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
    204000bc:	83018393          	addi	t2,gp,-2000 # 80000b00 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
    204000c0:	00628c63          	beq	t0,t1,204000d8 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
    204000c4:	00735a63          	bge	t1,t2,204000d8 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:90
  addi t0, t0, 4
  sw   a0, 0(t1)
  addi t1, t1, 4
  blt  t1, t2, 1b
#else
  ld   a0, 0(t0)
    204000c8:	0002b503          	ld	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:91
  addi t0, t0, 8
    204000cc:	02a1                	addi	t0,t0,8
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:92
  sd   a0, 0(t1)
    204000ce:	00a33023          	sd	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:93
  addi t1, t1, 8
    204000d2:	0321                	addi	t1,t1,8
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:94
  blt  t1, t2, 1b
    204000d4:	fe734ae3          	blt	t1,t2,204000c8 <_start+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
    204000d8:	00006297          	auipc	t0,0x6
    204000dc:	0d828293          	addi	t0,t0,216 # 204061b0 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
    204000e0:	e7c00317          	auipc	t1,0xe7c00
    204000e4:	f2030313          	addi	t1,t1,-224 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
    204000e8:	e7c00397          	auipc	t2,0xe7c00
    204000ec:	f1838393          	addi	t2,t2,-232 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
    204000f0:	00628c63          	beq	t0,t1,20400108 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
    204000f4:	00735a63          	bge	t1,t2,20400108 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:114
  addi t0, t0, 4
  sw   a0, 0(t1)
  addi t1, t1, 4
  blt  t1, t2, 1b
#else
  ld   a0, 0(t0)
    204000f8:	0002b503          	ld	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:115
  addi t0, t0, 8
    204000fc:	02a1                	addi	t0,t0,8
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:116
  sd   a0, 0(t1)
    204000fe:	00a33023          	sd	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:117
  addi t1, t1, 8
    20400102:	0321                	addi	t1,t1,8
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:118
  blt  t1, t2, 1b
    20400104:	fe734ae3          	blt	t1,t2,204000f8 <_start+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
    20400108:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
    2040010c:	5fc01317          	auipc	t1,0x5fc01
    20400110:	9f430313          	addi	t1,t1,-1548 # 80000b00 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
    20400114:	96418393          	addi	t2,gp,-1692 # 80000c34 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
    20400118:	00735763          	bge	t1,t2,20400126 <_start+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:138
#if __riscv_xlen == 32
  sw   x0, 0(t1)
  addi t1, t1, 4
  blt  t1, t2, 1b
#else
  sd   x0, 0(t1)
    2040011c:	00033023          	sd	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:139
  addi t1, t1, 8
    20400120:	0321                	addi	t1,t1,8
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:140
  blt  t1, t2, 1b
    20400122:	fe734de3          	blt	t1,t2,2040011c <_start+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
    20400126:	c211                	beqz	a2,2040012a <_start+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
    20400128:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
    2040012a:	00001517          	auipc	a0,0x1
    2040012e:	5f050513          	addi	a0,a0,1520 # 2040171a <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
    20400132:	5a4010ef          	jal	ra,204016d6 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
    20400136:	61c010ef          	jal	ra,20401752 <__libc_init_array>

000000002040013a <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
    2040013a:	f3bff0ef          	jal	ra,20400074 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
    2040013e:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
    20400142:	00010737          	lui	a4,0x10
    20400146:	0287071b          	addiw	a4,a4,40
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
    2040014a:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
    2040014c:	cb89                	beqz	a5,2040015e <_skip_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
    2040014e:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
    20400152:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
    20400154:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
    20400156:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
    2040015a:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
    2040015e:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
    20400160:	00006597          	auipc	a1,0x6
    20400164:	b5858593          	addi	a1,a1,-1192 # 20405cb8 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
    20400168:	00006617          	auipc	a2,0x6
    2040016c:	b5860613          	addi	a2,a2,-1192 # 20405cc0 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
    20400170:	00e000ef          	jal	ra,2040017e <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
    20400174:	578010ef          	jal	ra,204016ec <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
    20400178:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
    2040017a:	8082                	ret

000000002040017c <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
    2040017c:	8082                	ret

000000002040017e <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
    2040017e:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:219
#if __riscv_xlen == 32
  sw ra, 4(sp)
#else
  sd ra, 8(sp)
    20400180:	e406                	sd	ra,8(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#endif
  csrr t0, mhartid
    20400182:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
    20400186:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
    2040018a:	00628563          	beq	t0,t1,20400194 <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
    2040018e:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
    20400192:	bff5                	j	2040018e <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
    20400194:	06c000ef          	jal	ra,20400200 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:232
#if __riscv_xlen == 32
  lw ra, 4(sp)
#else
  ld ra, 8(sp)
    20400198:	60a2                	ld	ra,8(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#endif
  addi sp, sp, 16
    2040019a:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
    2040019c:	8082                	ret

Disassembly of section .text:

0000000020400200 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/euler/euler.c:16

#ifdef PFDEBUG
#include <stdio.h>
#endif

int main(int argc, char** argv) {
    20400200:	7179                	addi	sp,sp,-48
    20400202:	f406                	sd	ra,40(sp)
    20400204:	f022                	sd	s0,32(sp)
    20400206:	1800                	addi	s0,sp,48
    20400208:	87aa                	mv	a5,a0
    2040020a:	fcb43823          	sd	a1,-48(s0)
    2040020e:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/euler/euler.c:21
  int n, i;
  float e, fact;

#ifdef FIXEDN
  n = N;
    20400212:	47d1                	li	a5,20
    20400214:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/euler/euler.c:32
    return -1;
  }
  n = atoi(argv[1]);
#endif // FIXEDN

  e = 2.0;
    20400218:	00006797          	auipc	a5,0x6
    2040021c:	9a478793          	addi	a5,a5,-1628 # 20405bbc <_exit+0x4a>
    20400220:	0007a787          	flw	fa5,0(a5)
    20400224:	fef42427          	fsw	fa5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/euler/euler.c:33
  fact = 1.0;
    20400228:	00006797          	auipc	a5,0x6
    2040022c:	99878793          	addi	a5,a5,-1640 # 20405bc0 <_exit+0x4e>
    20400230:	0007a787          	flw	fa5,0(a5)
    20400234:	fef42227          	fsw	fa5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/euler/euler.c:34
  for (i = 2; i < n; i++) {
    20400238:	4789                	li	a5,2
    2040023a:	fef42623          	sw	a5,-20(s0)
    2040023e:	a805                	j	2040026e <main+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/software/euler/euler.c:35 (discriminator 3)
    fact = fact / i;
    20400240:	fec42783          	lw	a5,-20(s0)
    20400244:	d007f7d3          	fcvt.s.w	fa5,a5
    20400248:	fe442707          	flw	fa4,-28(s0)
    2040024c:	18f777d3          	fdiv.s	fa5,fa4,fa5
    20400250:	fef42227          	fsw	fa5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/euler/euler.c:36 (discriminator 3)
    e = e + fact;
    20400254:	fe842707          	flw	fa4,-24(s0)
    20400258:	fe442787          	flw	fa5,-28(s0)
    2040025c:	00f777d3          	fadd.s	fa5,fa4,fa5
    20400260:	fef42427          	fsw	fa5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/euler/euler.c:34 (discriminator 3)
  for (i = 2; i < n; i++) {
    20400264:	fec42783          	lw	a5,-20(s0)
    20400268:	2785                	addiw	a5,a5,1
    2040026a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/euler/euler.c:34 (discriminator 1)
    2040026e:	fec42703          	lw	a4,-20(s0)
    20400272:	fe042783          	lw	a5,-32(s0)
    20400276:	2701                	sext.w	a4,a4
    20400278:	2781                	sext.w	a5,a5
    2040027a:	fcf743e3          	blt	a4,a5,20400240 <main+0x40>
/home/albertojor/GitHub/freedom-e-sdk/software/euler/euler.c:39
  }
#ifdef PFDEBUG
  printf("Euler's number with %i iterations: ", n);
    2040027e:	fe042783          	lw	a5,-32(s0)
    20400282:	85be                	mv	a1,a5
    20400284:	00006517          	auipc	a0,0x6
    20400288:	90c50513          	addi	a0,a0,-1780 # 20405b90 <_exit+0x1e>
    2040028c:	028000ef          	jal	ra,204002b4 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/euler/euler.c:40
  printf("%x\n", e);
    20400290:	fe842787          	flw	fa5,-24(s0)
    20400294:	420787d3          	fcvt.d.s	fa5,fa5
    20400298:	e20785d3          	fmv.x.d	a1,fa5
    2040029c:	00006517          	auipc	a0,0x6
    204002a0:	91c50513          	addi	a0,a0,-1764 # 20405bb8 <_exit+0x46>
    204002a4:	010000ef          	jal	ra,204002b4 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/euler/euler.c:42
#endif
	return 0;
    204002a8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/euler/euler.c:43
}
    204002aa:	853e                	mv	a0,a5
    204002ac:	70a2                	ld	ra,40(sp)
    204002ae:	7402                	ld	s0,32(sp)
    204002b0:	6145                	addi	sp,sp,48
    204002b2:	8082                	ret

00000000204002b4 <iprintf>:
printf():
    204002b4:	7159                	addi	sp,sp,-112
    204002b6:	ecbe                	sd	a5,88(sp)
    204002b8:	fc2e                	sd	a1,56(sp)
    204002ba:	e0b2                	sd	a2,64(sp)
    204002bc:	e4b6                	sd	a3,72(sp)
    204002be:	e8ba                	sd	a4,80(sp)
    204002c0:	f0c2                	sd	a6,96(sp)
    204002c2:	f4c6                	sd	a7,104(sp)
    204002c4:	5fc01797          	auipc	a5,0x5fc01
    204002c8:	80c78793          	addi	a5,a5,-2036 # 80000ad0 <_impure_ptr>
    204002cc:	f022                	sd	s0,32(sp)
    204002ce:	6380                	ld	s0,0(a5)
    204002d0:	ec26                	sd	s1,24(sp)
    204002d2:	f406                	sd	ra,40(sp)
    204002d4:	84aa                	mv	s1,a0
    204002d6:	c411                	beqz	s0,204002e2 <iprintf+0x2e>
    204002d8:	581c                	lw	a5,48(s0)
    204002da:	e781                	bnez	a5,204002e2 <iprintf+0x2e>
    204002dc:	8522                	mv	a0,s0
    204002de:	0d4000ef          	jal	ra,204003b2 <__sinit>
    204002e2:	680c                	ld	a1,16(s0)
    204002e4:	1834                	addi	a3,sp,56
    204002e6:	8626                	mv	a2,s1
    204002e8:	8522                	mv	a0,s0
    204002ea:	e436                	sd	a3,8(sp)
    204002ec:	45a000ef          	jal	ra,20400746 <_vfiprintf_r>
    204002f0:	70a2                	ld	ra,40(sp)
    204002f2:	7402                	ld	s0,32(sp)
    204002f4:	64e2                	ld	s1,24(sp)
    204002f6:	6165                	addi	sp,sp,112
    204002f8:	8082                	ret

00000000204002fa <std>:
std():
    204002fa:	1141                	addi	sp,sp,-16
    204002fc:	e022                	sd	s0,0(sp)
    204002fe:	e406                	sd	ra,8(sp)
    20400300:	842a                	mv	s0,a0
    20400302:	00b51823          	sh	a1,16(a0)
    20400306:	00c51923          	sh	a2,18(a0)
    2040030a:	00053023          	sd	zero,0(a0)
    2040030e:	00053423          	sd	zero,8(a0)
    20400312:	0a052623          	sw	zero,172(a0)
    20400316:	00053c23          	sd	zero,24(a0)
    2040031a:	02052023          	sw	zero,32(a0)
    2040031e:	02052423          	sw	zero,40(a0)
    20400322:	4621                	li	a2,8
    20400324:	4581                	li	a1,0
    20400326:	0a450513          	addi	a0,a0,164
    2040032a:	20c000ef          	jal	ra,20400536 <memset>
    2040032e:	00000797          	auipc	a5,0x0
    20400332:	6f678793          	addi	a5,a5,1782 # 20400a24 <__sread>
    20400336:	e03c                	sd	a5,64(s0)
    20400338:	00000797          	auipc	a5,0x0
    2040033c:	71e78793          	addi	a5,a5,1822 # 20400a56 <__swrite>
    20400340:	e43c                	sd	a5,72(s0)
    20400342:	00000797          	auipc	a5,0x0
    20400346:	76478793          	addi	a5,a5,1892 # 20400aa6 <__sseek>
    2040034a:	e83c                	sd	a5,80(s0)
    2040034c:	00000797          	auipc	a5,0x0
    20400350:	79278793          	addi	a5,a5,1938 # 20400ade <__sclose>
    20400354:	fc00                	sd	s0,56(s0)
    20400356:	ec3c                	sd	a5,88(s0)
    20400358:	60a2                	ld	ra,8(sp)
    2040035a:	6402                	ld	s0,0(sp)
    2040035c:	0141                	addi	sp,sp,16
    2040035e:	8082                	ret

0000000020400360 <_cleanup_r>:
_cleanup_r():
    20400360:	00001597          	auipc	a1,0x1
    20400364:	af658593          	addi	a1,a1,-1290 # 20400e56 <_fflush_r>
    20400368:	a285                	j	204004c8 <_fwalk_reent>

000000002040036a <__sfmoreglue>:
__sfmoreglue():
    2040036a:	1101                	addi	sp,sp,-32
    2040036c:	e426                	sd	s1,8(sp)
    2040036e:	0b000613          	li	a2,176
    20400372:	fff5849b          	addiw	s1,a1,-1
    20400376:	02c484b3          	mul	s1,s1,a2
    2040037a:	e04a                	sd	s2,0(sp)
    2040037c:	892e                	mv	s2,a1
    2040037e:	e822                	sd	s0,16(sp)
    20400380:	ec06                	sd	ra,24(sp)
    20400382:	0c848593          	addi	a1,s1,200
    20400386:	25a000ef          	jal	ra,204005e0 <_malloc_r>
    2040038a:	842a                	mv	s0,a0
    2040038c:	cd01                	beqz	a0,204003a4 <__sfmoreglue+0x3a>
    2040038e:	00053023          	sd	zero,0(a0)
    20400392:	01252423          	sw	s2,8(a0)
    20400396:	0561                	addi	a0,a0,24
    20400398:	e808                	sd	a0,16(s0)
    2040039a:	0b048613          	addi	a2,s1,176
    2040039e:	4581                	li	a1,0
    204003a0:	196000ef          	jal	ra,20400536 <memset>
    204003a4:	8522                	mv	a0,s0
    204003a6:	60e2                	ld	ra,24(sp)
    204003a8:	6442                	ld	s0,16(sp)
    204003aa:	64a2                	ld	s1,8(sp)
    204003ac:	6902                	ld	s2,0(sp)
    204003ae:	6105                	addi	sp,sp,32
    204003b0:	8082                	ret

00000000204003b2 <__sinit>:
__sinit():
    204003b2:	591c                	lw	a5,48(a0)
    204003b4:	ebad                	bnez	a5,20400426 <__sinit+0x74>
    204003b6:	1141                	addi	sp,sp,-16
    204003b8:	e406                	sd	ra,8(sp)
    204003ba:	e022                	sd	s0,0(sp)
    204003bc:	00000797          	auipc	a5,0x0
    204003c0:	fa478793          	addi	a5,a5,-92 # 20400360 <_cleanup_r>
    204003c4:	e53c                	sd	a5,72(a0)
    204003c6:	5fc00797          	auipc	a5,0x5fc00
    204003ca:	71278793          	addi	a5,a5,1810 # 80000ad8 <_global_impure_ptr>
    204003ce:	639c                	ld	a5,0(a5)
    204003d0:	08053023          	sd	zero,128(a0)
    204003d4:	08052423          	sw	zero,136(a0)
    204003d8:	08053823          	sd	zero,144(a0)
    204003dc:	00f51463          	bne	a0,a5,204003e4 <__sinit+0x32>
    204003e0:	4785                	li	a5,1
    204003e2:	d91c                	sw	a5,48(a0)
    204003e4:	842a                	mv	s0,a0
    204003e6:	042000ef          	jal	ra,20400428 <__sfp>
    204003ea:	e408                	sd	a0,8(s0)
    204003ec:	8522                	mv	a0,s0
    204003ee:	03a000ef          	jal	ra,20400428 <__sfp>
    204003f2:	e808                	sd	a0,16(s0)
    204003f4:	8522                	mv	a0,s0
    204003f6:	032000ef          	jal	ra,20400428 <__sfp>
    204003fa:	ec08                	sd	a0,24(s0)
    204003fc:	6408                	ld	a0,8(s0)
    204003fe:	4601                	li	a2,0
    20400400:	4591                	li	a1,4
    20400402:	ef9ff0ef          	jal	ra,204002fa <std>
    20400406:	6808                	ld	a0,16(s0)
    20400408:	4605                	li	a2,1
    2040040a:	45a5                	li	a1,9
    2040040c:	eefff0ef          	jal	ra,204002fa <std>
    20400410:	6c08                	ld	a0,24(s0)
    20400412:	4609                	li	a2,2
    20400414:	45c9                	li	a1,18
    20400416:	ee5ff0ef          	jal	ra,204002fa <std>
    2040041a:	4785                	li	a5,1
    2040041c:	d81c                	sw	a5,48(s0)
    2040041e:	60a2                	ld	ra,8(sp)
    20400420:	6402                	ld	s0,0(sp)
    20400422:	0141                	addi	sp,sp,16
    20400424:	8082                	ret
    20400426:	8082                	ret

0000000020400428 <__sfp>:
__sfp():
    20400428:	1101                	addi	sp,sp,-32
    2040042a:	5fc00797          	auipc	a5,0x5fc00
    2040042e:	6ae78793          	addi	a5,a5,1710 # 80000ad8 <_global_impure_ptr>
    20400432:	e426                	sd	s1,8(sp)
    20400434:	6384                	ld	s1,0(a5)
    20400436:	e04a                	sd	s2,0(sp)
    20400438:	ec06                	sd	ra,24(sp)
    2040043a:	589c                	lw	a5,48(s1)
    2040043c:	e822                	sd	s0,16(sp)
    2040043e:	892a                	mv	s2,a0
    20400440:	e781                	bnez	a5,20400448 <__sfp+0x20>
    20400442:	8526                	mv	a0,s1
    20400444:	f6fff0ef          	jal	ra,204003b2 <__sinit>
    20400448:	08048493          	addi	s1,s1,128
    2040044c:	6880                	ld	s0,16(s1)
    2040044e:	449c                	lw	a5,8(s1)
    20400450:	37fd                	addiw	a5,a5,-1
    20400452:	0007d663          	bgez	a5,2040045e <__sfp+0x36>
    20400456:	609c                	ld	a5,0(s1)
    20400458:	cfa9                	beqz	a5,204004b2 <__sfp+0x8a>
    2040045a:	6084                	ld	s1,0(s1)
    2040045c:	bfc5                	j	2040044c <__sfp+0x24>
    2040045e:	01041703          	lh	a4,16(s0)
    20400462:	e729                	bnez	a4,204004ac <__sfp+0x84>
    20400464:	77c1                	lui	a5,0xffff0
    20400466:	0785                	addi	a5,a5,1
    20400468:	0a042623          	sw	zero,172(s0)
    2040046c:	00043023          	sd	zero,0(s0)
    20400470:	00043423          	sd	zero,8(s0)
    20400474:	c81c                	sw	a5,16(s0)
    20400476:	00043c23          	sd	zero,24(s0)
    2040047a:	02042023          	sw	zero,32(s0)
    2040047e:	02042423          	sw	zero,40(s0)
    20400482:	4621                	li	a2,8
    20400484:	4581                	li	a1,0
    20400486:	0a440513          	addi	a0,s0,164
    2040048a:	0ac000ef          	jal	ra,20400536 <memset>
    2040048e:	06043023          	sd	zero,96(s0)
    20400492:	06042423          	sw	zero,104(s0)
    20400496:	08043023          	sd	zero,128(s0)
    2040049a:	08042423          	sw	zero,136(s0)
    2040049e:	8522                	mv	a0,s0
    204004a0:	60e2                	ld	ra,24(sp)
    204004a2:	6442                	ld	s0,16(sp)
    204004a4:	64a2                	ld	s1,8(sp)
    204004a6:	6902                	ld	s2,0(sp)
    204004a8:	6105                	addi	sp,sp,32
    204004aa:	8082                	ret
    204004ac:	0b040413          	addi	s0,s0,176
    204004b0:	b745                	j	20400450 <__sfp+0x28>
    204004b2:	4591                	li	a1,4
    204004b4:	854a                	mv	a0,s2
    204004b6:	eb5ff0ef          	jal	ra,2040036a <__sfmoreglue>
    204004ba:	e088                	sd	a0,0(s1)
    204004bc:	842a                	mv	s0,a0
    204004be:	fd51                	bnez	a0,2040045a <__sfp+0x32>
    204004c0:	47b1                	li	a5,12
    204004c2:	00f92023          	sw	a5,0(s2)
    204004c6:	bfe1                	j	2040049e <__sfp+0x76>

00000000204004c8 <_fwalk_reent>:
_fwalk_reent():
    204004c8:	715d                	addi	sp,sp,-80
    204004ca:	e0a2                	sd	s0,64(sp)
    204004cc:	fc26                	sd	s1,56(sp)
    204004ce:	f052                	sd	s4,32(sp)
    204004d0:	ec56                	sd	s5,24(sp)
    204004d2:	e85a                	sd	s6,16(sp)
    204004d4:	e45e                	sd	s7,8(sp)
    204004d6:	e486                	sd	ra,72(sp)
    204004d8:	f84a                	sd	s2,48(sp)
    204004da:	f44e                	sd	s3,40(sp)
    204004dc:	8a2a                	mv	s4,a0
    204004de:	8aae                	mv	s5,a1
    204004e0:	08050493          	addi	s1,a0,128
    204004e4:	4401                	li	s0,0
    204004e6:	4b05                	li	s6,1
    204004e8:	5bfd                	li	s7,-1
    204004ea:	ec89                	bnez	s1,20400504 <_fwalk_reent+0x3c>
    204004ec:	8522                	mv	a0,s0
    204004ee:	60a6                	ld	ra,72(sp)
    204004f0:	6406                	ld	s0,64(sp)
    204004f2:	74e2                	ld	s1,56(sp)
    204004f4:	7942                	ld	s2,48(sp)
    204004f6:	79a2                	ld	s3,40(sp)
    204004f8:	7a02                	ld	s4,32(sp)
    204004fa:	6ae2                	ld	s5,24(sp)
    204004fc:	6b42                	ld	s6,16(sp)
    204004fe:	6ba2                	ld	s7,8(sp)
    20400500:	6161                	addi	sp,sp,80
    20400502:	8082                	ret
    20400504:	0104b903          	ld	s2,16(s1)
    20400508:	0084a983          	lw	s3,8(s1)
    2040050c:	39fd                	addiw	s3,s3,-1
    2040050e:	0009d463          	bgez	s3,20400516 <_fwalk_reent+0x4e>
    20400512:	6084                	ld	s1,0(s1)
    20400514:	bfd9                	j	204004ea <_fwalk_reent+0x22>
    20400516:	01095783          	lhu	a5,16(s2)
    2040051a:	00fb7b63          	bgeu	s6,a5,20400530 <_fwalk_reent+0x68>
    2040051e:	01291783          	lh	a5,18(s2)
    20400522:	01778763          	beq	a5,s7,20400530 <_fwalk_reent+0x68>
    20400526:	85ca                	mv	a1,s2
    20400528:	8552                	mv	a0,s4
    2040052a:	9a82                	jalr	s5
    2040052c:	8c49                	or	s0,s0,a0
    2040052e:	2401                	sext.w	s0,s0
    20400530:	0b090913          	addi	s2,s2,176
    20400534:	bfe1                	j	2040050c <_fwalk_reent+0x44>

0000000020400536 <memset>:
memset():
    20400536:	433d                	li	t1,15
    20400538:	872a                	mv	a4,a0
    2040053a:	02c37163          	bgeu	t1,a2,2040055c <memset+0x26>
    2040053e:	00f77793          	andi	a5,a4,15
    20400542:	e3c1                	bnez	a5,204005c2 <memset+0x8c>
    20400544:	e1bd                	bnez	a1,204005aa <memset+0x74>
    20400546:	ff067693          	andi	a3,a2,-16
    2040054a:	8a3d                	andi	a2,a2,15
    2040054c:	96ba                	add	a3,a3,a4
    2040054e:	e30c                	sd	a1,0(a4)
    20400550:	e70c                	sd	a1,8(a4)
    20400552:	0741                	addi	a4,a4,16
    20400554:	fed76de3          	bltu	a4,a3,2040054e <memset+0x18>
    20400558:	e211                	bnez	a2,2040055c <memset+0x26>
    2040055a:	8082                	ret
    2040055c:	40c306b3          	sub	a3,t1,a2
    20400560:	068a                	slli	a3,a3,0x2
    20400562:	00000297          	auipc	t0,0x0
    20400566:	9696                	add	a3,a3,t0
    20400568:	00a68067          	jr	10(a3)
    2040056c:	00b70723          	sb	a1,14(a4) # 200e <__heap_size+0x180e>
    20400570:	00b706a3          	sb	a1,13(a4)
    20400574:	00b70623          	sb	a1,12(a4)
    20400578:	00b705a3          	sb	a1,11(a4)
    2040057c:	00b70523          	sb	a1,10(a4)
    20400580:	00b704a3          	sb	a1,9(a4)
    20400584:	00b70423          	sb	a1,8(a4)
    20400588:	00b703a3          	sb	a1,7(a4)
    2040058c:	00b70323          	sb	a1,6(a4)
    20400590:	00b702a3          	sb	a1,5(a4)
    20400594:	00b70223          	sb	a1,4(a4)
    20400598:	00b701a3          	sb	a1,3(a4)
    2040059c:	00b70123          	sb	a1,2(a4)
    204005a0:	00b700a3          	sb	a1,1(a4)
    204005a4:	00b70023          	sb	a1,0(a4)
    204005a8:	8082                	ret
    204005aa:	0ff5f593          	andi	a1,a1,255
    204005ae:	00859693          	slli	a3,a1,0x8
    204005b2:	8dd5                	or	a1,a1,a3
    204005b4:	01059693          	slli	a3,a1,0x10
    204005b8:	8dd5                	or	a1,a1,a3
    204005ba:	02059693          	slli	a3,a1,0x20
    204005be:	8dd5                	or	a1,a1,a3
    204005c0:	b759                	j	20400546 <memset+0x10>
    204005c2:	00279693          	slli	a3,a5,0x2
    204005c6:	00000297          	auipc	t0,0x0
    204005ca:	9696                	add	a3,a3,t0
    204005cc:	8286                	mv	t0,ra
    204005ce:	fa2680e7          	jalr	-94(a3)
    204005d2:	8096                	mv	ra,t0
    204005d4:	17c1                	addi	a5,a5,-16
    204005d6:	8f1d                	sub	a4,a4,a5
    204005d8:	963e                	add	a2,a2,a5
    204005da:	f8c371e3          	bgeu	t1,a2,2040055c <memset+0x26>
    204005de:	b79d                	j	20400544 <memset+0xe>

00000000204005e0 <_malloc_r>:
_malloc_r():
    204005e0:	00758793          	addi	a5,a1,7
    204005e4:	7179                	addi	sp,sp,-48
    204005e6:	9be1                	andi	a5,a5,-8
    204005e8:	e84a                	sd	s2,16(sp)
    204005ea:	f406                	sd	ra,40(sp)
    204005ec:	f022                	sd	s0,32(sp)
    204005ee:	ec26                	sd	s1,24(sp)
    204005f0:	e44e                	sd	s3,8(sp)
    204005f2:	07a1                	addi	a5,a5,8
    204005f4:	4741                	li	a4,16
    204005f6:	4941                	li	s2,16
    204005f8:	00e7e363          	bltu	a5,a4,204005fe <_malloc_r+0x1e>
    204005fc:	893e                	mv	s2,a5
    204005fe:	80000737          	lui	a4,0x80000
    20400602:	fff74713          	not	a4,a4
    20400606:	00f76463          	bltu	a4,a5,2040060e <_malloc_r+0x2e>
    2040060a:	00b97c63          	bgeu	s2,a1,20400622 <_malloc_r+0x42>
    2040060e:	47b1                	li	a5,12
    20400610:	c11c                	sw	a5,0(a0)
    20400612:	4501                	li	a0,0
    20400614:	70a2                	ld	ra,40(sp)
    20400616:	7402                	ld	s0,32(sp)
    20400618:	64e2                	ld	s1,24(sp)
    2040061a:	6942                	ld	s2,16(sp)
    2040061c:	69a2                	ld	s3,8(sp)
    2040061e:	6145                	addi	sp,sp,48
    20400620:	8082                	ret
    20400622:	84aa                	mv	s1,a0
    20400624:	1dd000ef          	jal	ra,20401000 <__malloc_lock>
    20400628:	5fc00797          	auipc	a5,0x5fc00
    2040062c:	4d878793          	addi	a5,a5,1240 # 80000b00 <metal_segment_data_target_end>
    20400630:	6398                	ld	a4,0(a5)
    20400632:	843a                	mv	s0,a4
    20400634:	ec05                	bnez	s0,2040066c <_malloc_r+0x8c>
    20400636:	5fc00797          	auipc	a5,0x5fc00
    2040063a:	4d278793          	addi	a5,a5,1234 # 80000b08 <__malloc_sbrk_start>
    2040063e:	639c                	ld	a5,0(a5)
    20400640:	eb89                	bnez	a5,20400652 <_malloc_r+0x72>
    20400642:	4581                	li	a1,0
    20400644:	8526                	mv	a0,s1
    20400646:	3b4000ef          	jal	ra,204009fa <_sbrk_r>
    2040064a:	5fc00797          	auipc	a5,0x5fc00
    2040064e:	4aa7bf23          	sd	a0,1214(a5) # 80000b08 <__malloc_sbrk_start>
    20400652:	85ca                	mv	a1,s2
    20400654:	8526                	mv	a0,s1
    20400656:	3a4000ef          	jal	ra,204009fa <_sbrk_r>
    2040065a:	59fd                	li	s3,-1
    2040065c:	07351163          	bne	a0,s3,204006be <_malloc_r+0xde>
    20400660:	47b1                	li	a5,12
    20400662:	c09c                	sw	a5,0(s1)
    20400664:	8526                	mv	a0,s1
    20400666:	19d000ef          	jal	ra,20401002 <__malloc_unlock>
    2040066a:	b765                	j	20400612 <_malloc_r+0x32>
    2040066c:	601c                	ld	a5,0(s0)
    2040066e:	412787bb          	subw	a5,a5,s2
    20400672:	0407c363          	bltz	a5,204006b8 <_malloc_r+0xd8>
    20400676:	46bd                	li	a3,15
    20400678:	00f6d763          	bge	a3,a5,20400686 <_malloc_r+0xa6>
    2040067c:	e01c                	sd	a5,0(s0)
    2040067e:	943e                	add	s0,s0,a5
    20400680:	01243023          	sd	s2,0(s0)
    20400684:	a801                	j	20400694 <_malloc_r+0xb4>
    20400686:	641c                	ld	a5,8(s0)
    20400688:	02871663          	bne	a4,s0,204006b4 <_malloc_r+0xd4>
    2040068c:	5fc00717          	auipc	a4,0x5fc00
    20400690:	46f73a23          	sd	a5,1140(a4) # 80000b00 <metal_segment_data_target_end>
    20400694:	8526                	mv	a0,s1
    20400696:	16d000ef          	jal	ra,20401002 <__malloc_unlock>
    2040069a:	00f40513          	addi	a0,s0,15
    2040069e:	00840793          	addi	a5,s0,8
    204006a2:	9961                	andi	a0,a0,-8
    204006a4:	40f507bb          	subw	a5,a0,a5
    204006a8:	d7b5                	beqz	a5,20400614 <_malloc_r+0x34>
    204006aa:	943e                	add	s0,s0,a5
    204006ac:	40f007bb          	negw	a5,a5
    204006b0:	e01c                	sd	a5,0(s0)
    204006b2:	b78d                	j	20400614 <_malloc_r+0x34>
    204006b4:	e71c                	sd	a5,8(a4)
    204006b6:	bff9                	j	20400694 <_malloc_r+0xb4>
    204006b8:	8722                	mv	a4,s0
    204006ba:	6400                	ld	s0,8(s0)
    204006bc:	bfa5                	j	20400634 <_malloc_r+0x54>
    204006be:	00750413          	addi	s0,a0,7
    204006c2:	9861                	andi	s0,s0,-8
    204006c4:	fa850ee3          	beq	a0,s0,20400680 <_malloc_r+0xa0>
    204006c8:	40a405b3          	sub	a1,s0,a0
    204006cc:	8526                	mv	a0,s1
    204006ce:	32c000ef          	jal	ra,204009fa <_sbrk_r>
    204006d2:	fb3517e3          	bne	a0,s3,20400680 <_malloc_r+0xa0>
    204006d6:	b769                	j	20400660 <_malloc_r+0x80>

00000000204006d8 <__sfputc_r>:
__sfputc_r():
    204006d8:	465c                	lw	a5,12(a2)
    204006da:	fff7871b          	addiw	a4,a5,-1
    204006de:	c658                	sw	a4,12(a2)
    204006e0:	00075963          	bgez	a4,204006f2 <__sfputc_r+0x1a>
    204006e4:	561c                	lw	a5,40(a2)
    204006e6:	00f74563          	blt	a4,a5,204006f0 <__sfputc_r+0x18>
    204006ea:	47a9                	li	a5,10
    204006ec:	00f59363          	bne	a1,a5,204006f2 <__sfputc_r+0x1a>
    204006f0:	aed5                	j	20400ae4 <__swbuf_r>
    204006f2:	621c                	ld	a5,0(a2)
    204006f4:	852e                	mv	a0,a1
    204006f6:	00178713          	addi	a4,a5,1
    204006fa:	e218                	sd	a4,0(a2)
    204006fc:	00b78023          	sb	a1,0(a5)
    20400700:	8082                	ret

0000000020400702 <__sfputs_r>:
__sfputs_r():
    20400702:	7179                	addi	sp,sp,-48
    20400704:	f022                	sd	s0,32(sp)
    20400706:	ec26                	sd	s1,24(sp)
    20400708:	e84a                	sd	s2,16(sp)
    2040070a:	e44e                	sd	s3,8(sp)
    2040070c:	e052                	sd	s4,0(sp)
    2040070e:	f406                	sd	ra,40(sp)
    20400710:	892a                	mv	s2,a0
    20400712:	89ae                	mv	s3,a1
    20400714:	8432                	mv	s0,a2
    20400716:	00d604b3          	add	s1,a2,a3
    2040071a:	5a7d                	li	s4,-1
    2040071c:	00941463          	bne	s0,s1,20400724 <__sfputs_r+0x22>
    20400720:	4501                	li	a0,0
    20400722:	a811                	j	20400736 <__sfputs_r+0x34>
    20400724:	00044583          	lbu	a1,0(s0)
    20400728:	864e                	mv	a2,s3
    2040072a:	854a                	mv	a0,s2
    2040072c:	fadff0ef          	jal	ra,204006d8 <__sfputc_r>
    20400730:	0405                	addi	s0,s0,1
    20400732:	ff4515e3          	bne	a0,s4,2040071c <__sfputs_r+0x1a>
    20400736:	70a2                	ld	ra,40(sp)
    20400738:	7402                	ld	s0,32(sp)
    2040073a:	64e2                	ld	s1,24(sp)
    2040073c:	6942                	ld	s2,16(sp)
    2040073e:	69a2                	ld	s3,8(sp)
    20400740:	6a02                	ld	s4,0(sp)
    20400742:	6145                	addi	sp,sp,48
    20400744:	8082                	ret

0000000020400746 <_vfiprintf_r>:
_vfiprintf_r():
    20400746:	7155                	addi	sp,sp,-208
    20400748:	e1a2                	sd	s0,192(sp)
    2040074a:	fd26                	sd	s1,184(sp)
    2040074c:	f94a                	sd	s2,176(sp)
    2040074e:	f54e                	sd	s3,168(sp)
    20400750:	f152                	sd	s4,160(sp)
    20400752:	e586                	sd	ra,200(sp)
    20400754:	ed56                	sd	s5,152(sp)
    20400756:	e95a                	sd	s6,144(sp)
    20400758:	e55e                	sd	s7,136(sp)
    2040075a:	e162                	sd	s8,128(sp)
    2040075c:	fce6                	sd	s9,120(sp)
    2040075e:	f8ea                	sd	s10,112(sp)
    20400760:	89aa                	mv	s3,a0
    20400762:	84ae                	mv	s1,a1
    20400764:	8932                	mv	s2,a2
    20400766:	8436                	mv	s0,a3
    20400768:	4a01                	li	s4,0
    2040076a:	c509                	beqz	a0,20400774 <_vfiprintf_r+0x2e>
    2040076c:	591c                	lw	a5,48(a0)
    2040076e:	e399                	bnez	a5,20400774 <_vfiprintf_r+0x2e>
    20400770:	c43ff0ef          	jal	ra,204003b2 <__sinit>
    20400774:	00005797          	auipc	a5,0x5
    20400778:	48c78793          	addi	a5,a5,1164 # 20405c00 <__sf_fake_stdin>
    2040077c:	0cf49e63          	bne	s1,a5,20400858 <_vfiprintf_r+0x112>
    20400780:	0089b483          	ld	s1,8(s3)
    20400784:	0104d783          	lhu	a5,16(s1)
    20400788:	8ba1                	andi	a5,a5,8
    2040078a:	cbed                	beqz	a5,2040087c <_vfiprintf_r+0x136>
    2040078c:	6c9c                	ld	a5,24(s1)
    2040078e:	c7fd                	beqz	a5,2040087c <_vfiprintf_r+0x136>
    20400790:	02000793          	li	a5,32
    20400794:	02f104a3          	sb	a5,41(sp)
    20400798:	5afd                	li	s5,-1
    2040079a:	03000793          	li	a5,48
    2040079e:	d202                	sw	zero,36(sp)
    204007a0:	02f10523          	sb	a5,42(sp)
    204007a4:	e422                	sd	s0,8(sp)
    204007a6:	02500b93          	li	s7,37
    204007aa:	020a9c13          	slli	s8,s5,0x20
    204007ae:	00005b17          	auipc	s6,0x5
    204007b2:	4c2b0b13          	addi	s6,s6,1218 # 20405c70 <__sf_fake_stdout+0x38>
    204007b6:	4c85                	li	s9,1
    204007b8:	844a                	mv	s0,s2
    204007ba:	00044783          	lbu	a5,0(s0)
    204007be:	c399                	beqz	a5,204007c4 <_vfiprintf_r+0x7e>
    204007c0:	0f779263          	bne	a5,s7,204008a4 <_vfiprintf_r+0x15e>
    204007c4:	41240d3b          	subw	s10,s0,s2
    204007c8:	000d0e63          	beqz	s10,204007e4 <_vfiprintf_r+0x9e>
    204007cc:	86ea                	mv	a3,s10
    204007ce:	864a                	mv	a2,s2
    204007d0:	85a6                	mv	a1,s1
    204007d2:	854e                	mv	a0,s3
    204007d4:	f2fff0ef          	jal	ra,20400702 <__sfputs_r>
    204007d8:	1f550e63          	beq	a0,s5,204009d4 <_vfiprintf_r+0x28e>
    204007dc:	5692                	lw	a3,36(sp)
    204007de:	01a686bb          	addw	a3,a3,s10
    204007e2:	d236                	sw	a3,36(sp)
    204007e4:	00044783          	lbu	a5,0(s0)
    204007e8:	1e078663          	beqz	a5,204009d4 <_vfiprintf_r+0x28e>
    204007ec:	00140913          	addi	s2,s0,1
    204007f0:	e862                	sd	s8,16(sp)
    204007f2:	ec02                	sd	zero,24(sp)
    204007f4:	040109a3          	sb	zero,83(sp)
    204007f8:	d482                	sw	zero,104(sp)
    204007fa:	00094583          	lbu	a1,0(s2)
    204007fe:	4615                	li	a2,5
    20400800:	855a                	mv	a0,s6
    20400802:	7e4000ef          	jal	ra,20400fe6 <memchr>
    20400806:	00190413          	addi	s0,s2,1
    2040080a:	ed59                	bnez	a0,204008a8 <_vfiprintf_r+0x162>
    2040080c:	47c2                	lw	a5,16(sp)
    2040080e:	0107f713          	andi	a4,a5,16
    20400812:	c709                	beqz	a4,2040081c <_vfiprintf_r+0xd6>
    20400814:	02000713          	li	a4,32
    20400818:	04e109a3          	sb	a4,83(sp)
    2040081c:	0087f713          	andi	a4,a5,8
    20400820:	c709                	beqz	a4,2040082a <_vfiprintf_r+0xe4>
    20400822:	02b00713          	li	a4,43
    20400826:	04e109a3          	sb	a4,83(sp)
    2040082a:	00094683          	lbu	a3,0(s2)
    2040082e:	02a00713          	li	a4,42
    20400832:	08e68463          	beq	a3,a4,204008ba <_vfiprintf_r+0x174>
    20400836:	47f2                	lw	a5,28(sp)
    20400838:	844a                	mv	s0,s2
    2040083a:	4681                	li	a3,0
    2040083c:	4625                	li	a2,9
    2040083e:	4829                	li	a6,10
    20400840:	00044703          	lbu	a4,0(s0)
    20400844:	00140513          	addi	a0,s0,1
    20400848:	fd07059b          	addiw	a1,a4,-48
    2040084c:	872e                	mv	a4,a1
    2040084e:	0ab67b63          	bgeu	a2,a1,20400904 <_vfiprintf_r+0x1be>
    20400852:	cea5                	beqz	a3,204008ca <_vfiprintf_r+0x184>
    20400854:	ce3e                	sw	a5,28(sp)
    20400856:	a895                	j	204008ca <_vfiprintf_r+0x184>
    20400858:	00005797          	auipc	a5,0x5
    2040085c:	3e078793          	addi	a5,a5,992 # 20405c38 <__sf_fake_stdout>
    20400860:	00f49563          	bne	s1,a5,2040086a <_vfiprintf_r+0x124>
    20400864:	0109b483          	ld	s1,16(s3)
    20400868:	bf31                	j	20400784 <_vfiprintf_r+0x3e>
    2040086a:	00005797          	auipc	a5,0x5
    2040086e:	35e78793          	addi	a5,a5,862 # 20405bc8 <__sf_fake_stderr>
    20400872:	f0f499e3          	bne	s1,a5,20400784 <_vfiprintf_r+0x3e>
    20400876:	0189b483          	ld	s1,24(s3)
    2040087a:	b729                	j	20400784 <_vfiprintf_r+0x3e>
    2040087c:	85a6                	mv	a1,s1
    2040087e:	854e                	mv	a0,s3
    20400880:	358000ef          	jal	ra,20400bd8 <__swsetup_r>
    20400884:	d511                	beqz	a0,20400790 <_vfiprintf_r+0x4a>
    20400886:	557d                	li	a0,-1
    20400888:	60ae                	ld	ra,200(sp)
    2040088a:	640e                	ld	s0,192(sp)
    2040088c:	74ea                	ld	s1,184(sp)
    2040088e:	794a                	ld	s2,176(sp)
    20400890:	79aa                	ld	s3,168(sp)
    20400892:	7a0a                	ld	s4,160(sp)
    20400894:	6aea                	ld	s5,152(sp)
    20400896:	6b4a                	ld	s6,144(sp)
    20400898:	6baa                	ld	s7,136(sp)
    2040089a:	6c0a                	ld	s8,128(sp)
    2040089c:	7ce6                	ld	s9,120(sp)
    2040089e:	7d46                	ld	s10,112(sp)
    204008a0:	6169                	addi	sp,sp,208
    204008a2:	8082                	ret
    204008a4:	0405                	addi	s0,s0,1
    204008a6:	bf11                	j	204007ba <_vfiprintf_r+0x74>
    204008a8:	47c2                	lw	a5,16(sp)
    204008aa:	41650533          	sub	a0,a0,s6
    204008ae:	00ac953b          	sllw	a0,s9,a0
    204008b2:	8d5d                	or	a0,a0,a5
    204008b4:	c82a                	sw	a0,16(sp)
    204008b6:	8922                	mv	s2,s0
    204008b8:	b789                	j	204007fa <_vfiprintf_r+0xb4>
    204008ba:	6722                	ld	a4,8(sp)
    204008bc:	00870693          	addi	a3,a4,8
    204008c0:	4318                	lw	a4,0(a4)
    204008c2:	e436                	sd	a3,8(sp)
    204008c4:	02074963          	bltz	a4,204008f6 <_vfiprintf_r+0x1b0>
    204008c8:	ce3a                	sw	a4,28(sp)
    204008ca:	00044703          	lbu	a4,0(s0)
    204008ce:	02e00793          	li	a5,46
    204008d2:	04f71063          	bne	a4,a5,20400912 <_vfiprintf_r+0x1cc>
    204008d6:	00144703          	lbu	a4,1(s0)
    204008da:	02a00793          	li	a5,42
    204008de:	0af71363          	bne	a4,a5,20400984 <_vfiprintf_r+0x23e>
    204008e2:	67a2                	ld	a5,8(sp)
    204008e4:	0409                	addi	s0,s0,2
    204008e6:	00878713          	addi	a4,a5,8
    204008ea:	439c                	lw	a5,0(a5)
    204008ec:	e43a                	sd	a4,8(sp)
    204008ee:	0207c163          	bltz	a5,20400910 <_vfiprintf_r+0x1ca>
    204008f2:	ca3e                	sw	a5,20(sp)
    204008f4:	a839                	j	20400912 <_vfiprintf_r+0x1cc>
    204008f6:	40e0073b          	negw	a4,a4
    204008fa:	0027e793          	ori	a5,a5,2
    204008fe:	ce3a                	sw	a4,28(sp)
    20400900:	c83e                	sw	a5,16(sp)
    20400902:	b7e1                	j	204008ca <_vfiprintf_r+0x184>
    20400904:	02f807bb          	mulw	a5,a6,a5
    20400908:	4685                	li	a3,1
    2040090a:	842a                	mv	s0,a0
    2040090c:	9fb9                	addw	a5,a5,a4
    2040090e:	bf0d                	j	20400840 <_vfiprintf_r+0xfa>
    20400910:	ca56                	sw	s5,20(sp)
    20400912:	00044583          	lbu	a1,0(s0)
    20400916:	460d                	li	a2,3
    20400918:	00005517          	auipc	a0,0x5
    2040091c:	36050513          	addi	a0,a0,864 # 20405c78 <__sf_fake_stdout+0x40>
    20400920:	6c6000ef          	jal	ra,20400fe6 <memchr>
    20400924:	cd19                	beqz	a0,20400942 <_vfiprintf_r+0x1fc>
    20400926:	00005797          	auipc	a5,0x5
    2040092a:	35278793          	addi	a5,a5,850 # 20405c78 <__sf_fake_stdout+0x40>
    2040092e:	40f507b3          	sub	a5,a0,a5
    20400932:	04000513          	li	a0,64
    20400936:	00f5153b          	sllw	a0,a0,a5
    2040093a:	47c2                	lw	a5,16(sp)
    2040093c:	0405                	addi	s0,s0,1
    2040093e:	8d5d                	or	a0,a0,a5
    20400940:	c82a                	sw	a0,16(sp)
    20400942:	00044583          	lbu	a1,0(s0)
    20400946:	4619                	li	a2,6
    20400948:	00005517          	auipc	a0,0x5
    2040094c:	33850513          	addi	a0,a0,824 # 20405c80 <__sf_fake_stdout+0x48>
    20400950:	00140913          	addi	s2,s0,1
    20400954:	02b10423          	sb	a1,40(sp)
    20400958:	68e000ef          	jal	ra,20400fe6 <memchr>
    2040095c:	c541                	beqz	a0,204009e4 <_vfiprintf_r+0x29e>
    2040095e:	dfbff797          	auipc	a5,0xdfbff
    20400962:	6a278793          	addi	a5,a5,1698 # 0 <__metal_boot_hart>
    20400966:	eba1                	bnez	a5,204009b6 <_vfiprintf_r+0x270>
    20400968:	4742                	lw	a4,16(sp)
    2040096a:	67a2                	ld	a5,8(sp)
    2040096c:	10077713          	andi	a4,a4,256
    20400970:	c329                	beqz	a4,204009b2 <_vfiprintf_r+0x26c>
    20400972:	07bd                	addi	a5,a5,15
    20400974:	9bc1                	andi	a5,a5,-16
    20400976:	07c1                	addi	a5,a5,16
    20400978:	e43e                	sd	a5,8(sp)
    2040097a:	5792                	lw	a5,36(sp)
    2040097c:	014787bb          	addw	a5,a5,s4
    20400980:	d23e                	sw	a5,36(sp)
    20400982:	bd1d                	j	204007b8 <_vfiprintf_r+0x72>
    20400984:	0405                	addi	s0,s0,1
    20400986:	ca02                	sw	zero,20(sp)
    20400988:	4681                	li	a3,0
    2040098a:	4781                	li	a5,0
    2040098c:	4625                	li	a2,9
    2040098e:	4829                	li	a6,10
    20400990:	00044703          	lbu	a4,0(s0)
    20400994:	00140513          	addi	a0,s0,1
    20400998:	fd07059b          	addiw	a1,a4,-48
    2040099c:	872e                	mv	a4,a1
    2040099e:	00b67463          	bgeu	a2,a1,204009a6 <_vfiprintf_r+0x260>
    204009a2:	faa1                	bnez	a3,204008f2 <_vfiprintf_r+0x1ac>
    204009a4:	b7bd                	j	20400912 <_vfiprintf_r+0x1cc>
    204009a6:	02f807bb          	mulw	a5,a6,a5
    204009aa:	4685                	li	a3,1
    204009ac:	842a                	mv	s0,a0
    204009ae:	9fb9                	addw	a5,a5,a4
    204009b0:	b7c5                	j	20400990 <_vfiprintf_r+0x24a>
    204009b2:	07a1                	addi	a5,a5,8
    204009b4:	b7d1                	j	20400978 <_vfiprintf_r+0x232>
    204009b6:	0038                	addi	a4,sp,8
    204009b8:	00000697          	auipc	a3,0x0
    204009bc:	d4a68693          	addi	a3,a3,-694 # 20400702 <__sfputs_r>
    204009c0:	8626                	mv	a2,s1
    204009c2:	080c                	addi	a1,sp,16
    204009c4:	854e                	mv	a0,s3
    204009c6:	00000097          	auipc	ra,0x0
    204009ca:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
    204009ce:	8a2a                	mv	s4,a0
    204009d0:	fb5515e3          	bne	a0,s5,2040097a <_vfiprintf_r+0x234>
    204009d4:	0104d783          	lhu	a5,16(s1)
    204009d8:	0407f793          	andi	a5,a5,64
    204009dc:	ea0795e3          	bnez	a5,20400886 <_vfiprintf_r+0x140>
    204009e0:	5512                	lw	a0,36(sp)
    204009e2:	b55d                	j	20400888 <_vfiprintf_r+0x142>
    204009e4:	0038                	addi	a4,sp,8
    204009e6:	00000697          	auipc	a3,0x0
    204009ea:	d1c68693          	addi	a3,a3,-740 # 20400702 <__sfputs_r>
    204009ee:	8626                	mv	a2,s1
    204009f0:	080c                	addi	a1,sp,16
    204009f2:	854e                	mv	a0,s3
    204009f4:	7e2000ef          	jal	ra,204011d6 <_printf_i>
    204009f8:	bfd9                	j	204009ce <_vfiprintf_r+0x288>

00000000204009fa <_sbrk_r>:
_sbrk_r():
    204009fa:	1141                	addi	sp,sp,-16
    204009fc:	e022                	sd	s0,0(sp)
    204009fe:	842a                	mv	s0,a0
    20400a00:	852e                	mv	a0,a1
    20400a02:	9601a023          	sw	zero,-1696(gp) # 80000c30 <errno>
    20400a06:	e406                	sd	ra,8(sp)
    20400a08:	3f1000ef          	jal	ra,204015f8 <_sbrk>
    20400a0c:	57fd                	li	a5,-1
    20400a0e:	00f51763          	bne	a0,a5,20400a1c <_sbrk_r+0x22>
    20400a12:	96018793          	addi	a5,gp,-1696 # 80000c30 <errno>
    20400a16:	439c                	lw	a5,0(a5)
    20400a18:	c391                	beqz	a5,20400a1c <_sbrk_r+0x22>
    20400a1a:	c01c                	sw	a5,0(s0)
    20400a1c:	60a2                	ld	ra,8(sp)
    20400a1e:	6402                	ld	s0,0(sp)
    20400a20:	0141                	addi	sp,sp,16
    20400a22:	8082                	ret

0000000020400a24 <__sread>:
__sread():
    20400a24:	1141                	addi	sp,sp,-16
    20400a26:	e022                	sd	s0,0(sp)
    20400a28:	842e                	mv	s0,a1
    20400a2a:	01259583          	lh	a1,18(a1)
    20400a2e:	e406                	sd	ra,8(sp)
    20400a30:	269000ef          	jal	ra,20401498 <_read_r>
    20400a34:	00054963          	bltz	a0,20400a46 <__sread+0x22>
    20400a38:	6c5c                	ld	a5,152(s0)
    20400a3a:	97aa                	add	a5,a5,a0
    20400a3c:	ec5c                	sd	a5,152(s0)
    20400a3e:	60a2                	ld	ra,8(sp)
    20400a40:	6402                	ld	s0,0(sp)
    20400a42:	0141                	addi	sp,sp,16
    20400a44:	8082                	ret
    20400a46:	01045783          	lhu	a5,16(s0)
    20400a4a:	777d                	lui	a4,0xfffff
    20400a4c:	177d                	addi	a4,a4,-1
    20400a4e:	8ff9                	and	a5,a5,a4
    20400a50:	00f41823          	sh	a5,16(s0)
    20400a54:	b7ed                	j	20400a3e <__sread+0x1a>

0000000020400a56 <__swrite>:
__swrite():
    20400a56:	0105d783          	lhu	a5,16(a1)
    20400a5a:	7179                	addi	sp,sp,-48
    20400a5c:	f022                	sd	s0,32(sp)
    20400a5e:	ec26                	sd	s1,24(sp)
    20400a60:	e84a                	sd	s2,16(sp)
    20400a62:	e44e                	sd	s3,8(sp)
    20400a64:	f406                	sd	ra,40(sp)
    20400a66:	1007f793          	andi	a5,a5,256
    20400a6a:	84aa                	mv	s1,a0
    20400a6c:	842e                	mv	s0,a1
    20400a6e:	8932                	mv	s2,a2
    20400a70:	89b6                	mv	s3,a3
    20400a72:	c799                	beqz	a5,20400a80 <__swrite+0x2a>
    20400a74:	01259583          	lh	a1,18(a1)
    20400a78:	4689                	li	a3,2
    20400a7a:	4601                	li	a2,0
    20400a7c:	440000ef          	jal	ra,20400ebc <_lseek_r>
    20400a80:	01045783          	lhu	a5,16(s0)
    20400a84:	777d                	lui	a4,0xfffff
    20400a86:	177d                	addi	a4,a4,-1
    20400a88:	8ff9                	and	a5,a5,a4
    20400a8a:	00f41823          	sh	a5,16(s0)
    20400a8e:	01241583          	lh	a1,18(s0)
    20400a92:	7402                	ld	s0,32(sp)
    20400a94:	70a2                	ld	ra,40(sp)
    20400a96:	86ce                	mv	a3,s3
    20400a98:	864a                	mv	a2,s2
    20400a9a:	69a2                	ld	s3,8(sp)
    20400a9c:	6942                	ld	s2,16(sp)
    20400a9e:	8526                	mv	a0,s1
    20400aa0:	64e2                	ld	s1,24(sp)
    20400aa2:	6145                	addi	sp,sp,48
    20400aa4:	a219                	j	20400baa <_write_r>

0000000020400aa6 <__sseek>:
__sseek():
    20400aa6:	1141                	addi	sp,sp,-16
    20400aa8:	e022                	sd	s0,0(sp)
    20400aaa:	842e                	mv	s0,a1
    20400aac:	01259583          	lh	a1,18(a1)
    20400ab0:	e406                	sd	ra,8(sp)
    20400ab2:	40a000ef          	jal	ra,20400ebc <_lseek_r>
    20400ab6:	57fd                	li	a5,-1
    20400ab8:	01045703          	lhu	a4,16(s0)
    20400abc:	00f51b63          	bne	a0,a5,20400ad2 <__sseek+0x2c>
    20400ac0:	77fd                	lui	a5,0xfffff
    20400ac2:	17fd                	addi	a5,a5,-1
    20400ac4:	8ff9                	and	a5,a5,a4
    20400ac6:	00f41823          	sh	a5,16(s0)
    20400aca:	60a2                	ld	ra,8(sp)
    20400acc:	6402                	ld	s0,0(sp)
    20400ace:	0141                	addi	sp,sp,16
    20400ad0:	8082                	ret
    20400ad2:	6785                	lui	a5,0x1
    20400ad4:	8fd9                	or	a5,a5,a4
    20400ad6:	00f41823          	sh	a5,16(s0)
    20400ada:	ec48                	sd	a0,152(s0)
    20400adc:	b7fd                	j	20400aca <__sseek+0x24>

0000000020400ade <__sclose>:
__sclose():
    20400ade:	01259583          	lh	a1,18(a1)
    20400ae2:	a431                	j	20400cee <_close_r>

0000000020400ae4 <__swbuf_r>:
__swbuf_r():
    20400ae4:	7179                	addi	sp,sp,-48
    20400ae6:	f022                	sd	s0,32(sp)
    20400ae8:	ec26                	sd	s1,24(sp)
    20400aea:	e84a                	sd	s2,16(sp)
    20400aec:	f406                	sd	ra,40(sp)
    20400aee:	e44e                	sd	s3,8(sp)
    20400af0:	84aa                	mv	s1,a0
    20400af2:	892e                	mv	s2,a1
    20400af4:	8432                	mv	s0,a2
    20400af6:	c509                	beqz	a0,20400b00 <__swbuf_r+0x1c>
    20400af8:	591c                	lw	a5,48(a0)
    20400afa:	e399                	bnez	a5,20400b00 <__swbuf_r+0x1c>
    20400afc:	8b7ff0ef          	jal	ra,204003b2 <__sinit>
    20400b00:	00005797          	auipc	a5,0x5
    20400b04:	10078793          	addi	a5,a5,256 # 20405c00 <__sf_fake_stdin>
    20400b08:	06f41a63          	bne	s0,a5,20400b7c <__swbuf_r+0x98>
    20400b0c:	6480                	ld	s0,8(s1)
    20400b0e:	541c                	lw	a5,40(s0)
    20400b10:	c45c                	sw	a5,12(s0)
    20400b12:	01045783          	lhu	a5,16(s0)
    20400b16:	8ba1                	andi	a5,a5,8
    20400b18:	c3d1                	beqz	a5,20400b9c <__swbuf_r+0xb8>
    20400b1a:	6c1c                	ld	a5,24(s0)
    20400b1c:	c3c1                	beqz	a5,20400b9c <__swbuf_r+0xb8>
    20400b1e:	6c1c                	ld	a5,24(s0)
    20400b20:	6008                	ld	a0,0(s0)
    20400b22:	0ff97993          	andi	s3,s2,255
    20400b26:	894e                	mv	s2,s3
    20400b28:	9d1d                	subw	a0,a0,a5
    20400b2a:	501c                	lw	a5,32(s0)
    20400b2c:	00f54763          	blt	a0,a5,20400b3a <__swbuf_r+0x56>
    20400b30:	85a2                	mv	a1,s0
    20400b32:	8526                	mv	a0,s1
    20400b34:	322000ef          	jal	ra,20400e56 <_fflush_r>
    20400b38:	e53d                	bnez	a0,20400ba6 <__swbuf_r+0xc2>
    20400b3a:	445c                	lw	a5,12(s0)
    20400b3c:	2505                	addiw	a0,a0,1
    20400b3e:	37fd                	addiw	a5,a5,-1
    20400b40:	c45c                	sw	a5,12(s0)
    20400b42:	601c                	ld	a5,0(s0)
    20400b44:	00178713          	addi	a4,a5,1
    20400b48:	e018                	sd	a4,0(s0)
    20400b4a:	01378023          	sb	s3,0(a5)
    20400b4e:	501c                	lw	a5,32(s0)
    20400b50:	00a78963          	beq	a5,a0,20400b62 <__swbuf_r+0x7e>
    20400b54:	01045783          	lhu	a5,16(s0)
    20400b58:	8b85                	andi	a5,a5,1
    20400b5a:	cb89                	beqz	a5,20400b6c <__swbuf_r+0x88>
    20400b5c:	47a9                	li	a5,10
    20400b5e:	00f91763          	bne	s2,a5,20400b6c <__swbuf_r+0x88>
    20400b62:	85a2                	mv	a1,s0
    20400b64:	8526                	mv	a0,s1
    20400b66:	2f0000ef          	jal	ra,20400e56 <_fflush_r>
    20400b6a:	ed15                	bnez	a0,20400ba6 <__swbuf_r+0xc2>
    20400b6c:	70a2                	ld	ra,40(sp)
    20400b6e:	7402                	ld	s0,32(sp)
    20400b70:	854a                	mv	a0,s2
    20400b72:	64e2                	ld	s1,24(sp)
    20400b74:	6942                	ld	s2,16(sp)
    20400b76:	69a2                	ld	s3,8(sp)
    20400b78:	6145                	addi	sp,sp,48
    20400b7a:	8082                	ret
    20400b7c:	00005797          	auipc	a5,0x5
    20400b80:	0bc78793          	addi	a5,a5,188 # 20405c38 <__sf_fake_stdout>
    20400b84:	00f41463          	bne	s0,a5,20400b8c <__swbuf_r+0xa8>
    20400b88:	6880                	ld	s0,16(s1)
    20400b8a:	b751                	j	20400b0e <__swbuf_r+0x2a>
    20400b8c:	00005797          	auipc	a5,0x5
    20400b90:	03c78793          	addi	a5,a5,60 # 20405bc8 <__sf_fake_stderr>
    20400b94:	f6f41de3          	bne	s0,a5,20400b0e <__swbuf_r+0x2a>
    20400b98:	6c80                	ld	s0,24(s1)
    20400b9a:	bf95                	j	20400b0e <__swbuf_r+0x2a>
    20400b9c:	85a2                	mv	a1,s0
    20400b9e:	8526                	mv	a0,s1
    20400ba0:	038000ef          	jal	ra,20400bd8 <__swsetup_r>
    20400ba4:	dd2d                	beqz	a0,20400b1e <__swbuf_r+0x3a>
    20400ba6:	597d                	li	s2,-1
    20400ba8:	b7d1                	j	20400b6c <__swbuf_r+0x88>

0000000020400baa <_write_r>:
_write_r():
    20400baa:	1141                	addi	sp,sp,-16
    20400bac:	e022                	sd	s0,0(sp)
    20400bae:	842a                	mv	s0,a0
    20400bb0:	852e                	mv	a0,a1
    20400bb2:	85b2                	mv	a1,a2
    20400bb4:	8636                	mv	a2,a3
    20400bb6:	9601a023          	sw	zero,-1696(gp) # 80000c30 <errno>
    20400bba:	e406                	sd	ra,8(sp)
    20400bbc:	2a1000ef          	jal	ra,2040165c <_write>
    20400bc0:	57fd                	li	a5,-1
    20400bc2:	00f51763          	bne	a0,a5,20400bd0 <_write_r+0x26>
    20400bc6:	96018793          	addi	a5,gp,-1696 # 80000c30 <errno>
    20400bca:	439c                	lw	a5,0(a5)
    20400bcc:	c391                	beqz	a5,20400bd0 <_write_r+0x26>
    20400bce:	c01c                	sw	a5,0(s0)
    20400bd0:	60a2                	ld	ra,8(sp)
    20400bd2:	6402                	ld	s0,0(sp)
    20400bd4:	0141                	addi	sp,sp,16
    20400bd6:	8082                	ret

0000000020400bd8 <__swsetup_r>:
__swsetup_r():
    20400bd8:	1101                	addi	sp,sp,-32
    20400bda:	5fc00797          	auipc	a5,0x5fc00
    20400bde:	ef678793          	addi	a5,a5,-266 # 80000ad0 <_impure_ptr>
    20400be2:	e426                	sd	s1,8(sp)
    20400be4:	6384                	ld	s1,0(a5)
    20400be6:	e822                	sd	s0,16(sp)
    20400be8:	e04a                	sd	s2,0(sp)
    20400bea:	ec06                	sd	ra,24(sp)
    20400bec:	892a                	mv	s2,a0
    20400bee:	842e                	mv	s0,a1
    20400bf0:	c491                	beqz	s1,20400bfc <__swsetup_r+0x24>
    20400bf2:	589c                	lw	a5,48(s1)
    20400bf4:	e781                	bnez	a5,20400bfc <__swsetup_r+0x24>
    20400bf6:	8526                	mv	a0,s1
    20400bf8:	fbaff0ef          	jal	ra,204003b2 <__sinit>
    20400bfc:	00005797          	auipc	a5,0x5
    20400c00:	00478793          	addi	a5,a5,4 # 20405c00 <__sf_fake_stdin>
    20400c04:	02f41c63          	bne	s0,a5,20400c3c <__swsetup_r+0x64>
    20400c08:	6480                	ld	s0,8(s1)
    20400c0a:	01041703          	lh	a4,16(s0)
    20400c0e:	03071793          	slli	a5,a4,0x30
    20400c12:	93c1                	srli	a5,a5,0x30
    20400c14:	0087f693          	andi	a3,a5,8
    20400c18:	eebd                	bnez	a3,20400c96 <__swsetup_r+0xbe>
    20400c1a:	0107f693          	andi	a3,a5,16
    20400c1e:	ee9d                	bnez	a3,20400c5c <__swsetup_r+0x84>
    20400c20:	47a5                	li	a5,9
    20400c22:	00f92023          	sw	a5,0(s2)
    20400c26:	04076713          	ori	a4,a4,64
    20400c2a:	00e41823          	sh	a4,16(s0)
    20400c2e:	557d                	li	a0,-1
    20400c30:	60e2                	ld	ra,24(sp)
    20400c32:	6442                	ld	s0,16(sp)
    20400c34:	64a2                	ld	s1,8(sp)
    20400c36:	6902                	ld	s2,0(sp)
    20400c38:	6105                	addi	sp,sp,32
    20400c3a:	8082                	ret
    20400c3c:	00005797          	auipc	a5,0x5
    20400c40:	ffc78793          	addi	a5,a5,-4 # 20405c38 <__sf_fake_stdout>
    20400c44:	00f41463          	bne	s0,a5,20400c4c <__swsetup_r+0x74>
    20400c48:	6880                	ld	s0,16(s1)
    20400c4a:	b7c1                	j	20400c0a <__swsetup_r+0x32>
    20400c4c:	00005797          	auipc	a5,0x5
    20400c50:	f7c78793          	addi	a5,a5,-132 # 20405bc8 <__sf_fake_stderr>
    20400c54:	faf41be3          	bne	s0,a5,20400c0a <__swsetup_r+0x32>
    20400c58:	6c80                	ld	s0,24(s1)
    20400c5a:	bf45                	j	20400c0a <__swsetup_r+0x32>
    20400c5c:	8b91                	andi	a5,a5,4
    20400c5e:	c795                	beqz	a5,20400c8a <__swsetup_r+0xb2>
    20400c60:	702c                	ld	a1,96(s0)
    20400c62:	c991                	beqz	a1,20400c76 <__swsetup_r+0x9e>
    20400c64:	07c40793          	addi	a5,s0,124
    20400c68:	00f58563          	beq	a1,a5,20400c72 <__swsetup_r+0x9a>
    20400c6c:	854a                	mv	a0,s2
    20400c6e:	396000ef          	jal	ra,20401004 <_free_r>
    20400c72:	06043023          	sd	zero,96(s0)
    20400c76:	01045783          	lhu	a5,16(s0)
    20400c7a:	00042423          	sw	zero,8(s0)
    20400c7e:	fdb7f793          	andi	a5,a5,-37
    20400c82:	00f41823          	sh	a5,16(s0)
    20400c86:	6c1c                	ld	a5,24(s0)
    20400c88:	e01c                	sd	a5,0(s0)
    20400c8a:	01045783          	lhu	a5,16(s0)
    20400c8e:	0087e793          	ori	a5,a5,8
    20400c92:	00f41823          	sh	a5,16(s0)
    20400c96:	6c1c                	ld	a5,24(s0)
    20400c98:	ef89                	bnez	a5,20400cb2 <__swsetup_r+0xda>
    20400c9a:	01045783          	lhu	a5,16(s0)
    20400c9e:	20000713          	li	a4,512
    20400ca2:	2807f793          	andi	a5,a5,640
    20400ca6:	00e78663          	beq	a5,a4,20400cb2 <__swsetup_r+0xda>
    20400caa:	85a2                	mv	a1,s0
    20400cac:	854a                	mv	a0,s2
    20400cae:	296000ef          	jal	ra,20400f44 <__smakebuf_r>
    20400cb2:	01045783          	lhu	a5,16(s0)
    20400cb6:	0017f713          	andi	a4,a5,1
    20400cba:	c705                	beqz	a4,20400ce2 <__swsetup_r+0x10a>
    20400cbc:	501c                	lw	a5,32(s0)
    20400cbe:	00042623          	sw	zero,12(s0)
    20400cc2:	40f007bb          	negw	a5,a5
    20400cc6:	d41c                	sw	a5,40(s0)
    20400cc8:	6c1c                	ld	a5,24(s0)
    20400cca:	4501                	li	a0,0
    20400ccc:	f3b5                	bnez	a5,20400c30 <__swsetup_r+0x58>
    20400cce:	01041783          	lh	a5,16(s0)
    20400cd2:	0807f713          	andi	a4,a5,128
    20400cd6:	df29                	beqz	a4,20400c30 <__swsetup_r+0x58>
    20400cd8:	0407e793          	ori	a5,a5,64
    20400cdc:	00f41823          	sh	a5,16(s0)
    20400ce0:	b7b9                	j	20400c2e <__swsetup_r+0x56>
    20400ce2:	8b89                	andi	a5,a5,2
    20400ce4:	4701                	li	a4,0
    20400ce6:	e391                	bnez	a5,20400cea <__swsetup_r+0x112>
    20400ce8:	5018                	lw	a4,32(s0)
    20400cea:	c458                	sw	a4,12(s0)
    20400cec:	bff1                	j	20400cc8 <__swsetup_r+0xf0>

0000000020400cee <_close_r>:
_close_r():
    20400cee:	1141                	addi	sp,sp,-16
    20400cf0:	e022                	sd	s0,0(sp)
    20400cf2:	842a                	mv	s0,a0
    20400cf4:	852e                	mv	a0,a1
    20400cf6:	9601a023          	sw	zero,-1696(gp) # 80000c30 <errno>
    20400cfa:	e406                	sd	ra,8(sp)
    20400cfc:	021000ef          	jal	ra,2040151c <_close>
    20400d00:	57fd                	li	a5,-1
    20400d02:	00f51763          	bne	a0,a5,20400d10 <_close_r+0x22>
    20400d06:	96018793          	addi	a5,gp,-1696 # 80000c30 <errno>
    20400d0a:	439c                	lw	a5,0(a5)
    20400d0c:	c391                	beqz	a5,20400d10 <_close_r+0x22>
    20400d0e:	c01c                	sw	a5,0(s0)
    20400d10:	60a2                	ld	ra,8(sp)
    20400d12:	6402                	ld	s0,0(sp)
    20400d14:	0141                	addi	sp,sp,16
    20400d16:	8082                	ret

0000000020400d18 <__sflush_r>:
__sflush_r():
    20400d18:	0105d783          	lhu	a5,16(a1)
    20400d1c:	7179                	addi	sp,sp,-48
    20400d1e:	f022                	sd	s0,32(sp)
    20400d20:	ec26                	sd	s1,24(sp)
    20400d22:	f406                	sd	ra,40(sp)
    20400d24:	e84a                	sd	s2,16(sp)
    20400d26:	e44e                	sd	s3,8(sp)
    20400d28:	0087f713          	andi	a4,a5,8
    20400d2c:	84aa                	mv	s1,a0
    20400d2e:	842e                	mv	s0,a1
    20400d30:	ef79                	bnez	a4,20400e0e <__sflush_r+0xf6>
    20400d32:	4598                	lw	a4,8(a1)
    20400d34:	00e04d63          	bgtz	a4,20400d4e <__sflush_r+0x36>
    20400d38:	5db8                	lw	a4,120(a1)
    20400d3a:	00e04a63          	bgtz	a4,20400d4e <__sflush_r+0x36>
    20400d3e:	4501                	li	a0,0
    20400d40:	70a2                	ld	ra,40(sp)
    20400d42:	7402                	ld	s0,32(sp)
    20400d44:	64e2                	ld	s1,24(sp)
    20400d46:	6942                	ld	s2,16(sp)
    20400d48:	69a2                	ld	s3,8(sp)
    20400d4a:	6145                	addi	sp,sp,48
    20400d4c:	8082                	ret
    20400d4e:	6838                	ld	a4,80(s0)
    20400d50:	d77d                	beqz	a4,20400d3e <__sflush_r+0x26>
    20400d52:	0004a903          	lw	s2,0(s1)
    20400d56:	03379693          	slli	a3,a5,0x33
    20400d5a:	0004a023          	sw	zero,0(s1)
    20400d5e:	0606de63          	bgez	a3,20400dda <__sflush_r+0xc2>
    20400d62:	6c50                	ld	a2,152(s0)
    20400d64:	01045783          	lhu	a5,16(s0)
    20400d68:	8b91                	andi	a5,a5,4
    20400d6a:	c799                	beqz	a5,20400d78 <__sflush_r+0x60>
    20400d6c:	441c                	lw	a5,8(s0)
    20400d6e:	8e1d                	sub	a2,a2,a5
    20400d70:	703c                	ld	a5,96(s0)
    20400d72:	c399                	beqz	a5,20400d78 <__sflush_r+0x60>
    20400d74:	5c3c                	lw	a5,120(s0)
    20400d76:	8e1d                	sub	a2,a2,a5
    20400d78:	683c                	ld	a5,80(s0)
    20400d7a:	7c0c                	ld	a1,56(s0)
    20400d7c:	4681                	li	a3,0
    20400d7e:	8526                	mv	a0,s1
    20400d80:	9782                	jalr	a5
    20400d82:	57fd                	li	a5,-1
    20400d84:	01045703          	lhu	a4,16(s0)
    20400d88:	00f51d63          	bne	a0,a5,20400da2 <__sflush_r+0x8a>
    20400d8c:	4094                	lw	a3,0(s1)
    20400d8e:	47f5                	li	a5,29
    20400d90:	06d7e963          	bltu	a5,a3,20400e02 <__sflush_r+0xea>
    20400d94:	204007b7          	lui	a5,0x20400
    20400d98:	0785                	addi	a5,a5,1
    20400d9a:	00d7d7b3          	srl	a5,a5,a3
    20400d9e:	8b85                	andi	a5,a5,1
    20400da0:	c3ad                	beqz	a5,20400e02 <__sflush_r+0xea>
    20400da2:	6c1c                	ld	a5,24(s0)
    20400da4:	00042423          	sw	zero,8(s0)
    20400da8:	e01c                	sd	a5,0(s0)
    20400daa:	03371793          	slli	a5,a4,0x33
    20400dae:	0007d863          	bgez	a5,20400dbe <__sflush_r+0xa6>
    20400db2:	57fd                	li	a5,-1
    20400db4:	00f51463          	bne	a0,a5,20400dbc <__sflush_r+0xa4>
    20400db8:	409c                	lw	a5,0(s1)
    20400dba:	e391                	bnez	a5,20400dbe <__sflush_r+0xa6>
    20400dbc:	ec48                	sd	a0,152(s0)
    20400dbe:	702c                	ld	a1,96(s0)
    20400dc0:	0124a023          	sw	s2,0(s1)
    20400dc4:	ddad                	beqz	a1,20400d3e <__sflush_r+0x26>
    20400dc6:	07c40793          	addi	a5,s0,124
    20400dca:	00f58563          	beq	a1,a5,20400dd4 <__sflush_r+0xbc>
    20400dce:	8526                	mv	a0,s1
    20400dd0:	234000ef          	jal	ra,20401004 <_free_r>
    20400dd4:	06043023          	sd	zero,96(s0)
    20400dd8:	b79d                	j	20400d3e <__sflush_r+0x26>
    20400dda:	7c0c                	ld	a1,56(s0)
    20400ddc:	4601                	li	a2,0
    20400dde:	4685                	li	a3,1
    20400de0:	8526                	mv	a0,s1
    20400de2:	9702                	jalr	a4
    20400de4:	57fd                	li	a5,-1
    20400de6:	862a                	mv	a2,a0
    20400de8:	f6f51ee3          	bne	a0,a5,20400d64 <__sflush_r+0x4c>
    20400dec:	409c                	lw	a5,0(s1)
    20400dee:	dbbd                	beqz	a5,20400d64 <__sflush_r+0x4c>
    20400df0:	4775                	li	a4,29
    20400df2:	00e78563          	beq	a5,a4,20400dfc <__sflush_r+0xe4>
    20400df6:	4759                	li	a4,22
    20400df8:	04e79463          	bne	a5,a4,20400e40 <__sflush_r+0x128>
    20400dfc:	0124a023          	sw	s2,0(s1)
    20400e00:	bf3d                	j	20400d3e <__sflush_r+0x26>
    20400e02:	04076713          	ori	a4,a4,64
    20400e06:	00e41823          	sh	a4,16(s0)
    20400e0a:	557d                	li	a0,-1
    20400e0c:	bf15                	j	20400d40 <__sflush_r+0x28>
    20400e0e:	0185b983          	ld	s3,24(a1)
    20400e12:	f20986e3          	beqz	s3,20400d3e <__sflush_r+0x26>
    20400e16:	0005b903          	ld	s2,0(a1)
    20400e1a:	8b8d                	andi	a5,a5,3
    20400e1c:	0135b023          	sd	s3,0(a1)
    20400e20:	4139093b          	subw	s2,s2,s3
    20400e24:	4701                	li	a4,0
    20400e26:	e391                	bnez	a5,20400e2a <__sflush_r+0x112>
    20400e28:	5198                	lw	a4,32(a1)
    20400e2a:	c458                	sw	a4,12(s0)
    20400e2c:	f12059e3          	blez	s2,20400d3e <__sflush_r+0x26>
    20400e30:	643c                	ld	a5,72(s0)
    20400e32:	7c0c                	ld	a1,56(s0)
    20400e34:	86ca                	mv	a3,s2
    20400e36:	864e                	mv	a2,s3
    20400e38:	8526                	mv	a0,s1
    20400e3a:	9782                	jalr	a5
    20400e3c:	00a04963          	bgtz	a0,20400e4e <__sflush_r+0x136>
    20400e40:	01045783          	lhu	a5,16(s0)
    20400e44:	0407e793          	ori	a5,a5,64
    20400e48:	00f41823          	sh	a5,16(s0)
    20400e4c:	bf7d                	j	20400e0a <__sflush_r+0xf2>
    20400e4e:	99aa                	add	s3,s3,a0
    20400e50:	40a9093b          	subw	s2,s2,a0
    20400e54:	bfe1                	j	20400e2c <__sflush_r+0x114>

0000000020400e56 <_fflush_r>:
_fflush_r():
    20400e56:	6d9c                	ld	a5,24(a1)
    20400e58:	c3a5                	beqz	a5,20400eb8 <_fflush_r+0x62>
    20400e5a:	1101                	addi	sp,sp,-32
    20400e5c:	e822                	sd	s0,16(sp)
    20400e5e:	ec06                	sd	ra,24(sp)
    20400e60:	842a                	mv	s0,a0
    20400e62:	c519                	beqz	a0,20400e70 <_fflush_r+0x1a>
    20400e64:	591c                	lw	a5,48(a0)
    20400e66:	e789                	bnez	a5,20400e70 <_fflush_r+0x1a>
    20400e68:	e42e                	sd	a1,8(sp)
    20400e6a:	d48ff0ef          	jal	ra,204003b2 <__sinit>
    20400e6e:	65a2                	ld	a1,8(sp)
    20400e70:	00005797          	auipc	a5,0x5
    20400e74:	d9078793          	addi	a5,a5,-624 # 20405c00 <__sf_fake_stdin>
    20400e78:	00f59b63          	bne	a1,a5,20400e8e <_fflush_r+0x38>
    20400e7c:	640c                	ld	a1,8(s0)
    20400e7e:	01059783          	lh	a5,16(a1)
    20400e82:	c795                	beqz	a5,20400eae <_fflush_r+0x58>
    20400e84:	8522                	mv	a0,s0
    20400e86:	6442                	ld	s0,16(sp)
    20400e88:	60e2                	ld	ra,24(sp)
    20400e8a:	6105                	addi	sp,sp,32
    20400e8c:	b571                	j	20400d18 <__sflush_r>
    20400e8e:	00005797          	auipc	a5,0x5
    20400e92:	daa78793          	addi	a5,a5,-598 # 20405c38 <__sf_fake_stdout>
    20400e96:	00f59463          	bne	a1,a5,20400e9e <_fflush_r+0x48>
    20400e9a:	680c                	ld	a1,16(s0)
    20400e9c:	b7cd                	j	20400e7e <_fflush_r+0x28>
    20400e9e:	00005797          	auipc	a5,0x5
    20400ea2:	d2a78793          	addi	a5,a5,-726 # 20405bc8 <__sf_fake_stderr>
    20400ea6:	fcf59ce3          	bne	a1,a5,20400e7e <_fflush_r+0x28>
    20400eaa:	6c0c                	ld	a1,24(s0)
    20400eac:	bfc9                	j	20400e7e <_fflush_r+0x28>
    20400eae:	60e2                	ld	ra,24(sp)
    20400eb0:	6442                	ld	s0,16(sp)
    20400eb2:	4501                	li	a0,0
    20400eb4:	6105                	addi	sp,sp,32
    20400eb6:	8082                	ret
    20400eb8:	4501                	li	a0,0
    20400eba:	8082                	ret

0000000020400ebc <_lseek_r>:
_lseek_r():
    20400ebc:	1141                	addi	sp,sp,-16
    20400ebe:	e022                	sd	s0,0(sp)
    20400ec0:	842a                	mv	s0,a0
    20400ec2:	852e                	mv	a0,a1
    20400ec4:	85b2                	mv	a1,a2
    20400ec6:	8636                	mv	a2,a3
    20400ec8:	9601a023          	sw	zero,-1696(gp) # 80000c30 <errno>
    20400ecc:	e406                	sd	ra,8(sp)
    20400ece:	6ca000ef          	jal	ra,20401598 <_lseek>
    20400ed2:	57fd                	li	a5,-1
    20400ed4:	00f51763          	bne	a0,a5,20400ee2 <_lseek_r+0x26>
    20400ed8:	96018793          	addi	a5,gp,-1696 # 80000c30 <errno>
    20400edc:	439c                	lw	a5,0(a5)
    20400ede:	c391                	beqz	a5,20400ee2 <_lseek_r+0x26>
    20400ee0:	c01c                	sw	a5,0(s0)
    20400ee2:	60a2                	ld	ra,8(sp)
    20400ee4:	6402                	ld	s0,0(sp)
    20400ee6:	0141                	addi	sp,sp,16
    20400ee8:	8082                	ret

0000000020400eea <__swhatbuf_r>:
__swhatbuf_r():
    20400eea:	7135                	addi	sp,sp,-160
    20400eec:	e526                	sd	s1,136(sp)
    20400eee:	84ae                	mv	s1,a1
    20400ef0:	01259583          	lh	a1,18(a1)
    20400ef4:	e922                	sd	s0,144(sp)
    20400ef6:	ed06                	sd	ra,152(sp)
    20400ef8:	8432                	mv	s0,a2
    20400efa:	0005dc63          	bgez	a1,20400f12 <__swhatbuf_r+0x28>
    20400efe:	0104d783          	lhu	a5,16(s1)
    20400f02:	0006a023          	sw	zero,0(a3)
    20400f06:	0807f793          	andi	a5,a5,128
    20400f0a:	e785                	bnez	a5,20400f32 <__swhatbuf_r+0x48>
    20400f0c:	40000793          	li	a5,1024
    20400f10:	a01d                	j	20400f36 <__swhatbuf_r+0x4c>
    20400f12:	0830                	addi	a2,sp,24
    20400f14:	e436                	sd	a3,8(sp)
    20400f16:	5b0000ef          	jal	ra,204014c6 <_fstat_r>
    20400f1a:	66a2                	ld	a3,8(sp)
    20400f1c:	fe0541e3          	bltz	a0,20400efe <__swhatbuf_r+0x14>
    20400f20:	47f2                	lw	a5,28(sp)
    20400f22:	673d                	lui	a4,0xf
    20400f24:	8ff9                	and	a5,a5,a4
    20400f26:	6709                	lui	a4,0x2
    20400f28:	8f99                	sub	a5,a5,a4
    20400f2a:	0017b793          	seqz	a5,a5
    20400f2e:	c29c                	sw	a5,0(a3)
    20400f30:	bff1                	j	20400f0c <__swhatbuf_r+0x22>
    20400f32:	04000793          	li	a5,64
    20400f36:	e01c                	sd	a5,0(s0)
    20400f38:	60ea                	ld	ra,152(sp)
    20400f3a:	644a                	ld	s0,144(sp)
    20400f3c:	64aa                	ld	s1,136(sp)
    20400f3e:	4501                	li	a0,0
    20400f40:	610d                	addi	sp,sp,160
    20400f42:	8082                	ret

0000000020400f44 <__smakebuf_r>:
__smakebuf_r():
    20400f44:	0105d783          	lhu	a5,16(a1)
    20400f48:	7179                	addi	sp,sp,-48
    20400f4a:	f022                	sd	s0,32(sp)
    20400f4c:	f406                	sd	ra,40(sp)
    20400f4e:	ec26                	sd	s1,24(sp)
    20400f50:	e84a                	sd	s2,16(sp)
    20400f52:	8b89                	andi	a5,a5,2
    20400f54:	842e                	mv	s0,a1
    20400f56:	cf89                	beqz	a5,20400f70 <__smakebuf_r+0x2c>
    20400f58:	07f40793          	addi	a5,s0,127
    20400f5c:	e01c                	sd	a5,0(s0)
    20400f5e:	ec1c                	sd	a5,24(s0)
    20400f60:	4785                	li	a5,1
    20400f62:	d01c                	sw	a5,32(s0)
    20400f64:	70a2                	ld	ra,40(sp)
    20400f66:	7402                	ld	s0,32(sp)
    20400f68:	64e2                	ld	s1,24(sp)
    20400f6a:	6942                	ld	s2,16(sp)
    20400f6c:	6145                	addi	sp,sp,48
    20400f6e:	8082                	ret
    20400f70:	0054                	addi	a3,sp,4
    20400f72:	0030                	addi	a2,sp,8
    20400f74:	84aa                	mv	s1,a0
    20400f76:	f75ff0ef          	jal	ra,20400eea <__swhatbuf_r>
    20400f7a:	65a2                	ld	a1,8(sp)
    20400f7c:	892a                	mv	s2,a0
    20400f7e:	8526                	mv	a0,s1
    20400f80:	e60ff0ef          	jal	ra,204005e0 <_malloc_r>
    20400f84:	ed01                	bnez	a0,20400f9c <__smakebuf_r+0x58>
    20400f86:	01041783          	lh	a5,16(s0)
    20400f8a:	2007f713          	andi	a4,a5,512
    20400f8e:	fb79                	bnez	a4,20400f64 <__smakebuf_r+0x20>
    20400f90:	9bf1                	andi	a5,a5,-4
    20400f92:	0027e793          	ori	a5,a5,2
    20400f96:	00f41823          	sh	a5,16(s0)
    20400f9a:	bf7d                	j	20400f58 <__smakebuf_r+0x14>
    20400f9c:	fffff797          	auipc	a5,0xfffff
    20400fa0:	3c478793          	addi	a5,a5,964 # 20400360 <_cleanup_r>
    20400fa4:	e4bc                	sd	a5,72(s1)
    20400fa6:	01045783          	lhu	a5,16(s0)
    20400faa:	e008                	sd	a0,0(s0)
    20400fac:	ec08                	sd	a0,24(s0)
    20400fae:	0807e793          	ori	a5,a5,128
    20400fb2:	00f41823          	sh	a5,16(s0)
    20400fb6:	67a2                	ld	a5,8(sp)
    20400fb8:	d01c                	sw	a5,32(s0)
    20400fba:	4792                	lw	a5,4(sp)
    20400fbc:	cf91                	beqz	a5,20400fd8 <__smakebuf_r+0x94>
    20400fbe:	01241583          	lh	a1,18(s0)
    20400fc2:	8526                	mv	a0,s1
    20400fc4:	52e000ef          	jal	ra,204014f2 <_isatty_r>
    20400fc8:	c901                	beqz	a0,20400fd8 <__smakebuf_r+0x94>
    20400fca:	01045783          	lhu	a5,16(s0)
    20400fce:	9bf1                	andi	a5,a5,-4
    20400fd0:	0017e793          	ori	a5,a5,1
    20400fd4:	00f41823          	sh	a5,16(s0)
    20400fd8:	01045783          	lhu	a5,16(s0)
    20400fdc:	00f96933          	or	s2,s2,a5
    20400fe0:	01241823          	sh	s2,16(s0)
    20400fe4:	b741                	j	20400f64 <__smakebuf_r+0x20>

0000000020400fe6 <memchr>:
memchr():
    20400fe6:	0ff5f593          	andi	a1,a1,255
    20400fea:	962a                	add	a2,a2,a0
    20400fec:	00c51463          	bne	a0,a2,20400ff4 <memchr+0xe>
    20400ff0:	4501                	li	a0,0
    20400ff2:	8082                	ret
    20400ff4:	00054783          	lbu	a5,0(a0)
    20400ff8:	feb78de3          	beq	a5,a1,20400ff2 <memchr+0xc>
    20400ffc:	0505                	addi	a0,a0,1
    20400ffe:	b7fd                	j	20400fec <memchr+0x6>

0000000020401000 <__malloc_lock>:
__malloc_lock():
    20401000:	8082                	ret

0000000020401002 <__malloc_unlock>:
__malloc_unlock():
    20401002:	8082                	ret

0000000020401004 <_free_r>:
_free_r():
    20401004:	c5d5                	beqz	a1,204010b0 <_free_r+0xac>
    20401006:	ff85b783          	ld	a5,-8(a1)
    2040100a:	1101                	addi	sp,sp,-32
    2040100c:	e822                	sd	s0,16(sp)
    2040100e:	ec06                	sd	ra,24(sp)
    20401010:	e426                	sd	s1,8(sp)
    20401012:	ff858413          	addi	s0,a1,-8
    20401016:	0007d363          	bgez	a5,2040101c <_free_r+0x18>
    2040101a:	943e                	add	s0,s0,a5
    2040101c:	84aa                	mv	s1,a0
    2040101e:	fe3ff0ef          	jal	ra,20401000 <__malloc_lock>
    20401022:	5fc00797          	auipc	a5,0x5fc00
    20401026:	ade78793          	addi	a5,a5,-1314 # 80000b00 <metal_segment_data_target_end>
    2040102a:	639c                	ld	a5,0(a5)
    2040102c:	ef89                	bnez	a5,20401046 <_free_r+0x42>
    2040102e:	00043423          	sd	zero,8(s0)
    20401032:	5fc00797          	auipc	a5,0x5fc00
    20401036:	ac87b723          	sd	s0,-1330(a5) # 80000b00 <metal_segment_data_target_end>
    2040103a:	6442                	ld	s0,16(sp)
    2040103c:	60e2                	ld	ra,24(sp)
    2040103e:	8526                	mv	a0,s1
    20401040:	64a2                	ld	s1,8(sp)
    20401042:	6105                	addi	sp,sp,32
    20401044:	bf7d                	j	20401002 <__malloc_unlock>
    20401046:	00f47e63          	bgeu	s0,a5,20401062 <_free_r+0x5e>
    2040104a:	6014                	ld	a3,0(s0)
    2040104c:	00d40733          	add	a4,s0,a3
    20401050:	00e79663          	bne	a5,a4,2040105c <_free_r+0x58>
    20401054:	6398                	ld	a4,0(a5)
    20401056:	679c                	ld	a5,8(a5)
    20401058:	9736                	add	a4,a4,a3
    2040105a:	e018                	sd	a4,0(s0)
    2040105c:	e41c                	sd	a5,8(s0)
    2040105e:	bfd1                	j	20401032 <_free_r+0x2e>
    20401060:	87ba                	mv	a5,a4
    20401062:	6798                	ld	a4,8(a5)
    20401064:	c319                	beqz	a4,2040106a <_free_r+0x66>
    20401066:	fee47de3          	bgeu	s0,a4,20401060 <_free_r+0x5c>
    2040106a:	6394                	ld	a3,0(a5)
    2040106c:	00d78633          	add	a2,a5,a3
    20401070:	00861f63          	bne	a2,s0,2040108e <_free_r+0x8a>
    20401074:	6010                	ld	a2,0(s0)
    20401076:	96b2                	add	a3,a3,a2
    20401078:	e394                	sd	a3,0(a5)
    2040107a:	00d78633          	add	a2,a5,a3
    2040107e:	fac71ee3          	bne	a4,a2,2040103a <_free_r+0x36>
    20401082:	6310                	ld	a2,0(a4)
    20401084:	6718                	ld	a4,8(a4)
    20401086:	96b2                	add	a3,a3,a2
    20401088:	e394                	sd	a3,0(a5)
    2040108a:	e798                	sd	a4,8(a5)
    2040108c:	b77d                	j	2040103a <_free_r+0x36>
    2040108e:	00c47563          	bgeu	s0,a2,20401098 <_free_r+0x94>
    20401092:	47b1                	li	a5,12
    20401094:	c09c                	sw	a5,0(s1)
    20401096:	b755                	j	2040103a <_free_r+0x36>
    20401098:	6010                	ld	a2,0(s0)
    2040109a:	00c406b3          	add	a3,s0,a2
    2040109e:	00d71663          	bne	a4,a3,204010aa <_free_r+0xa6>
    204010a2:	6314                	ld	a3,0(a4)
    204010a4:	6718                	ld	a4,8(a4)
    204010a6:	96b2                	add	a3,a3,a2
    204010a8:	e014                	sd	a3,0(s0)
    204010aa:	e418                	sd	a4,8(s0)
    204010ac:	e780                	sd	s0,8(a5)
    204010ae:	b771                	j	2040103a <_free_r+0x36>
    204010b0:	8082                	ret

00000000204010b2 <_printf_common>:
_printf_common():
    204010b2:	715d                	addi	sp,sp,-80
    204010b4:	ec56                	sd	s5,24(sp)
    204010b6:	499c                	lw	a5,16(a1)
    204010b8:	8aba                	mv	s5,a4
    204010ba:	4598                	lw	a4,8(a1)
    204010bc:	e0a2                	sd	s0,64(sp)
    204010be:	f84a                	sd	s2,48(sp)
    204010c0:	f44e                	sd	s3,40(sp)
    204010c2:	f052                	sd	s4,32(sp)
    204010c4:	8932                	mv	s2,a2
    204010c6:	8a36                	mv	s4,a3
    204010c8:	e486                	sd	ra,72(sp)
    204010ca:	fc26                	sd	s1,56(sp)
    204010cc:	e85a                	sd	s6,16(sp)
    204010ce:	e45e                	sd	s7,8(sp)
    204010d0:	0007861b          	sext.w	a2,a5
    204010d4:	0007069b          	sext.w	a3,a4
    204010d8:	89aa                	mv	s3,a0
    204010da:	842e                	mv	s0,a1
    204010dc:	00d65363          	bge	a2,a3,204010e2 <_printf_common+0x30>
    204010e0:	87ba                	mv	a5,a4
    204010e2:	00f92023          	sw	a5,0(s2)
    204010e6:	04344703          	lbu	a4,67(s0)
    204010ea:	c701                	beqz	a4,204010f2 <_printf_common+0x40>
    204010ec:	2785                	addiw	a5,a5,1
    204010ee:	00f92023          	sw	a5,0(s2)
    204010f2:	401c                	lw	a5,0(s0)
    204010f4:	0207f793          	andi	a5,a5,32
    204010f8:	c791                	beqz	a5,20401104 <_printf_common+0x52>
    204010fa:	00092783          	lw	a5,0(s2)
    204010fe:	2789                	addiw	a5,a5,2
    20401100:	00f92023          	sw	a5,0(s2)
    20401104:	4004                	lw	s1,0(s0)
    20401106:	8899                	andi	s1,s1,6
    20401108:	e891                	bnez	s1,2040111c <_printf_common+0x6a>
    2040110a:	01940b13          	addi	s6,s0,25
    2040110e:	5bfd                	li	s7,-1
    20401110:	445c                	lw	a5,12(s0)
    20401112:	00092703          	lw	a4,0(s2)
    20401116:	9f99                	subw	a5,a5,a4
    20401118:	06f4c163          	blt	s1,a5,2040117a <_printf_common+0xc8>
    2040111c:	04344783          	lbu	a5,67(s0)
    20401120:	4018                	lw	a4,0(s0)
    20401122:	00f037b3          	snez	a5,a5
    20401126:	02077713          	andi	a4,a4,32
    2040112a:	0007869b          	sext.w	a3,a5
    2040112e:	eb3d                	bnez	a4,204011a4 <_printf_common+0xf2>
    20401130:	04340613          	addi	a2,s0,67
    20401134:	85d2                	mv	a1,s4
    20401136:	854e                	mv	a0,s3
    20401138:	9a82                	jalr	s5
    2040113a:	57fd                	li	a5,-1
    2040113c:	04f50663          	beq	a0,a5,20401188 <_printf_common+0xd6>
    20401140:	401c                	lw	a5,0(s0)
    20401142:	4611                	li	a2,4
    20401144:	4454                	lw	a3,12(s0)
    20401146:	8b99                	andi	a5,a5,6
    20401148:	00092703          	lw	a4,0(s2)
    2040114c:	4481                	li	s1,0
    2040114e:	00c79963          	bne	a5,a2,20401160 <_printf_common+0xae>
    20401152:	40e684bb          	subw	s1,a3,a4
    20401156:	02049793          	slli	a5,s1,0x20
    2040115a:	0007d363          	bgez	a5,20401160 <_printf_common+0xae>
    2040115e:	4481                	li	s1,0
    20401160:	441c                	lw	a5,8(s0)
    20401162:	4818                	lw	a4,16(s0)
    20401164:	00f75463          	bge	a4,a5,2040116c <_printf_common+0xba>
    20401168:	9f99                	subw	a5,a5,a4
    2040116a:	9cbd                	addw	s1,s1,a5
    2040116c:	4901                	li	s2,0
    2040116e:	0469                	addi	s0,s0,26
    20401170:	5b7d                	li	s6,-1
    20401172:	05249963          	bne	s1,s2,204011c4 <_printf_common+0x112>
    20401176:	4501                	li	a0,0
    20401178:	a809                	j	2040118a <_printf_common+0xd8>
    2040117a:	4685                	li	a3,1
    2040117c:	865a                	mv	a2,s6
    2040117e:	85d2                	mv	a1,s4
    20401180:	854e                	mv	a0,s3
    20401182:	9a82                	jalr	s5
    20401184:	01751e63          	bne	a0,s7,204011a0 <_printf_common+0xee>
    20401188:	557d                	li	a0,-1
    2040118a:	60a6                	ld	ra,72(sp)
    2040118c:	6406                	ld	s0,64(sp)
    2040118e:	74e2                	ld	s1,56(sp)
    20401190:	7942                	ld	s2,48(sp)
    20401192:	79a2                	ld	s3,40(sp)
    20401194:	7a02                	ld	s4,32(sp)
    20401196:	6ae2                	ld	s5,24(sp)
    20401198:	6b42                	ld	s6,16(sp)
    2040119a:	6ba2                	ld	s7,8(sp)
    2040119c:	6161                	addi	sp,sp,80
    2040119e:	8082                	ret
    204011a0:	2485                	addiw	s1,s1,1
    204011a2:	b7bd                	j	20401110 <_printf_common+0x5e>
    204011a4:	96a2                	add	a3,a3,s0
    204011a6:	03000613          	li	a2,48
    204011aa:	04c681a3          	sb	a2,67(a3)
    204011ae:	04544603          	lbu	a2,69(s0)
    204011b2:	0017871b          	addiw	a4,a5,1
    204011b6:	0027869b          	addiw	a3,a5,2
    204011ba:	00e407b3          	add	a5,s0,a4
    204011be:	04c781a3          	sb	a2,67(a5)
    204011c2:	b7bd                	j	20401130 <_printf_common+0x7e>
    204011c4:	4685                	li	a3,1
    204011c6:	8622                	mv	a2,s0
    204011c8:	85d2                	mv	a1,s4
    204011ca:	854e                	mv	a0,s3
    204011cc:	9a82                	jalr	s5
    204011ce:	fb650de3          	beq	a0,s6,20401188 <_printf_common+0xd6>
    204011d2:	2905                	addiw	s2,s2,1
    204011d4:	bf79                	j	20401172 <_printf_common+0xc0>

00000000204011d6 <_printf_i>:
_printf_i():
    204011d6:	715d                	addi	sp,sp,-80
    204011d8:	e0a2                	sd	s0,64(sp)
    204011da:	f84a                	sd	s2,48(sp)
    204011dc:	f44e                	sd	s3,40(sp)
    204011de:	f052                	sd	s4,32(sp)
    204011e0:	e486                	sd	ra,72(sp)
    204011e2:	fc26                	sd	s1,56(sp)
    204011e4:	ec56                	sd	s5,24(sp)
    204011e6:	e85a                	sd	s6,16(sp)
    204011e8:	8a36                	mv	s4,a3
    204011ea:	0185c683          	lbu	a3,24(a1)
    204011ee:	06e00793          	li	a5,110
    204011f2:	89b2                	mv	s3,a2
    204011f4:	892a                	mv	s2,a0
    204011f6:	842e                	mv	s0,a1
    204011f8:	04358613          	addi	a2,a1,67
    204011fc:	1ef68a63          	beq	a3,a5,204013f0 <_printf_i+0x21a>
    20401200:	06d7e263          	bltu	a5,a3,20401264 <_printf_i+0x8e>
    20401204:	06300793          	li	a5,99
    20401208:	0af68263          	beq	a3,a5,204012ac <_printf_i+0xd6>
    2040120c:	00d7ed63          	bltu	a5,a3,20401226 <_printf_i+0x50>
    20401210:	1e068c63          	beqz	a3,20401408 <_printf_i+0x232>
    20401214:	05800793          	li	a5,88
    20401218:	16f68b63          	beq	a3,a5,2040138e <_printf_i+0x1b8>
    2040121c:	04240493          	addi	s1,s0,66
    20401220:	04d40123          	sb	a3,66(s0)
    20401224:	a869                	j	204012be <_printf_i+0xe8>
    20401226:	06400793          	li	a5,100
    2040122a:	00f68663          	beq	a3,a5,20401236 <_printf_i+0x60>
    2040122e:	06900793          	li	a5,105
    20401232:	fef695e3          	bne	a3,a5,2040121c <_printf_i+0x46>
    20401236:	4014                	lw	a3,0(s0)
    20401238:	631c                	ld	a5,0(a4)
    2040123a:	0806f513          	andi	a0,a3,128
    2040123e:	00878593          	addi	a1,a5,8
    20401242:	c141                	beqz	a0,204012c2 <_printf_i+0xec>
    20401244:	639c                	ld	a5,0(a5)
    20401246:	e30c                	sd	a1,0(a4)
    20401248:	0007d863          	bgez	a5,20401258 <_printf_i+0x82>
    2040124c:	02d00713          	li	a4,45
    20401250:	40f007b3          	neg	a5,a5
    20401254:	04e401a3          	sb	a4,67(s0)
    20401258:	00005697          	auipc	a3,0x5
    2040125c:	a3068693          	addi	a3,a3,-1488 # 20405c88 <__sf_fake_stdout+0x50>
    20401260:	4729                	li	a4,10
    20401262:	a871                	j	204012fe <_printf_i+0x128>
    20401264:	07300793          	li	a5,115
    20401268:	1af68e63          	beq	a3,a5,20401424 <_printf_i+0x24e>
    2040126c:	00d7ef63          	bltu	a5,a3,2040128a <_printf_i+0xb4>
    20401270:	06f00793          	li	a5,111
    20401274:	06f68063          	beq	a3,a5,204012d4 <_printf_i+0xfe>
    20401278:	07000793          	li	a5,112
    2040127c:	faf690e3          	bne	a3,a5,2040121c <_printf_i+0x46>
    20401280:	419c                	lw	a5,0(a1)
    20401282:	0a07e793          	ori	a5,a5,160
    20401286:	c19c                	sw	a5,0(a1)
    20401288:	a809                	j	2040129a <_printf_i+0xc4>
    2040128a:	07500793          	li	a5,117
    2040128e:	04f68363          	beq	a3,a5,204012d4 <_printf_i+0xfe>
    20401292:	07800793          	li	a5,120
    20401296:	f8f693e3          	bne	a3,a5,2040121c <_printf_i+0x46>
    2040129a:	07800793          	li	a5,120
    2040129e:	04f402a3          	sb	a5,69(s0)
    204012a2:	00005697          	auipc	a3,0x5
    204012a6:	9fe68693          	addi	a3,a3,-1538 # 20405ca0 <__sf_fake_stdout+0x68>
    204012aa:	a8c5                	j	2040139a <_printf_i+0x1c4>
    204012ac:	631c                	ld	a5,0(a4)
    204012ae:	04258493          	addi	s1,a1,66
    204012b2:	00878693          	addi	a3,a5,8
    204012b6:	439c                	lw	a5,0(a5)
    204012b8:	e314                	sd	a3,0(a4)
    204012ba:	04f58123          	sb	a5,66(a1)
    204012be:	4785                	li	a5,1
    204012c0:	a241                	j	20401440 <_printf_i+0x26a>
    204012c2:	0406f693          	andi	a3,a3,64
    204012c6:	e30c                	sd	a1,0(a4)
    204012c8:	c681                	beqz	a3,204012d0 <_printf_i+0xfa>
    204012ca:	00079783          	lh	a5,0(a5)
    204012ce:	bfad                	j	20401248 <_printf_i+0x72>
    204012d0:	439c                	lw	a5,0(a5)
    204012d2:	bf9d                	j	20401248 <_printf_i+0x72>
    204012d4:	400c                	lw	a1,0(s0)
    204012d6:	631c                	ld	a5,0(a4)
    204012d8:	0805f813          	andi	a6,a1,128
    204012dc:	00878513          	addi	a0,a5,8
    204012e0:	08080c63          	beqz	a6,20401378 <_printf_i+0x1a2>
    204012e4:	639c                	ld	a5,0(a5)
    204012e6:	e308                	sd	a0,0(a4)
    204012e8:	06f00713          	li	a4,111
    204012ec:	0ee68a63          	beq	a3,a4,204013e0 <_printf_i+0x20a>
    204012f0:	00005697          	auipc	a3,0x5
    204012f4:	99868693          	addi	a3,a3,-1640 # 20405c88 <__sf_fake_stdout+0x50>
    204012f8:	4729                	li	a4,10
    204012fa:	040401a3          	sb	zero,67(s0)
    204012fe:	404c                	lw	a1,4(s0)
    20401300:	c40c                	sw	a1,8(s0)
    20401302:	0005c563          	bltz	a1,2040130c <_printf_i+0x136>
    20401306:	4008                	lw	a0,0(s0)
    20401308:	996d                	andi	a0,a0,-5
    2040130a:	c008                	sw	a0,0(s0)
    2040130c:	e399                	bnez	a5,20401312 <_printf_i+0x13c>
    2040130e:	84b2                	mv	s1,a2
    20401310:	cd91                	beqz	a1,2040132c <_printf_i+0x156>
    20401312:	84b2                	mv	s1,a2
    20401314:	02e7f5b3          	remu	a1,a5,a4
    20401318:	14fd                	addi	s1,s1,-1
    2040131a:	95b6                	add	a1,a1,a3
    2040131c:	0005c583          	lbu	a1,0(a1)
    20401320:	00b48023          	sb	a1,0(s1)
    20401324:	02e7d5b3          	divu	a1,a5,a4
    20401328:	0ce7f263          	bgeu	a5,a4,204013ec <_printf_i+0x216>
    2040132c:	47a1                	li	a5,8
    2040132e:	00f71e63          	bne	a4,a5,2040134a <_printf_i+0x174>
    20401332:	401c                	lw	a5,0(s0)
    20401334:	8b85                	andi	a5,a5,1
    20401336:	cb91                	beqz	a5,2040134a <_printf_i+0x174>
    20401338:	4058                	lw	a4,4(s0)
    2040133a:	481c                	lw	a5,16(s0)
    2040133c:	00e7c763          	blt	a5,a4,2040134a <_printf_i+0x174>
    20401340:	03000793          	li	a5,48
    20401344:	fef48fa3          	sb	a5,-1(s1)
    20401348:	14fd                	addi	s1,s1,-1
    2040134a:	8e05                	sub	a2,a2,s1
    2040134c:	c810                	sw	a2,16(s0)
    2040134e:	8752                	mv	a4,s4
    20401350:	86ce                	mv	a3,s3
    20401352:	0070                	addi	a2,sp,12
    20401354:	85a2                	mv	a1,s0
    20401356:	854a                	mv	a0,s2
    20401358:	d5bff0ef          	jal	ra,204010b2 <_printf_common>
    2040135c:	5afd                	li	s5,-1
    2040135e:	0f551563          	bne	a0,s5,20401448 <_printf_i+0x272>
    20401362:	557d                	li	a0,-1
    20401364:	60a6                	ld	ra,72(sp)
    20401366:	6406                	ld	s0,64(sp)
    20401368:	74e2                	ld	s1,56(sp)
    2040136a:	7942                	ld	s2,48(sp)
    2040136c:	79a2                	ld	s3,40(sp)
    2040136e:	7a02                	ld	s4,32(sp)
    20401370:	6ae2                	ld	s5,24(sp)
    20401372:	6b42                	ld	s6,16(sp)
    20401374:	6161                	addi	sp,sp,80
    20401376:	8082                	ret
    20401378:	439c                	lw	a5,0(a5)
    2040137a:	0405f593          	andi	a1,a1,64
    2040137e:	e308                	sd	a0,0(a4)
    20401380:	c581                	beqz	a1,20401388 <_printf_i+0x1b2>
    20401382:	17c2                	slli	a5,a5,0x30
    20401384:	93c1                	srli	a5,a5,0x30
    20401386:	b78d                	j	204012e8 <_printf_i+0x112>
    20401388:	1782                	slli	a5,a5,0x20
    2040138a:	9381                	srli	a5,a5,0x20
    2040138c:	bfb1                	j	204012e8 <_printf_i+0x112>
    2040138e:	04d582a3          	sb	a3,69(a1)
    20401392:	00005697          	auipc	a3,0x5
    20401396:	8f668693          	addi	a3,a3,-1802 # 20405c88 <__sf_fake_stdout+0x50>
    2040139a:	400c                	lw	a1,0(s0)
    2040139c:	631c                	ld	a5,0(a4)
    2040139e:	0805f813          	andi	a6,a1,128
    204013a2:	00878513          	addi	a0,a5,8
    204013a6:	02080163          	beqz	a6,204013c8 <_printf_i+0x1f2>
    204013aa:	639c                	ld	a5,0(a5)
    204013ac:	e308                	sd	a0,0(a4)
    204013ae:	0015f713          	andi	a4,a1,1
    204013b2:	c701                	beqz	a4,204013ba <_printf_i+0x1e4>
    204013b4:	0205e593          	ori	a1,a1,32
    204013b8:	c00c                	sw	a1,0(s0)
    204013ba:	4741                	li	a4,16
    204013bc:	ff9d                	bnez	a5,204012fa <_printf_i+0x124>
    204013be:	400c                	lw	a1,0(s0)
    204013c0:	fdf5f593          	andi	a1,a1,-33
    204013c4:	c00c                	sw	a1,0(s0)
    204013c6:	bf15                	j	204012fa <_printf_i+0x124>
    204013c8:	439c                	lw	a5,0(a5)
    204013ca:	0405f813          	andi	a6,a1,64
    204013ce:	e308                	sd	a0,0(a4)
    204013d0:	00080563          	beqz	a6,204013da <_printf_i+0x204>
    204013d4:	17c2                	slli	a5,a5,0x30
    204013d6:	93c1                	srli	a5,a5,0x30
    204013d8:	bfd9                	j	204013ae <_printf_i+0x1d8>
    204013da:	1782                	slli	a5,a5,0x20
    204013dc:	9381                	srli	a5,a5,0x20
    204013de:	bfc1                	j	204013ae <_printf_i+0x1d8>
    204013e0:	00005697          	auipc	a3,0x5
    204013e4:	8a868693          	addi	a3,a3,-1880 # 20405c88 <__sf_fake_stdout+0x50>
    204013e8:	4721                	li	a4,8
    204013ea:	bf01                	j	204012fa <_printf_i+0x124>
    204013ec:	87ae                	mv	a5,a1
    204013ee:	b71d                	j	20401314 <_printf_i+0x13e>
    204013f0:	4194                	lw	a3,0(a1)
    204013f2:	631c                	ld	a5,0(a4)
    204013f4:	49cc                	lw	a1,20(a1)
    204013f6:	0806f813          	andi	a6,a3,128
    204013fa:	00878513          	addi	a0,a5,8
    204013fe:	00080963          	beqz	a6,20401410 <_printf_i+0x23a>
    20401402:	e308                	sd	a0,0(a4)
    20401404:	639c                	ld	a5,0(a5)
    20401406:	e38c                	sd	a1,0(a5)
    20401408:	00042823          	sw	zero,16(s0)
    2040140c:	84b2                	mv	s1,a2
    2040140e:	b781                	j	2040134e <_printf_i+0x178>
    20401410:	e308                	sd	a0,0(a4)
    20401412:	0406f693          	andi	a3,a3,64
    20401416:	639c                	ld	a5,0(a5)
    20401418:	c681                	beqz	a3,20401420 <_printf_i+0x24a>
    2040141a:	00b79023          	sh	a1,0(a5)
    2040141e:	b7ed                	j	20401408 <_printf_i+0x232>
    20401420:	c38c                	sw	a1,0(a5)
    20401422:	b7dd                	j	20401408 <_printf_i+0x232>
    20401424:	631c                	ld	a5,0(a4)
    20401426:	41d0                	lw	a2,4(a1)
    20401428:	4581                	li	a1,0
    2040142a:	00878693          	addi	a3,a5,8
    2040142e:	e314                	sd	a3,0(a4)
    20401430:	6384                	ld	s1,0(a5)
    20401432:	8526                	mv	a0,s1
    20401434:	bb3ff0ef          	jal	ra,20400fe6 <memchr>
    20401438:	c119                	beqz	a0,2040143e <_printf_i+0x268>
    2040143a:	8d05                	sub	a0,a0,s1
    2040143c:	c048                	sw	a0,4(s0)
    2040143e:	405c                	lw	a5,4(s0)
    20401440:	c81c                	sw	a5,16(s0)
    20401442:	040401a3          	sb	zero,67(s0)
    20401446:	b721                	j	2040134e <_printf_i+0x178>
    20401448:	4814                	lw	a3,16(s0)
    2040144a:	8626                	mv	a2,s1
    2040144c:	85ce                	mv	a1,s3
    2040144e:	854a                	mv	a0,s2
    20401450:	9a02                	jalr	s4
    20401452:	f15508e3          	beq	a0,s5,20401362 <_printf_i+0x18c>
    20401456:	401c                	lw	a5,0(s0)
    20401458:	8b89                	andi	a5,a5,2
    2040145a:	eb95                	bnez	a5,2040148e <_printf_i+0x2b8>
    2040145c:	47b2                	lw	a5,12(sp)
    2040145e:	4448                	lw	a0,12(s0)
    20401460:	0007871b          	sext.w	a4,a5
    20401464:	0005069b          	sext.w	a3,a0
    20401468:	00e6d363          	bge	a3,a4,2040146e <_printf_i+0x298>
    2040146c:	853e                	mv	a0,a5
    2040146e:	2501                	sext.w	a0,a0
    20401470:	bdd5                	j	20401364 <_printf_i+0x18e>
    20401472:	4685                	li	a3,1
    20401474:	8656                	mv	a2,s5
    20401476:	85ce                	mv	a1,s3
    20401478:	854a                	mv	a0,s2
    2040147a:	9a02                	jalr	s4
    2040147c:	ef6503e3          	beq	a0,s6,20401362 <_printf_i+0x18c>
    20401480:	2485                	addiw	s1,s1,1
    20401482:	445c                	lw	a5,12(s0)
    20401484:	4732                	lw	a4,12(sp)
    20401486:	9f99                	subw	a5,a5,a4
    20401488:	fef4c5e3          	blt	s1,a5,20401472 <_printf_i+0x29c>
    2040148c:	bfc1                	j	2040145c <_printf_i+0x286>
    2040148e:	4481                	li	s1,0
    20401490:	01940a93          	addi	s5,s0,25
    20401494:	5b7d                	li	s6,-1
    20401496:	b7f5                	j	20401482 <_printf_i+0x2ac>

0000000020401498 <_read_r>:
_read_r():
    20401498:	1141                	addi	sp,sp,-16
    2040149a:	e022                	sd	s0,0(sp)
    2040149c:	842a                	mv	s0,a0
    2040149e:	852e                	mv	a0,a1
    204014a0:	85b2                	mv	a1,a2
    204014a2:	8636                	mv	a2,a3
    204014a4:	9601a023          	sw	zero,-1696(gp) # 80000c30 <errno>
    204014a8:	e406                	sd	ra,8(sp)
    204014aa:	120000ef          	jal	ra,204015ca <_read>
    204014ae:	57fd                	li	a5,-1
    204014b0:	00f51763          	bne	a0,a5,204014be <_read_r+0x26>
    204014b4:	96018793          	addi	a5,gp,-1696 # 80000c30 <errno>
    204014b8:	439c                	lw	a5,0(a5)
    204014ba:	c391                	beqz	a5,204014be <_read_r+0x26>
    204014bc:	c01c                	sw	a5,0(s0)
    204014be:	60a2                	ld	ra,8(sp)
    204014c0:	6402                	ld	s0,0(sp)
    204014c2:	0141                	addi	sp,sp,16
    204014c4:	8082                	ret

00000000204014c6 <_fstat_r>:
_fstat_r():
    204014c6:	1141                	addi	sp,sp,-16
    204014c8:	e022                	sd	s0,0(sp)
    204014ca:	842a                	mv	s0,a0
    204014cc:	852e                	mv	a0,a1
    204014ce:	85b2                	mv	a1,a2
    204014d0:	9601a023          	sw	zero,-1696(gp) # 80000c30 <errno>
    204014d4:	e406                	sd	ra,8(sp)
    204014d6:	06c000ef          	jal	ra,20401542 <_fstat>
    204014da:	57fd                	li	a5,-1
    204014dc:	00f51763          	bne	a0,a5,204014ea <_fstat_r+0x24>
    204014e0:	96018793          	addi	a5,gp,-1696 # 80000c30 <errno>
    204014e4:	439c                	lw	a5,0(a5)
    204014e6:	c391                	beqz	a5,204014ea <_fstat_r+0x24>
    204014e8:	c01c                	sw	a5,0(s0)
    204014ea:	60a2                	ld	ra,8(sp)
    204014ec:	6402                	ld	s0,0(sp)
    204014ee:	0141                	addi	sp,sp,16
    204014f0:	8082                	ret

00000000204014f2 <_isatty_r>:
_isatty_r():
    204014f2:	1141                	addi	sp,sp,-16
    204014f4:	e022                	sd	s0,0(sp)
    204014f6:	842a                	mv	s0,a0
    204014f8:	852e                	mv	a0,a1
    204014fa:	9601a023          	sw	zero,-1696(gp) # 80000c30 <errno>
    204014fe:	e406                	sd	ra,8(sp)
    20401500:	06c000ef          	jal	ra,2040156c <_isatty>
    20401504:	57fd                	li	a5,-1
    20401506:	00f51763          	bne	a0,a5,20401514 <_isatty_r+0x22>
    2040150a:	96018793          	addi	a5,gp,-1696 # 80000c30 <errno>
    2040150e:	439c                	lw	a5,0(a5)
    20401510:	c391                	beqz	a5,20401514 <_isatty_r+0x22>
    20401512:	c01c                	sw	a5,0(s0)
    20401514:	60a2                	ld	ra,8(sp)
    20401516:	6402                	ld	s0,0(sp)
    20401518:	0141                	addi	sp,sp,16
    2040151a:	8082                	ret

000000002040151c <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
    2040151c:	1101                	addi	sp,sp,-32
    2040151e:	ec06                	sd	ra,24(sp)
    20401520:	e822                	sd	s0,16(sp)
    20401522:	1000                	addi	s0,sp,32
    20401524:	87aa                	mv	a5,a0
    20401526:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
    2040152a:	1b6000ef          	jal	ra,204016e0 <__errno>
    2040152e:	872a                	mv	a4,a0
    20401530:	05800793          	li	a5,88
    20401534:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
    20401536:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
    20401538:	853e                	mv	a0,a5
    2040153a:	60e2                	ld	ra,24(sp)
    2040153c:	6442                	ld	s0,16(sp)
    2040153e:	6105                	addi	sp,sp,32
    20401540:	8082                	ret

0000000020401542 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
    20401542:	1101                	addi	sp,sp,-32
    20401544:	ec06                	sd	ra,24(sp)
    20401546:	e822                	sd	s0,16(sp)
    20401548:	1000                	addi	s0,sp,32
    2040154a:	87aa                	mv	a5,a0
    2040154c:	feb43023          	sd	a1,-32(s0)
    20401550:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
    20401554:	18c000ef          	jal	ra,204016e0 <__errno>
    20401558:	872a                	mv	a4,a0
    2040155a:	fa800793          	li	a5,-88
    2040155e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
    20401560:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
    20401562:	853e                	mv	a0,a5
    20401564:	60e2                	ld	ra,24(sp)
    20401566:	6442                	ld	s0,16(sp)
    20401568:	6105                	addi	sp,sp,32
    2040156a:	8082                	ret

000000002040156c <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
    2040156c:	1101                	addi	sp,sp,-32
    2040156e:	ec22                	sd	s0,24(sp)
    20401570:	1000                	addi	s0,sp,32
    20401572:	87aa                	mv	a5,a0
    20401574:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
    20401578:	fec42783          	lw	a5,-20(s0)
    2040157c:	0007871b          	sext.w	a4,a5
    20401580:	4785                	li	a5,1
    20401582:	40f707b3          	sub	a5,a4,a5
    20401586:	0017b793          	seqz	a5,a5
    2040158a:	0ff7f793          	andi	a5,a5,255
    2040158e:	2781                	sext.w	a5,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
    20401590:	853e                	mv	a0,a5
    20401592:	6462                	ld	s0,24(sp)
    20401594:	6105                	addi	sp,sp,32
    20401596:	8082                	ret

0000000020401598 <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
    20401598:	1101                	addi	sp,sp,-32
    2040159a:	ec06                	sd	ra,24(sp)
    2040159c:	e822                	sd	s0,16(sp)
    2040159e:	1000                	addi	s0,sp,32
    204015a0:	87aa                	mv	a5,a0
    204015a2:	feb43023          	sd	a1,-32(s0)
    204015a6:	8732                	mv	a4,a2
    204015a8:	fef42623          	sw	a5,-20(s0)
    204015ac:	87ba                	mv	a5,a4
    204015ae:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
    204015b2:	12e000ef          	jal	ra,204016e0 <__errno>
    204015b6:	872a                	mv	a4,a0
    204015b8:	05800793          	li	a5,88
    204015bc:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
    204015be:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
    204015c0:	853e                	mv	a0,a5
    204015c2:	60e2                	ld	ra,24(sp)
    204015c4:	6442                	ld	s0,16(sp)
    204015c6:	6105                	addi	sp,sp,32
    204015c8:	8082                	ret

00000000204015ca <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
    204015ca:	7179                	addi	sp,sp,-48
    204015cc:	f406                	sd	ra,40(sp)
    204015ce:	f022                	sd	s0,32(sp)
    204015d0:	1800                	addi	s0,sp,48
    204015d2:	87aa                	mv	a5,a0
    204015d4:	feb43023          	sd	a1,-32(s0)
    204015d8:	fcc43c23          	sd	a2,-40(s0)
    204015dc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
    204015e0:	100000ef          	jal	ra,204016e0 <__errno>
    204015e4:	872a                	mv	a4,a0
    204015e6:	05800793          	li	a5,88
    204015ea:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
    204015ec:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
    204015ee:	853e                	mv	a0,a5
    204015f0:	70a2                	ld	ra,40(sp)
    204015f2:	7402                	ld	s0,32(sp)
    204015f4:	6145                	addi	sp,sp,48
    204015f6:	8082                	ret

00000000204015f8 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
    204015f8:	7179                	addi	sp,sp,-48
    204015fa:	f422                	sd	s0,40(sp)
    204015fc:	1800                	addi	s0,sp,48
    204015fe:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
    20401602:	81018793          	addi	a5,gp,-2032 # 80000ae0 <brk>
    20401606:	639c                	ld	a5,0(a5)
    20401608:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
    2040160c:	d6418713          	addi	a4,gp,-668 # 80001034 <_sp>
    20401610:	56418793          	addi	a5,gp,1380 # 80001834 <metal_segment_heap_target_end>
    20401614:	00f71463          	bne	a4,a5,2040161c <_sbrk+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
    20401618:	57fd                	li	a5,-1
    2040161a:	a82d                	j	20401654 <_sbrk+0x5c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
    2040161c:	81018793          	addi	a5,gp,-2032 # 80000ae0 <brk>
    20401620:	6398                	ld	a4,0(a5)
    20401622:	fd843783          	ld	a5,-40(s0)
    20401626:	973e                	add	a4,a4,a5
    20401628:	56418793          	addi	a5,gp,1380 # 80001834 <metal_segment_heap_target_end>
    2040162c:	00f77e63          	bgeu	a4,a5,20401648 <_sbrk+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
    20401630:	81018793          	addi	a5,gp,-2032 # 80000ae0 <brk>
    20401634:	6398                	ld	a4,0(a5)
    20401636:	fd843783          	ld	a5,-40(s0)
    2040163a:	973e                	add	a4,a4,a5
    2040163c:	81018793          	addi	a5,gp,-2032 # 80000ae0 <brk>
    20401640:	e398                	sd	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
    20401642:	fe843783          	ld	a5,-24(s0)
    20401646:	a039                	j	20401654 <_sbrk+0x5c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
    20401648:	81018793          	addi	a5,gp,-2032 # 80000ae0 <brk>
    2040164c:	56418713          	addi	a4,gp,1380 # 80001834 <metal_segment_heap_target_end>
    20401650:	e398                	sd	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
    20401652:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
    20401654:	853e                	mv	a0,a5
    20401656:	7422                	ld	s0,40(sp)
    20401658:	6145                	addi	sp,sp,48
    2040165a:	8082                	ret

000000002040165c <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
    2040165c:	7139                	addi	sp,sp,-64
    2040165e:	fc06                	sd	ra,56(sp)
    20401660:	f822                	sd	s0,48(sp)
    20401662:	0080                	addi	s0,sp,64
    20401664:	87aa                	mv	a5,a0
    20401666:	fcb43823          	sd	a1,-48(s0)
    2040166a:	fcc43423          	sd	a2,-56(s0)
    2040166e:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
    20401672:	fdc42783          	lw	a5,-36(s0)
    20401676:	0007871b          	sext.w	a4,a5
    2040167a:	4785                	li	a5,1
    2040167c:	00f70a63          	beq	a4,a5,20401690 <_write+0x34>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
    20401680:	060000ef          	jal	ra,204016e0 <__errno>
    20401684:	872a                	mv	a4,a0
    20401686:	05800793          	li	a5,88
    2040168a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
    2040168c:	57fd                	li	a5,-1
    2040168e:	a83d                	j	204016cc <_write+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
    20401690:	fd043783          	ld	a5,-48(s0)
    20401694:	fef43023          	sd	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
    20401698:	fe043423          	sd	zero,-24(s0)
    2040169c:	a00d                	j	204016be <_write+0x62>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
    2040169e:	fe043703          	ld	a4,-32(s0)
    204016a2:	fe843783          	ld	a5,-24(s0)
    204016a6:	97ba                	add	a5,a5,a4
    204016a8:	0007c783          	lbu	a5,0(a5)
    204016ac:	2781                	sext.w	a5,a5
    204016ae:	853e                	mv	a0,a5
    204016b0:	25c000ef          	jal	ra,2040190c <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
    204016b4:	fe843783          	ld	a5,-24(s0)
    204016b8:	0785                	addi	a5,a5,1
    204016ba:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
    204016be:	fe843703          	ld	a4,-24(s0)
    204016c2:	fc843783          	ld	a5,-56(s0)
    204016c6:	fcf76ce3          	bltu	a4,a5,2040169e <_write+0x42>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
    204016ca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
    204016cc:	853e                	mv	a0,a5
    204016ce:	70e2                	ld	ra,56(sp)
    204016d0:	7442                	ld	s0,48(sp)
    204016d2:	6121                	addi	sp,sp,64
    204016d4:	8082                	ret

00000000204016d6 <atexit>:
atexit():
    204016d6:	85aa                	mv	a1,a0
    204016d8:	4681                	li	a3,0
    204016da:	4601                	li	a2,0
    204016dc:	4501                	li	a0,0
    204016de:	a8f9                	j	204017bc <__register_exitproc>

00000000204016e0 <__errno>:
__errno():
    204016e0:	5fbff797          	auipc	a5,0x5fbff
    204016e4:	3f078793          	addi	a5,a5,1008 # 80000ad0 <_impure_ptr>
    204016e8:	6388                	ld	a0,0(a5)
    204016ea:	8082                	ret

00000000204016ec <exit>:
exit():
    204016ec:	1141                	addi	sp,sp,-16
    204016ee:	e022                	sd	s0,0(sp)
    204016f0:	e406                	sd	ra,8(sp)
    204016f2:	00000797          	auipc	a5,0x0
    204016f6:	15478793          	addi	a5,a5,340 # 20401846 <__call_exitprocs>
    204016fa:	842a                	mv	s0,a0
    204016fc:	c781                	beqz	a5,20401704 <exit+0x18>
    204016fe:	4581                	li	a1,0
    20401700:	146000ef          	jal	ra,20401846 <__call_exitprocs>
    20401704:	5fbff797          	auipc	a5,0x5fbff
    20401708:	3d478793          	addi	a5,a5,980 # 80000ad8 <_global_impure_ptr>
    2040170c:	6388                	ld	a0,0(a5)
    2040170e:	653c                	ld	a5,72(a0)
    20401710:	c391                	beqz	a5,20401714 <exit+0x28>
    20401712:	9782                	jalr	a5
    20401714:	8522                	mv	a0,s0
    20401716:	45c040ef          	jal	ra,20405b72 <_exit>

000000002040171a <__libc_fini_array>:
__libc_fini_array():
    2040171a:	1101                	addi	sp,sp,-32
    2040171c:	00005797          	auipc	a5,0x5
    20401720:	a9478793          	addi	a5,a5,-1388 # 204061b0 <metal_segment_data_source_start>
    20401724:	e822                	sd	s0,16(sp)
    20401726:	00005417          	auipc	s0,0x5
    2040172a:	a8a40413          	addi	s0,s0,-1398 # 204061b0 <metal_segment_data_source_start>
    2040172e:	8c1d                	sub	s0,s0,a5
    20401730:	e426                	sd	s1,8(sp)
    20401732:	ec06                	sd	ra,24(sp)
    20401734:	840d                	srai	s0,s0,0x3
    20401736:	84be                	mv	s1,a5
    20401738:	e411                	bnez	s0,20401744 <__libc_fini_array+0x2a>
    2040173a:	60e2                	ld	ra,24(sp)
    2040173c:	6442                	ld	s0,16(sp)
    2040173e:	64a2                	ld	s1,8(sp)
    20401740:	6105                	addi	sp,sp,32
    20401742:	8082                	ret
    20401744:	147d                	addi	s0,s0,-1
    20401746:	00341793          	slli	a5,s0,0x3
    2040174a:	97a6                	add	a5,a5,s1
    2040174c:	639c                	ld	a5,0(a5)
    2040174e:	9782                	jalr	a5
    20401750:	b7e5                	j	20401738 <__libc_fini_array+0x1e>

0000000020401752 <__libc_init_array>:
__libc_init_array():
    20401752:	1101                	addi	sp,sp,-32
    20401754:	00005797          	auipc	a5,0x5
    20401758:	a5478793          	addi	a5,a5,-1452 # 204061a8 <__init_array_start>
    2040175c:	e822                	sd	s0,16(sp)
    2040175e:	00005417          	auipc	s0,0x5
    20401762:	a4a40413          	addi	s0,s0,-1462 # 204061a8 <__init_array_start>
    20401766:	8c1d                	sub	s0,s0,a5
    20401768:	e426                	sd	s1,8(sp)
    2040176a:	e04a                	sd	s2,0(sp)
    2040176c:	ec06                	sd	ra,24(sp)
    2040176e:	840d                	srai	s0,s0,0x3
    20401770:	4481                	li	s1,0
    20401772:	893e                	mv	s2,a5
    20401774:	02849663          	bne	s1,s0,204017a0 <__libc_init_array+0x4e>
    20401778:	00005797          	auipc	a5,0x5
    2040177c:	a3078793          	addi	a5,a5,-1488 # 204061a8 <__init_array_start>
    20401780:	00005417          	auipc	s0,0x5
    20401784:	a3040413          	addi	s0,s0,-1488 # 204061b0 <metal_segment_data_source_start>
    20401788:	8c1d                	sub	s0,s0,a5
    2040178a:	840d                	srai	s0,s0,0x3
    2040178c:	4481                	li	s1,0
    2040178e:	893e                	mv	s2,a5
    20401790:	00849f63          	bne	s1,s0,204017ae <__libc_init_array+0x5c>
    20401794:	60e2                	ld	ra,24(sp)
    20401796:	6442                	ld	s0,16(sp)
    20401798:	64a2                	ld	s1,8(sp)
    2040179a:	6902                	ld	s2,0(sp)
    2040179c:	6105                	addi	sp,sp,32
    2040179e:	8082                	ret
    204017a0:	00349793          	slli	a5,s1,0x3
    204017a4:	97ca                	add	a5,a5,s2
    204017a6:	639c                	ld	a5,0(a5)
    204017a8:	0485                	addi	s1,s1,1
    204017aa:	9782                	jalr	a5
    204017ac:	b7e1                	j	20401774 <__libc_init_array+0x22>
    204017ae:	00349793          	slli	a5,s1,0x3
    204017b2:	97ca                	add	a5,a5,s2
    204017b4:	639c                	ld	a5,0(a5)
    204017b6:	0485                	addi	s1,s1,1
    204017b8:	9782                	jalr	a5
    204017ba:	bfd9                	j	20401790 <__libc_init_array+0x3e>

00000000204017bc <__register_exitproc>:
__register_exitproc():
    204017bc:	5fbff797          	auipc	a5,0x5fbff
    204017c0:	35478793          	addi	a5,a5,852 # 80000b10 <_global_atexit>
    204017c4:	639c                	ld	a5,0(a5)
    204017c6:	8e2a                	mv	t3,a0
    204017c8:	e39d                	bnez	a5,204017ee <__register_exitproc+0x32>
    204017ca:	5fbff717          	auipc	a4,0x5fbff
    204017ce:	34e70713          	addi	a4,a4,846 # 80000b18 <_global_atexit0>
    204017d2:	5fbff797          	auipc	a5,0x5fbff
    204017d6:	32e7bf23          	sd	a4,830(a5) # 80000b10 <_global_atexit>
    204017da:	dfbff517          	auipc	a0,0xdfbff
    204017de:	82650513          	addi	a0,a0,-2010 # 0 <__metal_boot_hart>
    204017e2:	87ba                	mv	a5,a4
    204017e4:	c509                	beqz	a0,204017ee <__register_exitproc+0x32>
    204017e6:	611c                	ld	a5,0(a0)
    204017e8:	94f1bc23          	sd	a5,-1704(gp) # 80000c28 <_global_atexit0+0x110>
    204017ec:	87ba                	mv	a5,a4
    204017ee:	4798                	lw	a4,8(a5)
    204017f0:	487d                	li	a6,31
    204017f2:	557d                	li	a0,-1
    204017f4:	04e84863          	blt	a6,a4,20401844 <__register_exitproc+0x88>
    204017f8:	020e0e63          	beqz	t3,20401834 <__register_exitproc+0x78>
    204017fc:	1107b803          	ld	a6,272(a5)
    20401800:	04080263          	beqz	a6,20401844 <__register_exitproc+0x88>
    20401804:	00371893          	slli	a7,a4,0x3
    20401808:	98c2                	add	a7,a7,a6
    2040180a:	00c8b023          	sd	a2,0(a7)
    2040180e:	20082303          	lw	t1,512(a6)
    20401812:	4605                	li	a2,1
    20401814:	00e6163b          	sllw	a2,a2,a4
    20401818:	00c36333          	or	t1,t1,a2
    2040181c:	20682023          	sw	t1,512(a6)
    20401820:	10d8b023          	sd	a3,256(a7)
    20401824:	4689                	li	a3,2
    20401826:	00de1763          	bne	t3,a3,20401834 <__register_exitproc+0x78>
    2040182a:	20482683          	lw	a3,516(a6)
    2040182e:	8e55                	or	a2,a2,a3
    20401830:	20c82223          	sw	a2,516(a6)
    20401834:	0017069b          	addiw	a3,a4,1
    20401838:	0709                	addi	a4,a4,2
    2040183a:	070e                	slli	a4,a4,0x3
    2040183c:	c794                	sw	a3,8(a5)
    2040183e:	97ba                	add	a5,a5,a4
    20401840:	e38c                	sd	a1,0(a5)
    20401842:	4501                	li	a0,0
    20401844:	8082                	ret

0000000020401846 <__call_exitprocs>:
__call_exitprocs():
    20401846:	715d                	addi	sp,sp,-80
    20401848:	f44e                	sd	s3,40(sp)
    2040184a:	f052                	sd	s4,32(sp)
    2040184c:	ec56                	sd	s5,24(sp)
    2040184e:	e85a                	sd	s6,16(sp)
    20401850:	e486                	sd	ra,72(sp)
    20401852:	e0a2                	sd	s0,64(sp)
    20401854:	fc26                	sd	s1,56(sp)
    20401856:	f84a                	sd	s2,48(sp)
    20401858:	e45e                	sd	s7,8(sp)
    2040185a:	8aaa                	mv	s5,a0
    2040185c:	89ae                	mv	s3,a1
    2040185e:	5fbffa17          	auipc	s4,0x5fbff
    20401862:	2b2a0a13          	addi	s4,s4,690 # 80000b10 <_global_atexit>
    20401866:	4b05                	li	s6,1
    20401868:	000a3403          	ld	s0,0(s4)
    2040186c:	c809                	beqz	s0,2040187e <__call_exitprocs+0x38>
    2040186e:	4404                	lw	s1,8(s0)
    20401870:	11043903          	ld	s2,272(s0)
    20401874:	34fd                	addiw	s1,s1,-1
    20401876:	0004879b          	sext.w	a5,s1
    2040187a:	0007dd63          	bgez	a5,20401894 <__call_exitprocs+0x4e>
    2040187e:	60a6                	ld	ra,72(sp)
    20401880:	6406                	ld	s0,64(sp)
    20401882:	74e2                	ld	s1,56(sp)
    20401884:	7942                	ld	s2,48(sp)
    20401886:	79a2                	ld	s3,40(sp)
    20401888:	7a02                	ld	s4,32(sp)
    2040188a:	6ae2                	ld	s5,24(sp)
    2040188c:	6b42                	ld	s6,16(sp)
    2040188e:	6ba2                	ld	s7,8(sp)
    20401890:	6161                	addi	sp,sp,80
    20401892:	8082                	ret
    20401894:	00098d63          	beqz	s3,204018ae <__call_exitprocs+0x68>
    20401898:	00091463          	bnez	s2,204018a0 <__call_exitprocs+0x5a>
    2040189c:	14fd                	addi	s1,s1,-1
    2040189e:	bfe1                	j	20401876 <__call_exitprocs+0x30>
    204018a0:	00349713          	slli	a4,s1,0x3
    204018a4:	974a                	add	a4,a4,s2
    204018a6:	10073703          	ld	a4,256(a4)
    204018aa:	ff3719e3          	bne	a4,s3,2040189c <__call_exitprocs+0x56>
    204018ae:	4418                	lw	a4,8(s0)
    204018b0:	00349613          	slli	a2,s1,0x3
    204018b4:	00c405b3          	add	a1,s0,a2
    204018b8:	377d                	addiw	a4,a4,-1
    204018ba:	6994                	ld	a3,16(a1)
    204018bc:	02f71863          	bne	a4,a5,204018ec <__call_exitprocs+0xa6>
    204018c0:	c41c                	sw	a5,8(s0)
    204018c2:	dee9                	beqz	a3,2040189c <__call_exitprocs+0x56>
    204018c4:	00842b83          	lw	s7,8(s0)
    204018c8:	00090963          	beqz	s2,204018da <__call_exitprocs+0x94>
    204018cc:	20092703          	lw	a4,512(s2)
    204018d0:	00fb17bb          	sllw	a5,s6,a5
    204018d4:	8f7d                	and	a4,a4,a5
    204018d6:	2701                	sext.w	a4,a4
    204018d8:	ef09                	bnez	a4,204018f2 <__call_exitprocs+0xac>
    204018da:	9682                	jalr	a3
    204018dc:	4418                	lw	a4,8(s0)
    204018de:	000a3783          	ld	a5,0(s4)
    204018e2:	f97713e3          	bne	a4,s7,20401868 <__call_exitprocs+0x22>
    204018e6:	faf40be3          	beq	s0,a5,2040189c <__call_exitprocs+0x56>
    204018ea:	bfbd                	j	20401868 <__call_exitprocs+0x22>
    204018ec:	0005b823          	sd	zero,16(a1)
    204018f0:	bfc9                	j	204018c2 <__call_exitprocs+0x7c>
    204018f2:	20492703          	lw	a4,516(s2)
    204018f6:	964a                	add	a2,a2,s2
    204018f8:	620c                	ld	a1,0(a2)
    204018fa:	8ff9                	and	a5,a5,a4
    204018fc:	2781                	sext.w	a5,a5
    204018fe:	e781                	bnez	a5,20401906 <__call_exitprocs+0xc0>
    20401900:	8556                	mv	a0,s5
    20401902:	9682                	jalr	a3
    20401904:	bfe1                	j	204018dc <__call_exitprocs+0x96>
    20401906:	852e                	mv	a0,a1
    20401908:	9682                	jalr	a3
    2040190a:	bfc9                	j	204018dc <__call_exitprocs+0x96>

000000002040190c <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
    2040190c:	1101                	addi	sp,sp,-32
    2040190e:	ec06                	sd	ra,24(sp)
    20401910:	e822                	sd	s0,16(sp)
    20401912:	1000                	addi	s0,sp,32
    20401914:	87aa                	mv	a5,a0
    20401916:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
    2040191a:	fec42783          	lw	a5,-20(s0)
    2040191e:	0007871b          	sext.w	a4,a5
    20401922:	47a9                	li	a5,10
    20401924:	00f71563          	bne	a4,a5,2040192e <metal_tty_putc+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
    20401928:	4535                	li	a0,13
    2040192a:	01a000ef          	jal	ra,20401944 <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
    2040192e:	fec42783          	lw	a5,-20(s0)
    20401932:	853e                	mv	a0,a5
    20401934:	010000ef          	jal	ra,20401944 <metal_tty_putc_raw>
    20401938:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
    2040193a:	853e                	mv	a0,a5
    2040193c:	60e2                	ld	ra,24(sp)
    2040193e:	6442                	ld	s0,16(sp)
    20401940:	6105                	addi	sp,sp,32
    20401942:	8082                	ret

0000000020401944 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
    20401944:	1101                	addi	sp,sp,-32
    20401946:	ec06                	sd	ra,24(sp)
    20401948:	e822                	sd	s0,16(sp)
    2040194a:	1000                	addi	s0,sp,32
    2040194c:	87aa                	mv	a5,a0
    2040194e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
    20401952:	fec42783          	lw	a5,-20(s0)
    20401956:	85be                	mv	a1,a5
    20401958:	5fbff517          	auipc	a0,0x5fbff
    2040195c:	13850513          	addi	a0,a0,312 # 80000a90 <__metal_dt_serial_10013000>
    20401960:	064000ef          	jal	ra,204019c4 <metal_uart_putc>
    20401964:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
    20401966:	853e                	mv	a0,a5
    20401968:	60e2                	ld	ra,24(sp)
    2040196a:	6442                	ld	s0,16(sp)
    2040196c:	6105                	addi	sp,sp,32
    2040196e:	8082                	ret

0000000020401970 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
    20401970:	1141                	addi	sp,sp,-16
    20401972:	e406                	sd	ra,8(sp)
    20401974:	e022                	sd	s0,0(sp)
    20401976:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
    20401978:	67f1                	lui	a5,0x1c
    2040197a:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
    2040197e:	5fbff517          	auipc	a0,0x5fbff
    20401982:	11250513          	addi	a0,a0,274 # 80000a90 <__metal_dt_serial_10013000>
    20401986:	00e000ef          	jal	ra,20401994 <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
    2040198a:	0001                	nop
    2040198c:	60a2                	ld	ra,8(sp)
    2040198e:	6402                	ld	s0,0(sp)
    20401990:	0141                	addi	sp,sp,16
    20401992:	8082                	ret

0000000020401994 <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
    20401994:	1101                	addi	sp,sp,-32
    20401996:	ec06                	sd	ra,24(sp)
    20401998:	e822                	sd	s0,16(sp)
    2040199a:	1000                	addi	s0,sp,32
    2040199c:	fea43423          	sd	a0,-24(s0)
    204019a0:	87ae                	mv	a5,a1
    204019a2:	fef42223          	sw	a5,-28(s0)
    204019a6:	fe843783          	ld	a5,-24(s0)
    204019aa:	639c                	ld	a5,0(a5)
    204019ac:	6398                	ld	a4,0(a5)
    204019ae:	fe442783          	lw	a5,-28(s0)
    204019b2:	85be                	mv	a1,a5
    204019b4:	fe843503          	ld	a0,-24(s0)
    204019b8:	9702                	jalr	a4
    204019ba:	0001                	nop
    204019bc:	60e2                	ld	ra,24(sp)
    204019be:	6442                	ld	s0,16(sp)
    204019c0:	6105                	addi	sp,sp,32
    204019c2:	8082                	ret

00000000204019c4 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
    204019c4:	1101                	addi	sp,sp,-32
    204019c6:	ec06                	sd	ra,24(sp)
    204019c8:	e822                	sd	s0,16(sp)
    204019ca:	1000                	addi	s0,sp,32
    204019cc:	fea43423          	sd	a0,-24(s0)
    204019d0:	87ae                	mv	a5,a1
    204019d2:	fef42223          	sw	a5,-28(s0)
    204019d6:	fe843783          	ld	a5,-24(s0)
    204019da:	639c                	ld	a5,0(a5)
    204019dc:	6798                	ld	a4,8(a5)
    204019de:	fe442783          	lw	a5,-28(s0)
    204019e2:	85be                	mv	a1,a5
    204019e4:	fe843503          	ld	a0,-24(s0)
    204019e8:	9702                	jalr	a4
    204019ea:	87aa                	mv	a5,a0
    204019ec:	853e                	mv	a0,a5
    204019ee:	60e2                	ld	ra,24(sp)
    204019f0:	6442                	ld	s0,16(sp)
    204019f2:	6105                	addi	sp,sp,32
    204019f4:	8082                	ret

00000000204019f6 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
    204019f6:	1101                	addi	sp,sp,-32
    204019f8:	ec06                	sd	ra,24(sp)
    204019fa:	e822                	sd	s0,16(sp)
    204019fc:	1000                	addi	s0,sp,32
    204019fe:	fea43423          	sd	a0,-24(s0)
    20401a02:	87ae                	mv	a5,a1
    20401a04:	fef42223          	sw	a5,-28(s0)
    20401a08:	fe843783          	ld	a5,-24(s0)
    20401a0c:	639c                	ld	a5,0(a5)
    20401a0e:	7798                	ld	a4,40(a5)
    20401a10:	fe442783          	lw	a5,-28(s0)
    20401a14:	85be                	mv	a1,a5
    20401a16:	fe843503          	ld	a0,-24(s0)
    20401a1a:	9702                	jalr	a4
    20401a1c:	87aa                	mv	a5,a0
    20401a1e:	853e                	mv	a0,a5
    20401a20:	60e2                	ld	ra,24(sp)
    20401a22:	6442                	ld	s0,16(sp)
    20401a24:	6105                	addi	sp,sp,32
    20401a26:	8082                	ret

0000000020401a28 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
    20401a28:	1101                	addi	sp,sp,-32
    20401a2a:	ec22                	sd	s0,24(sp)
    20401a2c:	1000                	addi	s0,sp,32
    20401a2e:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
    20401a32:	fe843703          	ld	a4,-24(s0)
    20401a36:	5fbfe797          	auipc	a5,0x5fbfe
    20401a3a:	69278793          	addi	a5,a5,1682 # 800000c8 <__metal_dt_clint_2000000>
    20401a3e:	00f71563          	bne	a4,a5,20401a48 <__metal_driver_sifive_clint0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
    20401a42:	020007b7          	lui	a5,0x2000
    20401a46:	a011                	j	20401a4a <__metal_driver_sifive_clint0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
    20401a48:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:143
	}
}
    20401a4a:	853e                	mv	a0,a5
    20401a4c:	6462                	ld	s0,24(sp)
    20401a4e:	6105                	addi	sp,sp,32
    20401a50:	8082                	ret

0000000020401a52 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
    20401a52:	1101                	addi	sp,sp,-32
    20401a54:	ec22                	sd	s0,24(sp)
    20401a56:	1000                	addi	s0,sp,32
    20401a58:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
    20401a5c:	fe843703          	ld	a4,-24(s0)
    20401a60:	5fbfe797          	auipc	a5,0x5fbfe
    20401a64:	66878793          	addi	a5,a5,1640 # 800000c8 <__metal_dt_clint_2000000>
    20401a68:	00f71463          	bne	a4,a5,20401a70 <__metal_driver_sifive_clint0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
    20401a6c:	4789                	li	a5,2
    20401a6e:	a011                	j	20401a72 <__metal_driver_sifive_clint0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
    20401a70:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:163
	}
}
    20401a72:	853e                	mv	a0,a5
    20401a74:	6462                	ld	s0,24(sp)
    20401a76:	6105                	addi	sp,sp,32
    20401a78:	8082                	ret

0000000020401a7a <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
    20401a7a:	1101                	addi	sp,sp,-32
    20401a7c:	ec22                	sd	s0,24(sp)
    20401a7e:	1000                	addi	s0,sp,32
    20401a80:	fea43423          	sd	a0,-24(s0)
    20401a84:	87ae                	mv	a5,a1
    20401a86:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:167
	if (idx == 0) {
    20401a8a:	fe442783          	lw	a5,-28(s0)
    20401a8e:	2781                	sext.w	a5,a5
    20401a90:	e791                	bnez	a5,20401a9c <__metal_driver_sifive_clint0_interrupt_parents+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
    20401a92:	5fbfe797          	auipc	a5,0x5fbfe
    20401a96:	64678793          	addi	a5,a5,1606 # 800000d8 <__metal_dt_cpu_0_interrupt_controller>
    20401a9a:	a831                	j	20401ab6 <__metal_driver_sifive_clint0_interrupt_parents+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
    20401a9c:	fe442783          	lw	a5,-28(s0)
    20401aa0:	0007871b          	sext.w	a4,a5
    20401aa4:	4785                	li	a5,1
    20401aa6:	00f71763          	bne	a4,a5,20401ab4 <__metal_driver_sifive_clint0_interrupt_parents+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
    20401aaa:	5fbfe797          	auipc	a5,0x5fbfe
    20401aae:	62e78793          	addi	a5,a5,1582 # 800000d8 <__metal_dt_cpu_0_interrupt_controller>
    20401ab2:	a011                	j	20401ab6 <__metal_driver_sifive_clint0_interrupt_parents+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
    20401ab4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:176
	}
}
    20401ab6:	853e                	mv	a0,a5
    20401ab8:	6462                	ld	s0,24(sp)
    20401aba:	6105                	addi	sp,sp,32
    20401abc:	8082                	ret

0000000020401abe <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
    20401abe:	1101                	addi	sp,sp,-32
    20401ac0:	ec22                	sd	s0,24(sp)
    20401ac2:	1000                	addi	s0,sp,32
    20401ac4:	fea43423          	sd	a0,-24(s0)
    20401ac8:	87ae                	mv	a5,a1
    20401aca:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:180
	if (idx == 0) {
    20401ace:	fe442783          	lw	a5,-28(s0)
    20401ad2:	2781                	sext.w	a5,a5
    20401ad4:	e399                	bnez	a5,20401ada <__metal_driver_sifive_clint0_interrupt_lines+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:181
		return 3;
    20401ad6:	478d                	li	a5,3
    20401ad8:	a819                	j	20401aee <__metal_driver_sifive_clint0_interrupt_lines+0x30>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
    20401ada:	fe442783          	lw	a5,-28(s0)
    20401ade:	0007871b          	sext.w	a4,a5
    20401ae2:	4785                	li	a5,1
    20401ae4:	00f71463          	bne	a4,a5,20401aec <__metal_driver_sifive_clint0_interrupt_lines+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:184
		return 7;
    20401ae8:	479d                	li	a5,7
    20401aea:	a011                	j	20401aee <__metal_driver_sifive_clint0_interrupt_lines+0x30>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
    20401aec:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:189
	}
}
    20401aee:	853e                	mv	a0,a5
    20401af0:	6462                	ld	s0,24(sp)
    20401af2:	6105                	addi	sp,sp,32
    20401af4:	8082                	ret

0000000020401af6 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
    20401af6:	7179                	addi	sp,sp,-48
    20401af8:	f406                	sd	ra,40(sp)
    20401afa:	f022                	sd	s0,32(sp)
    20401afc:	1800                	addi	s0,sp,48
    20401afe:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
    20401b02:	fd843783          	ld	a5,-40(s0)
    20401b06:	853e                	mv	a0,a5
    20401b08:	f21ff0ef          	jal	ra,20401a28 <__metal_driver_sifive_clint0_control_base>
    20401b0c:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
    20401b10:	fe843703          	ld	a4,-24(s0)
    20401b14:	67b1                	lui	a5,0xc
    20401b16:	17f1                	addi	a5,a5,-4
    20401b18:	97ba                	add	a5,a5,a4
    20401b1a:	439c                	lw	a5,0(a5)
    20401b1c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
    20401b20:	fe843703          	ld	a4,-24(s0)
    20401b24:	67b1                	lui	a5,0xc
    20401b26:	17e1                	addi	a5,a5,-8
    20401b28:	97ba                	add	a5,a5,a4
    20401b2a:	439c                	lw	a5,0(a5)
    20401b2c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
    20401b30:	fe843703          	ld	a4,-24(s0)
    20401b34:	67b1                	lui	a5,0xc
    20401b36:	17f1                	addi	a5,a5,-4
    20401b38:	97ba                	add	a5,a5,a4
    20401b3a:	439c                	lw	a5,0(a5)
    20401b3c:	0007871b          	sext.w	a4,a5
    20401b40:	fe442783          	lw	a5,-28(s0)
    20401b44:	2781                	sext.w	a5,a5
    20401b46:	fce795e3          	bne	a5,a4,20401b10 <__metal_clint0_mtime_get+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
    20401b4a:	fe446783          	lwu	a5,-28(s0)
    20401b4e:	02079713          	slli	a4,a5,0x20
    20401b52:	fe046783          	lwu	a5,-32(s0)
    20401b56:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
    20401b58:	853e                	mv	a0,a5
    20401b5a:	70a2                	ld	ra,40(sp)
    20401b5c:	7402                	ld	s0,32(sp)
    20401b5e:	6145                	addi	sp,sp,48
    20401b60:	8082                	ret

0000000020401b62 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
    20401b62:	7139                	addi	sp,sp,-64
    20401b64:	fc06                	sd	ra,56(sp)
    20401b66:	f822                	sd	s0,48(sp)
    20401b68:	0080                	addi	s0,sp,64
    20401b6a:	fca43c23          	sd	a0,-40(s0)
    20401b6e:	87ae                	mv	a5,a1
    20401b70:	fcc43423          	sd	a2,-56(s0)
    20401b74:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
    20401b78:	fd843783          	ld	a5,-40(s0)
    20401b7c:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
    20401b80:	fe843783          	ld	a5,-24(s0)
    20401b84:	853e                	mv	a0,a5
    20401b86:	ea3ff0ef          	jal	ra,20401a28 <__metal_driver_sifive_clint0_control_base>
    20401b8a:	fea43023          	sd	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
    20401b8e:	fd442783          	lw	a5,-44(s0)
    20401b92:	0037979b          	slliw	a5,a5,0x3
    20401b96:	2781                	sext.w	a5,a5
    20401b98:	873e                	mv	a4,a5
    20401b9a:	fe043783          	ld	a5,-32(s0)
    20401b9e:	973e                	add	a4,a4,a5
    20401ba0:	6791                	lui	a5,0x4
    20401ba2:	0791                	addi	a5,a5,4
    20401ba4:	97ba                	add	a5,a5,a4
    20401ba6:	873e                	mv	a4,a5
    20401ba8:	57fd                	li	a5,-1
    20401baa:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
    20401bac:	fd442783          	lw	a5,-44(s0)
    20401bb0:	0037979b          	slliw	a5,a5,0x3
    20401bb4:	2781                	sext.w	a5,a5
    20401bb6:	873e                	mv	a4,a5
    20401bb8:	fe043783          	ld	a5,-32(s0)
    20401bbc:	973e                	add	a4,a4,a5
    20401bbe:	6791                	lui	a5,0x4
    20401bc0:	97ba                	add	a5,a5,a4
    20401bc2:	873e                	mv	a4,a5
    20401bc4:	fc843783          	ld	a5,-56(s0)
    20401bc8:	2781                	sext.w	a5,a5
    20401bca:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
    20401bcc:	fc843783          	ld	a5,-56(s0)
    20401bd0:	0207d693          	srli	a3,a5,0x20
    20401bd4:	fd442783          	lw	a5,-44(s0)
    20401bd8:	0037979b          	slliw	a5,a5,0x3
    20401bdc:	2781                	sext.w	a5,a5
    20401bde:	873e                	mv	a4,a5
    20401be0:	fe043783          	ld	a5,-32(s0)
    20401be4:	973e                	add	a4,a4,a5
    20401be6:	6791                	lui	a5,0x4
    20401be8:	0791                	addi	a5,a5,4
    20401bea:	97ba                	add	a5,a5,a4
    20401bec:	873e                	mv	a4,a5
    20401bee:	0006879b          	sext.w	a5,a3
    20401bf2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
    20401bf4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
    20401bf6:	853e                	mv	a0,a5
    20401bf8:	70e2                	ld	ra,56(sp)
    20401bfa:	7442                	ld	s0,48(sp)
    20401bfc:	6121                	addi	sp,sp,64
    20401bfe:	8082                	ret

0000000020401c00 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
    20401c00:	1101                	addi	sp,sp,-32
    20401c02:	ec06                	sd	ra,24(sp)
    20401c04:	e822                	sd	s0,16(sp)
    20401c06:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
    20401c08:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
    20401c0c:	f14027f3          	csrr	a5,mhartid
    20401c10:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
    20401c14:	fec42783          	lw	a5,-20(s0)
    20401c18:	853e                	mv	a0,a5
    20401c1a:	4d5030ef          	jal	ra,204058ee <metal_cpu_get>
    20401c1e:	fea43023          	sd	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
    20401c22:	fe043503          	ld	a0,-32(s0)
    20401c26:	4a3030ef          	jal	ra,204058c8 <metal_cpu_interrupt_controller>
    20401c2a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
    20401c2c:	853e                	mv	a0,a5
    20401c2e:	60e2                	ld	ra,24(sp)
    20401c30:	6442                	ld	s0,16(sp)
    20401c32:	6105                	addi	sp,sp,32
    20401c34:	8082                	ret

0000000020401c36 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
    20401c36:	7139                	addi	sp,sp,-64
    20401c38:	fc06                	sd	ra,56(sp)
    20401c3a:	f822                	sd	s0,48(sp)
    20401c3c:	0080                	addi	s0,sp,64
    20401c3e:	fca43423          	sd	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
    20401c42:	fc843503          	ld	a0,-56(s0)
    20401c46:	e0dff0ef          	jal	ra,20401a52 <__metal_driver_sifive_clint0_num_interrupts>
    20401c4a:	87aa                	mv	a5,a0
    20401c4c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
    20401c50:	fc843783          	ld	a5,-56(s0)
    20401c54:	fef43023          	sd	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
    20401c58:	fe043783          	ld	a5,-32(s0)
    20401c5c:	479c                	lw	a5,8(a5)
    20401c5e:	e7ad                	bnez	a5,20401cc8 <__metal_driver_riscv_clint0_init+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
    20401c60:	fe042623          	sw	zero,-20(s0)
    20401c64:	a0b1                	j	20401cb0 <__metal_driver_riscv_clint0_init+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    20401c66:	fec42783          	lw	a5,-20(s0)
    20401c6a:	85be                	mv	a1,a5
    20401c6c:	fc843503          	ld	a0,-56(s0)
    20401c70:	e0bff0ef          	jal	ra,20401a7a <__metal_driver_sifive_clint0_interrupt_parents>
    20401c74:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    20401c78:	fec42783          	lw	a5,-20(s0)
    20401c7c:	85be                	mv	a1,a5
    20401c7e:	fc843503          	ld	a0,-56(s0)
    20401c82:	e3dff0ef          	jal	ra,20401abe <__metal_driver_sifive_clint0_interrupt_lines>
    20401c86:	87aa                	mv	a5,a0
    20401c88:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
    20401c8c:	fd843783          	ld	a5,-40(s0)
    20401c90:	639c                	ld	a5,0(a5)
    20401c92:	7f98                	ld	a4,56(a5)
    20401c94:	fd442783          	lw	a5,-44(s0)
    20401c98:	fc843683          	ld	a3,-56(s0)
    20401c9c:	4601                	li	a2,0
    20401c9e:	85be                	mv	a1,a5
    20401ca0:	fd843503          	ld	a0,-40(s0)
    20401ca4:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
    20401ca6:	fec42783          	lw	a5,-20(s0)
    20401caa:	2785                	addiw	a5,a5,1
    20401cac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
    20401cb0:	fec42703          	lw	a4,-20(s0)
    20401cb4:	fe842783          	lw	a5,-24(s0)
    20401cb8:	2701                	sext.w	a4,a4
    20401cba:	2781                	sext.w	a5,a5
    20401cbc:	faf745e3          	blt	a4,a5,20401c66 <__metal_driver_riscv_clint0_init+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
    20401cc0:	fe043783          	ld	a5,-32(s0)
    20401cc4:	4705                	li	a4,1
    20401cc6:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
    20401cc8:	0001                	nop
    20401cca:	70e2                	ld	ra,56(sp)
    20401ccc:	7442                	ld	s0,48(sp)
    20401cce:	6121                	addi	sp,sp,64
    20401cd0:	8082                	ret

0000000020401cd2 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
    20401cd2:	711d                	addi	sp,sp,-96
    20401cd4:	ec86                	sd	ra,88(sp)
    20401cd6:	e8a2                	sd	s0,80(sp)
    20401cd8:	1080                	addi	s0,sp,96
    20401cda:	faa43c23          	sd	a0,-72(s0)
    20401cde:	87ae                	mv	a5,a1
    20401ce0:	fac43423          	sd	a2,-88(s0)
    20401ce4:	fad43023          	sd	a3,-96(s0)
    20401ce8:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
    20401cec:	57fd                	li	a5,-1
    20401cee:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
    20401cf2:	225010ef          	jal	ra,20403716 <__metal_controller_interrupt_vector_mode>
    20401cf6:	87aa                	mv	a5,a0
    20401cf8:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
    20401cfc:	fe043023          	sd	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
    20401d00:	f01ff0ef          	jal	ra,20401c00 <_get_cpu_intc>
    20401d04:	fca43823          	sd	a0,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
    20401d08:	fb843503          	ld	a0,-72(s0)
    20401d0c:	d47ff0ef          	jal	ra,20401a52 <__metal_driver_sifive_clint0_num_interrupts>
    20401d10:	87aa                	mv	a5,a0
    20401d12:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
    20401d16:	fd842783          	lw	a5,-40(s0)
    20401d1a:	0007871b          	sext.w	a4,a5
    20401d1e:	4785                	li	a5,1
    20401d20:	00f70963          	beq	a4,a5,20401d32 <__metal_driver_riscv_clint0_register+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
    20401d24:	fd842783          	lw	a5,-40(s0)
    20401d28:	2781                	sext.w	a5,a5
    20401d2a:	c781                	beqz	a5,20401d32 <__metal_driver_riscv_clint0_register+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
    20401d2c:	fec42783          	lw	a5,-20(s0)
    20401d30:	a861                	j	20401dc8 <__metal_driver_riscv_clint0_register+0xf6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
    20401d32:	fc042e23          	sw	zero,-36(s0)
    20401d36:	a889                	j	20401d88 <__metal_driver_riscv_clint0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    20401d38:	fdc42783          	lw	a5,-36(s0)
    20401d3c:	85be                	mv	a1,a5
    20401d3e:	fb843503          	ld	a0,-72(s0)
    20401d42:	d7dff0ef          	jal	ra,20401abe <__metal_driver_sifive_clint0_interrupt_lines>
    20401d46:	87aa                	mv	a5,a0
    20401d48:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    20401d4c:	fdc42783          	lw	a5,-36(s0)
    20401d50:	85be                	mv	a1,a5
    20401d52:	fb843503          	ld	a0,-72(s0)
    20401d56:	d25ff0ef          	jal	ra,20401a7a <__metal_driver_sifive_clint0_interrupt_parents>
    20401d5a:	fea43023          	sd	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
    20401d5e:	fd043703          	ld	a4,-48(s0)
    20401d62:	fe043783          	ld	a5,-32(s0)
    20401d66:	00f71a63          	bne	a4,a5,20401d7a <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
    20401d6a:	fb442703          	lw	a4,-76(s0)
    20401d6e:	fc842783          	lw	a5,-56(s0)
    20401d72:	2701                	sext.w	a4,a4
    20401d74:	2781                	sext.w	a5,a5
    20401d76:	02f70263          	beq	a4,a5,20401d9a <__metal_driver_riscv_clint0_register+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
    20401d7a:	fe043023          	sd	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
    20401d7e:	fdc42783          	lw	a5,-36(s0)
    20401d82:	2785                	addiw	a5,a5,1
    20401d84:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
    20401d88:	fdc42703          	lw	a4,-36(s0)
    20401d8c:	fcc42783          	lw	a5,-52(s0)
    20401d90:	2701                	sext.w	a4,a4
    20401d92:	2781                	sext.w	a5,a5
    20401d94:	faf742e3          	blt	a4,a5,20401d38 <__metal_driver_riscv_clint0_register+0x66>
    20401d98:	a011                	j	20401d9c <__metal_driver_riscv_clint0_register+0xca>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
    20401d9a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
    20401d9c:	fe043783          	ld	a5,-32(s0)
    20401da0:	c395                	beqz	a5,20401dc4 <__metal_driver_riscv_clint0_register+0xf2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
    20401da2:	fe043783          	ld	a5,-32(s0)
    20401da6:	639c                	ld	a5,0(a5)
    20401da8:	7f98                	ld	a4,56(a5)
    20401daa:	fb442783          	lw	a5,-76(s0)
    20401dae:	fa043683          	ld	a3,-96(s0)
    20401db2:	fa843603          	ld	a2,-88(s0)
    20401db6:	85be                	mv	a1,a5
    20401db8:	fe043503          	ld	a0,-32(s0)
    20401dbc:	9702                	jalr	a4
    20401dbe:	87aa                	mv	a5,a0
    20401dc0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
    20401dc4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
    20401dc8:	853e                	mv	a0,a5
    20401dca:	60e6                	ld	ra,88(sp)
    20401dcc:	6446                	ld	s0,80(sp)
    20401dce:	6125                	addi	sp,sp,96
    20401dd0:	8082                	ret

0000000020401dd2 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
    20401dd2:	7139                	addi	sp,sp,-64
    20401dd4:	fc22                	sd	s0,56(sp)
    20401dd6:	0080                	addi	s0,sp,64
    20401dd8:	fca43c23          	sd	a0,-40(s0)
    20401ddc:	87ae                	mv	a5,a1
    20401dde:	fcc43423          	sd	a2,-56(s0)
    20401de2:	fcd43023          	sd	a3,-64(s0)
    20401de6:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
    20401dea:	57fd                	li	a5,-1
    20401dec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
    20401df0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
    20401df4:	853e                	mv	a0,a5
    20401df6:	7462                	ld	s0,56(sp)
    20401df8:	6121                	addi	sp,sp,64
    20401dfa:	8082                	ret

0000000020401dfc <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
    20401dfc:	1101                	addi	sp,sp,-32
    20401dfe:	ec06                	sd	ra,24(sp)
    20401e00:	e822                	sd	s0,16(sp)
    20401e02:	1000                	addi	s0,sp,32
    20401e04:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
    20401e08:	10f010ef          	jal	ra,20403716 <__metal_controller_interrupt_vector_mode>
    20401e0c:	87aa                	mv	a5,a0
    20401e0e:	2781                	sext.w	a5,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
    20401e10:	853e                	mv	a0,a5
    20401e12:	60e2                	ld	ra,24(sp)
    20401e14:	6442                	ld	s0,16(sp)
    20401e16:	6105                	addi	sp,sp,32
    20401e18:	8082                	ret

0000000020401e1a <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
    20401e1a:	7179                	addi	sp,sp,-48
    20401e1c:	f406                	sd	ra,40(sp)
    20401e1e:	f022                	sd	s0,32(sp)
    20401e20:	1800                	addi	s0,sp,48
    20401e22:	fca43c23          	sd	a0,-40(s0)
    20401e26:	87ae                	mv	a5,a1
    20401e28:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
    20401e2c:	57fd                	li	a5,-1
    20401e2e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
    20401e32:	dcfff0ef          	jal	ra,20401c00 <_get_cpu_intc>
    20401e36:	fea43023          	sd	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
    20401e3a:	fe043783          	ld	a5,-32(s0)
    20401e3e:	c795                	beqz	a5,20401e6a <__metal_driver_riscv_clint0_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
    20401e40:	fd442783          	lw	a5,-44(s0)
    20401e44:	0007871b          	sext.w	a4,a5
    20401e48:	4785                	li	a5,1
    20401e4a:	02e7e163          	bltu	a5,a4,20401e6c <__metal_driver_riscv_clint0_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
    20401e4e:	fe043783          	ld	a5,-32(s0)
    20401e52:	639c                	ld	a5,0(a5)
    20401e54:	6798                	ld	a4,8(a5)
    20401e56:	fd442783          	lw	a5,-44(s0)
    20401e5a:	85be                	mv	a1,a5
    20401e5c:	fe043503          	ld	a0,-32(s0)
    20401e60:	9702                	jalr	a4
    20401e62:	87aa                	mv	a5,a0
    20401e64:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
    20401e68:	a011                	j	20401e6c <__metal_driver_riscv_clint0_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
    20401e6a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
    20401e6c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
    20401e70:	853e                	mv	a0,a5
    20401e72:	70a2                	ld	ra,40(sp)
    20401e74:	7402                	ld	s0,32(sp)
    20401e76:	6145                	addi	sp,sp,48
    20401e78:	8082                	ret

0000000020401e7a <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
    20401e7a:	715d                	addi	sp,sp,-80
    20401e7c:	e486                	sd	ra,72(sp)
    20401e7e:	e0a2                	sd	s0,64(sp)
    20401e80:	0880                	addi	s0,sp,80
    20401e82:	faa43c23          	sd	a0,-72(s0)
    20401e86:	87ae                	mv	a5,a1
    20401e88:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
    20401e8c:	57fd                	li	a5,-1
    20401e8e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
    20401e92:	fb442783          	lw	a5,-76(s0)
    20401e96:	2781                	sext.w	a5,a5
    20401e98:	c3dd                	beqz	a5,20401f3e <__metal_driver_riscv_clint0_enable+0xc4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
    20401e9a:	fe043023          	sd	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
    20401e9e:	d63ff0ef          	jal	ra,20401c00 <_get_cpu_intc>
    20401ea2:	fca43823          	sd	a0,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
    20401ea6:	fb843503          	ld	a0,-72(s0)
    20401eaa:	ba9ff0ef          	jal	ra,20401a52 <__metal_driver_sifive_clint0_num_interrupts>
    20401eae:	87aa                	mv	a5,a0
    20401eb0:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
    20401eb4:	fc042e23          	sw	zero,-36(s0)
    20401eb8:	a889                	j	20401f0a <__metal_driver_riscv_clint0_enable+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    20401eba:	fdc42783          	lw	a5,-36(s0)
    20401ebe:	85be                	mv	a1,a5
    20401ec0:	fb843503          	ld	a0,-72(s0)
    20401ec4:	bfbff0ef          	jal	ra,20401abe <__metal_driver_sifive_clint0_interrupt_lines>
    20401ec8:	87aa                	mv	a5,a0
    20401eca:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    20401ece:	fdc42783          	lw	a5,-36(s0)
    20401ed2:	85be                	mv	a1,a5
    20401ed4:	fb843503          	ld	a0,-72(s0)
    20401ed8:	ba3ff0ef          	jal	ra,20401a7a <__metal_driver_sifive_clint0_interrupt_parents>
    20401edc:	fea43023          	sd	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
    20401ee0:	fd043703          	ld	a4,-48(s0)
    20401ee4:	fe043783          	ld	a5,-32(s0)
    20401ee8:	00f71a63          	bne	a4,a5,20401efc <__metal_driver_riscv_clint0_enable+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
    20401eec:	fb442703          	lw	a4,-76(s0)
    20401ef0:	fc842783          	lw	a5,-56(s0)
    20401ef4:	2701                	sext.w	a4,a4
    20401ef6:	2781                	sext.w	a5,a5
    20401ef8:	02f70263          	beq	a4,a5,20401f1c <__metal_driver_riscv_clint0_enable+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
    20401efc:	fe043023          	sd	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
    20401f00:	fdc42783          	lw	a5,-36(s0)
    20401f04:	2785                	addiw	a5,a5,1
    20401f06:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
    20401f0a:	fdc42703          	lw	a4,-36(s0)
    20401f0e:	fcc42783          	lw	a5,-52(s0)
    20401f12:	2701                	sext.w	a4,a4
    20401f14:	2781                	sext.w	a5,a5
    20401f16:	faf742e3          	blt	a4,a5,20401eba <__metal_driver_riscv_clint0_enable+0x40>
    20401f1a:	a011                	j	20401f1e <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
    20401f1c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
    20401f1e:	fe043783          	ld	a5,-32(s0)
    20401f22:	cf91                	beqz	a5,20401f3e <__metal_driver_riscv_clint0_enable+0xc4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
    20401f24:	fe043783          	ld	a5,-32(s0)
    20401f28:	639c                	ld	a5,0(a5)
    20401f2a:	67b8                	ld	a4,72(a5)
    20401f2c:	fb442783          	lw	a5,-76(s0)
    20401f30:	85be                	mv	a1,a5
    20401f32:	fe043503          	ld	a0,-32(s0)
    20401f36:	9702                	jalr	a4
    20401f38:	87aa                	mv	a5,a0
    20401f3a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
    20401f3e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
    20401f42:	853e                	mv	a0,a5
    20401f44:	60a6                	ld	ra,72(sp)
    20401f46:	6406                	ld	s0,64(sp)
    20401f48:	6161                	addi	sp,sp,80
    20401f4a:	8082                	ret

0000000020401f4c <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
    20401f4c:	715d                	addi	sp,sp,-80
    20401f4e:	e486                	sd	ra,72(sp)
    20401f50:	e0a2                	sd	s0,64(sp)
    20401f52:	0880                	addi	s0,sp,80
    20401f54:	faa43c23          	sd	a0,-72(s0)
    20401f58:	87ae                	mv	a5,a1
    20401f5a:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
    20401f5e:	57fd                	li	a5,-1
    20401f60:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
    20401f64:	fb442783          	lw	a5,-76(s0)
    20401f68:	2781                	sext.w	a5,a5
    20401f6a:	c3dd                	beqz	a5,20402010 <__metal_driver_riscv_clint0_disable+0xc4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
    20401f6c:	fe043023          	sd	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
    20401f70:	c91ff0ef          	jal	ra,20401c00 <_get_cpu_intc>
    20401f74:	fca43823          	sd	a0,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
    20401f78:	fb843503          	ld	a0,-72(s0)
    20401f7c:	ad7ff0ef          	jal	ra,20401a52 <__metal_driver_sifive_clint0_num_interrupts>
    20401f80:	87aa                	mv	a5,a0
    20401f82:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
    20401f86:	fc042e23          	sw	zero,-36(s0)
    20401f8a:	a889                	j	20401fdc <__metal_driver_riscv_clint0_disable+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    20401f8c:	fdc42783          	lw	a5,-36(s0)
    20401f90:	85be                	mv	a1,a5
    20401f92:	fb843503          	ld	a0,-72(s0)
    20401f96:	b29ff0ef          	jal	ra,20401abe <__metal_driver_sifive_clint0_interrupt_lines>
    20401f9a:	87aa                	mv	a5,a0
    20401f9c:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    20401fa0:	fdc42783          	lw	a5,-36(s0)
    20401fa4:	85be                	mv	a1,a5
    20401fa6:	fb843503          	ld	a0,-72(s0)
    20401faa:	ad1ff0ef          	jal	ra,20401a7a <__metal_driver_sifive_clint0_interrupt_parents>
    20401fae:	fea43023          	sd	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
    20401fb2:	fd043703          	ld	a4,-48(s0)
    20401fb6:	fe043783          	ld	a5,-32(s0)
    20401fba:	00f71a63          	bne	a4,a5,20401fce <__metal_driver_riscv_clint0_disable+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
    20401fbe:	fb442703          	lw	a4,-76(s0)
    20401fc2:	fc842783          	lw	a5,-56(s0)
    20401fc6:	2701                	sext.w	a4,a4
    20401fc8:	2781                	sext.w	a5,a5
    20401fca:	02f70263          	beq	a4,a5,20401fee <__metal_driver_riscv_clint0_disable+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
    20401fce:	fe043023          	sd	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
    20401fd2:	fdc42783          	lw	a5,-36(s0)
    20401fd6:	2785                	addiw	a5,a5,1
    20401fd8:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
    20401fdc:	fdc42703          	lw	a4,-36(s0)
    20401fe0:	fcc42783          	lw	a5,-52(s0)
    20401fe4:	2701                	sext.w	a4,a4
    20401fe6:	2781                	sext.w	a5,a5
    20401fe8:	faf742e3          	blt	a4,a5,20401f8c <__metal_driver_riscv_clint0_disable+0x40>
    20401fec:	a011                	j	20401ff0 <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
    20401fee:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
    20401ff0:	fe043783          	ld	a5,-32(s0)
    20401ff4:	cf91                	beqz	a5,20402010 <__metal_driver_riscv_clint0_disable+0xc4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
    20401ff6:	fe043783          	ld	a5,-32(s0)
    20401ffa:	639c                	ld	a5,0(a5)
    20401ffc:	6bb8                	ld	a4,80(a5)
    20401ffe:	fb442783          	lw	a5,-76(s0)
    20402002:	85be                	mv	a1,a5
    20402004:	fe043503          	ld	a0,-32(s0)
    20402008:	9702                	jalr	a4
    2040200a:	87aa                	mv	a5,a0
    2040200c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
    20402010:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
    20402014:	853e                	mv	a0,a5
    20402016:	60a6                	ld	ra,72(sp)
    20402018:	6406                	ld	s0,64(sp)
    2040201a:	6161                	addi	sp,sp,80
    2040201c:	8082                	ret

000000002040201e <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
    2040201e:	715d                	addi	sp,sp,-80
    20402020:	e486                	sd	ra,72(sp)
    20402022:	e0a2                	sd	s0,64(sp)
    20402024:	0880                	addi	s0,sp,80
    20402026:	fca43423          	sd	a0,-56(s0)
    2040202a:	87ae                	mv	a5,a1
    2040202c:	fac43c23          	sd	a2,-72(s0)
    20402030:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
    20402034:	57fd                	li	a5,-1
    20402036:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
    2040203a:	fc843783          	ld	a5,-56(s0)
    2040203e:	fef43023          	sd	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
    20402042:	fc843503          	ld	a0,-56(s0)
    20402046:	9e3ff0ef          	jal	ra,20401a28 <__metal_driver_sifive_clint0_control_base>
    2040204a:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
    2040204e:	fc442783          	lw	a5,-60(s0)
    20402052:	0007871b          	sext.w	a4,a5
    20402056:	4789                	li	a5,2
    20402058:	04f70e63          	beq	a4,a5,204020b4 <__metal_driver_riscv_clint0_command_request+0x96>
    2040205c:	fc442783          	lw	a5,-60(s0)
    20402060:	0007871b          	sext.w	a4,a5
    20402064:	4789                	li	a5,2
    20402066:	00e7ca63          	blt	a5,a4,2040207a <__metal_driver_riscv_clint0_command_request+0x5c>
    2040206a:	fc442783          	lw	a5,-60(s0)
    2040206e:	0007871b          	sext.w	a4,a5
    20402072:	4785                	li	a5,1
    20402074:	02f70263          	beq	a4,a5,20402098 <__metal_driver_riscv_clint0_command_request+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
    20402078:	a8cd                	j	2040216a <__metal_driver_riscv_clint0_command_request+0x14c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
    2040207a:	fc442783          	lw	a5,-60(s0)
    2040207e:	0007871b          	sext.w	a4,a5
    20402082:	478d                	li	a5,3
    20402084:	04f70e63          	beq	a4,a5,204020e0 <__metal_driver_riscv_clint0_command_request+0xc2>
    20402088:	fc442783          	lw	a5,-60(s0)
    2040208c:	0007871b          	sext.w	a4,a5
    20402090:	4791                	li	a5,4
    20402092:	08f70d63          	beq	a4,a5,2040212c <__metal_driver_riscv_clint0_command_request+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
    20402096:	a8d1                	j	2040216a <__metal_driver_riscv_clint0_command_request+0x14c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
    20402098:	fb843783          	ld	a5,-72(s0)
    2040209c:	c3e1                	beqz	a5,2040215c <__metal_driver_riscv_clint0_command_request+0x13e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
    2040209e:	fe043503          	ld	a0,-32(s0)
    204020a2:	a55ff0ef          	jal	ra,20401af6 <__metal_clint0_mtime_get>
    204020a6:	872a                	mv	a4,a0
    204020a8:	fb843783          	ld	a5,-72(s0)
    204020ac:	e398                	sd	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
    204020ae:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
    204020b2:	a06d                	j	2040215c <__metal_driver_riscv_clint0_command_request+0x13e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
    204020b4:	fb843783          	ld	a5,-72(s0)
    204020b8:	c7c5                	beqz	a5,20402160 <__metal_driver_riscv_clint0_command_request+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
    204020ba:	fb843783          	ld	a5,-72(s0)
    204020be:	439c                	lw	a5,0(a5)
    204020c0:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    204020c4:	fd442783          	lw	a5,-44(s0)
    204020c8:	0027979b          	slliw	a5,a5,0x2
    204020cc:	2781                	sext.w	a5,a5
    204020ce:	873e                	mv	a4,a5
    204020d0:	fd843783          	ld	a5,-40(s0)
    204020d4:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
    204020d6:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
    204020da:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
    204020de:	a049                	j	20402160 <__metal_driver_riscv_clint0_command_request+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
    204020e0:	fb843783          	ld	a5,-72(s0)
    204020e4:	c3c1                	beqz	a5,20402164 <__metal_driver_riscv_clint0_command_request+0x146>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
    204020e6:	fb843783          	ld	a5,-72(s0)
    204020ea:	439c                	lw	a5,0(a5)
    204020ec:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    204020f0:	fd442783          	lw	a5,-44(s0)
    204020f4:	0027979b          	slliw	a5,a5,0x2
    204020f8:	2781                	sext.w	a5,a5
    204020fa:	873e                	mv	a4,a5
    204020fc:	fd843783          	ld	a5,-40(s0)
    20402100:	97ba                	add	a5,a5,a4
    20402102:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
    20402104:	4785                	li	a5,1
    20402106:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
    20402108:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    2040210c:	fd442783          	lw	a5,-44(s0)
    20402110:	0027979b          	slliw	a5,a5,0x2
    20402114:	2781                	sext.w	a5,a5
    20402116:	873e                	mv	a4,a5
    20402118:	fd843783          	ld	a5,-40(s0)
    2040211c:	97ba                	add	a5,a5,a4
    2040211e:	439c                	lw	a5,0(a5)
    20402120:	2781                	sext.w	a5,a5
    20402122:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
    20402126:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
    2040212a:	a82d                	j	20402164 <__metal_driver_riscv_clint0_command_request+0x146>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
    2040212c:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
    20402130:	fb843783          	ld	a5,-72(s0)
    20402134:	cb95                	beqz	a5,20402168 <__metal_driver_riscv_clint0_command_request+0x14a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
    20402136:	fb843783          	ld	a5,-72(s0)
    2040213a:	439c                	lw	a5,0(a5)
    2040213c:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    20402140:	fd442783          	lw	a5,-44(s0)
    20402144:	0027979b          	slliw	a5,a5,0x2
    20402148:	2781                	sext.w	a5,a5
    2040214a:	873e                	mv	a4,a5
    2040214c:	fd843783          	ld	a5,-40(s0)
    20402150:	97ba                	add	a5,a5,a4
    20402152:	439c                	lw	a5,0(a5)
    20402154:	2781                	sext.w	a5,a5
    20402156:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
    2040215a:	a039                	j	20402168 <__metal_driver_riscv_clint0_command_request+0x14a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
    2040215c:	0001                	nop
    2040215e:	a031                	j	2040216a <__metal_driver_riscv_clint0_command_request+0x14c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
    20402160:	0001                	nop
    20402162:	a021                	j	2040216a <__metal_driver_riscv_clint0_command_request+0x14c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
    20402164:	0001                	nop
    20402166:	a011                	j	2040216a <__metal_driver_riscv_clint0_command_request+0x14c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
    20402168:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
    2040216a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
    2040216e:	853e                	mv	a0,a5
    20402170:	60a6                	ld	ra,72(sp)
    20402172:	6406                	ld	s0,64(sp)
    20402174:	6161                	addi	sp,sp,80
    20402176:	8082                	ret

0000000020402178 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
    20402178:	7179                	addi	sp,sp,-48
    2040217a:	f406                	sd	ra,40(sp)
    2040217c:	f022                	sd	s0,32(sp)
    2040217e:	1800                	addi	s0,sp,48
    20402180:	fca43c23          	sd	a0,-40(s0)
    20402184:	87ae                	mv	a5,a1
    20402186:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
    2040218a:	792030ef          	jal	ra,2040591c <metal_cpu_get_current_hartid>
    2040218e:	87aa                	mv	a5,a0
    20402190:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
    20402194:	fec40793          	addi	a5,s0,-20
    20402198:	863e                	mv	a2,a5
    2040219a:	4589                	li	a1,2
    2040219c:	fd843503          	ld	a0,-40(s0)
    204021a0:	e7fff0ef          	jal	ra,2040201e <__metal_driver_riscv_clint0_command_request>
    204021a4:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
    204021a6:	853e                	mv	a0,a5
    204021a8:	70a2                	ld	ra,40(sp)
    204021aa:	7402                	ld	s0,32(sp)
    204021ac:	6145                	addi	sp,sp,48
    204021ae:	8082                	ret

00000000204021b0 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
    204021b0:	7179                	addi	sp,sp,-48
    204021b2:	f406                	sd	ra,40(sp)
    204021b4:	f022                	sd	s0,32(sp)
    204021b6:	1800                	addi	s0,sp,48
    204021b8:	fca43c23          	sd	a0,-40(s0)
    204021bc:	87ae                	mv	a5,a1
    204021be:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
    204021c2:	75a030ef          	jal	ra,2040591c <metal_cpu_get_current_hartid>
    204021c6:	87aa                	mv	a5,a0
    204021c8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
    204021cc:	fec40793          	addi	a5,s0,-20
    204021d0:	863e                	mv	a2,a5
    204021d2:	458d                	li	a1,3
    204021d4:	fd843503          	ld	a0,-40(s0)
    204021d8:	e47ff0ef          	jal	ra,2040201e <__metal_driver_riscv_clint0_command_request>
    204021dc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
    204021de:	853e                	mv	a0,a5
    204021e0:	70a2                	ld	ra,40(sp)
    204021e2:	7402                	ld	s0,32(sp)
    204021e4:	6145                	addi	sp,sp,48
    204021e6:	8082                	ret

00000000204021e8 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
    204021e8:	1101                	addi	sp,sp,-32
    204021ea:	ec22                	sd	s0,24(sp)
    204021ec:	1000                	addi	s0,sp,32
    204021ee:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    204021f2:	fe843703          	ld	a4,-24(s0)
    204021f6:	82018793          	addi	a5,gp,-2016 # 80000af0 <__metal_dt_cpu_0>
    204021fa:	00f71463          	bne	a4,a5,20402202 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:197
		return 0;
    204021fe:	4781                	li	a5,0
    20402200:	a011                	j	20402204 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
    20402202:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:202
	}
}
    20402204:	853e                	mv	a0,a5
    20402206:	6462                	ld	s0,24(sp)
    20402208:	6105                	addi	sp,sp,32
    2040220a:	8082                	ret

000000002040220c <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
    2040220c:	1101                	addi	sp,sp,-32
    2040220e:	ec22                	sd	s0,24(sp)
    20402210:	1000                	addi	s0,sp,32
    20402212:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    20402216:	fe843703          	ld	a4,-24(s0)
    2040221a:	82018793          	addi	a5,gp,-2016 # 80000af0 <__metal_dt_cpu_0>
    2040221e:	00f71763          	bne	a4,a5,2040222c <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:207
		return 1000000;
    20402222:	000f47b7          	lui	a5,0xf4
    20402226:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
    2040222a:	a011                	j	2040222e <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
    2040222c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:212
	}
}
    2040222e:	853e                	mv	a0,a5
    20402230:	6462                	ld	s0,24(sp)
    20402232:	6105                	addi	sp,sp,32
    20402234:	8082                	ret

0000000020402236 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
    20402236:	1101                	addi	sp,sp,-32
    20402238:	ec22                	sd	s0,24(sp)
    2040223a:	1000                	addi	s0,sp,32
    2040223c:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    20402240:	fe843703          	ld	a4,-24(s0)
    20402244:	82018793          	addi	a5,gp,-2016 # 80000af0 <__metal_dt_cpu_0>
    20402248:	00f71763          	bne	a4,a5,20402256 <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
    2040224c:	5fbfe797          	auipc	a5,0x5fbfe
    20402250:	e8c78793          	addi	a5,a5,-372 # 800000d8 <__metal_dt_cpu_0_interrupt_controller>
    20402254:	a011                	j	20402258 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
    20402256:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:222
	}
}
    20402258:	853e                	mv	a0,a5
    2040225a:	6462                	ld	s0,24(sp)
    2040225c:	6105                	addi	sp,sp,32
    2040225e:	8082                	ret

0000000020402260 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
    20402260:	1101                	addi	sp,sp,-32
    20402262:	ec22                	sd	s0,24(sp)
    20402264:	1000                	addi	s0,sp,32
    20402266:	87aa                	mv	a5,a0
    20402268:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
    2040226c:	fec42783          	lw	a5,-20(s0)
    20402270:	2781                	sext.w	a5,a5
    20402272:	00f04a63          	bgtz	a5,20402286 <__metal_driver_cpu_get+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
    20402276:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    2040227a:	fec42783          	lw	a5,-20(s0)
    2040227e:	078e                	slli	a5,a5,0x3
    20402280:	97ba                	add	a5,a5,a4
    20402282:	639c                	ld	a5,0(a5)
    20402284:	a011                	j	20402288 <__metal_driver_cpu_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
    20402286:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
    20402288:	853e                	mv	a0,a5
    2040228a:	6462                	ld	s0,24(sp)
    2040228c:	6105                	addi	sp,sp,32
    2040228e:	8082                	ret

0000000020402290 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
    20402290:	1101                	addi	sp,sp,-32
    20402292:	ec22                	sd	s0,24(sp)
    20402294:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
    20402296:	f14027f3          	csrr	a5,mhartid
    2040229a:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
    2040229e:	fe843783          	ld	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
    204022a2:	853e                	mv	a0,a5
    204022a4:	6462                	ld	s0,24(sp)
    204022a6:	6105                	addi	sp,sp,32
    204022a8:	8082                	ret

00000000204022aa <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
    204022aa:	1101                	addi	sp,sp,-32
    204022ac:	ec22                	sd	s0,24(sp)
    204022ae:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
    204022b0:	47a1                	li	a5,8
    204022b2:	3007a7f3          	csrrs	a5,mstatus,a5
    204022b6:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
    204022ba:	0001                	nop
    204022bc:	6462                	ld	s0,24(sp)
    204022be:	6105                	addi	sp,sp,32
    204022c0:	8082                	ret

00000000204022c2 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
    204022c2:	1101                	addi	sp,sp,-32
    204022c4:	ec22                	sd	s0,24(sp)
    204022c6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
    204022c8:	47a1                	li	a5,8
    204022ca:	3007b7f3          	csrrc	a5,mstatus,a5
    204022ce:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
    204022d2:	0001                	nop
    204022d4:	6462                	ld	s0,24(sp)
    204022d6:	6105                	addi	sp,sp,32
    204022d8:	8082                	ret

00000000204022da <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
    204022da:	1101                	addi	sp,sp,-32
    204022dc:	ec22                	sd	s0,24(sp)
    204022de:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
    204022e0:	47a1                	li	a5,8
    204022e2:	3047a7f3          	csrrs	a5,mie,a5
    204022e6:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
    204022ea:	0001                	nop
    204022ec:	6462                	ld	s0,24(sp)
    204022ee:	6105                	addi	sp,sp,32
    204022f0:	8082                	ret

00000000204022f2 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
    204022f2:	1101                	addi	sp,sp,-32
    204022f4:	ec22                	sd	s0,24(sp)
    204022f6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
    204022f8:	47a1                	li	a5,8
    204022fa:	3047b7f3          	csrrc	a5,mie,a5
    204022fe:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
    20402302:	0001                	nop
    20402304:	6462                	ld	s0,24(sp)
    20402306:	6105                	addi	sp,sp,32
    20402308:	8082                	ret

000000002040230a <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
    2040230a:	1101                	addi	sp,sp,-32
    2040230c:	ec22                	sd	s0,24(sp)
    2040230e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
    20402310:	08000793          	li	a5,128
    20402314:	3047a7f3          	csrrs	a5,mie,a5
    20402318:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
    2040231c:	0001                	nop
    2040231e:	6462                	ld	s0,24(sp)
    20402320:	6105                	addi	sp,sp,32
    20402322:	8082                	ret

0000000020402324 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
    20402324:	1101                	addi	sp,sp,-32
    20402326:	ec22                	sd	s0,24(sp)
    20402328:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
    2040232a:	08000793          	li	a5,128
    2040232e:	3047b7f3          	csrrc	a5,mie,a5
    20402332:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
    20402336:	0001                	nop
    20402338:	6462                	ld	s0,24(sp)
    2040233a:	6105                	addi	sp,sp,32
    2040233c:	8082                	ret

000000002040233e <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
    2040233e:	1101                	addi	sp,sp,-32
    20402340:	ec22                	sd	s0,24(sp)
    20402342:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
    20402344:	6785                	lui	a5,0x1
    20402346:	8007879b          	addiw	a5,a5,-2048
    2040234a:	3047a7f3          	csrrs	a5,mie,a5
    2040234e:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
    20402352:	0001                	nop
    20402354:	6462                	ld	s0,24(sp)
    20402356:	6105                	addi	sp,sp,32
    20402358:	8082                	ret

000000002040235a <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
    2040235a:	1101                	addi	sp,sp,-32
    2040235c:	ec22                	sd	s0,24(sp)
    2040235e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
    20402360:	6785                	lui	a5,0x1
    20402362:	8007879b          	addiw	a5,a5,-2048
    20402366:	3047b7f3          	csrrc	a5,mie,a5
    2040236a:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
    2040236e:	0001                	nop
    20402370:	6462                	ld	s0,24(sp)
    20402372:	6105                	addi	sp,sp,32
    20402374:	8082                	ret

0000000020402376 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
    20402376:	7179                	addi	sp,sp,-48
    20402378:	f422                	sd	s0,40(sp)
    2040237a:	1800                	addi	s0,sp,48
    2040237c:	87aa                	mv	a5,a0
    2040237e:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
    20402382:	fdc42783          	lw	a5,-36(s0)
    20402386:	4705                	li	a4,1
    20402388:	00f717bb          	sllw	a5,a4,a5
    2040238c:	2781                	sext.w	a5,a5
    2040238e:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
    20402392:	fe843783          	ld	a5,-24(s0)
    20402396:	3047a7f3          	csrrs	a5,mie,a5
    2040239a:	fef43023          	sd	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
    2040239e:	0001                	nop
    204023a0:	7422                	ld	s0,40(sp)
    204023a2:	6145                	addi	sp,sp,48
    204023a4:	8082                	ret

00000000204023a6 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
    204023a6:	7179                	addi	sp,sp,-48
    204023a8:	f422                	sd	s0,40(sp)
    204023aa:	1800                	addi	s0,sp,48
    204023ac:	87aa                	mv	a5,a0
    204023ae:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
    204023b2:	fdc42783          	lw	a5,-36(s0)
    204023b6:	4705                	li	a4,1
    204023b8:	00f717bb          	sllw	a5,a4,a5
    204023bc:	2781                	sext.w	a5,a5
    204023be:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
    204023c2:	fe843783          	ld	a5,-24(s0)
    204023c6:	3047b7f3          	csrrc	a5,mie,a5
    204023ca:	fef43023          	sd	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
    204023ce:	0001                	nop
    204023d0:	7422                	ld	s0,40(sp)
    204023d2:	6145                	addi	sp,sp,48
    204023d4:	8082                	ret

00000000204023d6 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
    204023d6:	1101                	addi	sp,sp,-32
    204023d8:	ec06                	sd	ra,24(sp)
    204023da:	e822                	sd	s0,16(sp)
    204023dc:	1000                	addi	s0,sp,32
    204023de:	fea43423          	sd	a0,-24(s0)
    204023e2:	87ae                	mv	a5,a1
    204023e4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
    204023e8:	06400513          	li	a0,100
    204023ec:	54a030ef          	jal	ra,20405936 <metal_shutdown>

00000000204023f0 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
    204023f0:	1101                	addi	sp,sp,-32
    204023f2:	ec06                	sd	ra,24(sp)
    204023f4:	e822                	sd	s0,16(sp)
    204023f6:	1000                	addi	s0,sp,32
    204023f8:	87aa                	mv	a5,a0
    204023fa:	feb43023          	sd	a1,-32(s0)
    204023fe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
    20402402:	0c800513          	li	a0,200
    20402406:	530030ef          	jal	ra,20405936 <metal_shutdown>

000000002040240a <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
    2040240a:	7169                	addi	sp,sp,-304
    2040240c:	f606                	sd	ra,296(sp)
    2040240e:	f216                	sd	t0,288(sp)
    20402410:	ee1a                	sd	t1,280(sp)
    20402412:	ea1e                	sd	t2,272(sp)
    20402414:	e622                	sd	s0,264(sp)
    20402416:	e22a                	sd	a0,256(sp)
    20402418:	fdae                	sd	a1,248(sp)
    2040241a:	f9b2                	sd	a2,240(sp)
    2040241c:	f5b6                	sd	a3,232(sp)
    2040241e:	f1ba                	sd	a4,224(sp)
    20402420:	edbe                	sd	a5,216(sp)
    20402422:	e9c2                	sd	a6,208(sp)
    20402424:	e5c6                	sd	a7,200(sp)
    20402426:	e1f2                	sd	t3,192(sp)
    20402428:	fd76                	sd	t4,184(sp)
    2040242a:	f97a                	sd	t5,176(sp)
    2040242c:	f57e                	sd	t6,168(sp)
    2040242e:	ad02                	fsd	ft0,152(sp)
    20402430:	a906                	fsd	ft1,144(sp)
    20402432:	a50a                	fsd	ft2,136(sp)
    20402434:	a10e                	fsd	ft3,128(sp)
    20402436:	bc92                	fsd	ft4,120(sp)
    20402438:	b896                	fsd	ft5,112(sp)
    2040243a:	b49a                	fsd	ft6,104(sp)
    2040243c:	b09e                	fsd	ft7,96(sp)
    2040243e:	acaa                	fsd	fa0,88(sp)
    20402440:	a8ae                	fsd	fa1,80(sp)
    20402442:	a4b2                	fsd	fa2,72(sp)
    20402444:	a0b6                	fsd	fa3,64(sp)
    20402446:	bc3a                	fsd	fa4,56(sp)
    20402448:	b83e                	fsd	fa5,48(sp)
    2040244a:	b442                	fsd	fa6,40(sp)
    2040244c:	b046                	fsd	fa7,32(sp)
    2040244e:	ac72                	fsd	ft8,24(sp)
    20402450:	a876                	fsd	ft9,16(sp)
    20402452:	a47a                	fsd	ft10,8(sp)
    20402454:	a07e                	fsd	ft11,0(sp)
    20402456:	1a00                	addi	s0,sp,304
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
    20402458:	12c00513          	li	a0,300
    2040245c:	4da030ef          	jal	ra,20405936 <metal_shutdown>

0000000020402460 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
    20402460:	714d                	addi	sp,sp,-336
    20402462:	e686                	sd	ra,328(sp)
    20402464:	e296                	sd	t0,320(sp)
    20402466:	fe1a                	sd	t1,312(sp)
    20402468:	fa1e                	sd	t2,304(sp)
    2040246a:	f622                	sd	s0,296(sp)
    2040246c:	f22a                	sd	a0,288(sp)
    2040246e:	ee2e                	sd	a1,280(sp)
    20402470:	ea32                	sd	a2,272(sp)
    20402472:	e636                	sd	a3,264(sp)
    20402474:	e23a                	sd	a4,256(sp)
    20402476:	fdbe                	sd	a5,248(sp)
    20402478:	f9c2                	sd	a6,240(sp)
    2040247a:	f5c6                	sd	a7,232(sp)
    2040247c:	f1f2                	sd	t3,224(sp)
    2040247e:	edf6                	sd	t4,216(sp)
    20402480:	e9fa                	sd	t5,208(sp)
    20402482:	e5fe                	sd	t6,200(sp)
    20402484:	bd02                	fsd	ft0,184(sp)
    20402486:	b906                	fsd	ft1,176(sp)
    20402488:	b50a                	fsd	ft2,168(sp)
    2040248a:	b10e                	fsd	ft3,160(sp)
    2040248c:	ad12                	fsd	ft4,152(sp)
    2040248e:	a916                	fsd	ft5,144(sp)
    20402490:	a51a                	fsd	ft6,136(sp)
    20402492:	a11e                	fsd	ft7,128(sp)
    20402494:	bcaa                	fsd	fa0,120(sp)
    20402496:	b8ae                	fsd	fa1,112(sp)
    20402498:	b4b2                	fsd	fa2,104(sp)
    2040249a:	b0b6                	fsd	fa3,96(sp)
    2040249c:	acba                	fsd	fa4,88(sp)
    2040249e:	a8be                	fsd	fa5,80(sp)
    204024a0:	a4c2                	fsd	fa6,72(sp)
    204024a2:	a0c6                	fsd	fa7,64(sp)
    204024a4:	bc72                	fsd	ft8,56(sp)
    204024a6:	b876                	fsd	ft9,48(sp)
    204024a8:	b47a                	fsd	ft10,40(sp)
    204024aa:	b07e                	fsd	ft11,32(sp)
    204024ac:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    204024ae:	de3ff0ef          	jal	ra,20402290 <__metal_myhart_id>
    204024b2:	87aa                	mv	a5,a0
    204024b4:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    204024b8:	078e                	slli	a5,a5,0x3
    204024ba:	97ba                	add	a5,a5,a4
    204024bc:	639c                	ld	a5,0(a5)
    204024be:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
    204024c2:	ec843783          	ld	a5,-312(s0)
    204024c6:	c78d                	beqz	a5,204024f0 <metal_software_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    204024c8:	ec843503          	ld	a0,-312(s0)
    204024cc:	d6bff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    204024d0:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
    204024d4:	ec043783          	ld	a5,-320(s0)
    204024d8:	1887b783          	ld	a5,392(a5) # 1188 <__heap_size+0x988>
    204024dc:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
    204024e0:	ec043783          	ld	a5,-320(s0)
    204024e4:	1787b783          	ld	a5,376(a5)
    204024e8:	eb843583          	ld	a1,-328(s0)
    204024ec:	450d                	li	a0,3
    204024ee:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
    204024f0:	0001                	nop
    204024f2:	60b6                	ld	ra,328(sp)
    204024f4:	6296                	ld	t0,320(sp)
    204024f6:	7372                	ld	t1,312(sp)
    204024f8:	73d2                	ld	t2,304(sp)
    204024fa:	7432                	ld	s0,296(sp)
    204024fc:	7512                	ld	a0,288(sp)
    204024fe:	65f2                	ld	a1,280(sp)
    20402500:	6652                	ld	a2,272(sp)
    20402502:	66b2                	ld	a3,264(sp)
    20402504:	6712                	ld	a4,256(sp)
    20402506:	77ee                	ld	a5,248(sp)
    20402508:	784e                	ld	a6,240(sp)
    2040250a:	78ae                	ld	a7,232(sp)
    2040250c:	7e0e                	ld	t3,224(sp)
    2040250e:	6eee                	ld	t4,216(sp)
    20402510:	6f4e                	ld	t5,208(sp)
    20402512:	6fae                	ld	t6,200(sp)
    20402514:	306a                	fld	ft0,184(sp)
    20402516:	30ca                	fld	ft1,176(sp)
    20402518:	312a                	fld	ft2,168(sp)
    2040251a:	318a                	fld	ft3,160(sp)
    2040251c:	226a                	fld	ft4,152(sp)
    2040251e:	22ca                	fld	ft5,144(sp)
    20402520:	232a                	fld	ft6,136(sp)
    20402522:	238a                	fld	ft7,128(sp)
    20402524:	3566                	fld	fa0,120(sp)
    20402526:	35c6                	fld	fa1,112(sp)
    20402528:	3626                	fld	fa2,104(sp)
    2040252a:	3686                	fld	fa3,96(sp)
    2040252c:	2766                	fld	fa4,88(sp)
    2040252e:	27c6                	fld	fa5,80(sp)
    20402530:	2826                	fld	fa6,72(sp)
    20402532:	2886                	fld	fa7,64(sp)
    20402534:	3e62                	fld	ft8,56(sp)
    20402536:	3ec2                	fld	ft9,48(sp)
    20402538:	3f22                	fld	ft10,40(sp)
    2040253a:	3f82                	fld	ft11,32(sp)
    2040253c:	6171                	addi	sp,sp,336
    2040253e:	30200073          	mret

0000000020402542 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
    20402542:	7139                	addi	sp,sp,-64
    20402544:	fc06                	sd	ra,56(sp)
    20402546:	f822                	sd	s0,48(sp)
    20402548:	0080                	addi	s0,sp,64
    2040254a:	87aa                	mv	a5,a0
    2040254c:	fcb43023          	sd	a1,-64(s0)
    20402550:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    20402554:	d3dff0ef          	jal	ra,20402290 <__metal_myhart_id>
    20402558:	87aa                	mv	a5,a0
    2040255a:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    2040255e:	078e                	slli	a5,a5,0x3
    20402560:	97ba                	add	a5,a5,a4
    20402562:	639c                	ld	a5,0(a5)
    20402564:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
    20402568:	342027f3          	csrr	a5,mcause
    2040256c:	fef43023          	sd	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
    20402570:	fe843783          	ld	a5,-24(s0)
    20402574:	cb85                	beqz	a5,204025a4 <__metal_default_sw_handler+0x62>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    20402576:	fe843503          	ld	a0,-24(s0)
    2040257a:	cbdff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    2040257e:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
    20402582:	fe043783          	ld	a5,-32(s0)
    20402586:	3ff7f793          	andi	a5,a5,1023
    2040258a:	fd843703          	ld	a4,-40(s0)
    2040258e:	0a278793          	addi	a5,a5,162
    20402592:	078e                	slli	a5,a5,0x3
    20402594:	97ba                	add	a5,a5,a4
    20402596:	6398                	ld	a4,0(a5)
    20402598:	fcc42783          	lw	a5,-52(s0)
    2040259c:	85be                	mv	a1,a5
    2040259e:	fe843503          	ld	a0,-24(s0)
    204025a2:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
    204025a4:	0001                	nop
    204025a6:	70e2                	ld	ra,56(sp)
    204025a8:	7442                	ld	s0,48(sp)
    204025aa:	6121                	addi	sp,sp,64
    204025ac:	8082                	ret

00000000204025ae <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
    204025ae:	714d                	addi	sp,sp,-336
    204025b0:	e686                	sd	ra,328(sp)
    204025b2:	e296                	sd	t0,320(sp)
    204025b4:	fe1a                	sd	t1,312(sp)
    204025b6:	fa1e                	sd	t2,304(sp)
    204025b8:	f622                	sd	s0,296(sp)
    204025ba:	f22a                	sd	a0,288(sp)
    204025bc:	ee2e                	sd	a1,280(sp)
    204025be:	ea32                	sd	a2,272(sp)
    204025c0:	e636                	sd	a3,264(sp)
    204025c2:	e23a                	sd	a4,256(sp)
    204025c4:	fdbe                	sd	a5,248(sp)
    204025c6:	f9c2                	sd	a6,240(sp)
    204025c8:	f5c6                	sd	a7,232(sp)
    204025ca:	f1f2                	sd	t3,224(sp)
    204025cc:	edf6                	sd	t4,216(sp)
    204025ce:	e9fa                	sd	t5,208(sp)
    204025d0:	e5fe                	sd	t6,200(sp)
    204025d2:	bd02                	fsd	ft0,184(sp)
    204025d4:	b906                	fsd	ft1,176(sp)
    204025d6:	b50a                	fsd	ft2,168(sp)
    204025d8:	b10e                	fsd	ft3,160(sp)
    204025da:	ad12                	fsd	ft4,152(sp)
    204025dc:	a916                	fsd	ft5,144(sp)
    204025de:	a51a                	fsd	ft6,136(sp)
    204025e0:	a11e                	fsd	ft7,128(sp)
    204025e2:	bcaa                	fsd	fa0,120(sp)
    204025e4:	b8ae                	fsd	fa1,112(sp)
    204025e6:	b4b2                	fsd	fa2,104(sp)
    204025e8:	b0b6                	fsd	fa3,96(sp)
    204025ea:	acba                	fsd	fa4,88(sp)
    204025ec:	a8be                	fsd	fa5,80(sp)
    204025ee:	a4c2                	fsd	fa6,72(sp)
    204025f0:	a0c6                	fsd	fa7,64(sp)
    204025f2:	bc72                	fsd	ft8,56(sp)
    204025f4:	b876                	fsd	ft9,48(sp)
    204025f6:	b47a                	fsd	ft10,40(sp)
    204025f8:	b07e                	fsd	ft11,32(sp)
    204025fa:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    204025fc:	c95ff0ef          	jal	ra,20402290 <__metal_myhart_id>
    20402600:	87aa                	mv	a5,a0
    20402602:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    20402606:	078e                	slli	a5,a5,0x3
    20402608:	97ba                	add	a5,a5,a4
    2040260a:	639c                	ld	a5,0(a5)
    2040260c:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
    20402610:	ec843783          	ld	a5,-312(s0)
    20402614:	c78d                	beqz	a5,2040263e <metal_timer_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    20402616:	ec843503          	ld	a0,-312(s0)
    2040261a:	c1dff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    2040261e:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
    20402622:	ec043783          	ld	a5,-320(s0)
    20402626:	2087b783          	ld	a5,520(a5)
    2040262a:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
    2040262e:	ec043783          	ld	a5,-320(s0)
    20402632:	1f87b783          	ld	a5,504(a5)
    20402636:	eb843583          	ld	a1,-328(s0)
    2040263a:	451d                	li	a0,7
    2040263c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
    2040263e:	0001                	nop
    20402640:	60b6                	ld	ra,328(sp)
    20402642:	6296                	ld	t0,320(sp)
    20402644:	7372                	ld	t1,312(sp)
    20402646:	73d2                	ld	t2,304(sp)
    20402648:	7432                	ld	s0,296(sp)
    2040264a:	7512                	ld	a0,288(sp)
    2040264c:	65f2                	ld	a1,280(sp)
    2040264e:	6652                	ld	a2,272(sp)
    20402650:	66b2                	ld	a3,264(sp)
    20402652:	6712                	ld	a4,256(sp)
    20402654:	77ee                	ld	a5,248(sp)
    20402656:	784e                	ld	a6,240(sp)
    20402658:	78ae                	ld	a7,232(sp)
    2040265a:	7e0e                	ld	t3,224(sp)
    2040265c:	6eee                	ld	t4,216(sp)
    2040265e:	6f4e                	ld	t5,208(sp)
    20402660:	6fae                	ld	t6,200(sp)
    20402662:	306a                	fld	ft0,184(sp)
    20402664:	30ca                	fld	ft1,176(sp)
    20402666:	312a                	fld	ft2,168(sp)
    20402668:	318a                	fld	ft3,160(sp)
    2040266a:	226a                	fld	ft4,152(sp)
    2040266c:	22ca                	fld	ft5,144(sp)
    2040266e:	232a                	fld	ft6,136(sp)
    20402670:	238a                	fld	ft7,128(sp)
    20402672:	3566                	fld	fa0,120(sp)
    20402674:	35c6                	fld	fa1,112(sp)
    20402676:	3626                	fld	fa2,104(sp)
    20402678:	3686                	fld	fa3,96(sp)
    2040267a:	2766                	fld	fa4,88(sp)
    2040267c:	27c6                	fld	fa5,80(sp)
    2040267e:	2826                	fld	fa6,72(sp)
    20402680:	2886                	fld	fa7,64(sp)
    20402682:	3e62                	fld	ft8,56(sp)
    20402684:	3ec2                	fld	ft9,48(sp)
    20402686:	3f22                	fld	ft10,40(sp)
    20402688:	3f82                	fld	ft11,32(sp)
    2040268a:	6171                	addi	sp,sp,336
    2040268c:	30200073          	mret

0000000020402690 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
    20402690:	7179                	addi	sp,sp,-48
    20402692:	f406                	sd	ra,40(sp)
    20402694:	f022                	sd	s0,32(sp)
    20402696:	1800                	addi	s0,sp,48
    20402698:	87aa                	mv	a5,a0
    2040269a:	fcb43823          	sd	a1,-48(s0)
    2040269e:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
    204026a2:	befff0ef          	jal	ra,20402290 <__metal_myhart_id>
    204026a6:	87aa                	mv	a5,a0
    204026a8:	2781                	sext.w	a5,a5
    204026aa:	853e                	mv	a0,a5
    204026ac:	bb5ff0ef          	jal	ra,20402260 <__metal_driver_cpu_get>
    204026b0:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
    204026b4:	fe843503          	ld	a0,-24(s0)
    204026b8:	6ac010ef          	jal	ra,20403d64 <__metal_driver_cpu_mtime_get>
    204026bc:	fea43023          	sd	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
    204026c0:	fe043783          	ld	a5,-32(s0)
    204026c4:	07a9                	addi	a5,a5,10
    204026c6:	85be                	mv	a1,a5
    204026c8:	fe843503          	ld	a0,-24(s0)
    204026cc:	6f0010ef          	jal	ra,20403dbc <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
    204026d0:	0001                	nop
    204026d2:	70a2                	ld	ra,40(sp)
    204026d4:	7402                	ld	s0,32(sp)
    204026d6:	6145                	addi	sp,sp,48
    204026d8:	8082                	ret
	...

0000000020402700 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
    20402700:	7109                	addi	sp,sp,-384
    20402702:	fe86                	sd	ra,376(sp)
    20402704:	fa96                	sd	t0,368(sp)
    20402706:	f69a                	sd	t1,360(sp)
    20402708:	f29e                	sd	t2,352(sp)
    2040270a:	eea2                	sd	s0,344(sp)
    2040270c:	eaaa                	sd	a0,336(sp)
    2040270e:	e6ae                	sd	a1,328(sp)
    20402710:	e2b2                	sd	a2,320(sp)
    20402712:	fe36                	sd	a3,312(sp)
    20402714:	fa3a                	sd	a4,304(sp)
    20402716:	f63e                	sd	a5,296(sp)
    20402718:	f242                	sd	a6,288(sp)
    2040271a:	ee46                	sd	a7,280(sp)
    2040271c:	ea72                	sd	t3,272(sp)
    2040271e:	e676                	sd	t4,264(sp)
    20402720:	e27a                	sd	t5,256(sp)
    20402722:	fdfe                	sd	t6,248(sp)
    20402724:	b582                	fsd	ft0,232(sp)
    20402726:	b186                	fsd	ft1,224(sp)
    20402728:	ad8a                	fsd	ft2,216(sp)
    2040272a:	a98e                	fsd	ft3,208(sp)
    2040272c:	a592                	fsd	ft4,200(sp)
    2040272e:	a196                	fsd	ft5,192(sp)
    20402730:	bd1a                	fsd	ft6,184(sp)
    20402732:	b91e                	fsd	ft7,176(sp)
    20402734:	b52a                	fsd	fa0,168(sp)
    20402736:	b12e                	fsd	fa1,160(sp)
    20402738:	ad32                	fsd	fa2,152(sp)
    2040273a:	a936                	fsd	fa3,144(sp)
    2040273c:	a53a                	fsd	fa4,136(sp)
    2040273e:	a13e                	fsd	fa5,128(sp)
    20402740:	bcc2                	fsd	fa6,120(sp)
    20402742:	b8c6                	fsd	fa7,112(sp)
    20402744:	b4f2                	fsd	ft8,104(sp)
    20402746:	b0f6                	fsd	ft9,96(sp)
    20402748:	acfa                	fsd	ft10,88(sp)
    2040274a:	a8fe                	fsd	ft11,80(sp)
    2040274c:	0300                	addi	s0,sp,384
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    2040274e:	b43ff0ef          	jal	ra,20402290 <__metal_myhart_id>
    20402752:	87aa                	mv	a5,a0
    20402754:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    20402758:	078e                	slli	a5,a5,0x3
    2040275a:	97ba                	add	a5,a5,a4
    2040275c:	639c                	ld	a5,0(a5)
    2040275e:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
    20402762:	342027f3          	csrr	a5,mcause
    20402766:	ecf43023          	sd	a5,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
    2040276a:	341027f3          	csrr	a5,mepc
    2040276e:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
    20402772:	343027f3          	csrr	a5,mtval
    20402776:	eaf43823          	sd	a5,-336(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
    2040277a:	305027f3          	csrr	a5,mtvec
    2040277e:	eaf43423          	sd	a5,-344(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
    20402782:	ec843783          	ld	a5,-312(s0)
    20402786:	c7e9                	beqz	a5,20402850 <__metal_exception_handler+0x150>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    20402788:	ec843503          	ld	a0,-312(s0)
    2040278c:	aabff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20402790:	eaa43023          	sd	a0,-352(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
    20402794:	ec043783          	ld	a5,-320(s0)
    20402798:	2781                	sext.w	a5,a5
    2040279a:	3ff7f793          	andi	a5,a5,1023
    2040279e:	e8f42e23          	sw	a5,-356(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
    204027a2:	ec043783          	ld	a5,-320(s0)
    204027a6:	0807d663          	bgez	a5,20402832 <__metal_exception_handler+0x132>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
    204027aa:	e9c42783          	lw	a5,-356(s0)
    204027ae:	0007871b          	sext.w	a4,a5
    204027b2:	47ad                	li	a5,11
    204027b4:	00e7d763          	bge	a5,a4,204027c2 <__metal_exception_handler+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
    204027b8:	ea843783          	ld	a5,-344(s0)
    204027bc:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
    204027c0:	eb95                	bnez	a5,204027f4 <__metal_exception_handler+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
    204027c2:	ea043703          	ld	a4,-352(s0)
    204027c6:	e9c42783          	lw	a5,-356(s0)
    204027ca:	07a5                	addi	a5,a5,9
    204027cc:	0796                	slli	a5,a5,0x5
    204027ce:	97ba                	add	a5,a5,a4
    204027d0:	679c                	ld	a5,8(a5)
    204027d2:	e8f43423          	sd	a5,-376(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
    204027d6:	ea043703          	ld	a4,-352(s0)
    204027da:	e9c42783          	lw	a5,-356(s0)
    204027de:	0796                	slli	a5,a5,0x5
    204027e0:	97ba                	add	a5,a5,a4
    204027e2:	1187b703          	ld	a4,280(a5)
    204027e6:	e9c42783          	lw	a5,-356(s0)
    204027ea:	e8843583          	ld	a1,-376(s0)
    204027ee:	853e                	mv	a0,a5
    204027f0:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
    204027f2:	a8b9                	j	20402850 <__metal_exception_handler+0x150>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
    204027f4:	ea843783          	ld	a5,-344(s0)
    204027f8:	03f7f713          	andi	a4,a5,63
    204027fc:	4789                	li	a5,2
    204027fe:	04f71963          	bne	a4,a5,20402850 <__metal_exception_handler+0x150>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
    20402802:	307027f3          	csrr	a5,mtvt
    20402806:	e8f43823          	sd	a5,-368(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    2040280a:	ea043783          	ld	a5,-352(s0)
    2040280e:	1807b783          	ld	a5,384(a5)
    20402812:	e8f43423          	sd	a5,-376(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
    20402816:	e9043783          	ld	a5,-368(s0)
    2040281a:	639c                	ld	a5,0(a5)
    2040281c:	e8f43023          	sd	a5,-384(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
    20402820:	e9c42783          	lw	a5,-356(s0)
    20402824:	e8043703          	ld	a4,-384(s0)
    20402828:	e8843583          	ld	a1,-376(s0)
    2040282c:	853e                	mv	a0,a5
    2040282e:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
    20402830:	a005                	j	20402850 <__metal_exception_handler+0x150>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
    20402832:	ea043703          	ld	a4,-352(s0)
    20402836:	e9c42783          	lw	a5,-356(s0)
    2040283a:	0a278793          	addi	a5,a5,162
    2040283e:	078e                	slli	a5,a5,0x3
    20402840:	97ba                	add	a5,a5,a4
    20402842:	6398                	ld	a4,0(a5)
    20402844:	e9c42783          	lw	a5,-356(s0)
    20402848:	85be                	mv	a1,a5
    2040284a:	ec843503          	ld	a0,-312(s0)
    2040284e:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
    20402850:	70f6                	ld	ra,376(sp)
    20402852:	72d6                	ld	t0,368(sp)
    20402854:	7336                	ld	t1,360(sp)
    20402856:	7396                	ld	t2,352(sp)
    20402858:	6476                	ld	s0,344(sp)
    2040285a:	6556                	ld	a0,336(sp)
    2040285c:	65b6                	ld	a1,328(sp)
    2040285e:	6616                	ld	a2,320(sp)
    20402860:	76f2                	ld	a3,312(sp)
    20402862:	7752                	ld	a4,304(sp)
    20402864:	77b2                	ld	a5,296(sp)
    20402866:	7812                	ld	a6,288(sp)
    20402868:	68f2                	ld	a7,280(sp)
    2040286a:	6e52                	ld	t3,272(sp)
    2040286c:	6eb2                	ld	t4,264(sp)
    2040286e:	6f12                	ld	t5,256(sp)
    20402870:	7fee                	ld	t6,248(sp)
    20402872:	302e                	fld	ft0,232(sp)
    20402874:	308e                	fld	ft1,224(sp)
    20402876:	216e                	fld	ft2,216(sp)
    20402878:	21ce                	fld	ft3,208(sp)
    2040287a:	222e                	fld	ft4,200(sp)
    2040287c:	228e                	fld	ft5,192(sp)
    2040287e:	336a                	fld	ft6,184(sp)
    20402880:	33ca                	fld	ft7,176(sp)
    20402882:	352a                	fld	fa0,168(sp)
    20402884:	358a                	fld	fa1,160(sp)
    20402886:	266a                	fld	fa2,152(sp)
    20402888:	26ca                	fld	fa3,144(sp)
    2040288a:	272a                	fld	fa4,136(sp)
    2040288c:	278a                	fld	fa5,128(sp)
    2040288e:	3866                	fld	fa6,120(sp)
    20402890:	38c6                	fld	fa7,112(sp)
    20402892:	3e26                	fld	ft8,104(sp)
    20402894:	3e86                	fld	ft9,96(sp)
    20402896:	2f66                	fld	ft10,88(sp)
    20402898:	2fc6                	fld	ft11,80(sp)
    2040289a:	6119                	addi	sp,sp,384
    2040289c:	30200073          	mret
	...

00000000204028f6 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
    204028f6:	714d                	addi	sp,sp,-336
    204028f8:	e686                	sd	ra,328(sp)
    204028fa:	e296                	sd	t0,320(sp)
    204028fc:	fe1a                	sd	t1,312(sp)
    204028fe:	fa1e                	sd	t2,304(sp)
    20402900:	f622                	sd	s0,296(sp)
    20402902:	f22a                	sd	a0,288(sp)
    20402904:	ee2e                	sd	a1,280(sp)
    20402906:	ea32                	sd	a2,272(sp)
    20402908:	e636                	sd	a3,264(sp)
    2040290a:	e23a                	sd	a4,256(sp)
    2040290c:	fdbe                	sd	a5,248(sp)
    2040290e:	f9c2                	sd	a6,240(sp)
    20402910:	f5c6                	sd	a7,232(sp)
    20402912:	f1f2                	sd	t3,224(sp)
    20402914:	edf6                	sd	t4,216(sp)
    20402916:	e9fa                	sd	t5,208(sp)
    20402918:	e5fe                	sd	t6,200(sp)
    2040291a:	bd02                	fsd	ft0,184(sp)
    2040291c:	b906                	fsd	ft1,176(sp)
    2040291e:	b50a                	fsd	ft2,168(sp)
    20402920:	b10e                	fsd	ft3,160(sp)
    20402922:	ad12                	fsd	ft4,152(sp)
    20402924:	a916                	fsd	ft5,144(sp)
    20402926:	a51a                	fsd	ft6,136(sp)
    20402928:	a11e                	fsd	ft7,128(sp)
    2040292a:	bcaa                	fsd	fa0,120(sp)
    2040292c:	b8ae                	fsd	fa1,112(sp)
    2040292e:	b4b2                	fsd	fa2,104(sp)
    20402930:	b0b6                	fsd	fa3,96(sp)
    20402932:	acba                	fsd	fa4,88(sp)
    20402934:	a8be                	fsd	fa5,80(sp)
    20402936:	a4c2                	fsd	fa6,72(sp)
    20402938:	a0c6                	fsd	fa7,64(sp)
    2040293a:	bc72                	fsd	ft8,56(sp)
    2040293c:	b876                	fsd	ft9,48(sp)
    2040293e:	b47a                	fsd	ft10,40(sp)
    20402940:	b07e                	fsd	ft11,32(sp)
    20402942:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    20402944:	94dff0ef          	jal	ra,20402290 <__metal_myhart_id>
    20402948:	87aa                	mv	a5,a0
    2040294a:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    2040294e:	078e                	slli	a5,a5,0x3
    20402950:	97ba                	add	a5,a5,a4
    20402952:	639c                	ld	a5,0(a5)
    20402954:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
    20402958:	ec843783          	ld	a5,-312(s0)
    2040295c:	c78d                	beqz	a5,20402986 <metal_lc0_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    2040295e:	ec843503          	ld	a0,-312(s0)
    20402962:	8d5ff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20402966:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
    2040296a:	ec043783          	ld	a5,-320(s0)
    2040296e:	3287b783          	ld	a5,808(a5)
    20402972:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
    20402976:	ec043783          	ld	a5,-320(s0)
    2040297a:	3187b783          	ld	a5,792(a5)
    2040297e:	eb843583          	ld	a1,-328(s0)
    20402982:	4541                	li	a0,16
    20402984:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
    20402986:	0001                	nop
    20402988:	60b6                	ld	ra,328(sp)
    2040298a:	6296                	ld	t0,320(sp)
    2040298c:	7372                	ld	t1,312(sp)
    2040298e:	73d2                	ld	t2,304(sp)
    20402990:	7432                	ld	s0,296(sp)
    20402992:	7512                	ld	a0,288(sp)
    20402994:	65f2                	ld	a1,280(sp)
    20402996:	6652                	ld	a2,272(sp)
    20402998:	66b2                	ld	a3,264(sp)
    2040299a:	6712                	ld	a4,256(sp)
    2040299c:	77ee                	ld	a5,248(sp)
    2040299e:	784e                	ld	a6,240(sp)
    204029a0:	78ae                	ld	a7,232(sp)
    204029a2:	7e0e                	ld	t3,224(sp)
    204029a4:	6eee                	ld	t4,216(sp)
    204029a6:	6f4e                	ld	t5,208(sp)
    204029a8:	6fae                	ld	t6,200(sp)
    204029aa:	306a                	fld	ft0,184(sp)
    204029ac:	30ca                	fld	ft1,176(sp)
    204029ae:	312a                	fld	ft2,168(sp)
    204029b0:	318a                	fld	ft3,160(sp)
    204029b2:	226a                	fld	ft4,152(sp)
    204029b4:	22ca                	fld	ft5,144(sp)
    204029b6:	232a                	fld	ft6,136(sp)
    204029b8:	238a                	fld	ft7,128(sp)
    204029ba:	3566                	fld	fa0,120(sp)
    204029bc:	35c6                	fld	fa1,112(sp)
    204029be:	3626                	fld	fa2,104(sp)
    204029c0:	3686                	fld	fa3,96(sp)
    204029c2:	2766                	fld	fa4,88(sp)
    204029c4:	27c6                	fld	fa5,80(sp)
    204029c6:	2826                	fld	fa6,72(sp)
    204029c8:	2886                	fld	fa7,64(sp)
    204029ca:	3e62                	fld	ft8,56(sp)
    204029cc:	3ec2                	fld	ft9,48(sp)
    204029ce:	3f22                	fld	ft10,40(sp)
    204029d0:	3f82                	fld	ft11,32(sp)
    204029d2:	6171                	addi	sp,sp,336
    204029d4:	30200073          	mret

00000000204029d8 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
    204029d8:	714d                	addi	sp,sp,-336
    204029da:	e686                	sd	ra,328(sp)
    204029dc:	e296                	sd	t0,320(sp)
    204029de:	fe1a                	sd	t1,312(sp)
    204029e0:	fa1e                	sd	t2,304(sp)
    204029e2:	f622                	sd	s0,296(sp)
    204029e4:	f22a                	sd	a0,288(sp)
    204029e6:	ee2e                	sd	a1,280(sp)
    204029e8:	ea32                	sd	a2,272(sp)
    204029ea:	e636                	sd	a3,264(sp)
    204029ec:	e23a                	sd	a4,256(sp)
    204029ee:	fdbe                	sd	a5,248(sp)
    204029f0:	f9c2                	sd	a6,240(sp)
    204029f2:	f5c6                	sd	a7,232(sp)
    204029f4:	f1f2                	sd	t3,224(sp)
    204029f6:	edf6                	sd	t4,216(sp)
    204029f8:	e9fa                	sd	t5,208(sp)
    204029fa:	e5fe                	sd	t6,200(sp)
    204029fc:	bd02                	fsd	ft0,184(sp)
    204029fe:	b906                	fsd	ft1,176(sp)
    20402a00:	b50a                	fsd	ft2,168(sp)
    20402a02:	b10e                	fsd	ft3,160(sp)
    20402a04:	ad12                	fsd	ft4,152(sp)
    20402a06:	a916                	fsd	ft5,144(sp)
    20402a08:	a51a                	fsd	ft6,136(sp)
    20402a0a:	a11e                	fsd	ft7,128(sp)
    20402a0c:	bcaa                	fsd	fa0,120(sp)
    20402a0e:	b8ae                	fsd	fa1,112(sp)
    20402a10:	b4b2                	fsd	fa2,104(sp)
    20402a12:	b0b6                	fsd	fa3,96(sp)
    20402a14:	acba                	fsd	fa4,88(sp)
    20402a16:	a8be                	fsd	fa5,80(sp)
    20402a18:	a4c2                	fsd	fa6,72(sp)
    20402a1a:	a0c6                	fsd	fa7,64(sp)
    20402a1c:	bc72                	fsd	ft8,56(sp)
    20402a1e:	b876                	fsd	ft9,48(sp)
    20402a20:	b47a                	fsd	ft10,40(sp)
    20402a22:	b07e                	fsd	ft11,32(sp)
    20402a24:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    20402a26:	86bff0ef          	jal	ra,20402290 <__metal_myhart_id>
    20402a2a:	87aa                	mv	a5,a0
    20402a2c:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    20402a30:	078e                	slli	a5,a5,0x3
    20402a32:	97ba                	add	a5,a5,a4
    20402a34:	639c                	ld	a5,0(a5)
    20402a36:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
    20402a3a:	ec843783          	ld	a5,-312(s0)
    20402a3e:	c78d                	beqz	a5,20402a68 <metal_lc1_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    20402a40:	ec843503          	ld	a0,-312(s0)
    20402a44:	ff2ff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20402a48:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
    20402a4c:	ec043783          	ld	a5,-320(s0)
    20402a50:	3487b783          	ld	a5,840(a5)
    20402a54:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
    20402a58:	ec043783          	ld	a5,-320(s0)
    20402a5c:	3387b783          	ld	a5,824(a5)
    20402a60:	eb843583          	ld	a1,-328(s0)
    20402a64:	4545                	li	a0,17
    20402a66:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
    20402a68:	0001                	nop
    20402a6a:	60b6                	ld	ra,328(sp)
    20402a6c:	6296                	ld	t0,320(sp)
    20402a6e:	7372                	ld	t1,312(sp)
    20402a70:	73d2                	ld	t2,304(sp)
    20402a72:	7432                	ld	s0,296(sp)
    20402a74:	7512                	ld	a0,288(sp)
    20402a76:	65f2                	ld	a1,280(sp)
    20402a78:	6652                	ld	a2,272(sp)
    20402a7a:	66b2                	ld	a3,264(sp)
    20402a7c:	6712                	ld	a4,256(sp)
    20402a7e:	77ee                	ld	a5,248(sp)
    20402a80:	784e                	ld	a6,240(sp)
    20402a82:	78ae                	ld	a7,232(sp)
    20402a84:	7e0e                	ld	t3,224(sp)
    20402a86:	6eee                	ld	t4,216(sp)
    20402a88:	6f4e                	ld	t5,208(sp)
    20402a8a:	6fae                	ld	t6,200(sp)
    20402a8c:	306a                	fld	ft0,184(sp)
    20402a8e:	30ca                	fld	ft1,176(sp)
    20402a90:	312a                	fld	ft2,168(sp)
    20402a92:	318a                	fld	ft3,160(sp)
    20402a94:	226a                	fld	ft4,152(sp)
    20402a96:	22ca                	fld	ft5,144(sp)
    20402a98:	232a                	fld	ft6,136(sp)
    20402a9a:	238a                	fld	ft7,128(sp)
    20402a9c:	3566                	fld	fa0,120(sp)
    20402a9e:	35c6                	fld	fa1,112(sp)
    20402aa0:	3626                	fld	fa2,104(sp)
    20402aa2:	3686                	fld	fa3,96(sp)
    20402aa4:	2766                	fld	fa4,88(sp)
    20402aa6:	27c6                	fld	fa5,80(sp)
    20402aa8:	2826                	fld	fa6,72(sp)
    20402aaa:	2886                	fld	fa7,64(sp)
    20402aac:	3e62                	fld	ft8,56(sp)
    20402aae:	3ec2                	fld	ft9,48(sp)
    20402ab0:	3f22                	fld	ft10,40(sp)
    20402ab2:	3f82                	fld	ft11,32(sp)
    20402ab4:	6171                	addi	sp,sp,336
    20402ab6:	30200073          	mret

0000000020402aba <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
    20402aba:	714d                	addi	sp,sp,-336
    20402abc:	e686                	sd	ra,328(sp)
    20402abe:	e296                	sd	t0,320(sp)
    20402ac0:	fe1a                	sd	t1,312(sp)
    20402ac2:	fa1e                	sd	t2,304(sp)
    20402ac4:	f622                	sd	s0,296(sp)
    20402ac6:	f22a                	sd	a0,288(sp)
    20402ac8:	ee2e                	sd	a1,280(sp)
    20402aca:	ea32                	sd	a2,272(sp)
    20402acc:	e636                	sd	a3,264(sp)
    20402ace:	e23a                	sd	a4,256(sp)
    20402ad0:	fdbe                	sd	a5,248(sp)
    20402ad2:	f9c2                	sd	a6,240(sp)
    20402ad4:	f5c6                	sd	a7,232(sp)
    20402ad6:	f1f2                	sd	t3,224(sp)
    20402ad8:	edf6                	sd	t4,216(sp)
    20402ada:	e9fa                	sd	t5,208(sp)
    20402adc:	e5fe                	sd	t6,200(sp)
    20402ade:	bd02                	fsd	ft0,184(sp)
    20402ae0:	b906                	fsd	ft1,176(sp)
    20402ae2:	b50a                	fsd	ft2,168(sp)
    20402ae4:	b10e                	fsd	ft3,160(sp)
    20402ae6:	ad12                	fsd	ft4,152(sp)
    20402ae8:	a916                	fsd	ft5,144(sp)
    20402aea:	a51a                	fsd	ft6,136(sp)
    20402aec:	a11e                	fsd	ft7,128(sp)
    20402aee:	bcaa                	fsd	fa0,120(sp)
    20402af0:	b8ae                	fsd	fa1,112(sp)
    20402af2:	b4b2                	fsd	fa2,104(sp)
    20402af4:	b0b6                	fsd	fa3,96(sp)
    20402af6:	acba                	fsd	fa4,88(sp)
    20402af8:	a8be                	fsd	fa5,80(sp)
    20402afa:	a4c2                	fsd	fa6,72(sp)
    20402afc:	a0c6                	fsd	fa7,64(sp)
    20402afe:	bc72                	fsd	ft8,56(sp)
    20402b00:	b876                	fsd	ft9,48(sp)
    20402b02:	b47a                	fsd	ft10,40(sp)
    20402b04:	b07e                	fsd	ft11,32(sp)
    20402b06:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    20402b08:	f88ff0ef          	jal	ra,20402290 <__metal_myhart_id>
    20402b0c:	87aa                	mv	a5,a0
    20402b0e:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    20402b12:	078e                	slli	a5,a5,0x3
    20402b14:	97ba                	add	a5,a5,a4
    20402b16:	639c                	ld	a5,0(a5)
    20402b18:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
    20402b1c:	ec843783          	ld	a5,-312(s0)
    20402b20:	c78d                	beqz	a5,20402b4a <metal_lc2_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    20402b22:	ec843503          	ld	a0,-312(s0)
    20402b26:	f10ff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20402b2a:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
    20402b2e:	ec043783          	ld	a5,-320(s0)
    20402b32:	3687b783          	ld	a5,872(a5)
    20402b36:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
    20402b3a:	ec043783          	ld	a5,-320(s0)
    20402b3e:	3587b783          	ld	a5,856(a5)
    20402b42:	eb843583          	ld	a1,-328(s0)
    20402b46:	4549                	li	a0,18
    20402b48:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
    20402b4a:	0001                	nop
    20402b4c:	60b6                	ld	ra,328(sp)
    20402b4e:	6296                	ld	t0,320(sp)
    20402b50:	7372                	ld	t1,312(sp)
    20402b52:	73d2                	ld	t2,304(sp)
    20402b54:	7432                	ld	s0,296(sp)
    20402b56:	7512                	ld	a0,288(sp)
    20402b58:	65f2                	ld	a1,280(sp)
    20402b5a:	6652                	ld	a2,272(sp)
    20402b5c:	66b2                	ld	a3,264(sp)
    20402b5e:	6712                	ld	a4,256(sp)
    20402b60:	77ee                	ld	a5,248(sp)
    20402b62:	784e                	ld	a6,240(sp)
    20402b64:	78ae                	ld	a7,232(sp)
    20402b66:	7e0e                	ld	t3,224(sp)
    20402b68:	6eee                	ld	t4,216(sp)
    20402b6a:	6f4e                	ld	t5,208(sp)
    20402b6c:	6fae                	ld	t6,200(sp)
    20402b6e:	306a                	fld	ft0,184(sp)
    20402b70:	30ca                	fld	ft1,176(sp)
    20402b72:	312a                	fld	ft2,168(sp)
    20402b74:	318a                	fld	ft3,160(sp)
    20402b76:	226a                	fld	ft4,152(sp)
    20402b78:	22ca                	fld	ft5,144(sp)
    20402b7a:	232a                	fld	ft6,136(sp)
    20402b7c:	238a                	fld	ft7,128(sp)
    20402b7e:	3566                	fld	fa0,120(sp)
    20402b80:	35c6                	fld	fa1,112(sp)
    20402b82:	3626                	fld	fa2,104(sp)
    20402b84:	3686                	fld	fa3,96(sp)
    20402b86:	2766                	fld	fa4,88(sp)
    20402b88:	27c6                	fld	fa5,80(sp)
    20402b8a:	2826                	fld	fa6,72(sp)
    20402b8c:	2886                	fld	fa7,64(sp)
    20402b8e:	3e62                	fld	ft8,56(sp)
    20402b90:	3ec2                	fld	ft9,48(sp)
    20402b92:	3f22                	fld	ft10,40(sp)
    20402b94:	3f82                	fld	ft11,32(sp)
    20402b96:	6171                	addi	sp,sp,336
    20402b98:	30200073          	mret

0000000020402b9c <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
    20402b9c:	714d                	addi	sp,sp,-336
    20402b9e:	e686                	sd	ra,328(sp)
    20402ba0:	e296                	sd	t0,320(sp)
    20402ba2:	fe1a                	sd	t1,312(sp)
    20402ba4:	fa1e                	sd	t2,304(sp)
    20402ba6:	f622                	sd	s0,296(sp)
    20402ba8:	f22a                	sd	a0,288(sp)
    20402baa:	ee2e                	sd	a1,280(sp)
    20402bac:	ea32                	sd	a2,272(sp)
    20402bae:	e636                	sd	a3,264(sp)
    20402bb0:	e23a                	sd	a4,256(sp)
    20402bb2:	fdbe                	sd	a5,248(sp)
    20402bb4:	f9c2                	sd	a6,240(sp)
    20402bb6:	f5c6                	sd	a7,232(sp)
    20402bb8:	f1f2                	sd	t3,224(sp)
    20402bba:	edf6                	sd	t4,216(sp)
    20402bbc:	e9fa                	sd	t5,208(sp)
    20402bbe:	e5fe                	sd	t6,200(sp)
    20402bc0:	bd02                	fsd	ft0,184(sp)
    20402bc2:	b906                	fsd	ft1,176(sp)
    20402bc4:	b50a                	fsd	ft2,168(sp)
    20402bc6:	b10e                	fsd	ft3,160(sp)
    20402bc8:	ad12                	fsd	ft4,152(sp)
    20402bca:	a916                	fsd	ft5,144(sp)
    20402bcc:	a51a                	fsd	ft6,136(sp)
    20402bce:	a11e                	fsd	ft7,128(sp)
    20402bd0:	bcaa                	fsd	fa0,120(sp)
    20402bd2:	b8ae                	fsd	fa1,112(sp)
    20402bd4:	b4b2                	fsd	fa2,104(sp)
    20402bd6:	b0b6                	fsd	fa3,96(sp)
    20402bd8:	acba                	fsd	fa4,88(sp)
    20402bda:	a8be                	fsd	fa5,80(sp)
    20402bdc:	a4c2                	fsd	fa6,72(sp)
    20402bde:	a0c6                	fsd	fa7,64(sp)
    20402be0:	bc72                	fsd	ft8,56(sp)
    20402be2:	b876                	fsd	ft9,48(sp)
    20402be4:	b47a                	fsd	ft10,40(sp)
    20402be6:	b07e                	fsd	ft11,32(sp)
    20402be8:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    20402bea:	ea6ff0ef          	jal	ra,20402290 <__metal_myhart_id>
    20402bee:	87aa                	mv	a5,a0
    20402bf0:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    20402bf4:	078e                	slli	a5,a5,0x3
    20402bf6:	97ba                	add	a5,a5,a4
    20402bf8:	639c                	ld	a5,0(a5)
    20402bfa:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
    20402bfe:	ec843783          	ld	a5,-312(s0)
    20402c02:	c78d                	beqz	a5,20402c2c <metal_lc3_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    20402c04:	ec843503          	ld	a0,-312(s0)
    20402c08:	e2eff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20402c0c:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
    20402c10:	ec043783          	ld	a5,-320(s0)
    20402c14:	3887b783          	ld	a5,904(a5)
    20402c18:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
    20402c1c:	ec043783          	ld	a5,-320(s0)
    20402c20:	3787b783          	ld	a5,888(a5)
    20402c24:	eb843583          	ld	a1,-328(s0)
    20402c28:	454d                	li	a0,19
    20402c2a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
    20402c2c:	0001                	nop
    20402c2e:	60b6                	ld	ra,328(sp)
    20402c30:	6296                	ld	t0,320(sp)
    20402c32:	7372                	ld	t1,312(sp)
    20402c34:	73d2                	ld	t2,304(sp)
    20402c36:	7432                	ld	s0,296(sp)
    20402c38:	7512                	ld	a0,288(sp)
    20402c3a:	65f2                	ld	a1,280(sp)
    20402c3c:	6652                	ld	a2,272(sp)
    20402c3e:	66b2                	ld	a3,264(sp)
    20402c40:	6712                	ld	a4,256(sp)
    20402c42:	77ee                	ld	a5,248(sp)
    20402c44:	784e                	ld	a6,240(sp)
    20402c46:	78ae                	ld	a7,232(sp)
    20402c48:	7e0e                	ld	t3,224(sp)
    20402c4a:	6eee                	ld	t4,216(sp)
    20402c4c:	6f4e                	ld	t5,208(sp)
    20402c4e:	6fae                	ld	t6,200(sp)
    20402c50:	306a                	fld	ft0,184(sp)
    20402c52:	30ca                	fld	ft1,176(sp)
    20402c54:	312a                	fld	ft2,168(sp)
    20402c56:	318a                	fld	ft3,160(sp)
    20402c58:	226a                	fld	ft4,152(sp)
    20402c5a:	22ca                	fld	ft5,144(sp)
    20402c5c:	232a                	fld	ft6,136(sp)
    20402c5e:	238a                	fld	ft7,128(sp)
    20402c60:	3566                	fld	fa0,120(sp)
    20402c62:	35c6                	fld	fa1,112(sp)
    20402c64:	3626                	fld	fa2,104(sp)
    20402c66:	3686                	fld	fa3,96(sp)
    20402c68:	2766                	fld	fa4,88(sp)
    20402c6a:	27c6                	fld	fa5,80(sp)
    20402c6c:	2826                	fld	fa6,72(sp)
    20402c6e:	2886                	fld	fa7,64(sp)
    20402c70:	3e62                	fld	ft8,56(sp)
    20402c72:	3ec2                	fld	ft9,48(sp)
    20402c74:	3f22                	fld	ft10,40(sp)
    20402c76:	3f82                	fld	ft11,32(sp)
    20402c78:	6171                	addi	sp,sp,336
    20402c7a:	30200073          	mret

0000000020402c7e <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
    20402c7e:	714d                	addi	sp,sp,-336
    20402c80:	e686                	sd	ra,328(sp)
    20402c82:	e296                	sd	t0,320(sp)
    20402c84:	fe1a                	sd	t1,312(sp)
    20402c86:	fa1e                	sd	t2,304(sp)
    20402c88:	f622                	sd	s0,296(sp)
    20402c8a:	f22a                	sd	a0,288(sp)
    20402c8c:	ee2e                	sd	a1,280(sp)
    20402c8e:	ea32                	sd	a2,272(sp)
    20402c90:	e636                	sd	a3,264(sp)
    20402c92:	e23a                	sd	a4,256(sp)
    20402c94:	fdbe                	sd	a5,248(sp)
    20402c96:	f9c2                	sd	a6,240(sp)
    20402c98:	f5c6                	sd	a7,232(sp)
    20402c9a:	f1f2                	sd	t3,224(sp)
    20402c9c:	edf6                	sd	t4,216(sp)
    20402c9e:	e9fa                	sd	t5,208(sp)
    20402ca0:	e5fe                	sd	t6,200(sp)
    20402ca2:	bd02                	fsd	ft0,184(sp)
    20402ca4:	b906                	fsd	ft1,176(sp)
    20402ca6:	b50a                	fsd	ft2,168(sp)
    20402ca8:	b10e                	fsd	ft3,160(sp)
    20402caa:	ad12                	fsd	ft4,152(sp)
    20402cac:	a916                	fsd	ft5,144(sp)
    20402cae:	a51a                	fsd	ft6,136(sp)
    20402cb0:	a11e                	fsd	ft7,128(sp)
    20402cb2:	bcaa                	fsd	fa0,120(sp)
    20402cb4:	b8ae                	fsd	fa1,112(sp)
    20402cb6:	b4b2                	fsd	fa2,104(sp)
    20402cb8:	b0b6                	fsd	fa3,96(sp)
    20402cba:	acba                	fsd	fa4,88(sp)
    20402cbc:	a8be                	fsd	fa5,80(sp)
    20402cbe:	a4c2                	fsd	fa6,72(sp)
    20402cc0:	a0c6                	fsd	fa7,64(sp)
    20402cc2:	bc72                	fsd	ft8,56(sp)
    20402cc4:	b876                	fsd	ft9,48(sp)
    20402cc6:	b47a                	fsd	ft10,40(sp)
    20402cc8:	b07e                	fsd	ft11,32(sp)
    20402cca:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    20402ccc:	dc4ff0ef          	jal	ra,20402290 <__metal_myhart_id>
    20402cd0:	87aa                	mv	a5,a0
    20402cd2:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    20402cd6:	078e                	slli	a5,a5,0x3
    20402cd8:	97ba                	add	a5,a5,a4
    20402cda:	639c                	ld	a5,0(a5)
    20402cdc:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
    20402ce0:	ec843783          	ld	a5,-312(s0)
    20402ce4:	c78d                	beqz	a5,20402d0e <metal_lc4_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    20402ce6:	ec843503          	ld	a0,-312(s0)
    20402cea:	d4cff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20402cee:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
    20402cf2:	ec043783          	ld	a5,-320(s0)
    20402cf6:	3a87b783          	ld	a5,936(a5)
    20402cfa:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
    20402cfe:	ec043783          	ld	a5,-320(s0)
    20402d02:	3987b783          	ld	a5,920(a5)
    20402d06:	eb843583          	ld	a1,-328(s0)
    20402d0a:	4551                	li	a0,20
    20402d0c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
    20402d0e:	0001                	nop
    20402d10:	60b6                	ld	ra,328(sp)
    20402d12:	6296                	ld	t0,320(sp)
    20402d14:	7372                	ld	t1,312(sp)
    20402d16:	73d2                	ld	t2,304(sp)
    20402d18:	7432                	ld	s0,296(sp)
    20402d1a:	7512                	ld	a0,288(sp)
    20402d1c:	65f2                	ld	a1,280(sp)
    20402d1e:	6652                	ld	a2,272(sp)
    20402d20:	66b2                	ld	a3,264(sp)
    20402d22:	6712                	ld	a4,256(sp)
    20402d24:	77ee                	ld	a5,248(sp)
    20402d26:	784e                	ld	a6,240(sp)
    20402d28:	78ae                	ld	a7,232(sp)
    20402d2a:	7e0e                	ld	t3,224(sp)
    20402d2c:	6eee                	ld	t4,216(sp)
    20402d2e:	6f4e                	ld	t5,208(sp)
    20402d30:	6fae                	ld	t6,200(sp)
    20402d32:	306a                	fld	ft0,184(sp)
    20402d34:	30ca                	fld	ft1,176(sp)
    20402d36:	312a                	fld	ft2,168(sp)
    20402d38:	318a                	fld	ft3,160(sp)
    20402d3a:	226a                	fld	ft4,152(sp)
    20402d3c:	22ca                	fld	ft5,144(sp)
    20402d3e:	232a                	fld	ft6,136(sp)
    20402d40:	238a                	fld	ft7,128(sp)
    20402d42:	3566                	fld	fa0,120(sp)
    20402d44:	35c6                	fld	fa1,112(sp)
    20402d46:	3626                	fld	fa2,104(sp)
    20402d48:	3686                	fld	fa3,96(sp)
    20402d4a:	2766                	fld	fa4,88(sp)
    20402d4c:	27c6                	fld	fa5,80(sp)
    20402d4e:	2826                	fld	fa6,72(sp)
    20402d50:	2886                	fld	fa7,64(sp)
    20402d52:	3e62                	fld	ft8,56(sp)
    20402d54:	3ec2                	fld	ft9,48(sp)
    20402d56:	3f22                	fld	ft10,40(sp)
    20402d58:	3f82                	fld	ft11,32(sp)
    20402d5a:	6171                	addi	sp,sp,336
    20402d5c:	30200073          	mret

0000000020402d60 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
    20402d60:	714d                	addi	sp,sp,-336
    20402d62:	e686                	sd	ra,328(sp)
    20402d64:	e296                	sd	t0,320(sp)
    20402d66:	fe1a                	sd	t1,312(sp)
    20402d68:	fa1e                	sd	t2,304(sp)
    20402d6a:	f622                	sd	s0,296(sp)
    20402d6c:	f22a                	sd	a0,288(sp)
    20402d6e:	ee2e                	sd	a1,280(sp)
    20402d70:	ea32                	sd	a2,272(sp)
    20402d72:	e636                	sd	a3,264(sp)
    20402d74:	e23a                	sd	a4,256(sp)
    20402d76:	fdbe                	sd	a5,248(sp)
    20402d78:	f9c2                	sd	a6,240(sp)
    20402d7a:	f5c6                	sd	a7,232(sp)
    20402d7c:	f1f2                	sd	t3,224(sp)
    20402d7e:	edf6                	sd	t4,216(sp)
    20402d80:	e9fa                	sd	t5,208(sp)
    20402d82:	e5fe                	sd	t6,200(sp)
    20402d84:	bd02                	fsd	ft0,184(sp)
    20402d86:	b906                	fsd	ft1,176(sp)
    20402d88:	b50a                	fsd	ft2,168(sp)
    20402d8a:	b10e                	fsd	ft3,160(sp)
    20402d8c:	ad12                	fsd	ft4,152(sp)
    20402d8e:	a916                	fsd	ft5,144(sp)
    20402d90:	a51a                	fsd	ft6,136(sp)
    20402d92:	a11e                	fsd	ft7,128(sp)
    20402d94:	bcaa                	fsd	fa0,120(sp)
    20402d96:	b8ae                	fsd	fa1,112(sp)
    20402d98:	b4b2                	fsd	fa2,104(sp)
    20402d9a:	b0b6                	fsd	fa3,96(sp)
    20402d9c:	acba                	fsd	fa4,88(sp)
    20402d9e:	a8be                	fsd	fa5,80(sp)
    20402da0:	a4c2                	fsd	fa6,72(sp)
    20402da2:	a0c6                	fsd	fa7,64(sp)
    20402da4:	bc72                	fsd	ft8,56(sp)
    20402da6:	b876                	fsd	ft9,48(sp)
    20402da8:	b47a                	fsd	ft10,40(sp)
    20402daa:	b07e                	fsd	ft11,32(sp)
    20402dac:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    20402dae:	ce2ff0ef          	jal	ra,20402290 <__metal_myhart_id>
    20402db2:	87aa                	mv	a5,a0
    20402db4:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    20402db8:	078e                	slli	a5,a5,0x3
    20402dba:	97ba                	add	a5,a5,a4
    20402dbc:	639c                	ld	a5,0(a5)
    20402dbe:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
    20402dc2:	ec843783          	ld	a5,-312(s0)
    20402dc6:	c78d                	beqz	a5,20402df0 <metal_lc5_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    20402dc8:	ec843503          	ld	a0,-312(s0)
    20402dcc:	c6aff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20402dd0:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
    20402dd4:	ec043783          	ld	a5,-320(s0)
    20402dd8:	3c87b783          	ld	a5,968(a5)
    20402ddc:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
    20402de0:	ec043783          	ld	a5,-320(s0)
    20402de4:	3b87b783          	ld	a5,952(a5)
    20402de8:	eb843583          	ld	a1,-328(s0)
    20402dec:	4555                	li	a0,21
    20402dee:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
    20402df0:	0001                	nop
    20402df2:	60b6                	ld	ra,328(sp)
    20402df4:	6296                	ld	t0,320(sp)
    20402df6:	7372                	ld	t1,312(sp)
    20402df8:	73d2                	ld	t2,304(sp)
    20402dfa:	7432                	ld	s0,296(sp)
    20402dfc:	7512                	ld	a0,288(sp)
    20402dfe:	65f2                	ld	a1,280(sp)
    20402e00:	6652                	ld	a2,272(sp)
    20402e02:	66b2                	ld	a3,264(sp)
    20402e04:	6712                	ld	a4,256(sp)
    20402e06:	77ee                	ld	a5,248(sp)
    20402e08:	784e                	ld	a6,240(sp)
    20402e0a:	78ae                	ld	a7,232(sp)
    20402e0c:	7e0e                	ld	t3,224(sp)
    20402e0e:	6eee                	ld	t4,216(sp)
    20402e10:	6f4e                	ld	t5,208(sp)
    20402e12:	6fae                	ld	t6,200(sp)
    20402e14:	306a                	fld	ft0,184(sp)
    20402e16:	30ca                	fld	ft1,176(sp)
    20402e18:	312a                	fld	ft2,168(sp)
    20402e1a:	318a                	fld	ft3,160(sp)
    20402e1c:	226a                	fld	ft4,152(sp)
    20402e1e:	22ca                	fld	ft5,144(sp)
    20402e20:	232a                	fld	ft6,136(sp)
    20402e22:	238a                	fld	ft7,128(sp)
    20402e24:	3566                	fld	fa0,120(sp)
    20402e26:	35c6                	fld	fa1,112(sp)
    20402e28:	3626                	fld	fa2,104(sp)
    20402e2a:	3686                	fld	fa3,96(sp)
    20402e2c:	2766                	fld	fa4,88(sp)
    20402e2e:	27c6                	fld	fa5,80(sp)
    20402e30:	2826                	fld	fa6,72(sp)
    20402e32:	2886                	fld	fa7,64(sp)
    20402e34:	3e62                	fld	ft8,56(sp)
    20402e36:	3ec2                	fld	ft9,48(sp)
    20402e38:	3f22                	fld	ft10,40(sp)
    20402e3a:	3f82                	fld	ft11,32(sp)
    20402e3c:	6171                	addi	sp,sp,336
    20402e3e:	30200073          	mret

0000000020402e42 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
    20402e42:	714d                	addi	sp,sp,-336
    20402e44:	e686                	sd	ra,328(sp)
    20402e46:	e296                	sd	t0,320(sp)
    20402e48:	fe1a                	sd	t1,312(sp)
    20402e4a:	fa1e                	sd	t2,304(sp)
    20402e4c:	f622                	sd	s0,296(sp)
    20402e4e:	f22a                	sd	a0,288(sp)
    20402e50:	ee2e                	sd	a1,280(sp)
    20402e52:	ea32                	sd	a2,272(sp)
    20402e54:	e636                	sd	a3,264(sp)
    20402e56:	e23a                	sd	a4,256(sp)
    20402e58:	fdbe                	sd	a5,248(sp)
    20402e5a:	f9c2                	sd	a6,240(sp)
    20402e5c:	f5c6                	sd	a7,232(sp)
    20402e5e:	f1f2                	sd	t3,224(sp)
    20402e60:	edf6                	sd	t4,216(sp)
    20402e62:	e9fa                	sd	t5,208(sp)
    20402e64:	e5fe                	sd	t6,200(sp)
    20402e66:	bd02                	fsd	ft0,184(sp)
    20402e68:	b906                	fsd	ft1,176(sp)
    20402e6a:	b50a                	fsd	ft2,168(sp)
    20402e6c:	b10e                	fsd	ft3,160(sp)
    20402e6e:	ad12                	fsd	ft4,152(sp)
    20402e70:	a916                	fsd	ft5,144(sp)
    20402e72:	a51a                	fsd	ft6,136(sp)
    20402e74:	a11e                	fsd	ft7,128(sp)
    20402e76:	bcaa                	fsd	fa0,120(sp)
    20402e78:	b8ae                	fsd	fa1,112(sp)
    20402e7a:	b4b2                	fsd	fa2,104(sp)
    20402e7c:	b0b6                	fsd	fa3,96(sp)
    20402e7e:	acba                	fsd	fa4,88(sp)
    20402e80:	a8be                	fsd	fa5,80(sp)
    20402e82:	a4c2                	fsd	fa6,72(sp)
    20402e84:	a0c6                	fsd	fa7,64(sp)
    20402e86:	bc72                	fsd	ft8,56(sp)
    20402e88:	b876                	fsd	ft9,48(sp)
    20402e8a:	b47a                	fsd	ft10,40(sp)
    20402e8c:	b07e                	fsd	ft11,32(sp)
    20402e8e:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    20402e90:	c00ff0ef          	jal	ra,20402290 <__metal_myhart_id>
    20402e94:	87aa                	mv	a5,a0
    20402e96:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    20402e9a:	078e                	slli	a5,a5,0x3
    20402e9c:	97ba                	add	a5,a5,a4
    20402e9e:	639c                	ld	a5,0(a5)
    20402ea0:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
    20402ea4:	ec843783          	ld	a5,-312(s0)
    20402ea8:	c78d                	beqz	a5,20402ed2 <metal_lc6_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    20402eaa:	ec843503          	ld	a0,-312(s0)
    20402eae:	b88ff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20402eb2:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
    20402eb6:	ec043783          	ld	a5,-320(s0)
    20402eba:	3e87b783          	ld	a5,1000(a5)
    20402ebe:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
    20402ec2:	ec043783          	ld	a5,-320(s0)
    20402ec6:	3d87b783          	ld	a5,984(a5)
    20402eca:	eb843583          	ld	a1,-328(s0)
    20402ece:	4559                	li	a0,22
    20402ed0:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
    20402ed2:	0001                	nop
    20402ed4:	60b6                	ld	ra,328(sp)
    20402ed6:	6296                	ld	t0,320(sp)
    20402ed8:	7372                	ld	t1,312(sp)
    20402eda:	73d2                	ld	t2,304(sp)
    20402edc:	7432                	ld	s0,296(sp)
    20402ede:	7512                	ld	a0,288(sp)
    20402ee0:	65f2                	ld	a1,280(sp)
    20402ee2:	6652                	ld	a2,272(sp)
    20402ee4:	66b2                	ld	a3,264(sp)
    20402ee6:	6712                	ld	a4,256(sp)
    20402ee8:	77ee                	ld	a5,248(sp)
    20402eea:	784e                	ld	a6,240(sp)
    20402eec:	78ae                	ld	a7,232(sp)
    20402eee:	7e0e                	ld	t3,224(sp)
    20402ef0:	6eee                	ld	t4,216(sp)
    20402ef2:	6f4e                	ld	t5,208(sp)
    20402ef4:	6fae                	ld	t6,200(sp)
    20402ef6:	306a                	fld	ft0,184(sp)
    20402ef8:	30ca                	fld	ft1,176(sp)
    20402efa:	312a                	fld	ft2,168(sp)
    20402efc:	318a                	fld	ft3,160(sp)
    20402efe:	226a                	fld	ft4,152(sp)
    20402f00:	22ca                	fld	ft5,144(sp)
    20402f02:	232a                	fld	ft6,136(sp)
    20402f04:	238a                	fld	ft7,128(sp)
    20402f06:	3566                	fld	fa0,120(sp)
    20402f08:	35c6                	fld	fa1,112(sp)
    20402f0a:	3626                	fld	fa2,104(sp)
    20402f0c:	3686                	fld	fa3,96(sp)
    20402f0e:	2766                	fld	fa4,88(sp)
    20402f10:	27c6                	fld	fa5,80(sp)
    20402f12:	2826                	fld	fa6,72(sp)
    20402f14:	2886                	fld	fa7,64(sp)
    20402f16:	3e62                	fld	ft8,56(sp)
    20402f18:	3ec2                	fld	ft9,48(sp)
    20402f1a:	3f22                	fld	ft10,40(sp)
    20402f1c:	3f82                	fld	ft11,32(sp)
    20402f1e:	6171                	addi	sp,sp,336
    20402f20:	30200073          	mret

0000000020402f24 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
    20402f24:	714d                	addi	sp,sp,-336
    20402f26:	e686                	sd	ra,328(sp)
    20402f28:	e296                	sd	t0,320(sp)
    20402f2a:	fe1a                	sd	t1,312(sp)
    20402f2c:	fa1e                	sd	t2,304(sp)
    20402f2e:	f622                	sd	s0,296(sp)
    20402f30:	f22a                	sd	a0,288(sp)
    20402f32:	ee2e                	sd	a1,280(sp)
    20402f34:	ea32                	sd	a2,272(sp)
    20402f36:	e636                	sd	a3,264(sp)
    20402f38:	e23a                	sd	a4,256(sp)
    20402f3a:	fdbe                	sd	a5,248(sp)
    20402f3c:	f9c2                	sd	a6,240(sp)
    20402f3e:	f5c6                	sd	a7,232(sp)
    20402f40:	f1f2                	sd	t3,224(sp)
    20402f42:	edf6                	sd	t4,216(sp)
    20402f44:	e9fa                	sd	t5,208(sp)
    20402f46:	e5fe                	sd	t6,200(sp)
    20402f48:	bd02                	fsd	ft0,184(sp)
    20402f4a:	b906                	fsd	ft1,176(sp)
    20402f4c:	b50a                	fsd	ft2,168(sp)
    20402f4e:	b10e                	fsd	ft3,160(sp)
    20402f50:	ad12                	fsd	ft4,152(sp)
    20402f52:	a916                	fsd	ft5,144(sp)
    20402f54:	a51a                	fsd	ft6,136(sp)
    20402f56:	a11e                	fsd	ft7,128(sp)
    20402f58:	bcaa                	fsd	fa0,120(sp)
    20402f5a:	b8ae                	fsd	fa1,112(sp)
    20402f5c:	b4b2                	fsd	fa2,104(sp)
    20402f5e:	b0b6                	fsd	fa3,96(sp)
    20402f60:	acba                	fsd	fa4,88(sp)
    20402f62:	a8be                	fsd	fa5,80(sp)
    20402f64:	a4c2                	fsd	fa6,72(sp)
    20402f66:	a0c6                	fsd	fa7,64(sp)
    20402f68:	bc72                	fsd	ft8,56(sp)
    20402f6a:	b876                	fsd	ft9,48(sp)
    20402f6c:	b47a                	fsd	ft10,40(sp)
    20402f6e:	b07e                	fsd	ft11,32(sp)
    20402f70:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    20402f72:	b1eff0ef          	jal	ra,20402290 <__metal_myhart_id>
    20402f76:	87aa                	mv	a5,a0
    20402f78:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    20402f7c:	078e                	slli	a5,a5,0x3
    20402f7e:	97ba                	add	a5,a5,a4
    20402f80:	639c                	ld	a5,0(a5)
    20402f82:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
    20402f86:	ec843783          	ld	a5,-312(s0)
    20402f8a:	c78d                	beqz	a5,20402fb4 <metal_lc7_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    20402f8c:	ec843503          	ld	a0,-312(s0)
    20402f90:	aa6ff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20402f94:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
    20402f98:	ec043783          	ld	a5,-320(s0)
    20402f9c:	4087b783          	ld	a5,1032(a5)
    20402fa0:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
    20402fa4:	ec043783          	ld	a5,-320(s0)
    20402fa8:	3f87b783          	ld	a5,1016(a5)
    20402fac:	eb843583          	ld	a1,-328(s0)
    20402fb0:	455d                	li	a0,23
    20402fb2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
    20402fb4:	0001                	nop
    20402fb6:	60b6                	ld	ra,328(sp)
    20402fb8:	6296                	ld	t0,320(sp)
    20402fba:	7372                	ld	t1,312(sp)
    20402fbc:	73d2                	ld	t2,304(sp)
    20402fbe:	7432                	ld	s0,296(sp)
    20402fc0:	7512                	ld	a0,288(sp)
    20402fc2:	65f2                	ld	a1,280(sp)
    20402fc4:	6652                	ld	a2,272(sp)
    20402fc6:	66b2                	ld	a3,264(sp)
    20402fc8:	6712                	ld	a4,256(sp)
    20402fca:	77ee                	ld	a5,248(sp)
    20402fcc:	784e                	ld	a6,240(sp)
    20402fce:	78ae                	ld	a7,232(sp)
    20402fd0:	7e0e                	ld	t3,224(sp)
    20402fd2:	6eee                	ld	t4,216(sp)
    20402fd4:	6f4e                	ld	t5,208(sp)
    20402fd6:	6fae                	ld	t6,200(sp)
    20402fd8:	306a                	fld	ft0,184(sp)
    20402fda:	30ca                	fld	ft1,176(sp)
    20402fdc:	312a                	fld	ft2,168(sp)
    20402fde:	318a                	fld	ft3,160(sp)
    20402fe0:	226a                	fld	ft4,152(sp)
    20402fe2:	22ca                	fld	ft5,144(sp)
    20402fe4:	232a                	fld	ft6,136(sp)
    20402fe6:	238a                	fld	ft7,128(sp)
    20402fe8:	3566                	fld	fa0,120(sp)
    20402fea:	35c6                	fld	fa1,112(sp)
    20402fec:	3626                	fld	fa2,104(sp)
    20402fee:	3686                	fld	fa3,96(sp)
    20402ff0:	2766                	fld	fa4,88(sp)
    20402ff2:	27c6                	fld	fa5,80(sp)
    20402ff4:	2826                	fld	fa6,72(sp)
    20402ff6:	2886                	fld	fa7,64(sp)
    20402ff8:	3e62                	fld	ft8,56(sp)
    20402ffa:	3ec2                	fld	ft9,48(sp)
    20402ffc:	3f22                	fld	ft10,40(sp)
    20402ffe:	3f82                	fld	ft11,32(sp)
    20403000:	6171                	addi	sp,sp,336
    20403002:	30200073          	mret

0000000020403006 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
    20403006:	714d                	addi	sp,sp,-336
    20403008:	e686                	sd	ra,328(sp)
    2040300a:	e296                	sd	t0,320(sp)
    2040300c:	fe1a                	sd	t1,312(sp)
    2040300e:	fa1e                	sd	t2,304(sp)
    20403010:	f622                	sd	s0,296(sp)
    20403012:	f22a                	sd	a0,288(sp)
    20403014:	ee2e                	sd	a1,280(sp)
    20403016:	ea32                	sd	a2,272(sp)
    20403018:	e636                	sd	a3,264(sp)
    2040301a:	e23a                	sd	a4,256(sp)
    2040301c:	fdbe                	sd	a5,248(sp)
    2040301e:	f9c2                	sd	a6,240(sp)
    20403020:	f5c6                	sd	a7,232(sp)
    20403022:	f1f2                	sd	t3,224(sp)
    20403024:	edf6                	sd	t4,216(sp)
    20403026:	e9fa                	sd	t5,208(sp)
    20403028:	e5fe                	sd	t6,200(sp)
    2040302a:	bd02                	fsd	ft0,184(sp)
    2040302c:	b906                	fsd	ft1,176(sp)
    2040302e:	b50a                	fsd	ft2,168(sp)
    20403030:	b10e                	fsd	ft3,160(sp)
    20403032:	ad12                	fsd	ft4,152(sp)
    20403034:	a916                	fsd	ft5,144(sp)
    20403036:	a51a                	fsd	ft6,136(sp)
    20403038:	a11e                	fsd	ft7,128(sp)
    2040303a:	bcaa                	fsd	fa0,120(sp)
    2040303c:	b8ae                	fsd	fa1,112(sp)
    2040303e:	b4b2                	fsd	fa2,104(sp)
    20403040:	b0b6                	fsd	fa3,96(sp)
    20403042:	acba                	fsd	fa4,88(sp)
    20403044:	a8be                	fsd	fa5,80(sp)
    20403046:	a4c2                	fsd	fa6,72(sp)
    20403048:	a0c6                	fsd	fa7,64(sp)
    2040304a:	bc72                	fsd	ft8,56(sp)
    2040304c:	b876                	fsd	ft9,48(sp)
    2040304e:	b47a                	fsd	ft10,40(sp)
    20403050:	b07e                	fsd	ft11,32(sp)
    20403052:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    20403054:	a3cff0ef          	jal	ra,20402290 <__metal_myhart_id>
    20403058:	87aa                	mv	a5,a0
    2040305a:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    2040305e:	078e                	slli	a5,a5,0x3
    20403060:	97ba                	add	a5,a5,a4
    20403062:	639c                	ld	a5,0(a5)
    20403064:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
    20403068:	ec843783          	ld	a5,-312(s0)
    2040306c:	c78d                	beqz	a5,20403096 <metal_lc8_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    2040306e:	ec843503          	ld	a0,-312(s0)
    20403072:	9c4ff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20403076:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
    2040307a:	ec043783          	ld	a5,-320(s0)
    2040307e:	4287b783          	ld	a5,1064(a5)
    20403082:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
    20403086:	ec043783          	ld	a5,-320(s0)
    2040308a:	4187b783          	ld	a5,1048(a5)
    2040308e:	eb843583          	ld	a1,-328(s0)
    20403092:	4561                	li	a0,24
    20403094:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
    20403096:	0001                	nop
    20403098:	60b6                	ld	ra,328(sp)
    2040309a:	6296                	ld	t0,320(sp)
    2040309c:	7372                	ld	t1,312(sp)
    2040309e:	73d2                	ld	t2,304(sp)
    204030a0:	7432                	ld	s0,296(sp)
    204030a2:	7512                	ld	a0,288(sp)
    204030a4:	65f2                	ld	a1,280(sp)
    204030a6:	6652                	ld	a2,272(sp)
    204030a8:	66b2                	ld	a3,264(sp)
    204030aa:	6712                	ld	a4,256(sp)
    204030ac:	77ee                	ld	a5,248(sp)
    204030ae:	784e                	ld	a6,240(sp)
    204030b0:	78ae                	ld	a7,232(sp)
    204030b2:	7e0e                	ld	t3,224(sp)
    204030b4:	6eee                	ld	t4,216(sp)
    204030b6:	6f4e                	ld	t5,208(sp)
    204030b8:	6fae                	ld	t6,200(sp)
    204030ba:	306a                	fld	ft0,184(sp)
    204030bc:	30ca                	fld	ft1,176(sp)
    204030be:	312a                	fld	ft2,168(sp)
    204030c0:	318a                	fld	ft3,160(sp)
    204030c2:	226a                	fld	ft4,152(sp)
    204030c4:	22ca                	fld	ft5,144(sp)
    204030c6:	232a                	fld	ft6,136(sp)
    204030c8:	238a                	fld	ft7,128(sp)
    204030ca:	3566                	fld	fa0,120(sp)
    204030cc:	35c6                	fld	fa1,112(sp)
    204030ce:	3626                	fld	fa2,104(sp)
    204030d0:	3686                	fld	fa3,96(sp)
    204030d2:	2766                	fld	fa4,88(sp)
    204030d4:	27c6                	fld	fa5,80(sp)
    204030d6:	2826                	fld	fa6,72(sp)
    204030d8:	2886                	fld	fa7,64(sp)
    204030da:	3e62                	fld	ft8,56(sp)
    204030dc:	3ec2                	fld	ft9,48(sp)
    204030de:	3f22                	fld	ft10,40(sp)
    204030e0:	3f82                	fld	ft11,32(sp)
    204030e2:	6171                	addi	sp,sp,336
    204030e4:	30200073          	mret

00000000204030e8 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
    204030e8:	714d                	addi	sp,sp,-336
    204030ea:	e686                	sd	ra,328(sp)
    204030ec:	e296                	sd	t0,320(sp)
    204030ee:	fe1a                	sd	t1,312(sp)
    204030f0:	fa1e                	sd	t2,304(sp)
    204030f2:	f622                	sd	s0,296(sp)
    204030f4:	f22a                	sd	a0,288(sp)
    204030f6:	ee2e                	sd	a1,280(sp)
    204030f8:	ea32                	sd	a2,272(sp)
    204030fa:	e636                	sd	a3,264(sp)
    204030fc:	e23a                	sd	a4,256(sp)
    204030fe:	fdbe                	sd	a5,248(sp)
    20403100:	f9c2                	sd	a6,240(sp)
    20403102:	f5c6                	sd	a7,232(sp)
    20403104:	f1f2                	sd	t3,224(sp)
    20403106:	edf6                	sd	t4,216(sp)
    20403108:	e9fa                	sd	t5,208(sp)
    2040310a:	e5fe                	sd	t6,200(sp)
    2040310c:	bd02                	fsd	ft0,184(sp)
    2040310e:	b906                	fsd	ft1,176(sp)
    20403110:	b50a                	fsd	ft2,168(sp)
    20403112:	b10e                	fsd	ft3,160(sp)
    20403114:	ad12                	fsd	ft4,152(sp)
    20403116:	a916                	fsd	ft5,144(sp)
    20403118:	a51a                	fsd	ft6,136(sp)
    2040311a:	a11e                	fsd	ft7,128(sp)
    2040311c:	bcaa                	fsd	fa0,120(sp)
    2040311e:	b8ae                	fsd	fa1,112(sp)
    20403120:	b4b2                	fsd	fa2,104(sp)
    20403122:	b0b6                	fsd	fa3,96(sp)
    20403124:	acba                	fsd	fa4,88(sp)
    20403126:	a8be                	fsd	fa5,80(sp)
    20403128:	a4c2                	fsd	fa6,72(sp)
    2040312a:	a0c6                	fsd	fa7,64(sp)
    2040312c:	bc72                	fsd	ft8,56(sp)
    2040312e:	b876                	fsd	ft9,48(sp)
    20403130:	b47a                	fsd	ft10,40(sp)
    20403132:	b07e                	fsd	ft11,32(sp)
    20403134:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    20403136:	95aff0ef          	jal	ra,20402290 <__metal_myhart_id>
    2040313a:	87aa                	mv	a5,a0
    2040313c:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    20403140:	078e                	slli	a5,a5,0x3
    20403142:	97ba                	add	a5,a5,a4
    20403144:	639c                	ld	a5,0(a5)
    20403146:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
    2040314a:	ec843783          	ld	a5,-312(s0)
    2040314e:	c78d                	beqz	a5,20403178 <metal_lc9_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    20403150:	ec843503          	ld	a0,-312(s0)
    20403154:	8e2ff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20403158:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
    2040315c:	ec043783          	ld	a5,-320(s0)
    20403160:	4487b783          	ld	a5,1096(a5)
    20403164:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
    20403168:	ec043783          	ld	a5,-320(s0)
    2040316c:	4387b783          	ld	a5,1080(a5)
    20403170:	eb843583          	ld	a1,-328(s0)
    20403174:	4565                	li	a0,25
    20403176:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
    20403178:	0001                	nop
    2040317a:	60b6                	ld	ra,328(sp)
    2040317c:	6296                	ld	t0,320(sp)
    2040317e:	7372                	ld	t1,312(sp)
    20403180:	73d2                	ld	t2,304(sp)
    20403182:	7432                	ld	s0,296(sp)
    20403184:	7512                	ld	a0,288(sp)
    20403186:	65f2                	ld	a1,280(sp)
    20403188:	6652                	ld	a2,272(sp)
    2040318a:	66b2                	ld	a3,264(sp)
    2040318c:	6712                	ld	a4,256(sp)
    2040318e:	77ee                	ld	a5,248(sp)
    20403190:	784e                	ld	a6,240(sp)
    20403192:	78ae                	ld	a7,232(sp)
    20403194:	7e0e                	ld	t3,224(sp)
    20403196:	6eee                	ld	t4,216(sp)
    20403198:	6f4e                	ld	t5,208(sp)
    2040319a:	6fae                	ld	t6,200(sp)
    2040319c:	306a                	fld	ft0,184(sp)
    2040319e:	30ca                	fld	ft1,176(sp)
    204031a0:	312a                	fld	ft2,168(sp)
    204031a2:	318a                	fld	ft3,160(sp)
    204031a4:	226a                	fld	ft4,152(sp)
    204031a6:	22ca                	fld	ft5,144(sp)
    204031a8:	232a                	fld	ft6,136(sp)
    204031aa:	238a                	fld	ft7,128(sp)
    204031ac:	3566                	fld	fa0,120(sp)
    204031ae:	35c6                	fld	fa1,112(sp)
    204031b0:	3626                	fld	fa2,104(sp)
    204031b2:	3686                	fld	fa3,96(sp)
    204031b4:	2766                	fld	fa4,88(sp)
    204031b6:	27c6                	fld	fa5,80(sp)
    204031b8:	2826                	fld	fa6,72(sp)
    204031ba:	2886                	fld	fa7,64(sp)
    204031bc:	3e62                	fld	ft8,56(sp)
    204031be:	3ec2                	fld	ft9,48(sp)
    204031c0:	3f22                	fld	ft10,40(sp)
    204031c2:	3f82                	fld	ft11,32(sp)
    204031c4:	6171                	addi	sp,sp,336
    204031c6:	30200073          	mret

00000000204031ca <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
    204031ca:	714d                	addi	sp,sp,-336
    204031cc:	e686                	sd	ra,328(sp)
    204031ce:	e296                	sd	t0,320(sp)
    204031d0:	fe1a                	sd	t1,312(sp)
    204031d2:	fa1e                	sd	t2,304(sp)
    204031d4:	f622                	sd	s0,296(sp)
    204031d6:	f22a                	sd	a0,288(sp)
    204031d8:	ee2e                	sd	a1,280(sp)
    204031da:	ea32                	sd	a2,272(sp)
    204031dc:	e636                	sd	a3,264(sp)
    204031de:	e23a                	sd	a4,256(sp)
    204031e0:	fdbe                	sd	a5,248(sp)
    204031e2:	f9c2                	sd	a6,240(sp)
    204031e4:	f5c6                	sd	a7,232(sp)
    204031e6:	f1f2                	sd	t3,224(sp)
    204031e8:	edf6                	sd	t4,216(sp)
    204031ea:	e9fa                	sd	t5,208(sp)
    204031ec:	e5fe                	sd	t6,200(sp)
    204031ee:	bd02                	fsd	ft0,184(sp)
    204031f0:	b906                	fsd	ft1,176(sp)
    204031f2:	b50a                	fsd	ft2,168(sp)
    204031f4:	b10e                	fsd	ft3,160(sp)
    204031f6:	ad12                	fsd	ft4,152(sp)
    204031f8:	a916                	fsd	ft5,144(sp)
    204031fa:	a51a                	fsd	ft6,136(sp)
    204031fc:	a11e                	fsd	ft7,128(sp)
    204031fe:	bcaa                	fsd	fa0,120(sp)
    20403200:	b8ae                	fsd	fa1,112(sp)
    20403202:	b4b2                	fsd	fa2,104(sp)
    20403204:	b0b6                	fsd	fa3,96(sp)
    20403206:	acba                	fsd	fa4,88(sp)
    20403208:	a8be                	fsd	fa5,80(sp)
    2040320a:	a4c2                	fsd	fa6,72(sp)
    2040320c:	a0c6                	fsd	fa7,64(sp)
    2040320e:	bc72                	fsd	ft8,56(sp)
    20403210:	b876                	fsd	ft9,48(sp)
    20403212:	b47a                	fsd	ft10,40(sp)
    20403214:	b07e                	fsd	ft11,32(sp)
    20403216:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    20403218:	878ff0ef          	jal	ra,20402290 <__metal_myhart_id>
    2040321c:	87aa                	mv	a5,a0
    2040321e:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    20403222:	078e                	slli	a5,a5,0x3
    20403224:	97ba                	add	a5,a5,a4
    20403226:	639c                	ld	a5,0(a5)
    20403228:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
    2040322c:	ec843783          	ld	a5,-312(s0)
    20403230:	c78d                	beqz	a5,2040325a <metal_lc10_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    20403232:	ec843503          	ld	a0,-312(s0)
    20403236:	800ff0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    2040323a:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
    2040323e:	ec043783          	ld	a5,-320(s0)
    20403242:	4687b783          	ld	a5,1128(a5)
    20403246:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
    2040324a:	ec043783          	ld	a5,-320(s0)
    2040324e:	4587b783          	ld	a5,1112(a5)
    20403252:	eb843583          	ld	a1,-328(s0)
    20403256:	4569                	li	a0,26
    20403258:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
    2040325a:	0001                	nop
    2040325c:	60b6                	ld	ra,328(sp)
    2040325e:	6296                	ld	t0,320(sp)
    20403260:	7372                	ld	t1,312(sp)
    20403262:	73d2                	ld	t2,304(sp)
    20403264:	7432                	ld	s0,296(sp)
    20403266:	7512                	ld	a0,288(sp)
    20403268:	65f2                	ld	a1,280(sp)
    2040326a:	6652                	ld	a2,272(sp)
    2040326c:	66b2                	ld	a3,264(sp)
    2040326e:	6712                	ld	a4,256(sp)
    20403270:	77ee                	ld	a5,248(sp)
    20403272:	784e                	ld	a6,240(sp)
    20403274:	78ae                	ld	a7,232(sp)
    20403276:	7e0e                	ld	t3,224(sp)
    20403278:	6eee                	ld	t4,216(sp)
    2040327a:	6f4e                	ld	t5,208(sp)
    2040327c:	6fae                	ld	t6,200(sp)
    2040327e:	306a                	fld	ft0,184(sp)
    20403280:	30ca                	fld	ft1,176(sp)
    20403282:	312a                	fld	ft2,168(sp)
    20403284:	318a                	fld	ft3,160(sp)
    20403286:	226a                	fld	ft4,152(sp)
    20403288:	22ca                	fld	ft5,144(sp)
    2040328a:	232a                	fld	ft6,136(sp)
    2040328c:	238a                	fld	ft7,128(sp)
    2040328e:	3566                	fld	fa0,120(sp)
    20403290:	35c6                	fld	fa1,112(sp)
    20403292:	3626                	fld	fa2,104(sp)
    20403294:	3686                	fld	fa3,96(sp)
    20403296:	2766                	fld	fa4,88(sp)
    20403298:	27c6                	fld	fa5,80(sp)
    2040329a:	2826                	fld	fa6,72(sp)
    2040329c:	2886                	fld	fa7,64(sp)
    2040329e:	3e62                	fld	ft8,56(sp)
    204032a0:	3ec2                	fld	ft9,48(sp)
    204032a2:	3f22                	fld	ft10,40(sp)
    204032a4:	3f82                	fld	ft11,32(sp)
    204032a6:	6171                	addi	sp,sp,336
    204032a8:	30200073          	mret

00000000204032ac <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
    204032ac:	714d                	addi	sp,sp,-336
    204032ae:	e686                	sd	ra,328(sp)
    204032b0:	e296                	sd	t0,320(sp)
    204032b2:	fe1a                	sd	t1,312(sp)
    204032b4:	fa1e                	sd	t2,304(sp)
    204032b6:	f622                	sd	s0,296(sp)
    204032b8:	f22a                	sd	a0,288(sp)
    204032ba:	ee2e                	sd	a1,280(sp)
    204032bc:	ea32                	sd	a2,272(sp)
    204032be:	e636                	sd	a3,264(sp)
    204032c0:	e23a                	sd	a4,256(sp)
    204032c2:	fdbe                	sd	a5,248(sp)
    204032c4:	f9c2                	sd	a6,240(sp)
    204032c6:	f5c6                	sd	a7,232(sp)
    204032c8:	f1f2                	sd	t3,224(sp)
    204032ca:	edf6                	sd	t4,216(sp)
    204032cc:	e9fa                	sd	t5,208(sp)
    204032ce:	e5fe                	sd	t6,200(sp)
    204032d0:	bd02                	fsd	ft0,184(sp)
    204032d2:	b906                	fsd	ft1,176(sp)
    204032d4:	b50a                	fsd	ft2,168(sp)
    204032d6:	b10e                	fsd	ft3,160(sp)
    204032d8:	ad12                	fsd	ft4,152(sp)
    204032da:	a916                	fsd	ft5,144(sp)
    204032dc:	a51a                	fsd	ft6,136(sp)
    204032de:	a11e                	fsd	ft7,128(sp)
    204032e0:	bcaa                	fsd	fa0,120(sp)
    204032e2:	b8ae                	fsd	fa1,112(sp)
    204032e4:	b4b2                	fsd	fa2,104(sp)
    204032e6:	b0b6                	fsd	fa3,96(sp)
    204032e8:	acba                	fsd	fa4,88(sp)
    204032ea:	a8be                	fsd	fa5,80(sp)
    204032ec:	a4c2                	fsd	fa6,72(sp)
    204032ee:	a0c6                	fsd	fa7,64(sp)
    204032f0:	bc72                	fsd	ft8,56(sp)
    204032f2:	b876                	fsd	ft9,48(sp)
    204032f4:	b47a                	fsd	ft10,40(sp)
    204032f6:	b07e                	fsd	ft11,32(sp)
    204032f8:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    204032fa:	f97fe0ef          	jal	ra,20402290 <__metal_myhart_id>
    204032fe:	87aa                	mv	a5,a0
    20403300:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    20403304:	078e                	slli	a5,a5,0x3
    20403306:	97ba                	add	a5,a5,a4
    20403308:	639c                	ld	a5,0(a5)
    2040330a:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
    2040330e:	ec843783          	ld	a5,-312(s0)
    20403312:	c78d                	beqz	a5,2040333c <metal_lc11_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    20403314:	ec843503          	ld	a0,-312(s0)
    20403318:	f1ffe0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    2040331c:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
    20403320:	ec043783          	ld	a5,-320(s0)
    20403324:	4887b783          	ld	a5,1160(a5)
    20403328:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
    2040332c:	ec043783          	ld	a5,-320(s0)
    20403330:	4787b783          	ld	a5,1144(a5)
    20403334:	eb843583          	ld	a1,-328(s0)
    20403338:	456d                	li	a0,27
    2040333a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
    2040333c:	0001                	nop
    2040333e:	60b6                	ld	ra,328(sp)
    20403340:	6296                	ld	t0,320(sp)
    20403342:	7372                	ld	t1,312(sp)
    20403344:	73d2                	ld	t2,304(sp)
    20403346:	7432                	ld	s0,296(sp)
    20403348:	7512                	ld	a0,288(sp)
    2040334a:	65f2                	ld	a1,280(sp)
    2040334c:	6652                	ld	a2,272(sp)
    2040334e:	66b2                	ld	a3,264(sp)
    20403350:	6712                	ld	a4,256(sp)
    20403352:	77ee                	ld	a5,248(sp)
    20403354:	784e                	ld	a6,240(sp)
    20403356:	78ae                	ld	a7,232(sp)
    20403358:	7e0e                	ld	t3,224(sp)
    2040335a:	6eee                	ld	t4,216(sp)
    2040335c:	6f4e                	ld	t5,208(sp)
    2040335e:	6fae                	ld	t6,200(sp)
    20403360:	306a                	fld	ft0,184(sp)
    20403362:	30ca                	fld	ft1,176(sp)
    20403364:	312a                	fld	ft2,168(sp)
    20403366:	318a                	fld	ft3,160(sp)
    20403368:	226a                	fld	ft4,152(sp)
    2040336a:	22ca                	fld	ft5,144(sp)
    2040336c:	232a                	fld	ft6,136(sp)
    2040336e:	238a                	fld	ft7,128(sp)
    20403370:	3566                	fld	fa0,120(sp)
    20403372:	35c6                	fld	fa1,112(sp)
    20403374:	3626                	fld	fa2,104(sp)
    20403376:	3686                	fld	fa3,96(sp)
    20403378:	2766                	fld	fa4,88(sp)
    2040337a:	27c6                	fld	fa5,80(sp)
    2040337c:	2826                	fld	fa6,72(sp)
    2040337e:	2886                	fld	fa7,64(sp)
    20403380:	3e62                	fld	ft8,56(sp)
    20403382:	3ec2                	fld	ft9,48(sp)
    20403384:	3f22                	fld	ft10,40(sp)
    20403386:	3f82                	fld	ft11,32(sp)
    20403388:	6171                	addi	sp,sp,336
    2040338a:	30200073          	mret

000000002040338e <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
    2040338e:	714d                	addi	sp,sp,-336
    20403390:	e686                	sd	ra,328(sp)
    20403392:	e296                	sd	t0,320(sp)
    20403394:	fe1a                	sd	t1,312(sp)
    20403396:	fa1e                	sd	t2,304(sp)
    20403398:	f622                	sd	s0,296(sp)
    2040339a:	f22a                	sd	a0,288(sp)
    2040339c:	ee2e                	sd	a1,280(sp)
    2040339e:	ea32                	sd	a2,272(sp)
    204033a0:	e636                	sd	a3,264(sp)
    204033a2:	e23a                	sd	a4,256(sp)
    204033a4:	fdbe                	sd	a5,248(sp)
    204033a6:	f9c2                	sd	a6,240(sp)
    204033a8:	f5c6                	sd	a7,232(sp)
    204033aa:	f1f2                	sd	t3,224(sp)
    204033ac:	edf6                	sd	t4,216(sp)
    204033ae:	e9fa                	sd	t5,208(sp)
    204033b0:	e5fe                	sd	t6,200(sp)
    204033b2:	bd02                	fsd	ft0,184(sp)
    204033b4:	b906                	fsd	ft1,176(sp)
    204033b6:	b50a                	fsd	ft2,168(sp)
    204033b8:	b10e                	fsd	ft3,160(sp)
    204033ba:	ad12                	fsd	ft4,152(sp)
    204033bc:	a916                	fsd	ft5,144(sp)
    204033be:	a51a                	fsd	ft6,136(sp)
    204033c0:	a11e                	fsd	ft7,128(sp)
    204033c2:	bcaa                	fsd	fa0,120(sp)
    204033c4:	b8ae                	fsd	fa1,112(sp)
    204033c6:	b4b2                	fsd	fa2,104(sp)
    204033c8:	b0b6                	fsd	fa3,96(sp)
    204033ca:	acba                	fsd	fa4,88(sp)
    204033cc:	a8be                	fsd	fa5,80(sp)
    204033ce:	a4c2                	fsd	fa6,72(sp)
    204033d0:	a0c6                	fsd	fa7,64(sp)
    204033d2:	bc72                	fsd	ft8,56(sp)
    204033d4:	b876                	fsd	ft9,48(sp)
    204033d6:	b47a                	fsd	ft10,40(sp)
    204033d8:	b07e                	fsd	ft11,32(sp)
    204033da:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    204033dc:	eb5fe0ef          	jal	ra,20402290 <__metal_myhart_id>
    204033e0:	87aa                	mv	a5,a0
    204033e2:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    204033e6:	078e                	slli	a5,a5,0x3
    204033e8:	97ba                	add	a5,a5,a4
    204033ea:	639c                	ld	a5,0(a5)
    204033ec:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
    204033f0:	ec843783          	ld	a5,-312(s0)
    204033f4:	c78d                	beqz	a5,2040341e <metal_lc12_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    204033f6:	ec843503          	ld	a0,-312(s0)
    204033fa:	e3dfe0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    204033fe:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
    20403402:	ec043783          	ld	a5,-320(s0)
    20403406:	4a87b783          	ld	a5,1192(a5)
    2040340a:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
    2040340e:	ec043783          	ld	a5,-320(s0)
    20403412:	4987b783          	ld	a5,1176(a5)
    20403416:	eb843583          	ld	a1,-328(s0)
    2040341a:	4571                	li	a0,28
    2040341c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
    2040341e:	0001                	nop
    20403420:	60b6                	ld	ra,328(sp)
    20403422:	6296                	ld	t0,320(sp)
    20403424:	7372                	ld	t1,312(sp)
    20403426:	73d2                	ld	t2,304(sp)
    20403428:	7432                	ld	s0,296(sp)
    2040342a:	7512                	ld	a0,288(sp)
    2040342c:	65f2                	ld	a1,280(sp)
    2040342e:	6652                	ld	a2,272(sp)
    20403430:	66b2                	ld	a3,264(sp)
    20403432:	6712                	ld	a4,256(sp)
    20403434:	77ee                	ld	a5,248(sp)
    20403436:	784e                	ld	a6,240(sp)
    20403438:	78ae                	ld	a7,232(sp)
    2040343a:	7e0e                	ld	t3,224(sp)
    2040343c:	6eee                	ld	t4,216(sp)
    2040343e:	6f4e                	ld	t5,208(sp)
    20403440:	6fae                	ld	t6,200(sp)
    20403442:	306a                	fld	ft0,184(sp)
    20403444:	30ca                	fld	ft1,176(sp)
    20403446:	312a                	fld	ft2,168(sp)
    20403448:	318a                	fld	ft3,160(sp)
    2040344a:	226a                	fld	ft4,152(sp)
    2040344c:	22ca                	fld	ft5,144(sp)
    2040344e:	232a                	fld	ft6,136(sp)
    20403450:	238a                	fld	ft7,128(sp)
    20403452:	3566                	fld	fa0,120(sp)
    20403454:	35c6                	fld	fa1,112(sp)
    20403456:	3626                	fld	fa2,104(sp)
    20403458:	3686                	fld	fa3,96(sp)
    2040345a:	2766                	fld	fa4,88(sp)
    2040345c:	27c6                	fld	fa5,80(sp)
    2040345e:	2826                	fld	fa6,72(sp)
    20403460:	2886                	fld	fa7,64(sp)
    20403462:	3e62                	fld	ft8,56(sp)
    20403464:	3ec2                	fld	ft9,48(sp)
    20403466:	3f22                	fld	ft10,40(sp)
    20403468:	3f82                	fld	ft11,32(sp)
    2040346a:	6171                	addi	sp,sp,336
    2040346c:	30200073          	mret

0000000020403470 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
    20403470:	714d                	addi	sp,sp,-336
    20403472:	e686                	sd	ra,328(sp)
    20403474:	e296                	sd	t0,320(sp)
    20403476:	fe1a                	sd	t1,312(sp)
    20403478:	fa1e                	sd	t2,304(sp)
    2040347a:	f622                	sd	s0,296(sp)
    2040347c:	f22a                	sd	a0,288(sp)
    2040347e:	ee2e                	sd	a1,280(sp)
    20403480:	ea32                	sd	a2,272(sp)
    20403482:	e636                	sd	a3,264(sp)
    20403484:	e23a                	sd	a4,256(sp)
    20403486:	fdbe                	sd	a5,248(sp)
    20403488:	f9c2                	sd	a6,240(sp)
    2040348a:	f5c6                	sd	a7,232(sp)
    2040348c:	f1f2                	sd	t3,224(sp)
    2040348e:	edf6                	sd	t4,216(sp)
    20403490:	e9fa                	sd	t5,208(sp)
    20403492:	e5fe                	sd	t6,200(sp)
    20403494:	bd02                	fsd	ft0,184(sp)
    20403496:	b906                	fsd	ft1,176(sp)
    20403498:	b50a                	fsd	ft2,168(sp)
    2040349a:	b10e                	fsd	ft3,160(sp)
    2040349c:	ad12                	fsd	ft4,152(sp)
    2040349e:	a916                	fsd	ft5,144(sp)
    204034a0:	a51a                	fsd	ft6,136(sp)
    204034a2:	a11e                	fsd	ft7,128(sp)
    204034a4:	bcaa                	fsd	fa0,120(sp)
    204034a6:	b8ae                	fsd	fa1,112(sp)
    204034a8:	b4b2                	fsd	fa2,104(sp)
    204034aa:	b0b6                	fsd	fa3,96(sp)
    204034ac:	acba                	fsd	fa4,88(sp)
    204034ae:	a8be                	fsd	fa5,80(sp)
    204034b0:	a4c2                	fsd	fa6,72(sp)
    204034b2:	a0c6                	fsd	fa7,64(sp)
    204034b4:	bc72                	fsd	ft8,56(sp)
    204034b6:	b876                	fsd	ft9,48(sp)
    204034b8:	b47a                	fsd	ft10,40(sp)
    204034ba:	b07e                	fsd	ft11,32(sp)
    204034bc:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    204034be:	dd3fe0ef          	jal	ra,20402290 <__metal_myhart_id>
    204034c2:	87aa                	mv	a5,a0
    204034c4:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    204034c8:	078e                	slli	a5,a5,0x3
    204034ca:	97ba                	add	a5,a5,a4
    204034cc:	639c                	ld	a5,0(a5)
    204034ce:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
    204034d2:	ec843783          	ld	a5,-312(s0)
    204034d6:	c78d                	beqz	a5,20403500 <metal_lc13_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    204034d8:	ec843503          	ld	a0,-312(s0)
    204034dc:	d5bfe0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    204034e0:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
    204034e4:	ec043783          	ld	a5,-320(s0)
    204034e8:	4c87b783          	ld	a5,1224(a5)
    204034ec:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
    204034f0:	ec043783          	ld	a5,-320(s0)
    204034f4:	4b87b783          	ld	a5,1208(a5)
    204034f8:	eb843583          	ld	a1,-328(s0)
    204034fc:	4575                	li	a0,29
    204034fe:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
    20403500:	0001                	nop
    20403502:	60b6                	ld	ra,328(sp)
    20403504:	6296                	ld	t0,320(sp)
    20403506:	7372                	ld	t1,312(sp)
    20403508:	73d2                	ld	t2,304(sp)
    2040350a:	7432                	ld	s0,296(sp)
    2040350c:	7512                	ld	a0,288(sp)
    2040350e:	65f2                	ld	a1,280(sp)
    20403510:	6652                	ld	a2,272(sp)
    20403512:	66b2                	ld	a3,264(sp)
    20403514:	6712                	ld	a4,256(sp)
    20403516:	77ee                	ld	a5,248(sp)
    20403518:	784e                	ld	a6,240(sp)
    2040351a:	78ae                	ld	a7,232(sp)
    2040351c:	7e0e                	ld	t3,224(sp)
    2040351e:	6eee                	ld	t4,216(sp)
    20403520:	6f4e                	ld	t5,208(sp)
    20403522:	6fae                	ld	t6,200(sp)
    20403524:	306a                	fld	ft0,184(sp)
    20403526:	30ca                	fld	ft1,176(sp)
    20403528:	312a                	fld	ft2,168(sp)
    2040352a:	318a                	fld	ft3,160(sp)
    2040352c:	226a                	fld	ft4,152(sp)
    2040352e:	22ca                	fld	ft5,144(sp)
    20403530:	232a                	fld	ft6,136(sp)
    20403532:	238a                	fld	ft7,128(sp)
    20403534:	3566                	fld	fa0,120(sp)
    20403536:	35c6                	fld	fa1,112(sp)
    20403538:	3626                	fld	fa2,104(sp)
    2040353a:	3686                	fld	fa3,96(sp)
    2040353c:	2766                	fld	fa4,88(sp)
    2040353e:	27c6                	fld	fa5,80(sp)
    20403540:	2826                	fld	fa6,72(sp)
    20403542:	2886                	fld	fa7,64(sp)
    20403544:	3e62                	fld	ft8,56(sp)
    20403546:	3ec2                	fld	ft9,48(sp)
    20403548:	3f22                	fld	ft10,40(sp)
    2040354a:	3f82                	fld	ft11,32(sp)
    2040354c:	6171                	addi	sp,sp,336
    2040354e:	30200073          	mret

0000000020403552 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
    20403552:	714d                	addi	sp,sp,-336
    20403554:	e686                	sd	ra,328(sp)
    20403556:	e296                	sd	t0,320(sp)
    20403558:	fe1a                	sd	t1,312(sp)
    2040355a:	fa1e                	sd	t2,304(sp)
    2040355c:	f622                	sd	s0,296(sp)
    2040355e:	f22a                	sd	a0,288(sp)
    20403560:	ee2e                	sd	a1,280(sp)
    20403562:	ea32                	sd	a2,272(sp)
    20403564:	e636                	sd	a3,264(sp)
    20403566:	e23a                	sd	a4,256(sp)
    20403568:	fdbe                	sd	a5,248(sp)
    2040356a:	f9c2                	sd	a6,240(sp)
    2040356c:	f5c6                	sd	a7,232(sp)
    2040356e:	f1f2                	sd	t3,224(sp)
    20403570:	edf6                	sd	t4,216(sp)
    20403572:	e9fa                	sd	t5,208(sp)
    20403574:	e5fe                	sd	t6,200(sp)
    20403576:	bd02                	fsd	ft0,184(sp)
    20403578:	b906                	fsd	ft1,176(sp)
    2040357a:	b50a                	fsd	ft2,168(sp)
    2040357c:	b10e                	fsd	ft3,160(sp)
    2040357e:	ad12                	fsd	ft4,152(sp)
    20403580:	a916                	fsd	ft5,144(sp)
    20403582:	a51a                	fsd	ft6,136(sp)
    20403584:	a11e                	fsd	ft7,128(sp)
    20403586:	bcaa                	fsd	fa0,120(sp)
    20403588:	b8ae                	fsd	fa1,112(sp)
    2040358a:	b4b2                	fsd	fa2,104(sp)
    2040358c:	b0b6                	fsd	fa3,96(sp)
    2040358e:	acba                	fsd	fa4,88(sp)
    20403590:	a8be                	fsd	fa5,80(sp)
    20403592:	a4c2                	fsd	fa6,72(sp)
    20403594:	a0c6                	fsd	fa7,64(sp)
    20403596:	bc72                	fsd	ft8,56(sp)
    20403598:	b876                	fsd	ft9,48(sp)
    2040359a:	b47a                	fsd	ft10,40(sp)
    2040359c:	b07e                	fsd	ft11,32(sp)
    2040359e:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    204035a0:	cf1fe0ef          	jal	ra,20402290 <__metal_myhart_id>
    204035a4:	87aa                	mv	a5,a0
    204035a6:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    204035aa:	078e                	slli	a5,a5,0x3
    204035ac:	97ba                	add	a5,a5,a4
    204035ae:	639c                	ld	a5,0(a5)
    204035b0:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
    204035b4:	ec843783          	ld	a5,-312(s0)
    204035b8:	c78d                	beqz	a5,204035e2 <metal_lc14_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    204035ba:	ec843503          	ld	a0,-312(s0)
    204035be:	c79fe0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    204035c2:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
    204035c6:	ec043783          	ld	a5,-320(s0)
    204035ca:	4e87b783          	ld	a5,1256(a5)
    204035ce:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
    204035d2:	ec043783          	ld	a5,-320(s0)
    204035d6:	4d87b783          	ld	a5,1240(a5)
    204035da:	eb843583          	ld	a1,-328(s0)
    204035de:	4579                	li	a0,30
    204035e0:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
    204035e2:	0001                	nop
    204035e4:	60b6                	ld	ra,328(sp)
    204035e6:	6296                	ld	t0,320(sp)
    204035e8:	7372                	ld	t1,312(sp)
    204035ea:	73d2                	ld	t2,304(sp)
    204035ec:	7432                	ld	s0,296(sp)
    204035ee:	7512                	ld	a0,288(sp)
    204035f0:	65f2                	ld	a1,280(sp)
    204035f2:	6652                	ld	a2,272(sp)
    204035f4:	66b2                	ld	a3,264(sp)
    204035f6:	6712                	ld	a4,256(sp)
    204035f8:	77ee                	ld	a5,248(sp)
    204035fa:	784e                	ld	a6,240(sp)
    204035fc:	78ae                	ld	a7,232(sp)
    204035fe:	7e0e                	ld	t3,224(sp)
    20403600:	6eee                	ld	t4,216(sp)
    20403602:	6f4e                	ld	t5,208(sp)
    20403604:	6fae                	ld	t6,200(sp)
    20403606:	306a                	fld	ft0,184(sp)
    20403608:	30ca                	fld	ft1,176(sp)
    2040360a:	312a                	fld	ft2,168(sp)
    2040360c:	318a                	fld	ft3,160(sp)
    2040360e:	226a                	fld	ft4,152(sp)
    20403610:	22ca                	fld	ft5,144(sp)
    20403612:	232a                	fld	ft6,136(sp)
    20403614:	238a                	fld	ft7,128(sp)
    20403616:	3566                	fld	fa0,120(sp)
    20403618:	35c6                	fld	fa1,112(sp)
    2040361a:	3626                	fld	fa2,104(sp)
    2040361c:	3686                	fld	fa3,96(sp)
    2040361e:	2766                	fld	fa4,88(sp)
    20403620:	27c6                	fld	fa5,80(sp)
    20403622:	2826                	fld	fa6,72(sp)
    20403624:	2886                	fld	fa7,64(sp)
    20403626:	3e62                	fld	ft8,56(sp)
    20403628:	3ec2                	fld	ft9,48(sp)
    2040362a:	3f22                	fld	ft10,40(sp)
    2040362c:	3f82                	fld	ft11,32(sp)
    2040362e:	6171                	addi	sp,sp,336
    20403630:	30200073          	mret

0000000020403634 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
    20403634:	714d                	addi	sp,sp,-336
    20403636:	e686                	sd	ra,328(sp)
    20403638:	e296                	sd	t0,320(sp)
    2040363a:	fe1a                	sd	t1,312(sp)
    2040363c:	fa1e                	sd	t2,304(sp)
    2040363e:	f622                	sd	s0,296(sp)
    20403640:	f22a                	sd	a0,288(sp)
    20403642:	ee2e                	sd	a1,280(sp)
    20403644:	ea32                	sd	a2,272(sp)
    20403646:	e636                	sd	a3,264(sp)
    20403648:	e23a                	sd	a4,256(sp)
    2040364a:	fdbe                	sd	a5,248(sp)
    2040364c:	f9c2                	sd	a6,240(sp)
    2040364e:	f5c6                	sd	a7,232(sp)
    20403650:	f1f2                	sd	t3,224(sp)
    20403652:	edf6                	sd	t4,216(sp)
    20403654:	e9fa                	sd	t5,208(sp)
    20403656:	e5fe                	sd	t6,200(sp)
    20403658:	bd02                	fsd	ft0,184(sp)
    2040365a:	b906                	fsd	ft1,176(sp)
    2040365c:	b50a                	fsd	ft2,168(sp)
    2040365e:	b10e                	fsd	ft3,160(sp)
    20403660:	ad12                	fsd	ft4,152(sp)
    20403662:	a916                	fsd	ft5,144(sp)
    20403664:	a51a                	fsd	ft6,136(sp)
    20403666:	a11e                	fsd	ft7,128(sp)
    20403668:	bcaa                	fsd	fa0,120(sp)
    2040366a:	b8ae                	fsd	fa1,112(sp)
    2040366c:	b4b2                	fsd	fa2,104(sp)
    2040366e:	b0b6                	fsd	fa3,96(sp)
    20403670:	acba                	fsd	fa4,88(sp)
    20403672:	a8be                	fsd	fa5,80(sp)
    20403674:	a4c2                	fsd	fa6,72(sp)
    20403676:	a0c6                	fsd	fa7,64(sp)
    20403678:	bc72                	fsd	ft8,56(sp)
    2040367a:	b876                	fsd	ft9,48(sp)
    2040367c:	b47a                	fsd	ft10,40(sp)
    2040367e:	b07e                	fsd	ft11,32(sp)
    20403680:	0a80                	addi	s0,sp,336
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    20403682:	c0ffe0ef          	jal	ra,20402290 <__metal_myhart_id>
    20403686:	87aa                	mv	a5,a0
    20403688:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    2040368c:	078e                	slli	a5,a5,0x3
    2040368e:	97ba                	add	a5,a5,a4
    20403690:	639c                	ld	a5,0(a5)
    20403692:	ecf43423          	sd	a5,-312(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
    20403696:	ec843783          	ld	a5,-312(s0)
    2040369a:	c78d                	beqz	a5,204036c4 <metal_lc15_interrupt_vector_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    2040369c:	ec843503          	ld	a0,-312(s0)
    204036a0:	b97fe0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    204036a4:	eca43023          	sd	a0,-320(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
    204036a8:	ec043783          	ld	a5,-320(s0)
    204036ac:	5087b783          	ld	a5,1288(a5)
    204036b0:	eaf43c23          	sd	a5,-328(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
    204036b4:	ec043783          	ld	a5,-320(s0)
    204036b8:	4f87b783          	ld	a5,1272(a5)
    204036bc:	eb843583          	ld	a1,-328(s0)
    204036c0:	457d                	li	a0,31
    204036c2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
    204036c4:	0001                	nop
    204036c6:	60b6                	ld	ra,328(sp)
    204036c8:	6296                	ld	t0,320(sp)
    204036ca:	7372                	ld	t1,312(sp)
    204036cc:	73d2                	ld	t2,304(sp)
    204036ce:	7432                	ld	s0,296(sp)
    204036d0:	7512                	ld	a0,288(sp)
    204036d2:	65f2                	ld	a1,280(sp)
    204036d4:	6652                	ld	a2,272(sp)
    204036d6:	66b2                	ld	a3,264(sp)
    204036d8:	6712                	ld	a4,256(sp)
    204036da:	77ee                	ld	a5,248(sp)
    204036dc:	784e                	ld	a6,240(sp)
    204036de:	78ae                	ld	a7,232(sp)
    204036e0:	7e0e                	ld	t3,224(sp)
    204036e2:	6eee                	ld	t4,216(sp)
    204036e4:	6f4e                	ld	t5,208(sp)
    204036e6:	6fae                	ld	t6,200(sp)
    204036e8:	306a                	fld	ft0,184(sp)
    204036ea:	30ca                	fld	ft1,176(sp)
    204036ec:	312a                	fld	ft2,168(sp)
    204036ee:	318a                	fld	ft3,160(sp)
    204036f0:	226a                	fld	ft4,152(sp)
    204036f2:	22ca                	fld	ft5,144(sp)
    204036f4:	232a                	fld	ft6,136(sp)
    204036f6:	238a                	fld	ft7,128(sp)
    204036f8:	3566                	fld	fa0,120(sp)
    204036fa:	35c6                	fld	fa1,112(sp)
    204036fc:	3626                	fld	fa2,104(sp)
    204036fe:	3686                	fld	fa3,96(sp)
    20403700:	2766                	fld	fa4,88(sp)
    20403702:	27c6                	fld	fa5,80(sp)
    20403704:	2826                	fld	fa6,72(sp)
    20403706:	2886                	fld	fa7,64(sp)
    20403708:	3e62                	fld	ft8,56(sp)
    2040370a:	3ec2                	fld	ft9,48(sp)
    2040370c:	3f22                	fld	ft10,40(sp)
    2040370e:	3f82                	fld	ft11,32(sp)
    20403710:	6171                	addi	sp,sp,336
    20403712:	30200073          	mret

0000000020403716 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
    20403716:	1101                	addi	sp,sp,-32
    20403718:	ec22                	sd	s0,24(sp)
    2040371a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
    2040371c:	305027f3          	csrr	a5,mtvec
    20403720:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
    20403724:	fe843783          	ld	a5,-24(s0)
    20403728:	03f7f793          	andi	a5,a5,63
    2040372c:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
    20403730:	fe843703          	ld	a4,-24(s0)
    20403734:	4789                	li	a5,2
    20403736:	00f70d63          	beq	a4,a5,20403750 <__metal_controller_interrupt_vector_mode+0x3a>
    2040373a:	fe843703          	ld	a4,-24(s0)
    2040373e:	478d                	li	a5,3
    20403740:	00f70a63          	beq	a4,a5,20403754 <__metal_controller_interrupt_vector_mode+0x3e>
    20403744:	fe843703          	ld	a4,-24(s0)
    20403748:	4785                	li	a5,1
    2040374a:	00f70763          	beq	a4,a5,20403758 <__metal_controller_interrupt_vector_mode+0x42>
    2040374e:	a039                	j	2040375c <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
    20403750:	478d                	li	a5,3
    20403752:	a031                	j	2040375e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
    20403754:	4791                	li	a5,4
    20403756:	a021                	j	2040375e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
    20403758:	4785                	li	a5,1
    2040375a:	a011                	j	2040375e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
    2040375c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
    2040375e:	853e                	mv	a0,a5
    20403760:	6462                	ld	s0,24(sp)
    20403762:	6105                	addi	sp,sp,32
    20403764:	8082                	ret

0000000020403766 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
    20403766:	7179                	addi	sp,sp,-48
    20403768:	f422                	sd	s0,40(sp)
    2040376a:	1800                	addi	s0,sp,48
    2040376c:	87aa                	mv	a5,a0
    2040376e:	fcb43823          	sd	a1,-48(s0)
    20403772:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
    20403776:	305027f3          	csrr	a5,mtvec
    2040377a:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
    2040377e:	fe843783          	ld	a5,-24(s0)
    20403782:	fc07f793          	andi	a5,a5,-64
    20403786:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
    2040378a:	fd043783          	ld	a5,-48(s0)
    2040378e:	fef43023          	sd	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
    20403792:	fdc42783          	lw	a5,-36(s0)
    20403796:	0007871b          	sext.w	a4,a5
    2040379a:	4791                	li	a5,4
    2040379c:	06e7e763          	bltu	a5,a4,2040380a <__metal_controller_interrupt_vector+0xa4>
    204037a0:	fdc46783          	lwu	a5,-36(s0)
    204037a4:	00279713          	slli	a4,a5,0x2
    204037a8:	00002797          	auipc	a5,0x2
    204037ac:	5c878793          	addi	a5,a5,1480 # 20405d70 <__metal_driver_vtable_riscv_clint0+0x98>
    204037b0:	97ba                	add	a5,a5,a4
    204037b2:	439c                	lw	a5,0(a5)
    204037b4:	0007871b          	sext.w	a4,a5
    204037b8:	00002797          	auipc	a5,0x2
    204037bc:	5b878793          	addi	a5,a5,1464 # 20405d70 <__metal_driver_vtable_riscv_clint0+0x98>
    204037c0:	97ba                	add	a5,a5,a4
    204037c2:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
    204037c4:	fe043783          	ld	a5,-32(s0)
    204037c8:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
    204037cc:	fe843783          	ld	a5,-24(s0)
    204037d0:	0027e793          	ori	a5,a5,2
    204037d4:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
    204037d8:	a80d                	j	2040380a <__metal_controller_interrupt_vector+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
    204037da:	fe043783          	ld	a5,-32(s0)
    204037de:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
    204037e2:	fe843783          	ld	a5,-24(s0)
    204037e6:	0037e793          	ori	a5,a5,3
    204037ea:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
    204037ee:	a831                	j	2040380a <__metal_controller_interrupt_vector+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
    204037f0:	fe043783          	ld	a5,-32(s0)
    204037f4:	0017e793          	ori	a5,a5,1
    204037f8:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
    204037fc:	a039                	j	2040380a <__metal_controller_interrupt_vector+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
    204037fe:	fe043783          	ld	a5,-32(s0)
    20403802:	9bf1                	andi	a5,a5,-4
    20403804:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
    20403808:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
    2040380a:	0001                	nop
    2040380c:	7422                	ld	s0,40(sp)
    2040380e:	6145                	addi	sp,sp,48
    20403810:	8082                	ret

0000000020403812 <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
    20403812:	1101                	addi	sp,sp,-32
    20403814:	ec22                	sd	s0,24(sp)
    20403816:	1000                	addi	s0,sp,32
    20403818:	87aa                	mv	a5,a0
    2040381a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
    2040381e:	fec42783          	lw	a5,-20(s0)
    20403822:	ffd7869b          	addiw	a3,a5,-3
    20403826:	0006871b          	sext.w	a4,a3
    2040382a:	47f1                	li	a5,28
    2040382c:	02e7e763          	bltu	a5,a4,2040385a <__metal_valid_interrupt_id+0x48>
    20403830:	02069793          	slli	a5,a3,0x20
    20403834:	9381                	srli	a5,a5,0x20
    20403836:	00279713          	slli	a4,a5,0x2
    2040383a:	00002797          	auipc	a5,0x2
    2040383e:	54a78793          	addi	a5,a5,1354 # 20405d84 <__metal_driver_vtable_riscv_clint0+0xac>
    20403842:	97ba                	add	a5,a5,a4
    20403844:	439c                	lw	a5,0(a5)
    20403846:	0007871b          	sext.w	a4,a5
    2040384a:	00002797          	auipc	a5,0x2
    2040384e:	53a78793          	addi	a5,a5,1338 # 20405d84 <__metal_driver_vtable_riscv_clint0+0xac>
    20403852:	97ba                	add	a5,a5,a4
    20403854:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
    20403856:	4785                	li	a5,1
    20403858:	a019                	j	2040385e <__metal_valid_interrupt_id+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
    2040385a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
    2040385c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
    2040385e:	853e                	mv	a0,a5
    20403860:	6462                	ld	s0,24(sp)
    20403862:	6105                	addi	sp,sp,32
    20403864:	8082                	ret

0000000020403866 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
    20403866:	7179                	addi	sp,sp,-48
    20403868:	f406                	sd	ra,40(sp)
    2040386a:	f022                	sd	s0,32(sp)
    2040386c:	1800                	addi	s0,sp,48
    2040386e:	fca43c23          	sd	a0,-40(s0)
    20403872:	87ae                	mv	a5,a1
    20403874:	8732                	mv	a4,a2
    20403876:	fcf42a23          	sw	a5,-44(s0)
    2040387a:	87ba                	mv	a5,a4
    2040387c:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
    20403880:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
    20403884:	fd843783          	ld	a5,-40(s0)
    20403888:	e399                	bnez	a5,2040388e <__metal_local_interrupt_enable+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
    2040388a:	57fd                	li	a5,-1
    2040388c:	a07d                	j	2040393a <__metal_local_interrupt_enable+0xd4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
    2040388e:	fd442783          	lw	a5,-44(s0)
    20403892:	0007871b          	sext.w	a4,a5
    20403896:	47fd                	li	a5,31
    20403898:	08e7ec63          	bltu	a5,a4,20403930 <__metal_local_interrupt_enable+0xca>
    2040389c:	fd446783          	lwu	a5,-44(s0)
    204038a0:	00279713          	slli	a4,a5,0x2
    204038a4:	00002797          	auipc	a5,0x2
    204038a8:	55478793          	addi	a5,a5,1364 # 20405df8 <__metal_driver_vtable_riscv_clint0+0x120>
    204038ac:	97ba                	add	a5,a5,a4
    204038ae:	439c                	lw	a5,0(a5)
    204038b0:	0007871b          	sext.w	a4,a5
    204038b4:	00002797          	auipc	a5,0x2
    204038b8:	54478793          	addi	a5,a5,1348 # 20405df8 <__metal_driver_vtable_riscv_clint0+0x120>
    204038bc:	97ba                	add	a5,a5,a4
    204038be:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
    204038c0:	fd042783          	lw	a5,-48(s0)
    204038c4:	2781                	sext.w	a5,a5
    204038c6:	c781                	beqz	a5,204038ce <__metal_local_interrupt_enable+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
    204038c8:	9e3fe0ef          	jal	ra,204022aa <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
    204038cc:	a0ad                	j	20403936 <__metal_local_interrupt_enable+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
    204038ce:	9f5fe0ef          	jal	ra,204022c2 <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
    204038d2:	a095                	j	20403936 <__metal_local_interrupt_enable+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
    204038d4:	fd042783          	lw	a5,-48(s0)
    204038d8:	2781                	sext.w	a5,a5
    204038da:	c781                	beqz	a5,204038e2 <__metal_local_interrupt_enable+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
    204038dc:	9fffe0ef          	jal	ra,204022da <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
    204038e0:	a899                	j	20403936 <__metal_local_interrupt_enable+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
    204038e2:	a11fe0ef          	jal	ra,204022f2 <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
    204038e6:	a881                	j	20403936 <__metal_local_interrupt_enable+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
    204038e8:	fd042783          	lw	a5,-48(s0)
    204038ec:	2781                	sext.w	a5,a5
    204038ee:	c781                	beqz	a5,204038f6 <__metal_local_interrupt_enable+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
    204038f0:	a1bfe0ef          	jal	ra,2040230a <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
    204038f4:	a089                	j	20403936 <__metal_local_interrupt_enable+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
    204038f6:	a2ffe0ef          	jal	ra,20402324 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
    204038fa:	a835                	j	20403936 <__metal_local_interrupt_enable+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
    204038fc:	fd042783          	lw	a5,-48(s0)
    20403900:	2781                	sext.w	a5,a5
    20403902:	c781                	beqz	a5,2040390a <__metal_local_interrupt_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
    20403904:	a3bfe0ef          	jal	ra,2040233e <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
    20403908:	a03d                	j	20403936 <__metal_local_interrupt_enable+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
    2040390a:	a51fe0ef          	jal	ra,2040235a <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
    2040390e:	a025                	j	20403936 <__metal_local_interrupt_enable+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
    20403910:	fd042783          	lw	a5,-48(s0)
    20403914:	2781                	sext.w	a5,a5
    20403916:	c799                	beqz	a5,20403924 <__metal_local_interrupt_enable+0xbe>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
    20403918:	fd442783          	lw	a5,-44(s0)
    2040391c:	853e                	mv	a0,a5
    2040391e:	a59fe0ef          	jal	ra,20402376 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
    20403922:	a811                	j	20403936 <__metal_local_interrupt_enable+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
    20403924:	fd442783          	lw	a5,-44(s0)
    20403928:	853e                	mv	a0,a5
    2040392a:	a7dfe0ef          	jal	ra,204023a6 <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
    2040392e:	a021                	j	20403936 <__metal_local_interrupt_enable+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
    20403930:	57fd                	li	a5,-1
    20403932:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
    20403936:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
    2040393a:	853e                	mv	a0,a5
    2040393c:	70a2                	ld	ra,40(sp)
    2040393e:	7402                	ld	s0,32(sp)
    20403940:	6145                	addi	sp,sp,48
    20403942:	8082                	ret

0000000020403944 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
    20403944:	7139                	addi	sp,sp,-64
    20403946:	fc22                	sd	s0,56(sp)
    20403948:	0080                	addi	s0,sp,64
    2040394a:	fca43c23          	sd	a0,-40(s0)
    2040394e:	87ae                	mv	a5,a1
    20403950:	fcc43423          	sd	a2,-56(s0)
    20403954:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
    20403958:	fd843783          	ld	a5,-40(s0)
    2040395c:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
    20403960:	fd442783          	lw	a5,-44(s0)
    20403964:	0007871b          	sext.w	a4,a5
    20403968:	47ad                	li	a5,11
    2040396a:	02e7c263          	blt	a5,a4,2040398e <__metal_exception_register+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
    2040396e:	fc843783          	ld	a5,-56(s0)
    20403972:	cf91                	beqz	a5,2040398e <__metal_exception_register+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
    20403974:	fe843703          	ld	a4,-24(s0)
    20403978:	fd442783          	lw	a5,-44(s0)
    2040397c:	0a278793          	addi	a5,a5,162
    20403980:	078e                	slli	a5,a5,0x3
    20403982:	97ba                	add	a5,a5,a4
    20403984:	fc843703          	ld	a4,-56(s0)
    20403988:	e398                	sd	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
    2040398a:	4781                	li	a5,0
    2040398c:	a011                	j	20403990 <__metal_exception_register+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
    2040398e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
    20403990:	853e                	mv	a0,a5
    20403992:	7462                	ld	s0,56(sp)
    20403994:	6121                	addi	sp,sp,64
    20403996:	8082                	ret

0000000020403998 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
    20403998:	7139                	addi	sp,sp,-64
    2040399a:	fc06                	sd	ra,56(sp)
    2040399c:	f822                	sd	s0,48(sp)
    2040399e:	0080                	addi	s0,sp,64
    204039a0:	fca43423          	sd	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
    204039a4:	fc843783          	ld	a5,-56(s0)
    204039a8:	fef43023          	sd	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
    204039ac:	fe043783          	ld	a5,-32(s0)
    204039b0:	479c                	lw	a5,8(a5)
    204039b2:	10079b63          	bnez	a5,20403ac8 <__metal_driver_riscv_cpu_controller_interrupt_init+0x130>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
    204039b6:	57fd                	li	a5,-1
    204039b8:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
    204039bc:	57fd                	li	a5,-1
    204039be:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
    204039c2:	301027f3          	csrr	a5,misa
    204039c6:	fcf43c23          	sd	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
    204039ca:	fd843703          	ld	a4,-40(s0)
    204039ce:	6789                	lui	a5,0x2
    204039d0:	8ff9                	and	a5,a5,a4
    204039d2:	e799                	bnez	a5,204039e0 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
    204039d4:	fd843703          	ld	a4,-40(s0)
    204039d8:	000407b7          	lui	a5,0x40
    204039dc:	8ff9                	and	a5,a5,a4
    204039de:	c799                	beqz	a5,204039ec <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
    204039e0:	57fd                	li	a5,-1
    204039e2:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
    204039e6:	57fd                	li	a5,-1
    204039e8:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
    204039ec:	fd843703          	ld	a4,-40(s0)
    204039f0:	000407b7          	lui	a5,0x40
    204039f4:	8ff9                	and	a5,a5,a4
    204039f6:	c781                	beqz	a5,204039fe <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
    204039f8:	57fd                	li	a5,-1
    204039fa:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
    204039fe:	fe042623          	sw	zero,-20(s0)
    20403a02:	a081                	j	20403a42 <__metal_driver_riscv_cpu_controller_interrupt_init+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
    20403a04:	fe043703          	ld	a4,-32(s0)
    20403a08:	fec42783          	lw	a5,-20(s0)
    20403a0c:	0796                	slli	a5,a5,0x5
    20403a0e:	97ba                	add	a5,a5,a4
    20403a10:	1007bc23          	sd	zero,280(a5) # 40118 <__heap_size+0x3f918>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
    20403a14:	fe043703          	ld	a4,-32(s0)
    20403a18:	fec42783          	lw	a5,-20(s0)
    20403a1c:	07a5                	addi	a5,a5,9
    20403a1e:	0796                	slli	a5,a5,0x5
    20403a20:	97ba                	add	a5,a5,a4
    20403a22:	0007b023          	sd	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
    20403a26:	fe043703          	ld	a4,-32(s0)
    20403a2a:	fec42783          	lw	a5,-20(s0)
    20403a2e:	07a5                	addi	a5,a5,9
    20403a30:	0796                	slli	a5,a5,0x5
    20403a32:	97ba                	add	a5,a5,a4
    20403a34:	0007b423          	sd	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
    20403a38:	fec42783          	lw	a5,-20(s0)
    20403a3c:	2785                	addiw	a5,a5,1
    20403a3e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
    20403a42:	fec42783          	lw	a5,-20(s0)
    20403a46:	0007871b          	sext.w	a4,a5
    20403a4a:	47fd                	li	a5,31
    20403a4c:	fae7dce3          	bge	a5,a4,20403a04 <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
    20403a50:	fe042423          	sw	zero,-24(s0)
    20403a54:	a01d                	j	20403a7a <__metal_driver_riscv_cpu_controller_interrupt_init+0xe2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
    20403a56:	fe043703          	ld	a4,-32(s0)
    20403a5a:	fe842783          	lw	a5,-24(s0)
    20403a5e:	0a278793          	addi	a5,a5,162
    20403a62:	078e                	slli	a5,a5,0x3
    20403a64:	97ba                	add	a5,a5,a4
    20403a66:	fffff717          	auipc	a4,0xfffff
    20403a6a:	97070713          	addi	a4,a4,-1680 # 204023d6 <__metal_default_exception_handler>
    20403a6e:	e398                	sd	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
    20403a70:	fe842783          	lw	a5,-24(s0)
    20403a74:	2785                	addiw	a5,a5,1
    20403a76:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
    20403a7a:	fe842783          	lw	a5,-24(s0)
    20403a7e:	0007871b          	sext.w	a4,a5
    20403a82:	47ad                	li	a5,11
    20403a84:	fce7d9e3          	bge	a5,a4,20403a56 <__metal_driver_riscv_cpu_controller_interrupt_init+0xbe>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
    20403a88:	fffff597          	auipc	a1,0xfffff
    20403a8c:	c7858593          	addi	a1,a1,-904 # 20402700 <__metal_exception_handler>
    20403a90:	4501                	li	a0,0
    20403a92:	cd5ff0ef          	jal	ra,20403766 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
    20403a96:	301027f3          	csrr	a5,misa
    20403a9a:	fcf43823          	sd	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
    20403a9e:	fd043703          	ld	a4,-48(s0)
    20403aa2:	67c1                	lui	a5,0x10
    20403aa4:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
    20403aa8:	8ff9                	and	a5,a5,a4
    20403aaa:	cb99                	beqz	a5,20403ac0 <__metal_driver_riscv_cpu_controller_interrupt_init+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
    20403aac:	300027f3          	csrr	a5,mstatus
    20403ab0:	fcf43823          	sd	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
    20403ab4:	fd043703          	ld	a4,-48(s0)
    20403ab8:	6789                	lui	a5,0x2
    20403aba:	8fd9                	or	a5,a5,a4
    20403abc:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
    20403ac0:	fe043783          	ld	a5,-32(s0)
    20403ac4:	4705                	li	a4,1
    20403ac6:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
    20403ac8:	0001                	nop
    20403aca:	70e2                	ld	ra,56(sp)
    20403acc:	7442                	ld	s0,48(sp)
    20403ace:	6121                	addi	sp,sp,64
    20403ad0:	8082                	ret

0000000020403ad2 <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
    20403ad2:	7139                	addi	sp,sp,-64
    20403ad4:	fc06                	sd	ra,56(sp)
    20403ad6:	f822                	sd	s0,48(sp)
    20403ad8:	0080                	addi	s0,sp,64
    20403ada:	fca43c23          	sd	a0,-40(s0)
    20403ade:	87ae                	mv	a5,a1
    20403ae0:	fcc43423          	sd	a2,-56(s0)
    20403ae4:	fcd43023          	sd	a3,-64(s0)
    20403ae8:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
    20403aec:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
    20403af0:	fd843783          	ld	a5,-40(s0)
    20403af4:	fef43023          	sd	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
    20403af8:	fd442783          	lw	a5,-44(s0)
    20403afc:	853e                	mv	a0,a5
    20403afe:	d15ff0ef          	jal	ra,20403812 <__metal_valid_interrupt_id>
    20403b02:	87aa                	mv	a5,a0
    20403b04:	e399                	bnez	a5,20403b0a <__metal_driver_riscv_cpu_controller_interrupt_register+0x38>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
    20403b06:	57d5                	li	a5,-11
    20403b08:	a8fd                	j	20403c06 <__metal_driver_riscv_cpu_controller_interrupt_register+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
    20403b0a:	fc843783          	ld	a5,-56(s0)
    20403b0e:	c795                	beqz	a5,20403b3a <__metal_driver_riscv_cpu_controller_interrupt_register+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
    20403b10:	fe043703          	ld	a4,-32(s0)
    20403b14:	fd442783          	lw	a5,-44(s0)
    20403b18:	0796                	slli	a5,a5,0x5
    20403b1a:	97ba                	add	a5,a5,a4
    20403b1c:	fc843703          	ld	a4,-56(s0)
    20403b20:	10e7bc23          	sd	a4,280(a5) # 2118 <__heap_size+0x1918>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
    20403b24:	fe043703          	ld	a4,-32(s0)
    20403b28:	fd442783          	lw	a5,-44(s0)
    20403b2c:	07a5                	addi	a5,a5,9
    20403b2e:	0796                	slli	a5,a5,0x5
    20403b30:	97ba                	add	a5,a5,a4
    20403b32:	fc043703          	ld	a4,-64(s0)
    20403b36:	e798                	sd	a4,8(a5)
    20403b38:	a0e9                	j	20403c02 <__metal_driver_riscv_cpu_controller_interrupt_register+0x130>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
    20403b3a:	fd442783          	lw	a5,-44(s0)
    20403b3e:	ffd7869b          	addiw	a3,a5,-3
    20403b42:	0006871b          	sext.w	a4,a3
    20403b46:	47f1                	li	a5,28
    20403b48:	0ae7ea63          	bltu	a5,a4,20403bfc <__metal_driver_riscv_cpu_controller_interrupt_register+0x12a>
    20403b4c:	02069793          	slli	a5,a3,0x20
    20403b50:	9381                	srli	a5,a5,0x20
    20403b52:	00279713          	slli	a4,a5,0x2
    20403b56:	00002797          	auipc	a5,0x2
    20403b5a:	32278793          	addi	a5,a5,802 # 20405e78 <__metal_driver_vtable_riscv_clint0+0x1a0>
    20403b5e:	97ba                	add	a5,a5,a4
    20403b60:	439c                	lw	a5,0(a5)
    20403b62:	0007871b          	sext.w	a4,a5
    20403b66:	00002797          	auipc	a5,0x2
    20403b6a:	31278793          	addi	a5,a5,786 # 20405e78 <__metal_driver_vtable_riscv_clint0+0x1a0>
    20403b6e:	97ba                	add	a5,a5,a4
    20403b70:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
    20403b72:	fe043703          	ld	a4,-32(s0)
    20403b76:	fd442783          	lw	a5,-44(s0)
    20403b7a:	0796                	slli	a5,a5,0x5
    20403b7c:	97ba                	add	a5,a5,a4
    20403b7e:	fffff717          	auipc	a4,0xfffff
    20403b82:	9c470713          	addi	a4,a4,-1596 # 20402542 <__metal_default_sw_handler>
    20403b86:	10e7bc23          	sd	a4,280(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
    20403b8a:	fe043703          	ld	a4,-32(s0)
    20403b8e:	fd442783          	lw	a5,-44(s0)
    20403b92:	07a5                	addi	a5,a5,9
    20403b94:	0796                	slli	a5,a5,0x5
    20403b96:	97ba                	add	a5,a5,a4
    20403b98:	fc043703          	ld	a4,-64(s0)
    20403b9c:	e398                	sd	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
    20403b9e:	a095                	j	20403c02 <__metal_driver_riscv_cpu_controller_interrupt_register+0x130>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
    20403ba0:	fe043703          	ld	a4,-32(s0)
    20403ba4:	fd442783          	lw	a5,-44(s0)
    20403ba8:	0796                	slli	a5,a5,0x5
    20403baa:	97ba                	add	a5,a5,a4
    20403bac:	fffff717          	auipc	a4,0xfffff
    20403bb0:	ae470713          	addi	a4,a4,-1308 # 20402690 <__metal_default_timer_handler>
    20403bb4:	10e7bc23          	sd	a4,280(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
    20403bb8:	fe043703          	ld	a4,-32(s0)
    20403bbc:	fd442783          	lw	a5,-44(s0)
    20403bc0:	07a5                	addi	a5,a5,9
    20403bc2:	0796                	slli	a5,a5,0x5
    20403bc4:	97ba                	add	a5,a5,a4
    20403bc6:	fc043703          	ld	a4,-64(s0)
    20403bca:	e398                	sd	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
    20403bcc:	a81d                	j	20403c02 <__metal_driver_riscv_cpu_controller_interrupt_register+0x130>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
    20403bce:	fe043703          	ld	a4,-32(s0)
    20403bd2:	fd442783          	lw	a5,-44(s0)
    20403bd6:	0796                	slli	a5,a5,0x5
    20403bd8:	97ba                	add	a5,a5,a4
    20403bda:	fffff717          	auipc	a4,0xfffff
    20403bde:	81670713          	addi	a4,a4,-2026 # 204023f0 <__metal_default_interrupt_handler>
    20403be2:	10e7bc23          	sd	a4,280(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
    20403be6:	fe043703          	ld	a4,-32(s0)
    20403bea:	fd442783          	lw	a5,-44(s0)
    20403bee:	07a5                	addi	a5,a5,9
    20403bf0:	0796                	slli	a5,a5,0x5
    20403bf2:	97ba                	add	a5,a5,a4
    20403bf4:	fc043703          	ld	a4,-64(s0)
    20403bf8:	e398                	sd	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
    20403bfa:	a021                	j	20403c02 <__metal_driver_riscv_cpu_controller_interrupt_register+0x130>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
    20403bfc:	57d1                	li	a5,-12
    20403bfe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
    20403c02:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
    20403c06:	853e                	mv	a0,a5
    20403c08:	70e2                	ld	ra,56(sp)
    20403c0a:	7442                	ld	s0,48(sp)
    20403c0c:	6121                	addi	sp,sp,64
    20403c0e:	8082                	ret

0000000020403c10 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
    20403c10:	1101                	addi	sp,sp,-32
    20403c12:	ec06                	sd	ra,24(sp)
    20403c14:	e822                	sd	s0,16(sp)
    20403c16:	1000                	addi	s0,sp,32
    20403c18:	fea43423          	sd	a0,-24(s0)
    20403c1c:	87ae                	mv	a5,a1
    20403c1e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
    20403c22:	fe442783          	lw	a5,-28(s0)
    20403c26:	4605                	li	a2,1
    20403c28:	85be                	mv	a1,a5
    20403c2a:	fe843503          	ld	a0,-24(s0)
    20403c2e:	c39ff0ef          	jal	ra,20403866 <__metal_local_interrupt_enable>
    20403c32:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
    20403c34:	853e                	mv	a0,a5
    20403c36:	60e2                	ld	ra,24(sp)
    20403c38:	6442                	ld	s0,16(sp)
    20403c3a:	6105                	addi	sp,sp,32
    20403c3c:	8082                	ret

0000000020403c3e <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
    20403c3e:	1101                	addi	sp,sp,-32
    20403c40:	ec06                	sd	ra,24(sp)
    20403c42:	e822                	sd	s0,16(sp)
    20403c44:	1000                	addi	s0,sp,32
    20403c46:	fea43423          	sd	a0,-24(s0)
    20403c4a:	87ae                	mv	a5,a1
    20403c4c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
    20403c50:	fe442783          	lw	a5,-28(s0)
    20403c54:	4601                	li	a2,0
    20403c56:	85be                	mv	a1,a5
    20403c58:	fe843503          	ld	a0,-24(s0)
    20403c5c:	c0bff0ef          	jal	ra,20403866 <__metal_local_interrupt_enable>
    20403c60:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
    20403c62:	853e                	mv	a0,a5
    20403c64:	60e2                	ld	ra,24(sp)
    20403c66:	6442                	ld	s0,16(sp)
    20403c68:	6105                	addi	sp,sp,32
    20403c6a:	8082                	ret

0000000020403c6c <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
    20403c6c:	1101                	addi	sp,sp,-32
    20403c6e:	ec06                	sd	ra,24(sp)
    20403c70:	e822                	sd	s0,16(sp)
    20403c72:	1000                	addi	s0,sp,32
    20403c74:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
    20403c78:	a9fff0ef          	jal	ra,20403716 <__metal_controller_interrupt_vector_mode>
    20403c7c:	87aa                	mv	a5,a0
    20403c7e:	2781                	sext.w	a5,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
    20403c80:	853e                	mv	a0,a5
    20403c82:	60e2                	ld	ra,24(sp)
    20403c84:	6442                	ld	s0,16(sp)
    20403c86:	6105                	addi	sp,sp,32
    20403c88:	8082                	ret

0000000020403c8a <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
    20403c8a:	7179                	addi	sp,sp,-48
    20403c8c:	f406                	sd	ra,40(sp)
    20403c8e:	f022                	sd	s0,32(sp)
    20403c90:	1800                	addi	s0,sp,48
    20403c92:	fca43c23          	sd	a0,-40(s0)
    20403c96:	87ae                	mv	a5,a1
    20403c98:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
    20403c9c:	fd843783          	ld	a5,-40(s0)
    20403ca0:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
    20403ca4:	fd442783          	lw	a5,-44(s0)
    20403ca8:	2781                	sext.w	a5,a5
    20403caa:	ef81                	bnez	a5,20403cc2 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x38>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
    20403cac:	fd442783          	lw	a5,-44(s0)
    20403cb0:	fffff597          	auipc	a1,0xfffff
    20403cb4:	a5058593          	addi	a1,a1,-1456 # 20402700 <__metal_exception_handler>
    20403cb8:	853e                	mv	a0,a5
    20403cba:	aadff0ef          	jal	ra,20403766 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
    20403cbe:	4781                	li	a5,0
    20403cc0:	a025                	j	20403ce8 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x5e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
    20403cc2:	fd442783          	lw	a5,-44(s0)
    20403cc6:	0007871b          	sext.w	a4,a5
    20403cca:	4785                	li	a5,1
    20403ccc:	00f71d63          	bne	a4,a5,20403ce6 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x5c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
    20403cd0:	fd442783          	lw	a5,-44(s0)
    20403cd4:	00002597          	auipc	a1,0x2
    20403cd8:	d2c58593          	addi	a1,a1,-724 # 20405a00 <__metal_vector_table>
    20403cdc:	853e                	mv	a0,a5
    20403cde:	a89ff0ef          	jal	ra,20403766 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
    20403ce2:	4781                	li	a5,0
    20403ce4:	a011                	j	20403ce8 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x5e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
    20403ce6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
    20403ce8:	853e                	mv	a0,a5
    20403cea:	70a2                	ld	ra,40(sp)
    20403cec:	7402                	ld	s0,32(sp)
    20403cee:	6145                	addi	sp,sp,48
    20403cf0:	8082                	ret

0000000020403cf2 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
    20403cf2:	7179                	addi	sp,sp,-48
    20403cf4:	f422                	sd	s0,40(sp)
    20403cf6:	1800                	addi	s0,sp,48
    20403cf8:	fea43423          	sd	a0,-24(s0)
    20403cfc:	87ae                	mv	a5,a1
    20403cfe:	fcc43c23          	sd	a2,-40(s0)
    20403d02:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
    20403d06:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
    20403d08:	853e                	mv	a0,a5
    20403d0a:	7422                	ld	s0,40(sp)
    20403d0c:	6145                	addi	sp,sp,48
    20403d0e:	8082                	ret

0000000020403d10 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
    20403d10:	7179                	addi	sp,sp,-48
    20403d12:	f422                	sd	s0,40(sp)
    20403d14:	1800                	addi	s0,sp,48
    20403d16:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
    20403d1a:	fe043423          	sd	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:765
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
    if (hi == hi1) {
        val = ((unsigned long long)hi << 32) | lo;
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
    20403d1e:	b00027f3          	csrr	a5,mcycle
    20403d22:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
#endif

    return val;
    20403d26:	fe843783          	ld	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
    20403d2a:	853e                	mv	a0,a5
    20403d2c:	7422                	ld	s0,40(sp)
    20403d2e:	6145                	addi	sp,sp,48
    20403d30:	8082                	ret

0000000020403d32 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
    20403d32:	7179                	addi	sp,sp,-48
    20403d34:	f406                	sd	ra,40(sp)
    20403d36:	f022                	sd	s0,32(sp)
    20403d38:	1800                	addi	s0,sp,48
    20403d3a:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
    20403d3e:	fd843783          	ld	a5,-40(s0)
    20403d42:	e399                	bnez	a5,20403d48 <__metal_driver_cpu_timebase_get+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
    20403d44:	4781                	li	a5,0
    20403d46:	a811                	j	20403d5a <__metal_driver_cpu_timebase_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
    20403d48:	fd843503          	ld	a0,-40(s0)
    20403d4c:	cc0fe0ef          	jal	ra,2040220c <__metal_driver_cpu_timebase>
    20403d50:	87aa                	mv	a5,a0
    20403d52:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
    20403d56:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
    20403d5a:	853e                	mv	a0,a5
    20403d5c:	70a2                	ld	ra,40(sp)
    20403d5e:	7402                	ld	s0,32(sp)
    20403d60:	6145                	addi	sp,sp,48
    20403d62:	8082                	ret

0000000020403d64 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
    20403d64:	7139                	addi	sp,sp,-64
    20403d66:	fc06                	sd	ra,56(sp)
    20403d68:	f822                	sd	s0,48(sp)
    20403d6a:	0080                	addi	s0,sp,64
    20403d6c:	fca43423          	sd	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
    20403d70:	fc043c23          	sd	zero,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
    20403d74:	fc843503          	ld	a0,-56(s0)
    20403d78:	cbefe0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20403d7c:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
    20403d80:	fe843783          	ld	a5,-24(s0)
    20403d84:	c78d                	beqz	a5,20403dae <__metal_driver_cpu_mtime_get+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
    20403d86:	fe843783          	ld	a5,-24(s0)
    20403d8a:	2007b783          	ld	a5,512(a5)
    20403d8e:	fef43023          	sd	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
    20403d92:	fe043783          	ld	a5,-32(s0)
    20403d96:	cf81                	beqz	a5,20403dae <__metal_driver_cpu_mtime_get+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
    20403d98:	fe043783          	ld	a5,-32(s0)
    20403d9c:	639c                	ld	a5,0(a5)
    20403d9e:	67d8                	ld	a4,136(a5)
    20403da0:	fd840793          	addi	a5,s0,-40
    20403da4:	863e                	mv	a2,a5
    20403da6:	4585                	li	a1,1
    20403da8:	fe043503          	ld	a0,-32(s0)
    20403dac:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
    20403dae:	fd843783          	ld	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
    20403db2:	853e                	mv	a0,a5
    20403db4:	70e2                	ld	ra,56(sp)
    20403db6:	7442                	ld	s0,48(sp)
    20403db8:	6121                	addi	sp,sp,64
    20403dba:	8082                	ret

0000000020403dbc <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
    20403dbc:	715d                	addi	sp,sp,-80
    20403dbe:	e486                	sd	ra,72(sp)
    20403dc0:	e0a2                	sd	s0,64(sp)
    20403dc2:	fc26                	sd	s1,56(sp)
    20403dc4:	0880                	addi	s0,sp,80
    20403dc6:	faa43c23          	sd	a0,-72(s0)
    20403dca:	fab43823          	sd	a1,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
    20403dce:	57fd                	li	a5,-1
    20403dd0:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
    20403dd4:	fb843503          	ld	a0,-72(s0)
    20403dd8:	c5efe0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20403ddc:	fca43823          	sd	a0,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
    20403de0:	fd043783          	ld	a5,-48(s0)
    20403de4:	cf85                	beqz	a5,20403e1c <__metal_driver_cpu_mtimecmp_set+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
    20403de6:	fd043783          	ld	a5,-48(s0)
    20403dea:	2007b783          	ld	a5,512(a5)
    20403dee:	fcf43423          	sd	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
    20403df2:	fc843783          	ld	a5,-56(s0)
    20403df6:	c39d                	beqz	a5,20403e1c <__metal_driver_cpu_mtimecmp_set+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
    20403df8:	fc843783          	ld	a5,-56(s0)
    20403dfc:	639c                	ld	a5,0(a5)
    20403dfe:	6bc4                	ld	s1,144(a5)
    20403e00:	fb843503          	ld	a0,-72(s0)
    20403e04:	be4fe0ef          	jal	ra,204021e8 <__metal_driver_cpu_hartid>
    20403e08:	87aa                	mv	a5,a0
    20403e0a:	fb043603          	ld	a2,-80(s0)
    20403e0e:	85be                	mv	a1,a5
    20403e10:	fc843503          	ld	a0,-56(s0)
    20403e14:	9482                	jalr	s1
    20403e16:	87aa                	mv	a5,a0
    20403e18:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
    20403e1c:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
    20403e20:	853e                	mv	a0,a5
    20403e22:	60a6                	ld	ra,72(sp)
    20403e24:	6406                	ld	s0,64(sp)
    20403e26:	74e2                	ld	s1,56(sp)
    20403e28:	6161                	addi	sp,sp,80
    20403e2a:	8082                	ret

0000000020403e2c <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
    20403e2c:	1101                	addi	sp,sp,-32
    20403e2e:	ec22                	sd	s0,24(sp)
    20403e30:	1000                	addi	s0,sp,32
    20403e32:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
    20403e36:	5fbfc797          	auipc	a5,0x5fbfc
    20403e3a:	29278793          	addi	a5,a5,658 # 800000c8 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
    20403e3e:	853e                	mv	a0,a5
    20403e40:	6462                	ld	s0,24(sp)
    20403e42:	6105                	addi	sp,sp,32
    20403e44:	8082                	ret

0000000020403e46 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
    20403e46:	1101                	addi	sp,sp,-32
    20403e48:	ec22                	sd	s0,24(sp)
    20403e4a:	1000                	addi	s0,sp,32
    20403e4c:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
    20403e50:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
    20403e52:	853e                	mv	a0,a5
    20403e54:	6462                	ld	s0,24(sp)
    20403e56:	6105                	addi	sp,sp,32
    20403e58:	8082                	ret

0000000020403e5a <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
    20403e5a:	1101                	addi	sp,sp,-32
    20403e5c:	ec22                	sd	s0,24(sp)
    20403e5e:	1000                	addi	s0,sp,32
    20403e60:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
    20403e64:	5fbfc797          	auipc	a5,0x5fbfc
    20403e68:	26478793          	addi	a5,a5,612 # 800000c8 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
    20403e6c:	853e                	mv	a0,a5
    20403e6e:	6462                	ld	s0,24(sp)
    20403e70:	6105                	addi	sp,sp,32
    20403e72:	8082                	ret

0000000020403e74 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
    20403e74:	1101                	addi	sp,sp,-32
    20403e76:	ec22                	sd	s0,24(sp)
    20403e78:	1000                	addi	s0,sp,32
    20403e7a:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
    20403e7e:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
    20403e80:	853e                	mv	a0,a5
    20403e82:	6462                	ld	s0,24(sp)
    20403e84:	6105                	addi	sp,sp,32
    20403e86:	8082                	ret

0000000020403e88 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
    20403e88:	7139                	addi	sp,sp,-64
    20403e8a:	fc06                	sd	ra,56(sp)
    20403e8c:	f822                	sd	s0,48(sp)
    20403e8e:	0080                	addi	s0,sp,64
    20403e90:	fca43423          	sd	a0,-56(s0)
    20403e94:	87ae                	mv	a5,a1
    20403e96:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
    20403e9a:	57fd                	li	a5,-1
    20403e9c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
    20403ea0:	fc843503          	ld	a0,-56(s0)
    20403ea4:	b92fe0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20403ea8:	fea43023          	sd	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
    20403eac:	fe043783          	ld	a5,-32(s0)
    20403eb0:	cb85                	beqz	a5,20403ee0 <__metal_driver_cpu_set_sw_ipi+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    20403eb2:	fe043783          	ld	a5,-32(s0)
    20403eb6:	1807b783          	ld	a5,384(a5)
    20403eba:	fcf43c23          	sd	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
    20403ebe:	fd843783          	ld	a5,-40(s0)
    20403ec2:	cf99                	beqz	a5,20403ee0 <__metal_driver_cpu_set_sw_ipi+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
    20403ec4:	fd843783          	ld	a5,-40(s0)
    20403ec8:	639c                	ld	a5,0(a5)
    20403eca:	67d8                	ld	a4,136(a5)
    20403ecc:	fc440793          	addi	a5,s0,-60
    20403ed0:	863e                	mv	a2,a5
    20403ed2:	458d                	li	a1,3
    20403ed4:	fd843503          	ld	a0,-40(s0)
    20403ed8:	9702                	jalr	a4
    20403eda:	87aa                	mv	a5,a0
    20403edc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
    20403ee0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
    20403ee4:	853e                	mv	a0,a5
    20403ee6:	70e2                	ld	ra,56(sp)
    20403ee8:	7442                	ld	s0,48(sp)
    20403eea:	6121                	addi	sp,sp,64
    20403eec:	8082                	ret

0000000020403eee <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
    20403eee:	7139                	addi	sp,sp,-64
    20403ef0:	fc06                	sd	ra,56(sp)
    20403ef2:	f822                	sd	s0,48(sp)
    20403ef4:	0080                	addi	s0,sp,64
    20403ef6:	fca43423          	sd	a0,-56(s0)
    20403efa:	87ae                	mv	a5,a1
    20403efc:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
    20403f00:	57fd                	li	a5,-1
    20403f02:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
    20403f06:	fc843503          	ld	a0,-56(s0)
    20403f0a:	b2cfe0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20403f0e:	fea43023          	sd	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
    20403f12:	fe043783          	ld	a5,-32(s0)
    20403f16:	cb85                	beqz	a5,20403f46 <__metal_driver_cpu_clear_sw_ipi+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    20403f18:	fe043783          	ld	a5,-32(s0)
    20403f1c:	1807b783          	ld	a5,384(a5)
    20403f20:	fcf43c23          	sd	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
    20403f24:	fd843783          	ld	a5,-40(s0)
    20403f28:	cf99                	beqz	a5,20403f46 <__metal_driver_cpu_clear_sw_ipi+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
    20403f2a:	fd843783          	ld	a5,-40(s0)
    20403f2e:	639c                	ld	a5,0(a5)
    20403f30:	67d8                	ld	a4,136(a5)
    20403f32:	fc440793          	addi	a5,s0,-60
    20403f36:	863e                	mv	a2,a5
    20403f38:	4589                	li	a1,2
    20403f3a:	fd843503          	ld	a0,-40(s0)
    20403f3e:	9702                	jalr	a4
    20403f40:	87aa                	mv	a5,a0
    20403f42:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
    20403f46:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
    20403f4a:	853e                	mv	a0,a5
    20403f4c:	70e2                	ld	ra,56(sp)
    20403f4e:	7442                	ld	s0,48(sp)
    20403f50:	6121                	addi	sp,sp,64
    20403f52:	8082                	ret

0000000020403f54 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
    20403f54:	7139                	addi	sp,sp,-64
    20403f56:	fc06                	sd	ra,56(sp)
    20403f58:	f822                	sd	s0,48(sp)
    20403f5a:	0080                	addi	s0,sp,64
    20403f5c:	fca43423          	sd	a0,-56(s0)
    20403f60:	87ae                	mv	a5,a1
    20403f62:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
    20403f66:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
    20403f6a:	fc843503          	ld	a0,-56(s0)
    20403f6e:	ac8fe0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20403f72:	fea43023          	sd	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
    20403f76:	fe043783          	ld	a5,-32(s0)
    20403f7a:	cb85                	beqz	a5,20403faa <__metal_driver_cpu_get_msip+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    20403f7c:	fe043783          	ld	a5,-32(s0)
    20403f80:	1807b783          	ld	a5,384(a5)
    20403f84:	fcf43c23          	sd	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
    20403f88:	fd843783          	ld	a5,-40(s0)
    20403f8c:	cf99                	beqz	a5,20403faa <__metal_driver_cpu_get_msip+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
    20403f8e:	fd843783          	ld	a5,-40(s0)
    20403f92:	639c                	ld	a5,0(a5)
    20403f94:	67d8                	ld	a4,136(a5)
    20403f96:	fc440793          	addi	a5,s0,-60
    20403f9a:	863e                	mv	a2,a5
    20403f9c:	4591                	li	a1,4
    20403f9e:	fd843503          	ld	a0,-40(s0)
    20403fa2:	9702                	jalr	a4
    20403fa4:	87aa                	mv	a5,a0
    20403fa6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
    20403faa:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
    20403fae:	853e                	mv	a0,a5
    20403fb0:	70e2                	ld	ra,56(sp)
    20403fb2:	7442                	ld	s0,48(sp)
    20403fb4:	6121                	addi	sp,sp,64
    20403fb6:	8082                	ret

0000000020403fb8 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
    20403fb8:	1101                	addi	sp,sp,-32
    20403fba:	ec06                	sd	ra,24(sp)
    20403fbc:	e822                	sd	s0,16(sp)
    20403fbe:	1000                	addi	s0,sp,32
    20403fc0:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
    20403fc4:	fe843503          	ld	a0,-24(s0)
    20403fc8:	a6efe0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20403fcc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
    20403fce:	853e                	mv	a0,a5
    20403fd0:	60e2                	ld	ra,24(sp)
    20403fd2:	6442                	ld	s0,16(sp)
    20403fd4:	6105                	addi	sp,sp,32
    20403fd6:	8082                	ret

0000000020403fd8 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
    20403fd8:	7139                	addi	sp,sp,-64
    20403fda:	fc06                	sd	ra,56(sp)
    20403fdc:	f822                	sd	s0,48(sp)
    20403fde:	0080                	addi	s0,sp,64
    20403fe0:	fca43c23          	sd	a0,-40(s0)
    20403fe4:	87ae                	mv	a5,a1
    20403fe6:	fcc43423          	sd	a2,-56(s0)
    20403fea:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
    20403fee:	fd843503          	ld	a0,-40(s0)
    20403ff2:	a44fe0ef          	jal	ra,20402236 <__metal_driver_cpu_interrupt_controller>
    20403ff6:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
    20403ffa:	fe843783          	ld	a5,-24(s0)
    20403ffe:	cf81                	beqz	a5,20404016 <__metal_driver_cpu_exception_register+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
    20404000:	fd442783          	lw	a5,-44(s0)
    20404004:	fc843603          	ld	a2,-56(s0)
    20404008:	85be                	mv	a1,a5
    2040400a:	fe843503          	ld	a0,-24(s0)
    2040400e:	937ff0ef          	jal	ra,20403944 <__metal_exception_register>
    20404012:	87aa                	mv	a5,a0
    20404014:	a011                	j	20404018 <__metal_driver_cpu_exception_register+0x40>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
    20404016:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
    20404018:	853e                	mv	a0,a5
    2040401a:	70e2                	ld	ra,56(sp)
    2040401c:	7442                	ld	s0,48(sp)
    2040401e:	6121                	addi	sp,sp,64
    20404020:	8082                	ret

0000000020404022 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
    20404022:	1101                	addi	sp,sp,-32
    20404024:	ec22                	sd	s0,24(sp)
    20404026:	1000                	addi	s0,sp,32
    20404028:	fea43423          	sd	a0,-24(s0)
    2040402c:	feb43023          	sd	a1,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
    20404030:	fe043783          	ld	a5,-32(s0)
    20404034:	0007d783          	lhu	a5,0(a5)
    20404038:	2781                	sext.w	a5,a5
    2040403a:	8b8d                	andi	a5,a5,3
    2040403c:	2781                	sext.w	a5,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
    2040403e:	873e                	mv	a4,a5
    20404040:	478d                	li	a5,3
    20404042:	00f71463          	bne	a4,a5,2040404a <__metal_driver_cpu_get_instruction_length+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
    20404046:	4791                	li	a5,4
    20404048:	a011                	j	2040404c <__metal_driver_cpu_get_instruction_length+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
    2040404a:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 4)
}
    2040404c:	853e                	mv	a0,a5
    2040404e:	6462                	ld	s0,24(sp)
    20404050:	6105                	addi	sp,sp,32
    20404052:	8082                	ret

0000000020404054 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
    20404054:	7179                	addi	sp,sp,-48
    20404056:	f422                	sd	s0,40(sp)
    20404058:	1800                	addi	s0,sp,48
    2040405a:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
    2040405e:	341027f3          	csrr	a5,mepc
    20404062:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
    20404066:	fe843783          	ld	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
    2040406a:	853e                	mv	a0,a5
    2040406c:	7422                	ld	s0,40(sp)
    2040406e:	6145                	addi	sp,sp,48
    20404070:	8082                	ret

0000000020404072 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
    20404072:	1101                	addi	sp,sp,-32
    20404074:	ec22                	sd	s0,24(sp)
    20404076:	1000                	addi	s0,sp,32
    20404078:	fea43423          	sd	a0,-24(s0)
    2040407c:	feb43023          	sd	a1,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
    20404080:	fe043783          	ld	a5,-32(s0)
    20404084:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
    20404088:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
    2040408a:	853e                	mv	a0,a5
    2040408c:	6462                	ld	s0,24(sp)
    2040408e:	6105                	addi	sp,sp,32
    20404090:	8082                	ret

0000000020404092 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
    20404092:	1101                	addi	sp,sp,-32
    20404094:	ec22                	sd	s0,24(sp)
    20404096:	1000                	addi	s0,sp,32
    20404098:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
    2040409c:	fe843703          	ld	a4,-24(s0)
    204040a0:	5fbfc797          	auipc	a5,0x5fbfc
    204040a4:	5a878793          	addi	a5,a5,1448 # 80000648 <__metal_dt_interrupt_controller_c000000>
    204040a8:	00f71563          	bne	a4,a5,204040b2 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
    204040ac:	0c0007b7          	lui	a5,0xc000
    204040b0:	a011                	j	204040b4 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
    204040b2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:245
	}
}
    204040b4:	853e                	mv	a0,a5
    204040b6:	6462                	ld	s0,24(sp)
    204040b8:	6105                	addi	sp,sp,32
    204040ba:	8082                	ret

00000000204040bc <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
    204040bc:	1101                	addi	sp,sp,-32
    204040be:	ec22                	sd	s0,24(sp)
    204040c0:	1000                	addi	s0,sp,32
    204040c2:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
    204040c6:	fe843703          	ld	a4,-24(s0)
    204040ca:	5fbfc797          	auipc	a5,0x5fbfc
    204040ce:	57e78793          	addi	a5,a5,1406 # 80000648 <__metal_dt_interrupt_controller_c000000>
    204040d2:	00f71463          	bne	a4,a5,204040da <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
    204040d6:	47ed                	li	a5,27
    204040d8:	a011                	j	204040dc <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
    204040da:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:265
	}
}
    204040dc:	853e                	mv	a0,a5
    204040de:	6462                	ld	s0,24(sp)
    204040e0:	6105                	addi	sp,sp,32
    204040e2:	8082                	ret

00000000204040e4 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
    204040e4:	1101                	addi	sp,sp,-32
    204040e6:	ec22                	sd	s0,24(sp)
    204040e8:	1000                	addi	s0,sp,32
    204040ea:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
    204040ee:	fe843703          	ld	a4,-24(s0)
    204040f2:	5fbfc797          	auipc	a5,0x5fbfc
    204040f6:	55678793          	addi	a5,a5,1366 # 80000648 <__metal_dt_interrupt_controller_c000000>
    204040fa:	00f71463          	bne	a4,a5,20404102 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
    204040fe:	479d                	li	a5,7
    20404100:	a011                	j	20404104 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
    20404102:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:275
	}
}
    20404104:	853e                	mv	a0,a5
    20404106:	6462                	ld	s0,24(sp)
    20404108:	6105                	addi	sp,sp,32
    2040410a:	8082                	ret

000000002040410c <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
    2040410c:	1101                	addi	sp,sp,-32
    2040410e:	ec22                	sd	s0,24(sp)
    20404110:	1000                	addi	s0,sp,32
    20404112:	fea43423          	sd	a0,-24(s0)
    20404116:	87ae                	mv	a5,a1
    20404118:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:279
	if (idx == 0) {
    2040411c:	fe442783          	lw	a5,-28(s0)
    20404120:	2781                	sext.w	a5,a5
    20404122:	e791                	bnez	a5,2040412e <__metal_driver_sifive_plic0_interrupt_parents+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
    20404124:	5fbfc797          	auipc	a5,0x5fbfc
    20404128:	fb478793          	addi	a5,a5,-76 # 800000d8 <__metal_dt_cpu_0_interrupt_controller>
    2040412c:	a011                	j	20404130 <__metal_driver_sifive_plic0_interrupt_parents+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
    2040412e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:285
	}
}
    20404130:	853e                	mv	a0,a5
    20404132:	6462                	ld	s0,24(sp)
    20404134:	6105                	addi	sp,sp,32
    20404136:	8082                	ret

0000000020404138 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
    20404138:	1101                	addi	sp,sp,-32
    2040413a:	ec22                	sd	s0,24(sp)
    2040413c:	1000                	addi	s0,sp,32
    2040413e:	fea43423          	sd	a0,-24(s0)
    20404142:	87ae                	mv	a5,a1
    20404144:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:289
	if (idx == 0) {
    20404148:	fe442783          	lw	a5,-28(s0)
    2040414c:	2781                	sext.w	a5,a5
    2040414e:	e399                	bnez	a5,20404154 <__metal_driver_sifive_plic0_interrupt_lines+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:290
		return 11;
    20404150:	47ad                	li	a5,11
    20404152:	a011                	j	20404156 <__metal_driver_sifive_plic0_interrupt_lines+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
    20404154:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:295
	}
}
    20404156:	853e                	mv	a0,a5
    20404158:	6462                	ld	s0,24(sp)
    2040415a:	6105                	addi	sp,sp,32
    2040415c:	8082                	ret

000000002040415e <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
    2040415e:	7179                	addi	sp,sp,-48
    20404160:	f406                	sd	ra,40(sp)
    20404162:	f022                	sd	s0,32(sp)
    20404164:	1800                	addi	s0,sp,48
    20404166:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
    2040416a:	fd843503          	ld	a0,-40(s0)
    2040416e:	f25ff0ef          	jal	ra,20404092 <__metal_driver_sifive_plic0_control_base>
    20404172:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    20404176:	fe843703          	ld	a4,-24(s0)
    2040417a:	002007b7          	lui	a5,0x200
    2040417e:	0791                	addi	a5,a5,4
    20404180:	97ba                	add	a5,a5,a4
    20404182:	439c                	lw	a5,0(a5)
    20404184:	2781                	sext.w	a5,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
    20404186:	853e                	mv	a0,a5
    20404188:	70a2                	ld	ra,40(sp)
    2040418a:	7402                	ld	s0,32(sp)
    2040418c:	6145                	addi	sp,sp,48
    2040418e:	8082                	ret

0000000020404190 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
    20404190:	7179                	addi	sp,sp,-48
    20404192:	f406                	sd	ra,40(sp)
    20404194:	f022                	sd	s0,32(sp)
    20404196:	1800                	addi	s0,sp,48
    20404198:	fca43c23          	sd	a0,-40(s0)
    2040419c:	87ae                	mv	a5,a1
    2040419e:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
    204041a2:	fd843503          	ld	a0,-40(s0)
    204041a6:	eedff0ef          	jal	ra,20404092 <__metal_driver_sifive_plic0_control_base>
    204041aa:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    204041ae:	fe843703          	ld	a4,-24(s0)
    204041b2:	002007b7          	lui	a5,0x200
    204041b6:	0791                	addi	a5,a5,4
    204041b8:	97ba                	add	a5,a5,a4
    204041ba:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
    204041bc:	fd442783          	lw	a5,-44(s0)
    204041c0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
    204041c2:	0001                	nop
    204041c4:	70a2                	ld	ra,40(sp)
    204041c6:	7402                	ld	s0,32(sp)
    204041c8:	6145                	addi	sp,sp,48
    204041ca:	8082                	ret

00000000204041cc <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
    204041cc:	7179                	addi	sp,sp,-48
    204041ce:	f406                	sd	ra,40(sp)
    204041d0:	f022                	sd	s0,32(sp)
    204041d2:	1800                	addi	s0,sp,48
    204041d4:	fca43c23          	sd	a0,-40(s0)
    204041d8:	87ae                	mv	a5,a1
    204041da:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
    204041de:	fd843503          	ld	a0,-40(s0)
    204041e2:	eb1ff0ef          	jal	ra,20404092 <__metal_driver_sifive_plic0_control_base>
    204041e6:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    204041ea:	fe843703          	ld	a4,-24(s0)
    204041ee:	002007b7          	lui	a5,0x200
    204041f2:	97ba                	add	a5,a5,a4
    204041f4:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
    204041f6:	fd442783          	lw	a5,-44(s0)
    204041fa:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
    204041fc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
    204041fe:	853e                	mv	a0,a5
    20404200:	70a2                	ld	ra,40(sp)
    20404202:	7402                	ld	s0,32(sp)
    20404204:	6145                	addi	sp,sp,48
    20404206:	8082                	ret

0000000020404208 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
    20404208:	7179                	addi	sp,sp,-48
    2040420a:	f406                	sd	ra,40(sp)
    2040420c:	f022                	sd	s0,32(sp)
    2040420e:	1800                	addi	s0,sp,48
    20404210:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
    20404214:	fd843503          	ld	a0,-40(s0)
    20404218:	e7bff0ef          	jal	ra,20404092 <__metal_driver_sifive_plic0_control_base>
    2040421c:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    20404220:	fe843703          	ld	a4,-24(s0)
    20404224:	002007b7          	lui	a5,0x200
    20404228:	97ba                	add	a5,a5,a4
    2040422a:	439c                	lw	a5,0(a5)
    2040422c:	2781                	sext.w	a5,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
    2040422e:	853e                	mv	a0,a5
    20404230:	70a2                	ld	ra,40(sp)
    20404232:	7402                	ld	s0,32(sp)
    20404234:	6145                	addi	sp,sp,48
    20404236:	8082                	ret

0000000020404238 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
    20404238:	7179                	addi	sp,sp,-48
    2040423a:	f406                	sd	ra,40(sp)
    2040423c:	f022                	sd	s0,32(sp)
    2040423e:	1800                	addi	s0,sp,48
    20404240:	fca43c23          	sd	a0,-40(s0)
    20404244:	87ae                	mv	a5,a1
    20404246:	8732                	mv	a4,a2
    20404248:	fcf42a23          	sw	a5,-44(s0)
    2040424c:	87ba                	mv	a5,a4
    2040424e:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
    20404252:	fd843503          	ld	a0,-40(s0)
    20404256:	e3dff0ef          	jal	ra,20404092 <__metal_driver_sifive_plic0_control_base>
    2040425a:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
    2040425e:	fd843503          	ld	a0,-40(s0)
    20404262:	e83ff0ef          	jal	ra,204040e4 <__metal_driver_sifive_plic0_max_priority>
    20404266:	87aa                	mv	a5,a0
    20404268:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
    2040426c:	fe442783          	lw	a5,-28(s0)
    20404270:	2781                	sext.w	a5,a5
    20404272:	cb85                	beqz	a5,204042a2 <__metal_plic0_set_priority+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
    20404274:	fd042703          	lw	a4,-48(s0)
    20404278:	fe442783          	lw	a5,-28(s0)
    2040427c:	2701                	sext.w	a4,a4
    2040427e:	2781                	sext.w	a5,a5
    20404280:	02f77163          	bgeu	a4,a5,204042a2 <__metal_plic0_set_priority+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    20404284:	fd442783          	lw	a5,-44(s0)
    20404288:	0027979b          	slliw	a5,a5,0x2
    2040428c:	2781                	sext.w	a5,a5
    2040428e:	873e                	mv	a4,a5
    20404290:	fe843783          	ld	a5,-24(s0)
    20404294:	97ba                	add	a5,a5,a4
    20404296:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
    20404298:	fd042783          	lw	a5,-48(s0)
    2040429c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
    2040429e:	4781                	li	a5,0
    204042a0:	a011                	j	204042a4 <__metal_plic0_set_priority+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
    204042a2:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
    204042a4:	853e                	mv	a0,a5
    204042a6:	70a2                	ld	ra,40(sp)
    204042a8:	7402                	ld	s0,32(sp)
    204042aa:	6145                	addi	sp,sp,48
    204042ac:	8082                	ret

00000000204042ae <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
    204042ae:	7179                	addi	sp,sp,-48
    204042b0:	f406                	sd	ra,40(sp)
    204042b2:	f022                	sd	s0,32(sp)
    204042b4:	1800                	addi	s0,sp,48
    204042b6:	fca43c23          	sd	a0,-40(s0)
    204042ba:	87ae                	mv	a5,a1
    204042bc:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
    204042c0:	fd843503          	ld	a0,-40(s0)
    204042c4:	dcfff0ef          	jal	ra,20404092 <__metal_driver_sifive_plic0_control_base>
    204042c8:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    204042cc:	fd442783          	lw	a5,-44(s0)
    204042d0:	0027979b          	slliw	a5,a5,0x2
    204042d4:	2781                	sext.w	a5,a5
    204042d6:	873e                	mv	a4,a5
    204042d8:	fe843783          	ld	a5,-24(s0)
    204042dc:	97ba                	add	a5,a5,a4
    204042de:	439c                	lw	a5,0(a5)
    204042e0:	2781                	sext.w	a5,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
    204042e2:	853e                	mv	a0,a5
    204042e4:	70a2                	ld	ra,40(sp)
    204042e6:	7402                	ld	s0,32(sp)
    204042e8:	6145                	addi	sp,sp,48
    204042ea:	8082                	ret

00000000204042ec <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
    204042ec:	7179                	addi	sp,sp,-48
    204042ee:	f406                	sd	ra,40(sp)
    204042f0:	f022                	sd	s0,32(sp)
    204042f2:	1800                	addi	s0,sp,48
    204042f4:	fca43c23          	sd	a0,-40(s0)
    204042f8:	87ae                	mv	a5,a1
    204042fa:	8732                	mv	a4,a2
    204042fc:	fcf42a23          	sw	a5,-44(s0)
    20404300:	87ba                	mv	a5,a4
    20404302:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
    20404306:	fd843503          	ld	a0,-40(s0)
    2040430a:	d89ff0ef          	jal	ra,20404092 <__metal_driver_sifive_plic0_control_base>
    2040430e:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    20404312:	fd442783          	lw	a5,-44(s0)
    20404316:	4057d79b          	sraiw	a5,a5,0x5
    2040431a:	2781                	sext.w	a5,a5
    2040431c:	0027979b          	slliw	a5,a5,0x2
    20404320:	2781                	sext.w	a5,a5
    20404322:	873e                	mv	a4,a5
    20404324:	fe843783          	ld	a5,-24(s0)
    20404328:	973e                	add	a4,a4,a5
    2040432a:	6789                	lui	a5,0x2
    2040432c:	97ba                	add	a5,a5,a4
    2040432e:	439c                	lw	a5,0(a5)
    20404330:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
    20404334:	fd042783          	lw	a5,-48(s0)
    20404338:	2781                	sext.w	a5,a5
    2040433a:	c385                	beqz	a5,2040435a <__metal_plic0_enable+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
    2040433c:	fd442783          	lw	a5,-44(s0)
    20404340:	8bfd                	andi	a5,a5,31
    20404342:	2781                	sext.w	a5,a5
    20404344:	4705                	li	a4,1
    20404346:	00f717bb          	sllw	a5,a4,a5
    2040434a:	2781                	sext.w	a5,a5
    2040434c:	0007871b          	sext.w	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
    20404350:	fe442783          	lw	a5,-28(s0)
    20404354:	8fd9                	or	a5,a5,a4
    20404356:	2781                	sext.w	a5,a5
    20404358:	a015                	j	2040437c <__metal_plic0_enable+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
    2040435a:	fd442783          	lw	a5,-44(s0)
    2040435e:	8bfd                	andi	a5,a5,31
    20404360:	2781                	sext.w	a5,a5
    20404362:	4705                	li	a4,1
    20404364:	00f717bb          	sllw	a5,a4,a5
    20404368:	2781                	sext.w	a5,a5
    2040436a:	fff7c793          	not	a5,a5
    2040436e:	2781                	sext.w	a5,a5
    20404370:	0007871b          	sext.w	a4,a5
    20404374:	fe442783          	lw	a5,-28(s0)
    20404378:	8ff9                	and	a5,a5,a4
    2040437a:	2781                	sext.w	a5,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    2040437c:	fd442703          	lw	a4,-44(s0)
    20404380:	4057571b          	sraiw	a4,a4,0x5
    20404384:	2701                	sext.w	a4,a4
    20404386:	0027171b          	slliw	a4,a4,0x2
    2040438a:	2701                	sext.w	a4,a4
    2040438c:	86ba                	mv	a3,a4
    2040438e:	fe843703          	ld	a4,-24(s0)
    20404392:	96ba                	add	a3,a3,a4
    20404394:	6709                	lui	a4,0x2
    20404396:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
    20404398:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
    2040439a:	0001                	nop
    2040439c:	70a2                	ld	ra,40(sp)
    2040439e:	7402                	ld	s0,32(sp)
    204043a0:	6145                	addi	sp,sp,48
    204043a2:	8082                	ret

00000000204043a4 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
    204043a4:	1101                	addi	sp,sp,-32
    204043a6:	ec06                	sd	ra,24(sp)
    204043a8:	e822                	sd	s0,16(sp)
    204043aa:	1000                	addi	s0,sp,32
    204043ac:	87aa                	mv	a5,a0
    204043ae:	feb43023          	sd	a1,-32(s0)
    204043b2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
    204043b6:	12c00513          	li	a0,300
    204043ba:	57c010ef          	jal	ra,20405936 <metal_shutdown>

00000000204043be <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
    204043be:	7179                	addi	sp,sp,-48
    204043c0:	f406                	sd	ra,40(sp)
    204043c2:	f022                	sd	s0,32(sp)
    204043c4:	1800                	addi	s0,sp,48
    204043c6:	87aa                	mv	a5,a0
    204043c8:	fcb43823          	sd	a1,-48(s0)
    204043cc:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
    204043d0:	fd043783          	ld	a5,-48(s0)
    204043d4:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
    204043d8:	fe843503          	ld	a0,-24(s0)
    204043dc:	d83ff0ef          	jal	ra,2040415e <__metal_plic0_claim_interrupt>
    204043e0:	87aa                	mv	a5,a0
    204043e2:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
    204043e6:	fe843503          	ld	a0,-24(s0)
    204043ea:	cd3ff0ef          	jal	ra,204040bc <__metal_driver_sifive_plic0_num_interrupts>
    204043ee:	87aa                	mv	a5,a0
    204043f0:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
    204043f4:	fe442703          	lw	a4,-28(s0)
    204043f8:	fe042783          	lw	a5,-32(s0)
    204043fc:	2701                	sext.w	a4,a4
    204043fe:	2781                	sext.w	a5,a5
    20404400:	04f77063          	bgeu	a4,a5,20404440 <__metal_plic0_handler+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
    20404404:	fe843703          	ld	a4,-24(s0)
    20404408:	fe446783          	lwu	a5,-28(s0)
    2040440c:	0789                	addi	a5,a5,2
    2040440e:	078e                	slli	a5,a5,0x3
    20404410:	97ba                	add	a5,a5,a4
    20404412:	639c                	ld	a5,0(a5)
    20404414:	c795                	beqz	a5,20404440 <__metal_plic0_handler+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
    20404416:	fe843703          	ld	a4,-24(s0)
    2040441a:	fe446783          	lwu	a5,-28(s0)
    2040441e:	0789                	addi	a5,a5,2
    20404420:	078e                	slli	a5,a5,0x3
    20404422:	97ba                	add	a5,a5,a4
    20404424:	6390                	ld	a2,0(a5)
    20404426:	fe442683          	lw	a3,-28(s0)
    2040442a:	fe843703          	ld	a4,-24(s0)
    2040442e:	fe446783          	lwu	a5,-28(s0)
    20404432:	0796                	slli	a5,a5,0x5
    20404434:	97ba                	add	a5,a5,a4
    20404436:	1007b783          	ld	a5,256(a5) # 2100 <__heap_size+0x1900>
    2040443a:	85be                	mv	a1,a5
    2040443c:	8536                	mv	a0,a3
    2040443e:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
    20404440:	fe442783          	lw	a5,-28(s0)
    20404444:	85be                	mv	a1,a5
    20404446:	fe843503          	ld	a0,-24(s0)
    2040444a:	d47ff0ef          	jal	ra,20404190 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
    2040444e:	0001                	nop
    20404450:	70a2                	ld	ra,40(sp)
    20404452:	7402                	ld	s0,32(sp)
    20404454:	6145                	addi	sp,sp,48
    20404456:	8082                	ret

0000000020404458 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
    20404458:	715d                	addi	sp,sp,-80
    2040445a:	e486                	sd	ra,72(sp)
    2040445c:	e0a2                	sd	s0,64(sp)
    2040445e:	0880                	addi	s0,sp,80
    20404460:	faa43c23          	sd	a0,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    20404464:	fb843783          	ld	a5,-72(s0)
    20404468:	fef43023          	sd	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
    2040446c:	fe043783          	ld	a5,-32(s0)
    20404470:	479c                	lw	a5,8(a5)
    20404472:	12079963          	bnez	a5,204045a4 <__metal_driver_riscv_plic0_init+0x14c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
    20404476:	fe042623          	sw	zero,-20(s0)
    2040447a:	aa21                	j	20404592 <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
    2040447c:	fb843503          	ld	a0,-72(s0)
    20404480:	c3dff0ef          	jal	ra,204040bc <__metal_driver_sifive_plic0_num_interrupts>
    20404484:	87aa                	mv	a5,a0
    20404486:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
    2040448a:	fec42783          	lw	a5,-20(s0)
    2040448e:	85be                	mv	a1,a5
    20404490:	fb843503          	ld	a0,-72(s0)
    20404494:	c79ff0ef          	jal	ra,2040410c <__metal_driver_sifive_plic0_interrupt_parents>
    20404498:	fca43823          	sd	a0,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
    2040449c:	fec42783          	lw	a5,-20(s0)
    204044a0:	85be                	mv	a1,a5
    204044a2:	fb843503          	ld	a0,-72(s0)
    204044a6:	c93ff0ef          	jal	ra,20404138 <__metal_driver_sifive_plic0_interrupt_lines>
    204044aa:	87aa                	mv	a5,a0
    204044ac:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
    204044b0:	fd043783          	ld	a5,-48(s0)
    204044b4:	639c                	ld	a5,0(a5)
    204044b6:	639c                	ld	a5,0(a5)
    204044b8:	fd043503          	ld	a0,-48(s0)
    204044bc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
    204044be:	fe042423          	sw	zero,-24(s0)
    204044c2:	a8b9                	j	20404520 <__metal_driver_riscv_plic0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
    204044c4:	fe842783          	lw	a5,-24(s0)
    204044c8:	4601                	li	a2,0
    204044ca:	85be                	mv	a1,a5
    204044cc:	fe043503          	ld	a0,-32(s0)
    204044d0:	e1dff0ef          	jal	ra,204042ec <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
    204044d4:	fe842783          	lw	a5,-24(s0)
    204044d8:	4601                	li	a2,0
    204044da:	85be                	mv	a1,a5
    204044dc:	fb843503          	ld	a0,-72(s0)
    204044e0:	d59ff0ef          	jal	ra,20404238 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
    204044e4:	fe043703          	ld	a4,-32(s0)
    204044e8:	fe842783          	lw	a5,-24(s0)
    204044ec:	0789                	addi	a5,a5,2
    204044ee:	078e                	slli	a5,a5,0x3
    204044f0:	97ba                	add	a5,a5,a4
    204044f2:	0007b023          	sd	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
    204044f6:	fe043703          	ld	a4,-32(s0)
    204044fa:	fe842783          	lw	a5,-24(s0)
    204044fe:	0796                	slli	a5,a5,0x5
    20404500:	97ba                	add	a5,a5,a4
    20404502:	0e07bc23          	sd	zero,248(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
    20404506:	fe043703          	ld	a4,-32(s0)
    2040450a:	fe842783          	lw	a5,-24(s0)
    2040450e:	0796                	slli	a5,a5,0x5
    20404510:	97ba                	add	a5,a5,a4
    20404512:	1007b023          	sd	zero,256(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
    20404516:	fe842783          	lw	a5,-24(s0)
    2040451a:	2785                	addiw	a5,a5,1
    2040451c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
    20404520:	fe842703          	lw	a4,-24(s0)
    20404524:	fdc42783          	lw	a5,-36(s0)
    20404528:	2701                	sext.w	a4,a4
    2040452a:	2781                	sext.w	a5,a5
    2040452c:	f8f74ce3          	blt	a4,a5,204044c4 <__metal_driver_riscv_plic0_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
    20404530:	4581                	li	a1,0
    20404532:	fb843503          	ld	a0,-72(s0)
    20404536:	c97ff0ef          	jal	ra,204041cc <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
    2040453a:	fd043783          	ld	a5,-48(s0)
    2040453e:	639c                	ld	a5,0(a5)
    20404540:	7f98                	ld	a4,56(a5)
    20404542:	fcc42783          	lw	a5,-52(s0)
    20404546:	fe043683          	ld	a3,-32(s0)
    2040454a:	4601                	li	a2,0
    2040454c:	85be                	mv	a1,a5
    2040454e:	fd043503          	ld	a0,-48(s0)
    20404552:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
    20404554:	fd043783          	ld	a5,-48(s0)
    20404558:	639c                	ld	a5,0(a5)
    2040455a:	7f98                	ld	a4,56(a5)
    2040455c:	fcc42783          	lw	a5,-52(s0)
    20404560:	fe043683          	ld	a3,-32(s0)
    20404564:	00000617          	auipc	a2,0x0
    20404568:	e5a60613          	addi	a2,a2,-422 # 204043be <__metal_plic0_handler>
    2040456c:	85be                	mv	a1,a5
    2040456e:	fd043503          	ld	a0,-48(s0)
    20404572:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
    20404574:	fd043783          	ld	a5,-48(s0)
    20404578:	639c                	ld	a5,0(a5)
    2040457a:	67b8                	ld	a4,72(a5)
    2040457c:	fcc42783          	lw	a5,-52(s0)
    20404580:	85be                	mv	a1,a5
    20404582:	fd043503          	ld	a0,-48(s0)
    20404586:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
    20404588:	fec42783          	lw	a5,-20(s0)
    2040458c:	2785                	addiw	a5,a5,1
    2040458e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
    20404592:	fec42783          	lw	a5,-20(s0)
    20404596:	2781                	sext.w	a5,a5
    20404598:	eef052e3          	blez	a5,2040447c <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
    2040459c:	fe043783          	ld	a5,-32(s0)
    204045a0:	4705                	li	a4,1
    204045a2:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
    204045a4:	0001                	nop
    204045a6:	60a6                	ld	ra,72(sp)
    204045a8:	6406                	ld	s0,64(sp)
    204045aa:	6161                	addi	sp,sp,80
    204045ac:	8082                	ret

00000000204045ae <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
    204045ae:	7139                	addi	sp,sp,-64
    204045b0:	fc06                	sd	ra,56(sp)
    204045b2:	f822                	sd	s0,48(sp)
    204045b4:	0080                	addi	s0,sp,64
    204045b6:	fca43c23          	sd	a0,-40(s0)
    204045ba:	87ae                	mv	a5,a1
    204045bc:	fcc43423          	sd	a2,-56(s0)
    204045c0:	fcd43023          	sd	a3,-64(s0)
    204045c4:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    204045c8:	fd843783          	ld	a5,-40(s0)
    204045cc:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
    204045d0:	fd843503          	ld	a0,-40(s0)
    204045d4:	ae9ff0ef          	jal	ra,204040bc <__metal_driver_sifive_plic0_num_interrupts>
    204045d8:	87aa                	mv	a5,a0
    204045da:	873e                	mv	a4,a5
    204045dc:	fd442783          	lw	a5,-44(s0)
    204045e0:	2781                	sext.w	a5,a5
    204045e2:	00e7c463          	blt	a5,a4,204045ea <__metal_driver_riscv_plic0_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
    204045e6:	57fd                	li	a5,-1
    204045e8:	a8bd                	j	20404666 <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
    204045ea:	fc843783          	ld	a5,-56(s0)
    204045ee:	cf95                	beqz	a5,2040462a <__metal_driver_riscv_plic0_register+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
    204045f0:	fd442783          	lw	a5,-44(s0)
    204045f4:	4609                	li	a2,2
    204045f6:	85be                	mv	a1,a5
    204045f8:	fd843503          	ld	a0,-40(s0)
    204045fc:	c3dff0ef          	jal	ra,20404238 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
    20404600:	fe843703          	ld	a4,-24(s0)
    20404604:	fd442783          	lw	a5,-44(s0)
    20404608:	0789                	addi	a5,a5,2
    2040460a:	078e                	slli	a5,a5,0x3
    2040460c:	97ba                	add	a5,a5,a4
    2040460e:	fc843703          	ld	a4,-56(s0)
    20404612:	e398                	sd	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
    20404614:	fe843703          	ld	a4,-24(s0)
    20404618:	fd442783          	lw	a5,-44(s0)
    2040461c:	0796                	slli	a5,a5,0x5
    2040461e:	97ba                	add	a5,a5,a4
    20404620:	fc043703          	ld	a4,-64(s0)
    20404624:	10e7b023          	sd	a4,256(a5)
    20404628:	a835                	j	20404664 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
    2040462a:	fd442783          	lw	a5,-44(s0)
    2040462e:	4605                	li	a2,1
    20404630:	85be                	mv	a1,a5
    20404632:	fd843503          	ld	a0,-40(s0)
    20404636:	c03ff0ef          	jal	ra,20404238 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
    2040463a:	fe843703          	ld	a4,-24(s0)
    2040463e:	fd442783          	lw	a5,-44(s0)
    20404642:	0789                	addi	a5,a5,2
    20404644:	078e                	slli	a5,a5,0x3
    20404646:	97ba                	add	a5,a5,a4
    20404648:	00000717          	auipc	a4,0x0
    2040464c:	d5c70713          	addi	a4,a4,-676 # 204043a4 <__metal_plic0_default_handler>
    20404650:	e398                	sd	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
    20404652:	fe843703          	ld	a4,-24(s0)
    20404656:	fd442783          	lw	a5,-44(s0)
    2040465a:	0796                	slli	a5,a5,0x5
    2040465c:	97ba                	add	a5,a5,a4
    2040465e:	fc043703          	ld	a4,-64(s0)
    20404662:	fff8                	sd	a4,248(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
    20404664:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
    20404666:	853e                	mv	a0,a5
    20404668:	70e2                	ld	ra,56(sp)
    2040466a:	7442                	ld	s0,48(sp)
    2040466c:	6121                	addi	sp,sp,64
    2040466e:	8082                	ret

0000000020404670 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
    20404670:	7179                	addi	sp,sp,-48
    20404672:	f406                	sd	ra,40(sp)
    20404674:	f022                	sd	s0,32(sp)
    20404676:	1800                	addi	s0,sp,48
    20404678:	fca43c23          	sd	a0,-40(s0)
    2040467c:	87ae                	mv	a5,a1
    2040467e:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    20404682:	fd843783          	ld	a5,-40(s0)
    20404686:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
    2040468a:	fd843503          	ld	a0,-40(s0)
    2040468e:	a2fff0ef          	jal	ra,204040bc <__metal_driver_sifive_plic0_num_interrupts>
    20404692:	87aa                	mv	a5,a0
    20404694:	873e                	mv	a4,a5
    20404696:	fd442783          	lw	a5,-44(s0)
    2040469a:	2781                	sext.w	a5,a5
    2040469c:	00e7c463          	blt	a5,a4,204046a4 <__metal_driver_riscv_plic0_enable+0x34>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
    204046a0:	57fd                	li	a5,-1
    204046a2:	a811                	j	204046b6 <__metal_driver_riscv_plic0_enable+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
    204046a4:	fd442783          	lw	a5,-44(s0)
    204046a8:	4605                	li	a2,1
    204046aa:	85be                	mv	a1,a5
    204046ac:	fe843503          	ld	a0,-24(s0)
    204046b0:	c3dff0ef          	jal	ra,204042ec <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
    204046b4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
    204046b6:	853e                	mv	a0,a5
    204046b8:	70a2                	ld	ra,40(sp)
    204046ba:	7402                	ld	s0,32(sp)
    204046bc:	6145                	addi	sp,sp,48
    204046be:	8082                	ret

00000000204046c0 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
    204046c0:	7179                	addi	sp,sp,-48
    204046c2:	f406                	sd	ra,40(sp)
    204046c4:	f022                	sd	s0,32(sp)
    204046c6:	1800                	addi	s0,sp,48
    204046c8:	fca43c23          	sd	a0,-40(s0)
    204046cc:	87ae                	mv	a5,a1
    204046ce:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    204046d2:	fd843783          	ld	a5,-40(s0)
    204046d6:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
    204046da:	fd843503          	ld	a0,-40(s0)
    204046de:	9dfff0ef          	jal	ra,204040bc <__metal_driver_sifive_plic0_num_interrupts>
    204046e2:	87aa                	mv	a5,a0
    204046e4:	873e                	mv	a4,a5
    204046e6:	fd442783          	lw	a5,-44(s0)
    204046ea:	2781                	sext.w	a5,a5
    204046ec:	00e7c463          	blt	a5,a4,204046f4 <__metal_driver_riscv_plic0_disable+0x34>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
    204046f0:	57fd                	li	a5,-1
    204046f2:	a811                	j	20404706 <__metal_driver_riscv_plic0_disable+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
    204046f4:	fd442783          	lw	a5,-44(s0)
    204046f8:	4601                	li	a2,0
    204046fa:	85be                	mv	a1,a5
    204046fc:	fe843503          	ld	a0,-24(s0)
    20404700:	bedff0ef          	jal	ra,204042ec <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
    20404704:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
    20404706:	853e                	mv	a0,a5
    20404708:	70a2                	ld	ra,40(sp)
    2040470a:	7402                	ld	s0,32(sp)
    2040470c:	6145                	addi	sp,sp,48
    2040470e:	8082                	ret

0000000020404710 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
    20404710:	1101                	addi	sp,sp,-32
    20404712:	ec22                	sd	s0,24(sp)
    20404714:	1000                	addi	s0,sp,32
    20404716:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
    2040471a:	fe843703          	ld	a4,-24(s0)
    2040471e:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    20404722:	00f71563          	bne	a4,a5,2040472c <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
    20404726:	100127b7          	lui	a5,0x10012
    2040472a:	a011                	j	2040472e <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
    2040472c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:395
	}
}
    2040472e:	853e                	mv	a0,a5
    20404730:	6462                	ld	s0,24(sp)
    20404732:	6105                	addi	sp,sp,32
    20404734:	8082                	ret

0000000020404736 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
    20404736:	1101                	addi	sp,sp,-32
    20404738:	ec22                	sd	s0,24(sp)
    2040473a:	1000                	addi	s0,sp,32
    2040473c:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
    20404740:	fe843703          	ld	a4,-24(s0)
    20404744:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    20404748:	00f71763          	bne	a4,a5,20404756 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
    2040474c:	5fbfc797          	auipc	a5,0x5fbfc
    20404750:	efc78793          	addi	a5,a5,-260 # 80000648 <__metal_dt_interrupt_controller_c000000>
    20404754:	a011                	j	20404758 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
    20404756:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:425
	}
}
    20404758:	853e                	mv	a0,a5
    2040475a:	6462                	ld	s0,24(sp)
    2040475c:	6105                	addi	sp,sp,32
    2040475e:	8082                	ret

0000000020404760 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
    20404760:	1101                	addi	sp,sp,-32
    20404762:	ec22                	sd	s0,24(sp)
    20404764:	1000                	addi	s0,sp,32
    20404766:	fea43423          	sd	a0,-24(s0)
    2040476a:	87ae                	mv	a5,a1
    2040476c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
    20404770:	fe843703          	ld	a4,-24(s0)
    20404774:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    20404778:	00f71863          	bne	a4,a5,20404788 <__metal_driver_sifive_gpio0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:429 (discriminator 1)
    2040477c:	fe442783          	lw	a5,-28(s0)
    20404780:	2781                	sext.w	a5,a5
    20404782:	e399                	bnez	a5,20404788 <__metal_driver_sifive_gpio0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:430
		return 7;
    20404784:	479d                	li	a5,7
    20404786:	a2d9                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
    20404788:	fe843703          	ld	a4,-24(s0)
    2040478c:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    20404790:	00f71b63          	bne	a4,a5,204047a6 <__metal_driver_sifive_gpio0_interrupt_lines+0x46>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:432 (discriminator 1)
    20404794:	fe442783          	lw	a5,-28(s0)
    20404798:	0007871b          	sext.w	a4,a5
    2040479c:	4785                	li	a5,1
    2040479e:	00f71463          	bne	a4,a5,204047a6 <__metal_driver_sifive_gpio0_interrupt_lines+0x46>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:433
		return 8;
    204047a2:	47a1                	li	a5,8
    204047a4:	a265                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
    204047a6:	fe843703          	ld	a4,-24(s0)
    204047aa:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    204047ae:	00f71b63          	bne	a4,a5,204047c4 <__metal_driver_sifive_gpio0_interrupt_lines+0x64>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:435 (discriminator 1)
    204047b2:	fe442783          	lw	a5,-28(s0)
    204047b6:	0007871b          	sext.w	a4,a5
    204047ba:	4789                	li	a5,2
    204047bc:	00f71463          	bne	a4,a5,204047c4 <__metal_driver_sifive_gpio0_interrupt_lines+0x64>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:436
		return 9;
    204047c0:	47a5                	li	a5,9
    204047c2:	a269                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
    204047c4:	fe843703          	ld	a4,-24(s0)
    204047c8:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    204047cc:	00f71b63          	bne	a4,a5,204047e2 <__metal_driver_sifive_gpio0_interrupt_lines+0x82>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:438 (discriminator 1)
    204047d0:	fe442783          	lw	a5,-28(s0)
    204047d4:	0007871b          	sext.w	a4,a5
    204047d8:	478d                	li	a5,3
    204047da:	00f71463          	bne	a4,a5,204047e2 <__metal_driver_sifive_gpio0_interrupt_lines+0x82>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:439
		return 10;
    204047de:	47a9                	li	a5,10
    204047e0:	a2b5                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
    204047e2:	fe843703          	ld	a4,-24(s0)
    204047e6:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    204047ea:	00f71b63          	bne	a4,a5,20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0xa0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:441 (discriminator 1)
    204047ee:	fe442783          	lw	a5,-28(s0)
    204047f2:	0007871b          	sext.w	a4,a5
    204047f6:	4791                	li	a5,4
    204047f8:	00f71463          	bne	a4,a5,20404800 <__metal_driver_sifive_gpio0_interrupt_lines+0xa0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:442
		return 11;
    204047fc:	47ad                	li	a5,11
    204047fe:	a2b9                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
    20404800:	fe843703          	ld	a4,-24(s0)
    20404804:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    20404808:	00f71b63          	bne	a4,a5,2040481e <__metal_driver_sifive_gpio0_interrupt_lines+0xbe>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:444 (discriminator 1)
    2040480c:	fe442783          	lw	a5,-28(s0)
    20404810:	0007871b          	sext.w	a4,a5
    20404814:	4795                	li	a5,5
    20404816:	00f71463          	bne	a4,a5,2040481e <__metal_driver_sifive_gpio0_interrupt_lines+0xbe>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:445
		return 12;
    2040481a:	47b1                	li	a5,12
    2040481c:	aa05                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
    2040481e:	fe843703          	ld	a4,-24(s0)
    20404822:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    20404826:	00f71b63          	bne	a4,a5,2040483c <__metal_driver_sifive_gpio0_interrupt_lines+0xdc>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:447 (discriminator 1)
    2040482a:	fe442783          	lw	a5,-28(s0)
    2040482e:	0007871b          	sext.w	a4,a5
    20404832:	4799                	li	a5,6
    20404834:	00f71463          	bne	a4,a5,2040483c <__metal_driver_sifive_gpio0_interrupt_lines+0xdc>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:448
		return 13;
    20404838:	47b5                	li	a5,13
    2040483a:	aa09                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
    2040483c:	fe843703          	ld	a4,-24(s0)
    20404840:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    20404844:	00f71b63          	bne	a4,a5,2040485a <__metal_driver_sifive_gpio0_interrupt_lines+0xfa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:450 (discriminator 1)
    20404848:	fe442783          	lw	a5,-28(s0)
    2040484c:	0007871b          	sext.w	a4,a5
    20404850:	479d                	li	a5,7
    20404852:	00f71463          	bne	a4,a5,2040485a <__metal_driver_sifive_gpio0_interrupt_lines+0xfa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:451
		return 14;
    20404856:	47b9                	li	a5,14
    20404858:	a8d5                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
    2040485a:	fe843703          	ld	a4,-24(s0)
    2040485e:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    20404862:	00f71b63          	bne	a4,a5,20404878 <__metal_driver_sifive_gpio0_interrupt_lines+0x118>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:453 (discriminator 1)
    20404866:	fe442783          	lw	a5,-28(s0)
    2040486a:	0007871b          	sext.w	a4,a5
    2040486e:	47a1                	li	a5,8
    20404870:	00f71463          	bne	a4,a5,20404878 <__metal_driver_sifive_gpio0_interrupt_lines+0x118>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:454
		return 15;
    20404874:	47bd                	li	a5,15
    20404876:	a8d9                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
    20404878:	fe843703          	ld	a4,-24(s0)
    2040487c:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    20404880:	00f71b63          	bne	a4,a5,20404896 <__metal_driver_sifive_gpio0_interrupt_lines+0x136>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:456 (discriminator 1)
    20404884:	fe442783          	lw	a5,-28(s0)
    20404888:	0007871b          	sext.w	a4,a5
    2040488c:	47a5                	li	a5,9
    2040488e:	00f71463          	bne	a4,a5,20404896 <__metal_driver_sifive_gpio0_interrupt_lines+0x136>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:457
		return 16;
    20404892:	47c1                	li	a5,16
    20404894:	a865                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
    20404896:	fe843703          	ld	a4,-24(s0)
    2040489a:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    2040489e:	00f71b63          	bne	a4,a5,204048b4 <__metal_driver_sifive_gpio0_interrupt_lines+0x154>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:459 (discriminator 1)
    204048a2:	fe442783          	lw	a5,-28(s0)
    204048a6:	0007871b          	sext.w	a4,a5
    204048aa:	47a9                	li	a5,10
    204048ac:	00f71463          	bne	a4,a5,204048b4 <__metal_driver_sifive_gpio0_interrupt_lines+0x154>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:460
		return 17;
    204048b0:	47c5                	li	a5,17
    204048b2:	a869                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
    204048b4:	fe843703          	ld	a4,-24(s0)
    204048b8:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    204048bc:	00f71b63          	bne	a4,a5,204048d2 <__metal_driver_sifive_gpio0_interrupt_lines+0x172>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:462 (discriminator 1)
    204048c0:	fe442783          	lw	a5,-28(s0)
    204048c4:	0007871b          	sext.w	a4,a5
    204048c8:	47ad                	li	a5,11
    204048ca:	00f71463          	bne	a4,a5,204048d2 <__metal_driver_sifive_gpio0_interrupt_lines+0x172>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:463
		return 18;
    204048ce:	47c9                	li	a5,18
    204048d0:	a8b5                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
    204048d2:	fe843703          	ld	a4,-24(s0)
    204048d6:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    204048da:	00f71b63          	bne	a4,a5,204048f0 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:465 (discriminator 1)
    204048de:	fe442783          	lw	a5,-28(s0)
    204048e2:	0007871b          	sext.w	a4,a5
    204048e6:	47b1                	li	a5,12
    204048e8:	00f71463          	bne	a4,a5,204048f0 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:466
		return 19;
    204048ec:	47cd                	li	a5,19
    204048ee:	a8b9                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
    204048f0:	fe843703          	ld	a4,-24(s0)
    204048f4:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    204048f8:	00f71b63          	bne	a4,a5,2040490e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ae>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:468 (discriminator 1)
    204048fc:	fe442783          	lw	a5,-28(s0)
    20404900:	0007871b          	sext.w	a4,a5
    20404904:	47b5                	li	a5,13
    20404906:	00f71463          	bne	a4,a5,2040490e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ae>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:469
		return 20;
    2040490a:	47d1                	li	a5,20
    2040490c:	a081                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
    2040490e:	fe843703          	ld	a4,-24(s0)
    20404912:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    20404916:	00f71b63          	bne	a4,a5,2040492c <__metal_driver_sifive_gpio0_interrupt_lines+0x1cc>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:471 (discriminator 1)
    2040491a:	fe442783          	lw	a5,-28(s0)
    2040491e:	0007871b          	sext.w	a4,a5
    20404922:	47b9                	li	a5,14
    20404924:	00f71463          	bne	a4,a5,2040492c <__metal_driver_sifive_gpio0_interrupt_lines+0x1cc>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:472
		return 21;
    20404928:	47d5                	li	a5,21
    2040492a:	a00d                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
    2040492c:	fe843703          	ld	a4,-24(s0)
    20404930:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    20404934:	00f71b63          	bne	a4,a5,2040494a <__metal_driver_sifive_gpio0_interrupt_lines+0x1ea>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:474 (discriminator 1)
    20404938:	fe442783          	lw	a5,-28(s0)
    2040493c:	0007871b          	sext.w	a4,a5
    20404940:	47bd                	li	a5,15
    20404942:	00f71463          	bne	a4,a5,2040494a <__metal_driver_sifive_gpio0_interrupt_lines+0x1ea>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:475
		return 22;
    20404946:	47d9                	li	a5,22
    20404948:	a011                	j	2040494c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ec>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
    2040494a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:480
	}
}
    2040494c:	853e                	mv	a0,a5
    2040494e:	6462                	ld	s0,24(sp)
    20404950:	6105                	addi	sp,sp,32
    20404952:	8082                	ret

0000000020404954 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
    20404954:	7179                	addi	sp,sp,-48
    20404956:	f406                	sd	ra,40(sp)
    20404958:	f022                	sd	s0,32(sp)
    2040495a:	1800                	addi	s0,sp,48
    2040495c:	fca43c23          	sd	a0,-40(s0)
    20404960:	fcb43823          	sd	a1,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
    20404964:	fd843503          	ld	a0,-40(s0)
    20404968:	da9ff0ef          	jal	ra,20404710 <__metal_driver_sifive_gpio0_base>
    2040496c:	87aa                	mv	a5,a0
    2040496e:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
    20404972:	fe843783          	ld	a5,-24(s0)
    20404976:	0791                	addi	a5,a5,4
    20404978:	439c                	lw	a5,0(a5)
    2040497a:	2781                	sext.w	a5,a5
    2040497c:	0007871b          	sext.w	a4,a5
    20404980:	fd043783          	ld	a5,-48(s0)
    20404984:	2781                	sext.w	a5,a5
    20404986:	8fd9                	or	a5,a5,a4
    20404988:	0007869b          	sext.w	a3,a5
    2040498c:	fe843783          	ld	a5,-24(s0)
    20404990:	0791                	addi	a5,a5,4
    20404992:	873e                	mv	a4,a5
    20404994:	0006879b          	sext.w	a5,a3
    20404998:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
    2040499a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
    2040499c:	853e                	mv	a0,a5
    2040499e:	70a2                	ld	ra,40(sp)
    204049a0:	7402                	ld	s0,32(sp)
    204049a2:	6145                	addi	sp,sp,48
    204049a4:	8082                	ret

00000000204049a6 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
    204049a6:	7179                	addi	sp,sp,-48
    204049a8:	f406                	sd	ra,40(sp)
    204049aa:	f022                	sd	s0,32(sp)
    204049ac:	1800                	addi	s0,sp,48
    204049ae:	fca43c23          	sd	a0,-40(s0)
    204049b2:	fcb43823          	sd	a1,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
    204049b6:	fd843503          	ld	a0,-40(s0)
    204049ba:	d57ff0ef          	jal	ra,20404710 <__metal_driver_sifive_gpio0_base>
    204049be:	87aa                	mv	a5,a0
    204049c0:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
    204049c4:	fe843783          	ld	a5,-24(s0)
    204049c8:	0791                	addi	a5,a5,4
    204049ca:	439c                	lw	a5,0(a5)
    204049cc:	2781                	sext.w	a5,a5
    204049ce:	0007871b          	sext.w	a4,a5
    204049d2:	fd043783          	ld	a5,-48(s0)
    204049d6:	2781                	sext.w	a5,a5
    204049d8:	fff7c793          	not	a5,a5
    204049dc:	2781                	sext.w	a5,a5
    204049de:	8ff9                	and	a5,a5,a4
    204049e0:	0007869b          	sext.w	a3,a5
    204049e4:	fe843783          	ld	a5,-24(s0)
    204049e8:	0791                	addi	a5,a5,4
    204049ea:	873e                	mv	a4,a5
    204049ec:	0006879b          	sext.w	a5,a3
    204049f0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
    204049f2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
    204049f4:	853e                	mv	a0,a5
    204049f6:	70a2                	ld	ra,40(sp)
    204049f8:	7402                	ld	s0,32(sp)
    204049fa:	6145                	addi	sp,sp,48
    204049fc:	8082                	ret

00000000204049fe <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
    204049fe:	7179                	addi	sp,sp,-48
    20404a00:	f406                	sd	ra,40(sp)
    20404a02:	f022                	sd	s0,32(sp)
    20404a04:	1800                	addi	s0,sp,48
    20404a06:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
    20404a0a:	fd843503          	ld	a0,-40(s0)
    20404a0e:	d03ff0ef          	jal	ra,20404710 <__metal_driver_sifive_gpio0_base>
    20404a12:	87aa                	mv	a5,a0
    20404a14:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
    20404a18:	fe843783          	ld	a5,-24(s0)
    20404a1c:	439c                	lw	a5,0(a5)
    20404a1e:	2781                	sext.w	a5,a5
    20404a20:	1782                	slli	a5,a5,0x20
    20404a22:	9381                	srli	a5,a5,0x20
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
    20404a24:	853e                	mv	a0,a5
    20404a26:	70a2                	ld	ra,40(sp)
    20404a28:	7402                	ld	s0,32(sp)
    20404a2a:	6145                	addi	sp,sp,48
    20404a2c:	8082                	ret

0000000020404a2e <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
    20404a2e:	7179                	addi	sp,sp,-48
    20404a30:	f406                	sd	ra,40(sp)
    20404a32:	f022                	sd	s0,32(sp)
    20404a34:	1800                	addi	s0,sp,48
    20404a36:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
    20404a3a:	fd843503          	ld	a0,-40(s0)
    20404a3e:	cd3ff0ef          	jal	ra,20404710 <__metal_driver_sifive_gpio0_base>
    20404a42:	87aa                	mv	a5,a0
    20404a44:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
    20404a48:	fe843783          	ld	a5,-24(s0)
    20404a4c:	07b1                	addi	a5,a5,12
    20404a4e:	439c                	lw	a5,0(a5)
    20404a50:	2781                	sext.w	a5,a5
    20404a52:	1782                	slli	a5,a5,0x20
    20404a54:	9381                	srli	a5,a5,0x20
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
    20404a56:	853e                	mv	a0,a5
    20404a58:	70a2                	ld	ra,40(sp)
    20404a5a:	7402                	ld	s0,32(sp)
    20404a5c:	6145                	addi	sp,sp,48
    20404a5e:	8082                	ret

0000000020404a60 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
    20404a60:	7179                	addi	sp,sp,-48
    20404a62:	f406                	sd	ra,40(sp)
    20404a64:	f022                	sd	s0,32(sp)
    20404a66:	1800                	addi	s0,sp,48
    20404a68:	fca43c23          	sd	a0,-40(s0)
    20404a6c:	fcb43823          	sd	a1,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
    20404a70:	fd843503          	ld	a0,-40(s0)
    20404a74:	c9dff0ef          	jal	ra,20404710 <__metal_driver_sifive_gpio0_base>
    20404a78:	87aa                	mv	a5,a0
    20404a7a:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
    20404a7e:	fe843783          	ld	a5,-24(s0)
    20404a82:	07a1                	addi	a5,a5,8
    20404a84:	439c                	lw	a5,0(a5)
    20404a86:	2781                	sext.w	a5,a5
    20404a88:	0007871b          	sext.w	a4,a5
    20404a8c:	fd043783          	ld	a5,-48(s0)
    20404a90:	2781                	sext.w	a5,a5
    20404a92:	fff7c793          	not	a5,a5
    20404a96:	2781                	sext.w	a5,a5
    20404a98:	8ff9                	and	a5,a5,a4
    20404a9a:	0007869b          	sext.w	a3,a5
    20404a9e:	fe843783          	ld	a5,-24(s0)
    20404aa2:	07a1                	addi	a5,a5,8
    20404aa4:	873e                	mv	a4,a5
    20404aa6:	0006879b          	sext.w	a5,a3
    20404aaa:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
    20404aac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
    20404aae:	853e                	mv	a0,a5
    20404ab0:	70a2                	ld	ra,40(sp)
    20404ab2:	7402                	ld	s0,32(sp)
    20404ab4:	6145                	addi	sp,sp,48
    20404ab6:	8082                	ret

0000000020404ab8 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
    20404ab8:	7179                	addi	sp,sp,-48
    20404aba:	f406                	sd	ra,40(sp)
    20404abc:	f022                	sd	s0,32(sp)
    20404abe:	1800                	addi	s0,sp,48
    20404ac0:	fca43c23          	sd	a0,-40(s0)
    20404ac4:	fcb43823          	sd	a1,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
    20404ac8:	fd843503          	ld	a0,-40(s0)
    20404acc:	c45ff0ef          	jal	ra,20404710 <__metal_driver_sifive_gpio0_base>
    20404ad0:	87aa                	mv	a5,a0
    20404ad2:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
    20404ad6:	fe843783          	ld	a5,-24(s0)
    20404ada:	07a1                	addi	a5,a5,8
    20404adc:	439c                	lw	a5,0(a5)
    20404ade:	2781                	sext.w	a5,a5
    20404ae0:	0007871b          	sext.w	a4,a5
    20404ae4:	fd043783          	ld	a5,-48(s0)
    20404ae8:	2781                	sext.w	a5,a5
    20404aea:	8fd9                	or	a5,a5,a4
    20404aec:	0007869b          	sext.w	a3,a5
    20404af0:	fe843783          	ld	a5,-24(s0)
    20404af4:	07a1                	addi	a5,a5,8
    20404af6:	873e                	mv	a4,a5
    20404af8:	0006879b          	sext.w	a5,a3
    20404afc:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
    20404afe:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
    20404b00:	853e                	mv	a0,a5
    20404b02:	70a2                	ld	ra,40(sp)
    20404b04:	7402                	ld	s0,32(sp)
    20404b06:	6145                	addi	sp,sp,48
    20404b08:	8082                	ret

0000000020404b0a <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
    20404b0a:	7179                	addi	sp,sp,-48
    20404b0c:	f406                	sd	ra,40(sp)
    20404b0e:	f022                	sd	s0,32(sp)
    20404b10:	1800                	addi	s0,sp,48
    20404b12:	fca43c23          	sd	a0,-40(s0)
    20404b16:	fcb43823          	sd	a1,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
    20404b1a:	fd843503          	ld	a0,-40(s0)
    20404b1e:	bf3ff0ef          	jal	ra,20404710 <__metal_driver_sifive_gpio0_base>
    20404b22:	87aa                	mv	a5,a0
    20404b24:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
    20404b28:	fe843783          	ld	a5,-24(s0)
    20404b2c:	07b1                	addi	a5,a5,12
    20404b2e:	439c                	lw	a5,0(a5)
    20404b30:	2781                	sext.w	a5,a5
    20404b32:	0007871b          	sext.w	a4,a5
    20404b36:	fd043783          	ld	a5,-48(s0)
    20404b3a:	2781                	sext.w	a5,a5
    20404b3c:	8fd9                	or	a5,a5,a4
    20404b3e:	0007869b          	sext.w	a3,a5
    20404b42:	fe843783          	ld	a5,-24(s0)
    20404b46:	07b1                	addi	a5,a5,12
    20404b48:	873e                	mv	a4,a5
    20404b4a:	0006879b          	sext.w	a5,a3
    20404b4e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
    20404b50:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
    20404b52:	853e                	mv	a0,a5
    20404b54:	70a2                	ld	ra,40(sp)
    20404b56:	7402                	ld	s0,32(sp)
    20404b58:	6145                	addi	sp,sp,48
    20404b5a:	8082                	ret

0000000020404b5c <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
    20404b5c:	7179                	addi	sp,sp,-48
    20404b5e:	f406                	sd	ra,40(sp)
    20404b60:	f022                	sd	s0,32(sp)
    20404b62:	1800                	addi	s0,sp,48
    20404b64:	fca43c23          	sd	a0,-40(s0)
    20404b68:	fcb43823          	sd	a1,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
    20404b6c:	fd843503          	ld	a0,-40(s0)
    20404b70:	ba1ff0ef          	jal	ra,20404710 <__metal_driver_sifive_gpio0_base>
    20404b74:	87aa                	mv	a5,a0
    20404b76:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
    20404b7a:	fe843783          	ld	a5,-24(s0)
    20404b7e:	07b1                	addi	a5,a5,12
    20404b80:	439c                	lw	a5,0(a5)
    20404b82:	2781                	sext.w	a5,a5
    20404b84:	0007871b          	sext.w	a4,a5
    20404b88:	fd043783          	ld	a5,-48(s0)
    20404b8c:	2781                	sext.w	a5,a5
    20404b8e:	fff7c793          	not	a5,a5
    20404b92:	2781                	sext.w	a5,a5
    20404b94:	8ff9                	and	a5,a5,a4
    20404b96:	0007869b          	sext.w	a3,a5
    20404b9a:	fe843783          	ld	a5,-24(s0)
    20404b9e:	07b1                	addi	a5,a5,12
    20404ba0:	873e                	mv	a4,a5
    20404ba2:	0006879b          	sext.w	a5,a3
    20404ba6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
    20404ba8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
    20404baa:	853e                	mv	a0,a5
    20404bac:	70a2                	ld	ra,40(sp)
    20404bae:	7402                	ld	s0,32(sp)
    20404bb0:	6145                	addi	sp,sp,48
    20404bb2:	8082                	ret

0000000020404bb4 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
    20404bb4:	7179                	addi	sp,sp,-48
    20404bb6:	f406                	sd	ra,40(sp)
    20404bb8:	f022                	sd	s0,32(sp)
    20404bba:	1800                	addi	s0,sp,48
    20404bbc:	fca43c23          	sd	a0,-40(s0)
    20404bc0:	fcb43823          	sd	a1,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
    20404bc4:	fd843503          	ld	a0,-40(s0)
    20404bc8:	b49ff0ef          	jal	ra,20404710 <__metal_driver_sifive_gpio0_base>
    20404bcc:	87aa                	mv	a5,a0
    20404bce:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
    20404bd2:	fe843783          	ld	a5,-24(s0)
    20404bd6:	07b1                	addi	a5,a5,12
    20404bd8:	439c                	lw	a5,0(a5)
    20404bda:	2781                	sext.w	a5,a5
    20404bdc:	0007871b          	sext.w	a4,a5
    20404be0:	fd043783          	ld	a5,-48(s0)
    20404be4:	2781                	sext.w	a5,a5
    20404be6:	8fb9                	xor	a5,a5,a4
    20404be8:	0007869b          	sext.w	a3,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
    20404bec:	fe843783          	ld	a5,-24(s0)
    20404bf0:	07b1                	addi	a5,a5,12
    20404bf2:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
    20404bf4:	0006879b          	sext.w	a5,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
    20404bf8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
    20404bfa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
    20404bfc:	853e                	mv	a0,a5
    20404bfe:	70a2                	ld	ra,40(sp)
    20404c00:	7402                	ld	s0,32(sp)
    20404c02:	6145                	addi	sp,sp,48
    20404c04:	8082                	ret

0000000020404c06 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
    20404c06:	7139                	addi	sp,sp,-64
    20404c08:	fc06                	sd	ra,56(sp)
    20404c0a:	f822                	sd	s0,48(sp)
    20404c0c:	0080                	addi	s0,sp,64
    20404c0e:	fca43c23          	sd	a0,-40(s0)
    20404c12:	fcb43823          	sd	a1,-48(s0)
    20404c16:	fcc43423          	sd	a2,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
    20404c1a:	fd843503          	ld	a0,-40(s0)
    20404c1e:	af3ff0ef          	jal	ra,20404710 <__metal_driver_sifive_gpio0_base>
    20404c22:	87aa                	mv	a5,a0
    20404c24:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
    20404c28:	fe843783          	ld	a5,-24(s0)
    20404c2c:	03c78793          	addi	a5,a5,60
    20404c30:	439c                	lw	a5,0(a5)
    20404c32:	2781                	sext.w	a5,a5
    20404c34:	0007871b          	sext.w	a4,a5
    20404c38:	fd043783          	ld	a5,-48(s0)
    20404c3c:	2781                	sext.w	a5,a5
    20404c3e:	fff7c793          	not	a5,a5
    20404c42:	2781                	sext.w	a5,a5
    20404c44:	8ff9                	and	a5,a5,a4
    20404c46:	0007869b          	sext.w	a3,a5
    20404c4a:	fe843783          	ld	a5,-24(s0)
    20404c4e:	03c78793          	addi	a5,a5,60
    20404c52:	873e                	mv	a4,a5
    20404c54:	0006879b          	sext.w	a5,a3
    20404c58:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
    20404c5a:	fe843783          	ld	a5,-24(s0)
    20404c5e:	03878793          	addi	a5,a5,56
    20404c62:	439c                	lw	a5,0(a5)
    20404c64:	2781                	sext.w	a5,a5
    20404c66:	0007871b          	sext.w	a4,a5
    20404c6a:	fc843783          	ld	a5,-56(s0)
    20404c6e:	2781                	sext.w	a5,a5
    20404c70:	8fd9                	or	a5,a5,a4
    20404c72:	0007869b          	sext.w	a3,a5
    20404c76:	fe843783          	ld	a5,-24(s0)
    20404c7a:	03878793          	addi	a5,a5,56
    20404c7e:	873e                	mv	a4,a5
    20404c80:	0006879b          	sext.w	a5,a3
    20404c84:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
    20404c86:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
    20404c88:	853e                	mv	a0,a5
    20404c8a:	70e2                	ld	ra,56(sp)
    20404c8c:	7442                	ld	s0,48(sp)
    20404c8e:	6121                	addi	sp,sp,64
    20404c90:	8082                	ret

0000000020404c92 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
    20404c92:	7179                	addi	sp,sp,-48
    20404c94:	f406                	sd	ra,40(sp)
    20404c96:	f022                	sd	s0,32(sp)
    20404c98:	1800                	addi	s0,sp,48
    20404c9a:	fca43c23          	sd	a0,-40(s0)
    20404c9e:	fcb43823          	sd	a1,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
    20404ca2:	fd843503          	ld	a0,-40(s0)
    20404ca6:	a6bff0ef          	jal	ra,20404710 <__metal_driver_sifive_gpio0_base>
    20404caa:	87aa                	mv	a5,a0
    20404cac:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
    20404cb0:	fe843783          	ld	a5,-24(s0)
    20404cb4:	03878793          	addi	a5,a5,56
    20404cb8:	439c                	lw	a5,0(a5)
    20404cba:	2781                	sext.w	a5,a5
    20404cbc:	0007871b          	sext.w	a4,a5
    20404cc0:	fd043783          	ld	a5,-48(s0)
    20404cc4:	2781                	sext.w	a5,a5
    20404cc6:	fff7c793          	not	a5,a5
    20404cca:	2781                	sext.w	a5,a5
    20404ccc:	8ff9                	and	a5,a5,a4
    20404cce:	0007869b          	sext.w	a3,a5
    20404cd2:	fe843783          	ld	a5,-24(s0)
    20404cd6:	03878793          	addi	a5,a5,56
    20404cda:	873e                	mv	a4,a5
    20404cdc:	0006879b          	sext.w	a5,a3
    20404ce0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
    20404ce2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
    20404ce4:	853e                	mv	a0,a5
    20404ce6:	70a2                	ld	ra,40(sp)
    20404ce8:	7402                	ld	s0,32(sp)
    20404cea:	6145                	addi	sp,sp,48
    20404cec:	8082                	ret

0000000020404cee <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
    20404cee:	7139                	addi	sp,sp,-64
    20404cf0:	fc06                	sd	ra,56(sp)
    20404cf2:	f822                	sd	s0,48(sp)
    20404cf4:	0080                	addi	s0,sp,64
    20404cf6:	fca43c23          	sd	a0,-40(s0)
    20404cfa:	fcb43823          	sd	a1,-48(s0)
    20404cfe:	87b2                	mv	a5,a2
    20404d00:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
    20404d04:	fd843503          	ld	a0,-40(s0)
    20404d08:	a09ff0ef          	jal	ra,20404710 <__metal_driver_sifive_gpio0_base>
    20404d0c:	87aa                	mv	a5,a0
    20404d0e:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
    20404d12:	fcc42783          	lw	a5,-52(s0)
    20404d16:	0007871b          	sext.w	a4,a5
    20404d1a:	479d                	li	a5,7
    20404d1c:	30e7e063          	bltu	a5,a4,2040501c <__metal_driver_sifive_gpio0_config_int+0x32e>
    20404d20:	fcc46783          	lwu	a5,-52(s0)
    20404d24:	00279713          	slli	a4,a5,0x2
    20404d28:	00001797          	auipc	a5,0x1
    20404d2c:	37878793          	addi	a5,a5,888 # 204060a0 <__metal_driver_vtable_riscv_plic0+0x98>
    20404d30:	97ba                	add	a5,a5,a4
    20404d32:	439c                	lw	a5,0(a5)
    20404d34:	0007871b          	sext.w	a4,a5
    20404d38:	00001797          	auipc	a5,0x1
    20404d3c:	36878793          	addi	a5,a5,872 # 204060a0 <__metal_driver_vtable_riscv_plic0+0x98>
    20404d40:	97ba                	add	a5,a5,a4
    20404d42:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
    20404d44:	fe843783          	ld	a5,-24(s0)
    20404d48:	07e1                	addi	a5,a5,24
    20404d4a:	439c                	lw	a5,0(a5)
    20404d4c:	2781                	sext.w	a5,a5
    20404d4e:	0007871b          	sext.w	a4,a5
    20404d52:	fd043783          	ld	a5,-48(s0)
    20404d56:	2781                	sext.w	a5,a5
    20404d58:	fff7c793          	not	a5,a5
    20404d5c:	2781                	sext.w	a5,a5
    20404d5e:	8ff9                	and	a5,a5,a4
    20404d60:	0007869b          	sext.w	a3,a5
    20404d64:	fe843783          	ld	a5,-24(s0)
    20404d68:	07e1                	addi	a5,a5,24
    20404d6a:	873e                	mv	a4,a5
    20404d6c:	0006879b          	sext.w	a5,a3
    20404d70:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
    20404d72:	fe843783          	ld	a5,-24(s0)
    20404d76:	02078793          	addi	a5,a5,32
    20404d7a:	439c                	lw	a5,0(a5)
    20404d7c:	2781                	sext.w	a5,a5
    20404d7e:	0007871b          	sext.w	a4,a5
    20404d82:	fd043783          	ld	a5,-48(s0)
    20404d86:	2781                	sext.w	a5,a5
    20404d88:	fff7c793          	not	a5,a5
    20404d8c:	2781                	sext.w	a5,a5
    20404d8e:	8ff9                	and	a5,a5,a4
    20404d90:	0007869b          	sext.w	a3,a5
    20404d94:	fe843783          	ld	a5,-24(s0)
    20404d98:	02078793          	addi	a5,a5,32
    20404d9c:	873e                	mv	a4,a5
    20404d9e:	0006879b          	sext.w	a5,a3
    20404da2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
    20404da4:	fe843783          	ld	a5,-24(s0)
    20404da8:	02878793          	addi	a5,a5,40
    20404dac:	439c                	lw	a5,0(a5)
    20404dae:	2781                	sext.w	a5,a5
    20404db0:	0007871b          	sext.w	a4,a5
    20404db4:	fd043783          	ld	a5,-48(s0)
    20404db8:	2781                	sext.w	a5,a5
    20404dba:	fff7c793          	not	a5,a5
    20404dbe:	2781                	sext.w	a5,a5
    20404dc0:	8ff9                	and	a5,a5,a4
    20404dc2:	0007869b          	sext.w	a3,a5
    20404dc6:	fe843783          	ld	a5,-24(s0)
    20404dca:	02878793          	addi	a5,a5,40
    20404dce:	873e                	mv	a4,a5
    20404dd0:	0006879b          	sext.w	a5,a3
    20404dd4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
    20404dd6:	fe843783          	ld	a5,-24(s0)
    20404dda:	03078793          	addi	a5,a5,48
    20404dde:	439c                	lw	a5,0(a5)
    20404de0:	2781                	sext.w	a5,a5
    20404de2:	0007871b          	sext.w	a4,a5
    20404de6:	fd043783          	ld	a5,-48(s0)
    20404dea:	2781                	sext.w	a5,a5
    20404dec:	fff7c793          	not	a5,a5
    20404df0:	2781                	sext.w	a5,a5
    20404df2:	8ff9                	and	a5,a5,a4
    20404df4:	0007869b          	sext.w	a3,a5
    20404df8:	fe843783          	ld	a5,-24(s0)
    20404dfc:	03078793          	addi	a5,a5,48
    20404e00:	873e                	mv	a4,a5
    20404e02:	0006879b          	sext.w	a5,a3
    20404e06:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
    20404e08:	ac11                	j	2040501c <__metal_driver_sifive_gpio0_config_int+0x32e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
    20404e0a:	fe843783          	ld	a5,-24(s0)
    20404e0e:	07e1                	addi	a5,a5,24
    20404e10:	439c                	lw	a5,0(a5)
    20404e12:	2781                	sext.w	a5,a5
    20404e14:	0007871b          	sext.w	a4,a5
    20404e18:	fd043783          	ld	a5,-48(s0)
    20404e1c:	2781                	sext.w	a5,a5
    20404e1e:	8fd9                	or	a5,a5,a4
    20404e20:	0007869b          	sext.w	a3,a5
    20404e24:	fe843783          	ld	a5,-24(s0)
    20404e28:	07e1                	addi	a5,a5,24
    20404e2a:	873e                	mv	a4,a5
    20404e2c:	0006879b          	sext.w	a5,a3
    20404e30:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
    20404e32:	a2ed                	j	2040501c <__metal_driver_sifive_gpio0_config_int+0x32e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
    20404e34:	fe843783          	ld	a5,-24(s0)
    20404e38:	02078793          	addi	a5,a5,32
    20404e3c:	439c                	lw	a5,0(a5)
    20404e3e:	2781                	sext.w	a5,a5
    20404e40:	0007871b          	sext.w	a4,a5
    20404e44:	fd043783          	ld	a5,-48(s0)
    20404e48:	2781                	sext.w	a5,a5
    20404e4a:	8fd9                	or	a5,a5,a4
    20404e4c:	0007869b          	sext.w	a3,a5
    20404e50:	fe843783          	ld	a5,-24(s0)
    20404e54:	02078793          	addi	a5,a5,32
    20404e58:	873e                	mv	a4,a5
    20404e5a:	0006879b          	sext.w	a5,a3
    20404e5e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
    20404e60:	aa75                	j	2040501c <__metal_driver_sifive_gpio0_config_int+0x32e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
    20404e62:	fe843783          	ld	a5,-24(s0)
    20404e66:	07e1                	addi	a5,a5,24
    20404e68:	439c                	lw	a5,0(a5)
    20404e6a:	2781                	sext.w	a5,a5
    20404e6c:	0007871b          	sext.w	a4,a5
    20404e70:	fd043783          	ld	a5,-48(s0)
    20404e74:	2781                	sext.w	a5,a5
    20404e76:	8fd9                	or	a5,a5,a4
    20404e78:	0007869b          	sext.w	a3,a5
    20404e7c:	fe843783          	ld	a5,-24(s0)
    20404e80:	07e1                	addi	a5,a5,24
    20404e82:	873e                	mv	a4,a5
    20404e84:	0006879b          	sext.w	a5,a3
    20404e88:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
    20404e8a:	fe843783          	ld	a5,-24(s0)
    20404e8e:	02078793          	addi	a5,a5,32
    20404e92:	439c                	lw	a5,0(a5)
    20404e94:	2781                	sext.w	a5,a5
    20404e96:	0007871b          	sext.w	a4,a5
    20404e9a:	fd043783          	ld	a5,-48(s0)
    20404e9e:	2781                	sext.w	a5,a5
    20404ea0:	8fd9                	or	a5,a5,a4
    20404ea2:	0007869b          	sext.w	a3,a5
    20404ea6:	fe843783          	ld	a5,-24(s0)
    20404eaa:	02078793          	addi	a5,a5,32
    20404eae:	873e                	mv	a4,a5
    20404eb0:	0006879b          	sext.w	a5,a3
    20404eb4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
    20404eb6:	a29d                	j	2040501c <__metal_driver_sifive_gpio0_config_int+0x32e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
    20404eb8:	fe843783          	ld	a5,-24(s0)
    20404ebc:	02878793          	addi	a5,a5,40
    20404ec0:	439c                	lw	a5,0(a5)
    20404ec2:	2781                	sext.w	a5,a5
    20404ec4:	0007871b          	sext.w	a4,a5
    20404ec8:	fd043783          	ld	a5,-48(s0)
    20404ecc:	2781                	sext.w	a5,a5
    20404ece:	8fd9                	or	a5,a5,a4
    20404ed0:	0007869b          	sext.w	a3,a5
    20404ed4:	fe843783          	ld	a5,-24(s0)
    20404ed8:	02878793          	addi	a5,a5,40
    20404edc:	873e                	mv	a4,a5
    20404ede:	0006879b          	sext.w	a5,a3
    20404ee2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
    20404ee4:	aa25                	j	2040501c <__metal_driver_sifive_gpio0_config_int+0x32e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
    20404ee6:	fe843783          	ld	a5,-24(s0)
    20404eea:	03078793          	addi	a5,a5,48
    20404eee:	439c                	lw	a5,0(a5)
    20404ef0:	2781                	sext.w	a5,a5
    20404ef2:	0007871b          	sext.w	a4,a5
    20404ef6:	fd043783          	ld	a5,-48(s0)
    20404efa:	2781                	sext.w	a5,a5
    20404efc:	8fd9                	or	a5,a5,a4
    20404efe:	0007869b          	sext.w	a3,a5
    20404f02:	fe843783          	ld	a5,-24(s0)
    20404f06:	03078793          	addi	a5,a5,48
    20404f0a:	873e                	mv	a4,a5
    20404f0c:	0006879b          	sext.w	a5,a3
    20404f10:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
    20404f12:	a229                	j	2040501c <__metal_driver_sifive_gpio0_config_int+0x32e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
    20404f14:	fe843783          	ld	a5,-24(s0)
    20404f18:	02878793          	addi	a5,a5,40
    20404f1c:	439c                	lw	a5,0(a5)
    20404f1e:	2781                	sext.w	a5,a5
    20404f20:	0007871b          	sext.w	a4,a5
    20404f24:	fd043783          	ld	a5,-48(s0)
    20404f28:	2781                	sext.w	a5,a5
    20404f2a:	8fd9                	or	a5,a5,a4
    20404f2c:	0007869b          	sext.w	a3,a5
    20404f30:	fe843783          	ld	a5,-24(s0)
    20404f34:	02878793          	addi	a5,a5,40
    20404f38:	873e                	mv	a4,a5
    20404f3a:	0006879b          	sext.w	a5,a3
    20404f3e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
    20404f40:	fe843783          	ld	a5,-24(s0)
    20404f44:	03078793          	addi	a5,a5,48
    20404f48:	439c                	lw	a5,0(a5)
    20404f4a:	2781                	sext.w	a5,a5
    20404f4c:	0007871b          	sext.w	a4,a5
    20404f50:	fd043783          	ld	a5,-48(s0)
    20404f54:	2781                	sext.w	a5,a5
    20404f56:	8fd9                	or	a5,a5,a4
    20404f58:	0007869b          	sext.w	a3,a5
    20404f5c:	fe843783          	ld	a5,-24(s0)
    20404f60:	03078793          	addi	a5,a5,48
    20404f64:	873e                	mv	a4,a5
    20404f66:	0006879b          	sext.w	a5,a3
    20404f6a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
    20404f6c:	a845                	j	2040501c <__metal_driver_sifive_gpio0_config_int+0x32e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
    20404f6e:	fe843783          	ld	a5,-24(s0)
    20404f72:	07e1                	addi	a5,a5,24
    20404f74:	439c                	lw	a5,0(a5)
    20404f76:	2781                	sext.w	a5,a5
    20404f78:	0007871b          	sext.w	a4,a5
    20404f7c:	fd043783          	ld	a5,-48(s0)
    20404f80:	2781                	sext.w	a5,a5
    20404f82:	8fd9                	or	a5,a5,a4
    20404f84:	0007869b          	sext.w	a3,a5
    20404f88:	fe843783          	ld	a5,-24(s0)
    20404f8c:	07e1                	addi	a5,a5,24
    20404f8e:	873e                	mv	a4,a5
    20404f90:	0006879b          	sext.w	a5,a3
    20404f94:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
    20404f96:	fe843783          	ld	a5,-24(s0)
    20404f9a:	02078793          	addi	a5,a5,32
    20404f9e:	439c                	lw	a5,0(a5)
    20404fa0:	2781                	sext.w	a5,a5
    20404fa2:	0007871b          	sext.w	a4,a5
    20404fa6:	fd043783          	ld	a5,-48(s0)
    20404faa:	2781                	sext.w	a5,a5
    20404fac:	8fd9                	or	a5,a5,a4
    20404fae:	0007869b          	sext.w	a3,a5
    20404fb2:	fe843783          	ld	a5,-24(s0)
    20404fb6:	02078793          	addi	a5,a5,32
    20404fba:	873e                	mv	a4,a5
    20404fbc:	0006879b          	sext.w	a5,a3
    20404fc0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
    20404fc2:	fe843783          	ld	a5,-24(s0)
    20404fc6:	02878793          	addi	a5,a5,40
    20404fca:	439c                	lw	a5,0(a5)
    20404fcc:	2781                	sext.w	a5,a5
    20404fce:	0007871b          	sext.w	a4,a5
    20404fd2:	fd043783          	ld	a5,-48(s0)
    20404fd6:	2781                	sext.w	a5,a5
    20404fd8:	8fd9                	or	a5,a5,a4
    20404fda:	0007869b          	sext.w	a3,a5
    20404fde:	fe843783          	ld	a5,-24(s0)
    20404fe2:	02878793          	addi	a5,a5,40
    20404fe6:	873e                	mv	a4,a5
    20404fe8:	0006879b          	sext.w	a5,a3
    20404fec:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
    20404fee:	fe843783          	ld	a5,-24(s0)
    20404ff2:	03078793          	addi	a5,a5,48
    20404ff6:	439c                	lw	a5,0(a5)
    20404ff8:	2781                	sext.w	a5,a5
    20404ffa:	0007871b          	sext.w	a4,a5
    20404ffe:	fd043783          	ld	a5,-48(s0)
    20405002:	2781                	sext.w	a5,a5
    20405004:	8fd9                	or	a5,a5,a4
    20405006:	0007869b          	sext.w	a3,a5
    2040500a:	fe843783          	ld	a5,-24(s0)
    2040500e:	03078793          	addi	a5,a5,48
    20405012:	873e                	mv	a4,a5
    20405014:	0006879b          	sext.w	a5,a3
    20405018:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
    2040501a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
    2040501c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
    2040501e:	853e                	mv	a0,a5
    20405020:	70e2                	ld	ra,56(sp)
    20405022:	7442                	ld	s0,48(sp)
    20405024:	6121                	addi	sp,sp,64
    20405026:	8082                	ret

0000000020405028 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
    20405028:	7139                	addi	sp,sp,-64
    2040502a:	fc06                	sd	ra,56(sp)
    2040502c:	f822                	sd	s0,48(sp)
    2040502e:	0080                	addi	s0,sp,64
    20405030:	fca43c23          	sd	a0,-40(s0)
    20405034:	fcb43823          	sd	a1,-48(s0)
    20405038:	87b2                	mv	a5,a2
    2040503a:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
    2040503e:	fd843503          	ld	a0,-40(s0)
    20405042:	eceff0ef          	jal	ra,20404710 <__metal_driver_sifive_gpio0_base>
    20405046:	87aa                	mv	a5,a0
    20405048:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
    2040504c:	fcc42783          	lw	a5,-52(s0)
    20405050:	0007871b          	sext.w	a4,a5
    20405054:	479d                	li	a5,7
    20405056:	22e7ed63          	bltu	a5,a4,20405290 <__metal_driver_sifive_gpio0_clear_int+0x268>
    2040505a:	fcc46783          	lwu	a5,-52(s0)
    2040505e:	00279713          	slli	a4,a5,0x2
    20405062:	00001797          	auipc	a5,0x1
    20405066:	05e78793          	addi	a5,a5,94 # 204060c0 <__metal_driver_vtable_riscv_plic0+0xb8>
    2040506a:	97ba                	add	a5,a5,a4
    2040506c:	439c                	lw	a5,0(a5)
    2040506e:	0007871b          	sext.w	a4,a5
    20405072:	00001797          	auipc	a5,0x1
    20405076:	04e78793          	addi	a5,a5,78 # 204060c0 <__metal_driver_vtable_riscv_plic0+0xb8>
    2040507a:	97ba                	add	a5,a5,a4
    2040507c:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
    2040507e:	fe843783          	ld	a5,-24(s0)
    20405082:	07f1                	addi	a5,a5,28
    20405084:	439c                	lw	a5,0(a5)
    20405086:	2781                	sext.w	a5,a5
    20405088:	0007871b          	sext.w	a4,a5
    2040508c:	fd043783          	ld	a5,-48(s0)
    20405090:	2781                	sext.w	a5,a5
    20405092:	8fd9                	or	a5,a5,a4
    20405094:	0007869b          	sext.w	a3,a5
    20405098:	fe843783          	ld	a5,-24(s0)
    2040509c:	07f1                	addi	a5,a5,28
    2040509e:	873e                	mv	a4,a5
    204050a0:	0006879b          	sext.w	a5,a3
    204050a4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
    204050a6:	a2ed                	j	20405290 <__metal_driver_sifive_gpio0_clear_int+0x268>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
    204050a8:	fe843783          	ld	a5,-24(s0)
    204050ac:	02478793          	addi	a5,a5,36
    204050b0:	439c                	lw	a5,0(a5)
    204050b2:	2781                	sext.w	a5,a5
    204050b4:	0007871b          	sext.w	a4,a5
    204050b8:	fd043783          	ld	a5,-48(s0)
    204050bc:	2781                	sext.w	a5,a5
    204050be:	8fd9                	or	a5,a5,a4
    204050c0:	0007869b          	sext.w	a3,a5
    204050c4:	fe843783          	ld	a5,-24(s0)
    204050c8:	02478793          	addi	a5,a5,36
    204050cc:	873e                	mv	a4,a5
    204050ce:	0006879b          	sext.w	a5,a3
    204050d2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
    204050d4:	aa75                	j	20405290 <__metal_driver_sifive_gpio0_clear_int+0x268>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
    204050d6:	fe843783          	ld	a5,-24(s0)
    204050da:	07f1                	addi	a5,a5,28
    204050dc:	439c                	lw	a5,0(a5)
    204050de:	2781                	sext.w	a5,a5
    204050e0:	0007871b          	sext.w	a4,a5
    204050e4:	fd043783          	ld	a5,-48(s0)
    204050e8:	2781                	sext.w	a5,a5
    204050ea:	8fd9                	or	a5,a5,a4
    204050ec:	0007869b          	sext.w	a3,a5
    204050f0:	fe843783          	ld	a5,-24(s0)
    204050f4:	07f1                	addi	a5,a5,28
    204050f6:	873e                	mv	a4,a5
    204050f8:	0006879b          	sext.w	a5,a3
    204050fc:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
    204050fe:	fe843783          	ld	a5,-24(s0)
    20405102:	02478793          	addi	a5,a5,36
    20405106:	439c                	lw	a5,0(a5)
    20405108:	2781                	sext.w	a5,a5
    2040510a:	0007871b          	sext.w	a4,a5
    2040510e:	fd043783          	ld	a5,-48(s0)
    20405112:	2781                	sext.w	a5,a5
    20405114:	8fd9                	or	a5,a5,a4
    20405116:	0007869b          	sext.w	a3,a5
    2040511a:	fe843783          	ld	a5,-24(s0)
    2040511e:	02478793          	addi	a5,a5,36
    20405122:	873e                	mv	a4,a5
    20405124:	0006879b          	sext.w	a5,a3
    20405128:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
    2040512a:	a29d                	j	20405290 <__metal_driver_sifive_gpio0_clear_int+0x268>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
    2040512c:	fe843783          	ld	a5,-24(s0)
    20405130:	02c78793          	addi	a5,a5,44
    20405134:	439c                	lw	a5,0(a5)
    20405136:	2781                	sext.w	a5,a5
    20405138:	0007871b          	sext.w	a4,a5
    2040513c:	fd043783          	ld	a5,-48(s0)
    20405140:	2781                	sext.w	a5,a5
    20405142:	8fd9                	or	a5,a5,a4
    20405144:	0007869b          	sext.w	a3,a5
    20405148:	fe843783          	ld	a5,-24(s0)
    2040514c:	02c78793          	addi	a5,a5,44
    20405150:	873e                	mv	a4,a5
    20405152:	0006879b          	sext.w	a5,a3
    20405156:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
    20405158:	aa25                	j	20405290 <__metal_driver_sifive_gpio0_clear_int+0x268>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
    2040515a:	fe843783          	ld	a5,-24(s0)
    2040515e:	03478793          	addi	a5,a5,52
    20405162:	439c                	lw	a5,0(a5)
    20405164:	2781                	sext.w	a5,a5
    20405166:	0007871b          	sext.w	a4,a5
    2040516a:	fd043783          	ld	a5,-48(s0)
    2040516e:	2781                	sext.w	a5,a5
    20405170:	8fd9                	or	a5,a5,a4
    20405172:	0007869b          	sext.w	a3,a5
    20405176:	fe843783          	ld	a5,-24(s0)
    2040517a:	03478793          	addi	a5,a5,52
    2040517e:	873e                	mv	a4,a5
    20405180:	0006879b          	sext.w	a5,a3
    20405184:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
    20405186:	a229                	j	20405290 <__metal_driver_sifive_gpio0_clear_int+0x268>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
    20405188:	fe843783          	ld	a5,-24(s0)
    2040518c:	02c78793          	addi	a5,a5,44
    20405190:	439c                	lw	a5,0(a5)
    20405192:	2781                	sext.w	a5,a5
    20405194:	0007871b          	sext.w	a4,a5
    20405198:	fd043783          	ld	a5,-48(s0)
    2040519c:	2781                	sext.w	a5,a5
    2040519e:	8fd9                	or	a5,a5,a4
    204051a0:	0007869b          	sext.w	a3,a5
    204051a4:	fe843783          	ld	a5,-24(s0)
    204051a8:	02c78793          	addi	a5,a5,44
    204051ac:	873e                	mv	a4,a5
    204051ae:	0006879b          	sext.w	a5,a3
    204051b2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
    204051b4:	fe843783          	ld	a5,-24(s0)
    204051b8:	03478793          	addi	a5,a5,52
    204051bc:	439c                	lw	a5,0(a5)
    204051be:	2781                	sext.w	a5,a5
    204051c0:	0007871b          	sext.w	a4,a5
    204051c4:	fd043783          	ld	a5,-48(s0)
    204051c8:	2781                	sext.w	a5,a5
    204051ca:	8fd9                	or	a5,a5,a4
    204051cc:	0007869b          	sext.w	a3,a5
    204051d0:	fe843783          	ld	a5,-24(s0)
    204051d4:	03478793          	addi	a5,a5,52
    204051d8:	873e                	mv	a4,a5
    204051da:	0006879b          	sext.w	a5,a3
    204051de:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
    204051e0:	a845                	j	20405290 <__metal_driver_sifive_gpio0_clear_int+0x268>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
    204051e2:	fe843783          	ld	a5,-24(s0)
    204051e6:	07f1                	addi	a5,a5,28
    204051e8:	439c                	lw	a5,0(a5)
    204051ea:	2781                	sext.w	a5,a5
    204051ec:	0007871b          	sext.w	a4,a5
    204051f0:	fd043783          	ld	a5,-48(s0)
    204051f4:	2781                	sext.w	a5,a5
    204051f6:	8fd9                	or	a5,a5,a4
    204051f8:	0007869b          	sext.w	a3,a5
    204051fc:	fe843783          	ld	a5,-24(s0)
    20405200:	07f1                	addi	a5,a5,28
    20405202:	873e                	mv	a4,a5
    20405204:	0006879b          	sext.w	a5,a3
    20405208:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
    2040520a:	fe843783          	ld	a5,-24(s0)
    2040520e:	02478793          	addi	a5,a5,36
    20405212:	439c                	lw	a5,0(a5)
    20405214:	2781                	sext.w	a5,a5
    20405216:	0007871b          	sext.w	a4,a5
    2040521a:	fd043783          	ld	a5,-48(s0)
    2040521e:	2781                	sext.w	a5,a5
    20405220:	8fd9                	or	a5,a5,a4
    20405222:	0007869b          	sext.w	a3,a5
    20405226:	fe843783          	ld	a5,-24(s0)
    2040522a:	02478793          	addi	a5,a5,36
    2040522e:	873e                	mv	a4,a5
    20405230:	0006879b          	sext.w	a5,a3
    20405234:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
    20405236:	fe843783          	ld	a5,-24(s0)
    2040523a:	02c78793          	addi	a5,a5,44
    2040523e:	439c                	lw	a5,0(a5)
    20405240:	2781                	sext.w	a5,a5
    20405242:	0007871b          	sext.w	a4,a5
    20405246:	fd043783          	ld	a5,-48(s0)
    2040524a:	2781                	sext.w	a5,a5
    2040524c:	8fd9                	or	a5,a5,a4
    2040524e:	0007869b          	sext.w	a3,a5
    20405252:	fe843783          	ld	a5,-24(s0)
    20405256:	02c78793          	addi	a5,a5,44
    2040525a:	873e                	mv	a4,a5
    2040525c:	0006879b          	sext.w	a5,a3
    20405260:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
    20405262:	fe843783          	ld	a5,-24(s0)
    20405266:	03478793          	addi	a5,a5,52
    2040526a:	439c                	lw	a5,0(a5)
    2040526c:	2781                	sext.w	a5,a5
    2040526e:	0007871b          	sext.w	a4,a5
    20405272:	fd043783          	ld	a5,-48(s0)
    20405276:	2781                	sext.w	a5,a5
    20405278:	8fd9                	or	a5,a5,a4
    2040527a:	0007869b          	sext.w	a3,a5
    2040527e:	fe843783          	ld	a5,-24(s0)
    20405282:	03478793          	addi	a5,a5,52
    20405286:	873e                	mv	a4,a5
    20405288:	0006879b          	sext.w	a5,a3
    2040528c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
    2040528e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
    20405290:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
    20405292:	853e                	mv	a0,a5
    20405294:	70e2                	ld	ra,56(sp)
    20405296:	7442                	ld	s0,48(sp)
    20405298:	6121                	addi	sp,sp,64
    2040529a:	8082                	ret

000000002040529c <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
    2040529c:	1101                	addi	sp,sp,-32
    2040529e:	ec06                	sd	ra,24(sp)
    204052a0:	e822                	sd	s0,16(sp)
    204052a2:	1000                	addi	s0,sp,32
    204052a4:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
    204052a8:	fe843503          	ld	a0,-24(s0)
    204052ac:	c8aff0ef          	jal	ra,20404736 <__metal_driver_sifive_gpio0_interrupt_parent>
    204052b0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
    204052b2:	853e                	mv	a0,a5
    204052b4:	60e2                	ld	ra,24(sp)
    204052b6:	6442                	ld	s0,16(sp)
    204052b8:	6105                	addi	sp,sp,32
    204052ba:	8082                	ret

00000000204052bc <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
    204052bc:	7179                	addi	sp,sp,-48
    204052be:	f406                	sd	ra,40(sp)
    204052c0:	f022                	sd	s0,32(sp)
    204052c2:	1800                	addi	s0,sp,48
    204052c4:	fca43c23          	sd	a0,-40(s0)
    204052c8:	87ae                	mv	a5,a1
    204052ca:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
    204052ce:	fd442783          	lw	a5,-44(s0)
    204052d2:	85be                	mv	a1,a5
    204052d4:	fd843503          	ld	a0,-40(s0)
    204052d8:	c88ff0ef          	jal	ra,20404760 <__metal_driver_sifive_gpio0_interrupt_lines>
    204052dc:	87aa                	mv	a5,a0
    204052de:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
    204052e2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
    204052e6:	853e                	mv	a0,a5
    204052e8:	70a2                	ld	ra,40(sp)
    204052ea:	7402                	ld	s0,32(sp)
    204052ec:	6145                	addi	sp,sp,48
    204052ee:	8082                	ret

00000000204052f0 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
    204052f0:	1101                	addi	sp,sp,-32
    204052f2:	ec22                	sd	s0,24(sp)
    204052f4:	1000                	addi	s0,sp,32
    204052f6:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
    204052fa:	fe843703          	ld	a4,-24(s0)
    204052fe:	5fbfb797          	auipc	a5,0x5fbfb
    20405302:	79278793          	addi	a5,a5,1938 # 80000a90 <__metal_dt_serial_10013000>
    20405306:	00f71563          	bne	a4,a5,20405310 <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
    2040530a:	100137b7          	lui	a5,0x10013
    2040530e:	a011                	j	20405312 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
    20405310:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:571
	}
}
    20405312:	853e                	mv	a0,a5
    20405314:	6462                	ld	s0,24(sp)
    20405316:	6105                	addi	sp,sp,32
    20405318:	8082                	ret

000000002040531a <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
    2040531a:	1101                	addi	sp,sp,-32
    2040531c:	ec22                	sd	s0,24(sp)
    2040531e:	1000                	addi	s0,sp,32
    20405320:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
    20405324:	fe843703          	ld	a4,-24(s0)
    20405328:	5fbfb797          	auipc	a5,0x5fbfb
    2040532c:	76878793          	addi	a5,a5,1896 # 80000a90 <__metal_dt_serial_10013000>
    20405330:	00f71763          	bne	a4,a5,2040533e <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
    20405334:	5fbfb797          	auipc	a5,0x5fbfb
    20405338:	31478793          	addi	a5,a5,788 # 80000648 <__metal_dt_interrupt_controller_c000000>
    2040533c:	a011                	j	20405340 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
    2040533e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:601
	}
}
    20405340:	853e                	mv	a0,a5
    20405342:	6462                	ld	s0,24(sp)
    20405344:	6105                	addi	sp,sp,32
    20405346:	8082                	ret

0000000020405348 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
    20405348:	1101                	addi	sp,sp,-32
    2040534a:	ec22                	sd	s0,24(sp)
    2040534c:	1000                	addi	s0,sp,32
    2040534e:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
    20405352:	fe843703          	ld	a4,-24(s0)
    20405356:	5fbfb797          	auipc	a5,0x5fbfb
    2040535a:	73a78793          	addi	a5,a5,1850 # 80000a90 <__metal_dt_serial_10013000>
    2040535e:	00f71463          	bne	a4,a5,20405366 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:606
		return 5;
    20405362:	4795                	li	a5,5
    20405364:	a011                	j	20405368 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
    20405366:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:611
	}
}
    20405368:	853e                	mv	a0,a5
    2040536a:	6462                	ld	s0,24(sp)
    2040536c:	6105                	addi	sp,sp,32
    2040536e:	8082                	ret

0000000020405370 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
    20405370:	1101                	addi	sp,sp,-32
    20405372:	ec22                	sd	s0,24(sp)
    20405374:	1000                	addi	s0,sp,32
    20405376:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
    2040537a:	fe843703          	ld	a4,-24(s0)
    2040537e:	5fbfb797          	auipc	a5,0x5fbfb
    20405382:	71278793          	addi	a5,a5,1810 # 80000a90 <__metal_dt_serial_10013000>
    20405386:	00f71763          	bne	a4,a5,20405394 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
    2040538a:	5fbfb797          	auipc	a5,0x5fbfb
    2040538e:	d2678793          	addi	a5,a5,-730 # 800000b0 <__metal_dt_clock_0>
    20405392:	a011                	j	20405396 <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
    20405394:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:621
	}
}
    20405396:	853e                	mv	a0,a5
    20405398:	6462                	ld	s0,24(sp)
    2040539a:	6105                	addi	sp,sp,32
    2040539c:	8082                	ret

000000002040539e <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
    2040539e:	1101                	addi	sp,sp,-32
    204053a0:	ec22                	sd	s0,24(sp)
    204053a2:	1000                	addi	s0,sp,32
    204053a4:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
    204053a8:	fe843703          	ld	a4,-24(s0)
    204053ac:	5fbfb797          	auipc	a5,0x5fbfb
    204053b0:	6e478793          	addi	a5,a5,1764 # 80000a90 <__metal_dt_serial_10013000>
    204053b4:	00f71563          	bne	a4,a5,204053be <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
    204053b8:	82818793          	addi	a5,gp,-2008 # 80000af8 <__metal_dt_gpio_10012000>
    204053bc:	a011                	j	204053c0 <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
    204053be:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:631
	}
}
    204053c0:	853e                	mv	a0,a5
    204053c2:	6462                	ld	s0,24(sp)
    204053c4:	6105                	addi	sp,sp,32
    204053c6:	8082                	ret

00000000204053c8 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
    204053c8:	1101                	addi	sp,sp,-32
    204053ca:	ec22                	sd	s0,24(sp)
    204053cc:	1000                	addi	s0,sp,32
    204053ce:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
    204053d2:	fe843703          	ld	a4,-24(s0)
    204053d6:	5fbfb797          	auipc	a5,0x5fbfb
    204053da:	6ba78793          	addi	a5,a5,1722 # 80000a90 <__metal_dt_serial_10013000>
    204053de:	00f71563          	bne	a4,a5,204053e8 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:636
		return 196608;
    204053e2:	000307b7          	lui	a5,0x30
    204053e6:	a011                	j	204053ea <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
    204053e8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:641
	}
}
    204053ea:	853e                	mv	a0,a5
    204053ec:	6462                	ld	s0,24(sp)
    204053ee:	6105                	addi	sp,sp,32
    204053f0:	8082                	ret

00000000204053f2 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
    204053f2:	1101                	addi	sp,sp,-32
    204053f4:	ec22                	sd	s0,24(sp)
    204053f6:	1000                	addi	s0,sp,32
    204053f8:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
    204053fc:	fe843703          	ld	a4,-24(s0)
    20405400:	5fbfb797          	auipc	a5,0x5fbfb
    20405404:	69078793          	addi	a5,a5,1680 # 80000a90 <__metal_dt_serial_10013000>
    20405408:	00f71563          	bne	a4,a5,20405412 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:646
		return 196608;
    2040540c:	000307b7          	lui	a5,0x30
    20405410:	a011                	j	20405414 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
    20405412:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:651
	}
}
    20405414:	853e                	mv	a0,a5
    20405416:	6462                	ld	s0,24(sp)
    20405418:	6105                	addi	sp,sp,32
    2040541a:	8082                	ret

000000002040541c <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
    2040541c:	1101                	addi	sp,sp,-32
    2040541e:	ec06                	sd	ra,24(sp)
    20405420:	e822                	sd	s0,16(sp)
    20405422:	1000                	addi	s0,sp,32
    20405424:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
    20405428:	fe843503          	ld	a0,-24(s0)
    2040542c:	eefff0ef          	jal	ra,2040531a <__metal_driver_sifive_uart0_interrupt_parent>
    20405430:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
    20405432:	853e                	mv	a0,a5
    20405434:	60e2                	ld	ra,24(sp)
    20405436:	6442                	ld	s0,16(sp)
    20405438:	6105                	addi	sp,sp,32
    2040543a:	8082                	ret

000000002040543c <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
    2040543c:	1101                	addi	sp,sp,-32
    2040543e:	ec06                	sd	ra,24(sp)
    20405440:	e822                	sd	s0,16(sp)
    20405442:	1000                	addi	s0,sp,32
    20405444:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
    20405448:	fe843503          	ld	a0,-24(s0)
    2040544c:	efdff0ef          	jal	ra,20405348 <__metal_driver_sifive_uart0_interrupt_line>
    20405450:	87aa                	mv	a5,a0
    20405452:	0207879b          	addiw	a5,a5,32
    20405456:	2781                	sext.w	a5,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
    20405458:	853e                	mv	a0,a5
    2040545a:	60e2                	ld	ra,24(sp)
    2040545c:	6442                	ld	s0,16(sp)
    2040545e:	6105                	addi	sp,sp,32
    20405460:	8082                	ret

0000000020405462 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
    20405462:	7179                	addi	sp,sp,-48
    20405464:	f406                	sd	ra,40(sp)
    20405466:	f022                	sd	s0,32(sp)
    20405468:	1800                	addi	s0,sp,48
    2040546a:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
    2040546e:	fd843503          	ld	a0,-40(s0)
    20405472:	e7fff0ef          	jal	ra,204052f0 <__metal_driver_sifive_uart0_control_base>
    20405476:	87aa                	mv	a5,a0
    20405478:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
    2040547c:	fe843783          	ld	a5,-24(s0)
    20405480:	439c                	lw	a5,0(a5)
    20405482:	2781                	sext.w	a5,a5
    20405484:	2781                	sext.w	a5,a5
    20405486:	fff7c793          	not	a5,a5
    2040548a:	01f7d79b          	srliw	a5,a5,0x1f
    2040548e:	0ff7f793          	andi	a5,a5,255
    20405492:	2781                	sext.w	a5,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
    20405494:	853e                	mv	a0,a5
    20405496:	70a2                	ld	ra,40(sp)
    20405498:	7402                	ld	s0,32(sp)
    2040549a:	6145                	addi	sp,sp,48
    2040549c:	8082                	ret

000000002040549e <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
    2040549e:	7179                	addi	sp,sp,-48
    204054a0:	f406                	sd	ra,40(sp)
    204054a2:	f022                	sd	s0,32(sp)
    204054a4:	1800                	addi	s0,sp,48
    204054a6:	fca43c23          	sd	a0,-40(s0)
    204054aa:	87ae                	mv	a5,a1
    204054ac:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    204054b0:	fd843503          	ld	a0,-40(s0)
    204054b4:	e3dff0ef          	jal	ra,204052f0 <__metal_driver_sifive_uart0_control_base>
    204054b8:	87aa                	mv	a5,a0
    204054ba:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
    204054be:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
    204054c0:	fd843503          	ld	a0,-40(s0)
    204054c4:	f9fff0ef          	jal	ra,20405462 <__metal_driver_sifive_uart0_txready>
    204054c8:	87aa                	mv	a5,a0
    204054ca:	dbfd                	beqz	a5,204054c0 <__metal_driver_sifive_uart0_putc+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
    204054cc:	fe843783          	ld	a5,-24(s0)
    204054d0:	fd442703          	lw	a4,-44(s0)
    204054d4:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
    204054d6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
    204054d8:	853e                	mv	a0,a5
    204054da:	70a2                	ld	ra,40(sp)
    204054dc:	7402                	ld	s0,32(sp)
    204054de:	6145                	addi	sp,sp,48
    204054e0:	8082                	ret

00000000204054e2 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
    204054e2:	7179                	addi	sp,sp,-48
    204054e4:	f406                	sd	ra,40(sp)
    204054e6:	f022                	sd	s0,32(sp)
    204054e8:	1800                	addi	s0,sp,48
    204054ea:	fca43c23          	sd	a0,-40(s0)
    204054ee:	fcb43823          	sd	a1,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    204054f2:	fd843503          	ld	a0,-40(s0)
    204054f6:	dfbff0ef          	jal	ra,204052f0 <__metal_driver_sifive_uart0_control_base>
    204054fa:	87aa                	mv	a5,a0
    204054fc:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
    20405500:	fe843783          	ld	a5,-24(s0)
    20405504:	0791                	addi	a5,a5,4
    20405506:	439c                	lw	a5,0(a5)
    20405508:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
    2040550c:	fe442783          	lw	a5,-28(s0)
    20405510:	0007d763          	bgez	a5,2040551e <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
    20405514:	fd043783          	ld	a5,-48(s0)
    20405518:	577d                	li	a4,-1
    2040551a:	c398                	sw	a4,0(a5)
    2040551c:	a811                	j	20405530 <__metal_driver_sifive_uart0_getc+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
    2040551e:	fe442783          	lw	a5,-28(s0)
    20405522:	0ff7f793          	andi	a5,a5,255
    20405526:	0007871b          	sext.w	a4,a5
    2040552a:	fd043783          	ld	a5,-48(s0)
    2040552e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
    20405530:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
    20405532:	853e                	mv	a0,a5
    20405534:	70a2                	ld	ra,40(sp)
    20405536:	7402                	ld	s0,32(sp)
    20405538:	6145                	addi	sp,sp,48
    2040553a:	8082                	ret

000000002040553c <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
    2040553c:	7179                	addi	sp,sp,-48
    2040553e:	f422                	sd	s0,40(sp)
    20405540:	1800                	addi	s0,sp,48
    20405542:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
    20405546:	fd843783          	ld	a5,-40(s0)
    2040554a:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
    2040554e:	fe843783          	ld	a5,-24(s0)
    20405552:	679c                	ld	a5,8(a5)
    20405554:	2781                	sext.w	a5,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
    20405556:	853e                	mv	a0,a5
    20405558:	7422                	ld	s0,40(sp)
    2040555a:	6145                	addi	sp,sp,48
    2040555c:	8082                	ret

000000002040555e <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
    2040555e:	7139                	addi	sp,sp,-64
    20405560:	fc06                	sd	ra,56(sp)
    20405562:	f822                	sd	s0,48(sp)
    20405564:	0080                	addi	s0,sp,64
    20405566:	fca43423          	sd	a0,-56(s0)
    2040556a:	87ae                	mv	a5,a1
    2040556c:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
    20405570:	fc843783          	ld	a5,-56(s0)
    20405574:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
    20405578:	fc843503          	ld	a0,-56(s0)
    2040557c:	d75ff0ef          	jal	ra,204052f0 <__metal_driver_sifive_uart0_control_base>
    20405580:	87aa                	mv	a5,a0
    20405582:	fef43023          	sd	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
    20405586:	fc843503          	ld	a0,-56(s0)
    2040558a:	de7ff0ef          	jal	ra,20405370 <__metal_driver_sifive_uart0_clock>
    2040558e:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
    20405592:	fc442703          	lw	a4,-60(s0)
    20405596:	fe843783          	ld	a5,-24(s0)
    2040559a:	e798                	sd	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
    2040559c:	fd843783          	ld	a5,-40(s0)
    204055a0:	c7ad                	beqz	a5,2040560a <__metal_driver_sifive_uart0_set_baud_rate+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
    204055a2:	fd843783          	ld	a5,-40(s0)
    204055a6:	639c                	ld	a5,0(a5)
    204055a8:	639c                	ld	a5,0(a5)
    204055aa:	fd843503          	ld	a0,-40(s0)
    204055ae:	9782                	jalr	a5
    204055b0:	fca43823          	sd	a0,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
    204055b4:	fc442783          	lw	a5,-60(s0)
    204055b8:	fd043703          	ld	a4,-48(s0)
    204055bc:	02f747b3          	div	a5,a4,a5
    204055c0:	2781                	sext.w	a5,a5
    204055c2:	fe043703          	ld	a4,-32(s0)
    204055c6:	0761                	addi	a4,a4,24
    204055c8:	37fd                	addiw	a5,a5,-1
    204055ca:	2781                	sext.w	a5,a5
    204055cc:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
    204055ce:	fe043783          	ld	a5,-32(s0)
    204055d2:	07a1                	addi	a5,a5,8
    204055d4:	439c                	lw	a5,0(a5)
    204055d6:	0007869b          	sext.w	a3,a5
    204055da:	fe043783          	ld	a5,-32(s0)
    204055de:	07a1                	addi	a5,a5,8
    204055e0:	873e                	mv	a4,a5
    204055e2:	87b6                	mv	a5,a3
    204055e4:	0017e793          	ori	a5,a5,1
    204055e8:	2781                	sext.w	a5,a5
    204055ea:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
    204055ec:	fe043783          	ld	a5,-32(s0)
    204055f0:	07b1                	addi	a5,a5,12
    204055f2:	439c                	lw	a5,0(a5)
    204055f4:	0007869b          	sext.w	a3,a5
    204055f8:	fe043783          	ld	a5,-32(s0)
    204055fc:	07b1                	addi	a5,a5,12
    204055fe:	873e                	mv	a4,a5
    20405600:	87b6                	mv	a5,a3
    20405602:	0017e793          	ori	a5,a5,1
    20405606:	2781                	sext.w	a5,a5
    20405608:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
    2040560a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
    2040560c:	853e                	mv	a0,a5
    2040560e:	70e2                	ld	ra,56(sp)
    20405610:	7442                	ld	s0,48(sp)
    20405612:	6121                	addi	sp,sp,64
    20405614:	8082                	ret

0000000020405616 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
    20405616:	711d                	addi	sp,sp,-96
    20405618:	ec86                	sd	ra,88(sp)
    2040561a:	e8a2                	sd	s0,80(sp)
    2040561c:	1080                	addi	s0,sp,96
    2040561e:	faa43423          	sd	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
    20405622:	fa843783          	ld	a5,-88(s0)
    20405626:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
    2040562a:	fa843503          	ld	a0,-88(s0)
    2040562e:	cc3ff0ef          	jal	ra,204052f0 <__metal_driver_sifive_uart0_control_base>
    20405632:	87aa                	mv	a5,a0
    20405634:	fef43023          	sd	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
    20405638:	fa843503          	ld	a0,-88(s0)
    2040563c:	d35ff0ef          	jal	ra,20405370 <__metal_driver_sifive_uart0_clock>
    20405640:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
    20405644:	fe043783          	ld	a5,-32(s0)
    20405648:	07a1                	addi	a5,a5,8
    2040564a:	439c                	lw	a5,0(a5)
    2040564c:	0007869b          	sext.w	a3,a5
    20405650:	fe043783          	ld	a5,-32(s0)
    20405654:	07a1                	addi	a5,a5,8
    20405656:	873e                	mv	a4,a5
    20405658:	fff907b7          	lui	a5,0xfff90
    2040565c:	17fd                	addi	a5,a5,-1
    2040565e:	8ff5                	and	a5,a5,a3
    20405660:	2781                	sext.w	a5,a5
    20405662:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
    20405664:	fe043783          	ld	a5,-32(s0)
    20405668:	07a1                	addi	a5,a5,8
    2040566a:	439c                	lw	a5,0(a5)
    2040566c:	0007869b          	sext.w	a3,a5
    20405670:	fe043783          	ld	a5,-32(s0)
    20405674:	07a1                	addi	a5,a5,8
    20405676:	873e                	mv	a4,a5
    20405678:	67c1                	lui	a5,0x10
    2040567a:	8fd5                	or	a5,a5,a3
    2040567c:	2781                	sext.w	a5,a5
    2040567e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
    20405680:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
    20405682:	fe043783          	ld	a5,-32(s0)
    20405686:	07d1                	addi	a5,a5,20
    20405688:	439c                	lw	a5,0(a5)
    2040568a:	2781                	sext.w	a5,a5
    2040568c:	8b85                	andi	a5,a5,1
    2040568e:	2781                	sext.w	a5,a5
    20405690:	dbed                	beqz	a5,20405682 <pre_rate_change_callback_func+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
    20405692:	fe043783          	ld	a5,-32(s0)
    20405696:	07a1                	addi	a5,a5,8
    20405698:	439c                	lw	a5,0(a5)
    2040569a:	2781                	sext.w	a5,a5
    2040569c:	8b89                	andi	a5,a5,2
    2040569e:	2781                	sext.w	a5,a5
    204056a0:	c399                	beqz	a5,204056a6 <pre_rate_change_callback_func+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
    204056a2:	47a5                	li	a5,9
    204056a4:	a011                	j	204056a8 <pre_rate_change_callback_func+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
    204056a6:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
    204056a8:	fcf43823          	sd	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
    204056ac:	fd843783          	ld	a5,-40(s0)
    204056b0:	639c                	ld	a5,0(a5)
    204056b2:	639c                	ld	a5,0(a5)
    204056b4:	fd843503          	ld	a0,-40(s0)
    204056b8:	9782                	jalr	a5
    204056ba:	fca43423          	sd	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
    204056be:	fd043703          	ld	a4,-48(s0)
    204056c2:	fc843783          	ld	a5,-56(s0)
    204056c6:	02f707b3          	mul	a5,a4,a5
    204056ca:	873e                	mv	a4,a5
    204056cc:	fe843783          	ld	a5,-24(s0)
    204056d0:	679c                	ld	a5,8(a5)
    204056d2:	02f757b3          	divu	a5,a4,a5
    204056d6:	fcf43023          	sd	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
    204056da:	fa043c23          	sd	zero,-72(s0)
    204056de:	a039                	j	204056ec <pre_rate_change_callback_func+0xd6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
    204056e0:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
    204056e2:	fb843783          	ld	a5,-72(s0)
    204056e6:	0785                	addi	a5,a5,1
    204056e8:	faf43c23          	sd	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
    204056ec:	fb843783          	ld	a5,-72(s0)
    204056f0:	fc043703          	ld	a4,-64(s0)
    204056f4:	fee7c6e3          	blt	a5,a4,204056e0 <pre_rate_change_callback_func+0xca>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
    204056f8:	0001                	nop
    204056fa:	60e6                	ld	ra,88(sp)
    204056fc:	6446                	ld	s0,80(sp)
    204056fe:	6125                	addi	sp,sp,96
    20405700:	8082                	ret

0000000020405702 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
    20405702:	7179                	addi	sp,sp,-48
    20405704:	f406                	sd	ra,40(sp)
    20405706:	f022                	sd	s0,32(sp)
    20405708:	1800                	addi	s0,sp,48
    2040570a:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
    2040570e:	fd843783          	ld	a5,-40(s0)
    20405712:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
    20405716:	fe843703          	ld	a4,-24(s0)
    2040571a:	fe843783          	ld	a5,-24(s0)
    2040571e:	679c                	ld	a5,8(a5)
    20405720:	2781                	sext.w	a5,a5
    20405722:	85be                	mv	a1,a5
    20405724:	853a                	mv	a0,a4
    20405726:	ad0fc0ef          	jal	ra,204019f6 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
    2040572a:	0001                	nop
    2040572c:	70a2                	ld	ra,40(sp)
    2040572e:	7402                	ld	s0,32(sp)
    20405730:	6145                	addi	sp,sp,48
    20405732:	8082                	ret

0000000020405734 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
    20405734:	715d                	addi	sp,sp,-80
    20405736:	e486                	sd	ra,72(sp)
    20405738:	e0a2                	sd	s0,64(sp)
    2040573a:	0880                	addi	s0,sp,80
    2040573c:	faa43c23          	sd	a0,-72(s0)
    20405740:	87ae                	mv	a5,a1
    20405742:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
    20405746:	fb843783          	ld	a5,-72(s0)
    2040574a:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
    2040574e:	fb843503          	ld	a0,-72(s0)
    20405752:	c1fff0ef          	jal	ra,20405370 <__metal_driver_sifive_uart0_clock>
    20405756:	fea43023          	sd	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
    2040575a:	fb843503          	ld	a0,-72(s0)
    2040575e:	c41ff0ef          	jal	ra,2040539e <__metal_driver_sifive_uart0_pinmux>
    20405762:	fca43c23          	sd	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
    20405766:	fe043783          	ld	a5,-32(s0)
    2040576a:	cbb1                	beqz	a5,204057be <__metal_driver_sifive_uart0_init+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
    2040576c:	fe843783          	ld	a5,-24(s0)
    20405770:	00000717          	auipc	a4,0x0
    20405774:	ea670713          	addi	a4,a4,-346 # 20405616 <pre_rate_change_callback_func>
    20405778:	eb98                	sd	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
    2040577a:	fe843783          	ld	a5,-24(s0)
    2040577e:	fb843703          	ld	a4,-72(s0)
    20405782:	ef98                	sd	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
    20405784:	fe843783          	ld	a5,-24(s0)
    20405788:	07c1                	addi	a5,a5,16
    2040578a:	85be                	mv	a1,a5
    2040578c:	fe043503          	ld	a0,-32(s0)
    20405790:	0d4000ef          	jal	ra,20405864 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
    20405794:	fe843783          	ld	a5,-24(s0)
    20405798:	00000717          	auipc	a4,0x0
    2040579c:	f6a70713          	addi	a4,a4,-150 # 20405702 <post_rate_change_callback_func>
    204057a0:	f798                	sd	a4,40(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
    204057a2:	fe843783          	ld	a5,-24(s0)
    204057a6:	fb843703          	ld	a4,-72(s0)
    204057aa:	fb98                	sd	a4,48(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
    204057ac:	fe843783          	ld	a5,-24(s0)
    204057b0:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
    204057b4:	85be                	mv	a1,a5
    204057b6:	fe043503          	ld	a0,-32(s0)
    204057ba:	0dc000ef          	jal	ra,20405896 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
    204057be:	fe843783          	ld	a5,-24(s0)
    204057c2:	fb442703          	lw	a4,-76(s0)
    204057c6:	85ba                	mv	a1,a4
    204057c8:	853e                	mv	a0,a5
    204057ca:	a2cfc0ef          	jal	ra,204019f6 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
    204057ce:	fd843783          	ld	a5,-40(s0)
    204057d2:	cb95                	beqz	a5,20405806 <__metal_driver_sifive_uart0_init+0xd2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
    204057d4:	fb843503          	ld	a0,-72(s0)
    204057d8:	bf1ff0ef          	jal	ra,204053c8 <__metal_driver_sifive_uart0_pinmux_output_selector>
    204057dc:	87aa                	mv	a5,a0
    204057de:	fcf43823          	sd	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
    204057e2:	fb843503          	ld	a0,-72(s0)
    204057e6:	c0dff0ef          	jal	ra,204053f2 <__metal_driver_sifive_uart0_pinmux_source_selector>
    204057ea:	87aa                	mv	a5,a0
    204057ec:	fcf43423          	sd	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
    204057f0:	fd843783          	ld	a5,-40(s0)
    204057f4:	639c                	ld	a5,0(a5)
    204057f6:	67bc                	ld	a5,72(a5)
    204057f8:	fc843603          	ld	a2,-56(s0)
    204057fc:	fd043583          	ld	a1,-48(s0)
    20405800:	fd843503          	ld	a0,-40(s0)
    20405804:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
    20405806:	0001                	nop
    20405808:	60a6                	ld	ra,72(sp)
    2040580a:	6406                	ld	s0,64(sp)
    2040580c:	6161                	addi	sp,sp,80
    2040580e:	8082                	ret

0000000020405810 <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
    20405810:	7179                	addi	sp,sp,-48
    20405812:	f422                	sd	s0,40(sp)
    20405814:	1800                	addi	s0,sp,48
    20405816:	fca43c23          	sd	a0,-40(s0)
    2040581a:	fcb43823          	sd	a1,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
    2040581e:	fd043783          	ld	a5,-48(s0)
    20405822:	0007b823          	sd	zero,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
    20405826:	fd843783          	ld	a5,-40(s0)
    2040582a:	e781                	bnez	a5,20405832 <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
    2040582c:	fd043783          	ld	a5,-48(s0)
    20405830:	a035                	j	2040585c <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
    20405832:	fd843783          	ld	a5,-40(s0)
    20405836:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
    2040583a:	a031                	j	20405846 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
    2040583c:	fe843783          	ld	a5,-24(s0)
    20405840:	6b9c                	ld	a5,16(a5)
    20405842:	fef43423          	sd	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
    20405846:	fe843783          	ld	a5,-24(s0)
    2040584a:	6b9c                	ld	a5,16(a5)
    2040584c:	fbe5                	bnez	a5,2040583c <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
    2040584e:	fe843783          	ld	a5,-24(s0)
    20405852:	fd043703          	ld	a4,-48(s0)
    20405856:	eb98                	sd	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
    20405858:	fd843783          	ld	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
    2040585c:	853e                	mv	a0,a5
    2040585e:	7422                	ld	s0,40(sp)
    20405860:	6145                	addi	sp,sp,48
    20405862:	8082                	ret

0000000020405864 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
    20405864:	1101                	addi	sp,sp,-32
    20405866:	ec06                	sd	ra,24(sp)
    20405868:	e822                	sd	s0,16(sp)
    2040586a:	1000                	addi	s0,sp,32
    2040586c:	fea43423          	sd	a0,-24(s0)
    20405870:	feb43023          	sd	a1,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
    20405874:	fe843783          	ld	a5,-24(s0)
    20405878:	679c                	ld	a5,8(a5)
    2040587a:	fe043583          	ld	a1,-32(s0)
    2040587e:	853e                	mv	a0,a5
    20405880:	f91ff0ef          	jal	ra,20405810 <_metal_clock_append_to_callbacks>
    20405884:	872a                	mv	a4,a0
    20405886:	fe843783          	ld	a5,-24(s0)
    2040588a:	e798                	sd	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
    2040588c:	0001                	nop
    2040588e:	60e2                	ld	ra,24(sp)
    20405890:	6442                	ld	s0,16(sp)
    20405892:	6105                	addi	sp,sp,32
    20405894:	8082                	ret

0000000020405896 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
    20405896:	1101                	addi	sp,sp,-32
    20405898:	ec06                	sd	ra,24(sp)
    2040589a:	e822                	sd	s0,16(sp)
    2040589c:	1000                	addi	s0,sp,32
    2040589e:	fea43423          	sd	a0,-24(s0)
    204058a2:	feb43023          	sd	a1,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
    204058a6:	fe843783          	ld	a5,-24(s0)
    204058aa:	6b9c                	ld	a5,16(a5)
    204058ac:	fe043583          	ld	a1,-32(s0)
    204058b0:	853e                	mv	a0,a5
    204058b2:	f5fff0ef          	jal	ra,20405810 <_metal_clock_append_to_callbacks>
    204058b6:	872a                	mv	a4,a0
    204058b8:	fe843783          	ld	a5,-24(s0)
    204058bc:	eb98                	sd	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
    204058be:	0001                	nop
    204058c0:	60e2                	ld	ra,24(sp)
    204058c2:	6442                	ld	s0,16(sp)
    204058c4:	6105                	addi	sp,sp,32
    204058c6:	8082                	ret

00000000204058c8 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
    204058c8:	1101                	addi	sp,sp,-32
    204058ca:	ec06                	sd	ra,24(sp)
    204058cc:	e822                	sd	s0,16(sp)
    204058ce:	1000                	addi	s0,sp,32
    204058d0:	fea43423          	sd	a0,-24(s0)
    204058d4:	fe843783          	ld	a5,-24(s0)
    204058d8:	639c                	ld	a5,0(a5)
    204058da:	6fbc                	ld	a5,88(a5)
    204058dc:	fe843503          	ld	a0,-24(s0)
    204058e0:	9782                	jalr	a5
    204058e2:	87aa                	mv	a5,a0
    204058e4:	853e                	mv	a0,a5
    204058e6:	60e2                	ld	ra,24(sp)
    204058e8:	6442                	ld	s0,16(sp)
    204058ea:	6105                	addi	sp,sp,32
    204058ec:	8082                	ret

00000000204058ee <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
    204058ee:	1101                	addi	sp,sp,-32
    204058f0:	ec22                	sd	s0,24(sp)
    204058f2:	1000                	addi	s0,sp,32
    204058f4:	87aa                	mv	a5,a0
    204058f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
    204058fa:	fec42783          	lw	a5,-20(s0)
    204058fe:	2781                	sext.w	a5,a5
    20405900:	eb89                	bnez	a5,20405912 <metal_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
    20405902:	81818713          	addi	a4,gp,-2024 # 80000ae8 <__metal_cpu_table>
    20405906:	fec46783          	lwu	a5,-20(s0)
    2040590a:	078e                	slli	a5,a5,0x3
    2040590c:	97ba                	add	a5,a5,a4
    2040590e:	639c                	ld	a5,0(a5)
    20405910:	a011                	j	20405914 <metal_cpu_get+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
    20405912:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
    20405914:	853e                	mv	a0,a5
    20405916:	6462                	ld	s0,24(sp)
    20405918:	6105                	addi	sp,sp,32
    2040591a:	8082                	ret

000000002040591c <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
    2040591c:	1101                	addi	sp,sp,-32
    2040591e:	ec22                	sd	s0,24(sp)
    20405920:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
    20405922:	f14027f3          	csrr	a5,mhartid
    20405926:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
    2040592a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
    2040592e:	853e                	mv	a0,a5
    20405930:	6462                	ld	s0,24(sp)
    20405932:	6105                	addi	sp,sp,32
    20405934:	8082                	ret

0000000020405936 <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
    20405936:	1101                	addi	sp,sp,-32
    20405938:	ec22                	sd	s0,24(sp)
    2040593a:	1000                	addi	s0,sp,32
    2040593c:	87aa                	mv	a5,a0
    2040593e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
    20405942:	0001                	nop
    20405944:	bffd                	j	20405942 <metal_shutdown+0xc>
	...

0000000020405a00 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
    20405a00:	a0bfc06f          	j	2040240a <metal_interrupt_vector_handler>

0000000020405a04 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
    20405a04:	a07fc06f          	j	2040240a <metal_interrupt_vector_handler>

0000000020405a08 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
    20405a08:	a03fc06f          	j	2040240a <metal_interrupt_vector_handler>

0000000020405a0c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
    20405a0c:	a55fc06f          	j	20402460 <metal_software_interrupt_vector_handler>

0000000020405a10 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
    20405a10:	9fbfc06f          	j	2040240a <metal_interrupt_vector_handler>

0000000020405a14 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
    20405a14:	9f7fc06f          	j	2040240a <metal_interrupt_vector_handler>

0000000020405a18 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
    20405a18:	9f3fc06f          	j	2040240a <metal_interrupt_vector_handler>

0000000020405a1c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
    20405a1c:	b93fc06f          	j	204025ae <metal_timer_interrupt_vector_handler>

0000000020405a20 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
    20405a20:	9ebfc06f          	j	2040240a <metal_interrupt_vector_handler>

0000000020405a24 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
    20405a24:	9e7fc06f          	j	2040240a <metal_interrupt_vector_handler>

0000000020405a28 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
    20405a28:	9e3fc06f          	j	2040240a <metal_interrupt_vector_handler>

0000000020405a2c <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
    20405a2c:	9dffc06f          	j	2040240a <metal_interrupt_vector_handler>

0000000020405a30 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
    20405a30:	9dbfc06f          	j	2040240a <metal_interrupt_vector_handler>

0000000020405a34 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
    20405a34:	9d7fc06f          	j	2040240a <metal_interrupt_vector_handler>

0000000020405a38 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
    20405a38:	9d3fc06f          	j	2040240a <metal_interrupt_vector_handler>

0000000020405a3c <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
    20405a3c:	9cffc06f          	j	2040240a <metal_interrupt_vector_handler>

0000000020405a40 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
    20405a40:	eb7fc06f          	j	204028f6 <metal_lc0_interrupt_vector_handler>

0000000020405a44 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
    20405a44:	f95fc06f          	j	204029d8 <metal_lc1_interrupt_vector_handler>

0000000020405a48 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
    20405a48:	872fd06f          	j	20402aba <metal_lc2_interrupt_vector_handler>

0000000020405a4c <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
    20405a4c:	950fd06f          	j	20402b9c <metal_lc3_interrupt_vector_handler>

0000000020405a50 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
    20405a50:	a2efd06f          	j	20402c7e <metal_lc4_interrupt_vector_handler>

0000000020405a54 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
    20405a54:	b0cfd06f          	j	20402d60 <metal_lc5_interrupt_vector_handler>

0000000020405a58 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
    20405a58:	beafd06f          	j	20402e42 <metal_lc6_interrupt_vector_handler>

0000000020405a5c <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
    20405a5c:	cc8fd06f          	j	20402f24 <metal_lc7_interrupt_vector_handler>

0000000020405a60 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
    20405a60:	da6fd06f          	j	20403006 <metal_lc8_interrupt_vector_handler>

0000000020405a64 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
    20405a64:	e84fd06f          	j	204030e8 <metal_lc9_interrupt_vector_handler>

0000000020405a68 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
    20405a68:	f62fd06f          	j	204031ca <metal_lc10_interrupt_vector_handler>

0000000020405a6c <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
    20405a6c:	841fd06f          	j	204032ac <metal_lc11_interrupt_vector_handler>

0000000020405a70 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
    20405a70:	91ffd06f          	j	2040338e <metal_lc12_interrupt_vector_handler>

0000000020405a74 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
    20405a74:	9fdfd06f          	j	20403470 <metal_lc13_interrupt_vector_handler>

0000000020405a78 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
    20405a78:	adbfd06f          	j	20403552 <metal_lc14_interrupt_vector_handler>

0000000020405a7c <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
    20405a7c:	bb9fd06f          	j	20403634 <metal_lc15_interrupt_vector_handler>
	...

0000000020405b00 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:120
{
    20405b00:	1101                	addi	sp,sp,-32
    20405b02:	ec22                	sd	s0,24(sp)
    20405b04:	1000                	addi	s0,sp,32
    20405b06:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
    20405b0a:	fe843703          	ld	a4,-24(s0)
    20405b0e:	5fbfa797          	auipc	a5,0x5fbfa
    20405b12:	5a278793          	addi	a5,a5,1442 # 800000b0 <__metal_dt_clock_0>
    20405b16:	00f71763          	bne	a4,a5,20405b24 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
    20405b1a:	03dfd7b7          	lui	a5,0x3dfd
    20405b1e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
    20405b22:	a011                	j	20405b26 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:125
		return 0;
    20405b24:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-fpu/build/debug/./metal/machine.h:127
}
    20405b26:	853e                	mv	a0,a5
    20405b28:	6462                	ld	s0,24(sp)
    20405b2a:	6105                	addi	sp,sp,32
    20405b2c:	8082                	ret

0000000020405b2e <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
    20405b2e:	1101                	addi	sp,sp,-32
    20405b30:	ec06                	sd	ra,24(sp)
    20405b32:	e822                	sd	s0,16(sp)
    20405b34:	1000                	addi	s0,sp,32
    20405b36:	fea43423          	sd	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
    20405b3a:	fe843503          	ld	a0,-24(s0)
    20405b3e:	fc3ff0ef          	jal	ra,20405b00 <__metal_driver_fixed_clock_rate>
    20405b42:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
    20405b44:	853e                	mv	a0,a5
    20405b46:	60e2                	ld	ra,24(sp)
    20405b48:	6442                	ld	s0,16(sp)
    20405b4a:	6105                	addi	sp,sp,32
    20405b4c:	8082                	ret

0000000020405b4e <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
    20405b4e:	1101                	addi	sp,sp,-32
    20405b50:	ec06                	sd	ra,24(sp)
    20405b52:	e822                	sd	s0,16(sp)
    20405b54:	1000                	addi	s0,sp,32
    20405b56:	fea43423          	sd	a0,-24(s0)
    20405b5a:	feb43023          	sd	a1,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
    20405b5e:	fe843503          	ld	a0,-24(s0)
    20405b62:	fcdff0ef          	jal	ra,20405b2e <__metal_driver_fixed_clock_get_rate_hz>
    20405b66:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
    20405b68:	853e                	mv	a0,a5
    20405b6a:	60e2                	ld	ra,24(sp)
    20405b6c:	6442                	ld	s0,16(sp)
    20405b6e:	6105                	addi	sp,sp,32
    20405b70:	8082                	ret

0000000020405b72 <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
    20405b72:	1101                	addi	sp,sp,-32
    20405b74:	ec06                	sd	ra,24(sp)
    20405b76:	e822                	sd	s0,16(sp)
    20405b78:	1000                	addi	s0,sp,32
    20405b7a:	87aa                	mv	a5,a0
    20405b7c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
    20405b80:	fec42783          	lw	a5,-20(s0)
    20405b84:	853e                	mv	a0,a5
    20405b86:	db1ff0ef          	jal	ra,20405936 <metal_shutdown>
