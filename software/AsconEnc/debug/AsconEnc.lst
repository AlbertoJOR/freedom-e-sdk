
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/debug/AsconEnc.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/debug/AsconEnc.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x0000636c memsz 0x0000636c flags rwx
    LOAD off    0x00007730 vaddr 0x80001730 paddr 0x80001730 align 2**12
         filesz 0x00000000 memsz 0x000014a4 flags rw-
    LOAD off    0x00008000 vaddr 0x80000000 paddr 0x20406370 align 2**12
         filesz 0x00001730 memsz 0x00001730 flags rw-
    LOAD off    0x00009730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00009730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000196  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005c00  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000568  20405e00  20405e00  00006e00  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20406368  20406368  00007368  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00001730  80000000  20406370  00008000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              000008a4  80001730  80001730  00007730  2**3  ALLOC
  6 .stack            00000400  80001fd4  80001fd4  00007730  2**0  ALLOC
  7 .heap             00000800  800023d4  800023d4  00007730  2**0  ALLOC
  8 .debug_info       00014b7d  00000000  00000000  00009730  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     0000278a  00000000  00000000  0001e2ad  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000908  00000000  00000000  00020a38  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     000007a0  00000000  00000000  00021340  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       000092a2  00000000  00000000  00021ae0  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        00003817  00000000  00000000  0002ad82  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002e599  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002e5c1  2**0  CONTENTS, READONLY
 16 .debug_frame      000025ac  00000000  00000000  0002e5ec  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405e00 l    d  .rodata	00000000 .rodata
20406368 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80001730 l    d  .bss	00000000 .bss
80001fd4 l    d  .stack	00000000 .stack
800023d4 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400136 l       .init	00000000 _skip_init
20406018 l       .rodata	00000000 argv
2040601c l       .rodata	00000000 envp
20406020 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 AsconEnc.c
2040037a l     F .text	00000404 ROUND
2040077e l     F .text	0000008e P12
2040080c l     F .text	00000052 P6
80000000 l     O .data	000007d0 asso_text.2802
800007d0 l     O .data	000007d0 plain_text.2801
8000173c l     O .bss	000007e0 cipher_text.2803
80000fa0 l     O .data	00000010 Key.2807
80000fb0 l     O .data	00000010 Nonce.2804
80001f1c l     O .bss	00000028 hash.2806
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
204015de l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20401b2e l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80001710 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80001f44 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20402804 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
204028ae l     F .text	00000026 __metal_driver_sifive_clint0_control_base
204028d4 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
204028f8 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20402934 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20402a94 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20402fcc l     F .text	00000024 __metal_driver_cpu_hartid
20402ff0 l     F .text	0000002a __metal_driver_cpu_timebase
2040301a l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20404816 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20404840 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20404868 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20404890 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
204048b8 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404e04 l     F .text	00000026 __metal_driver_sifive_gpio0_base
20404e2a l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20404e54 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
204056be l     F .text	0000002a __metal_driver_sifive_uart0_control_base
204056e8 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20405716 l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
2040573e l     F .text	0000002e __metal_driver_sifive_uart0_clock
2040576c l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20405796 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
204057c0 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
204059b2 l     F .text	000000d8 pre_rate_change_callback_func
20405a8a l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20405d00 l       .text	00000000 IRQ_0
20405d04 l       .text	00000000 IRQ_1
20405d08 l       .text	00000000 IRQ_2
20405d0c l       .text	00000000 IRQ_3
20405d10 l       .text	00000000 IRQ_4
20405d14 l       .text	00000000 IRQ_5
20405d18 l       .text	00000000 IRQ_6
20405d1c l       .text	00000000 IRQ_7
20405d20 l       .text	00000000 IRQ_8
20405d24 l       .text	00000000 IRQ_9
20405d28 l       .text	00000000 IRQ_10
20405d2c l       .text	00000000 IRQ_11
20405d30 l       .text	00000000 IRQ_12
20405d34 l       .text	00000000 IRQ_13
20405d38 l       .text	00000000 IRQ_14
20405d3c l       .text	00000000 IRQ_15
20405d40 l       .text	00000000 IRQ_LC0
20405d44 l       .text	00000000 IRQ_LC1
20405d48 l       .text	00000000 IRQ_LC2
20405d4c l       .text	00000000 IRQ_LC3
20405d50 l       .text	00000000 IRQ_LC4
20405d54 l       .text	00000000 IRQ_LC5
20405d58 l       .text	00000000 IRQ_LC6
20405d5c l       .text	00000000 IRQ_LC7
20405d60 l       .text	00000000 IRQ_LC8
20405d64 l       .text	00000000 IRQ_LC9
20405d68 l       .text	00000000 IRQ_LC10
20405d6c l       .text	00000000 IRQ_LC11
20405d70 l       .text	00000000 IRQ_LC12
20405d74 l       .text	00000000 IRQ_LC13
20405d78 l       .text	00000000 IRQ_LC14
20405d7c l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405d80 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000fc0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
2040636c l       .init_array	00000000 __fini_array_end
2040636c l       .init_array	00000000 __fini_array_start
2040636c l       .init_array	00000000 __init_array_end
20406368 l       .init_array	00000000 __preinit_array_end
20406368 l       .init_array	00000000 __init_array_start
20406368 l       .init_array	00000000 __preinit_array_start
204010ca g     F .text	0000002c putchar
20406348 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
20401f92 g     F .text	00000028 _isatty_r
204037be  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20401178 g     F .text	000000da _puts_r
2040085e g     F .text	0000007a printstate
20401fba g     F .text	0000002c _lseek_r
20405912 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
20402c70 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
2040372c  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400e88 g     F .text	0000001e rdcycle
20403f7e g     F .text	00000038 __metal_valid_interrupt_id
20401086 g     F .text	00000044 printf
204043a4 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80001f08 g       .data	00000000 __global_pointer$
20405b8c g     F .text	00000054 _metal_clock_append_to_callbacks
20404908 g     F .text	00000038 __metal_plic0_complete_interrupt
204041fe g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20401ed8 g     F .text	00000036 __sseek
20401694 g     F .text	0000006a __sinit
20401260 g     F .text	000000c0 __swbuf_r
20401650 g     F .text	00000044 __sfmoreglue
20402002 g     F .text	00000002 __malloc_unlock
20405c66 g     F .text	0000002a metal_cpu_get
800016e8 g     O .data	00000020 __metal_dt_serial_10013000
20405298 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
2040602c g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80001fd4 g       .bss	00000000 metal_segment_bss_target_end
20402964 g     F .text	0000009a __metal_clint0_mtime_get
204047aa g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20405048 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
2040258c g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
2040582a g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80001730 g       .bss	00000000 metal_segment_bss_target_start
204029fe g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401f68 g     F .text	0000002a _fstat_r
204054e8 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80001fd0 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20405be0 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20403a98  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20406280 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20406240 g     O .rodata	00000040 __metal_driver_vtable_cpu
20402880 g     F .text	0000002e metal_uart_set_baud_rate
20405aba g     F .text	000000d2 __metal_driver_sifive_uart0_init
20404438 g     F .text	00000072 __metal_driver_cpu_mcycle_get
800023d4 g       .heap	00000000 metal_segment_heap_target_start
20401646 g     F .text	0000000a _cleanup_r
80001720 g     O .data	00000004 __metal_dt_cpu_0
20403a06  w    F .text	00000092 metal_lc8_interrupt_vector_handler
20401252 g     F .text	0000000e puts
20403ce0  w    F .text	00000092 metal_lc13_interrupt_vector_handler
204031ae g     F .text	00000018 __metal_default_exception_handler
20402400 g     F .text	00000026 _fstat
20402f98 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
204049a4 g     F .text	00000062 __metal_plic0_set_priority
204043c0 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20403044 g     F .text	0000002c __metal_driver_cpu_get
204061f4 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
204030a2 g     F .text	00000018 __metal_interrupt_global_disable
20403974  w    F .text	00000092 metal_lc7_interrupt_vector_handler
20403b2a  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20401e32 g     F .text	00000028 _sbrk_r
20404dbc g     F .text	00000048 __metal_driver_riscv_plic0_disable
20404072 g     F .text	0000004e __metal_exception_register
204023b2 g     F .text	0000002c _read_r
204045cc g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
2040512a g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
2040329a g     F .text	00000064 __metal_default_sw_handler
20405c10 g     F .text	00000030 metal_clock_register_post_rate_change_callback
204057ea g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
20402426 g     F .text	00000020 _isatty
204051f0 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80001728 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000170c g     O .data	00000004 _global_impure_ptr
204032fe  w    F .text	0000008e metal_timer_interrupt_vector_handler
204025fc g     F .text	0000006a __libc_init_array
2040516a g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
20403bbc  w    F .text	00000092 metal_lc11_interrupt_vector_handler
2040434c g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
2040249a g     F .text	0000007a _sbrk
204050e4 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20400174 g     F .init	00000002 _init
20403104 g     F .text	0000001a __metal_interrupt_timer_disable
204052e2 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20404682 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
2040630c g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20405230 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
204025c4 g     F .text	00000038 __libc_fini_array
20405670 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
2040460c g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20403156 g     F .text	0000002c __metal_interrupt_local_enable
20402f64 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
204027b2 g     F .text	0000002c metal_tty_putc
20404ac6 g     F .text	00000018 __metal_plic0_default_handler
204010f6 g     F .text	00000082 _putc_r
80001020 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20405f7c g     O .rodata	00000020 __sf_fake_stderr
2040313a g     F .text	0000001c __metal_interrupt_external_disable
20405808 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
2040441c g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
204040c0 g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20401b58 g     F .text	00000042 __sfputs_r
20404764 g     F .text	00000046 __metal_driver_cpu_exception_register
204030ba g     F .text	00000018 __metal_interrupt_software_enable
20403608  w    F .text	00000092 metal_lc1_interrupt_vector_handler
20401fe6 g     F .text	0000001a memchr
204019a4 g     F .text	000000ac _free_r
80001738 g     O .bss	00000004 _global_atexit
204008d8 g     F .text	000005b0 crypto_aead_encrypt
20403e96 g     F .text	00000050 __metal_controller_interrupt_vector_mode
204026ea g     F .text	000000c8 __call_exitprocs
800023d4 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
20402446 g     F .text	0000002a _lseek
20404744 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
204047d8 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
2040311e g     F .text	0000001c __metal_interrupt_external_enable
20402666 g     F .text	00000084 __register_exitproc
2040585c g     F .text	00000040 __metal_driver_sifive_uart0_putc
20404b6e g     F .text	00000144 __metal_driver_riscv_plic0_init
20404d74 g     F .text	00000048 __metal_driver_riscv_plic0_enable
204050b8 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20400200 g     F .text	000000be printC
204038e2  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20403070 g     F .text	0000001a __metal_myhart_id
20405690 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
2040320c  w    F .text	0000008e metal_software_interrupt_vector_handler
20404378 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20401f40 g     F .text	00000028 _close_r
204058f2 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20402b52 g     F .text	000000da __metal_driver_riscv_clint0_register
80001718 g     O .data	00000008 __metal_dt_clint_2000000
20401320 g     F .text	00000110 __swsetup_r
204016fe g     F .text	0000009e __sfp
20401e5a g     F .text	00000030 __sread
20405008 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
20400176  w    F .init	00000000 secondary_main
204031de  w    F .text	0000002e metal_interrupt_vector_handler
20402000 g     F .text	00000002 __malloc_lock
2040157a g     F .text	00000064 _fflush_r
20404978 g     F .text	0000002c __metal_plic0_get_threshold
20405f9c g     O .rodata	00000020 __sf_fake_stdin
20403fb6 g     F .text	000000bc __metal_local_interrupt_enable
20402e2e g     F .text	00000136 __metal_driver_riscv_clint0_command_request
204018fc g     F .text	000000a8 memset
20403850  w    F .text	00000092 metal_lc5_interrupt_vector_handler
20400ea6 g     F .text	000001e0 main
80001730 g       .data	00000000 metal_segment_data_target_end
20404620 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
204046e4 g     F .text	00000060 __metal_driver_cpu_get_msip
20405caa g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
204047f6 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
204048da g     F .text	0000002e __metal_plic0_claim_interrupt
20401f0e g     F .text	00000006 __sclose
20403c4e  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20401a50 g     F .text	000000de _malloc_r
20402c54 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
204044aa g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20405c90 g     F .text	0000001a metal_cpu_get_current_hartid
20405d00 g       .text	00000000 __metal_vector_table
20406370 g       *ABS*	00000000 metal_segment_itim_source_start
80001714  w    O .data	00000004 __metal_cpu_table
80001030 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20400174 g     F .init	00000002 _fini
20401086 g     F .text	00000044 iprintf
2040308a g     F .text	00000018 __metal_interrupt_global_enable
20402582 g     F .text	0000000a atexit
204027de g     F .text	00000026 metal_tty_putc_raw
20401f14 g     F .text	0000002c _write_r
204030ea g     F .text	0000001a __metal_interrupt_timer_enable
2040589c g     F .text	00000056 __metal_driver_sifive_uart0_getc
20402d76 g     F .text	000000b8 __metal_driver_riscv_clint0_disable
20402004 g     F .text	0000010c _printf_common
80001708 g     O .data	00000004 _impure_ptr
20404556 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20401430 g     F .text	0000014a __sflush_r
20405dae g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20402cc4 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20406370 g       *ABS*	00000000 metal_segment_data_source_start
80002bd4 g       .heap	00000000 metal_segment_heap_target_end
20403ee6 g     F .text	00000098 __metal_controller_interrupt_vector
800013e8 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20401808 g     F .text	00000058 __swhatbuf_r
204051aa g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
2040338c g     F .text	00000066 __metal_default_timer_handler
20402514 g     F .text	0000006e _write
20404ade g     F .text	00000090 __metal_plic0_handler
2040369a  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403e04  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20405c40 g     F .text	00000026 metal_cpu_interrupt_controller
20401e8a g     F .text	0000004e __swrite
20402598 g     F .text	0000002c exit
20401b9a g     F .text	00000298 _vfiprintf_r
2040179c g     F .text	0000006c _fwalk_reent
20405dcc g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20405fbc g     O .rodata	00000020 __sf_fake_stdout
80001724 g     O .data	00000004 __metal_dt_gpio_10012000
204031c6 g     F .text	00000018 __metal_default_interrupt_handler
20402852 g     F .text	0000002e metal_uart_putc
20402470 g     F .text	0000002a _read
2040508e g     F .text	0000002a __metal_driver_sifive_gpio0_input
20403400 g     F .text	00000150 __metal_exception_handler
20403576  w    F .text	00000092 metal_lc0_interrupt_vector_handler
20405dee g     F .text	00000012 _exit
204044f0 g     F .text	00000066 __metal_driver_cpu_mtime_get
20401860 g     F .text	0000009c __smakebuf_r
20402c2c g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20402110 g     F .text	000002a2 _printf_i
80001734 g     O .bss	00000004 __malloc_sbrk_start
20403d72  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20402aca g     F .text	00000088 __metal_driver_riscv_clint0_init
80001730 g     O .bss	00000004 __malloc_free_list
204002be g     F .text	000000bc AEAD_ENC
20401b9a g     F .text	00000298 _vfprintf_r
204045e2 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20404a3a g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
204045f6 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20403182 g     F .text	0000002c __metal_interrupt_local_disable
204030d2 g     F .text	00000018 __metal_interrupt_software_disable
20404a06 g     F .text	00000034 __metal_plic0_get_priority
20402826 g     F .text	0000002c metal_uart_init
20404940 g     F .text	00000038 __metal_plic0_set_threshold
204023de g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20404cb2 g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc02197          	auipc	gp,0x5fc02
20400004:	f0818193          	addi	gp,gp,-248 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc02197          	auipc	gp,0x5fc02
20400084:	e8818193          	addi	gp,gp,-376 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	4cc18113          	addi	sp,gp,1228 # 800023d4 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2040008c:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2040008e:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400092:	00a28563          	beq	t0,a0,2040009c <_start+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20400096:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20400098:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009a:	bfe5                	j	20400092 <_start+0x14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2040009c:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a0:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a4:	08551963          	bne	a0,t0,20400136 <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000a8:	00006297          	auipc	t0,0x6
204000ac:	2c828293          	addi	t0,t0,712 # 20406370 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b0:	5fc00317          	auipc	t1,0x5fc00
204000b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000b8:	82818393          	addi	t2,gp,-2008 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000bc:	00628c63          	beq	t0,t1,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c0:	00735a63          	bge	t1,t2,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000c8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ca:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000ce:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d0:	fe734ae3          	blt	t1,t2,204000c4 <_start+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d4:	00006297          	auipc	t0,0x6
204000d8:	29c28293          	addi	t0,t0,668 # 20406370 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000dc:	e7c00317          	auipc	t1,0xe7c00
204000e0:	f2430313          	addi	t1,t1,-220 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e4:	e7c00397          	auipc	t2,0xe7c00
204000e8:	f1c38393          	addi	t2,t2,-228 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000ec:	00628c63          	beq	t0,t1,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f0:	00735a63          	bge	t1,t2,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000f8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fa:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
204000fe:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400100:	fe734ae3          	blt	t1,t2,204000f4 <_start+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400104:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20400108:	5fc01317          	auipc	t1,0x5fc01
2040010c:	62830313          	addi	t1,t1,1576 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400110:	0cc18393          	addi	t2,gp,204 # 80001fd4 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20400114:	00735763          	bge	t1,t2,20400122 <_start+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400118:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2040011c:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2040011e:	fe734de3          	blt	t1,t2,20400118 <_start+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20400122:	c211                	beqz	a2,20400126 <_start+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
20400124:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400126:	00002517          	auipc	a0,0x2
2040012a:	49e50513          	addi	a0,a0,1182 # 204025c4 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
2040012e:	454020ef          	jal	ra,20402582 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20400132:	4ca020ef          	jal	ra,204025fc <__libc_init_array>

20400136 <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400136:	3f2d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400138:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2040013c:	00010737          	lui	a4,0x10
20400140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20400144:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20400146:	cb89                	beqz	a5,20400158 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400148:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2040014c:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2040014e:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400150:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20400154:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400158:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2040015a:	00006597          	auipc	a1,0x6
2040015e:	ebe58593          	addi	a1,a1,-322 # 20406018 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20400162:	00006617          	auipc	a2,0x6
20400166:	eba60613          	addi	a2,a2,-326 # 2040601c <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
2040016a:	2031                	jal	20400176 <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040016c:	42c020ef          	jal	ra,20402598 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400170:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
20400172:	8082                	ret

20400174 <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400174:	8082                	ret

20400176 <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20400176:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400178:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2040017a:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2040017e:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20400182:	00628563          	beq	t0,t1,2040018c <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
20400186:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
2040018a:	bff5                	j	20400186 <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
2040018c:	51b000ef          	jal	ra,20400ea6 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400190:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400192:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
20400194:	8082                	ret

Disassembly of section .text:

20400200 <printC>:
printC():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:45

u32 RAND(u32 *return_addr, u32 num_rands);

u32 SEED();

void printC(u32 *arr, u32 a_len, int cipher, int del) {
20400200:	7179                	addi	sp,sp,-48
20400202:	d606                	sw	ra,44(sp)
20400204:	d422                	sw	s0,40(sp)
20400206:	1800                	addi	s0,sp,48
20400208:	fca42e23          	sw	a0,-36(s0)
2040020c:	fcb42c23          	sw	a1,-40(s0)
20400210:	fcc42a23          	sw	a2,-44(s0)
20400214:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:46
    int len = (a_len % 8 == 0) ? (a_len / 4) * 2 : (a_len / 4) * 2 + 2;
20400218:	fd842783          	lw	a5,-40(s0)
2040021c:	8b9d                	andi	a5,a5,7
2040021e:	e791                	bnez	a5,2040022a <printC+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:46 (discriminator 1)
20400220:	fd842783          	lw	a5,-40(s0)
20400224:	8389                	srli	a5,a5,0x2
20400226:	0786                	slli	a5,a5,0x1
20400228:	a031                	j	20400234 <printC+0x34>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:46 (discriminator 2)
2040022a:	fd842783          	lw	a5,-40(s0)
2040022e:	8389                	srli	a5,a5,0x2
20400230:	0785                	addi	a5,a5,1
20400232:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:46 (discriminator 4)
20400234:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:47 (discriminator 4)
    len = (cipher) ? len + 4 : len;
20400238:	fd442783          	lw	a5,-44(s0)
2040023c:	c789                	beqz	a5,20400246 <printC+0x46>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:47 (discriminator 1)
2040023e:	fe842783          	lw	a5,-24(s0)
20400242:	0791                	addi	a5,a5,4
20400244:	a019                	j	2040024a <printC+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:47 (discriminator 2)
20400246:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:47 (discriminator 4)
2040024a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:48 (discriminator 4)
    for (int i = 0; i < len; i++) {
2040024e:	fe042623          	sw	zero,-20(s0)
20400252:	a881                	j	204002a2 <printC+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:49
        if (i % 2 == 0) {
20400254:	fec42783          	lw	a5,-20(s0)
20400258:	8b85                	andi	a5,a5,1
2040025a:	e781                	bnez	a5,20400262 <printC+0x62>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:50
            printf("\n");
2040025c:	4529                	li	a0,10
2040025e:	66d000ef          	jal	ra,204010ca <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:52
        }
        printf("%08x ", arr[i], i);
20400262:	fec42783          	lw	a5,-20(s0)
20400266:	078a                	slli	a5,a5,0x2
20400268:	fdc42703          	lw	a4,-36(s0)
2040026c:	97ba                	add	a5,a5,a4
2040026e:	439c                	lw	a5,0(a5)
20400270:	fec42603          	lw	a2,-20(s0)
20400274:	85be                	mv	a1,a5
20400276:	204067b7          	lui	a5,0x20406
2040027a:	e0078513          	addi	a0,a5,-512 # 20405e00 <_exit+0x12>
2040027e:	609000ef          	jal	ra,20401086 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:53
        if (del) {
20400282:	fd042783          	lw	a5,-48(s0)
20400286:	cb89                	beqz	a5,20400298 <printC+0x98>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:54
            arr[i] = 0;
20400288:	fec42783          	lw	a5,-20(s0)
2040028c:	078a                	slli	a5,a5,0x2
2040028e:	fdc42703          	lw	a4,-36(s0)
20400292:	97ba                	add	a5,a5,a4
20400294:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:48 (discriminator 2)
    for (int i = 0; i < len; i++) {
20400298:	fec42783          	lw	a5,-20(s0)
2040029c:	0785                	addi	a5,a5,1
2040029e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:48 (discriminator 1)
204002a2:	fec42703          	lw	a4,-20(s0)
204002a6:	fe842783          	lw	a5,-24(s0)
204002aa:	faf745e3          	blt	a4,a5,20400254 <printC+0x54>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:57
        }
    }
    printf("\n");
204002ae:	4529                	li	a0,10
204002b0:	61b000ef          	jal	ra,204010ca <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:58
}
204002b4:	0001                	nop
204002b6:	50b2                	lw	ra,44(sp)
204002b8:	5422                	lw	s0,40(sp)
204002ba:	6145                	addi	sp,sp,48
204002bc:	8082                	ret

204002be <AEAD_ENC>:
AEAD_ENC():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:68
}

u32 AEAD_ENC(u32 *ad_addr, u32 ad_len,
             u32 *p_addr, u32 p_len,
             u32 *c_addr, u32 *nonce_addr,
             u32 *key_addr) {
204002be:	7139                	addi	sp,sp,-64
204002c0:	de22                	sw	s0,60(sp)
204002c2:	0080                	addi	s0,sp,64
204002c4:	fca42e23          	sw	a0,-36(s0)
204002c8:	fcb42c23          	sw	a1,-40(s0)
204002cc:	fcc42a23          	sw	a2,-44(s0)
204002d0:	fcd42823          	sw	a3,-48(s0)
204002d4:	fce42623          	sw	a4,-52(s0)
204002d8:	fcf42423          	sw	a5,-56(s0)
204002dc:	fd042223          	sw	a6,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:69
    u32 rd = 0;
204002e0:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:71
    //printf("Init Enc\n");
    asm volatile("fence");
204002e4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:72
    ROCC_INSTRUCTION_DS(0, rd, nonce_addr, Enc_Set_Nonce);
204002e8:	fc842783          	lw	a5,-56(s0)
204002ec:	85be                	mv	a1,a5
204002ee:	2805e50b          	0x2805e50b
204002f2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:73
    asm volatile("fence":: : "memory");
204002f6:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:77
    //printf("Set Nonce finish : %08x \n", rd);


    asm volatile("fence");
204002fa:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:78
    ROCC_INSTRUCTION_DS(0, rd, key_addr, Enc_Set_Key);
204002fe:	fc442783          	lw	a5,-60(s0)
20400302:	85be                	mv	a1,a5
20400304:	2a05e50b          	0x2a05e50b
20400308:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:79
    asm volatile("fence":: : "memory");
2040030c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:82
    //printf("Set Key  finish : %07x \n", rd);

    asm volatile("fence");
20400310:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:83
    ROCC_INSTRUCTION_DSS(0, rd, p_addr, p_len, Enc_Set_P);
20400314:	fd442783          	lw	a5,-44(s0)
20400318:	85be                	mv	a1,a5
2040031a:	fd042603          	lw	a2,-48(s0)
2040031e:	22c5f50b          	0x22c5f50b
20400322:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:84
    asm volatile("fence":: : "memory");
20400326:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:87
    //printf("Set Plain text finish length : %08x \n", rd);

    asm volatile("fence");
2040032a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:88
    ROCC_INSTRUCTION_DSS(0, rd, ad_addr, ad_len, Enc_Set_AD);
2040032e:	fdc42783          	lw	a5,-36(s0)
20400332:	85be                	mv	a1,a5
20400334:	fd842603          	lw	a2,-40(s0)
20400338:	24c5f50b          	0x24c5f50b
2040033c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:89
    asm volatile("fence":: : "memory");
20400340:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:92
    //printf("Set Associated Data finish length: %08x \n", rd);

    asm volatile("fence");
20400344:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:93
    ROCC_INSTRUCTION_DS(0, rd, c_addr, Enc_Set_C_Tag);
20400348:	fcc42783          	lw	a5,-52(s0)
2040034c:	85be                	mv	a1,a5
2040034e:	2605e50b          	0x2605e50b
20400352:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:94
    asm volatile("fence":: : "memory");
20400356:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:97
    //printf("Set Dec addr: %08x \n", rd);

    asm volatile("fence");
2040035a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:98
    ROCC_INSTRUCTION_DS(0, rd, rd, Enc_Init);
2040035e:	fec42583          	lw	a1,-20(s0)
20400362:	2c05e50b          	0x2c05e50b
20400366:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:99
    asm volatile("fence":: : "memory");
2040036a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:101
    //printf("Finish AEAD Dec %08x \n", rd);
    return rd;
2040036e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../AsconHW/AEAD_HW.h:102
}
20400372:	853e                	mv	a0,a5
20400374:	5472                	lw	s0,60(sp)
20400376:	6121                	addi	sp,sp,64
20400378:	8082                	ret

2040037a <ROUND>:
ROUND():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:47
    }
    return res;

}

static inline void ROUND(ascon_state_t *s, u32 C) {
2040037a:	711d                	addi	sp,sp,-96
2040037c:	cea2                	sw	s0,92(sp)
2040037e:	1080                	addi	s0,sp,96
20400380:	faa42623          	sw	a0,-84(s0)
20400384:	fab42423          	sw	a1,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:50
    ascon_state_t t;
    // addition of round constant
    s->xl[2] ^=C;
20400388:	fac42783          	lw	a5,-84(s0)
2040038c:	4fd8                	lw	a4,28(a5)
2040038e:	fa842783          	lw	a5,-88(s0)
20400392:	8f3d                	xor	a4,a4,a5
20400394:	fac42783          	lw	a5,-84(s0)
20400398:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:54
    // printstate(" round constant", s);
    // substitution layer

    s->xh[0] ^= s->xh[4];
2040039a:	fac42783          	lw	a5,-84(s0)
2040039e:	4398                	lw	a4,0(a5)
204003a0:	fac42783          	lw	a5,-84(s0)
204003a4:	4b9c                	lw	a5,16(a5)
204003a6:	8f3d                	xor	a4,a4,a5
204003a8:	fac42783          	lw	a5,-84(s0)
204003ac:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:55
    s->xl[0] ^= s->xl[4];
204003ae:	fac42783          	lw	a5,-84(s0)
204003b2:	4bd8                	lw	a4,20(a5)
204003b4:	fac42783          	lw	a5,-84(s0)
204003b8:	53dc                	lw	a5,36(a5)
204003ba:	8f3d                	xor	a4,a4,a5
204003bc:	fac42783          	lw	a5,-84(s0)
204003c0:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:57

    s->xh[4] ^= s->xh[3];
204003c2:	fac42783          	lw	a5,-84(s0)
204003c6:	4b98                	lw	a4,16(a5)
204003c8:	fac42783          	lw	a5,-84(s0)
204003cc:	47dc                	lw	a5,12(a5)
204003ce:	8f3d                	xor	a4,a4,a5
204003d0:	fac42783          	lw	a5,-84(s0)
204003d4:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:58
    s->xl[4] ^= s->xl[3];
204003d6:	fac42783          	lw	a5,-84(s0)
204003da:	53d8                	lw	a4,36(a5)
204003dc:	fac42783          	lw	a5,-84(s0)
204003e0:	539c                	lw	a5,32(a5)
204003e2:	8f3d                	xor	a4,a4,a5
204003e4:	fac42783          	lw	a5,-84(s0)
204003e8:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:60

    s->xh[2] ^= s->xh[1];
204003ea:	fac42783          	lw	a5,-84(s0)
204003ee:	4798                	lw	a4,8(a5)
204003f0:	fac42783          	lw	a5,-84(s0)
204003f4:	43dc                	lw	a5,4(a5)
204003f6:	8f3d                	xor	a4,a4,a5
204003f8:	fac42783          	lw	a5,-84(s0)
204003fc:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:61
    s->xl[2] ^= s->xl[1];
204003fe:	fac42783          	lw	a5,-84(s0)
20400402:	4fd8                	lw	a4,28(a5)
20400404:	fac42783          	lw	a5,-84(s0)
20400408:	4f9c                	lw	a5,24(a5)
2040040a:	8f3d                	xor	a4,a4,a5
2040040c:	fac42783          	lw	a5,-84(s0)
20400410:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:63
    // start of keccak s-box
    t.xh[0] = s->xh[0] ^ (~s->xh[1] & s->xh[2]);
20400412:	fac42783          	lw	a5,-84(s0)
20400416:	4398                	lw	a4,0(a5)
20400418:	fac42783          	lw	a5,-84(s0)
2040041c:	43dc                	lw	a5,4(a5)
2040041e:	fff7c693          	not	a3,a5
20400422:	fac42783          	lw	a5,-84(s0)
20400426:	479c                	lw	a5,8(a5)
20400428:	8ff5                	and	a5,a5,a3
2040042a:	8fb9                	xor	a5,a5,a4
2040042c:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:64
    t.xl[0] = s->xl[0] ^ (~s->xl[1] & s->xl[2]);
20400430:	fac42783          	lw	a5,-84(s0)
20400434:	4bd8                	lw	a4,20(a5)
20400436:	fac42783          	lw	a5,-84(s0)
2040043a:	4f9c                	lw	a5,24(a5)
2040043c:	fff7c693          	not	a3,a5
20400440:	fac42783          	lw	a5,-84(s0)
20400444:	4fdc                	lw	a5,28(a5)
20400446:	8ff5                	and	a5,a5,a3
20400448:	8fb9                	xor	a5,a5,a4
2040044a:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:66

    t.xh[1] = s->xh[1] ^ (~s->xh[2] & s->xh[3]);
2040044e:	fac42783          	lw	a5,-84(s0)
20400452:	43d8                	lw	a4,4(a5)
20400454:	fac42783          	lw	a5,-84(s0)
20400458:	479c                	lw	a5,8(a5)
2040045a:	fff7c693          	not	a3,a5
2040045e:	fac42783          	lw	a5,-84(s0)
20400462:	47dc                	lw	a5,12(a5)
20400464:	8ff5                	and	a5,a5,a3
20400466:	8fb9                	xor	a5,a5,a4
20400468:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:67
    t.xl[1] = s->xl[1] ^ (~s->xl[2] & s->xl[3]);
2040046c:	fac42783          	lw	a5,-84(s0)
20400470:	4f98                	lw	a4,24(a5)
20400472:	fac42783          	lw	a5,-84(s0)
20400476:	4fdc                	lw	a5,28(a5)
20400478:	fff7c693          	not	a3,a5
2040047c:	fac42783          	lw	a5,-84(s0)
20400480:	539c                	lw	a5,32(a5)
20400482:	8ff5                	and	a5,a5,a3
20400484:	8fb9                	xor	a5,a5,a4
20400486:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:69

    t.xh[2] = s->xh[2] ^ (~s->xh[3] & s->xh[4]);
2040048a:	fac42783          	lw	a5,-84(s0)
2040048e:	4798                	lw	a4,8(a5)
20400490:	fac42783          	lw	a5,-84(s0)
20400494:	47dc                	lw	a5,12(a5)
20400496:	fff7c693          	not	a3,a5
2040049a:	fac42783          	lw	a5,-84(s0)
2040049e:	4b9c                	lw	a5,16(a5)
204004a0:	8ff5                	and	a5,a5,a3
204004a2:	8fb9                	xor	a5,a5,a4
204004a4:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:70
    t.xl[2] = s->xl[2] ^ (~s->xl[3] & s->xl[4]);
204004a8:	fac42783          	lw	a5,-84(s0)
204004ac:	4fd8                	lw	a4,28(a5)
204004ae:	fac42783          	lw	a5,-84(s0)
204004b2:	539c                	lw	a5,32(a5)
204004b4:	fff7c693          	not	a3,a5
204004b8:	fac42783          	lw	a5,-84(s0)
204004bc:	53dc                	lw	a5,36(a5)
204004be:	8ff5                	and	a5,a5,a3
204004c0:	8fb9                	xor	a5,a5,a4
204004c2:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:72

    t.xh[3] = s->xh[3] ^ (~s->xh[4] & s->xh[0]);
204004c6:	fac42783          	lw	a5,-84(s0)
204004ca:	47d8                	lw	a4,12(a5)
204004cc:	fac42783          	lw	a5,-84(s0)
204004d0:	4b9c                	lw	a5,16(a5)
204004d2:	fff7c693          	not	a3,a5
204004d6:	fac42783          	lw	a5,-84(s0)
204004da:	439c                	lw	a5,0(a5)
204004dc:	8ff5                	and	a5,a5,a3
204004de:	8fb9                	xor	a5,a5,a4
204004e0:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:73
    t.xl[3] = s->xl[3] ^ (~s->xl[4] & s->xl[0]);
204004e4:	fac42783          	lw	a5,-84(s0)
204004e8:	5398                	lw	a4,32(a5)
204004ea:	fac42783          	lw	a5,-84(s0)
204004ee:	53dc                	lw	a5,36(a5)
204004f0:	fff7c693          	not	a3,a5
204004f4:	fac42783          	lw	a5,-84(s0)
204004f8:	4bdc                	lw	a5,20(a5)
204004fa:	8ff5                	and	a5,a5,a3
204004fc:	8fb9                	xor	a5,a5,a4
204004fe:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:75

    t.xh[4] = s->xh[4] ^ (~s->xh[0] & s->xh[1]);
20400502:	fac42783          	lw	a5,-84(s0)
20400506:	4b98                	lw	a4,16(a5)
20400508:	fac42783          	lw	a5,-84(s0)
2040050c:	439c                	lw	a5,0(a5)
2040050e:	fff7c693          	not	a3,a5
20400512:	fac42783          	lw	a5,-84(s0)
20400516:	43dc                	lw	a5,4(a5)
20400518:	8ff5                	and	a5,a5,a3
2040051a:	8fb9                	xor	a5,a5,a4
2040051c:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:76
    t.xl[4] = s->xl[4] ^ (~s->xl[0] & s->xl[1]);
20400520:	fac42783          	lw	a5,-84(s0)
20400524:	53d8                	lw	a4,36(a5)
20400526:	fac42783          	lw	a5,-84(s0)
2040052a:	4bdc                	lw	a5,20(a5)
2040052c:	fff7c693          	not	a3,a5
20400530:	fac42783          	lw	a5,-84(s0)
20400534:	4f9c                	lw	a5,24(a5)
20400536:	8ff5                	and	a5,a5,a3
20400538:	8fb9                	xor	a5,a5,a4
2040053a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:78
    // end of keccak s-box
    t.xh[1] ^= t.xh[0];
2040053e:	fcc42703          	lw	a4,-52(s0)
20400542:	fc842783          	lw	a5,-56(s0)
20400546:	8fb9                	xor	a5,a5,a4
20400548:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:79
    t.xh[0] ^= t.xh[4];
2040054c:	fc842703          	lw	a4,-56(s0)
20400550:	fd842783          	lw	a5,-40(s0)
20400554:	8fb9                	xor	a5,a5,a4
20400556:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:80
    t.xh[3] ^= t.xh[2];
2040055a:	fd442703          	lw	a4,-44(s0)
2040055e:	fd042783          	lw	a5,-48(s0)
20400562:	8fb9                	xor	a5,a5,a4
20400564:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:81
    t.xh[2] = ~t.xh[2];
20400568:	fd042783          	lw	a5,-48(s0)
2040056c:	fff7c793          	not	a5,a5
20400570:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:82
    t.xl[1] ^= t.xl[0];
20400574:	fe042703          	lw	a4,-32(s0)
20400578:	fdc42783          	lw	a5,-36(s0)
2040057c:	8fb9                	xor	a5,a5,a4
2040057e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:83
    t.xl[0] ^= t.xl[4];
20400582:	fdc42703          	lw	a4,-36(s0)
20400586:	fec42783          	lw	a5,-20(s0)
2040058a:	8fb9                	xor	a5,a5,a4
2040058c:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:84
    t.xl[3] ^= t.xl[2];
20400590:	fe842703          	lw	a4,-24(s0)
20400594:	fe442783          	lw	a5,-28(s0)
20400598:	8fb9                	xor	a5,a5,a4
2040059a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:85
    t.xl[2] = ~t.xl[2];
2040059e:	fe442783          	lw	a5,-28(s0)
204005a2:	fff7c793          	not	a5,a5
204005a6:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:91
    // printstate(" substitution layer", &t);
    u64  ror1;
    u64  ror2;
    //linear diffusion layer

    s->xh[0] = t.xh[0] ^ RORH(19,t.xh[0],t.xl[0]) ^ RORH(28,t.xh[0], t.xl[0]);
204005aa:	fc842703          	lw	a4,-56(s0)
204005ae:	fdc42783          	lw	a5,-36(s0)
204005b2:	00d79693          	slli	a3,a5,0xd
204005b6:	fc842783          	lw	a5,-56(s0)
204005ba:	83cd                	srli	a5,a5,0x13
204005bc:	8fd5                	or	a5,a5,a3
204005be:	8f3d                	xor	a4,a4,a5
204005c0:	fdc42783          	lw	a5,-36(s0)
204005c4:	00479693          	slli	a3,a5,0x4
204005c8:	fc842783          	lw	a5,-56(s0)
204005cc:	83f1                	srli	a5,a5,0x1c
204005ce:	8fd5                	or	a5,a5,a3
204005d0:	8f3d                	xor	a4,a4,a5
204005d2:	fac42783          	lw	a5,-84(s0)
204005d6:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:92
    s->xl[0] = t.xl[0] ^ RORL(19,t.xh[0],t.xl[0]) ^ RORL(28,t.xh[0], t.xl[0]);
204005d8:	fdc42703          	lw	a4,-36(s0)
204005dc:	fc842783          	lw	a5,-56(s0)
204005e0:	00d79693          	slli	a3,a5,0xd
204005e4:	fdc42783          	lw	a5,-36(s0)
204005e8:	83cd                	srli	a5,a5,0x13
204005ea:	8fd5                	or	a5,a5,a3
204005ec:	8f3d                	xor	a4,a4,a5
204005ee:	fc842783          	lw	a5,-56(s0)
204005f2:	00479693          	slli	a3,a5,0x4
204005f6:	fdc42783          	lw	a5,-36(s0)
204005fa:	83f1                	srli	a5,a5,0x1c
204005fc:	8fd5                	or	a5,a5,a3
204005fe:	8f3d                	xor	a4,a4,a5
20400600:	fac42783          	lw	a5,-84(s0)
20400604:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:94

    s->xh[1] = t.xh[1] ^ RORH(61,t.xh[1],t.xl[1]) ^ RORH(39,t.xh[1], t.xl[1]);
20400606:	fcc42703          	lw	a4,-52(s0)
2040060a:	fcc42783          	lw	a5,-52(s0)
2040060e:	00379693          	slli	a3,a5,0x3
20400612:	fe042783          	lw	a5,-32(s0)
20400616:	83f5                	srli	a5,a5,0x1d
20400618:	8fd5                	or	a5,a5,a3
2040061a:	8f3d                	xor	a4,a4,a5
2040061c:	fcc42783          	lw	a5,-52(s0)
20400620:	01979693          	slli	a3,a5,0x19
20400624:	fe042783          	lw	a5,-32(s0)
20400628:	839d                	srli	a5,a5,0x7
2040062a:	8fd5                	or	a5,a5,a3
2040062c:	8f3d                	xor	a4,a4,a5
2040062e:	fac42783          	lw	a5,-84(s0)
20400632:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:95
    s->xl[1] = t.xl[1] ^ RORL(61,t.xh[1],t.xl[1]) ^ RORL(39,t.xh[1], t.xl[1]);
20400634:	fe042703          	lw	a4,-32(s0)
20400638:	fe042783          	lw	a5,-32(s0)
2040063c:	00379693          	slli	a3,a5,0x3
20400640:	fcc42783          	lw	a5,-52(s0)
20400644:	83f5                	srli	a5,a5,0x1d
20400646:	8fd5                	or	a5,a5,a3
20400648:	8f3d                	xor	a4,a4,a5
2040064a:	fe042783          	lw	a5,-32(s0)
2040064e:	01979693          	slli	a3,a5,0x19
20400652:	fcc42783          	lw	a5,-52(s0)
20400656:	839d                	srli	a5,a5,0x7
20400658:	8fd5                	or	a5,a5,a3
2040065a:	8f3d                	xor	a4,a4,a5
2040065c:	fac42783          	lw	a5,-84(s0)
20400660:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:97

    s->xh[2] = t.xh[2] ^ RORH(1,t.xh[2],t.xl[2]) ^ RORH(6,t.xh[2], t.xl[2]);
20400662:	fd042703          	lw	a4,-48(s0)
20400666:	fe442783          	lw	a5,-28(s0)
2040066a:	01f79693          	slli	a3,a5,0x1f
2040066e:	fd042783          	lw	a5,-48(s0)
20400672:	8385                	srli	a5,a5,0x1
20400674:	8fd5                	or	a5,a5,a3
20400676:	8f3d                	xor	a4,a4,a5
20400678:	fe442783          	lw	a5,-28(s0)
2040067c:	01a79693          	slli	a3,a5,0x1a
20400680:	fd042783          	lw	a5,-48(s0)
20400684:	8399                	srli	a5,a5,0x6
20400686:	8fd5                	or	a5,a5,a3
20400688:	8f3d                	xor	a4,a4,a5
2040068a:	fac42783          	lw	a5,-84(s0)
2040068e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:98
    s->xl[2] = t.xl[2] ^ RORL(1,t.xh[2],t.xl[2]) ^ RORL(6,t.xh[2], t.xl[2]);
20400690:	fe442703          	lw	a4,-28(s0)
20400694:	fd042783          	lw	a5,-48(s0)
20400698:	01f79693          	slli	a3,a5,0x1f
2040069c:	fe442783          	lw	a5,-28(s0)
204006a0:	8385                	srli	a5,a5,0x1
204006a2:	8fd5                	or	a5,a5,a3
204006a4:	8f3d                	xor	a4,a4,a5
204006a6:	fd042783          	lw	a5,-48(s0)
204006aa:	01a79693          	slli	a3,a5,0x1a
204006ae:	fe442783          	lw	a5,-28(s0)
204006b2:	8399                	srli	a5,a5,0x6
204006b4:	8fd5                	or	a5,a5,a3
204006b6:	8f3d                	xor	a4,a4,a5
204006b8:	fac42783          	lw	a5,-84(s0)
204006bc:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:100

    s->xh[3] = t.xh[3] ^ RORH(10,t.xh[3],t.xl[3]) ^ RORH(17,t.xh[3], t.xl[3]);
204006be:	fd442703          	lw	a4,-44(s0)
204006c2:	fe842783          	lw	a5,-24(s0)
204006c6:	01679693          	slli	a3,a5,0x16
204006ca:	fd442783          	lw	a5,-44(s0)
204006ce:	83a9                	srli	a5,a5,0xa
204006d0:	8fd5                	or	a5,a5,a3
204006d2:	8f3d                	xor	a4,a4,a5
204006d4:	fe842783          	lw	a5,-24(s0)
204006d8:	00f79693          	slli	a3,a5,0xf
204006dc:	fd442783          	lw	a5,-44(s0)
204006e0:	83c5                	srli	a5,a5,0x11
204006e2:	8fd5                	or	a5,a5,a3
204006e4:	8f3d                	xor	a4,a4,a5
204006e6:	fac42783          	lw	a5,-84(s0)
204006ea:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:101
    s->xl[3] = t.xl[3] ^ RORL(10,t.xh[3],t.xl[3]) ^ RORL(17,t.xh[3], t.xl[3]);
204006ec:	fe842703          	lw	a4,-24(s0)
204006f0:	fd442783          	lw	a5,-44(s0)
204006f4:	01679693          	slli	a3,a5,0x16
204006f8:	fe842783          	lw	a5,-24(s0)
204006fc:	83a9                	srli	a5,a5,0xa
204006fe:	8fd5                	or	a5,a5,a3
20400700:	8f3d                	xor	a4,a4,a5
20400702:	fd442783          	lw	a5,-44(s0)
20400706:	00f79693          	slli	a3,a5,0xf
2040070a:	fe842783          	lw	a5,-24(s0)
2040070e:	83c5                	srli	a5,a5,0x11
20400710:	8fd5                	or	a5,a5,a3
20400712:	8f3d                	xor	a4,a4,a5
20400714:	fac42783          	lw	a5,-84(s0)
20400718:	d398                	sw	a4,32(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:103

    s->xh[4] = t.xh[4] ^ RORH(7,t.xh[4],t.xl[4]) ^ RORH(41,t.xh[4], t.xl[4]);
2040071a:	fd842703          	lw	a4,-40(s0)
2040071e:	fec42783          	lw	a5,-20(s0)
20400722:	01979693          	slli	a3,a5,0x19
20400726:	fd842783          	lw	a5,-40(s0)
2040072a:	839d                	srli	a5,a5,0x7
2040072c:	8fd5                	or	a5,a5,a3
2040072e:	8f3d                	xor	a4,a4,a5
20400730:	fd842783          	lw	a5,-40(s0)
20400734:	01779693          	slli	a3,a5,0x17
20400738:	fec42783          	lw	a5,-20(s0)
2040073c:	83a5                	srli	a5,a5,0x9
2040073e:	8fd5                	or	a5,a5,a3
20400740:	8f3d                	xor	a4,a4,a5
20400742:	fac42783          	lw	a5,-84(s0)
20400746:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:104
    s->xl[4] = t.xl[4] ^ RORL(7,t.xh[4],t.xl[4]) ^ RORL(41,t.xh[4], t.xl[4]);
20400748:	fec42703          	lw	a4,-20(s0)
2040074c:	fd842783          	lw	a5,-40(s0)
20400750:	01979693          	slli	a3,a5,0x19
20400754:	fec42783          	lw	a5,-20(s0)
20400758:	839d                	srli	a5,a5,0x7
2040075a:	8fd5                	or	a5,a5,a3
2040075c:	8f3d                	xor	a4,a4,a5
2040075e:	fec42783          	lw	a5,-20(s0)
20400762:	01779693          	slli	a3,a5,0x17
20400766:	fd842783          	lw	a5,-40(s0)
2040076a:	83a5                	srli	a5,a5,0x9
2040076c:	8fd5                	or	a5,a5,a3
2040076e:	8f3d                	xor	a4,a4,a5
20400770:	fac42783          	lw	a5,-84(s0)
20400774:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:107

    //printstate(" round output", s);
}
20400776:	0001                	nop
20400778:	4476                	lw	s0,92(sp)
2040077a:	6125                	addi	sp,sp,96
2040077c:	8082                	ret

2040077e <P12>:
P12():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:110


static inline void P12(ascon_state_t* s) {
2040077e:	1101                	addi	sp,sp,-32
20400780:	ce06                	sw	ra,28(sp)
20400782:	cc22                	sw	s0,24(sp)
20400784:	1000                	addi	s0,sp,32
20400786:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:111
  ROUND(s, 0xf0);
2040078a:	0f000593          	li	a1,240
2040078e:	fec42503          	lw	a0,-20(s0)
20400792:	36e5                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:112
  ROUND(s, 0xe1);
20400794:	0e100593          	li	a1,225
20400798:	fec42503          	lw	a0,-20(s0)
2040079c:	3ef9                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:113
  ROUND(s, 0xd2);
2040079e:	0d200593          	li	a1,210
204007a2:	fec42503          	lw	a0,-20(s0)
204007a6:	3ed1                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:114
  ROUND(s, 0xc3);
204007a8:	0c300593          	li	a1,195
204007ac:	fec42503          	lw	a0,-20(s0)
204007b0:	36e9                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:115
  ROUND(s, 0xb4);
204007b2:	0b400593          	li	a1,180
204007b6:	fec42503          	lw	a0,-20(s0)
204007ba:	36c1                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:116
  ROUND(s, 0xa5);
204007bc:	0a500593          	li	a1,165
204007c0:	fec42503          	lw	a0,-20(s0)
204007c4:	3e5d                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:117
  ROUND(s, 0x96);
204007c6:	09600593          	li	a1,150
204007ca:	fec42503          	lw	a0,-20(s0)
204007ce:	3675                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:118
  ROUND(s, 0x87);
204007d0:	08700593          	li	a1,135
204007d4:	fec42503          	lw	a0,-20(s0)
204007d8:	364d                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:119
  ROUND(s, 0x78);
204007da:	07800593          	li	a1,120
204007de:	fec42503          	lw	a0,-20(s0)
204007e2:	3e61                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:120
  ROUND(s, 0x69);
204007e4:	06900593          	li	a1,105
204007e8:	fec42503          	lw	a0,-20(s0)
204007ec:	3679                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:121
  ROUND(s, 0x5a);
204007ee:	05a00593          	li	a1,90
204007f2:	fec42503          	lw	a0,-20(s0)
204007f6:	3651                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:122
  ROUND(s, 0x4b);
204007f8:	04b00593          	li	a1,75
204007fc:	fec42503          	lw	a0,-20(s0)
20400800:	3ead                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:123
}
20400802:	0001                	nop
20400804:	40f2                	lw	ra,28(sp)
20400806:	4462                	lw	s0,24(sp)
20400808:	6105                	addi	sp,sp,32
2040080a:	8082                	ret

2040080c <P6>:
P6():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:136
  ROUND(s, 0x69);
  ROUND(s, 0x5a);
  ROUND(s, 0x4b);
}

static inline void P6(ascon_state_t* s) {
2040080c:	1101                	addi	sp,sp,-32
2040080e:	ce06                	sw	ra,28(sp)
20400810:	cc22                	sw	s0,24(sp)
20400812:	1000                	addi	s0,sp,32
20400814:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:137
  ROUND(s, 0x96);
20400818:	09600593          	li	a1,150
2040081c:	fec42503          	lw	a0,-20(s0)
20400820:	3ea9                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:138
  ROUND(s, 0x87);
20400822:	08700593          	li	a1,135
20400826:	fec42503          	lw	a0,-20(s0)
2040082a:	3e81                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:139
  ROUND(s, 0x78);
2040082c:	07800593          	li	a1,120
20400830:	fec42503          	lw	a0,-20(s0)
20400834:	3699                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:140
  ROUND(s, 0x69);
20400836:	06900593          	li	a1,105
2040083a:	fec42503          	lw	a0,-20(s0)
2040083e:	3e35                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:141
  ROUND(s, 0x5a);
20400840:	05a00593          	li	a1,90
20400844:	fec42503          	lw	a0,-20(s0)
20400848:	3e0d                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:142
  ROUND(s, 0x4b);
2040084a:	04b00593          	li	a1,75
2040084e:	fec42503          	lw	a0,-20(s0)
20400852:	3625                	jal	2040037a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/round.h:143
}
20400854:	0001                	nop
20400856:	40f2                	lw	ra,28(sp)
20400858:	4462                	lw	s0,24(sp)
2040085a:	6105                	addi	sp,sp,32
2040085c:	8082                	ret

2040085e <printstate>:
printstate():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/util.h:57
        mask.xl = 0x00000000;
    }
    return mask;
}*/

void printstate(const char *text, const ascon_state_t *s, int debug) {
2040085e:	7179                	addi	sp,sp,-48
20400860:	d606                	sw	ra,44(sp)
20400862:	d422                	sw	s0,40(sp)
20400864:	1800                	addi	s0,sp,48
20400866:	fca42e23          	sw	a0,-36(s0)
2040086a:	fcb42c23          	sw	a1,-40(s0)
2040086e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/util.h:58
    if(debug){
20400872:	fd442783          	lw	a5,-44(s0)
20400876:	cfa1                	beqz	a5,204008ce <printstate+0x70>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/util.h:59
    printf("%s\n", text);
20400878:	fdc42503          	lw	a0,-36(s0)
2040087c:	1d7000ef          	jal	ra,20401252 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/util.h:60
    for (int i = 0; i < 5; i++) {
20400880:	fe042623          	sw	zero,-20(s0)
20400884:	a82d                	j	204008be <printstate+0x60>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/util.h:61 (discriminator 3)
        printf("%08X %08X \n", s->xh[i], s->xl[i]);
20400886:	fd842703          	lw	a4,-40(s0)
2040088a:	fec42783          	lw	a5,-20(s0)
2040088e:	078a                	slli	a5,a5,0x2
20400890:	97ba                	add	a5,a5,a4
20400892:	4394                	lw	a3,0(a5)
20400894:	fd842703          	lw	a4,-40(s0)
20400898:	fec42783          	lw	a5,-20(s0)
2040089c:	0791                	addi	a5,a5,4
2040089e:	078a                	slli	a5,a5,0x2
204008a0:	97ba                	add	a5,a5,a4
204008a2:	43dc                	lw	a5,4(a5)
204008a4:	863e                	mv	a2,a5
204008a6:	85b6                	mv	a1,a3
204008a8:	204067b7          	lui	a5,0x20406
204008ac:	e2078513          	addi	a0,a5,-480 # 20405e20 <_exit+0x32>
204008b0:	7d6000ef          	jal	ra,20401086 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/util.h:60 (discriminator 3)
    for (int i = 0; i < 5; i++) {
204008b4:	fec42783          	lw	a5,-20(s0)
204008b8:	0785                	addi	a5,a5,1
204008ba:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/util.h:60 (discriminator 1)
204008be:	fec42703          	lw	a4,-20(s0)
204008c2:	4791                	li	a5,4
204008c4:	fce7d1e3          	bge	a5,a4,20400886 <printstate+0x28>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/util.h:63
    }
    printf("\n");}
204008c8:	4529                	li	a0,10
204008ca:	001000ef          	jal	ra,204010ca <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/util.h:64
}
204008ce:	0001                	nop
204008d0:	50b2                	lw	ra,44(sp)
204008d2:	5422                	lw	s0,40(sp)
204008d4:	6145                	addi	sp,sp,48
204008d6:	8082                	ret

204008d8 <crypto_aead_encrypt>:
crypto_aead_encrypt():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:15
#include "util.h"

#define A_128_IV_H 0x80400c06
#define A_128_IV_L 0x00000000

int crypto_aead_encrypt(u32 *c, u32 *clen, u32 *m, u32 mlen, u32 *ad, u32 adlen, u32 *npub, u32 *k, int debug) {
204008d8:	7119                	addi	sp,sp,-128
204008da:	de86                	sw	ra,124(sp)
204008dc:	dca2                	sw	s0,120(sp)
204008de:	0100                	addi	s0,sp,128
204008e0:	f8a42e23          	sw	a0,-100(s0)
204008e4:	f8b42c23          	sw	a1,-104(s0)
204008e8:	f8c42a23          	sw	a2,-108(s0)
204008ec:	f8d42823          	sw	a3,-112(s0)
204008f0:	f8e42623          	sw	a4,-116(s0)
204008f4:	f8f42423          	sw	a5,-120(s0)
204008f8:	f9042223          	sw	a6,-124(s0)
204008fc:	f9142023          	sw	a7,-128(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:17
    /* set plaintext size */
    *clen = mlen + 16;
20400900:	f9042783          	lw	a5,-112(s0)
20400904:	01078713          	addi	a4,a5,16
20400908:	f9842783          	lw	a5,-104(s0)
2040090c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:21

    /* load key and nonce */
    u64 K0, K1, N0, N1;
    K0.xh = k[0];
2040090e:	f8042783          	lw	a5,-128(s0)
20400912:	439c                	lw	a5,0(a5)
20400914:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:22
    K0.xl = k[1];
20400918:	f8042783          	lw	a5,-128(s0)
2040091c:	43dc                	lw	a5,4(a5)
2040091e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:23
    K1.xh = k[2];
20400922:	f8042783          	lw	a5,-128(s0)
20400926:	479c                	lw	a5,8(a5)
20400928:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:24
    K1.xl = k[3];
2040092c:	f8042783          	lw	a5,-128(s0)
20400930:	47dc                	lw	a5,12(a5)
20400932:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:25
    N0.xh = npub[0];
20400936:	f8442783          	lw	a5,-124(s0)
2040093a:	439c                	lw	a5,0(a5)
2040093c:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:26
    N0.xl = npub[1];
20400940:	f8442783          	lw	a5,-124(s0)
20400944:	43dc                	lw	a5,4(a5)
20400946:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:27
    N1.xh = npub[2];
2040094a:	f8442783          	lw	a5,-124(s0)
2040094e:	479c                	lw	a5,8(a5)
20400950:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:28
    N1.xl = npub[3];
20400954:	f8442783          	lw	a5,-124(s0)
20400958:	47dc                	lw	a5,12(a5)
2040095a:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:32

    /* initialize */
    ascon_state_t s;
    s.xh[0] = A_128_IV_H;
2040095e:	804017b7          	lui	a5,0x80401
20400962:	c0678793          	addi	a5,a5,-1018 # 80400c06 <metal_segment_heap_target_end+0x3fe032>
20400966:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:33
    s.xl[0] = A_128_IV_L;
2040096a:	fa042e23          	sw	zero,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:34
    s.xh[1] = K0.xh;
2040096e:	fe842783          	lw	a5,-24(s0)
20400972:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:35
    s.xl[1] = K0.xl;
20400976:	fec42783          	lw	a5,-20(s0)
2040097a:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:36
    s.xh[2] = K1.xh;
2040097e:	fe042783          	lw	a5,-32(s0)
20400982:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:37
    s.xl[2] = K1.xl;
20400986:	fe442783          	lw	a5,-28(s0)
2040098a:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:38
    s.xh[3] = N0.xh;
2040098e:	fd842783          	lw	a5,-40(s0)
20400992:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:39
    s.xl[3] = N0.xl;
20400996:	fdc42783          	lw	a5,-36(s0)
2040099a:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:40
    s.xh[4] = N1.xh;
2040099e:	fd042783          	lw	a5,-48(s0)
204009a2:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:41
    s.xl[4] = N1.xl;
204009a6:	fd442783          	lw	a5,-44(s0)
204009aa:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:42
    printstate("After init", &s, debug);
204009ae:	fa840793          	addi	a5,s0,-88
204009b2:	4010                	lw	a2,0(s0)
204009b4:	85be                	mv	a1,a5
204009b6:	204067b7          	lui	a5,0x20406
204009ba:	e2c78513          	addi	a0,a5,-468 # 20405e2c <_exit+0x3e>
204009be:	3545                	jal	2040085e <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:43
    P12(&s);
204009c0:	fa840793          	addi	a5,s0,-88
204009c4:	853e                	mv	a0,a5
204009c6:	3b65                	jal	2040077e <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:45

    s.xh[3] ^= K0.xh;
204009c8:	fb442703          	lw	a4,-76(s0)
204009cc:	fe842783          	lw	a5,-24(s0)
204009d0:	8fb9                	xor	a5,a5,a4
204009d2:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:46
    s.xl[3] ^= K0.xl;
204009d6:	fc842703          	lw	a4,-56(s0)
204009da:	fec42783          	lw	a5,-20(s0)
204009de:	8fb9                	xor	a5,a5,a4
204009e0:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:47
    s.xh[4] ^= K1.xh;
204009e4:	fb842703          	lw	a4,-72(s0)
204009e8:	fe042783          	lw	a5,-32(s0)
204009ec:	8fb9                	xor	a5,a5,a4
204009ee:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:48
    s.xl[4] ^= K1.xl;
204009f2:	fcc42703          	lw	a4,-52(s0)
204009f6:	fe442783          	lw	a5,-28(s0)
204009fa:	8fb9                	xor	a5,a5,a4
204009fc:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:49
    printstate("Xor 2 key", &s, debug);
20400a00:	fa840793          	addi	a5,s0,-88
20400a04:	4010                	lw	a2,0(s0)
20400a06:	85be                	mv	a1,a5
20400a08:	204067b7          	lui	a5,0x20406
20400a0c:	e3878513          	addi	a0,a5,-456 # 20405e38 <_exit+0x4a>
20400a10:	35b9                	jal	2040085e <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:51

    if (adlen) {
20400a12:	f8842783          	lw	a5,-120(s0)
20400a16:	16078263          	beqz	a5,20400b7a <crypto_aead_encrypt+0x2a2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:52
        while (adlen >= 8) {
20400a1a:	a8a9                	j	20400a74 <crypto_aead_encrypt+0x19c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:53
            s.xh[0] ^= *ad;
20400a1c:	fa842703          	lw	a4,-88(s0)
20400a20:	f8c42783          	lw	a5,-116(s0)
20400a24:	439c                	lw	a5,0(a5)
20400a26:	8fb9                	xor	a5,a5,a4
20400a28:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:54
            ad++;
20400a2c:	f8c42783          	lw	a5,-116(s0)
20400a30:	0791                	addi	a5,a5,4
20400a32:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:55
            s.xl[0] ^= *ad;
20400a36:	fbc42703          	lw	a4,-68(s0)
20400a3a:	f8c42783          	lw	a5,-116(s0)
20400a3e:	439c                	lw	a5,0(a5)
20400a40:	8fb9                	xor	a5,a5,a4
20400a42:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:56
            ad++;
20400a46:	f8c42783          	lw	a5,-116(s0)
20400a4a:	0791                	addi	a5,a5,4
20400a4c:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:57
            P6(&s);
20400a50:	fa840793          	addi	a5,s0,-88
20400a54:	853e                	mv	a0,a5
20400a56:	3b5d                	jal	2040080c <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:58
            printstate("Absorb AD", &s, debug);
20400a58:	fa840793          	addi	a5,s0,-88
20400a5c:	4010                	lw	a2,0(s0)
20400a5e:	85be                	mv	a1,a5
20400a60:	204067b7          	lui	a5,0x20406
20400a64:	e4478513          	addi	a0,a5,-444 # 20405e44 <_exit+0x56>
20400a68:	3bdd                	jal	2040085e <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:59
            adlen -= 8;
20400a6a:	f8842783          	lw	a5,-120(s0)
20400a6e:	17e1                	addi	a5,a5,-8
20400a70:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:52
        while (adlen >= 8) {
20400a74:	f8842703          	lw	a4,-120(s0)
20400a78:	479d                	li	a5,7
20400a7a:	fae7e1e3          	bltu	a5,a4,20400a1c <crypto_aead_encrypt+0x144>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:61
        }
        s.xh[0] ^= TRUNH(adlen, *ad);
20400a7e:	fa842703          	lw	a4,-88(s0)
20400a82:	f8842683          	lw	a3,-120(s0)
20400a86:	4791                	li	a5,4
20400a88:	00d7f663          	bgeu	a5,a3,20400a94 <crypto_aead_encrypt+0x1bc>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:61 (discriminator 1)
20400a8c:	f8c42783          	lw	a5,-116(s0)
20400a90:	439c                	lw	a5,0(a5)
20400a92:	a025                	j	20400aba <crypto_aead_encrypt+0x1e2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:61 (discriminator 2)
20400a94:	f8842783          	lw	a5,-120(s0)
20400a98:	c385                	beqz	a5,20400ab8 <crypto_aead_encrypt+0x1e0>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:61 (discriminator 4)
20400a9a:	f8c42783          	lw	a5,-116(s0)
20400a9e:	4394                	lw	a3,0(a5)
20400aa0:	f8842603          	lw	a2,-120(s0)
20400aa4:	4781                	li	a5,0
20400aa6:	8f91                	sub	a5,a5,a2
20400aa8:	078e                	slli	a5,a5,0x3
20400aaa:	02078793          	addi	a5,a5,32
20400aae:	567d                	li	a2,-1
20400ab0:	00f617b3          	sll	a5,a2,a5
20400ab4:	8ff5                	and	a5,a5,a3
20400ab6:	a011                	j	20400aba <crypto_aead_encrypt+0x1e2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:61 (discriminator 5)
20400ab8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:61 (discriminator 8)
20400aba:	8fb9                	xor	a5,a5,a4
20400abc:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:62 (discriminator 8)
        ad++;
20400ac0:	f8c42783          	lw	a5,-116(s0)
20400ac4:	0791                	addi	a5,a5,4
20400ac6:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:63 (discriminator 8)
        s.xl[0] ^= TRUNL(adlen, *ad);
20400aca:	fbc42703          	lw	a4,-68(s0)
20400ace:	f8842683          	lw	a3,-120(s0)
20400ad2:	4791                	li	a5,4
20400ad4:	02d7f163          	bgeu	a5,a3,20400af6 <crypto_aead_encrypt+0x21e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:63 (discriminator 1)
20400ad8:	f8c42783          	lw	a5,-116(s0)
20400adc:	4394                	lw	a3,0(a5)
20400ade:	f8842603          	lw	a2,-120(s0)
20400ae2:	4781                	li	a5,0
20400ae4:	8f91                	sub	a5,a5,a2
20400ae6:	078e                	slli	a5,a5,0x3
20400ae8:	04078793          	addi	a5,a5,64
20400aec:	567d                	li	a2,-1
20400aee:	00f617b3          	sll	a5,a2,a5
20400af2:	8ff5                	and	a5,a5,a3
20400af4:	a011                	j	20400af8 <crypto_aead_encrypt+0x220>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:63 (discriminator 2)
20400af6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:63 (discriminator 4)
20400af8:	8fb9                	xor	a5,a5,a4
20400afa:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:65 (discriminator 4)

        s.xh[0] ^= PADH(adlen);
20400afe:	fa842703          	lw	a4,-88(s0)
20400b02:	f8842683          	lw	a3,-120(s0)
20400b06:	478d                	li	a5,3
20400b08:	00d7ea63          	bltu	a5,a3,20400b1c <crypto_aead_encrypt+0x244>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:65 (discriminator 1)
20400b0c:	f8842783          	lw	a5,-120(s0)
20400b10:	078e                	slli	a5,a5,0x3
20400b12:	800006b7          	lui	a3,0x80000
20400b16:	00f6d7b3          	srl	a5,a3,a5
20400b1a:	a011                	j	20400b1e <crypto_aead_encrypt+0x246>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:65 (discriminator 2)
20400b1c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:65 (discriminator 4)
20400b1e:	8fb9                	xor	a5,a5,a4
20400b20:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:66 (discriminator 4)
        s.xl[0] ^= PADL(adlen);
20400b24:	fbc42703          	lw	a4,-68(s0)
20400b28:	f8842683          	lw	a3,-120(s0)
20400b2c:	478d                	li	a5,3
20400b2e:	02d7f563          	bgeu	a5,a3,20400b58 <crypto_aead_encrypt+0x280>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:66 (discriminator 1)
20400b32:	f8842683          	lw	a3,-120(s0)
20400b36:	47a1                	li	a5,8
20400b38:	00f68e63          	beq	a3,a5,20400b54 <crypto_aead_encrypt+0x27c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:66 (discriminator 3)
20400b3c:	f8842683          	lw	a3,-120(s0)
20400b40:	200007b7          	lui	a5,0x20000
20400b44:	17f1                	addi	a5,a5,-4
20400b46:	97b6                	add	a5,a5,a3
20400b48:	078e                	slli	a5,a5,0x3
20400b4a:	800006b7          	lui	a3,0x80000
20400b4e:	00f6d7b3          	srl	a5,a3,a5
20400b52:	a021                	j	20400b5a <crypto_aead_encrypt+0x282>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:66 (discriminator 4)
20400b54:	4781                	li	a5,0
20400b56:	a011                	j	20400b5a <crypto_aead_encrypt+0x282>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:66 (discriminator 2)
20400b58:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:66 (discriminator 8)
20400b5a:	8fb9                	xor	a5,a5,a4
20400b5c:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:67 (discriminator 8)
        printstate("Padded AD", &s, debug);
20400b60:	fa840793          	addi	a5,s0,-88
20400b64:	4010                	lw	a2,0(s0)
20400b66:	85be                	mv	a1,a5
20400b68:	204067b7          	lui	a5,0x20406
20400b6c:	e5078513          	addi	a0,a5,-432 # 20405e50 <_exit+0x62>
20400b70:	31fd                	jal	2040085e <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:68 (discriminator 8)
        P6(&s);
20400b72:	fa840793          	addi	a5,s0,-88
20400b76:	853e                	mv	a0,a5
20400b78:	3951                	jal	2040080c <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:71
    }
    /* domain separation */
    s.xl[4] ^= 1;
20400b7a:	fcc42783          	lw	a5,-52(s0)
20400b7e:	0017c793          	xori	a5,a5,1
20400b82:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:72
    printstate("Domain Separation", &s, debug);
20400b86:	fa840793          	addi	a5,s0,-88
20400b8a:	4010                	lw	a2,0(s0)
20400b8c:	85be                	mv	a1,a5
20400b8e:	204067b7          	lui	a5,0x20406
20400b92:	e5c78513          	addi	a0,a5,-420 # 20405e5c <_exit+0x6e>
20400b96:	31e1                	jal	2040085e <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:74

    while (mlen >= 8) {
20400b98:	a049                	j	20400c1a <crypto_aead_encrypt+0x342>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:75
        s.xh[0] ^= *m;
20400b9a:	fa842703          	lw	a4,-88(s0)
20400b9e:	f9442783          	lw	a5,-108(s0)
20400ba2:	439c                	lw	a5,0(a5)
20400ba4:	8fb9                	xor	a5,a5,a4
20400ba6:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:76
        m++;
20400baa:	f9442783          	lw	a5,-108(s0)
20400bae:	0791                	addi	a5,a5,4
20400bb0:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:77
        s.xl[0] ^= *m;
20400bb4:	fbc42703          	lw	a4,-68(s0)
20400bb8:	f9442783          	lw	a5,-108(s0)
20400bbc:	439c                	lw	a5,0(a5)
20400bbe:	8fb9                	xor	a5,a5,a4
20400bc0:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:78
        m++;
20400bc4:	f9442783          	lw	a5,-108(s0)
20400bc8:	0791                	addi	a5,a5,4
20400bca:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:79
        *c = s.xh[0];
20400bce:	fa842703          	lw	a4,-88(s0)
20400bd2:	f9c42783          	lw	a5,-100(s0)
20400bd6:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:80
        c++;
20400bd8:	f9c42783          	lw	a5,-100(s0)
20400bdc:	0791                	addi	a5,a5,4
20400bde:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:81
        *c = s.xl[0];
20400be2:	fbc42703          	lw	a4,-68(s0)
20400be6:	f9c42783          	lw	a5,-100(s0)
20400bea:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:82
        c++;
20400bec:	f9c42783          	lw	a5,-100(s0)
20400bf0:	0791                	addi	a5,a5,4
20400bf2:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:83
        mlen -= 8;
20400bf6:	f9042783          	lw	a5,-112(s0)
20400bfa:	17e1                	addi	a5,a5,-8
20400bfc:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:84
        printstate("Absorb M", &s, debug);
20400c00:	fa840793          	addi	a5,s0,-88
20400c04:	4010                	lw	a2,0(s0)
20400c06:	85be                	mv	a1,a5
20400c08:	204067b7          	lui	a5,0x20406
20400c0c:	e7078513          	addi	a0,a5,-400 # 20405e70 <_exit+0x82>
20400c10:	31b9                	jal	2040085e <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:85
        P6(&s);
20400c12:	fa840793          	addi	a5,s0,-88
20400c16:	853e                	mv	a0,a5
20400c18:	3ed5                	jal	2040080c <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:74
    while (mlen >= 8) {
20400c1a:	f9042703          	lw	a4,-112(s0)
20400c1e:	479d                	li	a5,7
20400c20:	f6e7ede3          	bltu	a5,a4,20400b9a <crypto_aead_encrypt+0x2c2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:88
    }
    /* final block*/
    s.xh[0] ^= TRUNH(mlen, *m);
20400c24:	fa842703          	lw	a4,-88(s0)
20400c28:	f9042683          	lw	a3,-112(s0)
20400c2c:	4791                	li	a5,4
20400c2e:	00d7f663          	bgeu	a5,a3,20400c3a <crypto_aead_encrypt+0x362>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:88 (discriminator 1)
20400c32:	f9442783          	lw	a5,-108(s0)
20400c36:	439c                	lw	a5,0(a5)
20400c38:	a025                	j	20400c60 <crypto_aead_encrypt+0x388>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:88 (discriminator 2)
20400c3a:	f9042783          	lw	a5,-112(s0)
20400c3e:	c385                	beqz	a5,20400c5e <crypto_aead_encrypt+0x386>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:88 (discriminator 4)
20400c40:	f9442783          	lw	a5,-108(s0)
20400c44:	4394                	lw	a3,0(a5)
20400c46:	f9042603          	lw	a2,-112(s0)
20400c4a:	4781                	li	a5,0
20400c4c:	8f91                	sub	a5,a5,a2
20400c4e:	078e                	slli	a5,a5,0x3
20400c50:	02078793          	addi	a5,a5,32
20400c54:	567d                	li	a2,-1
20400c56:	00f617b3          	sll	a5,a2,a5
20400c5a:	8ff5                	and	a5,a5,a3
20400c5c:	a011                	j	20400c60 <crypto_aead_encrypt+0x388>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:88 (discriminator 5)
20400c5e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:88 (discriminator 8)
20400c60:	8fb9                	xor	a5,a5,a4
20400c62:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:89 (discriminator 8)
    m++;
20400c66:	f9442783          	lw	a5,-108(s0)
20400c6a:	0791                	addi	a5,a5,4
20400c6c:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:90 (discriminator 8)
    s.xl[0] ^= TRUNL(mlen, *m);
20400c70:	fbc42703          	lw	a4,-68(s0)
20400c74:	f9042683          	lw	a3,-112(s0)
20400c78:	4791                	li	a5,4
20400c7a:	02d7f163          	bgeu	a5,a3,20400c9c <crypto_aead_encrypt+0x3c4>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:90 (discriminator 1)
20400c7e:	f9442783          	lw	a5,-108(s0)
20400c82:	4394                	lw	a3,0(a5)
20400c84:	f9042603          	lw	a2,-112(s0)
20400c88:	4781                	li	a5,0
20400c8a:	8f91                	sub	a5,a5,a2
20400c8c:	078e                	slli	a5,a5,0x3
20400c8e:	04078793          	addi	a5,a5,64
20400c92:	567d                	li	a2,-1
20400c94:	00f617b3          	sll	a5,a2,a5
20400c98:	8ff5                	and	a5,a5,a3
20400c9a:	a011                	j	20400c9e <crypto_aead_encrypt+0x3c6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:90 (discriminator 2)
20400c9c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:90 (discriminator 4)
20400c9e:	8fb9                	xor	a5,a5,a4
20400ca0:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:92 (discriminator 4)

    if (mlen) {
20400ca4:	f9042783          	lw	a5,-112(s0)
20400ca8:	cfbd                	beqz	a5,20400d26 <crypto_aead_encrypt+0x44e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:93
        *c = TRUNH(mlen, s.xh[0]);
20400caa:	f9042703          	lw	a4,-112(s0)
20400cae:	4791                	li	a5,4
20400cb0:	00e7f563          	bgeu	a5,a4,20400cba <crypto_aead_encrypt+0x3e2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:93 (discriminator 1)
20400cb4:	fa842783          	lw	a5,-88(s0)
20400cb8:	a01d                	j	20400cde <crypto_aead_encrypt+0x406>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:93 (discriminator 2)
20400cba:	f9042783          	lw	a5,-112(s0)
20400cbe:	cf99                	beqz	a5,20400cdc <crypto_aead_encrypt+0x404>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:93 (discriminator 4)
20400cc0:	fa842703          	lw	a4,-88(s0)
20400cc4:	f9042683          	lw	a3,-112(s0)
20400cc8:	4781                	li	a5,0
20400cca:	8f95                	sub	a5,a5,a3
20400ccc:	078e                	slli	a5,a5,0x3
20400cce:	02078793          	addi	a5,a5,32
20400cd2:	56fd                	li	a3,-1
20400cd4:	00f697b3          	sll	a5,a3,a5
20400cd8:	8ff9                	and	a5,a5,a4
20400cda:	a011                	j	20400cde <crypto_aead_encrypt+0x406>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:93 (discriminator 5)
20400cdc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:93 (discriminator 8)
20400cde:	f9c42703          	lw	a4,-100(s0)
20400ce2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:94 (discriminator 8)
        c++;
20400ce4:	f9c42783          	lw	a5,-100(s0)
20400ce8:	0791                	addi	a5,a5,4
20400cea:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:95 (discriminator 8)
        *c = TRUNL(mlen, s.xl[0]);
20400cee:	f9042703          	lw	a4,-112(s0)
20400cf2:	4791                	li	a5,4
20400cf4:	02e7f063          	bgeu	a5,a4,20400d14 <crypto_aead_encrypt+0x43c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:95 (discriminator 1)
20400cf8:	fbc42703          	lw	a4,-68(s0)
20400cfc:	f9042683          	lw	a3,-112(s0)
20400d00:	4781                	li	a5,0
20400d02:	8f95                	sub	a5,a5,a3
20400d04:	078e                	slli	a5,a5,0x3
20400d06:	04078793          	addi	a5,a5,64
20400d0a:	56fd                	li	a3,-1
20400d0c:	00f697b3          	sll	a5,a3,a5
20400d10:	8ff9                	and	a5,a5,a4
20400d12:	a011                	j	20400d16 <crypto_aead_encrypt+0x43e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:95 (discriminator 2)
20400d14:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:95 (discriminator 4)
20400d16:	f9c42703          	lw	a4,-100(s0)
20400d1a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:96 (discriminator 4)
        c++;
20400d1c:	f9c42783          	lw	a5,-100(s0)
20400d20:	0791                	addi	a5,a5,4
20400d22:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:98
    }
    s.xh[0] ^= PADH(mlen);
20400d26:	fa842703          	lw	a4,-88(s0)
20400d2a:	f9042683          	lw	a3,-112(s0)
20400d2e:	478d                	li	a5,3
20400d30:	00d7ea63          	bltu	a5,a3,20400d44 <crypto_aead_encrypt+0x46c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:98 (discriminator 1)
20400d34:	f9042783          	lw	a5,-112(s0)
20400d38:	078e                	slli	a5,a5,0x3
20400d3a:	800006b7          	lui	a3,0x80000
20400d3e:	00f6d7b3          	srl	a5,a3,a5
20400d42:	a011                	j	20400d46 <crypto_aead_encrypt+0x46e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:98 (discriminator 2)
20400d44:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:98 (discriminator 4)
20400d46:	8fb9                	xor	a5,a5,a4
20400d48:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:99 (discriminator 4)
    s.xl[0] ^= PADL(mlen);
20400d4c:	fbc42703          	lw	a4,-68(s0)
20400d50:	f9042683          	lw	a3,-112(s0)
20400d54:	478d                	li	a5,3
20400d56:	02d7f563          	bgeu	a5,a3,20400d80 <crypto_aead_encrypt+0x4a8>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:99 (discriminator 1)
20400d5a:	f9042683          	lw	a3,-112(s0)
20400d5e:	47a1                	li	a5,8
20400d60:	00f68e63          	beq	a3,a5,20400d7c <crypto_aead_encrypt+0x4a4>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:99 (discriminator 3)
20400d64:	f9042683          	lw	a3,-112(s0)
20400d68:	200007b7          	lui	a5,0x20000
20400d6c:	17f1                	addi	a5,a5,-4
20400d6e:	97b6                	add	a5,a5,a3
20400d70:	078e                	slli	a5,a5,0x3
20400d72:	800006b7          	lui	a3,0x80000
20400d76:	00f6d7b3          	srl	a5,a3,a5
20400d7a:	a021                	j	20400d82 <crypto_aead_encrypt+0x4aa>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:99 (discriminator 4)
20400d7c:	4781                	li	a5,0
20400d7e:	a011                	j	20400d82 <crypto_aead_encrypt+0x4aa>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:99 (discriminator 2)
20400d80:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:99 (discriminator 8)
20400d82:	8fb9                	xor	a5,a5,a4
20400d84:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:100 (discriminator 8)
    printstate("Pad M", &s, debug);
20400d88:	fa840793          	addi	a5,s0,-88
20400d8c:	4010                	lw	a2,0(s0)
20400d8e:	85be                	mv	a1,a5
20400d90:	204067b7          	lui	a5,0x20406
20400d94:	e7c78513          	addi	a0,a5,-388 # 20405e7c <_exit+0x8e>
20400d98:	34d9                	jal	2040085e <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:102 (discriminator 8)
    /* Ending */
    s.xh[1] ^= K0.xh;
20400d9a:	fac42703          	lw	a4,-84(s0)
20400d9e:	fe842783          	lw	a5,-24(s0)
20400da2:	8fb9                	xor	a5,a5,a4
20400da4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:103 (discriminator 8)
    s.xl[1] ^= K0.xl;
20400da8:	fc042703          	lw	a4,-64(s0)
20400dac:	fec42783          	lw	a5,-20(s0)
20400db0:	8fb9                	xor	a5,a5,a4
20400db2:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:104 (discriminator 8)
    s.xh[2] ^= K1.xh;
20400db6:	fb042703          	lw	a4,-80(s0)
20400dba:	fe042783          	lw	a5,-32(s0)
20400dbe:	8fb9                	xor	a5,a5,a4
20400dc0:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:105 (discriminator 8)
    s.xl[2] ^= K1.xl;
20400dc4:	fc442703          	lw	a4,-60(s0)
20400dc8:	fe442783          	lw	a5,-28(s0)
20400dcc:	8fb9                	xor	a5,a5,a4
20400dce:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:106 (discriminator 8)
    printstate("Xor key 1", &s, debug);
20400dd2:	fa840793          	addi	a5,s0,-88
20400dd6:	4010                	lw	a2,0(s0)
20400dd8:	85be                	mv	a1,a5
20400dda:	204067b7          	lui	a5,0x20406
20400dde:	e8478513          	addi	a0,a5,-380 # 20405e84 <_exit+0x96>
20400de2:	3cb5                	jal	2040085e <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:108 (discriminator 8)

    P12(&s);
20400de4:	fa840793          	addi	a5,s0,-88
20400de8:	853e                	mv	a0,a5
20400dea:	3a51                	jal	2040077e <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:109 (discriminator 8)
    s.xh[3] ^= K0.xh;
20400dec:	fb442703          	lw	a4,-76(s0)
20400df0:	fe842783          	lw	a5,-24(s0)
20400df4:	8fb9                	xor	a5,a5,a4
20400df6:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:110 (discriminator 8)
    s.xl[3] ^= K0.xl;
20400dfa:	fc842703          	lw	a4,-56(s0)
20400dfe:	fec42783          	lw	a5,-20(s0)
20400e02:	8fb9                	xor	a5,a5,a4
20400e04:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:111 (discriminator 8)
    s.xh[4] ^= K1.xh;
20400e08:	fb842703          	lw	a4,-72(s0)
20400e0c:	fe042783          	lw	a5,-32(s0)
20400e10:	8fb9                	xor	a5,a5,a4
20400e12:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:112 (discriminator 8)
    s.xl[4] ^= K1.xl;
20400e16:	fcc42703          	lw	a4,-52(s0)
20400e1a:	fe442783          	lw	a5,-28(s0)
20400e1e:	8fb9                	xor	a5,a5,a4
20400e20:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:113 (discriminator 8)
    printstate("Xor key 2", &s, debug);
20400e24:	fa840793          	addi	a5,s0,-88
20400e28:	4010                	lw	a2,0(s0)
20400e2a:	85be                	mv	a1,a5
20400e2c:	204067b7          	lui	a5,0x20406
20400e30:	e9078513          	addi	a0,a5,-368 # 20405e90 <_exit+0xa2>
20400e34:	342d                	jal	2040085e <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:116 (discriminator 8)

    /* TAG*/
    *c = s.xh[3];
20400e36:	fb442703          	lw	a4,-76(s0)
20400e3a:	f9c42783          	lw	a5,-100(s0)
20400e3e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:117 (discriminator 8)
    c++;
20400e40:	f9c42783          	lw	a5,-100(s0)
20400e44:	0791                	addi	a5,a5,4
20400e46:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:118 (discriminator 8)
    *c = s.xl[3];
20400e4a:	fc842703          	lw	a4,-56(s0)
20400e4e:	f9c42783          	lw	a5,-100(s0)
20400e52:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:119 (discriminator 8)
    c++;
20400e54:	f9c42783          	lw	a5,-100(s0)
20400e58:	0791                	addi	a5,a5,4
20400e5a:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:120 (discriminator 8)
    *c = s.xh[4];
20400e5e:	fb842703          	lw	a4,-72(s0)
20400e62:	f9c42783          	lw	a5,-100(s0)
20400e66:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:121 (discriminator 8)
    c++;
20400e68:	f9c42783          	lw	a5,-100(s0)
20400e6c:	0791                	addi	a5,a5,4
20400e6e:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:122 (discriminator 8)
    *c = s.xl[4];
20400e72:	fcc42703          	lw	a4,-52(s0)
20400e76:	f9c42783          	lw	a5,-100(s0)
20400e7a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:123 (discriminator 8)
    return 0;
20400e7c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../Asconref/aead.h:124 (discriminator 8)
}
20400e7e:	853e                	mv	a0,a5
20400e80:	50f6                	lw	ra,124(sp)
20400e82:	5466                	lw	s0,120(sp)
20400e84:	6109                	addi	sp,sp,128
20400e86:	8082                	ret

20400e88 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../RoCCcommon/csr.h:49

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
20400e88:	1101                	addi	sp,sp,-32
20400e8a:	ce22                	sw	s0,28(sp)
20400e8c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../RoCCcommon/csr.h:50
    int tmp = 0;
20400e8e:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../RoCCcommon/csr.h:51
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
20400e92:	b00027f3          	csrr	a5,mcycle
20400e96:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../RoCCcommon/csr.h:52
    return tmp;
20400e9a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/../RoCCcommon/csr.h:53
}
20400e9e:	853e                	mv	a0,a5
20400ea0:	4472                	lw	s0,28(sp)
20400ea2:	6105                	addi	sp,sp,32
20400ea4:	8082                	ret

20400ea6 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:6
#include "../AsconHW/AEAD_HW.h"
#include "../Asconref/aead.h"
#include <stdio.h>
#include "../RoCCcommon/csr.h"

int main(void) {
20400ea6:	7139                	addi	sp,sp,-64
20400ea8:	de06                	sw	ra,60(sp)
20400eaa:	dc22                	sw	s0,56(sp)
20400eac:	0080                	addi	s0,sp,64
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:7
    u32 plain_len = 32;
20400eae:	02000793          	li	a5,32
20400eb2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:8
    u32 asso_len = 32; /// CReo que asignaste a memoria
20400eb6:	02000793          	li	a5,32
20400eba:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:9
    u32 clen = 0;
20400ebe:	fc042a23          	sw	zero,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:10
    u32 plain_len_int = plain_len / 8;
20400ec2:	fec42783          	lw	a5,-20(s0)
20400ec6:	838d                	srli	a5,a5,0x3
20400ec8:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:11
    plain_len_int = (plain_len % 8 == 0) ? plain_len_int*2 : plain_len_int*2 +2;
20400ecc:	fec42783          	lw	a5,-20(s0)
20400ed0:	8b9d                	andi	a5,a5,7
20400ed2:	e789                	bnez	a5,20400edc <main+0x36>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:11 (discriminator 1)
20400ed4:	fe442783          	lw	a5,-28(s0)
20400ed8:	0786                	slli	a5,a5,0x1
20400eda:	a029                	j	20400ee4 <main+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:11 (discriminator 2)
20400edc:	fe442783          	lw	a5,-28(s0)
20400ee0:	0785                	addi	a5,a5,1
20400ee2:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:11 (discriminator 4)
20400ee4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:26 (discriminator 4)
    static u32 Key[4] = {0x11111111, 0x22222222, 0x33333333, 0x44444445};

    static u32 *tag_addr;


    printf("Init Ascon Enc \n");
20400ee8:	204067b7          	lui	a5,0x20406
20400eec:	eb478513          	addi	a0,a5,-332 # 20405eb4 <_exit+0xc6>
20400ef0:	268d                	jal	20401252 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:27 (discriminator 4)
    printf("Ad addr = %08x\n", asso_text);
20400ef2:	800007b7          	lui	a5,0x80000
20400ef6:	00078593          	mv	a1,a5
20400efa:	204067b7          	lui	a5,0x20406
20400efe:	ec478513          	addi	a0,a5,-316 # 20405ec4 <_exit+0xd6>
20400f02:	2251                	jal	20401086 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:28 (discriminator 4)
    printf("Pl addr = %08x\n", plain_text);
20400f04:	800007b7          	lui	a5,0x80000
20400f08:	7d078593          	addi	a1,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400f0c:	204067b7          	lui	a5,0x20406
20400f10:	ed478513          	addi	a0,a5,-300 # 20405ed4 <_exit+0xe6>
20400f14:	2a8d                	jal	20401086 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:29 (discriminator 4)
    printf("Ct addr = %08x\n", cipher_text);
20400f16:	800017b7          	lui	a5,0x80001
20400f1a:	73c78593          	addi	a1,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffeb68>
20400f1e:	204067b7          	lui	a5,0x20406
20400f22:	ee478513          	addi	a0,a5,-284 # 20405ee4 <_exit+0xf6>
20400f26:	2285                	jal	20401086 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:30 (discriminator 4)
    printf("Ke addr = %08x\n", Key);
20400f28:	800017b7          	lui	a5,0x80001
20400f2c:	fa078593          	addi	a1,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffe3cc>
20400f30:	204067b7          	lui	a5,0x20406
20400f34:	ef478513          	addi	a0,a5,-268 # 20405ef4 <_exit+0x106>
20400f38:	22b9                	jal	20401086 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:31 (discriminator 4)
    printf("Np addr = %08x\n", Nonce);
20400f3a:	800017b7          	lui	a5,0x80001
20400f3e:	fb078593          	addi	a1,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffe3dc>
20400f42:	204067b7          	lui	a5,0x20406
20400f46:	f0478513          	addi	a0,a5,-252 # 20405f04 <_exit+0x116>
20400f4a:	2a35                	jal	20401086 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:32 (discriminator 4)
    printf("hash addr = %08x\n", hash);
20400f4c:	01418593          	addi	a1,gp,20 # 80001f1c <hash.2806>
20400f50:	204067b7          	lui	a5,0x20406
20400f54:	f1478513          	addi	a0,a5,-236 # 20405f14 <_exit+0x126>
20400f58:	223d                	jal	20401086 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:34 (discriminator 4)
    unsigned start, end, HWcycles;
    int rd = 0;
20400f5a:	fe042023          	sw	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:36 (discriminator 4)
    // RoCC
    write_csr(mstatus, MSTATUS_XS);
20400f5e:	67e1                	lui	a5,0x18
20400f60:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:44 (discriminator 4)
    HASH(plain_text,plain_len,hash);
    printf(" Finish Hash: %07x \n", rd);
    printC(hash,9,0,1);*/


    printf("Enc HW: \n");
20400f64:	204067b7          	lui	a5,0x20406
20400f68:	f2878513          	addi	a0,a5,-216 # 20405f28 <_exit+0x13a>
20400f6c:	24dd                	jal	20401252 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:45 (discriminator 4)
    start = rdcycle();
20400f6e:	3f29                	jal	20400e88 <rdcycle>
20400f70:	87aa                	mv	a5,a0
20400f72:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:46 (discriminator 4)
    AEAD_ENC(asso_text, asso_len, plain_text, plain_len, cipher_text, Nonce, Key);
20400f76:	800017b7          	lui	a5,0x80001
20400f7a:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffe3cc>
20400f7e:	800017b7          	lui	a5,0x80001
20400f82:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffe3dc>
20400f86:	80001737          	lui	a4,0x80001
20400f8a:	73c70713          	addi	a4,a4,1852 # 8000173c <metal_segment_heap_target_end+0xffffeb68>
20400f8e:	fec42683          	lw	a3,-20(s0)
20400f92:	80000637          	lui	a2,0x80000
20400f96:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400f9a:	fe842583          	lw	a1,-24(s0)
20400f9e:	80000537          	lui	a0,0x80000
20400fa2:	00050513          	mv	a0,a0
20400fa6:	b18ff0ef          	jal	ra,204002be <AEAD_ENC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:47 (discriminator 4)
    end = rdcycle();
20400faa:	3df9                	jal	20400e88 <rdcycle>
20400fac:	87aa                	mv	a5,a0
20400fae:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:48 (discriminator 4)
    printf("Total time HW = %d cycles\n",end-start);
20400fb2:	fd842703          	lw	a4,-40(s0)
20400fb6:	fdc42783          	lw	a5,-36(s0)
20400fba:	40f707b3          	sub	a5,a4,a5
20400fbe:	85be                	mv	a1,a5
20400fc0:	204067b7          	lui	a5,0x20406
20400fc4:	f3478513          	addi	a0,a5,-204 # 20405f34 <_exit+0x146>
20400fc8:	287d                	jal	20401086 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:49 (discriminator 4)
    printC(cipher_text, plain_len_int+4, 1, 1);
20400fca:	fe442783          	lw	a5,-28(s0)
20400fce:	0791                	addi	a5,a5,4
20400fd0:	4685                	li	a3,1
20400fd2:	4605                	li	a2,1
20400fd4:	85be                	mv	a1,a5
20400fd6:	800017b7          	lui	a5,0x80001
20400fda:	73c78513          	addi	a0,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffeb68>
20400fde:	a22ff0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:50 (discriminator 4)
    printf("\nX\n");
20400fe2:	204067b7          	lui	a5,0x20406
20400fe6:	f5078513          	addi	a0,a5,-176 # 20405f50 <_exit+0x162>
20400fea:	24a5                	jal	20401252 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:51 (discriminator 4)
    printf("Enc SW: \n");
20400fec:	204067b7          	lui	a5,0x20406
20400ff0:	f5478513          	addi	a0,a5,-172 # 20405f54 <_exit+0x166>
20400ff4:	2cb9                	jal	20401252 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:52 (discriminator 4)
    start = rdcycle();
20400ff6:	3d49                	jal	20400e88 <rdcycle>
20400ff8:	87aa                	mv	a5,a0
20400ffa:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:53 (discriminator 4)
    crypto_aead_encrypt(cipher_text, &clen,plain_text,plain_len,asso_text,asso_len,Nonce,   Key,0);
20400ffe:	fd440593          	addi	a1,s0,-44
20401002:	c002                	sw	zero,0(sp)
20401004:	800017b7          	lui	a5,0x80001
20401008:	fa078893          	addi	a7,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffe3cc>
2040100c:	800017b7          	lui	a5,0x80001
20401010:	fb078813          	addi	a6,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffe3dc>
20401014:	fe842783          	lw	a5,-24(s0)
20401018:	80000737          	lui	a4,0x80000
2040101c:	00070713          	mv	a4,a4
20401020:	fec42683          	lw	a3,-20(s0)
20401024:	80000637          	lui	a2,0x80000
20401028:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
2040102c:	80001537          	lui	a0,0x80001
20401030:	73c50513          	addi	a0,a0,1852 # 8000173c <metal_segment_heap_target_end+0xffffeb68>
20401034:	8a5ff0ef          	jal	ra,204008d8 <crypto_aead_encrypt>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:54 (discriminator 4)
    end = rdcycle();
20401038:	3d81                	jal	20400e88 <rdcycle>
2040103a:	87aa                	mv	a5,a0
2040103c:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:55 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20401040:	fd842703          	lw	a4,-40(s0)
20401044:	fdc42783          	lw	a5,-36(s0)
20401048:	40f707b3          	sub	a5,a4,a5
2040104c:	85be                	mv	a1,a5
2040104e:	204067b7          	lui	a5,0x20406
20401052:	f6078513          	addi	a0,a5,-160 # 20405f60 <_exit+0x172>
20401056:	2805                	jal	20401086 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:56 (discriminator 4)
    printC(cipher_text, plain_len_int+4, 1, 1);
20401058:	fe442783          	lw	a5,-28(s0)
2040105c:	0791                	addi	a5,a5,4
2040105e:	4685                	li	a3,1
20401060:	4605                	li	a2,1
20401062:	85be                	mv	a1,a5
20401064:	800017b7          	lui	a5,0x80001
20401068:	73c78513          	addi	a0,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffeb68>
2040106c:	994ff0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:57 (discriminator 4)
    printf("\nX\n");
20401070:	204067b7          	lui	a5,0x20406
20401074:	f5078513          	addi	a0,a5,-176 # 20405f50 <_exit+0x162>
20401078:	2ae9                	jal	20401252 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:60 (discriminator 4)


    return 0;
2040107a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconEnc/AsconEnc.c:63 (discriminator 4)


2040107c:	853e                	mv	a0,a5
2040107e:	50f2                	lw	ra,60(sp)
20401080:	5462                	lw	s0,56(sp)
20401082:	6121                	addi	sp,sp,64
20401084:	8082                	ret

20401086 <iprintf>:
printf():
20401086:	7139                	addi	sp,sp,-64
20401088:	da3e                	sw	a5,52(sp)
2040108a:	d22e                	sw	a1,36(sp)
2040108c:	d432                	sw	a2,40(sp)
2040108e:	d636                	sw	a3,44(sp)
20401090:	d83a                	sw	a4,48(sp)
20401092:	dc42                	sw	a6,56(sp)
20401094:	de46                	sw	a7,60(sp)
20401096:	5fc00797          	auipc	a5,0x5fc00
2040109a:	67278793          	addi	a5,a5,1650 # 80001708 <_impure_ptr>
2040109e:	cc22                	sw	s0,24(sp)
204010a0:	4380                	lw	s0,0(a5)
204010a2:	ca26                	sw	s1,20(sp)
204010a4:	ce06                	sw	ra,28(sp)
204010a6:	84aa                	mv	s1,a0
204010a8:	c409                	beqz	s0,204010b2 <iprintf+0x2c>
204010aa:	4c1c                	lw	a5,24(s0)
204010ac:	e399                	bnez	a5,204010b2 <iprintf+0x2c>
204010ae:	8522                	mv	a0,s0
204010b0:	23d5                	jal	20401694 <__sinit>
204010b2:	440c                	lw	a1,8(s0)
204010b4:	1054                	addi	a3,sp,36
204010b6:	8626                	mv	a2,s1
204010b8:	8522                	mv	a0,s0
204010ba:	c636                	sw	a3,12(sp)
204010bc:	2df000ef          	jal	ra,20401b9a <_vfiprintf_r>
204010c0:	40f2                	lw	ra,28(sp)
204010c2:	4462                	lw	s0,24(sp)
204010c4:	44d2                	lw	s1,20(sp)
204010c6:	6121                	addi	sp,sp,64
204010c8:	8082                	ret

204010ca <putchar>:
putchar():
204010ca:	1101                	addi	sp,sp,-32
204010cc:	5fc00797          	auipc	a5,0x5fc00
204010d0:	63c78793          	addi	a5,a5,1596 # 80001708 <_impure_ptr>
204010d4:	cc22                	sw	s0,24(sp)
204010d6:	4380                	lw	s0,0(a5)
204010d8:	ce06                	sw	ra,28(sp)
204010da:	85aa                	mv	a1,a0
204010dc:	c419                	beqz	s0,204010ea <putchar+0x20>
204010de:	4c1c                	lw	a5,24(s0)
204010e0:	e789                	bnez	a5,204010ea <putchar+0x20>
204010e2:	c62a                	sw	a0,12(sp)
204010e4:	8522                	mv	a0,s0
204010e6:	237d                	jal	20401694 <__sinit>
204010e8:	45b2                	lw	a1,12(sp)
204010ea:	4410                	lw	a2,8(s0)
204010ec:	8522                	mv	a0,s0
204010ee:	4462                	lw	s0,24(sp)
204010f0:	40f2                	lw	ra,28(sp)
204010f2:	6105                	addi	sp,sp,32
204010f4:	a009                	j	204010f6 <_putc_r>

204010f6 <_putc_r>:
_putc_r():
204010f6:	1101                	addi	sp,sp,-32
204010f8:	cc22                	sw	s0,24(sp)
204010fa:	ce06                	sw	ra,28(sp)
204010fc:	842a                	mv	s0,a0
204010fe:	c901                	beqz	a0,2040110e <_putc_r+0x18>
20401100:	4d1c                	lw	a5,24(a0)
20401102:	e791                	bnez	a5,2040110e <_putc_r+0x18>
20401104:	c632                	sw	a2,12(sp)
20401106:	c42e                	sw	a1,8(sp)
20401108:	2371                	jal	20401694 <__sinit>
2040110a:	4632                	lw	a2,12(sp)
2040110c:	45a2                	lw	a1,8(sp)
2040110e:	00005797          	auipc	a5,0x5
20401112:	e8e78793          	addi	a5,a5,-370 # 20405f9c <__sf_fake_stdin>
20401116:	02f61563          	bne	a2,a5,20401140 <_putc_r+0x4a>
2040111a:	4050                	lw	a2,4(s0)
2040111c:	461c                	lw	a5,8(a2)
2040111e:	17fd                	addi	a5,a5,-1
20401120:	c61c                	sw	a5,8(a2)
20401122:	0207df63          	bgez	a5,20401160 <_putc_r+0x6a>
20401126:	4e18                	lw	a4,24(a2)
20401128:	00e7c763          	blt	a5,a4,20401136 <_putc_r+0x40>
2040112c:	0ff5f793          	andi	a5,a1,255
20401130:	4729                	li	a4,10
20401132:	02e79763          	bne	a5,a4,20401160 <_putc_r+0x6a>
20401136:	8522                	mv	a0,s0
20401138:	4462                	lw	s0,24(sp)
2040113a:	40f2                	lw	ra,28(sp)
2040113c:	6105                	addi	sp,sp,32
2040113e:	a20d                	j	20401260 <__swbuf_r>
20401140:	00005797          	auipc	a5,0x5
20401144:	e7c78793          	addi	a5,a5,-388 # 20405fbc <__sf_fake_stdout>
20401148:	00f61463          	bne	a2,a5,20401150 <_putc_r+0x5a>
2040114c:	4410                	lw	a2,8(s0)
2040114e:	b7f9                	j	2040111c <_putc_r+0x26>
20401150:	00005797          	auipc	a5,0x5
20401154:	e2c78793          	addi	a5,a5,-468 # 20405f7c <__sf_fake_stderr>
20401158:	fcf612e3          	bne	a2,a5,2040111c <_putc_r+0x26>
2040115c:	4450                	lw	a2,12(s0)
2040115e:	bf7d                	j	2040111c <_putc_r+0x26>
20401160:	421c                	lw	a5,0(a2)
20401162:	0ff5f513          	andi	a0,a1,255
20401166:	00178713          	addi	a4,a5,1
2040116a:	c218                	sw	a4,0(a2)
2040116c:	00b78023          	sb	a1,0(a5)
20401170:	40f2                	lw	ra,28(sp)
20401172:	4462                	lw	s0,24(sp)
20401174:	6105                	addi	sp,sp,32
20401176:	8082                	ret

20401178 <_puts_r>:
_puts_r():
20401178:	1101                	addi	sp,sp,-32
2040117a:	ca26                	sw	s1,20(sp)
2040117c:	c84a                	sw	s2,16(sp)
2040117e:	ce06                	sw	ra,28(sp)
20401180:	cc22                	sw	s0,24(sp)
20401182:	c64e                	sw	s3,12(sp)
20401184:	c452                	sw	s4,8(sp)
20401186:	84aa                	mv	s1,a0
20401188:	892e                	mv	s2,a1
2040118a:	c501                	beqz	a0,20401192 <_puts_r+0x1a>
2040118c:	4d1c                	lw	a5,24(a0)
2040118e:	e391                	bnez	a5,20401192 <_puts_r+0x1a>
20401190:	2311                	jal	20401694 <__sinit>
20401192:	4c9c                	lw	a5,24(s1)
20401194:	4480                	lw	s0,8(s1)
20401196:	e399                	bnez	a5,2040119c <_puts_r+0x24>
20401198:	8526                	mv	a0,s1
2040119a:	29ed                	jal	20401694 <__sinit>
2040119c:	00005797          	auipc	a5,0x5
204011a0:	e0078793          	addi	a5,a5,-512 # 20405f9c <__sf_fake_stdin>
204011a4:	02f41c63          	bne	s0,a5,204011dc <_puts_r+0x64>
204011a8:	40c0                	lw	s0,4(s1)
204011aa:	00c45783          	lhu	a5,12(s0)
204011ae:	8ba1                	andi	a5,a5,8
204011b0:	c7b1                	beqz	a5,204011fc <_puts_r+0x84>
204011b2:	481c                	lw	a5,16(s0)
204011b4:	c7a1                	beqz	a5,204011fc <_puts_r+0x84>
204011b6:	59fd                	li	s3,-1
204011b8:	4a29                	li	s4,10
204011ba:	441c                	lw	a5,8(s0)
204011bc:	00094583          	lbu	a1,0(s2)
204011c0:	17fd                	addi	a5,a5,-1
204011c2:	e9b1                	bnez	a1,20401216 <_puts_r+0x9e>
204011c4:	c41c                	sw	a5,8(s0)
204011c6:	0607de63          	bgez	a5,20401242 <_puts_r+0xca>
204011ca:	8622                	mv	a2,s0
204011cc:	45a9                	li	a1,10
204011ce:	8526                	mv	a0,s1
204011d0:	2841                	jal	20401260 <__swbuf_r>
204011d2:	57fd                	li	a5,-1
204011d4:	02f50863          	beq	a0,a5,20401204 <_puts_r+0x8c>
204011d8:	4529                	li	a0,10
204011da:	a035                	j	20401206 <_puts_r+0x8e>
204011dc:	00005797          	auipc	a5,0x5
204011e0:	de078793          	addi	a5,a5,-544 # 20405fbc <__sf_fake_stdout>
204011e4:	00f41463          	bne	s0,a5,204011ec <_puts_r+0x74>
204011e8:	4480                	lw	s0,8(s1)
204011ea:	b7c1                	j	204011aa <_puts_r+0x32>
204011ec:	00005797          	auipc	a5,0x5
204011f0:	d9078793          	addi	a5,a5,-624 # 20405f7c <__sf_fake_stderr>
204011f4:	faf41be3          	bne	s0,a5,204011aa <_puts_r+0x32>
204011f8:	44c0                	lw	s0,12(s1)
204011fa:	bf45                	j	204011aa <_puts_r+0x32>
204011fc:	85a2                	mv	a1,s0
204011fe:	8526                	mv	a0,s1
20401200:	2205                	jal	20401320 <__swsetup_r>
20401202:	d955                	beqz	a0,204011b6 <_puts_r+0x3e>
20401204:	557d                	li	a0,-1
20401206:	40f2                	lw	ra,28(sp)
20401208:	4462                	lw	s0,24(sp)
2040120a:	44d2                	lw	s1,20(sp)
2040120c:	4942                	lw	s2,16(sp)
2040120e:	49b2                	lw	s3,12(sp)
20401210:	4a22                	lw	s4,8(sp)
20401212:	6105                	addi	sp,sp,32
20401214:	8082                	ret
20401216:	c41c                	sw	a5,8(s0)
20401218:	0905                	addi	s2,s2,1
2040121a:	0007d763          	bgez	a5,20401228 <_puts_r+0xb0>
2040121e:	4c18                	lw	a4,24(s0)
20401220:	00e7cb63          	blt	a5,a4,20401236 <_puts_r+0xbe>
20401224:	01458963          	beq	a1,s4,20401236 <_puts_r+0xbe>
20401228:	401c                	lw	a5,0(s0)
2040122a:	00178713          	addi	a4,a5,1
2040122e:	c018                	sw	a4,0(s0)
20401230:	00b78023          	sb	a1,0(a5)
20401234:	b759                	j	204011ba <_puts_r+0x42>
20401236:	8622                	mv	a2,s0
20401238:	8526                	mv	a0,s1
2040123a:	201d                	jal	20401260 <__swbuf_r>
2040123c:	f7351fe3          	bne	a0,s3,204011ba <_puts_r+0x42>
20401240:	b7d1                	j	20401204 <_puts_r+0x8c>
20401242:	401c                	lw	a5,0(s0)
20401244:	00178713          	addi	a4,a5,1
20401248:	c018                	sw	a4,0(s0)
2040124a:	4729                	li	a4,10
2040124c:	00e78023          	sb	a4,0(a5)
20401250:	b761                	j	204011d8 <_puts_r+0x60>

20401252 <puts>:
puts():
20401252:	5fc00797          	auipc	a5,0x5fc00
20401256:	4b678793          	addi	a5,a5,1206 # 80001708 <_impure_ptr>
2040125a:	85aa                	mv	a1,a0
2040125c:	4388                	lw	a0,0(a5)
2040125e:	bf29                	j	20401178 <_puts_r>

20401260 <__swbuf_r>:
__swbuf_r():
20401260:	1101                	addi	sp,sp,-32
20401262:	cc22                	sw	s0,24(sp)
20401264:	ca26                	sw	s1,20(sp)
20401266:	c84a                	sw	s2,16(sp)
20401268:	ce06                	sw	ra,28(sp)
2040126a:	c64e                	sw	s3,12(sp)
2040126c:	84aa                	mv	s1,a0
2040126e:	892e                	mv	s2,a1
20401270:	8432                	mv	s0,a2
20401272:	c501                	beqz	a0,2040127a <__swbuf_r+0x1a>
20401274:	4d1c                	lw	a5,24(a0)
20401276:	e391                	bnez	a5,2040127a <__swbuf_r+0x1a>
20401278:	2931                	jal	20401694 <__sinit>
2040127a:	00005797          	auipc	a5,0x5
2040127e:	d2278793          	addi	a5,a5,-734 # 20405f9c <__sf_fake_stdin>
20401282:	06f41963          	bne	s0,a5,204012f4 <__swbuf_r+0x94>
20401286:	40c0                	lw	s0,4(s1)
20401288:	4c1c                	lw	a5,24(s0)
2040128a:	c41c                	sw	a5,8(s0)
2040128c:	00c45783          	lhu	a5,12(s0)
20401290:	8ba1                	andi	a5,a5,8
20401292:	c3c9                	beqz	a5,20401314 <__swbuf_r+0xb4>
20401294:	481c                	lw	a5,16(s0)
20401296:	cfbd                	beqz	a5,20401314 <__swbuf_r+0xb4>
20401298:	481c                	lw	a5,16(s0)
2040129a:	4008                	lw	a0,0(s0)
2040129c:	0ff97993          	andi	s3,s2,255
204012a0:	0ff97913          	andi	s2,s2,255
204012a4:	8d1d                	sub	a0,a0,a5
204012a6:	485c                	lw	a5,20(s0)
204012a8:	00f54663          	blt	a0,a5,204012b4 <__swbuf_r+0x54>
204012ac:	85a2                	mv	a1,s0
204012ae:	8526                	mv	a0,s1
204012b0:	24e9                	jal	2040157a <_fflush_r>
204012b2:	e52d                	bnez	a0,2040131c <__swbuf_r+0xbc>
204012b4:	441c                	lw	a5,8(s0)
204012b6:	0505                	addi	a0,a0,1
204012b8:	17fd                	addi	a5,a5,-1
204012ba:	c41c                	sw	a5,8(s0)
204012bc:	401c                	lw	a5,0(s0)
204012be:	00178713          	addi	a4,a5,1
204012c2:	c018                	sw	a4,0(s0)
204012c4:	01378023          	sb	s3,0(a5)
204012c8:	485c                	lw	a5,20(s0)
204012ca:	00a78963          	beq	a5,a0,204012dc <__swbuf_r+0x7c>
204012ce:	00c45783          	lhu	a5,12(s0)
204012d2:	8b85                	andi	a5,a5,1
204012d4:	cb81                	beqz	a5,204012e4 <__swbuf_r+0x84>
204012d6:	47a9                	li	a5,10
204012d8:	00f91663          	bne	s2,a5,204012e4 <__swbuf_r+0x84>
204012dc:	85a2                	mv	a1,s0
204012de:	8526                	mv	a0,s1
204012e0:	2c69                	jal	2040157a <_fflush_r>
204012e2:	ed0d                	bnez	a0,2040131c <__swbuf_r+0xbc>
204012e4:	40f2                	lw	ra,28(sp)
204012e6:	4462                	lw	s0,24(sp)
204012e8:	854a                	mv	a0,s2
204012ea:	44d2                	lw	s1,20(sp)
204012ec:	4942                	lw	s2,16(sp)
204012ee:	49b2                	lw	s3,12(sp)
204012f0:	6105                	addi	sp,sp,32
204012f2:	8082                	ret
204012f4:	00005797          	auipc	a5,0x5
204012f8:	cc878793          	addi	a5,a5,-824 # 20405fbc <__sf_fake_stdout>
204012fc:	00f41463          	bne	s0,a5,20401304 <__swbuf_r+0xa4>
20401300:	4480                	lw	s0,8(s1)
20401302:	b759                	j	20401288 <__swbuf_r+0x28>
20401304:	00005797          	auipc	a5,0x5
20401308:	c7878793          	addi	a5,a5,-904 # 20405f7c <__sf_fake_stderr>
2040130c:	f6f41ee3          	bne	s0,a5,20401288 <__swbuf_r+0x28>
20401310:	44c0                	lw	s0,12(s1)
20401312:	bf9d                	j	20401288 <__swbuf_r+0x28>
20401314:	85a2                	mv	a1,s0
20401316:	8526                	mv	a0,s1
20401318:	2021                	jal	20401320 <__swsetup_r>
2040131a:	dd3d                	beqz	a0,20401298 <__swbuf_r+0x38>
2040131c:	597d                	li	s2,-1
2040131e:	b7d9                	j	204012e4 <__swbuf_r+0x84>

20401320 <__swsetup_r>:
__swsetup_r():
20401320:	1141                	addi	sp,sp,-16
20401322:	5fc00797          	auipc	a5,0x5fc00
20401326:	3e678793          	addi	a5,a5,998 # 80001708 <_impure_ptr>
2040132a:	c226                	sw	s1,4(sp)
2040132c:	4384                	lw	s1,0(a5)
2040132e:	c422                	sw	s0,8(sp)
20401330:	c04a                	sw	s2,0(sp)
20401332:	c606                	sw	ra,12(sp)
20401334:	892a                	mv	s2,a0
20401336:	842e                	mv	s0,a1
20401338:	c489                	beqz	s1,20401342 <__swsetup_r+0x22>
2040133a:	4c9c                	lw	a5,24(s1)
2040133c:	e399                	bnez	a5,20401342 <__swsetup_r+0x22>
2040133e:	8526                	mv	a0,s1
20401340:	2e91                	jal	20401694 <__sinit>
20401342:	00005797          	auipc	a5,0x5
20401346:	c5a78793          	addi	a5,a5,-934 # 20405f9c <__sf_fake_stdin>
2040134a:	02f41c63          	bne	s0,a5,20401382 <__swsetup_r+0x62>
2040134e:	40c0                	lw	s0,4(s1)
20401350:	00c41703          	lh	a4,12(s0)
20401354:	01071793          	slli	a5,a4,0x10
20401358:	83c1                	srli	a5,a5,0x10
2040135a:	0087f693          	andi	a3,a5,8
2040135e:	eeb5                	bnez	a3,204013da <__swsetup_r+0xba>
20401360:	0107f693          	andi	a3,a5,16
20401364:	ee9d                	bnez	a3,204013a2 <__swsetup_r+0x82>
20401366:	47a5                	li	a5,9
20401368:	00f92023          	sw	a5,0(s2)
2040136c:	04076713          	ori	a4,a4,64
20401370:	00e41623          	sh	a4,12(s0)
20401374:	557d                	li	a0,-1
20401376:	40b2                	lw	ra,12(sp)
20401378:	4422                	lw	s0,8(sp)
2040137a:	4492                	lw	s1,4(sp)
2040137c:	4902                	lw	s2,0(sp)
2040137e:	0141                	addi	sp,sp,16
20401380:	8082                	ret
20401382:	00005797          	auipc	a5,0x5
20401386:	c3a78793          	addi	a5,a5,-966 # 20405fbc <__sf_fake_stdout>
2040138a:	00f41463          	bne	s0,a5,20401392 <__swsetup_r+0x72>
2040138e:	4480                	lw	s0,8(s1)
20401390:	b7c1                	j	20401350 <__swsetup_r+0x30>
20401392:	00005797          	auipc	a5,0x5
20401396:	bea78793          	addi	a5,a5,-1046 # 20405f7c <__sf_fake_stderr>
2040139a:	faf41be3          	bne	s0,a5,20401350 <__swsetup_r+0x30>
2040139e:	44c0                	lw	s0,12(s1)
204013a0:	bf45                	j	20401350 <__swsetup_r+0x30>
204013a2:	8b91                	andi	a5,a5,4
204013a4:	c78d                	beqz	a5,204013ce <__swsetup_r+0xae>
204013a6:	584c                	lw	a1,52(s0)
204013a8:	c989                	beqz	a1,204013ba <__swsetup_r+0x9a>
204013aa:	04440793          	addi	a5,s0,68
204013ae:	00f58463          	beq	a1,a5,204013b6 <__swsetup_r+0x96>
204013b2:	854a                	mv	a0,s2
204013b4:	2bc5                	jal	204019a4 <_free_r>
204013b6:	02042a23          	sw	zero,52(s0)
204013ba:	00c45783          	lhu	a5,12(s0)
204013be:	00042223          	sw	zero,4(s0)
204013c2:	fdb7f793          	andi	a5,a5,-37
204013c6:	00f41623          	sh	a5,12(s0)
204013ca:	481c                	lw	a5,16(s0)
204013cc:	c01c                	sw	a5,0(s0)
204013ce:	00c45783          	lhu	a5,12(s0)
204013d2:	0087e793          	ori	a5,a5,8
204013d6:	00f41623          	sh	a5,12(s0)
204013da:	481c                	lw	a5,16(s0)
204013dc:	ef81                	bnez	a5,204013f4 <__swsetup_r+0xd4>
204013de:	00c45783          	lhu	a5,12(s0)
204013e2:	20000713          	li	a4,512
204013e6:	2807f793          	andi	a5,a5,640
204013ea:	00e78563          	beq	a5,a4,204013f4 <__swsetup_r+0xd4>
204013ee:	85a2                	mv	a1,s0
204013f0:	854a                	mv	a0,s2
204013f2:	21bd                	jal	20401860 <__smakebuf_r>
204013f4:	00c45783          	lhu	a5,12(s0)
204013f8:	0017f713          	andi	a4,a5,1
204013fc:	c705                	beqz	a4,20401424 <__swsetup_r+0x104>
204013fe:	485c                	lw	a5,20(s0)
20401400:	00042423          	sw	zero,8(s0)
20401404:	40f007b3          	neg	a5,a5
20401408:	cc1c                	sw	a5,24(s0)
2040140a:	481c                	lw	a5,16(s0)
2040140c:	4501                	li	a0,0
2040140e:	f7a5                	bnez	a5,20401376 <__swsetup_r+0x56>
20401410:	00c41783          	lh	a5,12(s0)
20401414:	0807f713          	andi	a4,a5,128
20401418:	df39                	beqz	a4,20401376 <__swsetup_r+0x56>
2040141a:	0407e793          	ori	a5,a5,64
2040141e:	00f41623          	sh	a5,12(s0)
20401422:	bf89                	j	20401374 <__swsetup_r+0x54>
20401424:	8b89                	andi	a5,a5,2
20401426:	4701                	li	a4,0
20401428:	e391                	bnez	a5,2040142c <__swsetup_r+0x10c>
2040142a:	4858                	lw	a4,20(s0)
2040142c:	c418                	sw	a4,8(s0)
2040142e:	bff1                	j	2040140a <__swsetup_r+0xea>

20401430 <__sflush_r>:
__sflush_r():
20401430:	00c5d783          	lhu	a5,12(a1)
20401434:	1101                	addi	sp,sp,-32
20401436:	cc22                	sw	s0,24(sp)
20401438:	ca26                	sw	s1,20(sp)
2040143a:	ce06                	sw	ra,28(sp)
2040143c:	c84a                	sw	s2,16(sp)
2040143e:	c64e                	sw	s3,12(sp)
20401440:	0087f713          	andi	a4,a5,8
20401444:	84aa                	mv	s1,a0
20401446:	842e                	mv	s0,a1
20401448:	e765                	bnez	a4,20401530 <__sflush_r+0x100>
2040144a:	41d8                	lw	a4,4(a1)
2040144c:	00e04763          	bgtz	a4,2040145a <__sflush_r+0x2a>
20401450:	41b8                	lw	a4,64(a1)
20401452:	00e04463          	bgtz	a4,2040145a <__sflush_r+0x2a>
20401456:	4501                	li	a0,0
20401458:	a0c1                	j	20401518 <__sflush_r+0xe8>
2040145a:	5458                	lw	a4,44(s0)
2040145c:	df6d                	beqz	a4,20401456 <__sflush_r+0x26>
2040145e:	0004a903          	lw	s2,0(s1)
20401462:	01379693          	slli	a3,a5,0x13
20401466:	0004a023          	sw	zero,0(s1)
2040146a:	0606de63          	bgez	a3,204014e6 <__sflush_r+0xb6>
2040146e:	4868                	lw	a0,84(s0)
20401470:	00c45783          	lhu	a5,12(s0)
20401474:	8b91                	andi	a5,a5,4
20401476:	c799                	beqz	a5,20401484 <__sflush_r+0x54>
20401478:	405c                	lw	a5,4(s0)
2040147a:	8d1d                	sub	a0,a0,a5
2040147c:	585c                	lw	a5,52(s0)
2040147e:	c399                	beqz	a5,20401484 <__sflush_r+0x54>
20401480:	403c                	lw	a5,64(s0)
20401482:	8d1d                	sub	a0,a0,a5
20401484:	545c                	lw	a5,44(s0)
20401486:	500c                	lw	a1,32(s0)
20401488:	862a                	mv	a2,a0
2040148a:	4681                	li	a3,0
2040148c:	8526                	mv	a0,s1
2040148e:	9782                	jalr	a5
20401490:	57fd                	li	a5,-1
20401492:	00c45703          	lhu	a4,12(s0)
20401496:	00f51d63          	bne	a0,a5,204014b0 <__sflush_r+0x80>
2040149a:	4094                	lw	a3,0(s1)
2040149c:	47f5                	li	a5,29
2040149e:	08d7e463          	bltu	a5,a3,20401526 <__sflush_r+0xf6>
204014a2:	204007b7          	lui	a5,0x20400
204014a6:	0785                	addi	a5,a5,1
204014a8:	00d7d7b3          	srl	a5,a5,a3
204014ac:	8b85                	andi	a5,a5,1
204014ae:	cfa5                	beqz	a5,20401526 <__sflush_r+0xf6>
204014b0:	481c                	lw	a5,16(s0)
204014b2:	00042223          	sw	zero,4(s0)
204014b6:	c01c                	sw	a5,0(s0)
204014b8:	01371793          	slli	a5,a4,0x13
204014bc:	0007d863          	bgez	a5,204014cc <__sflush_r+0x9c>
204014c0:	57fd                	li	a5,-1
204014c2:	00f51463          	bne	a0,a5,204014ca <__sflush_r+0x9a>
204014c6:	409c                	lw	a5,0(s1)
204014c8:	e391                	bnez	a5,204014cc <__sflush_r+0x9c>
204014ca:	c868                	sw	a0,84(s0)
204014cc:	584c                	lw	a1,52(s0)
204014ce:	0124a023          	sw	s2,0(s1)
204014d2:	d1d1                	beqz	a1,20401456 <__sflush_r+0x26>
204014d4:	04440793          	addi	a5,s0,68
204014d8:	00f58463          	beq	a1,a5,204014e0 <__sflush_r+0xb0>
204014dc:	8526                	mv	a0,s1
204014de:	21d9                	jal	204019a4 <_free_r>
204014e0:	02042a23          	sw	zero,52(s0)
204014e4:	bf8d                	j	20401456 <__sflush_r+0x26>
204014e6:	500c                	lw	a1,32(s0)
204014e8:	4685                	li	a3,1
204014ea:	4601                	li	a2,0
204014ec:	8526                	mv	a0,s1
204014ee:	9702                	jalr	a4
204014f0:	57fd                	li	a5,-1
204014f2:	f6f51fe3          	bne	a0,a5,20401470 <__sflush_r+0x40>
204014f6:	409c                	lw	a5,0(s1)
204014f8:	dfa5                	beqz	a5,20401470 <__sflush_r+0x40>
204014fa:	4775                	li	a4,29
204014fc:	00e78563          	beq	a5,a4,20401506 <__sflush_r+0xd6>
20401500:	4759                	li	a4,22
20401502:	00e79563          	bne	a5,a4,2040150c <__sflush_r+0xdc>
20401506:	0124a023          	sw	s2,0(s1)
2040150a:	b7b1                	j	20401456 <__sflush_r+0x26>
2040150c:	00c45783          	lhu	a5,12(s0)
20401510:	0407e793          	ori	a5,a5,64
20401514:	00f41623          	sh	a5,12(s0)
20401518:	40f2                	lw	ra,28(sp)
2040151a:	4462                	lw	s0,24(sp)
2040151c:	44d2                	lw	s1,20(sp)
2040151e:	4942                	lw	s2,16(sp)
20401520:	49b2                	lw	s3,12(sp)
20401522:	6105                	addi	sp,sp,32
20401524:	8082                	ret
20401526:	04076713          	ori	a4,a4,64
2040152a:	00e41623          	sh	a4,12(s0)
2040152e:	b7ed                	j	20401518 <__sflush_r+0xe8>
20401530:	0105a983          	lw	s3,16(a1)
20401534:	f20981e3          	beqz	s3,20401456 <__sflush_r+0x26>
20401538:	0005a903          	lw	s2,0(a1)
2040153c:	8b8d                	andi	a5,a5,3
2040153e:	0135a023          	sw	s3,0(a1)
20401542:	41390933          	sub	s2,s2,s3
20401546:	4701                	li	a4,0
20401548:	e391                	bnez	a5,2040154c <__sflush_r+0x11c>
2040154a:	49d8                	lw	a4,20(a1)
2040154c:	c418                	sw	a4,8(s0)
2040154e:	f12054e3          	blez	s2,20401456 <__sflush_r+0x26>
20401552:	541c                	lw	a5,40(s0)
20401554:	500c                	lw	a1,32(s0)
20401556:	86ca                	mv	a3,s2
20401558:	864e                	mv	a2,s3
2040155a:	8526                	mv	a0,s1
2040155c:	9782                	jalr	a5
2040155e:	00a04a63          	bgtz	a0,20401572 <__sflush_r+0x142>
20401562:	00c45783          	lhu	a5,12(s0)
20401566:	557d                	li	a0,-1
20401568:	0407e793          	ori	a5,a5,64
2040156c:	00f41623          	sh	a5,12(s0)
20401570:	b765                	j	20401518 <__sflush_r+0xe8>
20401572:	99aa                	add	s3,s3,a0
20401574:	40a90933          	sub	s2,s2,a0
20401578:	bfd9                	j	2040154e <__sflush_r+0x11e>

2040157a <_fflush_r>:
_fflush_r():
2040157a:	499c                	lw	a5,16(a1)
2040157c:	cfb9                	beqz	a5,204015da <_fflush_r+0x60>
2040157e:	1101                	addi	sp,sp,-32
20401580:	cc22                	sw	s0,24(sp)
20401582:	ce06                	sw	ra,28(sp)
20401584:	842a                	mv	s0,a0
20401586:	c511                	beqz	a0,20401592 <_fflush_r+0x18>
20401588:	4d1c                	lw	a5,24(a0)
2040158a:	e781                	bnez	a5,20401592 <_fflush_r+0x18>
2040158c:	c62e                	sw	a1,12(sp)
2040158e:	2219                	jal	20401694 <__sinit>
20401590:	45b2                	lw	a1,12(sp)
20401592:	00005797          	auipc	a5,0x5
20401596:	a0a78793          	addi	a5,a5,-1526 # 20405f9c <__sf_fake_stdin>
2040159a:	00f59b63          	bne	a1,a5,204015b0 <_fflush_r+0x36>
2040159e:	404c                	lw	a1,4(s0)
204015a0:	00c59783          	lh	a5,12(a1)
204015a4:	c795                	beqz	a5,204015d0 <_fflush_r+0x56>
204015a6:	8522                	mv	a0,s0
204015a8:	4462                	lw	s0,24(sp)
204015aa:	40f2                	lw	ra,28(sp)
204015ac:	6105                	addi	sp,sp,32
204015ae:	b549                	j	20401430 <__sflush_r>
204015b0:	00005797          	auipc	a5,0x5
204015b4:	a0c78793          	addi	a5,a5,-1524 # 20405fbc <__sf_fake_stdout>
204015b8:	00f59463          	bne	a1,a5,204015c0 <_fflush_r+0x46>
204015bc:	440c                	lw	a1,8(s0)
204015be:	b7cd                	j	204015a0 <_fflush_r+0x26>
204015c0:	00005797          	auipc	a5,0x5
204015c4:	9bc78793          	addi	a5,a5,-1604 # 20405f7c <__sf_fake_stderr>
204015c8:	fcf59ce3          	bne	a1,a5,204015a0 <_fflush_r+0x26>
204015cc:	444c                	lw	a1,12(s0)
204015ce:	bfc9                	j	204015a0 <_fflush_r+0x26>
204015d0:	40f2                	lw	ra,28(sp)
204015d2:	4462                	lw	s0,24(sp)
204015d4:	4501                	li	a0,0
204015d6:	6105                	addi	sp,sp,32
204015d8:	8082                	ret
204015da:	4501                	li	a0,0
204015dc:	8082                	ret

204015de <std>:
std():
204015de:	1141                	addi	sp,sp,-16
204015e0:	c422                	sw	s0,8(sp)
204015e2:	c606                	sw	ra,12(sp)
204015e4:	842a                	mv	s0,a0
204015e6:	00b51623          	sh	a1,12(a0)
204015ea:	00c51723          	sh	a2,14(a0)
204015ee:	00052023          	sw	zero,0(a0)
204015f2:	00052223          	sw	zero,4(a0)
204015f6:	00052423          	sw	zero,8(a0)
204015fa:	06052223          	sw	zero,100(a0)
204015fe:	00052823          	sw	zero,16(a0)
20401602:	00052a23          	sw	zero,20(a0)
20401606:	00052c23          	sw	zero,24(a0)
2040160a:	4621                	li	a2,8
2040160c:	4581                	li	a1,0
2040160e:	05c50513          	addi	a0,a0,92
20401612:	24ed                	jal	204018fc <memset>
20401614:	00001797          	auipc	a5,0x1
20401618:	84678793          	addi	a5,a5,-1978 # 20401e5a <__sread>
2040161c:	d05c                	sw	a5,36(s0)
2040161e:	00001797          	auipc	a5,0x1
20401622:	86c78793          	addi	a5,a5,-1940 # 20401e8a <__swrite>
20401626:	d41c                	sw	a5,40(s0)
20401628:	00001797          	auipc	a5,0x1
2040162c:	8b078793          	addi	a5,a5,-1872 # 20401ed8 <__sseek>
20401630:	d45c                	sw	a5,44(s0)
20401632:	00001797          	auipc	a5,0x1
20401636:	8dc78793          	addi	a5,a5,-1828 # 20401f0e <__sclose>
2040163a:	d000                	sw	s0,32(s0)
2040163c:	d81c                	sw	a5,48(s0)
2040163e:	40b2                	lw	ra,12(sp)
20401640:	4422                	lw	s0,8(sp)
20401642:	0141                	addi	sp,sp,16
20401644:	8082                	ret

20401646 <_cleanup_r>:
_cleanup_r():
20401646:	00000597          	auipc	a1,0x0
2040164a:	f3458593          	addi	a1,a1,-204 # 2040157a <_fflush_r>
2040164e:	a2b9                	j	2040179c <_fwalk_reent>

20401650 <__sfmoreglue>:
__sfmoreglue():
20401650:	1141                	addi	sp,sp,-16
20401652:	c226                	sw	s1,4(sp)
20401654:	06800613          	li	a2,104
20401658:	fff58493          	addi	s1,a1,-1
2040165c:	02c484b3          	mul	s1,s1,a2
20401660:	c04a                	sw	s2,0(sp)
20401662:	892e                	mv	s2,a1
20401664:	c422                	sw	s0,8(sp)
20401666:	c606                	sw	ra,12(sp)
20401668:	07448593          	addi	a1,s1,116
2040166c:	26d5                	jal	20401a50 <_malloc_r>
2040166e:	842a                	mv	s0,a0
20401670:	c919                	beqz	a0,20401686 <__sfmoreglue+0x36>
20401672:	00052023          	sw	zero,0(a0)
20401676:	01252223          	sw	s2,4(a0)
2040167a:	0531                	addi	a0,a0,12
2040167c:	c408                	sw	a0,8(s0)
2040167e:	06848613          	addi	a2,s1,104
20401682:	4581                	li	a1,0
20401684:	2ca5                	jal	204018fc <memset>
20401686:	8522                	mv	a0,s0
20401688:	40b2                	lw	ra,12(sp)
2040168a:	4422                	lw	s0,8(sp)
2040168c:	4492                	lw	s1,4(sp)
2040168e:	4902                	lw	s2,0(sp)
20401690:	0141                	addi	sp,sp,16
20401692:	8082                	ret

20401694 <__sinit>:
__sinit():
20401694:	4d1c                	lw	a5,24(a0)
20401696:	e3bd                	bnez	a5,204016fc <__sinit+0x68>
20401698:	1141                	addi	sp,sp,-16
2040169a:	c606                	sw	ra,12(sp)
2040169c:	c422                	sw	s0,8(sp)
2040169e:	00000797          	auipc	a5,0x0
204016a2:	fa878793          	addi	a5,a5,-88 # 20401646 <_cleanup_r>
204016a6:	d51c                	sw	a5,40(a0)
204016a8:	5fc00797          	auipc	a5,0x5fc00
204016ac:	06478793          	addi	a5,a5,100 # 8000170c <_global_impure_ptr>
204016b0:	439c                	lw	a5,0(a5)
204016b2:	04052423          	sw	zero,72(a0)
204016b6:	04052623          	sw	zero,76(a0)
204016ba:	04052823          	sw	zero,80(a0)
204016be:	00f51463          	bne	a0,a5,204016c6 <__sinit+0x32>
204016c2:	4785                	li	a5,1
204016c4:	cd1c                	sw	a5,24(a0)
204016c6:	842a                	mv	s0,a0
204016c8:	281d                	jal	204016fe <__sfp>
204016ca:	c048                	sw	a0,4(s0)
204016cc:	8522                	mv	a0,s0
204016ce:	2805                	jal	204016fe <__sfp>
204016d0:	c408                	sw	a0,8(s0)
204016d2:	8522                	mv	a0,s0
204016d4:	202d                	jal	204016fe <__sfp>
204016d6:	c448                	sw	a0,12(s0)
204016d8:	4048                	lw	a0,4(s0)
204016da:	4601                	li	a2,0
204016dc:	4591                	li	a1,4
204016de:	3701                	jal	204015de <std>
204016e0:	4408                	lw	a0,8(s0)
204016e2:	4605                	li	a2,1
204016e4:	45a5                	li	a1,9
204016e6:	3de5                	jal	204015de <std>
204016e8:	4448                	lw	a0,12(s0)
204016ea:	4609                	li	a2,2
204016ec:	45c9                	li	a1,18
204016ee:	3dc5                	jal	204015de <std>
204016f0:	4785                	li	a5,1
204016f2:	cc1c                	sw	a5,24(s0)
204016f4:	40b2                	lw	ra,12(sp)
204016f6:	4422                	lw	s0,8(sp)
204016f8:	0141                	addi	sp,sp,16
204016fa:	8082                	ret
204016fc:	8082                	ret

204016fe <__sfp>:
__sfp():
204016fe:	1141                	addi	sp,sp,-16
20401700:	5fc00797          	auipc	a5,0x5fc00
20401704:	00c78793          	addi	a5,a5,12 # 8000170c <_global_impure_ptr>
20401708:	c226                	sw	s1,4(sp)
2040170a:	4384                	lw	s1,0(a5)
2040170c:	c04a                	sw	s2,0(sp)
2040170e:	c606                	sw	ra,12(sp)
20401710:	4c9c                	lw	a5,24(s1)
20401712:	c422                	sw	s0,8(sp)
20401714:	892a                	mv	s2,a0
20401716:	e399                	bnez	a5,2040171c <__sfp+0x1e>
20401718:	8526                	mv	a0,s1
2040171a:	3fad                	jal	20401694 <__sinit>
2040171c:	04848493          	addi	s1,s1,72
20401720:	4480                	lw	s0,8(s1)
20401722:	40dc                	lw	a5,4(s1)
20401724:	17fd                	addi	a5,a5,-1
20401726:	0007d663          	bgez	a5,20401732 <__sfp+0x34>
2040172a:	409c                	lw	a5,0(s1)
2040172c:	cfb1                	beqz	a5,20401788 <__sfp+0x8a>
2040172e:	4084                	lw	s1,0(s1)
20401730:	bfc5                	j	20401720 <__sfp+0x22>
20401732:	00c41703          	lh	a4,12(s0)
20401736:	e731                	bnez	a4,20401782 <__sfp+0x84>
20401738:	77c1                	lui	a5,0xffff0
2040173a:	0785                	addi	a5,a5,1
2040173c:	06042223          	sw	zero,100(s0)
20401740:	00042023          	sw	zero,0(s0)
20401744:	00042223          	sw	zero,4(s0)
20401748:	00042423          	sw	zero,8(s0)
2040174c:	c45c                	sw	a5,12(s0)
2040174e:	00042823          	sw	zero,16(s0)
20401752:	00042a23          	sw	zero,20(s0)
20401756:	00042c23          	sw	zero,24(s0)
2040175a:	4621                	li	a2,8
2040175c:	4581                	li	a1,0
2040175e:	05c40513          	addi	a0,s0,92
20401762:	2a69                	jal	204018fc <memset>
20401764:	02042a23          	sw	zero,52(s0)
20401768:	02042c23          	sw	zero,56(s0)
2040176c:	04042423          	sw	zero,72(s0)
20401770:	04042623          	sw	zero,76(s0)
20401774:	8522                	mv	a0,s0
20401776:	40b2                	lw	ra,12(sp)
20401778:	4422                	lw	s0,8(sp)
2040177a:	4492                	lw	s1,4(sp)
2040177c:	4902                	lw	s2,0(sp)
2040177e:	0141                	addi	sp,sp,16
20401780:	8082                	ret
20401782:	06840413          	addi	s0,s0,104
20401786:	bf79                	j	20401724 <__sfp+0x26>
20401788:	4591                	li	a1,4
2040178a:	854a                	mv	a0,s2
2040178c:	35d1                	jal	20401650 <__sfmoreglue>
2040178e:	c088                	sw	a0,0(s1)
20401790:	842a                	mv	s0,a0
20401792:	fd51                	bnez	a0,2040172e <__sfp+0x30>
20401794:	47b1                	li	a5,12
20401796:	00f92023          	sw	a5,0(s2)
2040179a:	bfe9                	j	20401774 <__sfp+0x76>

2040179c <_fwalk_reent>:
_fwalk_reent():
2040179c:	7179                	addi	sp,sp,-48
2040179e:	d422                	sw	s0,40(sp)
204017a0:	d04a                	sw	s2,32(sp)
204017a2:	cc52                	sw	s4,24(sp)
204017a4:	ca56                	sw	s5,20(sp)
204017a6:	c85a                	sw	s6,16(sp)
204017a8:	c65e                	sw	s7,12(sp)
204017aa:	d606                	sw	ra,44(sp)
204017ac:	d226                	sw	s1,36(sp)
204017ae:	ce4e                	sw	s3,28(sp)
204017b0:	8a2a                	mv	s4,a0
204017b2:	8aae                	mv	s5,a1
204017b4:	04850413          	addi	s0,a0,72
204017b8:	4901                	li	s2,0
204017ba:	4b05                	li	s6,1
204017bc:	5bfd                	li	s7,-1
204017be:	ec09                	bnez	s0,204017d8 <_fwalk_reent+0x3c>
204017c0:	50b2                	lw	ra,44(sp)
204017c2:	5422                	lw	s0,40(sp)
204017c4:	854a                	mv	a0,s2
204017c6:	5492                	lw	s1,36(sp)
204017c8:	5902                	lw	s2,32(sp)
204017ca:	49f2                	lw	s3,28(sp)
204017cc:	4a62                	lw	s4,24(sp)
204017ce:	4ad2                	lw	s5,20(sp)
204017d0:	4b42                	lw	s6,16(sp)
204017d2:	4bb2                	lw	s7,12(sp)
204017d4:	6145                	addi	sp,sp,48
204017d6:	8082                	ret
204017d8:	4404                	lw	s1,8(s0)
204017da:	00442983          	lw	s3,4(s0)
204017de:	19fd                	addi	s3,s3,-1
204017e0:	0009d463          	bgez	s3,204017e8 <_fwalk_reent+0x4c>
204017e4:	4000                	lw	s0,0(s0)
204017e6:	bfe1                	j	204017be <_fwalk_reent+0x22>
204017e8:	00c4d783          	lhu	a5,12(s1)
204017ec:	00fb7b63          	bgeu	s6,a5,20401802 <_fwalk_reent+0x66>
204017f0:	00e49783          	lh	a5,14(s1)
204017f4:	01778763          	beq	a5,s7,20401802 <_fwalk_reent+0x66>
204017f8:	85a6                	mv	a1,s1
204017fa:	8552                	mv	a0,s4
204017fc:	9a82                	jalr	s5
204017fe:	00a96933          	or	s2,s2,a0
20401802:	06848493          	addi	s1,s1,104
20401806:	bfe1                	j	204017de <_fwalk_reent+0x42>

20401808 <__swhatbuf_r>:
__swhatbuf_r():
20401808:	7119                	addi	sp,sp,-128
2040180a:	daa6                	sw	s1,116(sp)
2040180c:	84ae                	mv	s1,a1
2040180e:	00e59583          	lh	a1,14(a1)
20401812:	dca2                	sw	s0,120(sp)
20401814:	de86                	sw	ra,124(sp)
20401816:	8432                	mv	s0,a2
20401818:	0005dc63          	bgez	a1,20401830 <__swhatbuf_r+0x28>
2040181c:	00c4d783          	lhu	a5,12(s1)
20401820:	0006a023          	sw	zero,0(a3) # 80000000 <metal_segment_heap_target_end+0xffffd42c>
20401824:	0807f793          	andi	a5,a5,128
20401828:	e39d                	bnez	a5,2040184e <__swhatbuf_r+0x46>
2040182a:	40000793          	li	a5,1024
2040182e:	a015                	j	20401852 <__swhatbuf_r+0x4a>
20401830:	0830                	addi	a2,sp,24
20401832:	c636                	sw	a3,12(sp)
20401834:	2f15                	jal	20401f68 <_fstat_r>
20401836:	46b2                	lw	a3,12(sp)
20401838:	fe0542e3          	bltz	a0,2040181c <__swhatbuf_r+0x14>
2040183c:	4772                	lw	a4,28(sp)
2040183e:	67bd                	lui	a5,0xf
20401840:	8ff9                	and	a5,a5,a4
20401842:	7779                	lui	a4,0xffffe
20401844:	97ba                	add	a5,a5,a4
20401846:	0017b793          	seqz	a5,a5
2040184a:	c29c                	sw	a5,0(a3)
2040184c:	bff9                	j	2040182a <__swhatbuf_r+0x22>
2040184e:	04000793          	li	a5,64
20401852:	c01c                	sw	a5,0(s0)
20401854:	50f6                	lw	ra,124(sp)
20401856:	5466                	lw	s0,120(sp)
20401858:	54d6                	lw	s1,116(sp)
2040185a:	4501                	li	a0,0
2040185c:	6109                	addi	sp,sp,128
2040185e:	8082                	ret

20401860 <__smakebuf_r>:
__smakebuf_r():
20401860:	00c5d783          	lhu	a5,12(a1)
20401864:	1101                	addi	sp,sp,-32
20401866:	cc22                	sw	s0,24(sp)
20401868:	ce06                	sw	ra,28(sp)
2040186a:	ca26                	sw	s1,20(sp)
2040186c:	c84a                	sw	s2,16(sp)
2040186e:	8b89                	andi	a5,a5,2
20401870:	842e                	mv	s0,a1
20401872:	cf89                	beqz	a5,2040188c <__smakebuf_r+0x2c>
20401874:	04740793          	addi	a5,s0,71
20401878:	c01c                	sw	a5,0(s0)
2040187a:	c81c                	sw	a5,16(s0)
2040187c:	4785                	li	a5,1
2040187e:	c85c                	sw	a5,20(s0)
20401880:	40f2                	lw	ra,28(sp)
20401882:	4462                	lw	s0,24(sp)
20401884:	44d2                	lw	s1,20(sp)
20401886:	4942                	lw	s2,16(sp)
20401888:	6105                	addi	sp,sp,32
2040188a:	8082                	ret
2040188c:	0074                	addi	a3,sp,12
2040188e:	0030                	addi	a2,sp,8
20401890:	84aa                	mv	s1,a0
20401892:	3f9d                	jal	20401808 <__swhatbuf_r>
20401894:	45a2                	lw	a1,8(sp)
20401896:	892a                	mv	s2,a0
20401898:	8526                	mv	a0,s1
2040189a:	2a5d                	jal	20401a50 <_malloc_r>
2040189c:	ed01                	bnez	a0,204018b4 <__smakebuf_r+0x54>
2040189e:	00c41783          	lh	a5,12(s0)
204018a2:	2007f713          	andi	a4,a5,512
204018a6:	ff69                	bnez	a4,20401880 <__smakebuf_r+0x20>
204018a8:	9bf1                	andi	a5,a5,-4
204018aa:	0027e793          	ori	a5,a5,2
204018ae:	00f41623          	sh	a5,12(s0)
204018b2:	b7c9                	j	20401874 <__smakebuf_r+0x14>
204018b4:	00000797          	auipc	a5,0x0
204018b8:	d9278793          	addi	a5,a5,-622 # 20401646 <_cleanup_r>
204018bc:	d49c                	sw	a5,40(s1)
204018be:	00c45783          	lhu	a5,12(s0)
204018c2:	c008                	sw	a0,0(s0)
204018c4:	c808                	sw	a0,16(s0)
204018c6:	0807e793          	ori	a5,a5,128
204018ca:	00f41623          	sh	a5,12(s0)
204018ce:	47a2                	lw	a5,8(sp)
204018d0:	c85c                	sw	a5,20(s0)
204018d2:	47b2                	lw	a5,12(sp)
204018d4:	cf89                	beqz	a5,204018ee <__smakebuf_r+0x8e>
204018d6:	00e41583          	lh	a1,14(s0)
204018da:	8526                	mv	a0,s1
204018dc:	2d5d                	jal	20401f92 <_isatty_r>
204018de:	c901                	beqz	a0,204018ee <__smakebuf_r+0x8e>
204018e0:	00c45783          	lhu	a5,12(s0)
204018e4:	9bf1                	andi	a5,a5,-4
204018e6:	0017e793          	ori	a5,a5,1
204018ea:	00f41623          	sh	a5,12(s0)
204018ee:	00c45783          	lhu	a5,12(s0)
204018f2:	00f96933          	or	s2,s2,a5
204018f6:	01241623          	sh	s2,12(s0)
204018fa:	b759                	j	20401880 <__smakebuf_r+0x20>

204018fc <memset>:
memset():
204018fc:	433d                	li	t1,15
204018fe:	872a                	mv	a4,a0
20401900:	02c37363          	bgeu	t1,a2,20401926 <memset+0x2a>
20401904:	00f77793          	andi	a5,a4,15
20401908:	efbd                	bnez	a5,20401986 <memset+0x8a>
2040190a:	e5ad                	bnez	a1,20401974 <memset+0x78>
2040190c:	ff067693          	andi	a3,a2,-16
20401910:	8a3d                	andi	a2,a2,15
20401912:	96ba                	add	a3,a3,a4
20401914:	c30c                	sw	a1,0(a4)
20401916:	c34c                	sw	a1,4(a4)
20401918:	c70c                	sw	a1,8(a4)
2040191a:	c74c                	sw	a1,12(a4)
2040191c:	0741                	addi	a4,a4,16
2040191e:	fed76be3          	bltu	a4,a3,20401914 <memset+0x18>
20401922:	e211                	bnez	a2,20401926 <memset+0x2a>
20401924:	8082                	ret
20401926:	40c306b3          	sub	a3,t1,a2
2040192a:	068a                	slli	a3,a3,0x2
2040192c:	00000297          	auipc	t0,0x0
20401930:	9696                	add	a3,a3,t0
20401932:	00a68067          	jr	10(a3)
20401936:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffb43a>
2040193a:	00b706a3          	sb	a1,13(a4)
2040193e:	00b70623          	sb	a1,12(a4)
20401942:	00b705a3          	sb	a1,11(a4)
20401946:	00b70523          	sb	a1,10(a4)
2040194a:	00b704a3          	sb	a1,9(a4)
2040194e:	00b70423          	sb	a1,8(a4)
20401952:	00b703a3          	sb	a1,7(a4)
20401956:	00b70323          	sb	a1,6(a4)
2040195a:	00b702a3          	sb	a1,5(a4)
2040195e:	00b70223          	sb	a1,4(a4)
20401962:	00b701a3          	sb	a1,3(a4)
20401966:	00b70123          	sb	a1,2(a4)
2040196a:	00b700a3          	sb	a1,1(a4)
2040196e:	00b70023          	sb	a1,0(a4)
20401972:	8082                	ret
20401974:	0ff5f593          	andi	a1,a1,255
20401978:	00859693          	slli	a3,a1,0x8
2040197c:	8dd5                	or	a1,a1,a3
2040197e:	01059693          	slli	a3,a1,0x10
20401982:	8dd5                	or	a1,a1,a3
20401984:	b761                	j	2040190c <memset+0x10>
20401986:	00279693          	slli	a3,a5,0x2
2040198a:	00000297          	auipc	t0,0x0
2040198e:	9696                	add	a3,a3,t0
20401990:	8286                	mv	t0,ra
20401992:	fa8680e7          	jalr	-88(a3)
20401996:	8096                	mv	ra,t0
20401998:	17c1                	addi	a5,a5,-16
2040199a:	8f1d                	sub	a4,a4,a5
2040199c:	963e                	add	a2,a2,a5
2040199e:	f8c374e3          	bgeu	t1,a2,20401926 <memset+0x2a>
204019a2:	b7a5                	j	2040190a <memset+0xe>

204019a4 <_free_r>:
_free_r():
204019a4:	c5cd                	beqz	a1,20401a4e <_free_r+0xaa>
204019a6:	ffc5a783          	lw	a5,-4(a1)
204019aa:	1141                	addi	sp,sp,-16
204019ac:	c422                	sw	s0,8(sp)
204019ae:	c606                	sw	ra,12(sp)
204019b0:	c226                	sw	s1,4(sp)
204019b2:	ffc58413          	addi	s0,a1,-4
204019b6:	0007d363          	bgez	a5,204019bc <_free_r+0x18>
204019ba:	943e                	add	s0,s0,a5
204019bc:	84aa                	mv	s1,a0
204019be:	2589                	jal	20402000 <__malloc_lock>
204019c0:	5fc00797          	auipc	a5,0x5fc00
204019c4:	d7078793          	addi	a5,a5,-656 # 80001730 <metal_segment_data_target_end>
204019c8:	439c                	lw	a5,0(a5)
204019ca:	ef89                	bnez	a5,204019e4 <_free_r+0x40>
204019cc:	00042223          	sw	zero,4(s0)
204019d0:	5fc00797          	auipc	a5,0x5fc00
204019d4:	d687a023          	sw	s0,-672(a5) # 80001730 <metal_segment_data_target_end>
204019d8:	4422                	lw	s0,8(sp)
204019da:	40b2                	lw	ra,12(sp)
204019dc:	8526                	mv	a0,s1
204019de:	4492                	lw	s1,4(sp)
204019e0:	0141                	addi	sp,sp,16
204019e2:	a505                	j	20402002 <__malloc_unlock>
204019e4:	00f47e63          	bgeu	s0,a5,20401a00 <_free_r+0x5c>
204019e8:	4014                	lw	a3,0(s0)
204019ea:	00d40733          	add	a4,s0,a3
204019ee:	00e79663          	bne	a5,a4,204019fa <_free_r+0x56>
204019f2:	4398                	lw	a4,0(a5)
204019f4:	43dc                	lw	a5,4(a5)
204019f6:	9736                	add	a4,a4,a3
204019f8:	c018                	sw	a4,0(s0)
204019fa:	c05c                	sw	a5,4(s0)
204019fc:	bfd1                	j	204019d0 <_free_r+0x2c>
204019fe:	87ba                	mv	a5,a4
20401a00:	43d8                	lw	a4,4(a5)
20401a02:	c319                	beqz	a4,20401a08 <_free_r+0x64>
20401a04:	fee47de3          	bgeu	s0,a4,204019fe <_free_r+0x5a>
20401a08:	4394                	lw	a3,0(a5)
20401a0a:	00d78633          	add	a2,a5,a3
20401a0e:	00861f63          	bne	a2,s0,20401a2c <_free_r+0x88>
20401a12:	4010                	lw	a2,0(s0)
20401a14:	96b2                	add	a3,a3,a2
20401a16:	c394                	sw	a3,0(a5)
20401a18:	00d78633          	add	a2,a5,a3
20401a1c:	fac71ee3          	bne	a4,a2,204019d8 <_free_r+0x34>
20401a20:	4310                	lw	a2,0(a4)
20401a22:	4358                	lw	a4,4(a4)
20401a24:	96b2                	add	a3,a3,a2
20401a26:	c394                	sw	a3,0(a5)
20401a28:	c3d8                	sw	a4,4(a5)
20401a2a:	b77d                	j	204019d8 <_free_r+0x34>
20401a2c:	00c47563          	bgeu	s0,a2,20401a36 <_free_r+0x92>
20401a30:	47b1                	li	a5,12
20401a32:	c09c                	sw	a5,0(s1)
20401a34:	b755                	j	204019d8 <_free_r+0x34>
20401a36:	4010                	lw	a2,0(s0)
20401a38:	00c406b3          	add	a3,s0,a2
20401a3c:	00d71663          	bne	a4,a3,20401a48 <_free_r+0xa4>
20401a40:	4314                	lw	a3,0(a4)
20401a42:	4358                	lw	a4,4(a4)
20401a44:	96b2                	add	a3,a3,a2
20401a46:	c014                	sw	a3,0(s0)
20401a48:	c058                	sw	a4,4(s0)
20401a4a:	c3c0                	sw	s0,4(a5)
20401a4c:	b771                	j	204019d8 <_free_r+0x34>
20401a4e:	8082                	ret

20401a50 <_malloc_r>:
_malloc_r():
20401a50:	1101                	addi	sp,sp,-32
20401a52:	ca26                	sw	s1,20(sp)
20401a54:	00358493          	addi	s1,a1,3
20401a58:	98f1                	andi	s1,s1,-4
20401a5a:	ce06                	sw	ra,28(sp)
20401a5c:	cc22                	sw	s0,24(sp)
20401a5e:	c84a                	sw	s2,16(sp)
20401a60:	c64e                	sw	s3,12(sp)
20401a62:	04a1                	addi	s1,s1,8
20401a64:	47b1                	li	a5,12
20401a66:	04f4f763          	bgeu	s1,a5,20401ab4 <_malloc_r+0x64>
20401a6a:	44b1                	li	s1,12
20401a6c:	04b4e663          	bltu	s1,a1,20401ab8 <_malloc_r+0x68>
20401a70:	892a                	mv	s2,a0
20401a72:	2379                	jal	20402000 <__malloc_lock>
20401a74:	5fc00797          	auipc	a5,0x5fc00
20401a78:	cbc78793          	addi	a5,a5,-836 # 80001730 <metal_segment_data_target_end>
20401a7c:	4398                	lw	a4,0(a5)
20401a7e:	843a                	mv	s0,a4
20401a80:	e431                	bnez	s0,20401acc <_malloc_r+0x7c>
20401a82:	5fc00797          	auipc	a5,0x5fc00
20401a86:	cb278793          	addi	a5,a5,-846 # 80001734 <__malloc_sbrk_start>
20401a8a:	439c                	lw	a5,0(a5)
20401a8c:	eb81                	bnez	a5,20401a9c <_malloc_r+0x4c>
20401a8e:	4581                	li	a1,0
20401a90:	854a                	mv	a0,s2
20401a92:	2645                	jal	20401e32 <_sbrk_r>
20401a94:	5fc00797          	auipc	a5,0x5fc00
20401a98:	caa7a023          	sw	a0,-864(a5) # 80001734 <__malloc_sbrk_start>
20401a9c:	85a6                	mv	a1,s1
20401a9e:	854a                	mv	a0,s2
20401aa0:	2e49                	jal	20401e32 <_sbrk_r>
20401aa2:	59fd                	li	s3,-1
20401aa4:	07351963          	bne	a0,s3,20401b16 <_malloc_r+0xc6>
20401aa8:	47b1                	li	a5,12
20401aaa:	00f92023          	sw	a5,0(s2)
20401aae:	854a                	mv	a0,s2
20401ab0:	2b89                	jal	20402002 <__malloc_unlock>
20401ab2:	a029                	j	20401abc <_malloc_r+0x6c>
20401ab4:	fa04dce3          	bgez	s1,20401a6c <_malloc_r+0x1c>
20401ab8:	47b1                	li	a5,12
20401aba:	c11c                	sw	a5,0(a0)
20401abc:	4501                	li	a0,0
20401abe:	40f2                	lw	ra,28(sp)
20401ac0:	4462                	lw	s0,24(sp)
20401ac2:	44d2                	lw	s1,20(sp)
20401ac4:	4942                	lw	s2,16(sp)
20401ac6:	49b2                	lw	s3,12(sp)
20401ac8:	6105                	addi	sp,sp,32
20401aca:	8082                	ret
20401acc:	401c                	lw	a5,0(s0)
20401ace:	8f85                	sub	a5,a5,s1
20401ad0:	0407c063          	bltz	a5,20401b10 <_malloc_r+0xc0>
20401ad4:	46ad                	li	a3,11
20401ad6:	00f6f663          	bgeu	a3,a5,20401ae2 <_malloc_r+0x92>
20401ada:	c01c                	sw	a5,0(s0)
20401adc:	943e                	add	s0,s0,a5
20401ade:	c004                	sw	s1,0(s0)
20401ae0:	a801                	j	20401af0 <_malloc_r+0xa0>
20401ae2:	405c                	lw	a5,4(s0)
20401ae4:	02871463          	bne	a4,s0,20401b0c <_malloc_r+0xbc>
20401ae8:	5fc00717          	auipc	a4,0x5fc00
20401aec:	c4f72423          	sw	a5,-952(a4) # 80001730 <metal_segment_data_target_end>
20401af0:	854a                	mv	a0,s2
20401af2:	2b01                	jal	20402002 <__malloc_unlock>
20401af4:	00b40513          	addi	a0,s0,11
20401af8:	00440793          	addi	a5,s0,4
20401afc:	9961                	andi	a0,a0,-8
20401afe:	40f50733          	sub	a4,a0,a5
20401b02:	df55                	beqz	a4,20401abe <_malloc_r+0x6e>
20401b04:	943a                	add	s0,s0,a4
20401b06:	8f89                	sub	a5,a5,a0
20401b08:	c01c                	sw	a5,0(s0)
20401b0a:	bf55                	j	20401abe <_malloc_r+0x6e>
20401b0c:	c35c                	sw	a5,4(a4)
20401b0e:	b7cd                	j	20401af0 <_malloc_r+0xa0>
20401b10:	8722                	mv	a4,s0
20401b12:	4040                	lw	s0,4(s0)
20401b14:	b7b5                	j	20401a80 <_malloc_r+0x30>
20401b16:	00350413          	addi	s0,a0,3
20401b1a:	9871                	andi	s0,s0,-4
20401b1c:	fc8501e3          	beq	a0,s0,20401ade <_malloc_r+0x8e>
20401b20:	40a405b3          	sub	a1,s0,a0
20401b24:	854a                	mv	a0,s2
20401b26:	2631                	jal	20401e32 <_sbrk_r>
20401b28:	fb351be3          	bne	a0,s3,20401ade <_malloc_r+0x8e>
20401b2c:	bfb5                	j	20401aa8 <_malloc_r+0x58>

20401b2e <__sfputc_r>:
__sfputc_r():
20401b2e:	461c                	lw	a5,8(a2)
20401b30:	17fd                	addi	a5,a5,-1
20401b32:	c61c                	sw	a5,8(a2)
20401b34:	0007da63          	bgez	a5,20401b48 <__sfputc_r+0x1a>
20401b38:	4e18                	lw	a4,24(a2)
20401b3a:	00e7c563          	blt	a5,a4,20401b44 <__sfputc_r+0x16>
20401b3e:	47a9                	li	a5,10
20401b40:	00f59463          	bne	a1,a5,20401b48 <__sfputc_r+0x1a>
20401b44:	f1cff06f          	j	20401260 <__swbuf_r>
20401b48:	421c                	lw	a5,0(a2)
20401b4a:	852e                	mv	a0,a1
20401b4c:	00178713          	addi	a4,a5,1
20401b50:	c218                	sw	a4,0(a2)
20401b52:	00b78023          	sb	a1,0(a5)
20401b56:	8082                	ret

20401b58 <__sfputs_r>:
__sfputs_r():
20401b58:	1101                	addi	sp,sp,-32
20401b5a:	cc22                	sw	s0,24(sp)
20401b5c:	ca26                	sw	s1,20(sp)
20401b5e:	c84a                	sw	s2,16(sp)
20401b60:	c64e                	sw	s3,12(sp)
20401b62:	c452                	sw	s4,8(sp)
20401b64:	ce06                	sw	ra,28(sp)
20401b66:	892a                	mv	s2,a0
20401b68:	89ae                	mv	s3,a1
20401b6a:	8432                	mv	s0,a2
20401b6c:	00d604b3          	add	s1,a2,a3
20401b70:	5a7d                	li	s4,-1
20401b72:	00941463          	bne	s0,s1,20401b7a <__sfputs_r+0x22>
20401b76:	4501                	li	a0,0
20401b78:	a809                	j	20401b8a <__sfputs_r+0x32>
20401b7a:	00044583          	lbu	a1,0(s0)
20401b7e:	864e                	mv	a2,s3
20401b80:	854a                	mv	a0,s2
20401b82:	3775                	jal	20401b2e <__sfputc_r>
20401b84:	0405                	addi	s0,s0,1
20401b86:	ff4516e3          	bne	a0,s4,20401b72 <__sfputs_r+0x1a>
20401b8a:	40f2                	lw	ra,28(sp)
20401b8c:	4462                	lw	s0,24(sp)
20401b8e:	44d2                	lw	s1,20(sp)
20401b90:	4942                	lw	s2,16(sp)
20401b92:	49b2                	lw	s3,12(sp)
20401b94:	4a22                	lw	s4,8(sp)
20401b96:	6105                	addi	sp,sp,32
20401b98:	8082                	ret

20401b9a <_vfiprintf_r>:
_vfiprintf_r():
20401b9a:	7135                	addi	sp,sp,-160
20401b9c:	cd22                	sw	s0,152(sp)
20401b9e:	cb26                	sw	s1,148(sp)
20401ba0:	c94a                	sw	s2,144(sp)
20401ba2:	c74e                	sw	s3,140(sp)
20401ba4:	cf06                	sw	ra,156(sp)
20401ba6:	c552                	sw	s4,136(sp)
20401ba8:	c356                	sw	s5,132(sp)
20401baa:	c15a                	sw	s6,128(sp)
20401bac:	dede                	sw	s7,124(sp)
20401bae:	dce2                	sw	s8,120(sp)
20401bb0:	dae6                	sw	s9,116(sp)
20401bb2:	89aa                	mv	s3,a0
20401bb4:	84ae                	mv	s1,a1
20401bb6:	8932                	mv	s2,a2
20401bb8:	8436                	mv	s0,a3
20401bba:	c501                	beqz	a0,20401bc2 <_vfiprintf_r+0x28>
20401bbc:	4d1c                	lw	a5,24(a0)
20401bbe:	e391                	bnez	a5,20401bc2 <_vfiprintf_r+0x28>
20401bc0:	3cd1                	jal	20401694 <__sinit>
20401bc2:	00004797          	auipc	a5,0x4
20401bc6:	3da78793          	addi	a5,a5,986 # 20405f9c <__sf_fake_stdin>
20401bca:	0cf49b63          	bne	s1,a5,20401ca0 <_vfiprintf_r+0x106>
20401bce:	0049a483          	lw	s1,4(s3)
20401bd2:	00c4d783          	lhu	a5,12(s1)
20401bd6:	8ba1                	andi	a5,a5,8
20401bd8:	c7f5                	beqz	a5,20401cc4 <_vfiprintf_r+0x12a>
20401bda:	489c                	lw	a5,16(s1)
20401bdc:	c7e5                	beqz	a5,20401cc4 <_vfiprintf_r+0x12a>
20401bde:	02000793          	li	a5,32
20401be2:	02f104a3          	sb	a5,41(sp)
20401be6:	03000793          	li	a5,48
20401bea:	d202                	sw	zero,36(sp)
20401bec:	02f10523          	sb	a5,42(sp)
20401bf0:	c622                	sw	s0,12(sp)
20401bf2:	02500b93          	li	s7,37
20401bf6:	00004a97          	auipc	s5,0x4
20401bfa:	3e6a8a93          	addi	s5,s5,998 # 20405fdc <__sf_fake_stdout+0x20>
20401bfe:	4c05                	li	s8,1
20401c00:	4b29                	li	s6,10
20401c02:	844a                	mv	s0,s2
20401c04:	00044783          	lbu	a5,0(s0)
20401c08:	c399                	beqz	a5,20401c0e <_vfiprintf_r+0x74>
20401c0a:	0f779063          	bne	a5,s7,20401cea <_vfiprintf_r+0x150>
20401c0e:	41240cb3          	sub	s9,s0,s2
20401c12:	000c8d63          	beqz	s9,20401c2c <_vfiprintf_r+0x92>
20401c16:	86e6                	mv	a3,s9
20401c18:	864a                	mv	a2,s2
20401c1a:	85a6                	mv	a1,s1
20401c1c:	854e                	mv	a0,s3
20401c1e:	3f2d                	jal	20401b58 <__sfputs_r>
20401c20:	57fd                	li	a5,-1
20401c22:	1ef50663          	beq	a0,a5,20401e0e <_vfiprintf_r+0x274>
20401c26:	5692                	lw	a3,36(sp)
20401c28:	96e6                	add	a3,a3,s9
20401c2a:	d236                	sw	a3,36(sp)
20401c2c:	00044783          	lbu	a5,0(s0)
20401c30:	1c078f63          	beqz	a5,20401e0e <_vfiprintf_r+0x274>
20401c34:	57fd                	li	a5,-1
20401c36:	00140913          	addi	s2,s0,1
20401c3a:	c802                	sw	zero,16(sp)
20401c3c:	ce02                	sw	zero,28(sp)
20401c3e:	ca3e                	sw	a5,20(sp)
20401c40:	cc02                	sw	zero,24(sp)
20401c42:	040109a3          	sb	zero,83(sp)
20401c46:	d482                	sw	zero,104(sp)
20401c48:	00094583          	lbu	a1,0(s2)
20401c4c:	4615                	li	a2,5
20401c4e:	8556                	mv	a0,s5
20401c50:	2e59                	jal	20401fe6 <memchr>
20401c52:	00190413          	addi	s0,s2,1
20401c56:	47c2                	lw	a5,16(sp)
20401c58:	e959                	bnez	a0,20401cee <_vfiprintf_r+0x154>
20401c5a:	0107f713          	andi	a4,a5,16
20401c5e:	c709                	beqz	a4,20401c68 <_vfiprintf_r+0xce>
20401c60:	02000713          	li	a4,32
20401c64:	04e109a3          	sb	a4,83(sp)
20401c68:	0087f713          	andi	a4,a5,8
20401c6c:	c709                	beqz	a4,20401c76 <_vfiprintf_r+0xdc>
20401c6e:	02b00713          	li	a4,43
20401c72:	04e109a3          	sb	a4,83(sp)
20401c76:	00094683          	lbu	a3,0(s2)
20401c7a:	02a00713          	li	a4,42
20401c7e:	08e68063          	beq	a3,a4,20401cfe <_vfiprintf_r+0x164>
20401c82:	47f2                	lw	a5,28(sp)
20401c84:	844a                	mv	s0,s2
20401c86:	4681                	li	a3,0
20401c88:	4625                	li	a2,9
20401c8a:	00044703          	lbu	a4,0(s0)
20401c8e:	00140593          	addi	a1,s0,1
20401c92:	fd070713          	addi	a4,a4,-48
20401c96:	0ae67963          	bgeu	a2,a4,20401d48 <_vfiprintf_r+0x1ae>
20401c9a:	cab5                	beqz	a3,20401d0e <_vfiprintf_r+0x174>
20401c9c:	ce3e                	sw	a5,28(sp)
20401c9e:	a885                	j	20401d0e <_vfiprintf_r+0x174>
20401ca0:	00004797          	auipc	a5,0x4
20401ca4:	31c78793          	addi	a5,a5,796 # 20405fbc <__sf_fake_stdout>
20401ca8:	00f49563          	bne	s1,a5,20401cb2 <_vfiprintf_r+0x118>
20401cac:	0089a483          	lw	s1,8(s3)
20401cb0:	b70d                	j	20401bd2 <_vfiprintf_r+0x38>
20401cb2:	00004797          	auipc	a5,0x4
20401cb6:	2ca78793          	addi	a5,a5,714 # 20405f7c <__sf_fake_stderr>
20401cba:	f0f49ce3          	bne	s1,a5,20401bd2 <_vfiprintf_r+0x38>
20401cbe:	00c9a483          	lw	s1,12(s3)
20401cc2:	bf01                	j	20401bd2 <_vfiprintf_r+0x38>
20401cc4:	85a6                	mv	a1,s1
20401cc6:	854e                	mv	a0,s3
20401cc8:	e58ff0ef          	jal	ra,20401320 <__swsetup_r>
20401ccc:	d909                	beqz	a0,20401bde <_vfiprintf_r+0x44>
20401cce:	557d                	li	a0,-1
20401cd0:	40fa                	lw	ra,156(sp)
20401cd2:	446a                	lw	s0,152(sp)
20401cd4:	44da                	lw	s1,148(sp)
20401cd6:	494a                	lw	s2,144(sp)
20401cd8:	49ba                	lw	s3,140(sp)
20401cda:	4a2a                	lw	s4,136(sp)
20401cdc:	4a9a                	lw	s5,132(sp)
20401cde:	4b0a                	lw	s6,128(sp)
20401ce0:	5bf6                	lw	s7,124(sp)
20401ce2:	5c66                	lw	s8,120(sp)
20401ce4:	5cd6                	lw	s9,116(sp)
20401ce6:	610d                	addi	sp,sp,160
20401ce8:	8082                	ret
20401cea:	0405                	addi	s0,s0,1
20401cec:	bf21                	j	20401c04 <_vfiprintf_r+0x6a>
20401cee:	41550533          	sub	a0,a0,s5
20401cf2:	00ac1533          	sll	a0,s8,a0
20401cf6:	8fc9                	or	a5,a5,a0
20401cf8:	c83e                	sw	a5,16(sp)
20401cfa:	8922                	mv	s2,s0
20401cfc:	b7b1                	j	20401c48 <_vfiprintf_r+0xae>
20401cfe:	4732                	lw	a4,12(sp)
20401d00:	00470693          	addi	a3,a4,4
20401d04:	4318                	lw	a4,0(a4)
20401d06:	c636                	sw	a3,12(sp)
20401d08:	02074963          	bltz	a4,20401d3a <_vfiprintf_r+0x1a0>
20401d0c:	ce3a                	sw	a4,28(sp)
20401d0e:	00044703          	lbu	a4,0(s0)
20401d12:	02e00793          	li	a5,46
20401d16:	04f71f63          	bne	a4,a5,20401d74 <_vfiprintf_r+0x1da>
20401d1a:	00144703          	lbu	a4,1(s0)
20401d1e:	02a00793          	li	a5,42
20401d22:	02f71b63          	bne	a4,a5,20401d58 <_vfiprintf_r+0x1be>
20401d26:	47b2                	lw	a5,12(sp)
20401d28:	0409                	addi	s0,s0,2
20401d2a:	00478713          	addi	a4,a5,4
20401d2e:	439c                	lw	a5,0(a5)
20401d30:	c63a                	sw	a4,12(sp)
20401d32:	0207c163          	bltz	a5,20401d54 <_vfiprintf_r+0x1ba>
20401d36:	ca3e                	sw	a5,20(sp)
20401d38:	a835                	j	20401d74 <_vfiprintf_r+0x1da>
20401d3a:	40e00733          	neg	a4,a4
20401d3e:	0027e793          	ori	a5,a5,2
20401d42:	ce3a                	sw	a4,28(sp)
20401d44:	c83e                	sw	a5,16(sp)
20401d46:	b7e1                	j	20401d0e <_vfiprintf_r+0x174>
20401d48:	036787b3          	mul	a5,a5,s6
20401d4c:	4685                	li	a3,1
20401d4e:	842e                	mv	s0,a1
20401d50:	97ba                	add	a5,a5,a4
20401d52:	bf25                	j	20401c8a <_vfiprintf_r+0xf0>
20401d54:	57fd                	li	a5,-1
20401d56:	b7c5                	j	20401d36 <_vfiprintf_r+0x19c>
20401d58:	0405                	addi	s0,s0,1
20401d5a:	ca02                	sw	zero,20(sp)
20401d5c:	4681                	li	a3,0
20401d5e:	4781                	li	a5,0
20401d60:	4625                	li	a2,9
20401d62:	00044703          	lbu	a4,0(s0)
20401d66:	00140593          	addi	a1,s0,1
20401d6a:	fd070713          	addi	a4,a4,-48
20401d6e:	06e67663          	bgeu	a2,a4,20401dda <_vfiprintf_r+0x240>
20401d72:	f2f1                	bnez	a3,20401d36 <_vfiprintf_r+0x19c>
20401d74:	00044583          	lbu	a1,0(s0)
20401d78:	460d                	li	a2,3
20401d7a:	00004517          	auipc	a0,0x4
20401d7e:	26a50513          	addi	a0,a0,618 # 20405fe4 <__sf_fake_stdout+0x28>
20401d82:	2495                	jal	20401fe6 <memchr>
20401d84:	cd11                	beqz	a0,20401da0 <_vfiprintf_r+0x206>
20401d86:	00004797          	auipc	a5,0x4
20401d8a:	25e78793          	addi	a5,a5,606 # 20405fe4 <__sf_fake_stdout+0x28>
20401d8e:	8d1d                	sub	a0,a0,a5
20401d90:	04000793          	li	a5,64
20401d94:	00a797b3          	sll	a5,a5,a0
20401d98:	4542                	lw	a0,16(sp)
20401d9a:	0405                	addi	s0,s0,1
20401d9c:	8d5d                	or	a0,a0,a5
20401d9e:	c82a                	sw	a0,16(sp)
20401da0:	00044583          	lbu	a1,0(s0)
20401da4:	4619                	li	a2,6
20401da6:	00004517          	auipc	a0,0x4
20401daa:	24250513          	addi	a0,a0,578 # 20405fe8 <__sf_fake_stdout+0x2c>
20401dae:	00140913          	addi	s2,s0,1
20401db2:	02b10423          	sb	a1,40(sp)
20401db6:	2c05                	jal	20401fe6 <memchr>
20401db8:	c13d                	beqz	a0,20401e1e <_vfiprintf_r+0x284>
20401dba:	dfbfe797          	auipc	a5,0xdfbfe
20401dbe:	24678793          	addi	a5,a5,582 # 0 <__metal_boot_hart>
20401dc2:	e795                	bnez	a5,20401dee <_vfiprintf_r+0x254>
20401dc4:	4742                	lw	a4,16(sp)
20401dc6:	47b2                	lw	a5,12(sp)
20401dc8:	10077713          	andi	a4,a4,256
20401dcc:	cf09                	beqz	a4,20401de6 <_vfiprintf_r+0x24c>
20401dce:	0791                	addi	a5,a5,4
20401dd0:	c63e                	sw	a5,12(sp)
20401dd2:	5792                	lw	a5,36(sp)
20401dd4:	97d2                	add	a5,a5,s4
20401dd6:	d23e                	sw	a5,36(sp)
20401dd8:	b52d                	j	20401c02 <_vfiprintf_r+0x68>
20401dda:	036787b3          	mul	a5,a5,s6
20401dde:	4685                	li	a3,1
20401de0:	842e                	mv	s0,a1
20401de2:	97ba                	add	a5,a5,a4
20401de4:	bfbd                	j	20401d62 <_vfiprintf_r+0x1c8>
20401de6:	079d                	addi	a5,a5,7
20401de8:	9be1                	andi	a5,a5,-8
20401dea:	07a1                	addi	a5,a5,8
20401dec:	b7d5                	j	20401dd0 <_vfiprintf_r+0x236>
20401dee:	0078                	addi	a4,sp,12
20401df0:	00000697          	auipc	a3,0x0
20401df4:	d6868693          	addi	a3,a3,-664 # 20401b58 <__sfputs_r>
20401df8:	8626                	mv	a2,s1
20401dfa:	080c                	addi	a1,sp,16
20401dfc:	854e                	mv	a0,s3
20401dfe:	00000097          	auipc	ra,0x0
20401e02:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
20401e06:	57fd                	li	a5,-1
20401e08:	8a2a                	mv	s4,a0
20401e0a:	fcf514e3          	bne	a0,a5,20401dd2 <_vfiprintf_r+0x238>
20401e0e:	00c4d783          	lhu	a5,12(s1)
20401e12:	0407f793          	andi	a5,a5,64
20401e16:	ea079ce3          	bnez	a5,20401cce <_vfiprintf_r+0x134>
20401e1a:	5512                	lw	a0,36(sp)
20401e1c:	bd55                	j	20401cd0 <_vfiprintf_r+0x136>
20401e1e:	0078                	addi	a4,sp,12
20401e20:	00000697          	auipc	a3,0x0
20401e24:	d3868693          	addi	a3,a3,-712 # 20401b58 <__sfputs_r>
20401e28:	8626                	mv	a2,s1
20401e2a:	080c                	addi	a1,sp,16
20401e2c:	854e                	mv	a0,s3
20401e2e:	24cd                	jal	20402110 <_printf_i>
20401e30:	bfd9                	j	20401e06 <_vfiprintf_r+0x26c>

20401e32 <_sbrk_r>:
_sbrk_r():
20401e32:	1141                	addi	sp,sp,-16
20401e34:	c422                	sw	s0,8(sp)
20401e36:	842a                	mv	s0,a0
20401e38:	852e                	mv	a0,a1
20401e3a:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401e3e:	c606                	sw	ra,12(sp)
20401e40:	2da9                	jal	2040249a <_sbrk>
20401e42:	57fd                	li	a5,-1
20401e44:	00f51763          	bne	a0,a5,20401e52 <_sbrk_r+0x20>
20401e48:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401e4c:	439c                	lw	a5,0(a5)
20401e4e:	c391                	beqz	a5,20401e52 <_sbrk_r+0x20>
20401e50:	c01c                	sw	a5,0(s0)
20401e52:	40b2                	lw	ra,12(sp)
20401e54:	4422                	lw	s0,8(sp)
20401e56:	0141                	addi	sp,sp,16
20401e58:	8082                	ret

20401e5a <__sread>:
__sread():
20401e5a:	1141                	addi	sp,sp,-16
20401e5c:	c422                	sw	s0,8(sp)
20401e5e:	842e                	mv	s0,a1
20401e60:	00e59583          	lh	a1,14(a1)
20401e64:	c606                	sw	ra,12(sp)
20401e66:	23b1                	jal	204023b2 <_read_r>
20401e68:	00054963          	bltz	a0,20401e7a <__sread+0x20>
20401e6c:	487c                	lw	a5,84(s0)
20401e6e:	97aa                	add	a5,a5,a0
20401e70:	c87c                	sw	a5,84(s0)
20401e72:	40b2                	lw	ra,12(sp)
20401e74:	4422                	lw	s0,8(sp)
20401e76:	0141                	addi	sp,sp,16
20401e78:	8082                	ret
20401e7a:	00c45783          	lhu	a5,12(s0)
20401e7e:	777d                	lui	a4,0xfffff
20401e80:	177d                	addi	a4,a4,-1
20401e82:	8ff9                	and	a5,a5,a4
20401e84:	00f41623          	sh	a5,12(s0)
20401e88:	b7ed                	j	20401e72 <__sread+0x18>

20401e8a <__swrite>:
__swrite():
20401e8a:	00c5d783          	lhu	a5,12(a1)
20401e8e:	1101                	addi	sp,sp,-32
20401e90:	cc22                	sw	s0,24(sp)
20401e92:	ca26                	sw	s1,20(sp)
20401e94:	c84a                	sw	s2,16(sp)
20401e96:	c64e                	sw	s3,12(sp)
20401e98:	ce06                	sw	ra,28(sp)
20401e9a:	1007f793          	andi	a5,a5,256
20401e9e:	84aa                	mv	s1,a0
20401ea0:	842e                	mv	s0,a1
20401ea2:	8932                	mv	s2,a2
20401ea4:	89b6                	mv	s3,a3
20401ea6:	c791                	beqz	a5,20401eb2 <__swrite+0x28>
20401ea8:	00e59583          	lh	a1,14(a1)
20401eac:	4689                	li	a3,2
20401eae:	4601                	li	a2,0
20401eb0:	2229                	jal	20401fba <_lseek_r>
20401eb2:	00c45783          	lhu	a5,12(s0)
20401eb6:	777d                	lui	a4,0xfffff
20401eb8:	177d                	addi	a4,a4,-1
20401eba:	8ff9                	and	a5,a5,a4
20401ebc:	00f41623          	sh	a5,12(s0)
20401ec0:	00e41583          	lh	a1,14(s0)
20401ec4:	4462                	lw	s0,24(sp)
20401ec6:	40f2                	lw	ra,28(sp)
20401ec8:	86ce                	mv	a3,s3
20401eca:	864a                	mv	a2,s2
20401ecc:	49b2                	lw	s3,12(sp)
20401ece:	4942                	lw	s2,16(sp)
20401ed0:	8526                	mv	a0,s1
20401ed2:	44d2                	lw	s1,20(sp)
20401ed4:	6105                	addi	sp,sp,32
20401ed6:	a83d                	j	20401f14 <_write_r>

20401ed8 <__sseek>:
__sseek():
20401ed8:	1141                	addi	sp,sp,-16
20401eda:	c422                	sw	s0,8(sp)
20401edc:	842e                	mv	s0,a1
20401ede:	00e59583          	lh	a1,14(a1)
20401ee2:	c606                	sw	ra,12(sp)
20401ee4:	28d9                	jal	20401fba <_lseek_r>
20401ee6:	57fd                	li	a5,-1
20401ee8:	00c45703          	lhu	a4,12(s0)
20401eec:	00f51b63          	bne	a0,a5,20401f02 <__sseek+0x2a>
20401ef0:	77fd                	lui	a5,0xfffff
20401ef2:	17fd                	addi	a5,a5,-1
20401ef4:	8ff9                	and	a5,a5,a4
20401ef6:	00f41623          	sh	a5,12(s0)
20401efa:	40b2                	lw	ra,12(sp)
20401efc:	4422                	lw	s0,8(sp)
20401efe:	0141                	addi	sp,sp,16
20401f00:	8082                	ret
20401f02:	6785                	lui	a5,0x1
20401f04:	8fd9                	or	a5,a5,a4
20401f06:	00f41623          	sh	a5,12(s0)
20401f0a:	c868                	sw	a0,84(s0)
20401f0c:	b7fd                	j	20401efa <__sseek+0x22>

20401f0e <__sclose>:
__sclose():
20401f0e:	00e59583          	lh	a1,14(a1)
20401f12:	a03d                	j	20401f40 <_close_r>

20401f14 <_write_r>:
_write_r():
20401f14:	1141                	addi	sp,sp,-16
20401f16:	c422                	sw	s0,8(sp)
20401f18:	842a                	mv	s0,a0
20401f1a:	852e                	mv	a0,a1
20401f1c:	85b2                	mv	a1,a2
20401f1e:	8636                	mv	a2,a3
20401f20:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401f24:	c606                	sw	ra,12(sp)
20401f26:	23fd                	jal	20402514 <_write>
20401f28:	57fd                	li	a5,-1
20401f2a:	00f51763          	bne	a0,a5,20401f38 <_write_r+0x24>
20401f2e:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401f32:	439c                	lw	a5,0(a5)
20401f34:	c391                	beqz	a5,20401f38 <_write_r+0x24>
20401f36:	c01c                	sw	a5,0(s0)
20401f38:	40b2                	lw	ra,12(sp)
20401f3a:	4422                	lw	s0,8(sp)
20401f3c:	0141                	addi	sp,sp,16
20401f3e:	8082                	ret

20401f40 <_close_r>:
_close_r():
20401f40:	1141                	addi	sp,sp,-16
20401f42:	c422                	sw	s0,8(sp)
20401f44:	842a                	mv	s0,a0
20401f46:	852e                	mv	a0,a1
20401f48:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401f4c:	c606                	sw	ra,12(sp)
20401f4e:	2941                	jal	204023de <_close>
20401f50:	57fd                	li	a5,-1
20401f52:	00f51763          	bne	a0,a5,20401f60 <_close_r+0x20>
20401f56:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401f5a:	439c                	lw	a5,0(a5)
20401f5c:	c391                	beqz	a5,20401f60 <_close_r+0x20>
20401f5e:	c01c                	sw	a5,0(s0)
20401f60:	40b2                	lw	ra,12(sp)
20401f62:	4422                	lw	s0,8(sp)
20401f64:	0141                	addi	sp,sp,16
20401f66:	8082                	ret

20401f68 <_fstat_r>:
_fstat_r():
20401f68:	1141                	addi	sp,sp,-16
20401f6a:	c422                	sw	s0,8(sp)
20401f6c:	842a                	mv	s0,a0
20401f6e:	852e                	mv	a0,a1
20401f70:	85b2                	mv	a1,a2
20401f72:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401f76:	c606                	sw	ra,12(sp)
20401f78:	2161                	jal	20402400 <_fstat>
20401f7a:	57fd                	li	a5,-1
20401f7c:	00f51763          	bne	a0,a5,20401f8a <_fstat_r+0x22>
20401f80:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401f84:	439c                	lw	a5,0(a5)
20401f86:	c391                	beqz	a5,20401f8a <_fstat_r+0x22>
20401f88:	c01c                	sw	a5,0(s0)
20401f8a:	40b2                	lw	ra,12(sp)
20401f8c:	4422                	lw	s0,8(sp)
20401f8e:	0141                	addi	sp,sp,16
20401f90:	8082                	ret

20401f92 <_isatty_r>:
_isatty_r():
20401f92:	1141                	addi	sp,sp,-16
20401f94:	c422                	sw	s0,8(sp)
20401f96:	842a                	mv	s0,a0
20401f98:	852e                	mv	a0,a1
20401f9a:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401f9e:	c606                	sw	ra,12(sp)
20401fa0:	2159                	jal	20402426 <_isatty>
20401fa2:	57fd                	li	a5,-1
20401fa4:	00f51763          	bne	a0,a5,20401fb2 <_isatty_r+0x20>
20401fa8:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401fac:	439c                	lw	a5,0(a5)
20401fae:	c391                	beqz	a5,20401fb2 <_isatty_r+0x20>
20401fb0:	c01c                	sw	a5,0(s0)
20401fb2:	40b2                	lw	ra,12(sp)
20401fb4:	4422                	lw	s0,8(sp)
20401fb6:	0141                	addi	sp,sp,16
20401fb8:	8082                	ret

20401fba <_lseek_r>:
_lseek_r():
20401fba:	1141                	addi	sp,sp,-16
20401fbc:	c422                	sw	s0,8(sp)
20401fbe:	842a                	mv	s0,a0
20401fc0:	852e                	mv	a0,a1
20401fc2:	85b2                	mv	a1,a2
20401fc4:	8636                	mv	a2,a3
20401fc6:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401fca:	c606                	sw	ra,12(sp)
20401fcc:	29ad                	jal	20402446 <_lseek>
20401fce:	57fd                	li	a5,-1
20401fd0:	00f51763          	bne	a0,a5,20401fde <_lseek_r+0x24>
20401fd4:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401fd8:	439c                	lw	a5,0(a5)
20401fda:	c391                	beqz	a5,20401fde <_lseek_r+0x24>
20401fdc:	c01c                	sw	a5,0(s0)
20401fde:	40b2                	lw	ra,12(sp)
20401fe0:	4422                	lw	s0,8(sp)
20401fe2:	0141                	addi	sp,sp,16
20401fe4:	8082                	ret

20401fe6 <memchr>:
memchr():
20401fe6:	0ff5f593          	andi	a1,a1,255
20401fea:	962a                	add	a2,a2,a0
20401fec:	00c51463          	bne	a0,a2,20401ff4 <memchr+0xe>
20401ff0:	4501                	li	a0,0
20401ff2:	8082                	ret
20401ff4:	00054783          	lbu	a5,0(a0)
20401ff8:	feb78de3          	beq	a5,a1,20401ff2 <memchr+0xc>
20401ffc:	0505                	addi	a0,a0,1
20401ffe:	b7fd                	j	20401fec <memchr+0x6>

20402000 <__malloc_lock>:
__malloc_lock():
20402000:	8082                	ret

20402002 <__malloc_unlock>:
__malloc_unlock():
20402002:	8082                	ret

20402004 <_printf_common>:
_printf_common():
20402004:	7179                	addi	sp,sp,-48
20402006:	ca56                	sw	s5,20(sp)
20402008:	499c                	lw	a5,16(a1)
2040200a:	8aba                	mv	s5,a4
2040200c:	4598                	lw	a4,8(a1)
2040200e:	d422                	sw	s0,40(sp)
20402010:	d226                	sw	s1,36(sp)
20402012:	ce4e                	sw	s3,28(sp)
20402014:	cc52                	sw	s4,24(sp)
20402016:	d606                	sw	ra,44(sp)
20402018:	d04a                	sw	s2,32(sp)
2040201a:	c85a                	sw	s6,16(sp)
2040201c:	c65e                	sw	s7,12(sp)
2040201e:	89aa                	mv	s3,a0
20402020:	842e                	mv	s0,a1
20402022:	84b2                	mv	s1,a2
20402024:	8a36                	mv	s4,a3
20402026:	00e7d363          	bge	a5,a4,2040202c <_printf_common+0x28>
2040202a:	87ba                	mv	a5,a4
2040202c:	c09c                	sw	a5,0(s1)
2040202e:	04344703          	lbu	a4,67(s0)
20402032:	c319                	beqz	a4,20402038 <_printf_common+0x34>
20402034:	0785                	addi	a5,a5,1
20402036:	c09c                	sw	a5,0(s1)
20402038:	401c                	lw	a5,0(s0)
2040203a:	0207f793          	andi	a5,a5,32
2040203e:	c781                	beqz	a5,20402046 <_printf_common+0x42>
20402040:	409c                	lw	a5,0(s1)
20402042:	0789                	addi	a5,a5,2
20402044:	c09c                	sw	a5,0(s1)
20402046:	00042903          	lw	s2,0(s0)
2040204a:	00697913          	andi	s2,s2,6
2040204e:	00091a63          	bnez	s2,20402062 <_printf_common+0x5e>
20402052:	01940b13          	addi	s6,s0,25
20402056:	5bfd                	li	s7,-1
20402058:	445c                	lw	a5,12(s0)
2040205a:	4098                	lw	a4,0(s1)
2040205c:	8f99                	sub	a5,a5,a4
2040205e:	04f94c63          	blt	s2,a5,204020b6 <_printf_common+0xb2>
20402062:	401c                	lw	a5,0(s0)
20402064:	04344683          	lbu	a3,67(s0)
20402068:	0207f793          	andi	a5,a5,32
2040206c:	00d036b3          	snez	a3,a3
20402070:	eba5                	bnez	a5,204020e0 <_printf_common+0xdc>
20402072:	04340613          	addi	a2,s0,67
20402076:	85d2                	mv	a1,s4
20402078:	854e                	mv	a0,s3
2040207a:	9a82                	jalr	s5
2040207c:	57fd                	li	a5,-1
2040207e:	04f50363          	beq	a0,a5,204020c4 <_printf_common+0xc0>
20402082:	401c                	lw	a5,0(s0)
20402084:	4611                	li	a2,4
20402086:	4098                	lw	a4,0(s1)
20402088:	8b99                	andi	a5,a5,6
2040208a:	4454                	lw	a3,12(s0)
2040208c:	4481                	li	s1,0
2040208e:	00c79763          	bne	a5,a2,2040209c <_printf_common+0x98>
20402092:	40e684b3          	sub	s1,a3,a4
20402096:	0004d363          	bgez	s1,2040209c <_printf_common+0x98>
2040209a:	4481                	li	s1,0
2040209c:	441c                	lw	a5,8(s0)
2040209e:	4818                	lw	a4,16(s0)
204020a0:	00f75463          	bge	a4,a5,204020a8 <_printf_common+0xa4>
204020a4:	8f99                	sub	a5,a5,a4
204020a6:	94be                	add	s1,s1,a5
204020a8:	4901                	li	s2,0
204020aa:	0469                	addi	s0,s0,26
204020ac:	5b7d                	li	s6,-1
204020ae:	05249863          	bne	s1,s2,204020fe <_printf_common+0xfa>
204020b2:	4501                	li	a0,0
204020b4:	a809                	j	204020c6 <_printf_common+0xc2>
204020b6:	4685                	li	a3,1
204020b8:	865a                	mv	a2,s6
204020ba:	85d2                	mv	a1,s4
204020bc:	854e                	mv	a0,s3
204020be:	9a82                	jalr	s5
204020c0:	01751e63          	bne	a0,s7,204020dc <_printf_common+0xd8>
204020c4:	557d                	li	a0,-1
204020c6:	50b2                	lw	ra,44(sp)
204020c8:	5422                	lw	s0,40(sp)
204020ca:	5492                	lw	s1,36(sp)
204020cc:	5902                	lw	s2,32(sp)
204020ce:	49f2                	lw	s3,28(sp)
204020d0:	4a62                	lw	s4,24(sp)
204020d2:	4ad2                	lw	s5,20(sp)
204020d4:	4b42                	lw	s6,16(sp)
204020d6:	4bb2                	lw	s7,12(sp)
204020d8:	6145                	addi	sp,sp,48
204020da:	8082                	ret
204020dc:	0905                	addi	s2,s2,1
204020de:	bfad                	j	20402058 <_printf_common+0x54>
204020e0:	00d40733          	add	a4,s0,a3
204020e4:	03000613          	li	a2,48
204020e8:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffc46f>
204020ec:	04544703          	lbu	a4,69(s0)
204020f0:	00168793          	addi	a5,a3,1
204020f4:	97a2                	add	a5,a5,s0
204020f6:	0689                	addi	a3,a3,2
204020f8:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
204020fc:	bf9d                	j	20402072 <_printf_common+0x6e>
204020fe:	4685                	li	a3,1
20402100:	8622                	mv	a2,s0
20402102:	85d2                	mv	a1,s4
20402104:	854e                	mv	a0,s3
20402106:	9a82                	jalr	s5
20402108:	fb650ee3          	beq	a0,s6,204020c4 <_printf_common+0xc0>
2040210c:	0905                	addi	s2,s2,1
2040210e:	b745                	j	204020ae <_printf_common+0xaa>

20402110 <_printf_i>:
_printf_i():
20402110:	7179                	addi	sp,sp,-48
20402112:	d422                	sw	s0,40(sp)
20402114:	d226                	sw	s1,36(sp)
20402116:	d04a                	sw	s2,32(sp)
20402118:	ce4e                	sw	s3,28(sp)
2040211a:	d606                	sw	ra,44(sp)
2040211c:	cc52                	sw	s4,24(sp)
2040211e:	ca56                	sw	s5,20(sp)
20402120:	c85a                	sw	s6,16(sp)
20402122:	89b6                	mv	s3,a3
20402124:	0185c683          	lbu	a3,24(a1)
20402128:	06e00793          	li	a5,110
2040212c:	8932                	mv	s2,a2
2040212e:	84aa                	mv	s1,a0
20402130:	842e                	mv	s0,a1
20402132:	04358613          	addi	a2,a1,67
20402136:	1ef68063          	beq	a3,a5,20402316 <_printf_i+0x206>
2040213a:	06d7e263          	bltu	a5,a3,2040219e <_printf_i+0x8e>
2040213e:	06300793          	li	a5,99
20402142:	0af68263          	beq	a3,a5,204021e6 <_printf_i+0xd6>
20402146:	00d7ed63          	bltu	a5,a3,20402160 <_printf_i+0x50>
2040214a:	1e068a63          	beqz	a3,2040233e <_printf_i+0x22e>
2040214e:	05800793          	li	a5,88
20402152:	16f68663          	beq	a3,a5,204022be <_printf_i+0x1ae>
20402156:	04240a93          	addi	s5,s0,66
2040215a:	04d40123          	sb	a3,66(s0)
2040215e:	a869                	j	204021f8 <_printf_i+0xe8>
20402160:	06400793          	li	a5,100
20402164:	00f68663          	beq	a3,a5,20402170 <_printf_i+0x60>
20402168:	06900793          	li	a5,105
2040216c:	fef695e3          	bne	a3,a5,20402156 <_printf_i+0x46>
20402170:	401c                	lw	a5,0(s0)
20402172:	4308                	lw	a0,0(a4)
20402174:	0807f693          	andi	a3,a5,128
20402178:	00450593          	addi	a1,a0,4
2040217c:	c2c1                	beqz	a3,204021fc <_printf_i+0xec>
2040217e:	411c                	lw	a5,0(a0)
20402180:	c30c                	sw	a1,0(a4)
20402182:	0007d863          	bgez	a5,20402192 <_printf_i+0x82>
20402186:	02d00713          	li	a4,45
2040218a:	40f007b3          	neg	a5,a5
2040218e:	04e401a3          	sb	a4,67(s0)
20402192:	00004697          	auipc	a3,0x4
20402196:	e5e68693          	addi	a3,a3,-418 # 20405ff0 <__sf_fake_stdout+0x34>
2040219a:	4729                	li	a4,10
2040219c:	a065                	j	20402244 <_printf_i+0x134>
2040219e:	07300793          	li	a5,115
204021a2:	1af68263          	beq	a3,a5,20402346 <_printf_i+0x236>
204021a6:	00d7ef63          	bltu	a5,a3,204021c4 <_printf_i+0xb4>
204021aa:	06f00793          	li	a5,111
204021ae:	04f68f63          	beq	a3,a5,2040220c <_printf_i+0xfc>
204021b2:	07000793          	li	a5,112
204021b6:	faf690e3          	bne	a3,a5,20402156 <_printf_i+0x46>
204021ba:	419c                	lw	a5,0(a1)
204021bc:	0207e793          	ori	a5,a5,32
204021c0:	c19c                	sw	a5,0(a1)
204021c2:	a809                	j	204021d4 <_printf_i+0xc4>
204021c4:	07500793          	li	a5,117
204021c8:	04f68263          	beq	a3,a5,2040220c <_printf_i+0xfc>
204021cc:	07800793          	li	a5,120
204021d0:	f8f693e3          	bne	a3,a5,20402156 <_printf_i+0x46>
204021d4:	07800793          	li	a5,120
204021d8:	04f402a3          	sb	a5,69(s0)
204021dc:	00004697          	auipc	a3,0x4
204021e0:	e2868693          	addi	a3,a3,-472 # 20406004 <__sf_fake_stdout+0x48>
204021e4:	a0dd                	j	204022ca <_printf_i+0x1ba>
204021e6:	431c                	lw	a5,0(a4)
204021e8:	04258a93          	addi	s5,a1,66
204021ec:	00478693          	addi	a3,a5,4
204021f0:	439c                	lw	a5,0(a5)
204021f2:	c314                	sw	a3,0(a4)
204021f4:	04f58123          	sb	a5,66(a1)
204021f8:	4785                	li	a5,1
204021fa:	a2ad                	j	20402364 <_printf_i+0x254>
204021fc:	0407f693          	andi	a3,a5,64
20402200:	411c                	lw	a5,0(a0)
20402202:	c30c                	sw	a1,0(a4)
20402204:	debd                	beqz	a3,20402182 <_printf_i+0x72>
20402206:	07c2                	slli	a5,a5,0x10
20402208:	87c1                	srai	a5,a5,0x10
2040220a:	bfa5                	j	20402182 <_printf_i+0x72>
2040220c:	400c                	lw	a1,0(s0)
2040220e:	431c                	lw	a5,0(a4)
20402210:	0805f813          	andi	a6,a1,128
20402214:	00478513          	addi	a0,a5,4
20402218:	00080563          	beqz	a6,20402222 <_printf_i+0x112>
2040221c:	c308                	sw	a0,0(a4)
2040221e:	439c                	lw	a5,0(a5)
20402220:	a039                	j	2040222e <_printf_i+0x11e>
20402222:	0405f593          	andi	a1,a1,64
20402226:	c308                	sw	a0,0(a4)
20402228:	d9fd                	beqz	a1,2040221e <_printf_i+0x10e>
2040222a:	0007d783          	lhu	a5,0(a5)
2040222e:	06f00713          	li	a4,111
20402232:	0ce68a63          	beq	a3,a4,20402306 <_printf_i+0x1f6>
20402236:	00004697          	auipc	a3,0x4
2040223a:	dba68693          	addi	a3,a3,-582 # 20405ff0 <__sf_fake_stdout+0x34>
2040223e:	4729                	li	a4,10
20402240:	040401a3          	sb	zero,67(s0)
20402244:	404c                	lw	a1,4(s0)
20402246:	c40c                	sw	a1,8(s0)
20402248:	0005c563          	bltz	a1,20402252 <_printf_i+0x142>
2040224c:	4008                	lw	a0,0(s0)
2040224e:	996d                	andi	a0,a0,-5
20402250:	c008                	sw	a0,0(s0)
20402252:	e399                	bnez	a5,20402258 <_printf_i+0x148>
20402254:	8ab2                	mv	s5,a2
20402256:	cd91                	beqz	a1,20402272 <_printf_i+0x162>
20402258:	8ab2                	mv	s5,a2
2040225a:	02e7f5b3          	remu	a1,a5,a4
2040225e:	1afd                	addi	s5,s5,-1
20402260:	95b6                	add	a1,a1,a3
20402262:	0005c583          	lbu	a1,0(a1)
20402266:	00ba8023          	sb	a1,0(s5)
2040226a:	02e7d5b3          	divu	a1,a5,a4
2040226e:	0ae7f263          	bgeu	a5,a4,20402312 <_printf_i+0x202>
20402272:	47a1                	li	a5,8
20402274:	00f71e63          	bne	a4,a5,20402290 <_printf_i+0x180>
20402278:	401c                	lw	a5,0(s0)
2040227a:	8b85                	andi	a5,a5,1
2040227c:	cb91                	beqz	a5,20402290 <_printf_i+0x180>
2040227e:	4058                	lw	a4,4(s0)
20402280:	481c                	lw	a5,16(s0)
20402282:	00e7c763          	blt	a5,a4,20402290 <_printf_i+0x180>
20402286:	03000793          	li	a5,48
2040228a:	fefa8fa3          	sb	a5,-1(s5)
2040228e:	1afd                	addi	s5,s5,-1
20402290:	41560633          	sub	a2,a2,s5
20402294:	c810                	sw	a2,16(s0)
20402296:	874e                	mv	a4,s3
20402298:	86ca                	mv	a3,s2
2040229a:	0070                	addi	a2,sp,12
2040229c:	85a2                	mv	a1,s0
2040229e:	8526                	mv	a0,s1
204022a0:	3395                	jal	20402004 <_printf_common>
204022a2:	5a7d                	li	s4,-1
204022a4:	0d451463          	bne	a0,s4,2040236c <_printf_i+0x25c>
204022a8:	557d                	li	a0,-1
204022aa:	50b2                	lw	ra,44(sp)
204022ac:	5422                	lw	s0,40(sp)
204022ae:	5492                	lw	s1,36(sp)
204022b0:	5902                	lw	s2,32(sp)
204022b2:	49f2                	lw	s3,28(sp)
204022b4:	4a62                	lw	s4,24(sp)
204022b6:	4ad2                	lw	s5,20(sp)
204022b8:	4b42                	lw	s6,16(sp)
204022ba:	6145                	addi	sp,sp,48
204022bc:	8082                	ret
204022be:	04d582a3          	sb	a3,69(a1)
204022c2:	00004697          	auipc	a3,0x4
204022c6:	d2e68693          	addi	a3,a3,-722 # 20405ff0 <__sf_fake_stdout+0x34>
204022ca:	400c                	lw	a1,0(s0)
204022cc:	4308                	lw	a0,0(a4)
204022ce:	0805f813          	andi	a6,a1,128
204022d2:	411c                	lw	a5,0(a0)
204022d4:	0511                	addi	a0,a0,4
204022d6:	02080063          	beqz	a6,204022f6 <_printf_i+0x1e6>
204022da:	c308                	sw	a0,0(a4)
204022dc:	0015f713          	andi	a4,a1,1
204022e0:	c701                	beqz	a4,204022e8 <_printf_i+0x1d8>
204022e2:	0205e593          	ori	a1,a1,32
204022e6:	c00c                	sw	a1,0(s0)
204022e8:	4741                	li	a4,16
204022ea:	fbb9                	bnez	a5,20402240 <_printf_i+0x130>
204022ec:	400c                	lw	a1,0(s0)
204022ee:	fdf5f593          	andi	a1,a1,-33
204022f2:	c00c                	sw	a1,0(s0)
204022f4:	b7b1                	j	20402240 <_printf_i+0x130>
204022f6:	0405f813          	andi	a6,a1,64
204022fa:	c308                	sw	a0,0(a4)
204022fc:	fe0800e3          	beqz	a6,204022dc <_printf_i+0x1cc>
20402300:	07c2                	slli	a5,a5,0x10
20402302:	83c1                	srli	a5,a5,0x10
20402304:	bfe1                	j	204022dc <_printf_i+0x1cc>
20402306:	00004697          	auipc	a3,0x4
2040230a:	cea68693          	addi	a3,a3,-790 # 20405ff0 <__sf_fake_stdout+0x34>
2040230e:	4721                	li	a4,8
20402310:	bf05                	j	20402240 <_printf_i+0x130>
20402312:	87ae                	mv	a5,a1
20402314:	b799                	j	2040225a <_printf_i+0x14a>
20402316:	4194                	lw	a3,0(a1)
20402318:	431c                	lw	a5,0(a4)
2040231a:	49cc                	lw	a1,20(a1)
2040231c:	0806f813          	andi	a6,a3,128
20402320:	00478513          	addi	a0,a5,4
20402324:	00080663          	beqz	a6,20402330 <_printf_i+0x220>
20402328:	c308                	sw	a0,0(a4)
2040232a:	439c                	lw	a5,0(a5)
2040232c:	c38c                	sw	a1,0(a5)
2040232e:	a801                	j	2040233e <_printf_i+0x22e>
20402330:	c308                	sw	a0,0(a4)
20402332:	0406f693          	andi	a3,a3,64
20402336:	439c                	lw	a5,0(a5)
20402338:	daf5                	beqz	a3,2040232c <_printf_i+0x21c>
2040233a:	00b79023          	sh	a1,0(a5)
2040233e:	00042823          	sw	zero,16(s0)
20402342:	8ab2                	mv	s5,a2
20402344:	bf89                	j	20402296 <_printf_i+0x186>
20402346:	431c                	lw	a5,0(a4)
20402348:	41d0                	lw	a2,4(a1)
2040234a:	4581                	li	a1,0
2040234c:	00478693          	addi	a3,a5,4
20402350:	c314                	sw	a3,0(a4)
20402352:	0007aa83          	lw	s5,0(a5)
20402356:	8556                	mv	a0,s5
20402358:	3179                	jal	20401fe6 <memchr>
2040235a:	c501                	beqz	a0,20402362 <_printf_i+0x252>
2040235c:	41550533          	sub	a0,a0,s5
20402360:	c048                	sw	a0,4(s0)
20402362:	405c                	lw	a5,4(s0)
20402364:	c81c                	sw	a5,16(s0)
20402366:	040401a3          	sb	zero,67(s0)
2040236a:	b735                	j	20402296 <_printf_i+0x186>
2040236c:	4814                	lw	a3,16(s0)
2040236e:	8656                	mv	a2,s5
20402370:	85ca                	mv	a1,s2
20402372:	8526                	mv	a0,s1
20402374:	9982                	jalr	s3
20402376:	f34509e3          	beq	a0,s4,204022a8 <_printf_i+0x198>
2040237a:	401c                	lw	a5,0(s0)
2040237c:	8b89                	andi	a5,a5,2
2040237e:	e78d                	bnez	a5,204023a8 <_printf_i+0x298>
20402380:	47b2                	lw	a5,12(sp)
20402382:	4448                	lw	a0,12(s0)
20402384:	f2f553e3          	bge	a0,a5,204022aa <_printf_i+0x19a>
20402388:	853e                	mv	a0,a5
2040238a:	b705                	j	204022aa <_printf_i+0x19a>
2040238c:	4685                	li	a3,1
2040238e:	8656                	mv	a2,s5
20402390:	85ca                	mv	a1,s2
20402392:	8526                	mv	a0,s1
20402394:	9982                	jalr	s3
20402396:	f16509e3          	beq	a0,s6,204022a8 <_printf_i+0x198>
2040239a:	0a05                	addi	s4,s4,1
2040239c:	445c                	lw	a5,12(s0)
2040239e:	4732                	lw	a4,12(sp)
204023a0:	8f99                	sub	a5,a5,a4
204023a2:	fefa45e3          	blt	s4,a5,2040238c <_printf_i+0x27c>
204023a6:	bfe9                	j	20402380 <_printf_i+0x270>
204023a8:	4a01                	li	s4,0
204023aa:	01940a93          	addi	s5,s0,25
204023ae:	5b7d                	li	s6,-1
204023b0:	b7f5                	j	2040239c <_printf_i+0x28c>

204023b2 <_read_r>:
_read_r():
204023b2:	1141                	addi	sp,sp,-16
204023b4:	c422                	sw	s0,8(sp)
204023b6:	842a                	mv	s0,a0
204023b8:	852e                	mv	a0,a1
204023ba:	85b2                	mv	a1,a2
204023bc:	8636                	mv	a2,a3
204023be:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
204023c2:	c606                	sw	ra,12(sp)
204023c4:	2075                	jal	20402470 <_read>
204023c6:	57fd                	li	a5,-1
204023c8:	00f51763          	bne	a0,a5,204023d6 <_read_r+0x24>
204023cc:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
204023d0:	439c                	lw	a5,0(a5)
204023d2:	c391                	beqz	a5,204023d6 <_read_r+0x24>
204023d4:	c01c                	sw	a5,0(s0)
204023d6:	40b2                	lw	ra,12(sp)
204023d8:	4422                	lw	s0,8(sp)
204023da:	0141                	addi	sp,sp,16
204023dc:	8082                	ret

204023de <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
204023de:	1101                	addi	sp,sp,-32
204023e0:	ce06                	sw	ra,28(sp)
204023e2:	cc22                	sw	s0,24(sp)
204023e4:	1000                	addi	s0,sp,32
204023e6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
204023ea:	224d                	jal	2040258c <__errno>
204023ec:	872a                	mv	a4,a0
204023ee:	05800793          	li	a5,88
204023f2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
204023f4:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
204023f6:	853e                	mv	a0,a5
204023f8:	40f2                	lw	ra,28(sp)
204023fa:	4462                	lw	s0,24(sp)
204023fc:	6105                	addi	sp,sp,32
204023fe:	8082                	ret

20402400 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20402400:	1101                	addi	sp,sp,-32
20402402:	ce06                	sw	ra,28(sp)
20402404:	cc22                	sw	s0,24(sp)
20402406:	1000                	addi	s0,sp,32
20402408:	fea42623          	sw	a0,-20(s0)
2040240c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20402410:	2ab5                	jal	2040258c <__errno>
20402412:	872a                	mv	a4,a0
20402414:	fa800793          	li	a5,-88
20402418:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
2040241a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
2040241c:	853e                	mv	a0,a5
2040241e:	40f2                	lw	ra,28(sp)
20402420:	4462                	lw	s0,24(sp)
20402422:	6105                	addi	sp,sp,32
20402424:	8082                	ret

20402426 <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20402426:	1101                	addi	sp,sp,-32
20402428:	ce22                	sw	s0,28(sp)
2040242a:	1000                	addi	s0,sp,32
2040242c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20402430:	fec42783          	lw	a5,-20(s0)
20402434:	17fd                	addi	a5,a5,-1
20402436:	0017b793          	seqz	a5,a5
2040243a:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
2040243e:	853e                	mv	a0,a5
20402440:	4472                	lw	s0,28(sp)
20402442:	6105                	addi	sp,sp,32
20402444:	8082                	ret

20402446 <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20402446:	1101                	addi	sp,sp,-32
20402448:	ce06                	sw	ra,28(sp)
2040244a:	cc22                	sw	s0,24(sp)
2040244c:	1000                	addi	s0,sp,32
2040244e:	fea42623          	sw	a0,-20(s0)
20402452:	feb42423          	sw	a1,-24(s0)
20402456:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
2040245a:	2a0d                	jal	2040258c <__errno>
2040245c:	872a                	mv	a4,a0
2040245e:	05800793          	li	a5,88
20402462:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20402464:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20402466:	853e                	mv	a0,a5
20402468:	40f2                	lw	ra,28(sp)
2040246a:	4462                	lw	s0,24(sp)
2040246c:	6105                	addi	sp,sp,32
2040246e:	8082                	ret

20402470 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20402470:	1101                	addi	sp,sp,-32
20402472:	ce06                	sw	ra,28(sp)
20402474:	cc22                	sw	s0,24(sp)
20402476:	1000                	addi	s0,sp,32
20402478:	fea42623          	sw	a0,-20(s0)
2040247c:	feb42423          	sw	a1,-24(s0)
20402480:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20402484:	2221                	jal	2040258c <__errno>
20402486:	872a                	mv	a4,a0
20402488:	05800793          	li	a5,88
2040248c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
2040248e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20402490:	853e                	mv	a0,a5
20402492:	40f2                	lw	ra,28(sp)
20402494:	4462                	lw	s0,24(sp)
20402496:	6105                	addi	sp,sp,32
20402498:	8082                	ret

2040249a <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
2040249a:	7179                	addi	sp,sp,-48
2040249c:	d622                	sw	s0,44(sp)
2040249e:	1800                	addi	s0,sp,48
204024a0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
204024a4:	800017b7          	lui	a5,0x80001
204024a8:	7107a783          	lw	a5,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
204024ac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
204024b0:	4cc18713          	addi	a4,gp,1228 # 800023d4 <_sp>
204024b4:	800037b7          	lui	a5,0x80003
204024b8:	bd478793          	addi	a5,a5,-1068 # 80002bd4 <metal_segment_heap_target_end+0x0>
204024bc:	00f71463          	bne	a4,a5,204024c4 <_sbrk+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
204024c0:	57fd                	li	a5,-1
204024c2:	a0a9                	j	2040250c <_sbrk+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
204024c4:	800017b7          	lui	a5,0x80001
204024c8:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
204024cc:	fdc42783          	lw	a5,-36(s0)
204024d0:	973e                	add	a4,a4,a5
204024d2:	800037b7          	lui	a5,0x80003
204024d6:	bd478793          	addi	a5,a5,-1068 # 80002bd4 <metal_segment_heap_target_end+0x0>
204024da:	02f77063          	bgeu	a4,a5,204024fa <_sbrk+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
204024de:	800017b7          	lui	a5,0x80001
204024e2:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
204024e6:	fdc42783          	lw	a5,-36(s0)
204024ea:	973e                	add	a4,a4,a5
204024ec:	800017b7          	lui	a5,0x80001
204024f0:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
204024f4:	fec42783          	lw	a5,-20(s0)
204024f8:	a811                	j	2040250c <_sbrk+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
204024fa:	800017b7          	lui	a5,0x80001
204024fe:	80003737          	lui	a4,0x80003
20402502:	bd470713          	addi	a4,a4,-1068 # 80002bd4 <metal_segment_heap_target_end+0x0>
20402506:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
2040250a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
2040250c:	853e                	mv	a0,a5
2040250e:	5432                	lw	s0,44(sp)
20402510:	6145                	addi	sp,sp,48
20402512:	8082                	ret

20402514 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20402514:	7179                	addi	sp,sp,-48
20402516:	d606                	sw	ra,44(sp)
20402518:	d422                	sw	s0,40(sp)
2040251a:	1800                	addi	s0,sp,48
2040251c:	fca42e23          	sw	a0,-36(s0)
20402520:	fcb42c23          	sw	a1,-40(s0)
20402524:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20402528:	fdc42703          	lw	a4,-36(s0)
2040252c:	4785                	li	a5,1
2040252e:	00f70963          	beq	a4,a5,20402540 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20402532:	28a9                	jal	2040258c <__errno>
20402534:	872a                	mv	a4,a0
20402536:	05800793          	li	a5,88
2040253a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
2040253c:	57fd                	li	a5,-1
2040253e:	a82d                	j	20402578 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20402540:	fd842783          	lw	a5,-40(s0)
20402544:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20402548:	fe042623          	sw	zero,-20(s0)
2040254c:	a839                	j	2040256a <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
2040254e:	fe842703          	lw	a4,-24(s0)
20402552:	fec42783          	lw	a5,-20(s0)
20402556:	97ba                	add	a5,a5,a4
20402558:	0007c783          	lbu	a5,0(a5)
2040255c:	853e                	mv	a0,a5
2040255e:	2c91                	jal	204027b2 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20402560:	fec42783          	lw	a5,-20(s0)
20402564:	0785                	addi	a5,a5,1
20402566:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
2040256a:	fec42703          	lw	a4,-20(s0)
2040256e:	fd442783          	lw	a5,-44(s0)
20402572:	fcf76ee3          	bltu	a4,a5,2040254e <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20402576:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20402578:	853e                	mv	a0,a5
2040257a:	50b2                	lw	ra,44(sp)
2040257c:	5422                	lw	s0,40(sp)
2040257e:	6145                	addi	sp,sp,48
20402580:	8082                	ret

20402582 <atexit>:
atexit():
20402582:	85aa                	mv	a1,a0
20402584:	4681                	li	a3,0
20402586:	4601                	li	a2,0
20402588:	4501                	li	a0,0
2040258a:	a8f1                	j	20402666 <__register_exitproc>

2040258c <__errno>:
__errno():
2040258c:	5fbff797          	auipc	a5,0x5fbff
20402590:	17c78793          	addi	a5,a5,380 # 80001708 <_impure_ptr>
20402594:	4388                	lw	a0,0(a5)
20402596:	8082                	ret

20402598 <exit>:
exit():
20402598:	1141                	addi	sp,sp,-16
2040259a:	c422                	sw	s0,8(sp)
2040259c:	c606                	sw	ra,12(sp)
2040259e:	00000797          	auipc	a5,0x0
204025a2:	14c78793          	addi	a5,a5,332 # 204026ea <__call_exitprocs>
204025a6:	842a                	mv	s0,a0
204025a8:	c399                	beqz	a5,204025ae <exit+0x16>
204025aa:	4581                	li	a1,0
204025ac:	2a3d                	jal	204026ea <__call_exitprocs>
204025ae:	5fbff797          	auipc	a5,0x5fbff
204025b2:	15e78793          	addi	a5,a5,350 # 8000170c <_global_impure_ptr>
204025b6:	4388                	lw	a0,0(a5)
204025b8:	551c                	lw	a5,40(a0)
204025ba:	c391                	beqz	a5,204025be <exit+0x26>
204025bc:	9782                	jalr	a5
204025be:	8522                	mv	a0,s0
204025c0:	02f030ef          	jal	ra,20405dee <_exit>

204025c4 <__libc_fini_array>:
__libc_fini_array():
204025c4:	1141                	addi	sp,sp,-16
204025c6:	00004797          	auipc	a5,0x4
204025ca:	da678793          	addi	a5,a5,-602 # 2040636c <__fini_array_end>
204025ce:	c422                	sw	s0,8(sp)
204025d0:	00004417          	auipc	s0,0x4
204025d4:	d9c40413          	addi	s0,s0,-612 # 2040636c <__fini_array_end>
204025d8:	8c1d                	sub	s0,s0,a5
204025da:	c226                	sw	s1,4(sp)
204025dc:	c606                	sw	ra,12(sp)
204025de:	8409                	srai	s0,s0,0x2
204025e0:	84be                	mv	s1,a5
204025e2:	e411                	bnez	s0,204025ee <__libc_fini_array+0x2a>
204025e4:	40b2                	lw	ra,12(sp)
204025e6:	4422                	lw	s0,8(sp)
204025e8:	4492                	lw	s1,4(sp)
204025ea:	0141                	addi	sp,sp,16
204025ec:	8082                	ret
204025ee:	147d                	addi	s0,s0,-1
204025f0:	00241793          	slli	a5,s0,0x2
204025f4:	97a6                	add	a5,a5,s1
204025f6:	439c                	lw	a5,0(a5)
204025f8:	9782                	jalr	a5
204025fa:	b7e5                	j	204025e2 <__libc_fini_array+0x1e>

204025fc <__libc_init_array>:
__libc_init_array():
204025fc:	1141                	addi	sp,sp,-16
204025fe:	00004797          	auipc	a5,0x4
20402602:	d6a78793          	addi	a5,a5,-662 # 20406368 <__init_array_start>
20402606:	c422                	sw	s0,8(sp)
20402608:	00004417          	auipc	s0,0x4
2040260c:	d6040413          	addi	s0,s0,-672 # 20406368 <__init_array_start>
20402610:	8c1d                	sub	s0,s0,a5
20402612:	c226                	sw	s1,4(sp)
20402614:	c04a                	sw	s2,0(sp)
20402616:	c606                	sw	ra,12(sp)
20402618:	8409                	srai	s0,s0,0x2
2040261a:	4481                	li	s1,0
2040261c:	893e                	mv	s2,a5
2040261e:	02849663          	bne	s1,s0,2040264a <__libc_init_array+0x4e>
20402622:	00004797          	auipc	a5,0x4
20402626:	d4678793          	addi	a5,a5,-698 # 20406368 <__init_array_start>
2040262a:	00004417          	auipc	s0,0x4
2040262e:	d4240413          	addi	s0,s0,-702 # 2040636c <__fini_array_end>
20402632:	8c1d                	sub	s0,s0,a5
20402634:	8409                	srai	s0,s0,0x2
20402636:	4481                	li	s1,0
20402638:	893e                	mv	s2,a5
2040263a:	00849f63          	bne	s1,s0,20402658 <__libc_init_array+0x5c>
2040263e:	40b2                	lw	ra,12(sp)
20402640:	4422                	lw	s0,8(sp)
20402642:	4492                	lw	s1,4(sp)
20402644:	4902                	lw	s2,0(sp)
20402646:	0141                	addi	sp,sp,16
20402648:	8082                	ret
2040264a:	00249793          	slli	a5,s1,0x2
2040264e:	97ca                	add	a5,a5,s2
20402650:	439c                	lw	a5,0(a5)
20402652:	0485                	addi	s1,s1,1
20402654:	9782                	jalr	a5
20402656:	b7e1                	j	2040261e <__libc_init_array+0x22>
20402658:	00249793          	slli	a5,s1,0x2
2040265c:	97ca                	add	a5,a5,s2
2040265e:	439c                	lw	a5,0(a5)
20402660:	0485                	addi	s1,s1,1
20402662:	9782                	jalr	a5
20402664:	bfd9                	j	2040263a <__libc_init_array+0x3e>

20402666 <__register_exitproc>:
__register_exitproc():
20402666:	5fbff797          	auipc	a5,0x5fbff
2040266a:	0d278793          	addi	a5,a5,210 # 80001738 <_global_atexit>
2040266e:	439c                	lw	a5,0(a5)
20402670:	8e2a                	mv	t3,a0
20402672:	e38d                	bnez	a5,20402694 <__register_exitproc+0x2e>
20402674:	03c18713          	addi	a4,gp,60 # 80001f44 <_global_atexit0>
20402678:	5fbff797          	auipc	a5,0x5fbff
2040267c:	0ce7a023          	sw	a4,192(a5) # 80001738 <_global_atexit>
20402680:	dfbfe517          	auipc	a0,0xdfbfe
20402684:	98050513          	addi	a0,a0,-1664 # 0 <__metal_boot_hart>
20402688:	87ba                	mv	a5,a4
2040268a:	c509                	beqz	a0,20402694 <__register_exitproc+0x2e>
2040268c:	411c                	lw	a5,0(a0)
2040268e:	0cf1a223          	sw	a5,196(gp) # 80001fcc <_global_atexit0+0x88>
20402692:	87ba                	mv	a5,a4
20402694:	43d8                	lw	a4,4(a5)
20402696:	487d                	li	a6,31
20402698:	557d                	li	a0,-1
2040269a:	04e84763          	blt	a6,a4,204026e8 <__register_exitproc+0x82>
2040269e:	020e0e63          	beqz	t3,204026da <__register_exitproc+0x74>
204026a2:	0887a803          	lw	a6,136(a5)
204026a6:	04080163          	beqz	a6,204026e8 <__register_exitproc+0x82>
204026aa:	00271893          	slli	a7,a4,0x2
204026ae:	98c2                	add	a7,a7,a6
204026b0:	00c8a023          	sw	a2,0(a7)
204026b4:	10082303          	lw	t1,256(a6)
204026b8:	4605                	li	a2,1
204026ba:	00e61633          	sll	a2,a2,a4
204026be:	00c36333          	or	t1,t1,a2
204026c2:	10682023          	sw	t1,256(a6)
204026c6:	08d8a023          	sw	a3,128(a7)
204026ca:	4689                	li	a3,2
204026cc:	00de1763          	bne	t3,a3,204026da <__register_exitproc+0x74>
204026d0:	10482683          	lw	a3,260(a6)
204026d4:	8e55                	or	a2,a2,a3
204026d6:	10c82223          	sw	a2,260(a6)
204026da:	00170693          	addi	a3,a4,1
204026de:	070a                	slli	a4,a4,0x2
204026e0:	c3d4                	sw	a3,4(a5)
204026e2:	97ba                	add	a5,a5,a4
204026e4:	c78c                	sw	a1,8(a5)
204026e6:	4501                	li	a0,0
204026e8:	8082                	ret

204026ea <__call_exitprocs>:
__call_exitprocs():
204026ea:	7179                	addi	sp,sp,-48
204026ec:	cc52                	sw	s4,24(sp)
204026ee:	ca56                	sw	s5,20(sp)
204026f0:	c85a                	sw	s6,16(sp)
204026f2:	c65e                	sw	s7,12(sp)
204026f4:	d606                	sw	ra,44(sp)
204026f6:	d422                	sw	s0,40(sp)
204026f8:	d226                	sw	s1,36(sp)
204026fa:	d04a                	sw	s2,32(sp)
204026fc:	ce4e                	sw	s3,28(sp)
204026fe:	c462                	sw	s8,8(sp)
20402700:	8b2a                	mv	s6,a0
20402702:	8a2e                	mv	s4,a1
20402704:	5fbffa97          	auipc	s5,0x5fbff
20402708:	034a8a93          	addi	s5,s5,52 # 80001738 <_global_atexit>
2040270c:	4b85                	li	s7,1
2040270e:	000aa403          	lw	s0,0(s5)
20402712:	c811                	beqz	s0,20402726 <__call_exitprocs+0x3c>
20402714:	4044                	lw	s1,4(s0)
20402716:	08842983          	lw	s3,136(s0)
2040271a:	fff48913          	addi	s2,s1,-1
2040271e:	048a                	slli	s1,s1,0x2
20402720:	94a2                	add	s1,s1,s0
20402722:	00095e63          	bgez	s2,2040273e <__call_exitprocs+0x54>
20402726:	50b2                	lw	ra,44(sp)
20402728:	5422                	lw	s0,40(sp)
2040272a:	5492                	lw	s1,36(sp)
2040272c:	5902                	lw	s2,32(sp)
2040272e:	49f2                	lw	s3,28(sp)
20402730:	4a62                	lw	s4,24(sp)
20402732:	4ad2                	lw	s5,20(sp)
20402734:	4b42                	lw	s6,16(sp)
20402736:	4bb2                	lw	s7,12(sp)
20402738:	4c22                	lw	s8,8(sp)
2040273a:	6145                	addi	sp,sp,48
2040273c:	8082                	ret
2040273e:	000a0e63          	beqz	s4,2040275a <__call_exitprocs+0x70>
20402742:	00099563          	bnez	s3,2040274c <__call_exitprocs+0x62>
20402746:	197d                	addi	s2,s2,-1
20402748:	14f1                	addi	s1,s1,-4
2040274a:	bfe1                	j	20402722 <__call_exitprocs+0x38>
2040274c:	00291793          	slli	a5,s2,0x2
20402750:	97ce                	add	a5,a5,s3
20402752:	0807a783          	lw	a5,128(a5)
20402756:	ff4798e3          	bne	a5,s4,20402746 <__call_exitprocs+0x5c>
2040275a:	4058                	lw	a4,4(s0)
2040275c:	40dc                	lw	a5,4(s1)
2040275e:	177d                	addi	a4,a4,-1
20402760:	03271863          	bne	a4,s2,20402790 <__call_exitprocs+0xa6>
20402764:	01242223          	sw	s2,4(s0)
20402768:	dff9                	beqz	a5,20402746 <__call_exitprocs+0x5c>
2040276a:	00442c03          	lw	s8,4(s0)
2040276e:	00098863          	beqz	s3,2040277e <__call_exitprocs+0x94>
20402772:	1009a683          	lw	a3,256(s3)
20402776:	012b9733          	sll	a4,s7,s2
2040277a:	8ef9                	and	a3,a3,a4
2040277c:	ee89                	bnez	a3,20402796 <__call_exitprocs+0xac>
2040277e:	9782                	jalr	a5
20402780:	4058                	lw	a4,4(s0)
20402782:	000aa783          	lw	a5,0(s5)
20402786:	f98714e3          	bne	a4,s8,2040270e <__call_exitprocs+0x24>
2040278a:	faf40ee3          	beq	s0,a5,20402746 <__call_exitprocs+0x5c>
2040278e:	b741                	j	2040270e <__call_exitprocs+0x24>
20402790:	0004a223          	sw	zero,4(s1)
20402794:	bfd1                	j	20402768 <__call_exitprocs+0x7e>
20402796:	00291693          	slli	a3,s2,0x2
2040279a:	96ce                	add	a3,a3,s3
2040279c:	428c                	lw	a1,0(a3)
2040279e:	1049a683          	lw	a3,260(s3)
204027a2:	8f75                	and	a4,a4,a3
204027a4:	e701                	bnez	a4,204027ac <__call_exitprocs+0xc2>
204027a6:	855a                	mv	a0,s6
204027a8:	9782                	jalr	a5
204027aa:	bfd9                	j	20402780 <__call_exitprocs+0x96>
204027ac:	852e                	mv	a0,a1
204027ae:	9782                	jalr	a5
204027b0:	bfc1                	j	20402780 <__call_exitprocs+0x96>

204027b2 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
204027b2:	1101                	addi	sp,sp,-32
204027b4:	ce06                	sw	ra,28(sp)
204027b6:	cc22                	sw	s0,24(sp)
204027b8:	1000                	addi	s0,sp,32
204027ba:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
204027be:	fec42703          	lw	a4,-20(s0)
204027c2:	47a9                	li	a5,10
204027c4:	00f71463          	bne	a4,a5,204027cc <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
204027c8:	4535                	li	a0,13
204027ca:	2811                	jal	204027de <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
204027cc:	fec42503          	lw	a0,-20(s0)
204027d0:	2039                	jal	204027de <metal_tty_putc_raw>
204027d2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
204027d4:	853e                	mv	a0,a5
204027d6:	40f2                	lw	ra,28(sp)
204027d8:	4462                	lw	s0,24(sp)
204027da:	6105                	addi	sp,sp,32
204027dc:	8082                	ret

204027de <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
204027de:	1101                	addi	sp,sp,-32
204027e0:	ce06                	sw	ra,28(sp)
204027e2:	cc22                	sw	s0,24(sp)
204027e4:	1000                	addi	s0,sp,32
204027e6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
204027ea:	fec42583          	lw	a1,-20(s0)
204027ee:	800017b7          	lui	a5,0x80001
204027f2:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
204027f6:	28b1                	jal	20402852 <metal_uart_putc>
204027f8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
204027fa:	853e                	mv	a0,a5
204027fc:	40f2                	lw	ra,28(sp)
204027fe:	4462                	lw	s0,24(sp)
20402800:	6105                	addi	sp,sp,32
20402802:	8082                	ret

20402804 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20402804:	1141                	addi	sp,sp,-16
20402806:	c606                	sw	ra,12(sp)
20402808:	c422                	sw	s0,8(sp)
2040280a:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
2040280c:	67f1                	lui	a5,0x1c
2040280e:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20402812:	800017b7          	lui	a5,0x80001
20402816:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
2040281a:	2031                	jal	20402826 <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
2040281c:	0001                	nop
2040281e:	40b2                	lw	ra,12(sp)
20402820:	4422                	lw	s0,8(sp)
20402822:	0141                	addi	sp,sp,16
20402824:	8082                	ret

20402826 <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20402826:	1101                	addi	sp,sp,-32
20402828:	ce06                	sw	ra,28(sp)
2040282a:	cc22                	sw	s0,24(sp)
2040282c:	1000                	addi	s0,sp,32
2040282e:	fea42623          	sw	a0,-20(s0)
20402832:	feb42423          	sw	a1,-24(s0)
20402836:	fec42783          	lw	a5,-20(s0)
2040283a:	439c                	lw	a5,0(a5)
2040283c:	439c                	lw	a5,0(a5)
2040283e:	fe842583          	lw	a1,-24(s0)
20402842:	fec42503          	lw	a0,-20(s0)
20402846:	9782                	jalr	a5
20402848:	0001                	nop
2040284a:	40f2                	lw	ra,28(sp)
2040284c:	4462                	lw	s0,24(sp)
2040284e:	6105                	addi	sp,sp,32
20402850:	8082                	ret

20402852 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20402852:	1101                	addi	sp,sp,-32
20402854:	ce06                	sw	ra,28(sp)
20402856:	cc22                	sw	s0,24(sp)
20402858:	1000                	addi	s0,sp,32
2040285a:	fea42623          	sw	a0,-20(s0)
2040285e:	feb42423          	sw	a1,-24(s0)
20402862:	fec42783          	lw	a5,-20(s0)
20402866:	439c                	lw	a5,0(a5)
20402868:	43dc                	lw	a5,4(a5)
2040286a:	fe842583          	lw	a1,-24(s0)
2040286e:	fec42503          	lw	a0,-20(s0)
20402872:	9782                	jalr	a5
20402874:	87aa                	mv	a5,a0
20402876:	853e                	mv	a0,a5
20402878:	40f2                	lw	ra,28(sp)
2040287a:	4462                	lw	s0,24(sp)
2040287c:	6105                	addi	sp,sp,32
2040287e:	8082                	ret

20402880 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20402880:	1101                	addi	sp,sp,-32
20402882:	ce06                	sw	ra,28(sp)
20402884:	cc22                	sw	s0,24(sp)
20402886:	1000                	addi	s0,sp,32
20402888:	fea42623          	sw	a0,-20(s0)
2040288c:	feb42423          	sw	a1,-24(s0)
20402890:	fec42783          	lw	a5,-20(s0)
20402894:	439c                	lw	a5,0(a5)
20402896:	4bdc                	lw	a5,20(a5)
20402898:	fe842583          	lw	a1,-24(s0)
2040289c:	fec42503          	lw	a0,-20(s0)
204028a0:	9782                	jalr	a5
204028a2:	87aa                	mv	a5,a0
204028a4:	853e                	mv	a0,a5
204028a6:	40f2                	lw	ra,28(sp)
204028a8:	4462                	lw	s0,24(sp)
204028aa:	6105                	addi	sp,sp,32
204028ac:	8082                	ret

204028ae <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
204028ae:	1101                	addi	sp,sp,-32
204028b0:	ce22                	sw	s0,28(sp)
204028b2:	1000                	addi	s0,sp,32
204028b4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204028b8:	fec42703          	lw	a4,-20(s0)
204028bc:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
204028c0:	00f71563          	bne	a4,a5,204028ca <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
204028c4:	020007b7          	lui	a5,0x2000
204028c8:	a011                	j	204028cc <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
204028ca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
204028cc:	853e                	mv	a0,a5
204028ce:	4472                	lw	s0,28(sp)
204028d0:	6105                	addi	sp,sp,32
204028d2:	8082                	ret

204028d4 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
204028d4:	1101                	addi	sp,sp,-32
204028d6:	ce22                	sw	s0,28(sp)
204028d8:	1000                	addi	s0,sp,32
204028da:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204028de:	fec42703          	lw	a4,-20(s0)
204028e2:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
204028e6:	00f71463          	bne	a4,a5,204028ee <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
204028ea:	4789                	li	a5,2
204028ec:	a011                	j	204028f0 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
204028ee:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
204028f0:	853e                	mv	a0,a5
204028f2:	4472                	lw	s0,28(sp)
204028f4:	6105                	addi	sp,sp,32
204028f6:	8082                	ret

204028f8 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
204028f8:	1101                	addi	sp,sp,-32
204028fa:	ce22                	sw	s0,28(sp)
204028fc:	1000                	addi	s0,sp,32
204028fe:	fea42623          	sw	a0,-20(s0)
20402902:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
20402906:	fe842783          	lw	a5,-24(s0)
2040290a:	e791                	bnez	a5,20402916 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
2040290c:	800017b7          	lui	a5,0x80001
20402910:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
20402914:	a821                	j	2040292c <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20402916:	fe842703          	lw	a4,-24(s0)
2040291a:	4785                	li	a5,1
2040291c:	00f71763          	bne	a4,a5,2040292a <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20402920:	800017b7          	lui	a5,0x80001
20402924:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
20402928:	a011                	j	2040292c <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
2040292a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
2040292c:	853e                	mv	a0,a5
2040292e:	4472                	lw	s0,28(sp)
20402930:	6105                	addi	sp,sp,32
20402932:	8082                	ret

20402934 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20402934:	1101                	addi	sp,sp,-32
20402936:	ce22                	sw	s0,28(sp)
20402938:	1000                	addi	s0,sp,32
2040293a:	fea42623          	sw	a0,-20(s0)
2040293e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
20402942:	fe842783          	lw	a5,-24(s0)
20402946:	e399                	bnez	a5,2040294c <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
20402948:	478d                	li	a5,3
2040294a:	a809                	j	2040295c <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
2040294c:	fe842703          	lw	a4,-24(s0)
20402950:	4785                	li	a5,1
20402952:	00f71463          	bne	a4,a5,2040295a <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
20402956:	479d                	li	a5,7
20402958:	a011                	j	2040295c <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
2040295a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
2040295c:	853e                	mv	a0,a5
2040295e:	4472                	lw	s0,28(sp)
20402960:	6105                	addi	sp,sp,32
20402962:	8082                	ret

20402964 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20402964:	715d                	addi	sp,sp,-80
20402966:	c686                	sw	ra,76(sp)
20402968:	c4a2                	sw	s0,72(sp)
2040296a:	c2ca                	sw	s2,68(sp)
2040296c:	c0ce                	sw	s3,64(sp)
2040296e:	de52                	sw	s4,60(sp)
20402970:	dc56                	sw	s5,56(sp)
20402972:	da5a                	sw	s6,52(sp)
20402974:	d85e                	sw	s7,48(sp)
20402976:	d662                	sw	s8,44(sp)
20402978:	d466                	sw	s9,40(sp)
2040297a:	0880                	addi	s0,sp,80
2040297c:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402980:	fbc42783          	lw	a5,-68(s0)
20402984:	853e                	mv	a0,a5
20402986:	3725                	jal	204028ae <__metal_driver_sifive_clint0_control_base>
20402988:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
2040298c:	fcc42703          	lw	a4,-52(s0)
20402990:	67b1                	lui	a5,0xc
20402992:	17f1                	addi	a5,a5,-4
20402994:	97ba                	add	a5,a5,a4
20402996:	439c                	lw	a5,0(a5)
20402998:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
2040299c:	fcc42703          	lw	a4,-52(s0)
204029a0:	67b1                	lui	a5,0xc
204029a2:	17e1                	addi	a5,a5,-8
204029a4:	97ba                	add	a5,a5,a4
204029a6:	439c                	lw	a5,0(a5)
204029a8:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
204029ac:	fcc42703          	lw	a4,-52(s0)
204029b0:	67b1                	lui	a5,0xc
204029b2:	17f1                	addi	a5,a5,-4
204029b4:	97ba                	add	a5,a5,a4
204029b6:	439c                	lw	a5,0(a5)
204029b8:	fc842703          	lw	a4,-56(s0)
204029bc:	fcf718e3          	bne	a4,a5,2040298c <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
204029c0:	fc842783          	lw	a5,-56(s0)
204029c4:	8c3e                	mv	s8,a5
204029c6:	4c81                	li	s9,0
204029c8:	000c1993          	slli	s3,s8,0x0
204029cc:	4901                	li	s2,0
204029ce:	fc442783          	lw	a5,-60(s0)
204029d2:	8a3e                	mv	s4,a5
204029d4:	4a81                	li	s5,0
204029d6:	01496b33          	or	s6,s2,s4
204029da:	0159ebb3          	or	s7,s3,s5
204029de:	87da                	mv	a5,s6
204029e0:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
204029e2:	853e                	mv	a0,a5
204029e4:	85c2                	mv	a1,a6
204029e6:	40b6                	lw	ra,76(sp)
204029e8:	4426                	lw	s0,72(sp)
204029ea:	4916                	lw	s2,68(sp)
204029ec:	4986                	lw	s3,64(sp)
204029ee:	5a72                	lw	s4,60(sp)
204029f0:	5ae2                	lw	s5,56(sp)
204029f2:	5b52                	lw	s6,52(sp)
204029f4:	5bc2                	lw	s7,48(sp)
204029f6:	5c32                	lw	s8,44(sp)
204029f8:	5ca2                	lw	s9,40(sp)
204029fa:	6161                	addi	sp,sp,80
204029fc:	8082                	ret

204029fe <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
204029fe:	7179                	addi	sp,sp,-48
20402a00:	d606                	sw	ra,44(sp)
20402a02:	d422                	sw	s0,40(sp)
20402a04:	d24a                	sw	s2,36(sp)
20402a06:	d04e                	sw	s3,32(sp)
20402a08:	1800                	addi	s0,sp,48
20402a0a:	fca42e23          	sw	a0,-36(s0)
20402a0e:	fcb42c23          	sw	a1,-40(s0)
20402a12:	fcc42823          	sw	a2,-48(s0)
20402a16:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20402a1a:	fdc42783          	lw	a5,-36(s0)
20402a1e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402a22:	fec42783          	lw	a5,-20(s0)
20402a26:	853e                	mv	a0,a5
20402a28:	3559                	jal	204028ae <__metal_driver_sifive_clint0_control_base>
20402a2a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20402a2e:	fd842783          	lw	a5,-40(s0)
20402a32:	078e                	slli	a5,a5,0x3
20402a34:	873e                	mv	a4,a5
20402a36:	fe842783          	lw	a5,-24(s0)
20402a3a:	973e                	add	a4,a4,a5
20402a3c:	6791                	lui	a5,0x4
20402a3e:	0791                	addi	a5,a5,4
20402a40:	97ba                	add	a5,a5,a4
20402a42:	873e                	mv	a4,a5
20402a44:	57fd                	li	a5,-1
20402a46:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20402a48:	fd842783          	lw	a5,-40(s0)
20402a4c:	078e                	slli	a5,a5,0x3
20402a4e:	873e                	mv	a4,a5
20402a50:	fe842783          	lw	a5,-24(s0)
20402a54:	973e                	add	a4,a4,a5
20402a56:	6791                	lui	a5,0x4
20402a58:	97ba                	add	a5,a5,a4
20402a5a:	873e                	mv	a4,a5
20402a5c:	fd042783          	lw	a5,-48(s0)
20402a60:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20402a62:	fd442783          	lw	a5,-44(s0)
20402a66:	0007d913          	srli	s2,a5,0x0
20402a6a:	4981                	li	s3,0
20402a6c:	fd842783          	lw	a5,-40(s0)
20402a70:	078e                	slli	a5,a5,0x3
20402a72:	873e                	mv	a4,a5
20402a74:	fe842783          	lw	a5,-24(s0)
20402a78:	973e                	add	a4,a4,a5
20402a7a:	6791                	lui	a5,0x4
20402a7c:	0791                	addi	a5,a5,4
20402a7e:	97ba                	add	a5,a5,a4
20402a80:	874a                	mv	a4,s2
20402a82:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20402a84:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20402a86:	853e                	mv	a0,a5
20402a88:	50b2                	lw	ra,44(sp)
20402a8a:	5422                	lw	s0,40(sp)
20402a8c:	5912                	lw	s2,36(sp)
20402a8e:	5982                	lw	s3,32(sp)
20402a90:	6145                	addi	sp,sp,48
20402a92:	8082                	ret

20402a94 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20402a94:	1101                	addi	sp,sp,-32
20402a96:	ce06                	sw	ra,28(sp)
20402a98:	cc22                	sw	s0,24(sp)
20402a9a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20402a9c:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20402aa0:	f14027f3          	csrr	a5,mhartid
20402aa4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20402aa8:	fec42783          	lw	a5,-20(s0)
20402aac:	853e                	mv	a0,a5
20402aae:	1b8030ef          	jal	ra,20405c66 <metal_cpu_get>
20402ab2:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20402ab6:	fe842503          	lw	a0,-24(s0)
20402aba:	186030ef          	jal	ra,20405c40 <metal_cpu_interrupt_controller>
20402abe:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20402ac0:	853e                	mv	a0,a5
20402ac2:	40f2                	lw	ra,28(sp)
20402ac4:	4462                	lw	s0,24(sp)
20402ac6:	6105                	addi	sp,sp,32
20402ac8:	8082                	ret

20402aca <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20402aca:	7139                	addi	sp,sp,-64
20402acc:	de06                	sw	ra,60(sp)
20402ace:	dc22                	sw	s0,56(sp)
20402ad0:	0080                	addi	s0,sp,64
20402ad2:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402ad6:	fcc42503          	lw	a0,-52(s0)
20402ada:	3bed                	jal	204028d4 <__metal_driver_sifive_clint0_num_interrupts>
20402adc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20402ae0:	fcc42783          	lw	a5,-52(s0)
20402ae4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20402ae8:	fe442783          	lw	a5,-28(s0)
20402aec:	43dc                	lw	a5,4(a5)
20402aee:	efa9                	bnez	a5,20402b48 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20402af0:	fe042623          	sw	zero,-20(s0)
20402af4:	a081                	j	20402b34 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402af6:	fec42583          	lw	a1,-20(s0)
20402afa:	fcc42503          	lw	a0,-52(s0)
20402afe:	3bed                	jal	204028f8 <__metal_driver_sifive_clint0_interrupt_parents>
20402b00:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402b04:	fec42583          	lw	a1,-20(s0)
20402b08:	fcc42503          	lw	a0,-52(s0)
20402b0c:	3525                	jal	20402934 <__metal_driver_sifive_clint0_interrupt_lines>
20402b0e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20402b12:	fe042783          	lw	a5,-32(s0)
20402b16:	439c                	lw	a5,0(a5)
20402b18:	4fdc                	lw	a5,28(a5)
20402b1a:	fcc42683          	lw	a3,-52(s0)
20402b1e:	4601                	li	a2,0
20402b20:	fdc42583          	lw	a1,-36(s0)
20402b24:	fe042503          	lw	a0,-32(s0)
20402b28:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20402b2a:	fec42783          	lw	a5,-20(s0)
20402b2e:	0785                	addi	a5,a5,1
20402b30:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20402b34:	fec42703          	lw	a4,-20(s0)
20402b38:	fe842783          	lw	a5,-24(s0)
20402b3c:	faf74de3          	blt	a4,a5,20402af6 <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20402b40:	fe442783          	lw	a5,-28(s0)
20402b44:	4705                	li	a4,1
20402b46:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20402b48:	0001                	nop
20402b4a:	50f2                	lw	ra,60(sp)
20402b4c:	5462                	lw	s0,56(sp)
20402b4e:	6121                	addi	sp,sp,64
20402b50:	8082                	ret

20402b52 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20402b52:	7139                	addi	sp,sp,-64
20402b54:	de06                	sw	ra,60(sp)
20402b56:	dc22                	sw	s0,56(sp)
20402b58:	0080                	addi	s0,sp,64
20402b5a:	fca42623          	sw	a0,-52(s0)
20402b5e:	fcb42423          	sw	a1,-56(s0)
20402b62:	fcc42223          	sw	a2,-60(s0)
20402b66:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20402b6a:	57fd                	li	a5,-1
20402b6c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20402b70:	326010ef          	jal	ra,20403e96 <__metal_controller_interrupt_vector_mode>
20402b74:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
20402b78:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402b7c:	3f21                	jal	20402a94 <_get_cpu_intc>
20402b7e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402b82:	fcc42503          	lw	a0,-52(s0)
20402b86:	33b9                	jal	204028d4 <__metal_driver_sifive_clint0_num_interrupts>
20402b88:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20402b8c:	fe042703          	lw	a4,-32(s0)
20402b90:	4785                	li	a5,1
20402b92:	00f70863          	beq	a4,a5,20402ba2 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20402b96:	fe042783          	lw	a5,-32(s0)
20402b9a:	c781                	beqz	a5,20402ba2 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20402b9c:	fec42783          	lw	a5,-20(s0)
20402ba0:	a049                	j	20402c22 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20402ba2:	fe042223          	sw	zero,-28(s0)
20402ba6:	a091                	j	20402bea <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402ba8:	fe442583          	lw	a1,-28(s0)
20402bac:	fcc42503          	lw	a0,-52(s0)
20402bb0:	3351                	jal	20402934 <__metal_driver_sifive_clint0_interrupt_lines>
20402bb2:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402bb6:	fe442583          	lw	a1,-28(s0)
20402bba:	fcc42503          	lw	a0,-52(s0)
20402bbe:	3b2d                	jal	204028f8 <__metal_driver_sifive_clint0_interrupt_parents>
20402bc0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20402bc4:	fdc42703          	lw	a4,-36(s0)
20402bc8:	fe842783          	lw	a5,-24(s0)
20402bcc:	00f71863          	bne	a4,a5,20402bdc <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20402bd0:	fc842703          	lw	a4,-56(s0)
20402bd4:	fd442783          	lw	a5,-44(s0)
20402bd8:	02f70063          	beq	a4,a5,20402bf8 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20402bdc:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20402be0:	fe442783          	lw	a5,-28(s0)
20402be4:	0785                	addi	a5,a5,1
20402be6:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20402bea:	fe442703          	lw	a4,-28(s0)
20402bee:	fd842783          	lw	a5,-40(s0)
20402bf2:	faf74be3          	blt	a4,a5,20402ba8 <__metal_driver_riscv_clint0_register+0x56>
20402bf6:	a011                	j	20402bfa <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20402bf8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20402bfa:	fe842783          	lw	a5,-24(s0)
20402bfe:	c385                	beqz	a5,20402c1e <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20402c00:	fe842783          	lw	a5,-24(s0)
20402c04:	439c                	lw	a5,0(a5)
20402c06:	4fdc                	lw	a5,28(a5)
20402c08:	fc042683          	lw	a3,-64(s0)
20402c0c:	fc442603          	lw	a2,-60(s0)
20402c10:	fc842583          	lw	a1,-56(s0)
20402c14:	fe842503          	lw	a0,-24(s0)
20402c18:	9782                	jalr	a5
20402c1a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20402c1e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20402c22:	853e                	mv	a0,a5
20402c24:	50f2                	lw	ra,60(sp)
20402c26:	5462                	lw	s0,56(sp)
20402c28:	6121                	addi	sp,sp,64
20402c2a:	8082                	ret

20402c2c <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20402c2c:	7179                	addi	sp,sp,-48
20402c2e:	d622                	sw	s0,44(sp)
20402c30:	1800                	addi	s0,sp,48
20402c32:	fca42e23          	sw	a0,-36(s0)
20402c36:	fcb42c23          	sw	a1,-40(s0)
20402c3a:	fcc42a23          	sw	a2,-44(s0)
20402c3e:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20402c42:	57fd                	li	a5,-1
20402c44:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20402c48:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20402c4c:	853e                	mv	a0,a5
20402c4e:	5432                	lw	s0,44(sp)
20402c50:	6145                	addi	sp,sp,48
20402c52:	8082                	ret

20402c54 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20402c54:	1101                	addi	sp,sp,-32
20402c56:	ce06                	sw	ra,28(sp)
20402c58:	cc22                	sw	s0,24(sp)
20402c5a:	1000                	addi	s0,sp,32
20402c5c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20402c60:	236010ef          	jal	ra,20403e96 <__metal_controller_interrupt_vector_mode>
20402c64:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
20402c66:	853e                	mv	a0,a5
20402c68:	40f2                	lw	ra,28(sp)
20402c6a:	4462                	lw	s0,24(sp)
20402c6c:	6105                	addi	sp,sp,32
20402c6e:	8082                	ret

20402c70 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20402c70:	7179                	addi	sp,sp,-48
20402c72:	d606                	sw	ra,44(sp)
20402c74:	d422                	sw	s0,40(sp)
20402c76:	1800                	addi	s0,sp,48
20402c78:	fca42e23          	sw	a0,-36(s0)
20402c7c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20402c80:	57fd                	li	a5,-1
20402c82:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20402c86:	3539                	jal	20402a94 <_get_cpu_intc>
20402c88:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20402c8c:	fe842783          	lw	a5,-24(s0)
20402c90:	c395                	beqz	a5,20402cb4 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20402c92:	fd842703          	lw	a4,-40(s0)
20402c96:	4785                	li	a5,1
20402c98:	00e7ef63          	bltu	a5,a4,20402cb6 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20402c9c:	fe842783          	lw	a5,-24(s0)
20402ca0:	439c                	lw	a5,0(a5)
20402ca2:	43dc                	lw	a5,4(a5)
20402ca4:	fd842583          	lw	a1,-40(s0)
20402ca8:	fe842503          	lw	a0,-24(s0)
20402cac:	9782                	jalr	a5
20402cae:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
20402cb2:	a011                	j	20402cb6 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20402cb4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
20402cb6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20402cba:	853e                	mv	a0,a5
20402cbc:	50b2                	lw	ra,44(sp)
20402cbe:	5422                	lw	s0,40(sp)
20402cc0:	6145                	addi	sp,sp,48
20402cc2:	8082                	ret

20402cc4 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20402cc4:	7139                	addi	sp,sp,-64
20402cc6:	de06                	sw	ra,60(sp)
20402cc8:	dc22                	sw	s0,56(sp)
20402cca:	0080                	addi	s0,sp,64
20402ccc:	fca42623          	sw	a0,-52(s0)
20402cd0:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20402cd4:	57fd                	li	a5,-1
20402cd6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20402cda:	fc842783          	lw	a5,-56(s0)
20402cde:	c7c9                	beqz	a5,20402d68 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20402ce0:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402ce4:	3b45                	jal	20402a94 <_get_cpu_intc>
20402ce6:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402cea:	fcc42503          	lw	a0,-52(s0)
20402cee:	36dd                	jal	204028d4 <__metal_driver_sifive_clint0_num_interrupts>
20402cf0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20402cf4:	fe042223          	sw	zero,-28(s0)
20402cf8:	a091                	j	20402d3c <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402cfa:	fe442583          	lw	a1,-28(s0)
20402cfe:	fcc42503          	lw	a0,-52(s0)
20402d02:	390d                	jal	20402934 <__metal_driver_sifive_clint0_interrupt_lines>
20402d04:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402d08:	fe442583          	lw	a1,-28(s0)
20402d0c:	fcc42503          	lw	a0,-52(s0)
20402d10:	36e5                	jal	204028f8 <__metal_driver_sifive_clint0_interrupt_parents>
20402d12:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20402d16:	fe042703          	lw	a4,-32(s0)
20402d1a:	fe842783          	lw	a5,-24(s0)
20402d1e:	00f71863          	bne	a4,a5,20402d2e <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20402d22:	fc842703          	lw	a4,-56(s0)
20402d26:	fd842783          	lw	a5,-40(s0)
20402d2a:	02f70063          	beq	a4,a5,20402d4a <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20402d2e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402d32:	fe442783          	lw	a5,-28(s0)
20402d36:	0785                	addi	a5,a5,1
20402d38:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20402d3c:	fe442703          	lw	a4,-28(s0)
20402d40:	fdc42783          	lw	a5,-36(s0)
20402d44:	faf74be3          	blt	a4,a5,20402cfa <__metal_driver_riscv_clint0_enable+0x36>
20402d48:	a011                	j	20402d4c <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20402d4a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20402d4c:	fe842783          	lw	a5,-24(s0)
20402d50:	cf81                	beqz	a5,20402d68 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20402d52:	fe842783          	lw	a5,-24(s0)
20402d56:	439c                	lw	a5,0(a5)
20402d58:	53dc                	lw	a5,36(a5)
20402d5a:	fc842583          	lw	a1,-56(s0)
20402d5e:	fe842503          	lw	a0,-24(s0)
20402d62:	9782                	jalr	a5
20402d64:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20402d68:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20402d6c:	853e                	mv	a0,a5
20402d6e:	50f2                	lw	ra,60(sp)
20402d70:	5462                	lw	s0,56(sp)
20402d72:	6121                	addi	sp,sp,64
20402d74:	8082                	ret

20402d76 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20402d76:	7139                	addi	sp,sp,-64
20402d78:	de06                	sw	ra,60(sp)
20402d7a:	dc22                	sw	s0,56(sp)
20402d7c:	0080                	addi	s0,sp,64
20402d7e:	fca42623          	sw	a0,-52(s0)
20402d82:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20402d86:	57fd                	li	a5,-1
20402d88:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20402d8c:	fc842783          	lw	a5,-56(s0)
20402d90:	cbc1                	beqz	a5,20402e20 <__metal_driver_riscv_clint0_disable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20402d92:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402d96:	39fd                	jal	20402a94 <_get_cpu_intc>
20402d98:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402d9c:	fcc42503          	lw	a0,-52(s0)
20402da0:	b35ff0ef          	jal	ra,204028d4 <__metal_driver_sifive_clint0_num_interrupts>
20402da4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20402da8:	fe042223          	sw	zero,-28(s0)
20402dac:	a0a1                	j	20402df4 <__metal_driver_riscv_clint0_disable+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402dae:	fe442583          	lw	a1,-28(s0)
20402db2:	fcc42503          	lw	a0,-52(s0)
20402db6:	b7fff0ef          	jal	ra,20402934 <__metal_driver_sifive_clint0_interrupt_lines>
20402dba:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402dbe:	fe442583          	lw	a1,-28(s0)
20402dc2:	fcc42503          	lw	a0,-52(s0)
20402dc6:	b33ff0ef          	jal	ra,204028f8 <__metal_driver_sifive_clint0_interrupt_parents>
20402dca:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20402dce:	fe042703          	lw	a4,-32(s0)
20402dd2:	fe842783          	lw	a5,-24(s0)
20402dd6:	00f71863          	bne	a4,a5,20402de6 <__metal_driver_riscv_clint0_disable+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20402dda:	fc842703          	lw	a4,-56(s0)
20402dde:	fd842783          	lw	a5,-40(s0)
20402de2:	02f70063          	beq	a4,a5,20402e02 <__metal_driver_riscv_clint0_disable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20402de6:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402dea:	fe442783          	lw	a5,-28(s0)
20402dee:	0785                	addi	a5,a5,1
20402df0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20402df4:	fe442703          	lw	a4,-28(s0)
20402df8:	fdc42783          	lw	a5,-36(s0)
20402dfc:	faf749e3          	blt	a4,a5,20402dae <__metal_driver_riscv_clint0_disable+0x38>
20402e00:	a011                	j	20402e04 <__metal_driver_riscv_clint0_disable+0x8e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20402e02:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20402e04:	fe842783          	lw	a5,-24(s0)
20402e08:	cf81                	beqz	a5,20402e20 <__metal_driver_riscv_clint0_disable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20402e0a:	fe842783          	lw	a5,-24(s0)
20402e0e:	439c                	lw	a5,0(a5)
20402e10:	579c                	lw	a5,40(a5)
20402e12:	fc842583          	lw	a1,-56(s0)
20402e16:	fe842503          	lw	a0,-24(s0)
20402e1a:	9782                	jalr	a5
20402e1c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20402e20:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
20402e24:	853e                	mv	a0,a5
20402e26:	50f2                	lw	ra,60(sp)
20402e28:	5462                	lw	s0,56(sp)
20402e2a:	6121                	addi	sp,sp,64
20402e2c:	8082                	ret

20402e2e <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20402e2e:	7179                	addi	sp,sp,-48
20402e30:	d606                	sw	ra,44(sp)
20402e32:	d422                	sw	s0,40(sp)
20402e34:	1800                	addi	s0,sp,48
20402e36:	fca42e23          	sw	a0,-36(s0)
20402e3a:	fcb42c23          	sw	a1,-40(s0)
20402e3e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
20402e42:	57fd                	li	a5,-1
20402e44:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20402e48:	fdc42783          	lw	a5,-36(s0)
20402e4c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20402e50:	fdc42503          	lw	a0,-36(s0)
20402e54:	a5bff0ef          	jal	ra,204028ae <__metal_driver_sifive_clint0_control_base>
20402e58:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20402e5c:	fd842703          	lw	a4,-40(s0)
20402e60:	4789                	li	a5,2
20402e62:	04f70963          	beq	a4,a5,20402eb4 <__metal_driver_riscv_clint0_command_request+0x86>
20402e66:	fd842703          	lw	a4,-40(s0)
20402e6a:	4789                	li	a5,2
20402e6c:	00e7c863          	blt	a5,a4,20402e7c <__metal_driver_riscv_clint0_command_request+0x4e>
20402e70:	fd842703          	lw	a4,-40(s0)
20402e74:	4785                	li	a5,1
20402e76:	00f70e63          	beq	a4,a5,20402e92 <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20402e7a:	a8f1                	j	20402f56 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20402e7c:	fd842703          	lw	a4,-40(s0)
20402e80:	478d                	li	a5,3
20402e82:	04f70d63          	beq	a4,a5,20402edc <__metal_driver_riscv_clint0_command_request+0xae>
20402e86:	fd842703          	lw	a4,-40(s0)
20402e8a:	4791                	li	a5,4
20402e8c:	08f70963          	beq	a4,a5,20402f1e <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20402e90:	a0d9                	j	20402f56 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20402e92:	fd442783          	lw	a5,-44(s0)
20402e96:	cbcd                	beqz	a5,20402f48 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20402e98:	fe842503          	lw	a0,-24(s0)
20402e9c:	ac9ff0ef          	jal	ra,20402964 <__metal_clint0_mtime_get>
20402ea0:	87aa                	mv	a5,a0
20402ea2:	882e                	mv	a6,a1
20402ea4:	fd442703          	lw	a4,-44(s0)
20402ea8:	c31c                	sw	a5,0(a4)
20402eaa:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20402eae:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402eb2:	a859                	j	20402f48 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20402eb4:	fd442783          	lw	a5,-44(s0)
20402eb8:	cbd1                	beqz	a5,20402f4c <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20402eba:	fd442783          	lw	a5,-44(s0)
20402ebe:	439c                	lw	a5,0(a5)
20402ec0:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402ec4:	fe042783          	lw	a5,-32(s0)
20402ec8:	078a                	slli	a5,a5,0x2
20402eca:	873e                	mv	a4,a5
20402ecc:	fe442783          	lw	a5,-28(s0)
20402ed0:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20402ed2:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20402ed6:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402eda:	a88d                	j	20402f4c <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20402edc:	fd442783          	lw	a5,-44(s0)
20402ee0:	cba5                	beqz	a5,20402f50 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20402ee2:	fd442783          	lw	a5,-44(s0)
20402ee6:	439c                	lw	a5,0(a5)
20402ee8:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402eec:	fe042783          	lw	a5,-32(s0)
20402ef0:	078a                	slli	a5,a5,0x2
20402ef2:	873e                	mv	a4,a5
20402ef4:	fe442783          	lw	a5,-28(s0)
20402ef8:	97ba                	add	a5,a5,a4
20402efa:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20402efc:	4785                	li	a5,1
20402efe:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20402f00:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402f04:	fe042783          	lw	a5,-32(s0)
20402f08:	078a                	slli	a5,a5,0x2
20402f0a:	873e                	mv	a4,a5
20402f0c:	fe442783          	lw	a5,-28(s0)
20402f10:	97ba                	add	a5,a5,a4
20402f12:	439c                	lw	a5,0(a5)
20402f14:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20402f18:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402f1c:	a815                	j	20402f50 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20402f1e:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20402f22:	fd442783          	lw	a5,-44(s0)
20402f26:	c79d                	beqz	a5,20402f54 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20402f28:	fd442783          	lw	a5,-44(s0)
20402f2c:	439c                	lw	a5,0(a5)
20402f2e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402f32:	fe042783          	lw	a5,-32(s0)
20402f36:	078a                	slli	a5,a5,0x2
20402f38:	873e                	mv	a4,a5
20402f3a:	fe442783          	lw	a5,-28(s0)
20402f3e:	97ba                	add	a5,a5,a4
20402f40:	439c                	lw	a5,0(a5)
20402f42:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402f46:	a039                	j	20402f54 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402f48:	0001                	nop
20402f4a:	a031                	j	20402f56 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402f4c:	0001                	nop
20402f4e:	a021                	j	20402f56 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402f50:	0001                	nop
20402f52:	a011                	j	20402f56 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402f54:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20402f56:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
20402f5a:	853e                	mv	a0,a5
20402f5c:	50b2                	lw	ra,44(sp)
20402f5e:	5422                	lw	s0,40(sp)
20402f60:	6145                	addi	sp,sp,48
20402f62:	8082                	ret

20402f64 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20402f64:	7179                	addi	sp,sp,-48
20402f66:	d606                	sw	ra,44(sp)
20402f68:	d422                	sw	s0,40(sp)
20402f6a:	1800                	addi	s0,sp,48
20402f6c:	fca42e23          	sw	a0,-36(s0)
20402f70:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20402f74:	51d020ef          	jal	ra,20405c90 <metal_cpu_get_current_hartid>
20402f78:	87aa                	mv	a5,a0
20402f7a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20402f7e:	fec40793          	addi	a5,s0,-20
20402f82:	863e                	mv	a2,a5
20402f84:	4589                	li	a1,2
20402f86:	fdc42503          	lw	a0,-36(s0)
20402f8a:	3555                	jal	20402e2e <__metal_driver_riscv_clint0_command_request>
20402f8c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20402f8e:	853e                	mv	a0,a5
20402f90:	50b2                	lw	ra,44(sp)
20402f92:	5422                	lw	s0,40(sp)
20402f94:	6145                	addi	sp,sp,48
20402f96:	8082                	ret

20402f98 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20402f98:	7179                	addi	sp,sp,-48
20402f9a:	d606                	sw	ra,44(sp)
20402f9c:	d422                	sw	s0,40(sp)
20402f9e:	1800                	addi	s0,sp,48
20402fa0:	fca42e23          	sw	a0,-36(s0)
20402fa4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
20402fa8:	4e9020ef          	jal	ra,20405c90 <metal_cpu_get_current_hartid>
20402fac:	87aa                	mv	a5,a0
20402fae:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
20402fb2:	fec40793          	addi	a5,s0,-20
20402fb6:	863e                	mv	a2,a5
20402fb8:	458d                	li	a1,3
20402fba:	fdc42503          	lw	a0,-36(s0)
20402fbe:	3d85                	jal	20402e2e <__metal_driver_riscv_clint0_command_request>
20402fc0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20402fc2:	853e                	mv	a0,a5
20402fc4:	50b2                	lw	ra,44(sp)
20402fc6:	5422                	lw	s0,40(sp)
20402fc8:	6145                	addi	sp,sp,48
20402fca:	8082                	ret

20402fcc <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20402fcc:	1101                	addi	sp,sp,-32
20402fce:	ce22                	sw	s0,28(sp)
20402fd0:	1000                	addi	s0,sp,32
20402fd2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402fd6:	fec42703          	lw	a4,-20(s0)
20402fda:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20402fde:	00f71463          	bne	a4,a5,20402fe6 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
20402fe2:	4781                	li	a5,0
20402fe4:	a011                	j	20402fe8 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
20402fe6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
20402fe8:	853e                	mv	a0,a5
20402fea:	4472                	lw	s0,28(sp)
20402fec:	6105                	addi	sp,sp,32
20402fee:	8082                	ret

20402ff0 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20402ff0:	1101                	addi	sp,sp,-32
20402ff2:	ce22                	sw	s0,28(sp)
20402ff4:	1000                	addi	s0,sp,32
20402ff6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402ffa:	fec42703          	lw	a4,-20(s0)
20402ffe:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20403002:	00f71763          	bne	a4,a5,20403010 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
20403006:	000f47b7          	lui	a5,0xf4
2040300a:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
2040300e:	a011                	j	20403012 <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
20403010:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
20403012:	853e                	mv	a0,a5
20403014:	4472                	lw	s0,28(sp)
20403016:	6105                	addi	sp,sp,32
20403018:	8082                	ret

2040301a <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
2040301a:	1101                	addi	sp,sp,-32
2040301c:	ce22                	sw	s0,28(sp)
2040301e:	1000                	addi	s0,sp,32
20403020:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20403024:	fec42703          	lw	a4,-20(s0)
20403028:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
2040302c:	00f71763          	bne	a4,a5,2040303a <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20403030:	800017b7          	lui	a5,0x80001
20403034:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
20403038:	a011                	j	2040303c <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
2040303a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
2040303c:	853e                	mv	a0,a5
2040303e:	4472                	lw	s0,28(sp)
20403040:	6105                	addi	sp,sp,32
20403042:	8082                	ret

20403044 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20403044:	1101                	addi	sp,sp,-32
20403046:	ce22                	sw	s0,28(sp)
20403048:	1000                	addi	s0,sp,32
2040304a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
2040304e:	fec42783          	lw	a5,-20(s0)
20403052:	00f04a63          	bgtz	a5,20403066 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20403056:	fec42703          	lw	a4,-20(s0)
2040305a:	070a                	slli	a4,a4,0x2
2040305c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403060:	97ba                	add	a5,a5,a4
20403062:	439c                	lw	a5,0(a5)
20403064:	a011                	j	20403068 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20403066:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20403068:	853e                	mv	a0,a5
2040306a:	4472                	lw	s0,28(sp)
2040306c:	6105                	addi	sp,sp,32
2040306e:	8082                	ret

20403070 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20403070:	1101                	addi	sp,sp,-32
20403072:	ce22                	sw	s0,28(sp)
20403074:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20403076:	f14027f3          	csrr	a5,mhartid
2040307a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
2040307e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20403082:	853e                	mv	a0,a5
20403084:	4472                	lw	s0,28(sp)
20403086:	6105                	addi	sp,sp,32
20403088:	8082                	ret

2040308a <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
2040308a:	1101                	addi	sp,sp,-32
2040308c:	ce22                	sw	s0,28(sp)
2040308e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20403090:	47a1                	li	a5,8
20403092:	3007a7f3          	csrrs	a5,mstatus,a5
20403096:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
2040309a:	0001                	nop
2040309c:	4472                	lw	s0,28(sp)
2040309e:	6105                	addi	sp,sp,32
204030a0:	8082                	ret

204030a2 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
204030a2:	1101                	addi	sp,sp,-32
204030a4:	ce22                	sw	s0,28(sp)
204030a6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204030a8:	47a1                	li	a5,8
204030aa:	3007b7f3          	csrrc	a5,mstatus,a5
204030ae:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
204030b2:	0001                	nop
204030b4:	4472                	lw	s0,28(sp)
204030b6:	6105                	addi	sp,sp,32
204030b8:	8082                	ret

204030ba <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
204030ba:	1101                	addi	sp,sp,-32
204030bc:	ce22                	sw	s0,28(sp)
204030be:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204030c0:	47a1                	li	a5,8
204030c2:	3047a7f3          	csrrs	a5,mie,a5
204030c6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
204030ca:	0001                	nop
204030cc:	4472                	lw	s0,28(sp)
204030ce:	6105                	addi	sp,sp,32
204030d0:	8082                	ret

204030d2 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
204030d2:	1101                	addi	sp,sp,-32
204030d4:	ce22                	sw	s0,28(sp)
204030d6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204030d8:	47a1                	li	a5,8
204030da:	3047b7f3          	csrrc	a5,mie,a5
204030de:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
204030e2:	0001                	nop
204030e4:	4472                	lw	s0,28(sp)
204030e6:	6105                	addi	sp,sp,32
204030e8:	8082                	ret

204030ea <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
204030ea:	1101                	addi	sp,sp,-32
204030ec:	ce22                	sw	s0,28(sp)
204030ee:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204030f0:	08000793          	li	a5,128
204030f4:	3047a7f3          	csrrs	a5,mie,a5
204030f8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
204030fc:	0001                	nop
204030fe:	4472                	lw	s0,28(sp)
20403100:	6105                	addi	sp,sp,32
20403102:	8082                	ret

20403104 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20403104:	1101                	addi	sp,sp,-32
20403106:	ce22                	sw	s0,28(sp)
20403108:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
2040310a:	08000793          	li	a5,128
2040310e:	3047b7f3          	csrrc	a5,mie,a5
20403112:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20403116:	0001                	nop
20403118:	4472                	lw	s0,28(sp)
2040311a:	6105                	addi	sp,sp,32
2040311c:	8082                	ret

2040311e <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
2040311e:	1101                	addi	sp,sp,-32
20403120:	ce22                	sw	s0,28(sp)
20403122:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20403124:	6785                	lui	a5,0x1
20403126:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
2040312a:	3047a7f3          	csrrs	a5,mie,a5
2040312e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20403132:	0001                	nop
20403134:	4472                	lw	s0,28(sp)
20403136:	6105                	addi	sp,sp,32
20403138:	8082                	ret

2040313a <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
2040313a:	1101                	addi	sp,sp,-32
2040313c:	ce22                	sw	s0,28(sp)
2040313e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20403140:	6785                	lui	a5,0x1
20403142:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20403146:	3047b7f3          	csrrc	a5,mie,a5
2040314a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
2040314e:	0001                	nop
20403150:	4472                	lw	s0,28(sp)
20403152:	6105                	addi	sp,sp,32
20403154:	8082                	ret

20403156 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20403156:	7179                	addi	sp,sp,-48
20403158:	d622                	sw	s0,44(sp)
2040315a:	1800                	addi	s0,sp,48
2040315c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20403160:	fdc42783          	lw	a5,-36(s0)
20403164:	4705                	li	a4,1
20403166:	00f717b3          	sll	a5,a4,a5
2040316a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
2040316e:	fec42783          	lw	a5,-20(s0)
20403172:	3047a7f3          	csrrs	a5,mie,a5
20403176:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
2040317a:	0001                	nop
2040317c:	5432                	lw	s0,44(sp)
2040317e:	6145                	addi	sp,sp,48
20403180:	8082                	ret

20403182 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20403182:	7179                	addi	sp,sp,-48
20403184:	d622                	sw	s0,44(sp)
20403186:	1800                	addi	s0,sp,48
20403188:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
2040318c:	fdc42783          	lw	a5,-36(s0)
20403190:	4705                	li	a4,1
20403192:	00f717b3          	sll	a5,a4,a5
20403196:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
2040319a:	fec42783          	lw	a5,-20(s0)
2040319e:	3047b7f3          	csrrc	a5,mie,a5
204031a2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
204031a6:	0001                	nop
204031a8:	5432                	lw	s0,44(sp)
204031aa:	6145                	addi	sp,sp,48
204031ac:	8082                	ret

204031ae <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
204031ae:	1101                	addi	sp,sp,-32
204031b0:	ce06                	sw	ra,28(sp)
204031b2:	cc22                	sw	s0,24(sp)
204031b4:	1000                	addi	s0,sp,32
204031b6:	fea42623          	sw	a0,-20(s0)
204031ba:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
204031be:	06400513          	li	a0,100
204031c2:	2e9020ef          	jal	ra,20405caa <metal_shutdown>

204031c6 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
204031c6:	1101                	addi	sp,sp,-32
204031c8:	ce06                	sw	ra,28(sp)
204031ca:	cc22                	sw	s0,24(sp)
204031cc:	1000                	addi	s0,sp,32
204031ce:	fea42623          	sw	a0,-20(s0)
204031d2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
204031d6:	0c800513          	li	a0,200
204031da:	2d1020ef          	jal	ra,20405caa <metal_shutdown>

204031de <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
204031de:	715d                	addi	sp,sp,-80
204031e0:	c686                	sw	ra,76(sp)
204031e2:	c496                	sw	t0,72(sp)
204031e4:	c29a                	sw	t1,68(sp)
204031e6:	c09e                	sw	t2,64(sp)
204031e8:	de22                	sw	s0,60(sp)
204031ea:	dc2a                	sw	a0,56(sp)
204031ec:	da2e                	sw	a1,52(sp)
204031ee:	d832                	sw	a2,48(sp)
204031f0:	d636                	sw	a3,44(sp)
204031f2:	d43a                	sw	a4,40(sp)
204031f4:	d23e                	sw	a5,36(sp)
204031f6:	d042                	sw	a6,32(sp)
204031f8:	ce46                	sw	a7,28(sp)
204031fa:	cc72                	sw	t3,24(sp)
204031fc:	ca76                	sw	t4,20(sp)
204031fe:	c87a                	sw	t5,16(sp)
20403200:	c67e                	sw	t6,12(sp)
20403202:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20403204:	12c00513          	li	a0,300
20403208:	2a3020ef          	jal	ra,20405caa <metal_shutdown>

2040320c <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
2040320c:	711d                	addi	sp,sp,-96
2040320e:	ce86                	sw	ra,92(sp)
20403210:	cc96                	sw	t0,88(sp)
20403212:	ca9a                	sw	t1,84(sp)
20403214:	c89e                	sw	t2,80(sp)
20403216:	c6a2                	sw	s0,76(sp)
20403218:	c4aa                	sw	a0,72(sp)
2040321a:	c2ae                	sw	a1,68(sp)
2040321c:	c0b2                	sw	a2,64(sp)
2040321e:	de36                	sw	a3,60(sp)
20403220:	dc3a                	sw	a4,56(sp)
20403222:	da3e                	sw	a5,52(sp)
20403224:	d842                	sw	a6,48(sp)
20403226:	d646                	sw	a7,44(sp)
20403228:	d472                	sw	t3,40(sp)
2040322a:	d276                	sw	t4,36(sp)
2040322c:	d07a                	sw	t5,32(sp)
2040322e:	ce7e                	sw	t6,28(sp)
20403230:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403232:	3d3d                	jal	20403070 <__metal_myhart_id>
20403234:	872a                	mv	a4,a0
20403236:	070a                	slli	a4,a4,0x2
20403238:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040323c:	97ba                	add	a5,a5,a4
2040323e:	439c                	lw	a5,0(a5)
20403240:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20403244:	fac42783          	lw	a5,-84(s0)
20403248:	c785                	beqz	a5,20403270 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040324a:	fac42503          	lw	a0,-84(s0)
2040324e:	33f1                	jal	2040301a <__metal_driver_cpu_interrupt_controller>
20403250:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20403254:	fa842783          	lw	a5,-88(s0)
20403258:	0e07a783          	lw	a5,224(a5)
2040325c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20403260:	fa842783          	lw	a5,-88(s0)
20403264:	0d87a783          	lw	a5,216(a5)
20403268:	fa442583          	lw	a1,-92(s0)
2040326c:	450d                	li	a0,3
2040326e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20403270:	0001                	nop
20403272:	40f6                	lw	ra,92(sp)
20403274:	42e6                	lw	t0,88(sp)
20403276:	4356                	lw	t1,84(sp)
20403278:	43c6                	lw	t2,80(sp)
2040327a:	4436                	lw	s0,76(sp)
2040327c:	4526                	lw	a0,72(sp)
2040327e:	4596                	lw	a1,68(sp)
20403280:	4606                	lw	a2,64(sp)
20403282:	56f2                	lw	a3,60(sp)
20403284:	5762                	lw	a4,56(sp)
20403286:	57d2                	lw	a5,52(sp)
20403288:	5842                	lw	a6,48(sp)
2040328a:	58b2                	lw	a7,44(sp)
2040328c:	5e22                	lw	t3,40(sp)
2040328e:	5e92                	lw	t4,36(sp)
20403290:	5f02                	lw	t5,32(sp)
20403292:	4ff2                	lw	t6,28(sp)
20403294:	6125                	addi	sp,sp,96
20403296:	30200073          	mret

2040329a <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
2040329a:	7179                	addi	sp,sp,-48
2040329c:	d606                	sw	ra,44(sp)
2040329e:	d422                	sw	s0,40(sp)
204032a0:	1800                	addi	s0,sp,48
204032a2:	fca42e23          	sw	a0,-36(s0)
204032a6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204032aa:	33d9                	jal	20403070 <__metal_myhart_id>
204032ac:	872a                	mv	a4,a0
204032ae:	070a                	slli	a4,a4,0x2
204032b0:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204032b4:	97ba                	add	a5,a5,a4
204032b6:	439c                	lw	a5,0(a5)
204032b8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204032bc:	342027f3          	csrr	a5,mcause
204032c0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
204032c4:	fec42783          	lw	a5,-20(s0)
204032c8:	c795                	beqz	a5,204032f4 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204032ca:	fec42503          	lw	a0,-20(s0)
204032ce:	33b1                	jal	2040301a <__metal_driver_cpu_interrupt_controller>
204032d0:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
204032d4:	fe842783          	lw	a5,-24(s0)
204032d8:	3ff7f793          	andi	a5,a5,1023
204032dc:	fe442703          	lw	a4,-28(s0)
204032e0:	0e078793          	addi	a5,a5,224
204032e4:	078a                	slli	a5,a5,0x2
204032e6:	97ba                	add	a5,a5,a4
204032e8:	479c                	lw	a5,8(a5)
204032ea:	fdc42583          	lw	a1,-36(s0)
204032ee:	fec42503          	lw	a0,-20(s0)
204032f2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
204032f4:	0001                	nop
204032f6:	50b2                	lw	ra,44(sp)
204032f8:	5422                	lw	s0,40(sp)
204032fa:	6145                	addi	sp,sp,48
204032fc:	8082                	ret

204032fe <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
204032fe:	711d                	addi	sp,sp,-96
20403300:	ce86                	sw	ra,92(sp)
20403302:	cc96                	sw	t0,88(sp)
20403304:	ca9a                	sw	t1,84(sp)
20403306:	c89e                	sw	t2,80(sp)
20403308:	c6a2                	sw	s0,76(sp)
2040330a:	c4aa                	sw	a0,72(sp)
2040330c:	c2ae                	sw	a1,68(sp)
2040330e:	c0b2                	sw	a2,64(sp)
20403310:	de36                	sw	a3,60(sp)
20403312:	dc3a                	sw	a4,56(sp)
20403314:	da3e                	sw	a5,52(sp)
20403316:	d842                	sw	a6,48(sp)
20403318:	d646                	sw	a7,44(sp)
2040331a:	d472                	sw	t3,40(sp)
2040331c:	d276                	sw	t4,36(sp)
2040331e:	d07a                	sw	t5,32(sp)
20403320:	ce7e                	sw	t6,28(sp)
20403322:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403324:	33b1                	jal	20403070 <__metal_myhart_id>
20403326:	872a                	mv	a4,a0
20403328:	070a                	slli	a4,a4,0x2
2040332a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040332e:	97ba                	add	a5,a5,a4
20403330:	439c                	lw	a5,0(a5)
20403332:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20403336:	fac42783          	lw	a5,-84(s0)
2040333a:	c785                	beqz	a5,20403362 <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040333c:	fac42503          	lw	a0,-84(s0)
20403340:	39e9                	jal	2040301a <__metal_driver_cpu_interrupt_controller>
20403342:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20403346:	fa842783          	lw	a5,-88(s0)
2040334a:	1407a783          	lw	a5,320(a5)
2040334e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20403352:	fa842783          	lw	a5,-88(s0)
20403356:	1387a783          	lw	a5,312(a5)
2040335a:	fa442583          	lw	a1,-92(s0)
2040335e:	451d                	li	a0,7
20403360:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20403362:	0001                	nop
20403364:	40f6                	lw	ra,92(sp)
20403366:	42e6                	lw	t0,88(sp)
20403368:	4356                	lw	t1,84(sp)
2040336a:	43c6                	lw	t2,80(sp)
2040336c:	4436                	lw	s0,76(sp)
2040336e:	4526                	lw	a0,72(sp)
20403370:	4596                	lw	a1,68(sp)
20403372:	4606                	lw	a2,64(sp)
20403374:	56f2                	lw	a3,60(sp)
20403376:	5762                	lw	a4,56(sp)
20403378:	57d2                	lw	a5,52(sp)
2040337a:	5842                	lw	a6,48(sp)
2040337c:	58b2                	lw	a7,44(sp)
2040337e:	5e22                	lw	t3,40(sp)
20403380:	5e92                	lw	t4,36(sp)
20403382:	5f02                	lw	t5,32(sp)
20403384:	4ff2                	lw	t6,28(sp)
20403386:	6125                	addi	sp,sp,96
20403388:	30200073          	mret

2040338c <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
2040338c:	7179                	addi	sp,sp,-48
2040338e:	d606                	sw	ra,44(sp)
20403390:	d422                	sw	s0,40(sp)
20403392:	1800                	addi	s0,sp,48
20403394:	fca42e23          	sw	a0,-36(s0)
20403398:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
2040339c:	39d1                	jal	20403070 <__metal_myhart_id>
2040339e:	87aa                	mv	a5,a0
204033a0:	853e                	mv	a0,a5
204033a2:	314d                	jal	20403044 <__metal_driver_cpu_get>
204033a4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
204033a8:	fec42503          	lw	a0,-20(s0)
204033ac:	144010ef          	jal	ra,204044f0 <__metal_driver_cpu_mtime_get>
204033b0:	fea42023          	sw	a0,-32(s0)
204033b4:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
204033b8:	fe042783          	lw	a5,-32(s0)
204033bc:	fe442803          	lw	a6,-28(s0)
204033c0:	45a9                	li	a1,10
204033c2:	4601                	li	a2,0
204033c4:	00b786b3          	add	a3,a5,a1
204033c8:	8536                	mv	a0,a3
204033ca:	00f53533          	sltu	a0,a0,a5
204033ce:	00c80733          	add	a4,a6,a2
204033d2:	00e507b3          	add	a5,a0,a4
204033d6:	873e                	mv	a4,a5
204033d8:	87b6                	mv	a5,a3
204033da:	883a                	mv	a6,a4
204033dc:	85be                	mv	a1,a5
204033de:	8642                	mv	a2,a6
204033e0:	fec42503          	lw	a0,-20(s0)
204033e4:	172010ef          	jal	ra,20404556 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
204033e8:	0001                	nop
204033ea:	50b2                	lw	ra,44(sp)
204033ec:	5422                	lw	s0,40(sp)
204033ee:	6145                	addi	sp,sp,48
204033f0:	8082                	ret
	...

20403400 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20403400:	7119                	addi	sp,sp,-128
20403402:	de86                	sw	ra,124(sp)
20403404:	dc96                	sw	t0,120(sp)
20403406:	da9a                	sw	t1,116(sp)
20403408:	d89e                	sw	t2,112(sp)
2040340a:	d6a2                	sw	s0,108(sp)
2040340c:	d4aa                	sw	a0,104(sp)
2040340e:	d2ae                	sw	a1,100(sp)
20403410:	d0b2                	sw	a2,96(sp)
20403412:	ceb6                	sw	a3,92(sp)
20403414:	ccba                	sw	a4,88(sp)
20403416:	cabe                	sw	a5,84(sp)
20403418:	c8c2                	sw	a6,80(sp)
2040341a:	c6c6                	sw	a7,76(sp)
2040341c:	c4f2                	sw	t3,72(sp)
2040341e:	c2f6                	sw	t4,68(sp)
20403420:	c0fa                	sw	t5,64(sp)
20403422:	de7e                	sw	t6,60(sp)
20403424:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403426:	c4bff0ef          	jal	ra,20403070 <__metal_myhart_id>
2040342a:	872a                	mv	a4,a0
2040342c:	070a                	slli	a4,a4,0x2
2040342e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403432:	97ba                	add	a5,a5,a4
20403434:	439c                	lw	a5,0(a5)
20403436:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
2040343a:	342027f3          	csrr	a5,mcause
2040343e:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403442:	341027f3          	csrr	a5,mepc
20403446:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
2040344a:	343027f3          	csrr	a5,mtval
2040344e:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20403452:	305027f3          	csrr	a5,mtvec
20403456:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
2040345a:	fac42783          	lw	a5,-84(s0)
2040345e:	c7e9                	beqz	a5,20403528 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403460:	fac42503          	lw	a0,-84(s0)
20403464:	bb7ff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20403468:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
2040346c:	fa842783          	lw	a5,-88(s0)
20403470:	3ff7f793          	andi	a5,a5,1023
20403474:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20403478:	fa842783          	lw	a5,-88(s0)
2040347c:	0807d863          	bgez	a5,2040350c <__metal_exception_handler+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20403480:	f9442703          	lw	a4,-108(s0)
20403484:	47ad                	li	a5,11
20403486:	00e7d763          	bge	a5,a4,20403494 <__metal_exception_handler+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
2040348a:	f9c42783          	lw	a5,-100(s0)
2040348e:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20403492:	ef9d                	bnez	a5,204034d0 <__metal_exception_handler+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20403494:	f9842683          	lw	a3,-104(s0)
20403498:	f9442703          	lw	a4,-108(s0)
2040349c:	87ba                	mv	a5,a4
2040349e:	0786                	slli	a5,a5,0x1
204034a0:	97ba                	add	a5,a5,a4
204034a2:	078e                	slli	a5,a5,0x3
204034a4:	97b6                	add	a5,a5,a3
204034a6:	0987a783          	lw	a5,152(a5)
204034aa:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
204034ae:	f9842683          	lw	a3,-104(s0)
204034b2:	f9442703          	lw	a4,-108(s0)
204034b6:	87ba                	mv	a5,a4
204034b8:	0786                	slli	a5,a5,0x1
204034ba:	97ba                	add	a5,a5,a4
204034bc:	078e                	slli	a5,a5,0x3
204034be:	97b6                	add	a5,a5,a3
204034c0:	0907a783          	lw	a5,144(a5)
204034c4:	f8c42583          	lw	a1,-116(s0)
204034c8:	f9442503          	lw	a0,-108(s0)
204034cc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
204034ce:	a8a9                	j	20403528 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
204034d0:	f9c42783          	lw	a5,-100(s0)
204034d4:	03f7f713          	andi	a4,a5,63
204034d8:	4789                	li	a5,2
204034da:	04f71763          	bne	a4,a5,20403528 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
204034de:	307027f3          	csrr	a5,mtvt
204034e2:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204034e6:	f9842783          	lw	a5,-104(s0)
204034ea:	0dc7a783          	lw	a5,220(a5)
204034ee:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
204034f2:	f9042783          	lw	a5,-112(s0)
204034f6:	439c                	lw	a5,0(a5)
204034f8:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
204034fc:	f8842783          	lw	a5,-120(s0)
20403500:	f8c42583          	lw	a1,-116(s0)
20403504:	f9442503          	lw	a0,-108(s0)
20403508:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
2040350a:	a839                	j	20403528 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
2040350c:	f9842703          	lw	a4,-104(s0)
20403510:	f9442783          	lw	a5,-108(s0)
20403514:	0e078793          	addi	a5,a5,224
20403518:	078a                	slli	a5,a5,0x2
2040351a:	97ba                	add	a5,a5,a4
2040351c:	479c                	lw	a5,8(a5)
2040351e:	f9442583          	lw	a1,-108(s0)
20403522:	fac42503          	lw	a0,-84(s0)
20403526:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20403528:	50f6                	lw	ra,124(sp)
2040352a:	52e6                	lw	t0,120(sp)
2040352c:	5356                	lw	t1,116(sp)
2040352e:	53c6                	lw	t2,112(sp)
20403530:	5436                	lw	s0,108(sp)
20403532:	5526                	lw	a0,104(sp)
20403534:	5596                	lw	a1,100(sp)
20403536:	5606                	lw	a2,96(sp)
20403538:	46f6                	lw	a3,92(sp)
2040353a:	4766                	lw	a4,88(sp)
2040353c:	47d6                	lw	a5,84(sp)
2040353e:	4846                	lw	a6,80(sp)
20403540:	48b6                	lw	a7,76(sp)
20403542:	4e26                	lw	t3,72(sp)
20403544:	4e96                	lw	t4,68(sp)
20403546:	4f06                	lw	t5,64(sp)
20403548:	5ff2                	lw	t6,60(sp)
2040354a:	6109                	addi	sp,sp,128
2040354c:	30200073          	mret
	...

20403576 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20403576:	711d                	addi	sp,sp,-96
20403578:	ce86                	sw	ra,92(sp)
2040357a:	cc96                	sw	t0,88(sp)
2040357c:	ca9a                	sw	t1,84(sp)
2040357e:	c89e                	sw	t2,80(sp)
20403580:	c6a2                	sw	s0,76(sp)
20403582:	c4aa                	sw	a0,72(sp)
20403584:	c2ae                	sw	a1,68(sp)
20403586:	c0b2                	sw	a2,64(sp)
20403588:	de36                	sw	a3,60(sp)
2040358a:	dc3a                	sw	a4,56(sp)
2040358c:	da3e                	sw	a5,52(sp)
2040358e:	d842                	sw	a6,48(sp)
20403590:	d646                	sw	a7,44(sp)
20403592:	d472                	sw	t3,40(sp)
20403594:	d276                	sw	t4,36(sp)
20403596:	d07a                	sw	t5,32(sp)
20403598:	ce7e                	sw	t6,28(sp)
2040359a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040359c:	ad5ff0ef          	jal	ra,20403070 <__metal_myhart_id>
204035a0:	872a                	mv	a4,a0
204035a2:	070a                	slli	a4,a4,0x2
204035a4:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204035a8:	97ba                	add	a5,a5,a4
204035aa:	439c                	lw	a5,0(a5)
204035ac:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
204035b0:	fac42783          	lw	a5,-84(s0)
204035b4:	c78d                	beqz	a5,204035de <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204035b6:	fac42503          	lw	a0,-84(s0)
204035ba:	a61ff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
204035be:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
204035c2:	fa842783          	lw	a5,-88(s0)
204035c6:	2187a783          	lw	a5,536(a5)
204035ca:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
204035ce:	fa842783          	lw	a5,-88(s0)
204035d2:	2107a783          	lw	a5,528(a5)
204035d6:	fa442583          	lw	a1,-92(s0)
204035da:	4541                	li	a0,16
204035dc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
204035de:	0001                	nop
204035e0:	40f6                	lw	ra,92(sp)
204035e2:	42e6                	lw	t0,88(sp)
204035e4:	4356                	lw	t1,84(sp)
204035e6:	43c6                	lw	t2,80(sp)
204035e8:	4436                	lw	s0,76(sp)
204035ea:	4526                	lw	a0,72(sp)
204035ec:	4596                	lw	a1,68(sp)
204035ee:	4606                	lw	a2,64(sp)
204035f0:	56f2                	lw	a3,60(sp)
204035f2:	5762                	lw	a4,56(sp)
204035f4:	57d2                	lw	a5,52(sp)
204035f6:	5842                	lw	a6,48(sp)
204035f8:	58b2                	lw	a7,44(sp)
204035fa:	5e22                	lw	t3,40(sp)
204035fc:	5e92                	lw	t4,36(sp)
204035fe:	5f02                	lw	t5,32(sp)
20403600:	4ff2                	lw	t6,28(sp)
20403602:	6125                	addi	sp,sp,96
20403604:	30200073          	mret

20403608 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20403608:	711d                	addi	sp,sp,-96
2040360a:	ce86                	sw	ra,92(sp)
2040360c:	cc96                	sw	t0,88(sp)
2040360e:	ca9a                	sw	t1,84(sp)
20403610:	c89e                	sw	t2,80(sp)
20403612:	c6a2                	sw	s0,76(sp)
20403614:	c4aa                	sw	a0,72(sp)
20403616:	c2ae                	sw	a1,68(sp)
20403618:	c0b2                	sw	a2,64(sp)
2040361a:	de36                	sw	a3,60(sp)
2040361c:	dc3a                	sw	a4,56(sp)
2040361e:	da3e                	sw	a5,52(sp)
20403620:	d842                	sw	a6,48(sp)
20403622:	d646                	sw	a7,44(sp)
20403624:	d472                	sw	t3,40(sp)
20403626:	d276                	sw	t4,36(sp)
20403628:	d07a                	sw	t5,32(sp)
2040362a:	ce7e                	sw	t6,28(sp)
2040362c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040362e:	a43ff0ef          	jal	ra,20403070 <__metal_myhart_id>
20403632:	872a                	mv	a4,a0
20403634:	070a                	slli	a4,a4,0x2
20403636:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040363a:	97ba                	add	a5,a5,a4
2040363c:	439c                	lw	a5,0(a5)
2040363e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20403642:	fac42783          	lw	a5,-84(s0)
20403646:	c78d                	beqz	a5,20403670 <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403648:	fac42503          	lw	a0,-84(s0)
2040364c:	9cfff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20403650:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20403654:	fa842783          	lw	a5,-88(s0)
20403658:	2307a783          	lw	a5,560(a5)
2040365c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20403660:	fa842783          	lw	a5,-88(s0)
20403664:	2287a783          	lw	a5,552(a5)
20403668:	fa442583          	lw	a1,-92(s0)
2040366c:	4545                	li	a0,17
2040366e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20403670:	0001                	nop
20403672:	40f6                	lw	ra,92(sp)
20403674:	42e6                	lw	t0,88(sp)
20403676:	4356                	lw	t1,84(sp)
20403678:	43c6                	lw	t2,80(sp)
2040367a:	4436                	lw	s0,76(sp)
2040367c:	4526                	lw	a0,72(sp)
2040367e:	4596                	lw	a1,68(sp)
20403680:	4606                	lw	a2,64(sp)
20403682:	56f2                	lw	a3,60(sp)
20403684:	5762                	lw	a4,56(sp)
20403686:	57d2                	lw	a5,52(sp)
20403688:	5842                	lw	a6,48(sp)
2040368a:	58b2                	lw	a7,44(sp)
2040368c:	5e22                	lw	t3,40(sp)
2040368e:	5e92                	lw	t4,36(sp)
20403690:	5f02                	lw	t5,32(sp)
20403692:	4ff2                	lw	t6,28(sp)
20403694:	6125                	addi	sp,sp,96
20403696:	30200073          	mret

2040369a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
2040369a:	711d                	addi	sp,sp,-96
2040369c:	ce86                	sw	ra,92(sp)
2040369e:	cc96                	sw	t0,88(sp)
204036a0:	ca9a                	sw	t1,84(sp)
204036a2:	c89e                	sw	t2,80(sp)
204036a4:	c6a2                	sw	s0,76(sp)
204036a6:	c4aa                	sw	a0,72(sp)
204036a8:	c2ae                	sw	a1,68(sp)
204036aa:	c0b2                	sw	a2,64(sp)
204036ac:	de36                	sw	a3,60(sp)
204036ae:	dc3a                	sw	a4,56(sp)
204036b0:	da3e                	sw	a5,52(sp)
204036b2:	d842                	sw	a6,48(sp)
204036b4:	d646                	sw	a7,44(sp)
204036b6:	d472                	sw	t3,40(sp)
204036b8:	d276                	sw	t4,36(sp)
204036ba:	d07a                	sw	t5,32(sp)
204036bc:	ce7e                	sw	t6,28(sp)
204036be:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204036c0:	9b1ff0ef          	jal	ra,20403070 <__metal_myhart_id>
204036c4:	872a                	mv	a4,a0
204036c6:	070a                	slli	a4,a4,0x2
204036c8:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204036cc:	97ba                	add	a5,a5,a4
204036ce:	439c                	lw	a5,0(a5)
204036d0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
204036d4:	fac42783          	lw	a5,-84(s0)
204036d8:	c78d                	beqz	a5,20403702 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204036da:	fac42503          	lw	a0,-84(s0)
204036de:	93dff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
204036e2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
204036e6:	fa842783          	lw	a5,-88(s0)
204036ea:	2487a783          	lw	a5,584(a5)
204036ee:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
204036f2:	fa842783          	lw	a5,-88(s0)
204036f6:	2407a783          	lw	a5,576(a5)
204036fa:	fa442583          	lw	a1,-92(s0)
204036fe:	4549                	li	a0,18
20403700:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20403702:	0001                	nop
20403704:	40f6                	lw	ra,92(sp)
20403706:	42e6                	lw	t0,88(sp)
20403708:	4356                	lw	t1,84(sp)
2040370a:	43c6                	lw	t2,80(sp)
2040370c:	4436                	lw	s0,76(sp)
2040370e:	4526                	lw	a0,72(sp)
20403710:	4596                	lw	a1,68(sp)
20403712:	4606                	lw	a2,64(sp)
20403714:	56f2                	lw	a3,60(sp)
20403716:	5762                	lw	a4,56(sp)
20403718:	57d2                	lw	a5,52(sp)
2040371a:	5842                	lw	a6,48(sp)
2040371c:	58b2                	lw	a7,44(sp)
2040371e:	5e22                	lw	t3,40(sp)
20403720:	5e92                	lw	t4,36(sp)
20403722:	5f02                	lw	t5,32(sp)
20403724:	4ff2                	lw	t6,28(sp)
20403726:	6125                	addi	sp,sp,96
20403728:	30200073          	mret

2040372c <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
2040372c:	711d                	addi	sp,sp,-96
2040372e:	ce86                	sw	ra,92(sp)
20403730:	cc96                	sw	t0,88(sp)
20403732:	ca9a                	sw	t1,84(sp)
20403734:	c89e                	sw	t2,80(sp)
20403736:	c6a2                	sw	s0,76(sp)
20403738:	c4aa                	sw	a0,72(sp)
2040373a:	c2ae                	sw	a1,68(sp)
2040373c:	c0b2                	sw	a2,64(sp)
2040373e:	de36                	sw	a3,60(sp)
20403740:	dc3a                	sw	a4,56(sp)
20403742:	da3e                	sw	a5,52(sp)
20403744:	d842                	sw	a6,48(sp)
20403746:	d646                	sw	a7,44(sp)
20403748:	d472                	sw	t3,40(sp)
2040374a:	d276                	sw	t4,36(sp)
2040374c:	d07a                	sw	t5,32(sp)
2040374e:	ce7e                	sw	t6,28(sp)
20403750:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403752:	91fff0ef          	jal	ra,20403070 <__metal_myhart_id>
20403756:	872a                	mv	a4,a0
20403758:	070a                	slli	a4,a4,0x2
2040375a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040375e:	97ba                	add	a5,a5,a4
20403760:	439c                	lw	a5,0(a5)
20403762:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20403766:	fac42783          	lw	a5,-84(s0)
2040376a:	c78d                	beqz	a5,20403794 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040376c:	fac42503          	lw	a0,-84(s0)
20403770:	8abff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20403774:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20403778:	fa842783          	lw	a5,-88(s0)
2040377c:	2607a783          	lw	a5,608(a5)
20403780:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20403784:	fa842783          	lw	a5,-88(s0)
20403788:	2587a783          	lw	a5,600(a5)
2040378c:	fa442583          	lw	a1,-92(s0)
20403790:	454d                	li	a0,19
20403792:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20403794:	0001                	nop
20403796:	40f6                	lw	ra,92(sp)
20403798:	42e6                	lw	t0,88(sp)
2040379a:	4356                	lw	t1,84(sp)
2040379c:	43c6                	lw	t2,80(sp)
2040379e:	4436                	lw	s0,76(sp)
204037a0:	4526                	lw	a0,72(sp)
204037a2:	4596                	lw	a1,68(sp)
204037a4:	4606                	lw	a2,64(sp)
204037a6:	56f2                	lw	a3,60(sp)
204037a8:	5762                	lw	a4,56(sp)
204037aa:	57d2                	lw	a5,52(sp)
204037ac:	5842                	lw	a6,48(sp)
204037ae:	58b2                	lw	a7,44(sp)
204037b0:	5e22                	lw	t3,40(sp)
204037b2:	5e92                	lw	t4,36(sp)
204037b4:	5f02                	lw	t5,32(sp)
204037b6:	4ff2                	lw	t6,28(sp)
204037b8:	6125                	addi	sp,sp,96
204037ba:	30200073          	mret

204037be <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
204037be:	711d                	addi	sp,sp,-96
204037c0:	ce86                	sw	ra,92(sp)
204037c2:	cc96                	sw	t0,88(sp)
204037c4:	ca9a                	sw	t1,84(sp)
204037c6:	c89e                	sw	t2,80(sp)
204037c8:	c6a2                	sw	s0,76(sp)
204037ca:	c4aa                	sw	a0,72(sp)
204037cc:	c2ae                	sw	a1,68(sp)
204037ce:	c0b2                	sw	a2,64(sp)
204037d0:	de36                	sw	a3,60(sp)
204037d2:	dc3a                	sw	a4,56(sp)
204037d4:	da3e                	sw	a5,52(sp)
204037d6:	d842                	sw	a6,48(sp)
204037d8:	d646                	sw	a7,44(sp)
204037da:	d472                	sw	t3,40(sp)
204037dc:	d276                	sw	t4,36(sp)
204037de:	d07a                	sw	t5,32(sp)
204037e0:	ce7e                	sw	t6,28(sp)
204037e2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204037e4:	88dff0ef          	jal	ra,20403070 <__metal_myhart_id>
204037e8:	872a                	mv	a4,a0
204037ea:	070a                	slli	a4,a4,0x2
204037ec:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204037f0:	97ba                	add	a5,a5,a4
204037f2:	439c                	lw	a5,0(a5)
204037f4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
204037f8:	fac42783          	lw	a5,-84(s0)
204037fc:	c78d                	beqz	a5,20403826 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204037fe:	fac42503          	lw	a0,-84(s0)
20403802:	819ff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20403806:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
2040380a:	fa842783          	lw	a5,-88(s0)
2040380e:	2787a783          	lw	a5,632(a5)
20403812:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20403816:	fa842783          	lw	a5,-88(s0)
2040381a:	2707a783          	lw	a5,624(a5)
2040381e:	fa442583          	lw	a1,-92(s0)
20403822:	4551                	li	a0,20
20403824:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20403826:	0001                	nop
20403828:	40f6                	lw	ra,92(sp)
2040382a:	42e6                	lw	t0,88(sp)
2040382c:	4356                	lw	t1,84(sp)
2040382e:	43c6                	lw	t2,80(sp)
20403830:	4436                	lw	s0,76(sp)
20403832:	4526                	lw	a0,72(sp)
20403834:	4596                	lw	a1,68(sp)
20403836:	4606                	lw	a2,64(sp)
20403838:	56f2                	lw	a3,60(sp)
2040383a:	5762                	lw	a4,56(sp)
2040383c:	57d2                	lw	a5,52(sp)
2040383e:	5842                	lw	a6,48(sp)
20403840:	58b2                	lw	a7,44(sp)
20403842:	5e22                	lw	t3,40(sp)
20403844:	5e92                	lw	t4,36(sp)
20403846:	5f02                	lw	t5,32(sp)
20403848:	4ff2                	lw	t6,28(sp)
2040384a:	6125                	addi	sp,sp,96
2040384c:	30200073          	mret

20403850 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20403850:	711d                	addi	sp,sp,-96
20403852:	ce86                	sw	ra,92(sp)
20403854:	cc96                	sw	t0,88(sp)
20403856:	ca9a                	sw	t1,84(sp)
20403858:	c89e                	sw	t2,80(sp)
2040385a:	c6a2                	sw	s0,76(sp)
2040385c:	c4aa                	sw	a0,72(sp)
2040385e:	c2ae                	sw	a1,68(sp)
20403860:	c0b2                	sw	a2,64(sp)
20403862:	de36                	sw	a3,60(sp)
20403864:	dc3a                	sw	a4,56(sp)
20403866:	da3e                	sw	a5,52(sp)
20403868:	d842                	sw	a6,48(sp)
2040386a:	d646                	sw	a7,44(sp)
2040386c:	d472                	sw	t3,40(sp)
2040386e:	d276                	sw	t4,36(sp)
20403870:	d07a                	sw	t5,32(sp)
20403872:	ce7e                	sw	t6,28(sp)
20403874:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403876:	ffaff0ef          	jal	ra,20403070 <__metal_myhart_id>
2040387a:	872a                	mv	a4,a0
2040387c:	070a                	slli	a4,a4,0x2
2040387e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403882:	97ba                	add	a5,a5,a4
20403884:	439c                	lw	a5,0(a5)
20403886:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
2040388a:	fac42783          	lw	a5,-84(s0)
2040388e:	c78d                	beqz	a5,204038b8 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403890:	fac42503          	lw	a0,-84(s0)
20403894:	f86ff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20403898:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
2040389c:	fa842783          	lw	a5,-88(s0)
204038a0:	2907a783          	lw	a5,656(a5)
204038a4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
204038a8:	fa842783          	lw	a5,-88(s0)
204038ac:	2887a783          	lw	a5,648(a5)
204038b0:	fa442583          	lw	a1,-92(s0)
204038b4:	4555                	li	a0,21
204038b6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
204038b8:	0001                	nop
204038ba:	40f6                	lw	ra,92(sp)
204038bc:	42e6                	lw	t0,88(sp)
204038be:	4356                	lw	t1,84(sp)
204038c0:	43c6                	lw	t2,80(sp)
204038c2:	4436                	lw	s0,76(sp)
204038c4:	4526                	lw	a0,72(sp)
204038c6:	4596                	lw	a1,68(sp)
204038c8:	4606                	lw	a2,64(sp)
204038ca:	56f2                	lw	a3,60(sp)
204038cc:	5762                	lw	a4,56(sp)
204038ce:	57d2                	lw	a5,52(sp)
204038d0:	5842                	lw	a6,48(sp)
204038d2:	58b2                	lw	a7,44(sp)
204038d4:	5e22                	lw	t3,40(sp)
204038d6:	5e92                	lw	t4,36(sp)
204038d8:	5f02                	lw	t5,32(sp)
204038da:	4ff2                	lw	t6,28(sp)
204038dc:	6125                	addi	sp,sp,96
204038de:	30200073          	mret

204038e2 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
204038e2:	711d                	addi	sp,sp,-96
204038e4:	ce86                	sw	ra,92(sp)
204038e6:	cc96                	sw	t0,88(sp)
204038e8:	ca9a                	sw	t1,84(sp)
204038ea:	c89e                	sw	t2,80(sp)
204038ec:	c6a2                	sw	s0,76(sp)
204038ee:	c4aa                	sw	a0,72(sp)
204038f0:	c2ae                	sw	a1,68(sp)
204038f2:	c0b2                	sw	a2,64(sp)
204038f4:	de36                	sw	a3,60(sp)
204038f6:	dc3a                	sw	a4,56(sp)
204038f8:	da3e                	sw	a5,52(sp)
204038fa:	d842                	sw	a6,48(sp)
204038fc:	d646                	sw	a7,44(sp)
204038fe:	d472                	sw	t3,40(sp)
20403900:	d276                	sw	t4,36(sp)
20403902:	d07a                	sw	t5,32(sp)
20403904:	ce7e                	sw	t6,28(sp)
20403906:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403908:	f68ff0ef          	jal	ra,20403070 <__metal_myhart_id>
2040390c:	872a                	mv	a4,a0
2040390e:	070a                	slli	a4,a4,0x2
20403910:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403914:	97ba                	add	a5,a5,a4
20403916:	439c                	lw	a5,0(a5)
20403918:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
2040391c:	fac42783          	lw	a5,-84(s0)
20403920:	c78d                	beqz	a5,2040394a <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403922:	fac42503          	lw	a0,-84(s0)
20403926:	ef4ff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
2040392a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
2040392e:	fa842783          	lw	a5,-88(s0)
20403932:	2a87a783          	lw	a5,680(a5)
20403936:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
2040393a:	fa842783          	lw	a5,-88(s0)
2040393e:	2a07a783          	lw	a5,672(a5)
20403942:	fa442583          	lw	a1,-92(s0)
20403946:	4559                	li	a0,22
20403948:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
2040394a:	0001                	nop
2040394c:	40f6                	lw	ra,92(sp)
2040394e:	42e6                	lw	t0,88(sp)
20403950:	4356                	lw	t1,84(sp)
20403952:	43c6                	lw	t2,80(sp)
20403954:	4436                	lw	s0,76(sp)
20403956:	4526                	lw	a0,72(sp)
20403958:	4596                	lw	a1,68(sp)
2040395a:	4606                	lw	a2,64(sp)
2040395c:	56f2                	lw	a3,60(sp)
2040395e:	5762                	lw	a4,56(sp)
20403960:	57d2                	lw	a5,52(sp)
20403962:	5842                	lw	a6,48(sp)
20403964:	58b2                	lw	a7,44(sp)
20403966:	5e22                	lw	t3,40(sp)
20403968:	5e92                	lw	t4,36(sp)
2040396a:	5f02                	lw	t5,32(sp)
2040396c:	4ff2                	lw	t6,28(sp)
2040396e:	6125                	addi	sp,sp,96
20403970:	30200073          	mret

20403974 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20403974:	711d                	addi	sp,sp,-96
20403976:	ce86                	sw	ra,92(sp)
20403978:	cc96                	sw	t0,88(sp)
2040397a:	ca9a                	sw	t1,84(sp)
2040397c:	c89e                	sw	t2,80(sp)
2040397e:	c6a2                	sw	s0,76(sp)
20403980:	c4aa                	sw	a0,72(sp)
20403982:	c2ae                	sw	a1,68(sp)
20403984:	c0b2                	sw	a2,64(sp)
20403986:	de36                	sw	a3,60(sp)
20403988:	dc3a                	sw	a4,56(sp)
2040398a:	da3e                	sw	a5,52(sp)
2040398c:	d842                	sw	a6,48(sp)
2040398e:	d646                	sw	a7,44(sp)
20403990:	d472                	sw	t3,40(sp)
20403992:	d276                	sw	t4,36(sp)
20403994:	d07a                	sw	t5,32(sp)
20403996:	ce7e                	sw	t6,28(sp)
20403998:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040399a:	ed6ff0ef          	jal	ra,20403070 <__metal_myhart_id>
2040399e:	872a                	mv	a4,a0
204039a0:	070a                	slli	a4,a4,0x2
204039a2:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204039a6:	97ba                	add	a5,a5,a4
204039a8:	439c                	lw	a5,0(a5)
204039aa:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
204039ae:	fac42783          	lw	a5,-84(s0)
204039b2:	c78d                	beqz	a5,204039dc <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204039b4:	fac42503          	lw	a0,-84(s0)
204039b8:	e62ff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
204039bc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
204039c0:	fa842783          	lw	a5,-88(s0)
204039c4:	2c07a783          	lw	a5,704(a5)
204039c8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
204039cc:	fa842783          	lw	a5,-88(s0)
204039d0:	2b87a783          	lw	a5,696(a5)
204039d4:	fa442583          	lw	a1,-92(s0)
204039d8:	455d                	li	a0,23
204039da:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
204039dc:	0001                	nop
204039de:	40f6                	lw	ra,92(sp)
204039e0:	42e6                	lw	t0,88(sp)
204039e2:	4356                	lw	t1,84(sp)
204039e4:	43c6                	lw	t2,80(sp)
204039e6:	4436                	lw	s0,76(sp)
204039e8:	4526                	lw	a0,72(sp)
204039ea:	4596                	lw	a1,68(sp)
204039ec:	4606                	lw	a2,64(sp)
204039ee:	56f2                	lw	a3,60(sp)
204039f0:	5762                	lw	a4,56(sp)
204039f2:	57d2                	lw	a5,52(sp)
204039f4:	5842                	lw	a6,48(sp)
204039f6:	58b2                	lw	a7,44(sp)
204039f8:	5e22                	lw	t3,40(sp)
204039fa:	5e92                	lw	t4,36(sp)
204039fc:	5f02                	lw	t5,32(sp)
204039fe:	4ff2                	lw	t6,28(sp)
20403a00:	6125                	addi	sp,sp,96
20403a02:	30200073          	mret

20403a06 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20403a06:	711d                	addi	sp,sp,-96
20403a08:	ce86                	sw	ra,92(sp)
20403a0a:	cc96                	sw	t0,88(sp)
20403a0c:	ca9a                	sw	t1,84(sp)
20403a0e:	c89e                	sw	t2,80(sp)
20403a10:	c6a2                	sw	s0,76(sp)
20403a12:	c4aa                	sw	a0,72(sp)
20403a14:	c2ae                	sw	a1,68(sp)
20403a16:	c0b2                	sw	a2,64(sp)
20403a18:	de36                	sw	a3,60(sp)
20403a1a:	dc3a                	sw	a4,56(sp)
20403a1c:	da3e                	sw	a5,52(sp)
20403a1e:	d842                	sw	a6,48(sp)
20403a20:	d646                	sw	a7,44(sp)
20403a22:	d472                	sw	t3,40(sp)
20403a24:	d276                	sw	t4,36(sp)
20403a26:	d07a                	sw	t5,32(sp)
20403a28:	ce7e                	sw	t6,28(sp)
20403a2a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403a2c:	e44ff0ef          	jal	ra,20403070 <__metal_myhart_id>
20403a30:	872a                	mv	a4,a0
20403a32:	070a                	slli	a4,a4,0x2
20403a34:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403a38:	97ba                	add	a5,a5,a4
20403a3a:	439c                	lw	a5,0(a5)
20403a3c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20403a40:	fac42783          	lw	a5,-84(s0)
20403a44:	c78d                	beqz	a5,20403a6e <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403a46:	fac42503          	lw	a0,-84(s0)
20403a4a:	dd0ff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20403a4e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20403a52:	fa842783          	lw	a5,-88(s0)
20403a56:	2d87a783          	lw	a5,728(a5)
20403a5a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20403a5e:	fa842783          	lw	a5,-88(s0)
20403a62:	2d07a783          	lw	a5,720(a5)
20403a66:	fa442583          	lw	a1,-92(s0)
20403a6a:	4561                	li	a0,24
20403a6c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20403a6e:	0001                	nop
20403a70:	40f6                	lw	ra,92(sp)
20403a72:	42e6                	lw	t0,88(sp)
20403a74:	4356                	lw	t1,84(sp)
20403a76:	43c6                	lw	t2,80(sp)
20403a78:	4436                	lw	s0,76(sp)
20403a7a:	4526                	lw	a0,72(sp)
20403a7c:	4596                	lw	a1,68(sp)
20403a7e:	4606                	lw	a2,64(sp)
20403a80:	56f2                	lw	a3,60(sp)
20403a82:	5762                	lw	a4,56(sp)
20403a84:	57d2                	lw	a5,52(sp)
20403a86:	5842                	lw	a6,48(sp)
20403a88:	58b2                	lw	a7,44(sp)
20403a8a:	5e22                	lw	t3,40(sp)
20403a8c:	5e92                	lw	t4,36(sp)
20403a8e:	5f02                	lw	t5,32(sp)
20403a90:	4ff2                	lw	t6,28(sp)
20403a92:	6125                	addi	sp,sp,96
20403a94:	30200073          	mret

20403a98 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20403a98:	711d                	addi	sp,sp,-96
20403a9a:	ce86                	sw	ra,92(sp)
20403a9c:	cc96                	sw	t0,88(sp)
20403a9e:	ca9a                	sw	t1,84(sp)
20403aa0:	c89e                	sw	t2,80(sp)
20403aa2:	c6a2                	sw	s0,76(sp)
20403aa4:	c4aa                	sw	a0,72(sp)
20403aa6:	c2ae                	sw	a1,68(sp)
20403aa8:	c0b2                	sw	a2,64(sp)
20403aaa:	de36                	sw	a3,60(sp)
20403aac:	dc3a                	sw	a4,56(sp)
20403aae:	da3e                	sw	a5,52(sp)
20403ab0:	d842                	sw	a6,48(sp)
20403ab2:	d646                	sw	a7,44(sp)
20403ab4:	d472                	sw	t3,40(sp)
20403ab6:	d276                	sw	t4,36(sp)
20403ab8:	d07a                	sw	t5,32(sp)
20403aba:	ce7e                	sw	t6,28(sp)
20403abc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403abe:	db2ff0ef          	jal	ra,20403070 <__metal_myhart_id>
20403ac2:	872a                	mv	a4,a0
20403ac4:	070a                	slli	a4,a4,0x2
20403ac6:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403aca:	97ba                	add	a5,a5,a4
20403acc:	439c                	lw	a5,0(a5)
20403ace:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20403ad2:	fac42783          	lw	a5,-84(s0)
20403ad6:	c78d                	beqz	a5,20403b00 <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403ad8:	fac42503          	lw	a0,-84(s0)
20403adc:	d3eff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20403ae0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20403ae4:	fa842783          	lw	a5,-88(s0)
20403ae8:	2f07a783          	lw	a5,752(a5)
20403aec:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20403af0:	fa842783          	lw	a5,-88(s0)
20403af4:	2e87a783          	lw	a5,744(a5)
20403af8:	fa442583          	lw	a1,-92(s0)
20403afc:	4565                	li	a0,25
20403afe:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20403b00:	0001                	nop
20403b02:	40f6                	lw	ra,92(sp)
20403b04:	42e6                	lw	t0,88(sp)
20403b06:	4356                	lw	t1,84(sp)
20403b08:	43c6                	lw	t2,80(sp)
20403b0a:	4436                	lw	s0,76(sp)
20403b0c:	4526                	lw	a0,72(sp)
20403b0e:	4596                	lw	a1,68(sp)
20403b10:	4606                	lw	a2,64(sp)
20403b12:	56f2                	lw	a3,60(sp)
20403b14:	5762                	lw	a4,56(sp)
20403b16:	57d2                	lw	a5,52(sp)
20403b18:	5842                	lw	a6,48(sp)
20403b1a:	58b2                	lw	a7,44(sp)
20403b1c:	5e22                	lw	t3,40(sp)
20403b1e:	5e92                	lw	t4,36(sp)
20403b20:	5f02                	lw	t5,32(sp)
20403b22:	4ff2                	lw	t6,28(sp)
20403b24:	6125                	addi	sp,sp,96
20403b26:	30200073          	mret

20403b2a <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
20403b2a:	711d                	addi	sp,sp,-96
20403b2c:	ce86                	sw	ra,92(sp)
20403b2e:	cc96                	sw	t0,88(sp)
20403b30:	ca9a                	sw	t1,84(sp)
20403b32:	c89e                	sw	t2,80(sp)
20403b34:	c6a2                	sw	s0,76(sp)
20403b36:	c4aa                	sw	a0,72(sp)
20403b38:	c2ae                	sw	a1,68(sp)
20403b3a:	c0b2                	sw	a2,64(sp)
20403b3c:	de36                	sw	a3,60(sp)
20403b3e:	dc3a                	sw	a4,56(sp)
20403b40:	da3e                	sw	a5,52(sp)
20403b42:	d842                	sw	a6,48(sp)
20403b44:	d646                	sw	a7,44(sp)
20403b46:	d472                	sw	t3,40(sp)
20403b48:	d276                	sw	t4,36(sp)
20403b4a:	d07a                	sw	t5,32(sp)
20403b4c:	ce7e                	sw	t6,28(sp)
20403b4e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403b50:	d20ff0ef          	jal	ra,20403070 <__metal_myhart_id>
20403b54:	872a                	mv	a4,a0
20403b56:	070a                	slli	a4,a4,0x2
20403b58:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403b5c:	97ba                	add	a5,a5,a4
20403b5e:	439c                	lw	a5,0(a5)
20403b60:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20403b64:	fac42783          	lw	a5,-84(s0)
20403b68:	c78d                	beqz	a5,20403b92 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403b6a:	fac42503          	lw	a0,-84(s0)
20403b6e:	cacff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20403b72:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20403b76:	fa842783          	lw	a5,-88(s0)
20403b7a:	3087a783          	lw	a5,776(a5)
20403b7e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403b82:	fa842783          	lw	a5,-88(s0)
20403b86:	3007a783          	lw	a5,768(a5)
20403b8a:	fa442583          	lw	a1,-92(s0)
20403b8e:	4569                	li	a0,26
20403b90:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403b92:	0001                	nop
20403b94:	40f6                	lw	ra,92(sp)
20403b96:	42e6                	lw	t0,88(sp)
20403b98:	4356                	lw	t1,84(sp)
20403b9a:	43c6                	lw	t2,80(sp)
20403b9c:	4436                	lw	s0,76(sp)
20403b9e:	4526                	lw	a0,72(sp)
20403ba0:	4596                	lw	a1,68(sp)
20403ba2:	4606                	lw	a2,64(sp)
20403ba4:	56f2                	lw	a3,60(sp)
20403ba6:	5762                	lw	a4,56(sp)
20403ba8:	57d2                	lw	a5,52(sp)
20403baa:	5842                	lw	a6,48(sp)
20403bac:	58b2                	lw	a7,44(sp)
20403bae:	5e22                	lw	t3,40(sp)
20403bb0:	5e92                	lw	t4,36(sp)
20403bb2:	5f02                	lw	t5,32(sp)
20403bb4:	4ff2                	lw	t6,28(sp)
20403bb6:	6125                	addi	sp,sp,96
20403bb8:	30200073          	mret

20403bbc <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
20403bbc:	711d                	addi	sp,sp,-96
20403bbe:	ce86                	sw	ra,92(sp)
20403bc0:	cc96                	sw	t0,88(sp)
20403bc2:	ca9a                	sw	t1,84(sp)
20403bc4:	c89e                	sw	t2,80(sp)
20403bc6:	c6a2                	sw	s0,76(sp)
20403bc8:	c4aa                	sw	a0,72(sp)
20403bca:	c2ae                	sw	a1,68(sp)
20403bcc:	c0b2                	sw	a2,64(sp)
20403bce:	de36                	sw	a3,60(sp)
20403bd0:	dc3a                	sw	a4,56(sp)
20403bd2:	da3e                	sw	a5,52(sp)
20403bd4:	d842                	sw	a6,48(sp)
20403bd6:	d646                	sw	a7,44(sp)
20403bd8:	d472                	sw	t3,40(sp)
20403bda:	d276                	sw	t4,36(sp)
20403bdc:	d07a                	sw	t5,32(sp)
20403bde:	ce7e                	sw	t6,28(sp)
20403be0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403be2:	c8eff0ef          	jal	ra,20403070 <__metal_myhart_id>
20403be6:	872a                	mv	a4,a0
20403be8:	070a                	slli	a4,a4,0x2
20403bea:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403bee:	97ba                	add	a5,a5,a4
20403bf0:	439c                	lw	a5,0(a5)
20403bf2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20403bf6:	fac42783          	lw	a5,-84(s0)
20403bfa:	c78d                	beqz	a5,20403c24 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403bfc:	fac42503          	lw	a0,-84(s0)
20403c00:	c1aff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20403c04:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403c08:	fa842783          	lw	a5,-88(s0)
20403c0c:	3207a783          	lw	a5,800(a5)
20403c10:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403c14:	fa842783          	lw	a5,-88(s0)
20403c18:	3187a783          	lw	a5,792(a5)
20403c1c:	fa442583          	lw	a1,-92(s0)
20403c20:	456d                	li	a0,27
20403c22:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20403c24:	0001                	nop
20403c26:	40f6                	lw	ra,92(sp)
20403c28:	42e6                	lw	t0,88(sp)
20403c2a:	4356                	lw	t1,84(sp)
20403c2c:	43c6                	lw	t2,80(sp)
20403c2e:	4436                	lw	s0,76(sp)
20403c30:	4526                	lw	a0,72(sp)
20403c32:	4596                	lw	a1,68(sp)
20403c34:	4606                	lw	a2,64(sp)
20403c36:	56f2                	lw	a3,60(sp)
20403c38:	5762                	lw	a4,56(sp)
20403c3a:	57d2                	lw	a5,52(sp)
20403c3c:	5842                	lw	a6,48(sp)
20403c3e:	58b2                	lw	a7,44(sp)
20403c40:	5e22                	lw	t3,40(sp)
20403c42:	5e92                	lw	t4,36(sp)
20403c44:	5f02                	lw	t5,32(sp)
20403c46:	4ff2                	lw	t6,28(sp)
20403c48:	6125                	addi	sp,sp,96
20403c4a:	30200073          	mret

20403c4e <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
20403c4e:	711d                	addi	sp,sp,-96
20403c50:	ce86                	sw	ra,92(sp)
20403c52:	cc96                	sw	t0,88(sp)
20403c54:	ca9a                	sw	t1,84(sp)
20403c56:	c89e                	sw	t2,80(sp)
20403c58:	c6a2                	sw	s0,76(sp)
20403c5a:	c4aa                	sw	a0,72(sp)
20403c5c:	c2ae                	sw	a1,68(sp)
20403c5e:	c0b2                	sw	a2,64(sp)
20403c60:	de36                	sw	a3,60(sp)
20403c62:	dc3a                	sw	a4,56(sp)
20403c64:	da3e                	sw	a5,52(sp)
20403c66:	d842                	sw	a6,48(sp)
20403c68:	d646                	sw	a7,44(sp)
20403c6a:	d472                	sw	t3,40(sp)
20403c6c:	d276                	sw	t4,36(sp)
20403c6e:	d07a                	sw	t5,32(sp)
20403c70:	ce7e                	sw	t6,28(sp)
20403c72:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403c74:	bfcff0ef          	jal	ra,20403070 <__metal_myhart_id>
20403c78:	872a                	mv	a4,a0
20403c7a:	070a                	slli	a4,a4,0x2
20403c7c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403c80:	97ba                	add	a5,a5,a4
20403c82:	439c                	lw	a5,0(a5)
20403c84:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403c88:	fac42783          	lw	a5,-84(s0)
20403c8c:	c78d                	beqz	a5,20403cb6 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403c8e:	fac42503          	lw	a0,-84(s0)
20403c92:	b88ff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20403c96:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20403c9a:	fa842783          	lw	a5,-88(s0)
20403c9e:	3387a783          	lw	a5,824(a5)
20403ca2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20403ca6:	fa842783          	lw	a5,-88(s0)
20403caa:	3307a783          	lw	a5,816(a5)
20403cae:	fa442583          	lw	a1,-92(s0)
20403cb2:	4571                	li	a0,28
20403cb4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20403cb6:	0001                	nop
20403cb8:	40f6                	lw	ra,92(sp)
20403cba:	42e6                	lw	t0,88(sp)
20403cbc:	4356                	lw	t1,84(sp)
20403cbe:	43c6                	lw	t2,80(sp)
20403cc0:	4436                	lw	s0,76(sp)
20403cc2:	4526                	lw	a0,72(sp)
20403cc4:	4596                	lw	a1,68(sp)
20403cc6:	4606                	lw	a2,64(sp)
20403cc8:	56f2                	lw	a3,60(sp)
20403cca:	5762                	lw	a4,56(sp)
20403ccc:	57d2                	lw	a5,52(sp)
20403cce:	5842                	lw	a6,48(sp)
20403cd0:	58b2                	lw	a7,44(sp)
20403cd2:	5e22                	lw	t3,40(sp)
20403cd4:	5e92                	lw	t4,36(sp)
20403cd6:	5f02                	lw	t5,32(sp)
20403cd8:	4ff2                	lw	t6,28(sp)
20403cda:	6125                	addi	sp,sp,96
20403cdc:	30200073          	mret

20403ce0 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20403ce0:	711d                	addi	sp,sp,-96
20403ce2:	ce86                	sw	ra,92(sp)
20403ce4:	cc96                	sw	t0,88(sp)
20403ce6:	ca9a                	sw	t1,84(sp)
20403ce8:	c89e                	sw	t2,80(sp)
20403cea:	c6a2                	sw	s0,76(sp)
20403cec:	c4aa                	sw	a0,72(sp)
20403cee:	c2ae                	sw	a1,68(sp)
20403cf0:	c0b2                	sw	a2,64(sp)
20403cf2:	de36                	sw	a3,60(sp)
20403cf4:	dc3a                	sw	a4,56(sp)
20403cf6:	da3e                	sw	a5,52(sp)
20403cf8:	d842                	sw	a6,48(sp)
20403cfa:	d646                	sw	a7,44(sp)
20403cfc:	d472                	sw	t3,40(sp)
20403cfe:	d276                	sw	t4,36(sp)
20403d00:	d07a                	sw	t5,32(sp)
20403d02:	ce7e                	sw	t6,28(sp)
20403d04:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403d06:	b6aff0ef          	jal	ra,20403070 <__metal_myhart_id>
20403d0a:	872a                	mv	a4,a0
20403d0c:	070a                	slli	a4,a4,0x2
20403d0e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403d12:	97ba                	add	a5,a5,a4
20403d14:	439c                	lw	a5,0(a5)
20403d16:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20403d1a:	fac42783          	lw	a5,-84(s0)
20403d1e:	c78d                	beqz	a5,20403d48 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403d20:	fac42503          	lw	a0,-84(s0)
20403d24:	af6ff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20403d28:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
20403d2c:	fa842783          	lw	a5,-88(s0)
20403d30:	3507a783          	lw	a5,848(a5)
20403d34:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20403d38:	fa842783          	lw	a5,-88(s0)
20403d3c:	3487a783          	lw	a5,840(a5)
20403d40:	fa442583          	lw	a1,-92(s0)
20403d44:	4575                	li	a0,29
20403d46:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20403d48:	0001                	nop
20403d4a:	40f6                	lw	ra,92(sp)
20403d4c:	42e6                	lw	t0,88(sp)
20403d4e:	4356                	lw	t1,84(sp)
20403d50:	43c6                	lw	t2,80(sp)
20403d52:	4436                	lw	s0,76(sp)
20403d54:	4526                	lw	a0,72(sp)
20403d56:	4596                	lw	a1,68(sp)
20403d58:	4606                	lw	a2,64(sp)
20403d5a:	56f2                	lw	a3,60(sp)
20403d5c:	5762                	lw	a4,56(sp)
20403d5e:	57d2                	lw	a5,52(sp)
20403d60:	5842                	lw	a6,48(sp)
20403d62:	58b2                	lw	a7,44(sp)
20403d64:	5e22                	lw	t3,40(sp)
20403d66:	5e92                	lw	t4,36(sp)
20403d68:	5f02                	lw	t5,32(sp)
20403d6a:	4ff2                	lw	t6,28(sp)
20403d6c:	6125                	addi	sp,sp,96
20403d6e:	30200073          	mret

20403d72 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20403d72:	711d                	addi	sp,sp,-96
20403d74:	ce86                	sw	ra,92(sp)
20403d76:	cc96                	sw	t0,88(sp)
20403d78:	ca9a                	sw	t1,84(sp)
20403d7a:	c89e                	sw	t2,80(sp)
20403d7c:	c6a2                	sw	s0,76(sp)
20403d7e:	c4aa                	sw	a0,72(sp)
20403d80:	c2ae                	sw	a1,68(sp)
20403d82:	c0b2                	sw	a2,64(sp)
20403d84:	de36                	sw	a3,60(sp)
20403d86:	dc3a                	sw	a4,56(sp)
20403d88:	da3e                	sw	a5,52(sp)
20403d8a:	d842                	sw	a6,48(sp)
20403d8c:	d646                	sw	a7,44(sp)
20403d8e:	d472                	sw	t3,40(sp)
20403d90:	d276                	sw	t4,36(sp)
20403d92:	d07a                	sw	t5,32(sp)
20403d94:	ce7e                	sw	t6,28(sp)
20403d96:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403d98:	ad8ff0ef          	jal	ra,20403070 <__metal_myhart_id>
20403d9c:	872a                	mv	a4,a0
20403d9e:	070a                	slli	a4,a4,0x2
20403da0:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403da4:	97ba                	add	a5,a5,a4
20403da6:	439c                	lw	a5,0(a5)
20403da8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
20403dac:	fac42783          	lw	a5,-84(s0)
20403db0:	c78d                	beqz	a5,20403dda <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403db2:	fac42503          	lw	a0,-84(s0)
20403db6:	a64ff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20403dba:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
20403dbe:	fa842783          	lw	a5,-88(s0)
20403dc2:	3687a783          	lw	a5,872(a5)
20403dc6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20403dca:	fa842783          	lw	a5,-88(s0)
20403dce:	3607a783          	lw	a5,864(a5)
20403dd2:	fa442583          	lw	a1,-92(s0)
20403dd6:	4579                	li	a0,30
20403dd8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20403dda:	0001                	nop
20403ddc:	40f6                	lw	ra,92(sp)
20403dde:	42e6                	lw	t0,88(sp)
20403de0:	4356                	lw	t1,84(sp)
20403de2:	43c6                	lw	t2,80(sp)
20403de4:	4436                	lw	s0,76(sp)
20403de6:	4526                	lw	a0,72(sp)
20403de8:	4596                	lw	a1,68(sp)
20403dea:	4606                	lw	a2,64(sp)
20403dec:	56f2                	lw	a3,60(sp)
20403dee:	5762                	lw	a4,56(sp)
20403df0:	57d2                	lw	a5,52(sp)
20403df2:	5842                	lw	a6,48(sp)
20403df4:	58b2                	lw	a7,44(sp)
20403df6:	5e22                	lw	t3,40(sp)
20403df8:	5e92                	lw	t4,36(sp)
20403dfa:	5f02                	lw	t5,32(sp)
20403dfc:	4ff2                	lw	t6,28(sp)
20403dfe:	6125                	addi	sp,sp,96
20403e00:	30200073          	mret

20403e04 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403e04:	711d                	addi	sp,sp,-96
20403e06:	ce86                	sw	ra,92(sp)
20403e08:	cc96                	sw	t0,88(sp)
20403e0a:	ca9a                	sw	t1,84(sp)
20403e0c:	c89e                	sw	t2,80(sp)
20403e0e:	c6a2                	sw	s0,76(sp)
20403e10:	c4aa                	sw	a0,72(sp)
20403e12:	c2ae                	sw	a1,68(sp)
20403e14:	c0b2                	sw	a2,64(sp)
20403e16:	de36                	sw	a3,60(sp)
20403e18:	dc3a                	sw	a4,56(sp)
20403e1a:	da3e                	sw	a5,52(sp)
20403e1c:	d842                	sw	a6,48(sp)
20403e1e:	d646                	sw	a7,44(sp)
20403e20:	d472                	sw	t3,40(sp)
20403e22:	d276                	sw	t4,36(sp)
20403e24:	d07a                	sw	t5,32(sp)
20403e26:	ce7e                	sw	t6,28(sp)
20403e28:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403e2a:	a46ff0ef          	jal	ra,20403070 <__metal_myhart_id>
20403e2e:	872a                	mv	a4,a0
20403e30:	070a                	slli	a4,a4,0x2
20403e32:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403e36:	97ba                	add	a5,a5,a4
20403e38:	439c                	lw	a5,0(a5)
20403e3a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
20403e3e:	fac42783          	lw	a5,-84(s0)
20403e42:	c78d                	beqz	a5,20403e6c <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403e44:	fac42503          	lw	a0,-84(s0)
20403e48:	9d2ff0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20403e4c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
20403e50:	fa842783          	lw	a5,-88(s0)
20403e54:	3807a783          	lw	a5,896(a5)
20403e58:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
20403e5c:	fa842783          	lw	a5,-88(s0)
20403e60:	3787a783          	lw	a5,888(a5)
20403e64:	fa442583          	lw	a1,-92(s0)
20403e68:	457d                	li	a0,31
20403e6a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
20403e6c:	0001                	nop
20403e6e:	40f6                	lw	ra,92(sp)
20403e70:	42e6                	lw	t0,88(sp)
20403e72:	4356                	lw	t1,84(sp)
20403e74:	43c6                	lw	t2,80(sp)
20403e76:	4436                	lw	s0,76(sp)
20403e78:	4526                	lw	a0,72(sp)
20403e7a:	4596                	lw	a1,68(sp)
20403e7c:	4606                	lw	a2,64(sp)
20403e7e:	56f2                	lw	a3,60(sp)
20403e80:	5762                	lw	a4,56(sp)
20403e82:	57d2                	lw	a5,52(sp)
20403e84:	5842                	lw	a6,48(sp)
20403e86:	58b2                	lw	a7,44(sp)
20403e88:	5e22                	lw	t3,40(sp)
20403e8a:	5e92                	lw	t4,36(sp)
20403e8c:	5f02                	lw	t5,32(sp)
20403e8e:	4ff2                	lw	t6,28(sp)
20403e90:	6125                	addi	sp,sp,96
20403e92:	30200073          	mret

20403e96 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403e96:	1101                	addi	sp,sp,-32
20403e98:	ce22                	sw	s0,28(sp)
20403e9a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20403e9c:	305027f3          	csrr	a5,mtvec
20403ea0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403ea4:	fec42783          	lw	a5,-20(s0)
20403ea8:	03f7f793          	andi	a5,a5,63
20403eac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
20403eb0:	fec42703          	lw	a4,-20(s0)
20403eb4:	4789                	li	a5,2
20403eb6:	00f70d63          	beq	a4,a5,20403ed0 <__metal_controller_interrupt_vector_mode+0x3a>
20403eba:	fec42703          	lw	a4,-20(s0)
20403ebe:	478d                	li	a5,3
20403ec0:	00f70a63          	beq	a4,a5,20403ed4 <__metal_controller_interrupt_vector_mode+0x3e>
20403ec4:	fec42703          	lw	a4,-20(s0)
20403ec8:	4785                	li	a5,1
20403eca:	00f70763          	beq	a4,a5,20403ed8 <__metal_controller_interrupt_vector_mode+0x42>
20403ece:	a039                	j	20403edc <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
20403ed0:	478d                	li	a5,3
20403ed2:	a031                	j	20403ede <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403ed4:	4791                	li	a5,4
20403ed6:	a021                	j	20403ede <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403ed8:	4785                	li	a5,1
20403eda:	a011                	j	20403ede <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
20403edc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
20403ede:	853e                	mv	a0,a5
20403ee0:	4472                	lw	s0,28(sp)
20403ee2:	6105                	addi	sp,sp,32
20403ee4:	8082                	ret

20403ee6 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403ee6:	7179                	addi	sp,sp,-48
20403ee8:	d622                	sw	s0,44(sp)
20403eea:	1800                	addi	s0,sp,48
20403eec:	fca42e23          	sw	a0,-36(s0)
20403ef0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403ef4:	305027f3          	csrr	a5,mtvec
20403ef8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
20403efc:	fec42783          	lw	a5,-20(s0)
20403f00:	fc07f793          	andi	a5,a5,-64
20403f04:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403f08:	fd842783          	lw	a5,-40(s0)
20403f0c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20403f10:	fdc42703          	lw	a4,-36(s0)
20403f14:	4791                	li	a5,4
20403f16:	06e7e063          	bltu	a5,a4,20403f76 <__metal_controller_interrupt_vector+0x90>
20403f1a:	fdc42783          	lw	a5,-36(s0)
20403f1e:	00279713          	slli	a4,a5,0x2
20403f22:	204067b7          	lui	a5,0x20406
20403f26:	07878793          	addi	a5,a5,120 # 20406078 <__metal_driver_vtable_riscv_clint0+0x4c>
20403f2a:	97ba                	add	a5,a5,a4
20403f2c:	439c                	lw	a5,0(a5)
20403f2e:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403f30:	fe842783          	lw	a5,-24(s0)
20403f34:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20403f38:	fec42783          	lw	a5,-20(s0)
20403f3c:	0027e793          	ori	a5,a5,2
20403f40:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20403f44:	a80d                	j	20403f76 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403f46:	fe842783          	lw	a5,-24(s0)
20403f4a:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
20403f4e:	fec42783          	lw	a5,-20(s0)
20403f52:	0037e793          	ori	a5,a5,3
20403f56:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
20403f5a:	a831                	j	20403f76 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
20403f5c:	fe842783          	lw	a5,-24(s0)
20403f60:	0017e793          	ori	a5,a5,1
20403f64:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20403f68:	a039                	j	20403f76 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20403f6a:	fe842783          	lw	a5,-24(s0)
20403f6e:	9bf1                	andi	a5,a5,-4
20403f70:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20403f74:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20403f76:	0001                	nop
20403f78:	5432                	lw	s0,44(sp)
20403f7a:	6145                	addi	sp,sp,48
20403f7c:	8082                	ret

20403f7e <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
20403f7e:	1101                	addi	sp,sp,-32
20403f80:	ce22                	sw	s0,28(sp)
20403f82:	1000                	addi	s0,sp,32
20403f84:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403f88:	fec42783          	lw	a5,-20(s0)
20403f8c:	17f5                	addi	a5,a5,-3
20403f8e:	4771                	li	a4,28
20403f90:	00f76d63          	bltu	a4,a5,20403faa <__metal_valid_interrupt_id+0x2c>
20403f94:	00279713          	slli	a4,a5,0x2
20403f98:	204067b7          	lui	a5,0x20406
20403f9c:	08c78793          	addi	a5,a5,140 # 2040608c <__metal_driver_vtable_riscv_clint0+0x60>
20403fa0:	97ba                	add	a5,a5,a4
20403fa2:	439c                	lw	a5,0(a5)
20403fa4:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20403fa6:	4785                	li	a5,1
20403fa8:	a019                	j	20403fae <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20403faa:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
20403fac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
20403fae:	853e                	mv	a0,a5
20403fb0:	4472                	lw	s0,28(sp)
20403fb2:	6105                	addi	sp,sp,32
20403fb4:	8082                	ret

20403fb6 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20403fb6:	7179                	addi	sp,sp,-48
20403fb8:	d606                	sw	ra,44(sp)
20403fba:	d422                	sw	s0,40(sp)
20403fbc:	1800                	addi	s0,sp,48
20403fbe:	fca42e23          	sw	a0,-36(s0)
20403fc2:	fcb42c23          	sw	a1,-40(s0)
20403fc6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20403fca:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
20403fce:	fdc42783          	lw	a5,-36(s0)
20403fd2:	e399                	bnez	a5,20403fd8 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20403fd4:	57fd                	li	a5,-1
20403fd6:	a849                	j	20404068 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20403fd8:	fd842703          	lw	a4,-40(s0)
20403fdc:	47fd                	li	a5,31
20403fde:	08e7e063          	bltu	a5,a4,2040405e <__metal_local_interrupt_enable+0xa8>
20403fe2:	fd842783          	lw	a5,-40(s0)
20403fe6:	00279713          	slli	a4,a5,0x2
20403fea:	204067b7          	lui	a5,0x20406
20403fee:	10078793          	addi	a5,a5,256 # 20406100 <__metal_driver_vtable_riscv_clint0+0xd4>
20403ff2:	97ba                	add	a5,a5,a4
20403ff4:	439c                	lw	a5,0(a5)
20403ff6:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403ff8:	fd442783          	lw	a5,-44(s0)
20403ffc:	c781                	beqz	a5,20404004 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
20403ffe:	88cff0ef          	jal	ra,2040308a <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20404002:	a08d                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20404004:	89eff0ef          	jal	ra,204030a2 <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20404008:	a8b1                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
2040400a:	fd442783          	lw	a5,-44(s0)
2040400e:	c781                	beqz	a5,20404016 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20404010:	8aaff0ef          	jal	ra,204030ba <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20404014:	a881                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20404016:	8bcff0ef          	jal	ra,204030d2 <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
2040401a:	a0a9                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040401c:	fd442783          	lw	a5,-44(s0)
20404020:	c781                	beqz	a5,20404028 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20404022:	8c8ff0ef          	jal	ra,204030ea <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20404026:	a83d                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20404028:	8dcff0ef          	jal	ra,20403104 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
2040402c:	a825                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
2040402e:	fd442783          	lw	a5,-44(s0)
20404032:	c781                	beqz	a5,2040403a <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20404034:	8eaff0ef          	jal	ra,2040311e <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20404038:	a035                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
2040403a:	900ff0ef          	jal	ra,2040313a <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
2040403e:	a01d                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20404040:	fd442783          	lw	a5,-44(s0)
20404044:	c799                	beqz	a5,20404052 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20404046:	fd842783          	lw	a5,-40(s0)
2040404a:	853e                	mv	a0,a5
2040404c:	90aff0ef          	jal	ra,20403156 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20404050:	a811                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20404052:	fd842783          	lw	a5,-40(s0)
20404056:	853e                	mv	a0,a5
20404058:	92aff0ef          	jal	ra,20403182 <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
2040405c:	a021                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
2040405e:	57fd                	li	a5,-1
20404060:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20404064:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20404068:	853e                	mv	a0,a5
2040406a:	50b2                	lw	ra,44(sp)
2040406c:	5422                	lw	s0,40(sp)
2040406e:	6145                	addi	sp,sp,48
20404070:	8082                	ret

20404072 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20404072:	7179                	addi	sp,sp,-48
20404074:	d622                	sw	s0,44(sp)
20404076:	1800                	addi	s0,sp,48
20404078:	fca42e23          	sw	a0,-36(s0)
2040407c:	fcb42c23          	sw	a1,-40(s0)
20404080:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20404084:	fdc42783          	lw	a5,-36(s0)
20404088:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040408c:	fd842703          	lw	a4,-40(s0)
20404090:	47ad                	li	a5,11
20404092:	02e7c263          	blt	a5,a4,204040b6 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20404096:	fd442783          	lw	a5,-44(s0)
2040409a:	cf91                	beqz	a5,204040b6 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040409c:	fec42703          	lw	a4,-20(s0)
204040a0:	fd842783          	lw	a5,-40(s0)
204040a4:	0e078793          	addi	a5,a5,224
204040a8:	078a                	slli	a5,a5,0x2
204040aa:	97ba                	add	a5,a5,a4
204040ac:	fd442703          	lw	a4,-44(s0)
204040b0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
204040b2:	4781                	li	a5,0
204040b4:	a011                	j	204040b8 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
204040b6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
204040b8:	853e                	mv	a0,a5
204040ba:	5432                	lw	s0,44(sp)
204040bc:	6145                	addi	sp,sp,48
204040be:	8082                	ret

204040c0 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
204040c0:	7139                	addi	sp,sp,-64
204040c2:	de06                	sw	ra,60(sp)
204040c4:	dc22                	sw	s0,56(sp)
204040c6:	0080                	addi	s0,sp,64
204040c8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204040cc:	fcc42783          	lw	a5,-52(s0)
204040d0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
204040d4:	fe442783          	lw	a5,-28(s0)
204040d8:	43dc                	lw	a5,4(a5)
204040da:	10079d63          	bnez	a5,204041f4 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
204040de:	57fd                	li	a5,-1
204040e0:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
204040e4:	57fd                	li	a5,-1
204040e6:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
204040ea:	301027f3          	csrr	a5,misa
204040ee:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
204040f2:	fe042703          	lw	a4,-32(s0)
204040f6:	6789                	lui	a5,0x2
204040f8:	8ff9                	and	a5,a5,a4
204040fa:	e799                	bnez	a5,20404108 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
204040fc:	fe042703          	lw	a4,-32(s0)
20404100:	000407b7          	lui	a5,0x40
20404104:	8ff9                	and	a5,a5,a4
20404106:	c799                	beqz	a5,20404114 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20404108:	57fd                	li	a5,-1
2040410a:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040410e:	57fd                	li	a5,-1
20404110:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20404114:	fe042703          	lw	a4,-32(s0)
20404118:	000407b7          	lui	a5,0x40
2040411c:	8ff9                	and	a5,a5,a4
2040411e:	c781                	beqz	a5,20404126 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20404120:	57fd                	li	a5,-1
20404122:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20404126:	fe042623          	sw	zero,-20(s0)
2040412a:	a0b9                	j	20404178 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
2040412c:	fe442683          	lw	a3,-28(s0)
20404130:	fec42703          	lw	a4,-20(s0)
20404134:	87ba                	mv	a5,a4
20404136:	0786                	slli	a5,a5,0x1
20404138:	97ba                	add	a5,a5,a4
2040413a:	078e                	slli	a5,a5,0x3
2040413c:	97b6                	add	a5,a5,a3
2040413e:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20404142:	fe442683          	lw	a3,-28(s0)
20404146:	fec42703          	lw	a4,-20(s0)
2040414a:	87ba                	mv	a5,a4
2040414c:	0786                	slli	a5,a5,0x1
2040414e:	97ba                	add	a5,a5,a4
20404150:	078e                	slli	a5,a5,0x3
20404152:	97b6                	add	a5,a5,a3
20404154:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20404158:	fe442683          	lw	a3,-28(s0)
2040415c:	fec42703          	lw	a4,-20(s0)
20404160:	87ba                	mv	a5,a4
20404162:	0786                	slli	a5,a5,0x1
20404164:	97ba                	add	a5,a5,a4
20404166:	078e                	slli	a5,a5,0x3
20404168:	97b6                	add	a5,a5,a3
2040416a:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
2040416e:	fec42783          	lw	a5,-20(s0)
20404172:	0785                	addi	a5,a5,1
20404174:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20404178:	fec42703          	lw	a4,-20(s0)
2040417c:	47fd                	li	a5,31
2040417e:	fae7d7e3          	bge	a5,a4,2040412c <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20404182:	fe042423          	sw	zero,-24(s0)
20404186:	a01d                	j	204041ac <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20404188:	fe442703          	lw	a4,-28(s0)
2040418c:	fe842783          	lw	a5,-24(s0)
20404190:	0e078793          	addi	a5,a5,224
20404194:	078a                	slli	a5,a5,0x2
20404196:	97ba                	add	a5,a5,a4
20404198:	20403737          	lui	a4,0x20403
2040419c:	1ae70713          	addi	a4,a4,430 # 204031ae <__metal_default_exception_handler>
204041a0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
204041a2:	fe842783          	lw	a5,-24(s0)
204041a6:	0785                	addi	a5,a5,1
204041a8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
204041ac:	fe842703          	lw	a4,-24(s0)
204041b0:	47ad                	li	a5,11
204041b2:	fce7dbe3          	bge	a5,a4,20404188 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
204041b6:	204037b7          	lui	a5,0x20403
204041ba:	40078593          	addi	a1,a5,1024 # 20403400 <__metal_exception_handler>
204041be:	4501                	li	a0,0
204041c0:	331d                	jal	20403ee6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
204041c2:	301027f3          	csrr	a5,misa
204041c6:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
204041ca:	fdc42703          	lw	a4,-36(s0)
204041ce:	67c1                	lui	a5,0x10
204041d0:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
204041d4:	8ff9                	and	a5,a5,a4
204041d6:	cb99                	beqz	a5,204041ec <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
204041d8:	300027f3          	csrr	a5,mstatus
204041dc:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
204041e0:	fdc42703          	lw	a4,-36(s0)
204041e4:	6789                	lui	a5,0x2
204041e6:	8fd9                	or	a5,a5,a4
204041e8:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
204041ec:	fe442783          	lw	a5,-28(s0)
204041f0:	4705                	li	a4,1
204041f2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
204041f4:	0001                	nop
204041f6:	50f2                	lw	ra,60(sp)
204041f8:	5462                	lw	s0,56(sp)
204041fa:	6121                	addi	sp,sp,64
204041fc:	8082                	ret

204041fe <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
204041fe:	7179                	addi	sp,sp,-48
20404200:	d606                	sw	ra,44(sp)
20404202:	d422                	sw	s0,40(sp)
20404204:	1800                	addi	s0,sp,48
20404206:	fca42e23          	sw	a0,-36(s0)
2040420a:	fcb42c23          	sw	a1,-40(s0)
2040420e:	fcc42a23          	sw	a2,-44(s0)
20404212:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20404216:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040421a:	fdc42783          	lw	a5,-36(s0)
2040421e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20404222:	fd842503          	lw	a0,-40(s0)
20404226:	3ba1                	jal	20403f7e <__metal_valid_interrupt_id>
20404228:	87aa                	mv	a5,a0
2040422a:	e399                	bnez	a5,20404230 <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
2040422c:	57d5                	li	a5,-11
2040422e:	aa11                	j	20404342 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20404230:	fd442783          	lw	a5,-44(s0)
20404234:	cf85                	beqz	a5,2040426c <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20404236:	fe842683          	lw	a3,-24(s0)
2040423a:	fd842703          	lw	a4,-40(s0)
2040423e:	87ba                	mv	a5,a4
20404240:	0786                	slli	a5,a5,0x1
20404242:	97ba                	add	a5,a5,a4
20404244:	078e                	slli	a5,a5,0x3
20404246:	97b6                	add	a5,a5,a3
20404248:	fd442703          	lw	a4,-44(s0)
2040424c:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20404250:	fe842683          	lw	a3,-24(s0)
20404254:	fd842703          	lw	a4,-40(s0)
20404258:	87ba                	mv	a5,a4
2040425a:	0786                	slli	a5,a5,0x1
2040425c:	97ba                	add	a5,a5,a4
2040425e:	078e                	slli	a5,a5,0x3
20404260:	97b6                	add	a5,a5,a3
20404262:	fd042703          	lw	a4,-48(s0)
20404266:	08e7ac23          	sw	a4,152(a5)
2040426a:	a8d1                	j	2040433e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
2040426c:	fd842783          	lw	a5,-40(s0)
20404270:	17f5                	addi	a5,a5,-3
20404272:	4771                	li	a4,28
20404274:	0cf76263          	bltu	a4,a5,20404338 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20404278:	00279713          	slli	a4,a5,0x2
2040427c:	204067b7          	lui	a5,0x20406
20404280:	18078793          	addi	a5,a5,384 # 20406180 <__metal_driver_vtable_riscv_clint0+0x154>
20404284:	97ba                	add	a5,a5,a4
20404286:	439c                	lw	a5,0(a5)
20404288:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
2040428a:	fe842683          	lw	a3,-24(s0)
2040428e:	fd842703          	lw	a4,-40(s0)
20404292:	87ba                	mv	a5,a4
20404294:	0786                	slli	a5,a5,0x1
20404296:	97ba                	add	a5,a5,a4
20404298:	078e                	slli	a5,a5,0x3
2040429a:	97b6                	add	a5,a5,a3
2040429c:	20403737          	lui	a4,0x20403
204042a0:	29a70713          	addi	a4,a4,666 # 2040329a <__metal_default_sw_handler>
204042a4:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
204042a8:	fe842683          	lw	a3,-24(s0)
204042ac:	fd842703          	lw	a4,-40(s0)
204042b0:	87ba                	mv	a5,a4
204042b2:	0786                	slli	a5,a5,0x1
204042b4:	97ba                	add	a5,a5,a4
204042b6:	078e                	slli	a5,a5,0x3
204042b8:	97b6                	add	a5,a5,a3
204042ba:	fd042703          	lw	a4,-48(s0)
204042be:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
204042c2:	a8b5                	j	2040433e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
204042c4:	fe842683          	lw	a3,-24(s0)
204042c8:	fd842703          	lw	a4,-40(s0)
204042cc:	87ba                	mv	a5,a4
204042ce:	0786                	slli	a5,a5,0x1
204042d0:	97ba                	add	a5,a5,a4
204042d2:	078e                	slli	a5,a5,0x3
204042d4:	97b6                	add	a5,a5,a3
204042d6:	20403737          	lui	a4,0x20403
204042da:	38c70713          	addi	a4,a4,908 # 2040338c <__metal_default_timer_handler>
204042de:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
204042e2:	fe842683          	lw	a3,-24(s0)
204042e6:	fd842703          	lw	a4,-40(s0)
204042ea:	87ba                	mv	a5,a4
204042ec:	0786                	slli	a5,a5,0x1
204042ee:	97ba                	add	a5,a5,a4
204042f0:	078e                	slli	a5,a5,0x3
204042f2:	97b6                	add	a5,a5,a3
204042f4:	fd042703          	lw	a4,-48(s0)
204042f8:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
204042fc:	a089                	j	2040433e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
204042fe:	fe842683          	lw	a3,-24(s0)
20404302:	fd842703          	lw	a4,-40(s0)
20404306:	87ba                	mv	a5,a4
20404308:	0786                	slli	a5,a5,0x1
2040430a:	97ba                	add	a5,a5,a4
2040430c:	078e                	slli	a5,a5,0x3
2040430e:	97b6                	add	a5,a5,a3
20404310:	20403737          	lui	a4,0x20403
20404314:	1c670713          	addi	a4,a4,454 # 204031c6 <__metal_default_interrupt_handler>
20404318:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
2040431c:	fe842683          	lw	a3,-24(s0)
20404320:	fd842703          	lw	a4,-40(s0)
20404324:	87ba                	mv	a5,a4
20404326:	0786                	slli	a5,a5,0x1
20404328:	97ba                	add	a5,a5,a4
2040432a:	078e                	slli	a5,a5,0x3
2040432c:	97b6                	add	a5,a5,a3
2040432e:	fd042703          	lw	a4,-48(s0)
20404332:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20404336:	a021                	j	2040433e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20404338:	57d1                	li	a5,-12
2040433a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
2040433e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20404342:	853e                	mv	a0,a5
20404344:	50b2                	lw	ra,44(sp)
20404346:	5422                	lw	s0,40(sp)
20404348:	6145                	addi	sp,sp,48
2040434a:	8082                	ret

2040434c <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
2040434c:	1101                	addi	sp,sp,-32
2040434e:	ce06                	sw	ra,28(sp)
20404350:	cc22                	sw	s0,24(sp)
20404352:	1000                	addi	s0,sp,32
20404354:	fea42623          	sw	a0,-20(s0)
20404358:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
2040435c:	fe842783          	lw	a5,-24(s0)
20404360:	4605                	li	a2,1
20404362:	85be                	mv	a1,a5
20404364:	fec42503          	lw	a0,-20(s0)
20404368:	c4fff0ef          	jal	ra,20403fb6 <__metal_local_interrupt_enable>
2040436c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
2040436e:	853e                	mv	a0,a5
20404370:	40f2                	lw	ra,28(sp)
20404372:	4462                	lw	s0,24(sp)
20404374:	6105                	addi	sp,sp,32
20404376:	8082                	ret

20404378 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20404378:	1101                	addi	sp,sp,-32
2040437a:	ce06                	sw	ra,28(sp)
2040437c:	cc22                	sw	s0,24(sp)
2040437e:	1000                	addi	s0,sp,32
20404380:	fea42623          	sw	a0,-20(s0)
20404384:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20404388:	fe842783          	lw	a5,-24(s0)
2040438c:	4601                	li	a2,0
2040438e:	85be                	mv	a1,a5
20404390:	fec42503          	lw	a0,-20(s0)
20404394:	c23ff0ef          	jal	ra,20403fb6 <__metal_local_interrupt_enable>
20404398:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
2040439a:	853e                	mv	a0,a5
2040439c:	40f2                	lw	ra,28(sp)
2040439e:	4462                	lw	s0,24(sp)
204043a0:	6105                	addi	sp,sp,32
204043a2:	8082                	ret

204043a4 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
204043a4:	1101                	addi	sp,sp,-32
204043a6:	ce06                	sw	ra,28(sp)
204043a8:	cc22                	sw	s0,24(sp)
204043aa:	1000                	addi	s0,sp,32
204043ac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
204043b0:	ae7ff0ef          	jal	ra,20403e96 <__metal_controller_interrupt_vector_mode>
204043b4:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
204043b6:	853e                	mv	a0,a5
204043b8:	40f2                	lw	ra,28(sp)
204043ba:	4462                	lw	s0,24(sp)
204043bc:	6105                	addi	sp,sp,32
204043be:	8082                	ret

204043c0 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
204043c0:	7179                	addi	sp,sp,-48
204043c2:	d606                	sw	ra,44(sp)
204043c4:	d422                	sw	s0,40(sp)
204043c6:	1800                	addi	s0,sp,48
204043c8:	fca42e23          	sw	a0,-36(s0)
204043cc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204043d0:	fdc42783          	lw	a5,-36(s0)
204043d4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
204043d8:	fd842783          	lw	a5,-40(s0)
204043dc:	eb99                	bnez	a5,204043f2 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
204043de:	204037b7          	lui	a5,0x20403
204043e2:	40078593          	addi	a1,a5,1024 # 20403400 <__metal_exception_handler>
204043e6:	fd842503          	lw	a0,-40(s0)
204043ea:	afdff0ef          	jal	ra,20403ee6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
204043ee:	4781                	li	a5,0
204043f0:	a00d                	j	20404412 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
204043f2:	fd842703          	lw	a4,-40(s0)
204043f6:	4785                	li	a5,1
204043f8:	00f71c63          	bne	a4,a5,20404410 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
204043fc:	204067b7          	lui	a5,0x20406
20404400:	d0078593          	addi	a1,a5,-768 # 20405d00 <__metal_vector_table>
20404404:	fd842503          	lw	a0,-40(s0)
20404408:	adfff0ef          	jal	ra,20403ee6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
2040440c:	4781                	li	a5,0
2040440e:	a011                	j	20404412 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20404410:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20404412:	853e                	mv	a0,a5
20404414:	50b2                	lw	ra,44(sp)
20404416:	5422                	lw	s0,40(sp)
20404418:	6145                	addi	sp,sp,48
2040441a:	8082                	ret

2040441c <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
2040441c:	1101                	addi	sp,sp,-32
2040441e:	ce22                	sw	s0,28(sp)
20404420:	1000                	addi	s0,sp,32
20404422:	fea42623          	sw	a0,-20(s0)
20404426:	feb42423          	sw	a1,-24(s0)
2040442a:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
2040442e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
20404430:	853e                	mv	a0,a5
20404432:	4472                	lw	s0,28(sp)
20404434:	6105                	addi	sp,sp,32
20404436:	8082                	ret

20404438 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20404438:	7139                	addi	sp,sp,-64
2040443a:	de22                	sw	s0,60(sp)
2040443c:	0080                	addi	s0,sp,64
2040443e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20404442:	4301                	li	t1,0
20404444:	4381                	li	t2,0
20404446:	fe642423          	sw	t1,-24(s0)
2040444a:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
2040444e:	b8002573          	csrr	a0,mcycleh
20404452:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20404456:	b0002573          	csrr	a0,mcycle
2040445a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
2040445e:	b8002573          	csrr	a0,mcycleh
20404462:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20404466:	fe442883          	lw	a7,-28(s0)
2040446a:	fdc42503          	lw	a0,-36(s0)
2040446e:	02a89563          	bne	a7,a0,20404498 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20404472:	fe442503          	lw	a0,-28(s0)
20404476:	85aa                	mv	a1,a0
20404478:	4601                	li	a2,0
2040447a:	00059813          	slli	a6,a1,0x0
2040447e:	4781                	li	a5,0
20404480:	fe042603          	lw	a2,-32(s0)
20404484:	86b2                	mv	a3,a2
20404486:	4701                	li	a4,0
20404488:	00d7e633          	or	a2,a5,a3
2040448c:	fec42423          	sw	a2,-24(s0)
20404490:	00e867b3          	or	a5,a6,a4
20404494:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20404498:	fe842783          	lw	a5,-24(s0)
2040449c:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
204044a0:	853e                	mv	a0,a5
204044a2:	85c2                	mv	a1,a6
204044a4:	5472                	lw	s0,60(sp)
204044a6:	6121                	addi	sp,sp,64
204044a8:	8082                	ret

204044aa <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
204044aa:	7179                	addi	sp,sp,-48
204044ac:	d606                	sw	ra,44(sp)
204044ae:	d422                	sw	s0,40(sp)
204044b0:	d24a                	sw	s2,36(sp)
204044b2:	d04e                	sw	s3,32(sp)
204044b4:	1800                	addi	s0,sp,48
204044b6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
204044ba:	fdc42783          	lw	a5,-36(s0)
204044be:	e781                	bnez	a5,204044c6 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
204044c0:	4901                	li	s2,0
204044c2:	4981                	li	s3,0
204044c4:	a821                	j	204044dc <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
204044c6:	fdc42503          	lw	a0,-36(s0)
204044ca:	b27fe0ef          	jal	ra,20402ff0 <__metal_driver_cpu_timebase>
204044ce:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
204044d2:	fec42783          	lw	a5,-20(s0)
204044d6:	893e                	mv	s2,a5
204044d8:	87fd                	srai	a5,a5,0x1f
204044da:	89be                	mv	s3,a5
204044dc:	87ca                	mv	a5,s2
204044de:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
204044e0:	853e                	mv	a0,a5
204044e2:	85c2                	mv	a1,a6
204044e4:	50b2                	lw	ra,44(sp)
204044e6:	5422                	lw	s0,40(sp)
204044e8:	5912                	lw	s2,36(sp)
204044ea:	5982                	lw	s3,32(sp)
204044ec:	6145                	addi	sp,sp,48
204044ee:	8082                	ret

204044f0 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
204044f0:	7179                	addi	sp,sp,-48
204044f2:	d606                	sw	ra,44(sp)
204044f4:	d422                	sw	s0,40(sp)
204044f6:	1800                	addi	s0,sp,48
204044f8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
204044fc:	4781                	li	a5,0
204044fe:	4801                	li	a6,0
20404500:	fef42023          	sw	a5,-32(s0)
20404504:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404508:	fdc42503          	lw	a0,-36(s0)
2040450c:	b0ffe0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20404510:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20404514:	fec42783          	lw	a5,-20(s0)
20404518:	c78d                	beqz	a5,20404542 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
2040451a:	fec42783          	lw	a5,-20(s0)
2040451e:	13c7a783          	lw	a5,316(a5)
20404522:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20404526:	fe842783          	lw	a5,-24(s0)
2040452a:	cf81                	beqz	a5,20404542 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
2040452c:	fe842783          	lw	a5,-24(s0)
20404530:	439c                	lw	a5,0(a5)
20404532:	43f8                	lw	a4,68(a5)
20404534:	fe040793          	addi	a5,s0,-32
20404538:	863e                	mv	a2,a5
2040453a:	4585                	li	a1,1
2040453c:	fe842503          	lw	a0,-24(s0)
20404540:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20404542:	fe042783          	lw	a5,-32(s0)
20404546:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
2040454a:	853e                	mv	a0,a5
2040454c:	85c2                	mv	a1,a6
2040454e:	50b2                	lw	ra,44(sp)
20404550:	5422                	lw	s0,40(sp)
20404552:	6145                	addi	sp,sp,48
20404554:	8082                	ret

20404556 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20404556:	7179                	addi	sp,sp,-48
20404558:	d606                	sw	ra,44(sp)
2040455a:	d422                	sw	s0,40(sp)
2040455c:	d226                	sw	s1,36(sp)
2040455e:	1800                	addi	s0,sp,48
20404560:	fca42e23          	sw	a0,-36(s0)
20404564:	fcb42823          	sw	a1,-48(s0)
20404568:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
2040456c:	57fd                	li	a5,-1
2040456e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404572:	fdc42503          	lw	a0,-36(s0)
20404576:	aa5fe0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
2040457a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
2040457e:	fe842783          	lw	a5,-24(s0)
20404582:	cf8d                	beqz	a5,204045bc <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20404584:	fe842783          	lw	a5,-24(s0)
20404588:	13c7a783          	lw	a5,316(a5)
2040458c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20404590:	fe442783          	lw	a5,-28(s0)
20404594:	c785                	beqz	a5,204045bc <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20404596:	fe442783          	lw	a5,-28(s0)
2040459a:	439c                	lw	a5,0(a5)
2040459c:	47a4                	lw	s1,72(a5)
2040459e:	fdc42503          	lw	a0,-36(s0)
204045a2:	a2bfe0ef          	jal	ra,20402fcc <__metal_driver_cpu_hartid>
204045a6:	87aa                	mv	a5,a0
204045a8:	fd042603          	lw	a2,-48(s0)
204045ac:	fd442683          	lw	a3,-44(s0)
204045b0:	85be                	mv	a1,a5
204045b2:	fe442503          	lw	a0,-28(s0)
204045b6:	9482                	jalr	s1
204045b8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
204045bc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
204045c0:	853e                	mv	a0,a5
204045c2:	50b2                	lw	ra,44(sp)
204045c4:	5422                	lw	s0,40(sp)
204045c6:	5492                	lw	s1,36(sp)
204045c8:	6145                	addi	sp,sp,48
204045ca:	8082                	ret

204045cc <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
204045cc:	1101                	addi	sp,sp,-32
204045ce:	ce22                	sw	s0,28(sp)
204045d0:	1000                	addi	s0,sp,32
204045d2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
204045d6:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
204045da:	853e                	mv	a0,a5
204045dc:	4472                	lw	s0,28(sp)
204045de:	6105                	addi	sp,sp,32
204045e0:	8082                	ret

204045e2 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
204045e2:	1101                	addi	sp,sp,-32
204045e4:	ce22                	sw	s0,28(sp)
204045e6:	1000                	addi	s0,sp,32
204045e8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
204045ec:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
204045ee:	853e                	mv	a0,a5
204045f0:	4472                	lw	s0,28(sp)
204045f2:	6105                	addi	sp,sp,32
204045f4:	8082                	ret

204045f6 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
204045f6:	1101                	addi	sp,sp,-32
204045f8:	ce22                	sw	s0,28(sp)
204045fa:	1000                	addi	s0,sp,32
204045fc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20404600:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20404604:	853e                	mv	a0,a5
20404606:	4472                	lw	s0,28(sp)
20404608:	6105                	addi	sp,sp,32
2040460a:	8082                	ret

2040460c <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
2040460c:	1101                	addi	sp,sp,-32
2040460e:	ce22                	sw	s0,28(sp)
20404610:	1000                	addi	s0,sp,32
20404612:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20404616:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20404618:	853e                	mv	a0,a5
2040461a:	4472                	lw	s0,28(sp)
2040461c:	6105                	addi	sp,sp,32
2040461e:	8082                	ret

20404620 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20404620:	7179                	addi	sp,sp,-48
20404622:	d606                	sw	ra,44(sp)
20404624:	d422                	sw	s0,40(sp)
20404626:	1800                	addi	s0,sp,48
20404628:	fca42e23          	sw	a0,-36(s0)
2040462c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20404630:	57fd                	li	a5,-1
20404632:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404636:	fdc42503          	lw	a0,-36(s0)
2040463a:	9e1fe0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
2040463e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20404642:	fe842783          	lw	a5,-24(s0)
20404646:	c79d                	beqz	a5,20404674 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20404648:	fe842783          	lw	a5,-24(s0)
2040464c:	0dc7a783          	lw	a5,220(a5)
20404650:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20404654:	fe442783          	lw	a5,-28(s0)
20404658:	cf91                	beqz	a5,20404674 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
2040465a:	fe442783          	lw	a5,-28(s0)
2040465e:	439c                	lw	a5,0(a5)
20404660:	43f8                	lw	a4,68(a5)
20404662:	fd840793          	addi	a5,s0,-40
20404666:	863e                	mv	a2,a5
20404668:	458d                	li	a1,3
2040466a:	fe442503          	lw	a0,-28(s0)
2040466e:	9702                	jalr	a4
20404670:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20404674:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20404678:	853e                	mv	a0,a5
2040467a:	50b2                	lw	ra,44(sp)
2040467c:	5422                	lw	s0,40(sp)
2040467e:	6145                	addi	sp,sp,48
20404680:	8082                	ret

20404682 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20404682:	7179                	addi	sp,sp,-48
20404684:	d606                	sw	ra,44(sp)
20404686:	d422                	sw	s0,40(sp)
20404688:	1800                	addi	s0,sp,48
2040468a:	fca42e23          	sw	a0,-36(s0)
2040468e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20404692:	57fd                	li	a5,-1
20404694:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404698:	fdc42503          	lw	a0,-36(s0)
2040469c:	97ffe0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
204046a0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
204046a4:	fe842783          	lw	a5,-24(s0)
204046a8:	c79d                	beqz	a5,204046d6 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204046aa:	fe842783          	lw	a5,-24(s0)
204046ae:	0dc7a783          	lw	a5,220(a5)
204046b2:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
204046b6:	fe442783          	lw	a5,-28(s0)
204046ba:	cf91                	beqz	a5,204046d6 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
204046bc:	fe442783          	lw	a5,-28(s0)
204046c0:	439c                	lw	a5,0(a5)
204046c2:	43f8                	lw	a4,68(a5)
204046c4:	fd840793          	addi	a5,s0,-40
204046c8:	863e                	mv	a2,a5
204046ca:	4589                	li	a1,2
204046cc:	fe442503          	lw	a0,-28(s0)
204046d0:	9702                	jalr	a4
204046d2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
204046d6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
204046da:	853e                	mv	a0,a5
204046dc:	50b2                	lw	ra,44(sp)
204046de:	5422                	lw	s0,40(sp)
204046e0:	6145                	addi	sp,sp,48
204046e2:	8082                	ret

204046e4 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
204046e4:	7179                	addi	sp,sp,-48
204046e6:	d606                	sw	ra,44(sp)
204046e8:	d422                	sw	s0,40(sp)
204046ea:	1800                	addi	s0,sp,48
204046ec:	fca42e23          	sw	a0,-36(s0)
204046f0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
204046f4:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204046f8:	fdc42503          	lw	a0,-36(s0)
204046fc:	91ffe0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20404700:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20404704:	fe842783          	lw	a5,-24(s0)
20404708:	c79d                	beqz	a5,20404736 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040470a:	fe842783          	lw	a5,-24(s0)
2040470e:	0dc7a783          	lw	a5,220(a5)
20404712:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20404716:	fe442783          	lw	a5,-28(s0)
2040471a:	cf91                	beqz	a5,20404736 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
2040471c:	fe442783          	lw	a5,-28(s0)
20404720:	439c                	lw	a5,0(a5)
20404722:	43f8                	lw	a4,68(a5)
20404724:	fd840793          	addi	a5,s0,-40
20404728:	863e                	mv	a2,a5
2040472a:	4591                	li	a1,4
2040472c:	fe442503          	lw	a0,-28(s0)
20404730:	9702                	jalr	a4
20404732:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20404736:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
2040473a:	853e                	mv	a0,a5
2040473c:	50b2                	lw	ra,44(sp)
2040473e:	5422                	lw	s0,40(sp)
20404740:	6145                	addi	sp,sp,48
20404742:	8082                	ret

20404744 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20404744:	1101                	addi	sp,sp,-32
20404746:	ce06                	sw	ra,28(sp)
20404748:	cc22                	sw	s0,24(sp)
2040474a:	1000                	addi	s0,sp,32
2040474c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20404750:	fec42503          	lw	a0,-20(s0)
20404754:	8c7fe0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20404758:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
2040475a:	853e                	mv	a0,a5
2040475c:	40f2                	lw	ra,28(sp)
2040475e:	4462                	lw	s0,24(sp)
20404760:	6105                	addi	sp,sp,32
20404762:	8082                	ret

20404764 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20404764:	7179                	addi	sp,sp,-48
20404766:	d606                	sw	ra,44(sp)
20404768:	d422                	sw	s0,40(sp)
2040476a:	1800                	addi	s0,sp,48
2040476c:	fca42e23          	sw	a0,-36(s0)
20404770:	fcb42c23          	sw	a1,-40(s0)
20404774:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404778:	fdc42503          	lw	a0,-36(s0)
2040477c:	89ffe0ef          	jal	ra,2040301a <__metal_driver_cpu_interrupt_controller>
20404780:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20404784:	fec42783          	lw	a5,-20(s0)
20404788:	cb99                	beqz	a5,2040479e <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
2040478a:	fd442603          	lw	a2,-44(s0)
2040478e:	fd842583          	lw	a1,-40(s0)
20404792:	fec42503          	lw	a0,-20(s0)
20404796:	8ddff0ef          	jal	ra,20404072 <__metal_exception_register>
2040479a:	87aa                	mv	a5,a0
2040479c:	a011                	j	204047a0 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
2040479e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
204047a0:	853e                	mv	a0,a5
204047a2:	50b2                	lw	ra,44(sp)
204047a4:	5422                	lw	s0,40(sp)
204047a6:	6145                	addi	sp,sp,48
204047a8:	8082                	ret

204047aa <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
204047aa:	1101                	addi	sp,sp,-32
204047ac:	ce22                	sw	s0,28(sp)
204047ae:	1000                	addi	s0,sp,32
204047b0:	fea42623          	sw	a0,-20(s0)
204047b4:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
204047b8:	fe842783          	lw	a5,-24(s0)
204047bc:	0007d783          	lhu	a5,0(a5)
204047c0:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
204047c4:	478d                	li	a5,3
204047c6:	00f71463          	bne	a4,a5,204047ce <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
204047ca:	4791                	li	a5,4
204047cc:	a011                	j	204047d0 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
204047ce:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
204047d0:	853e                	mv	a0,a5
204047d2:	4472                	lw	s0,28(sp)
204047d4:	6105                	addi	sp,sp,32
204047d6:	8082                	ret

204047d8 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
204047d8:	7179                	addi	sp,sp,-48
204047da:	d622                	sw	s0,44(sp)
204047dc:	1800                	addi	s0,sp,48
204047de:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204047e2:	341027f3          	csrr	a5,mepc
204047e6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
204047ea:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
204047ee:	853e                	mv	a0,a5
204047f0:	5432                	lw	s0,44(sp)
204047f2:	6145                	addi	sp,sp,48
204047f4:	8082                	ret

204047f6 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
204047f6:	1101                	addi	sp,sp,-32
204047f8:	ce22                	sw	s0,28(sp)
204047fa:	1000                	addi	s0,sp,32
204047fc:	fea42623          	sw	a0,-20(s0)
20404800:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20404804:	fe842783          	lw	a5,-24(s0)
20404808:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
2040480c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
2040480e:	853e                	mv	a0,a5
20404810:	4472                	lw	s0,28(sp)
20404812:	6105                	addi	sp,sp,32
20404814:	8082                	ret

20404816 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20404816:	1101                	addi	sp,sp,-32
20404818:	ce22                	sw	s0,28(sp)
2040481a:	1000                	addi	s0,sp,32
2040481c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20404820:	fec42703          	lw	a4,-20(s0)
20404824:	800017b7          	lui	a5,0x80001
20404828:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
2040482c:	00f71563          	bne	a4,a5,20404836 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20404830:	0c0007b7          	lui	a5,0xc000
20404834:	a011                	j	20404838 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20404836:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
20404838:	853e                	mv	a0,a5
2040483a:	4472                	lw	s0,28(sp)
2040483c:	6105                	addi	sp,sp,32
2040483e:	8082                	ret

20404840 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20404840:	1101                	addi	sp,sp,-32
20404842:	ce22                	sw	s0,28(sp)
20404844:	1000                	addi	s0,sp,32
20404846:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
2040484a:	fec42703          	lw	a4,-20(s0)
2040484e:	800017b7          	lui	a5,0x80001
20404852:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
20404856:	00f71463          	bne	a4,a5,2040485e <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
2040485a:	47ed                	li	a5,27
2040485c:	a011                	j	20404860 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
2040485e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
20404860:	853e                	mv	a0,a5
20404862:	4472                	lw	s0,28(sp)
20404864:	6105                	addi	sp,sp,32
20404866:	8082                	ret

20404868 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20404868:	1101                	addi	sp,sp,-32
2040486a:	ce22                	sw	s0,28(sp)
2040486c:	1000                	addi	s0,sp,32
2040486e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20404872:	fec42703          	lw	a4,-20(s0)
20404876:	800017b7          	lui	a5,0x80001
2040487a:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
2040487e:	00f71463          	bne	a4,a5,20404886 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20404882:	479d                	li	a5,7
20404884:	a011                	j	20404888 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20404886:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
20404888:	853e                	mv	a0,a5
2040488a:	4472                	lw	s0,28(sp)
2040488c:	6105                	addi	sp,sp,32
2040488e:	8082                	ret

20404890 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20404890:	1101                	addi	sp,sp,-32
20404892:	ce22                	sw	s0,28(sp)
20404894:	1000                	addi	s0,sp,32
20404896:	fea42623          	sw	a0,-20(s0)
2040489a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
2040489e:	fe842783          	lw	a5,-24(s0)
204048a2:	e791                	bnez	a5,204048ae <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
204048a4:	800017b7          	lui	a5,0x80001
204048a8:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
204048ac:	a011                	j	204048b0 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
204048ae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
204048b0:	853e                	mv	a0,a5
204048b2:	4472                	lw	s0,28(sp)
204048b4:	6105                	addi	sp,sp,32
204048b6:	8082                	ret

204048b8 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
204048b8:	1101                	addi	sp,sp,-32
204048ba:	ce22                	sw	s0,28(sp)
204048bc:	1000                	addi	s0,sp,32
204048be:	fea42623          	sw	a0,-20(s0)
204048c2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
204048c6:	fe842783          	lw	a5,-24(s0)
204048ca:	e399                	bnez	a5,204048d0 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
204048cc:	47ad                	li	a5,11
204048ce:	a011                	j	204048d2 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
204048d0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
204048d2:	853e                	mv	a0,a5
204048d4:	4472                	lw	s0,28(sp)
204048d6:	6105                	addi	sp,sp,32
204048d8:	8082                	ret

204048da <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
204048da:	7179                	addi	sp,sp,-48
204048dc:	d606                	sw	ra,44(sp)
204048de:	d422                	sw	s0,40(sp)
204048e0:	1800                	addi	s0,sp,48
204048e2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204048e6:	fdc42503          	lw	a0,-36(s0)
204048ea:	3735                	jal	20404816 <__metal_driver_sifive_plic0_control_base>
204048ec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204048f0:	fec42703          	lw	a4,-20(s0)
204048f4:	002007b7          	lui	a5,0x200
204048f8:	0791                	addi	a5,a5,4
204048fa:	97ba                	add	a5,a5,a4
204048fc:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
204048fe:	853e                	mv	a0,a5
20404900:	50b2                	lw	ra,44(sp)
20404902:	5422                	lw	s0,40(sp)
20404904:	6145                	addi	sp,sp,48
20404906:	8082                	ret

20404908 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20404908:	7179                	addi	sp,sp,-48
2040490a:	d606                	sw	ra,44(sp)
2040490c:	d422                	sw	s0,40(sp)
2040490e:	1800                	addi	s0,sp,48
20404910:	fca42e23          	sw	a0,-36(s0)
20404914:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404918:	fdc42503          	lw	a0,-36(s0)
2040491c:	3ded                	jal	20404816 <__metal_driver_sifive_plic0_control_base>
2040491e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404922:	fec42703          	lw	a4,-20(s0)
20404926:	002007b7          	lui	a5,0x200
2040492a:	0791                	addi	a5,a5,4
2040492c:	97ba                	add	a5,a5,a4
2040492e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20404930:	fd842783          	lw	a5,-40(s0)
20404934:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20404936:	0001                	nop
20404938:	50b2                	lw	ra,44(sp)
2040493a:	5422                	lw	s0,40(sp)
2040493c:	6145                	addi	sp,sp,48
2040493e:	8082                	ret

20404940 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20404940:	7179                	addi	sp,sp,-48
20404942:	d606                	sw	ra,44(sp)
20404944:	d422                	sw	s0,40(sp)
20404946:	1800                	addi	s0,sp,48
20404948:	fca42e23          	sw	a0,-36(s0)
2040494c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404950:	fdc42503          	lw	a0,-36(s0)
20404954:	35c9                	jal	20404816 <__metal_driver_sifive_plic0_control_base>
20404956:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040495a:	fec42703          	lw	a4,-20(s0)
2040495e:	002007b7          	lui	a5,0x200
20404962:	97ba                	add	a5,a5,a4
20404964:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20404966:	fd842783          	lw	a5,-40(s0)
2040496a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
2040496c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
2040496e:	853e                	mv	a0,a5
20404970:	50b2                	lw	ra,44(sp)
20404972:	5422                	lw	s0,40(sp)
20404974:	6145                	addi	sp,sp,48
20404976:	8082                	ret

20404978 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20404978:	7179                	addi	sp,sp,-48
2040497a:	d606                	sw	ra,44(sp)
2040497c:	d422                	sw	s0,40(sp)
2040497e:	1800                	addi	s0,sp,48
20404980:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404984:	fdc42503          	lw	a0,-36(s0)
20404988:	3579                	jal	20404816 <__metal_driver_sifive_plic0_control_base>
2040498a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040498e:	fec42703          	lw	a4,-20(s0)
20404992:	002007b7          	lui	a5,0x200
20404996:	97ba                	add	a5,a5,a4
20404998:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
2040499a:	853e                	mv	a0,a5
2040499c:	50b2                	lw	ra,44(sp)
2040499e:	5422                	lw	s0,40(sp)
204049a0:	6145                	addi	sp,sp,48
204049a2:	8082                	ret

204049a4 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
204049a4:	7179                	addi	sp,sp,-48
204049a6:	d606                	sw	ra,44(sp)
204049a8:	d422                	sw	s0,40(sp)
204049aa:	1800                	addi	s0,sp,48
204049ac:	fca42e23          	sw	a0,-36(s0)
204049b0:	fcb42c23          	sw	a1,-40(s0)
204049b4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
204049b8:	fdc42503          	lw	a0,-36(s0)
204049bc:	3da9                	jal	20404816 <__metal_driver_sifive_plic0_control_base>
204049be:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
204049c2:	fdc42503          	lw	a0,-36(s0)
204049c6:	354d                	jal	20404868 <__metal_driver_sifive_plic0_max_priority>
204049c8:	87aa                	mv	a5,a0
204049ca:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
204049ce:	fe842783          	lw	a5,-24(s0)
204049d2:	c785                	beqz	a5,204049fa <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
204049d4:	fd442703          	lw	a4,-44(s0)
204049d8:	fe842783          	lw	a5,-24(s0)
204049dc:	00f77f63          	bgeu	a4,a5,204049fa <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204049e0:	fd842783          	lw	a5,-40(s0)
204049e4:	078a                	slli	a5,a5,0x2
204049e6:	873e                	mv	a4,a5
204049e8:	fec42783          	lw	a5,-20(s0)
204049ec:	97ba                	add	a5,a5,a4
204049ee:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
204049f0:	fd442783          	lw	a5,-44(s0)
204049f4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
204049f6:	4781                	li	a5,0
204049f8:	a011                	j	204049fc <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
204049fa:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
204049fc:	853e                	mv	a0,a5
204049fe:	50b2                	lw	ra,44(sp)
20404a00:	5422                	lw	s0,40(sp)
20404a02:	6145                	addi	sp,sp,48
20404a04:	8082                	ret

20404a06 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20404a06:	7179                	addi	sp,sp,-48
20404a08:	d606                	sw	ra,44(sp)
20404a0a:	d422                	sw	s0,40(sp)
20404a0c:	1800                	addi	s0,sp,48
20404a0e:	fca42e23          	sw	a0,-36(s0)
20404a12:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404a16:	fdc42503          	lw	a0,-36(s0)
20404a1a:	3bf5                	jal	20404816 <__metal_driver_sifive_plic0_control_base>
20404a1c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404a20:	fd842783          	lw	a5,-40(s0)
20404a24:	078a                	slli	a5,a5,0x2
20404a26:	873e                	mv	a4,a5
20404a28:	fec42783          	lw	a5,-20(s0)
20404a2c:	97ba                	add	a5,a5,a4
20404a2e:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20404a30:	853e                	mv	a0,a5
20404a32:	50b2                	lw	ra,44(sp)
20404a34:	5422                	lw	s0,40(sp)
20404a36:	6145                	addi	sp,sp,48
20404a38:	8082                	ret

20404a3a <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20404a3a:	7179                	addi	sp,sp,-48
20404a3c:	d606                	sw	ra,44(sp)
20404a3e:	d422                	sw	s0,40(sp)
20404a40:	1800                	addi	s0,sp,48
20404a42:	fca42e23          	sw	a0,-36(s0)
20404a46:	fcb42c23          	sw	a1,-40(s0)
20404a4a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404a4e:	fdc42503          	lw	a0,-36(s0)
20404a52:	33d1                	jal	20404816 <__metal_driver_sifive_plic0_control_base>
20404a54:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404a58:	fd842783          	lw	a5,-40(s0)
20404a5c:	8795                	srai	a5,a5,0x5
20404a5e:	078a                	slli	a5,a5,0x2
20404a60:	873e                	mv	a4,a5
20404a62:	fec42783          	lw	a5,-20(s0)
20404a66:	973e                	add	a4,a4,a5
20404a68:	6789                	lui	a5,0x2
20404a6a:	97ba                	add	a5,a5,a4
20404a6c:	439c                	lw	a5,0(a5)
20404a6e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404a72:	fd442783          	lw	a5,-44(s0)
20404a76:	cf81                	beqz	a5,20404a8e <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20404a78:	fd842783          	lw	a5,-40(s0)
20404a7c:	8bfd                	andi	a5,a5,31
20404a7e:	4705                	li	a4,1
20404a80:	00f717b3          	sll	a5,a4,a5
20404a84:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404a86:	fe842783          	lw	a5,-24(s0)
20404a8a:	8fd9                	or	a5,a5,a4
20404a8c:	a829                	j	20404aa6 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20404a8e:	fd842783          	lw	a5,-40(s0)
20404a92:	8bfd                	andi	a5,a5,31
20404a94:	4705                	li	a4,1
20404a96:	00f717b3          	sll	a5,a4,a5
20404a9a:	fff7c793          	not	a5,a5
20404a9e:	873e                	mv	a4,a5
20404aa0:	fe842783          	lw	a5,-24(s0)
20404aa4:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404aa6:	fd842703          	lw	a4,-40(s0)
20404aaa:	8715                	srai	a4,a4,0x5
20404aac:	070a                	slli	a4,a4,0x2
20404aae:	86ba                	mv	a3,a4
20404ab0:	fec42703          	lw	a4,-20(s0)
20404ab4:	96ba                	add	a3,a3,a4
20404ab6:	6709                	lui	a4,0x2
20404ab8:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20404aba:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20404abc:	0001                	nop
20404abe:	50b2                	lw	ra,44(sp)
20404ac0:	5422                	lw	s0,40(sp)
20404ac2:	6145                	addi	sp,sp,48
20404ac4:	8082                	ret

20404ac6 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20404ac6:	1101                	addi	sp,sp,-32
20404ac8:	ce06                	sw	ra,28(sp)
20404aca:	cc22                	sw	s0,24(sp)
20404acc:	1000                	addi	s0,sp,32
20404ace:	fea42623          	sw	a0,-20(s0)
20404ad2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20404ad6:	12c00513          	li	a0,300
20404ada:	1d0010ef          	jal	ra,20405caa <metal_shutdown>

20404ade <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20404ade:	7179                	addi	sp,sp,-48
20404ae0:	d606                	sw	ra,44(sp)
20404ae2:	d422                	sw	s0,40(sp)
20404ae4:	1800                	addi	s0,sp,48
20404ae6:	fca42e23          	sw	a0,-36(s0)
20404aea:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20404aee:	fd842783          	lw	a5,-40(s0)
20404af2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20404af6:	fec42503          	lw	a0,-20(s0)
20404afa:	33c5                	jal	204048da <__metal_plic0_claim_interrupt>
20404afc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20404b00:	fec42503          	lw	a0,-20(s0)
20404b04:	d3dff0ef          	jal	ra,20404840 <__metal_driver_sifive_plic0_num_interrupts>
20404b08:	87aa                	mv	a5,a0
20404b0a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20404b0e:	fe842703          	lw	a4,-24(s0)
20404b12:	fe442783          	lw	a5,-28(s0)
20404b16:	04f77263          	bgeu	a4,a5,20404b5a <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20404b1a:	fec42703          	lw	a4,-20(s0)
20404b1e:	fe842783          	lw	a5,-24(s0)
20404b22:	078a                	slli	a5,a5,0x2
20404b24:	97ba                	add	a5,a5,a4
20404b26:	479c                	lw	a5,8(a5)
20404b28:	cb8d                	beqz	a5,20404b5a <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
20404b2a:	fec42703          	lw	a4,-20(s0)
20404b2e:	fe842783          	lw	a5,-24(s0)
20404b32:	078a                	slli	a5,a5,0x2
20404b34:	97ba                	add	a5,a5,a4
20404b36:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20404b3a:	fe842603          	lw	a2,-24(s0)
20404b3e:	fec42683          	lw	a3,-20(s0)
20404b42:	fe842703          	lw	a4,-24(s0)
20404b46:	87ba                	mv	a5,a4
20404b48:	0786                	slli	a5,a5,0x1
20404b4a:	97ba                	add	a5,a5,a4
20404b4c:	078e                	slli	a5,a5,0x3
20404b4e:	97b6                	add	a5,a5,a3
20404b50:	0887a783          	lw	a5,136(a5)
20404b54:	85be                	mv	a1,a5
20404b56:	8532                	mv	a0,a2
20404b58:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20404b5a:	fe842583          	lw	a1,-24(s0)
20404b5e:	fec42503          	lw	a0,-20(s0)
20404b62:	335d                	jal	20404908 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
20404b64:	0001                	nop
20404b66:	50b2                	lw	ra,44(sp)
20404b68:	5422                	lw	s0,40(sp)
20404b6a:	6145                	addi	sp,sp,48
20404b6c:	8082                	ret

20404b6e <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20404b6e:	7139                	addi	sp,sp,-64
20404b70:	de06                	sw	ra,60(sp)
20404b72:	dc22                	sw	s0,56(sp)
20404b74:	0080                	addi	s0,sp,64
20404b76:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404b7a:	fcc42783          	lw	a5,-52(s0)
20404b7e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20404b82:	fe442783          	lw	a5,-28(s0)
20404b86:	43dc                	lw	a5,4(a5)
20404b88:	12079063          	bnez	a5,20404ca8 <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20404b8c:	fe042623          	sw	zero,-20(s0)
20404b90:	a221                	j	20404c98 <__metal_driver_riscv_plic0_init+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20404b92:	fcc42503          	lw	a0,-52(s0)
20404b96:	cabff0ef          	jal	ra,20404840 <__metal_driver_sifive_plic0_num_interrupts>
20404b9a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20404b9e:	fec42583          	lw	a1,-20(s0)
20404ba2:	fcc42503          	lw	a0,-52(s0)
20404ba6:	cebff0ef          	jal	ra,20404890 <__metal_driver_sifive_plic0_interrupt_parents>
20404baa:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20404bae:	fec42583          	lw	a1,-20(s0)
20404bb2:	fcc42503          	lw	a0,-52(s0)
20404bb6:	d03ff0ef          	jal	ra,204048b8 <__metal_driver_sifive_plic0_interrupt_lines>
20404bba:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
20404bbe:	fdc42783          	lw	a5,-36(s0)
20404bc2:	439c                	lw	a5,0(a5)
20404bc4:	439c                	lw	a5,0(a5)
20404bc6:	fdc42503          	lw	a0,-36(s0)
20404bca:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20404bcc:	fe042423          	sw	zero,-24(s0)
20404bd0:	a085                	j	20404c30 <__metal_driver_riscv_plic0_init+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20404bd2:	4601                	li	a2,0
20404bd4:	fe842583          	lw	a1,-24(s0)
20404bd8:	fe442503          	lw	a0,-28(s0)
20404bdc:	3db9                	jal	20404a3a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
20404bde:	4601                	li	a2,0
20404be0:	fe842583          	lw	a1,-24(s0)
20404be4:	fcc42503          	lw	a0,-52(s0)
20404be8:	3b75                	jal	204049a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20404bea:	fe442703          	lw	a4,-28(s0)
20404bee:	fe842783          	lw	a5,-24(s0)
20404bf2:	078a                	slli	a5,a5,0x2
20404bf4:	97ba                	add	a5,a5,a4
20404bf6:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20404bfa:	fe442683          	lw	a3,-28(s0)
20404bfe:	fe842703          	lw	a4,-24(s0)
20404c02:	87ba                	mv	a5,a4
20404c04:	0786                	slli	a5,a5,0x1
20404c06:	97ba                	add	a5,a5,a4
20404c08:	078e                	slli	a5,a5,0x3
20404c0a:	97b6                	add	a5,a5,a3
20404c0c:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20404c10:	fe442683          	lw	a3,-28(s0)
20404c14:	fe842703          	lw	a4,-24(s0)
20404c18:	87ba                	mv	a5,a4
20404c1a:	0786                	slli	a5,a5,0x1
20404c1c:	97ba                	add	a5,a5,a4
20404c1e:	078e                	slli	a5,a5,0x3
20404c20:	97b6                	add	a5,a5,a3
20404c22:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20404c26:	fe842783          	lw	a5,-24(s0)
20404c2a:	0785                	addi	a5,a5,1
20404c2c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20404c30:	fe842703          	lw	a4,-24(s0)
20404c34:	fe042783          	lw	a5,-32(s0)
20404c38:	f8f74de3          	blt	a4,a5,20404bd2 <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
20404c3c:	4581                	li	a1,0
20404c3e:	fcc42503          	lw	a0,-52(s0)
20404c42:	cffff0ef          	jal	ra,20404940 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20404c46:	fdc42783          	lw	a5,-36(s0)
20404c4a:	439c                	lw	a5,0(a5)
20404c4c:	4fdc                	lw	a5,28(a5)
20404c4e:	fe442683          	lw	a3,-28(s0)
20404c52:	4601                	li	a2,0
20404c54:	fd842583          	lw	a1,-40(s0)
20404c58:	fdc42503          	lw	a0,-36(s0)
20404c5c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
20404c5e:	fdc42783          	lw	a5,-36(s0)
20404c62:	439c                	lw	a5,0(a5)
20404c64:	4fd8                	lw	a4,28(a5)
20404c66:	fe442683          	lw	a3,-28(s0)
20404c6a:	204057b7          	lui	a5,0x20405
20404c6e:	ade78613          	addi	a2,a5,-1314 # 20404ade <__metal_plic0_handler>
20404c72:	fd842583          	lw	a1,-40(s0)
20404c76:	fdc42503          	lw	a0,-36(s0)
20404c7a:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
20404c7c:	fdc42783          	lw	a5,-36(s0)
20404c80:	439c                	lw	a5,0(a5)
20404c82:	53dc                	lw	a5,36(a5)
20404c84:	fd842583          	lw	a1,-40(s0)
20404c88:	fdc42503          	lw	a0,-36(s0)
20404c8c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20404c8e:	fec42783          	lw	a5,-20(s0)
20404c92:	0785                	addi	a5,a5,1
20404c94:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404c98:	fec42783          	lw	a5,-20(s0)
20404c9c:	eef05be3          	blez	a5,20404b92 <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20404ca0:	fe442783          	lw	a5,-28(s0)
20404ca4:	4705                	li	a4,1
20404ca6:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20404ca8:	0001                	nop
20404caa:	50f2                	lw	ra,60(sp)
20404cac:	5462                	lw	s0,56(sp)
20404cae:	6121                	addi	sp,sp,64
20404cb0:	8082                	ret

20404cb2 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20404cb2:	7179                	addi	sp,sp,-48
20404cb4:	d606                	sw	ra,44(sp)
20404cb6:	d422                	sw	s0,40(sp)
20404cb8:	1800                	addi	s0,sp,48
20404cba:	fca42e23          	sw	a0,-36(s0)
20404cbe:	fcb42c23          	sw	a1,-40(s0)
20404cc2:	fcc42a23          	sw	a2,-44(s0)
20404cc6:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404cca:	fdc42783          	lw	a5,-36(s0)
20404cce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404cd2:	fdc42503          	lw	a0,-36(s0)
20404cd6:	b6bff0ef          	jal	ra,20404840 <__metal_driver_sifive_plic0_num_interrupts>
20404cda:	872a                	mv	a4,a0
20404cdc:	fd842783          	lw	a5,-40(s0)
20404ce0:	00e7c463          	blt	a5,a4,20404ce8 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20404ce4:	57fd                	li	a5,-1
20404ce6:	a051                	j	20404d6a <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20404ce8:	fd442783          	lw	a5,-44(s0)
20404cec:	cf9d                	beqz	a5,20404d2a <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
20404cee:	4609                	li	a2,2
20404cf0:	fd842583          	lw	a1,-40(s0)
20404cf4:	fdc42503          	lw	a0,-36(s0)
20404cf8:	cadff0ef          	jal	ra,204049a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
20404cfc:	fec42703          	lw	a4,-20(s0)
20404d00:	fd842783          	lw	a5,-40(s0)
20404d04:	078a                	slli	a5,a5,0x2
20404d06:	97ba                	add	a5,a5,a4
20404d08:	fd442703          	lw	a4,-44(s0)
20404d0c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
20404d0e:	fec42683          	lw	a3,-20(s0)
20404d12:	fd842703          	lw	a4,-40(s0)
20404d16:	87ba                	mv	a5,a4
20404d18:	0786                	slli	a5,a5,0x1
20404d1a:	97ba                	add	a5,a5,a4
20404d1c:	078e                	slli	a5,a5,0x3
20404d1e:	97b6                	add	a5,a5,a3
20404d20:	fd042703          	lw	a4,-48(s0)
20404d24:	08e7a423          	sw	a4,136(a5)
20404d28:	a081                	j	20404d68 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20404d2a:	4605                	li	a2,1
20404d2c:	fd842583          	lw	a1,-40(s0)
20404d30:	fdc42503          	lw	a0,-36(s0)
20404d34:	c71ff0ef          	jal	ra,204049a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20404d38:	fec42703          	lw	a4,-20(s0)
20404d3c:	fd842783          	lw	a5,-40(s0)
20404d40:	078a                	slli	a5,a5,0x2
20404d42:	97ba                	add	a5,a5,a4
20404d44:	20405737          	lui	a4,0x20405
20404d48:	ac670713          	addi	a4,a4,-1338 # 20404ac6 <__metal_plic0_default_handler>
20404d4c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
20404d4e:	fec42683          	lw	a3,-20(s0)
20404d52:	fd842703          	lw	a4,-40(s0)
20404d56:	87ba                	mv	a5,a4
20404d58:	0786                	slli	a5,a5,0x1
20404d5a:	97ba                	add	a5,a5,a4
20404d5c:	078e                	slli	a5,a5,0x3
20404d5e:	97b6                	add	a5,a5,a3
20404d60:	fd042703          	lw	a4,-48(s0)
20404d64:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20404d68:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
20404d6a:	853e                	mv	a0,a5
20404d6c:	50b2                	lw	ra,44(sp)
20404d6e:	5422                	lw	s0,40(sp)
20404d70:	6145                	addi	sp,sp,48
20404d72:	8082                	ret

20404d74 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20404d74:	7179                	addi	sp,sp,-48
20404d76:	d606                	sw	ra,44(sp)
20404d78:	d422                	sw	s0,40(sp)
20404d7a:	1800                	addi	s0,sp,48
20404d7c:	fca42e23          	sw	a0,-36(s0)
20404d80:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404d84:	fdc42783          	lw	a5,-36(s0)
20404d88:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404d8c:	fdc42503          	lw	a0,-36(s0)
20404d90:	ab1ff0ef          	jal	ra,20404840 <__metal_driver_sifive_plic0_num_interrupts>
20404d94:	872a                	mv	a4,a0
20404d96:	fd842783          	lw	a5,-40(s0)
20404d9a:	00e7c463          	blt	a5,a4,20404da2 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
20404d9e:	57fd                	li	a5,-1
20404da0:	a809                	j	20404db2 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20404da2:	4605                	li	a2,1
20404da4:	fd842583          	lw	a1,-40(s0)
20404da8:	fec42503          	lw	a0,-20(s0)
20404dac:	c8fff0ef          	jal	ra,20404a3a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
20404db0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20404db2:	853e                	mv	a0,a5
20404db4:	50b2                	lw	ra,44(sp)
20404db6:	5422                	lw	s0,40(sp)
20404db8:	6145                	addi	sp,sp,48
20404dba:	8082                	ret

20404dbc <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20404dbc:	7179                	addi	sp,sp,-48
20404dbe:	d606                	sw	ra,44(sp)
20404dc0:	d422                	sw	s0,40(sp)
20404dc2:	1800                	addi	s0,sp,48
20404dc4:	fca42e23          	sw	a0,-36(s0)
20404dc8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404dcc:	fdc42783          	lw	a5,-36(s0)
20404dd0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404dd4:	fdc42503          	lw	a0,-36(s0)
20404dd8:	a69ff0ef          	jal	ra,20404840 <__metal_driver_sifive_plic0_num_interrupts>
20404ddc:	872a                	mv	a4,a0
20404dde:	fd842783          	lw	a5,-40(s0)
20404de2:	00e7c463          	blt	a5,a4,20404dea <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20404de6:	57fd                	li	a5,-1
20404de8:	a809                	j	20404dfa <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20404dea:	4601                	li	a2,0
20404dec:	fd842583          	lw	a1,-40(s0)
20404df0:	fec42503          	lw	a0,-20(s0)
20404df4:	c47ff0ef          	jal	ra,20404a3a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20404df8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20404dfa:	853e                	mv	a0,a5
20404dfc:	50b2                	lw	ra,44(sp)
20404dfe:	5422                	lw	s0,40(sp)
20404e00:	6145                	addi	sp,sp,48
20404e02:	8082                	ret

20404e04 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404e04:	1101                	addi	sp,sp,-32
20404e06:	ce22                	sw	s0,28(sp)
20404e08:	1000                	addi	s0,sp,32
20404e0a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404e0e:	fec42703          	lw	a4,-20(s0)
20404e12:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404e16:	00f71563          	bne	a4,a5,20404e20 <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404e1a:	100127b7          	lui	a5,0x10012
20404e1e:	a011                	j	20404e22 <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
20404e20:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
20404e22:	853e                	mv	a0,a5
20404e24:	4472                	lw	s0,28(sp)
20404e26:	6105                	addi	sp,sp,32
20404e28:	8082                	ret

20404e2a <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
20404e2a:	1101                	addi	sp,sp,-32
20404e2c:	ce22                	sw	s0,28(sp)
20404e2e:	1000                	addi	s0,sp,32
20404e30:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404e34:	fec42703          	lw	a4,-20(s0)
20404e38:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404e3c:	00f71763          	bne	a4,a5,20404e4a <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404e40:	800017b7          	lui	a5,0x80001
20404e44:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
20404e48:	a011                	j	20404e4c <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
20404e4a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
20404e4c:	853e                	mv	a0,a5
20404e4e:	4472                	lw	s0,28(sp)
20404e50:	6105                	addi	sp,sp,32
20404e52:	8082                	ret

20404e54 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
20404e54:	1101                	addi	sp,sp,-32
20404e56:	ce22                	sw	s0,28(sp)
20404e58:	1000                	addi	s0,sp,32
20404e5a:	fea42623          	sw	a0,-20(s0)
20404e5e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20404e62:	fec42703          	lw	a4,-20(s0)
20404e66:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404e6a:	00f71763          	bne	a4,a5,20404e78 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
20404e6e:	fe842783          	lw	a5,-24(s0)
20404e72:	e399                	bnez	a5,20404e78 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
20404e74:	479d                	li	a5,7
20404e76:	a269                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20404e78:	fec42703          	lw	a4,-20(s0)
20404e7c:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404e80:	00f71963          	bne	a4,a5,20404e92 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
20404e84:	fe842703          	lw	a4,-24(s0)
20404e88:	4785                	li	a5,1
20404e8a:	00f71463          	bne	a4,a5,20404e92 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
20404e8e:	47a1                	li	a5,8
20404e90:	aa85                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404e92:	fec42703          	lw	a4,-20(s0)
20404e96:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404e9a:	00f71963          	bne	a4,a5,20404eac <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
20404e9e:	fe842703          	lw	a4,-24(s0)
20404ea2:	4789                	li	a5,2
20404ea4:	00f71463          	bne	a4,a5,20404eac <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
20404ea8:	47a5                	li	a5,9
20404eaa:	aa99                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20404eac:	fec42703          	lw	a4,-20(s0)
20404eb0:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404eb4:	00f71963          	bne	a4,a5,20404ec6 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
20404eb8:	fe842703          	lw	a4,-24(s0)
20404ebc:	478d                	li	a5,3
20404ebe:	00f71463          	bne	a4,a5,20404ec6 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
20404ec2:	47a9                	li	a5,10
20404ec4:	aa35                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404ec6:	fec42703          	lw	a4,-20(s0)
20404eca:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404ece:	00f71963          	bne	a4,a5,20404ee0 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
20404ed2:	fe842703          	lw	a4,-24(s0)
20404ed6:	4791                	li	a5,4
20404ed8:	00f71463          	bne	a4,a5,20404ee0 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
20404edc:	47ad                	li	a5,11
20404ede:	a20d                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
20404ee0:	fec42703          	lw	a4,-20(s0)
20404ee4:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404ee8:	00f71963          	bne	a4,a5,20404efa <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
20404eec:	fe842703          	lw	a4,-24(s0)
20404ef0:	4795                	li	a5,5
20404ef2:	00f71463          	bne	a4,a5,20404efa <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
20404ef6:	47b1                	li	a5,12
20404ef8:	a221                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20404efa:	fec42703          	lw	a4,-20(s0)
20404efe:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f02:	00f71963          	bne	a4,a5,20404f14 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
20404f06:	fe842703          	lw	a4,-24(s0)
20404f0a:	4799                	li	a5,6
20404f0c:	00f71463          	bne	a4,a5,20404f14 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
20404f10:	47b5                	li	a5,13
20404f12:	a0fd                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404f14:	fec42703          	lw	a4,-20(s0)
20404f18:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f1c:	00f71963          	bne	a4,a5,20404f2e <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
20404f20:	fe842703          	lw	a4,-24(s0)
20404f24:	479d                	li	a5,7
20404f26:	00f71463          	bne	a4,a5,20404f2e <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
20404f2a:	47b9                	li	a5,14
20404f2c:	a8d1                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
20404f2e:	fec42703          	lw	a4,-20(s0)
20404f32:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f36:	00f71963          	bne	a4,a5,20404f48 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
20404f3a:	fe842703          	lw	a4,-24(s0)
20404f3e:	47a1                	li	a5,8
20404f40:	00f71463          	bne	a4,a5,20404f48 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
20404f44:	47bd                	li	a5,15
20404f46:	a86d                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20404f48:	fec42703          	lw	a4,-20(s0)
20404f4c:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f50:	00f71963          	bne	a4,a5,20404f62 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
20404f54:	fe842703          	lw	a4,-24(s0)
20404f58:	47a5                	li	a5,9
20404f5a:	00f71463          	bne	a4,a5,20404f62 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
20404f5e:	47c1                	li	a5,16
20404f60:	a045                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20404f62:	fec42703          	lw	a4,-20(s0)
20404f66:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f6a:	00f71963          	bne	a4,a5,20404f7c <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
20404f6e:	fe842703          	lw	a4,-24(s0)
20404f72:	47a9                	li	a5,10
20404f74:	00f71463          	bne	a4,a5,20404f7c <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
20404f78:	47c5                	li	a5,17
20404f7a:	a059                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
20404f7c:	fec42703          	lw	a4,-20(s0)
20404f80:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f84:	00f71963          	bne	a4,a5,20404f96 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
20404f88:	fe842703          	lw	a4,-24(s0)
20404f8c:	47ad                	li	a5,11
20404f8e:	00f71463          	bne	a4,a5,20404f96 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
20404f92:	47c9                	li	a5,18
20404f94:	a0b5                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404f96:	fec42703          	lw	a4,-20(s0)
20404f9a:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f9e:	00f71963          	bne	a4,a5,20404fb0 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
20404fa2:	fe842703          	lw	a4,-24(s0)
20404fa6:	47b1                	li	a5,12
20404fa8:	00f71463          	bne	a4,a5,20404fb0 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
20404fac:	47cd                	li	a5,19
20404fae:	a889                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
20404fb0:	fec42703          	lw	a4,-20(s0)
20404fb4:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404fb8:	00f71963          	bne	a4,a5,20404fca <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
20404fbc:	fe842703          	lw	a4,-24(s0)
20404fc0:	47b5                	li	a5,13
20404fc2:	00f71463          	bne	a4,a5,20404fca <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
20404fc6:	47d1                	li	a5,20
20404fc8:	a825                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20404fca:	fec42703          	lw	a4,-20(s0)
20404fce:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404fd2:	00f71963          	bne	a4,a5,20404fe4 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
20404fd6:	fe842703          	lw	a4,-24(s0)
20404fda:	47b9                	li	a5,14
20404fdc:	00f71463          	bne	a4,a5,20404fe4 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
20404fe0:	47d5                	li	a5,21
20404fe2:	a839                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404fe4:	fec42703          	lw	a4,-20(s0)
20404fe8:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404fec:	00f71963          	bne	a4,a5,20404ffe <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
20404ff0:	fe842703          	lw	a4,-24(s0)
20404ff4:	47bd                	li	a5,15
20404ff6:	00f71463          	bne	a4,a5,20404ffe <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
20404ffa:	47d9                	li	a5,22
20404ffc:	a011                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
20404ffe:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
20405000:	853e                	mv	a0,a5
20405002:	4472                	lw	s0,28(sp)
20405004:	6105                	addi	sp,sp,32
20405006:	8082                	ret

20405008 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20405008:	7179                	addi	sp,sp,-48
2040500a:	d606                	sw	ra,44(sp)
2040500c:	d422                	sw	s0,40(sp)
2040500e:	1800                	addi	s0,sp,48
20405010:	fca42e23          	sw	a0,-36(s0)
20405014:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405018:	fdc42503          	lw	a0,-36(s0)
2040501c:	de9ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
20405020:	87aa                	mv	a5,a0
20405022:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20405026:	fec42783          	lw	a5,-20(s0)
2040502a:	0791                	addi	a5,a5,4
2040502c:	4398                	lw	a4,0(a5)
2040502e:	fd842783          	lw	a5,-40(s0)
20405032:	fec42683          	lw	a3,-20(s0)
20405036:	0691                	addi	a3,a3,4
20405038:	8fd9                	or	a5,a5,a4
2040503a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
2040503c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
2040503e:	853e                	mv	a0,a5
20405040:	50b2                	lw	ra,44(sp)
20405042:	5422                	lw	s0,40(sp)
20405044:	6145                	addi	sp,sp,48
20405046:	8082                	ret

20405048 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20405048:	7179                	addi	sp,sp,-48
2040504a:	d606                	sw	ra,44(sp)
2040504c:	d422                	sw	s0,40(sp)
2040504e:	1800                	addi	s0,sp,48
20405050:	fca42e23          	sw	a0,-36(s0)
20405054:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405058:	fdc42503          	lw	a0,-36(s0)
2040505c:	da9ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
20405060:	87aa                	mv	a5,a0
20405062:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
20405066:	fec42783          	lw	a5,-20(s0)
2040506a:	0791                	addi	a5,a5,4
2040506c:	439c                	lw	a5,0(a5)
2040506e:	fd842703          	lw	a4,-40(s0)
20405072:	fff74713          	not	a4,a4
20405076:	86ba                	mv	a3,a4
20405078:	fec42703          	lw	a4,-20(s0)
2040507c:	0711                	addi	a4,a4,4
2040507e:	8ff5                	and	a5,a5,a3
20405080:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
20405082:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
20405084:	853e                	mv	a0,a5
20405086:	50b2                	lw	ra,44(sp)
20405088:	5422                	lw	s0,40(sp)
2040508a:	6145                	addi	sp,sp,48
2040508c:	8082                	ret

2040508e <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
2040508e:	7179                	addi	sp,sp,-48
20405090:	d606                	sw	ra,44(sp)
20405092:	d422                	sw	s0,40(sp)
20405094:	1800                	addi	s0,sp,48
20405096:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040509a:	fdc42503          	lw	a0,-36(s0)
2040509e:	d67ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
204050a2:	87aa                	mv	a5,a0
204050a4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
204050a8:	fec42783          	lw	a5,-20(s0)
204050ac:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
204050ae:	853e                	mv	a0,a5
204050b0:	50b2                	lw	ra,44(sp)
204050b2:	5422                	lw	s0,40(sp)
204050b4:	6145                	addi	sp,sp,48
204050b6:	8082                	ret

204050b8 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
204050b8:	7179                	addi	sp,sp,-48
204050ba:	d606                	sw	ra,44(sp)
204050bc:	d422                	sw	s0,40(sp)
204050be:	1800                	addi	s0,sp,48
204050c0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204050c4:	fdc42503          	lw	a0,-36(s0)
204050c8:	d3dff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
204050cc:	87aa                	mv	a5,a0
204050ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
204050d2:	fec42783          	lw	a5,-20(s0)
204050d6:	07b1                	addi	a5,a5,12
204050d8:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
204050da:	853e                	mv	a0,a5
204050dc:	50b2                	lw	ra,44(sp)
204050de:	5422                	lw	s0,40(sp)
204050e0:	6145                	addi	sp,sp,48
204050e2:	8082                	ret

204050e4 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
204050e4:	7179                	addi	sp,sp,-48
204050e6:	d606                	sw	ra,44(sp)
204050e8:	d422                	sw	s0,40(sp)
204050ea:	1800                	addi	s0,sp,48
204050ec:	fca42e23          	sw	a0,-36(s0)
204050f0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204050f4:	fdc42503          	lw	a0,-36(s0)
204050f8:	d0dff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
204050fc:	87aa                	mv	a5,a0
204050fe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20405102:	fec42783          	lw	a5,-20(s0)
20405106:	07a1                	addi	a5,a5,8
20405108:	439c                	lw	a5,0(a5)
2040510a:	fd842703          	lw	a4,-40(s0)
2040510e:	fff74713          	not	a4,a4
20405112:	86ba                	mv	a3,a4
20405114:	fec42703          	lw	a4,-20(s0)
20405118:	0721                	addi	a4,a4,8
2040511a:	8ff5                	and	a5,a5,a3
2040511c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
2040511e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20405120:	853e                	mv	a0,a5
20405122:	50b2                	lw	ra,44(sp)
20405124:	5422                	lw	s0,40(sp)
20405126:	6145                	addi	sp,sp,48
20405128:	8082                	ret

2040512a <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
2040512a:	7179                	addi	sp,sp,-48
2040512c:	d606                	sw	ra,44(sp)
2040512e:	d422                	sw	s0,40(sp)
20405130:	1800                	addi	s0,sp,48
20405132:	fca42e23          	sw	a0,-36(s0)
20405136:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040513a:	fdc42503          	lw	a0,-36(s0)
2040513e:	cc7ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
20405142:	87aa                	mv	a5,a0
20405144:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
20405148:	fec42783          	lw	a5,-20(s0)
2040514c:	07a1                	addi	a5,a5,8
2040514e:	4398                	lw	a4,0(a5)
20405150:	fd842783          	lw	a5,-40(s0)
20405154:	fec42683          	lw	a3,-20(s0)
20405158:	06a1                	addi	a3,a3,8
2040515a:	8fd9                	or	a5,a5,a4
2040515c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
2040515e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20405160:	853e                	mv	a0,a5
20405162:	50b2                	lw	ra,44(sp)
20405164:	5422                	lw	s0,40(sp)
20405166:	6145                	addi	sp,sp,48
20405168:	8082                	ret

2040516a <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
2040516a:	7179                	addi	sp,sp,-48
2040516c:	d606                	sw	ra,44(sp)
2040516e:	d422                	sw	s0,40(sp)
20405170:	1800                	addi	s0,sp,48
20405172:	fca42e23          	sw	a0,-36(s0)
20405176:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040517a:	fdc42503          	lw	a0,-36(s0)
2040517e:	c87ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
20405182:	87aa                	mv	a5,a0
20405184:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20405188:	fec42783          	lw	a5,-20(s0)
2040518c:	07b1                	addi	a5,a5,12
2040518e:	4398                	lw	a4,0(a5)
20405190:	fd842783          	lw	a5,-40(s0)
20405194:	fec42683          	lw	a3,-20(s0)
20405198:	06b1                	addi	a3,a3,12
2040519a:	8fd9                	or	a5,a5,a4
2040519c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
2040519e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
204051a0:	853e                	mv	a0,a5
204051a2:	50b2                	lw	ra,44(sp)
204051a4:	5422                	lw	s0,40(sp)
204051a6:	6145                	addi	sp,sp,48
204051a8:	8082                	ret

204051aa <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
204051aa:	7179                	addi	sp,sp,-48
204051ac:	d606                	sw	ra,44(sp)
204051ae:	d422                	sw	s0,40(sp)
204051b0:	1800                	addi	s0,sp,48
204051b2:	fca42e23          	sw	a0,-36(s0)
204051b6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204051ba:	fdc42503          	lw	a0,-36(s0)
204051be:	c47ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
204051c2:	87aa                	mv	a5,a0
204051c4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
204051c8:	fec42783          	lw	a5,-20(s0)
204051cc:	07b1                	addi	a5,a5,12
204051ce:	439c                	lw	a5,0(a5)
204051d0:	fd842703          	lw	a4,-40(s0)
204051d4:	fff74713          	not	a4,a4
204051d8:	86ba                	mv	a3,a4
204051da:	fec42703          	lw	a4,-20(s0)
204051de:	0731                	addi	a4,a4,12
204051e0:	8ff5                	and	a5,a5,a3
204051e2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
204051e4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
204051e6:	853e                	mv	a0,a5
204051e8:	50b2                	lw	ra,44(sp)
204051ea:	5422                	lw	s0,40(sp)
204051ec:	6145                	addi	sp,sp,48
204051ee:	8082                	ret

204051f0 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
204051f0:	7179                	addi	sp,sp,-48
204051f2:	d606                	sw	ra,44(sp)
204051f4:	d422                	sw	s0,40(sp)
204051f6:	1800                	addi	s0,sp,48
204051f8:	fca42e23          	sw	a0,-36(s0)
204051fc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405200:	fdc42503          	lw	a0,-36(s0)
20405204:	c01ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
20405208:	87aa                	mv	a5,a0
2040520a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
2040520e:	fec42783          	lw	a5,-20(s0)
20405212:	07b1                	addi	a5,a5,12
20405214:	4398                	lw	a4,0(a5)
20405216:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
2040521a:	fec42683          	lw	a3,-20(s0)
2040521e:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20405220:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20405222:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20405224:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
20405226:	853e                	mv	a0,a5
20405228:	50b2                	lw	ra,44(sp)
2040522a:	5422                	lw	s0,40(sp)
2040522c:	6145                	addi	sp,sp,48
2040522e:	8082                	ret

20405230 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20405230:	7179                	addi	sp,sp,-48
20405232:	d606                	sw	ra,44(sp)
20405234:	d422                	sw	s0,40(sp)
20405236:	1800                	addi	s0,sp,48
20405238:	fca42e23          	sw	a0,-36(s0)
2040523c:	fcb42c23          	sw	a1,-40(s0)
20405240:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405244:	fdc42503          	lw	a0,-36(s0)
20405248:	bbdff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
2040524c:	87aa                	mv	a5,a0
2040524e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20405252:	fec42783          	lw	a5,-20(s0)
20405256:	03c78793          	addi	a5,a5,60
2040525a:	439c                	lw	a5,0(a5)
2040525c:	fd842703          	lw	a4,-40(s0)
20405260:	fff74713          	not	a4,a4
20405264:	86ba                	mv	a3,a4
20405266:	fec42703          	lw	a4,-20(s0)
2040526a:	03c70713          	addi	a4,a4,60
2040526e:	8ff5                	and	a5,a5,a3
20405270:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
20405272:	fec42783          	lw	a5,-20(s0)
20405276:	03878793          	addi	a5,a5,56
2040527a:	4398                	lw	a4,0(a5)
2040527c:	fd442783          	lw	a5,-44(s0)
20405280:	fec42683          	lw	a3,-20(s0)
20405284:	03868693          	addi	a3,a3,56
20405288:	8fd9                	or	a5,a5,a4
2040528a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
2040528c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
2040528e:	853e                	mv	a0,a5
20405290:	50b2                	lw	ra,44(sp)
20405292:	5422                	lw	s0,40(sp)
20405294:	6145                	addi	sp,sp,48
20405296:	8082                	ret

20405298 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20405298:	7179                	addi	sp,sp,-48
2040529a:	d606                	sw	ra,44(sp)
2040529c:	d422                	sw	s0,40(sp)
2040529e:	1800                	addi	s0,sp,48
204052a0:	fca42e23          	sw	a0,-36(s0)
204052a4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204052a8:	fdc42503          	lw	a0,-36(s0)
204052ac:	b59ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
204052b0:	87aa                	mv	a5,a0
204052b2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
204052b6:	fec42783          	lw	a5,-20(s0)
204052ba:	03878793          	addi	a5,a5,56
204052be:	439c                	lw	a5,0(a5)
204052c0:	fd842703          	lw	a4,-40(s0)
204052c4:	fff74713          	not	a4,a4
204052c8:	86ba                	mv	a3,a4
204052ca:	fec42703          	lw	a4,-20(s0)
204052ce:	03870713          	addi	a4,a4,56
204052d2:	8ff5                	and	a5,a5,a3
204052d4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
204052d6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
204052d8:	853e                	mv	a0,a5
204052da:	50b2                	lw	ra,44(sp)
204052dc:	5422                	lw	s0,40(sp)
204052de:	6145                	addi	sp,sp,48
204052e0:	8082                	ret

204052e2 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204052e2:	7179                	addi	sp,sp,-48
204052e4:	d606                	sw	ra,44(sp)
204052e6:	d422                	sw	s0,40(sp)
204052e8:	1800                	addi	s0,sp,48
204052ea:	fca42e23          	sw	a0,-36(s0)
204052ee:	fcb42c23          	sw	a1,-40(s0)
204052f2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204052f6:	fdc42503          	lw	a0,-36(s0)
204052fa:	b0bff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
204052fe:	87aa                	mv	a5,a0
20405300:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20405304:	fd442703          	lw	a4,-44(s0)
20405308:	479d                	li	a5,7
2040530a:	1ce7e963          	bltu	a5,a4,204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
2040530e:	fd442783          	lw	a5,-44(s0)
20405312:	00279713          	slli	a4,a5,0x2
20405316:	204067b7          	lui	a5,0x20406
2040531a:	2cc78793          	addi	a5,a5,716 # 204062cc <__metal_driver_vtable_riscv_plic0+0x4c>
2040531e:	97ba                	add	a5,a5,a4
20405320:	439c                	lw	a5,0(a5)
20405322:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20405324:	fec42783          	lw	a5,-20(s0)
20405328:	07e1                	addi	a5,a5,24
2040532a:	439c                	lw	a5,0(a5)
2040532c:	fd842703          	lw	a4,-40(s0)
20405330:	fff74713          	not	a4,a4
20405334:	86ba                	mv	a3,a4
20405336:	fec42703          	lw	a4,-20(s0)
2040533a:	0761                	addi	a4,a4,24
2040533c:	8ff5                	and	a5,a5,a3
2040533e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20405340:	fec42783          	lw	a5,-20(s0)
20405344:	02078793          	addi	a5,a5,32
20405348:	439c                	lw	a5,0(a5)
2040534a:	fd842703          	lw	a4,-40(s0)
2040534e:	fff74713          	not	a4,a4
20405352:	86ba                	mv	a3,a4
20405354:	fec42703          	lw	a4,-20(s0)
20405358:	02070713          	addi	a4,a4,32
2040535c:	8ff5                	and	a5,a5,a3
2040535e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20405360:	fec42783          	lw	a5,-20(s0)
20405364:	02878793          	addi	a5,a5,40
20405368:	439c                	lw	a5,0(a5)
2040536a:	fd842703          	lw	a4,-40(s0)
2040536e:	fff74713          	not	a4,a4
20405372:	86ba                	mv	a3,a4
20405374:	fec42703          	lw	a4,-20(s0)
20405378:	02870713          	addi	a4,a4,40
2040537c:	8ff5                	and	a5,a5,a3
2040537e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20405380:	fec42783          	lw	a5,-20(s0)
20405384:	03078793          	addi	a5,a5,48
20405388:	439c                	lw	a5,0(a5)
2040538a:	fd842703          	lw	a4,-40(s0)
2040538e:	fff74713          	not	a4,a4
20405392:	86ba                	mv	a3,a4
20405394:	fec42703          	lw	a4,-20(s0)
20405398:	03070713          	addi	a4,a4,48
2040539c:	8ff5                	and	a5,a5,a3
2040539e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
204053a0:	aa35                	j	204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204053a2:	fec42783          	lw	a5,-20(s0)
204053a6:	07e1                	addi	a5,a5,24
204053a8:	4398                	lw	a4,0(a5)
204053aa:	fd842783          	lw	a5,-40(s0)
204053ae:	fec42683          	lw	a3,-20(s0)
204053b2:	06e1                	addi	a3,a3,24
204053b4:	8fd9                	or	a5,a5,a4
204053b6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
204053b8:	a215                	j	204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204053ba:	fec42783          	lw	a5,-20(s0)
204053be:	02078793          	addi	a5,a5,32
204053c2:	4398                	lw	a4,0(a5)
204053c4:	fd842783          	lw	a5,-40(s0)
204053c8:	fec42683          	lw	a3,-20(s0)
204053cc:	02068693          	addi	a3,a3,32
204053d0:	8fd9                	or	a5,a5,a4
204053d2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
204053d4:	a221                	j	204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204053d6:	fec42783          	lw	a5,-20(s0)
204053da:	07e1                	addi	a5,a5,24
204053dc:	4398                	lw	a4,0(a5)
204053de:	fd842783          	lw	a5,-40(s0)
204053e2:	fec42683          	lw	a3,-20(s0)
204053e6:	06e1                	addi	a3,a3,24
204053e8:	8fd9                	or	a5,a5,a4
204053ea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204053ec:	fec42783          	lw	a5,-20(s0)
204053f0:	02078793          	addi	a5,a5,32
204053f4:	4398                	lw	a4,0(a5)
204053f6:	fd842783          	lw	a5,-40(s0)
204053fa:	fec42683          	lw	a3,-20(s0)
204053fe:	02068693          	addi	a3,a3,32
20405402:	8fd9                	or	a5,a5,a4
20405404:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20405406:	a8d9                	j	204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20405408:	fec42783          	lw	a5,-20(s0)
2040540c:	02878793          	addi	a5,a5,40
20405410:	4398                	lw	a4,0(a5)
20405412:	fd842783          	lw	a5,-40(s0)
20405416:	fec42683          	lw	a3,-20(s0)
2040541a:	02868693          	addi	a3,a3,40
2040541e:	8fd9                	or	a5,a5,a4
20405420:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20405422:	a86d                	j	204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20405424:	fec42783          	lw	a5,-20(s0)
20405428:	03078793          	addi	a5,a5,48
2040542c:	4398                	lw	a4,0(a5)
2040542e:	fd842783          	lw	a5,-40(s0)
20405432:	fec42683          	lw	a3,-20(s0)
20405436:	03068693          	addi	a3,a3,48
2040543a:	8fd9                	or	a5,a5,a4
2040543c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
2040543e:	a879                	j	204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20405440:	fec42783          	lw	a5,-20(s0)
20405444:	02878793          	addi	a5,a5,40
20405448:	4398                	lw	a4,0(a5)
2040544a:	fd842783          	lw	a5,-40(s0)
2040544e:	fec42683          	lw	a3,-20(s0)
20405452:	02868693          	addi	a3,a3,40
20405456:	8fd9                	or	a5,a5,a4
20405458:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
2040545a:	fec42783          	lw	a5,-20(s0)
2040545e:	03078793          	addi	a5,a5,48
20405462:	4398                	lw	a4,0(a5)
20405464:	fd842783          	lw	a5,-40(s0)
20405468:	fec42683          	lw	a3,-20(s0)
2040546c:	03068693          	addi	a3,a3,48
20405470:	8fd9                	or	a5,a5,a4
20405472:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20405474:	a0a5                	j	204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20405476:	fec42783          	lw	a5,-20(s0)
2040547a:	07e1                	addi	a5,a5,24
2040547c:	4398                	lw	a4,0(a5)
2040547e:	fd842783          	lw	a5,-40(s0)
20405482:	fec42683          	lw	a3,-20(s0)
20405486:	06e1                	addi	a3,a3,24
20405488:	8fd9                	or	a5,a5,a4
2040548a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
2040548c:	fec42783          	lw	a5,-20(s0)
20405490:	02078793          	addi	a5,a5,32
20405494:	4398                	lw	a4,0(a5)
20405496:	fd842783          	lw	a5,-40(s0)
2040549a:	fec42683          	lw	a3,-20(s0)
2040549e:	02068693          	addi	a3,a3,32
204054a2:	8fd9                	or	a5,a5,a4
204054a4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204054a6:	fec42783          	lw	a5,-20(s0)
204054aa:	02878793          	addi	a5,a5,40
204054ae:	4398                	lw	a4,0(a5)
204054b0:	fd842783          	lw	a5,-40(s0)
204054b4:	fec42683          	lw	a3,-20(s0)
204054b8:	02868693          	addi	a3,a3,40
204054bc:	8fd9                	or	a5,a5,a4
204054be:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204054c0:	fec42783          	lw	a5,-20(s0)
204054c4:	03078793          	addi	a5,a5,48
204054c8:	4398                	lw	a4,0(a5)
204054ca:	fd842783          	lw	a5,-40(s0)
204054ce:	fec42683          	lw	a3,-20(s0)
204054d2:	03068693          	addi	a3,a3,48
204054d6:	8fd9                	or	a5,a5,a4
204054d8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
204054da:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
204054dc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
204054de:	853e                	mv	a0,a5
204054e0:	50b2                	lw	ra,44(sp)
204054e2:	5422                	lw	s0,40(sp)
204054e4:	6145                	addi	sp,sp,48
204054e6:	8082                	ret

204054e8 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204054e8:	7179                	addi	sp,sp,-48
204054ea:	d606                	sw	ra,44(sp)
204054ec:	d422                	sw	s0,40(sp)
204054ee:	1800                	addi	s0,sp,48
204054f0:	fca42e23          	sw	a0,-36(s0)
204054f4:	fcb42c23          	sw	a1,-40(s0)
204054f8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204054fc:	fdc42503          	lw	a0,-36(s0)
20405500:	905ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
20405504:	87aa                	mv	a5,a0
20405506:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
2040550a:	fd442703          	lw	a4,-44(s0)
2040550e:	479d                	li	a5,7
20405510:	14e7ea63          	bltu	a5,a4,20405664 <__metal_driver_sifive_gpio0_clear_int+0x17c>
20405514:	fd442783          	lw	a5,-44(s0)
20405518:	00279713          	slli	a4,a5,0x2
2040551c:	204067b7          	lui	a5,0x20406
20405520:	2ec78793          	addi	a5,a5,748 # 204062ec <__metal_driver_vtable_riscv_plic0+0x6c>
20405524:	97ba                	add	a5,a5,a4
20405526:	439c                	lw	a5,0(a5)
20405528:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
2040552a:	fec42783          	lw	a5,-20(s0)
2040552e:	07f1                	addi	a5,a5,28
20405530:	4398                	lw	a4,0(a5)
20405532:	fd842783          	lw	a5,-40(s0)
20405536:	fec42683          	lw	a3,-20(s0)
2040553a:	06f1                	addi	a3,a3,28
2040553c:	8fd9                	or	a5,a5,a4
2040553e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20405540:	a215                	j	20405664 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20405542:	fec42783          	lw	a5,-20(s0)
20405546:	02478793          	addi	a5,a5,36
2040554a:	4398                	lw	a4,0(a5)
2040554c:	fd842783          	lw	a5,-40(s0)
20405550:	fec42683          	lw	a3,-20(s0)
20405554:	02468693          	addi	a3,a3,36
20405558:	8fd9                	or	a5,a5,a4
2040555a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
2040555c:	a221                	j	20405664 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
2040555e:	fec42783          	lw	a5,-20(s0)
20405562:	07f1                	addi	a5,a5,28
20405564:	4398                	lw	a4,0(a5)
20405566:	fd842783          	lw	a5,-40(s0)
2040556a:	fec42683          	lw	a3,-20(s0)
2040556e:	06f1                	addi	a3,a3,28
20405570:	8fd9                	or	a5,a5,a4
20405572:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20405574:	fec42783          	lw	a5,-20(s0)
20405578:	02478793          	addi	a5,a5,36
2040557c:	4398                	lw	a4,0(a5)
2040557e:	fd842783          	lw	a5,-40(s0)
20405582:	fec42683          	lw	a3,-20(s0)
20405586:	02468693          	addi	a3,a3,36
2040558a:	8fd9                	or	a5,a5,a4
2040558c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
2040558e:	a8d9                	j	20405664 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20405590:	fec42783          	lw	a5,-20(s0)
20405594:	02c78793          	addi	a5,a5,44
20405598:	4398                	lw	a4,0(a5)
2040559a:	fd842783          	lw	a5,-40(s0)
2040559e:	fec42683          	lw	a3,-20(s0)
204055a2:	02c68693          	addi	a3,a3,44
204055a6:	8fd9                	or	a5,a5,a4
204055a8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
204055aa:	a86d                	j	20405664 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204055ac:	fec42783          	lw	a5,-20(s0)
204055b0:	03478793          	addi	a5,a5,52
204055b4:	4398                	lw	a4,0(a5)
204055b6:	fd842783          	lw	a5,-40(s0)
204055ba:	fec42683          	lw	a3,-20(s0)
204055be:	03468693          	addi	a3,a3,52
204055c2:	8fd9                	or	a5,a5,a4
204055c4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
204055c6:	a879                	j	20405664 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
204055c8:	fec42783          	lw	a5,-20(s0)
204055cc:	02c78793          	addi	a5,a5,44
204055d0:	4398                	lw	a4,0(a5)
204055d2:	fd842783          	lw	a5,-40(s0)
204055d6:	fec42683          	lw	a3,-20(s0)
204055da:	02c68693          	addi	a3,a3,44
204055de:	8fd9                	or	a5,a5,a4
204055e0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204055e2:	fec42783          	lw	a5,-20(s0)
204055e6:	03478793          	addi	a5,a5,52
204055ea:	4398                	lw	a4,0(a5)
204055ec:	fd842783          	lw	a5,-40(s0)
204055f0:	fec42683          	lw	a3,-20(s0)
204055f4:	03468693          	addi	a3,a3,52
204055f8:	8fd9                	or	a5,a5,a4
204055fa:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
204055fc:	a0a5                	j	20405664 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204055fe:	fec42783          	lw	a5,-20(s0)
20405602:	07f1                	addi	a5,a5,28
20405604:	4398                	lw	a4,0(a5)
20405606:	fd842783          	lw	a5,-40(s0)
2040560a:	fec42683          	lw	a3,-20(s0)
2040560e:	06f1                	addi	a3,a3,28
20405610:	8fd9                	or	a5,a5,a4
20405612:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20405614:	fec42783          	lw	a5,-20(s0)
20405618:	02478793          	addi	a5,a5,36
2040561c:	4398                	lw	a4,0(a5)
2040561e:	fd842783          	lw	a5,-40(s0)
20405622:	fec42683          	lw	a3,-20(s0)
20405626:	02468693          	addi	a3,a3,36
2040562a:	8fd9                	or	a5,a5,a4
2040562c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
2040562e:	fec42783          	lw	a5,-20(s0)
20405632:	02c78793          	addi	a5,a5,44
20405636:	4398                	lw	a4,0(a5)
20405638:	fd842783          	lw	a5,-40(s0)
2040563c:	fec42683          	lw	a3,-20(s0)
20405640:	02c68693          	addi	a3,a3,44
20405644:	8fd9                	or	a5,a5,a4
20405646:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20405648:	fec42783          	lw	a5,-20(s0)
2040564c:	03478793          	addi	a5,a5,52
20405650:	4398                	lw	a4,0(a5)
20405652:	fd842783          	lw	a5,-40(s0)
20405656:	fec42683          	lw	a3,-20(s0)
2040565a:	03468693          	addi	a3,a3,52
2040565e:	8fd9                	or	a5,a5,a4
20405660:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20405662:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20405664:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20405666:	853e                	mv	a0,a5
20405668:	50b2                	lw	ra,44(sp)
2040566a:	5422                	lw	s0,40(sp)
2040566c:	6145                	addi	sp,sp,48
2040566e:	8082                	ret

20405670 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20405670:	1101                	addi	sp,sp,-32
20405672:	ce06                	sw	ra,28(sp)
20405674:	cc22                	sw	s0,24(sp)
20405676:	1000                	addi	s0,sp,32
20405678:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
2040567c:	fec42503          	lw	a0,-20(s0)
20405680:	faaff0ef          	jal	ra,20404e2a <__metal_driver_sifive_gpio0_interrupt_parent>
20405684:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20405686:	853e                	mv	a0,a5
20405688:	40f2                	lw	ra,28(sp)
2040568a:	4462                	lw	s0,24(sp)
2040568c:	6105                	addi	sp,sp,32
2040568e:	8082                	ret

20405690 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20405690:	7179                	addi	sp,sp,-48
20405692:	d606                	sw	ra,44(sp)
20405694:	d422                	sw	s0,40(sp)
20405696:	1800                	addi	s0,sp,48
20405698:	fca42e23          	sw	a0,-36(s0)
2040569c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
204056a0:	fd842583          	lw	a1,-40(s0)
204056a4:	fdc42503          	lw	a0,-36(s0)
204056a8:	facff0ef          	jal	ra,20404e54 <__metal_driver_sifive_gpio0_interrupt_lines>
204056ac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
204056b0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
204056b4:	853e                	mv	a0,a5
204056b6:	50b2                	lw	ra,44(sp)
204056b8:	5422                	lw	s0,40(sp)
204056ba:	6145                	addi	sp,sp,48
204056bc:	8082                	ret

204056be <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
204056be:	1101                	addi	sp,sp,-32
204056c0:	ce22                	sw	s0,28(sp)
204056c2:	1000                	addi	s0,sp,32
204056c4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204056c8:	fec42703          	lw	a4,-20(s0)
204056cc:	800017b7          	lui	a5,0x80001
204056d0:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
204056d4:	00f71563          	bne	a4,a5,204056de <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
204056d8:	100137b7          	lui	a5,0x10013
204056dc:	a011                	j	204056e0 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
204056de:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
204056e0:	853e                	mv	a0,a5
204056e2:	4472                	lw	s0,28(sp)
204056e4:	6105                	addi	sp,sp,32
204056e6:	8082                	ret

204056e8 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
204056e8:	1101                	addi	sp,sp,-32
204056ea:	ce22                	sw	s0,28(sp)
204056ec:	1000                	addi	s0,sp,32
204056ee:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204056f2:	fec42703          	lw	a4,-20(s0)
204056f6:	800017b7          	lui	a5,0x80001
204056fa:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
204056fe:	00f71763          	bne	a4,a5,2040570c <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20405702:	800017b7          	lui	a5,0x80001
20405706:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
2040570a:	a011                	j	2040570e <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
2040570c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
2040570e:	853e                	mv	a0,a5
20405710:	4472                	lw	s0,28(sp)
20405712:	6105                	addi	sp,sp,32
20405714:	8082                	ret

20405716 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20405716:	1101                	addi	sp,sp,-32
20405718:	ce22                	sw	s0,28(sp)
2040571a:	1000                	addi	s0,sp,32
2040571c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405720:	fec42703          	lw	a4,-20(s0)
20405724:	800017b7          	lui	a5,0x80001
20405728:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
2040572c:	00f71463          	bne	a4,a5,20405734 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
20405730:	4795                	li	a5,5
20405732:	a011                	j	20405736 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20405734:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
20405736:	853e                	mv	a0,a5
20405738:	4472                	lw	s0,28(sp)
2040573a:	6105                	addi	sp,sp,32
2040573c:	8082                	ret

2040573e <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
2040573e:	1101                	addi	sp,sp,-32
20405740:	ce22                	sw	s0,28(sp)
20405742:	1000                	addi	s0,sp,32
20405744:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405748:	fec42703          	lw	a4,-20(s0)
2040574c:	800017b7          	lui	a5,0x80001
20405750:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20405754:	00f71763          	bne	a4,a5,20405762 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20405758:	800017b7          	lui	a5,0x80001
2040575c:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffe44c>
20405760:	a011                	j	20405764 <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
20405762:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
20405764:	853e                	mv	a0,a5
20405766:	4472                	lw	s0,28(sp)
20405768:	6105                	addi	sp,sp,32
2040576a:	8082                	ret

2040576c <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
2040576c:	1101                	addi	sp,sp,-32
2040576e:	ce22                	sw	s0,28(sp)
20405770:	1000                	addi	s0,sp,32
20405772:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405776:	fec42703          	lw	a4,-20(s0)
2040577a:	800017b7          	lui	a5,0x80001
2040577e:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20405782:	00f71563          	bne	a4,a5,2040578c <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20405786:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040578a:	a011                	j	2040578e <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
2040578c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
2040578e:	853e                	mv	a0,a5
20405790:	4472                	lw	s0,28(sp)
20405792:	6105                	addi	sp,sp,32
20405794:	8082                	ret

20405796 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20405796:	1101                	addi	sp,sp,-32
20405798:	ce22                	sw	s0,28(sp)
2040579a:	1000                	addi	s0,sp,32
2040579c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204057a0:	fec42703          	lw	a4,-20(s0)
204057a4:	800017b7          	lui	a5,0x80001
204057a8:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
204057ac:	00f71563          	bne	a4,a5,204057b6 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
204057b0:	000307b7          	lui	a5,0x30
204057b4:	a011                	j	204057b8 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
204057b6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
204057b8:	853e                	mv	a0,a5
204057ba:	4472                	lw	s0,28(sp)
204057bc:	6105                	addi	sp,sp,32
204057be:	8082                	ret

204057c0 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
204057c0:	1101                	addi	sp,sp,-32
204057c2:	ce22                	sw	s0,28(sp)
204057c4:	1000                	addi	s0,sp,32
204057c6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204057ca:	fec42703          	lw	a4,-20(s0)
204057ce:	800017b7          	lui	a5,0x80001
204057d2:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
204057d6:	00f71563          	bne	a4,a5,204057e0 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
204057da:	000307b7          	lui	a5,0x30
204057de:	a011                	j	204057e2 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
204057e0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
204057e2:	853e                	mv	a0,a5
204057e4:	4472                	lw	s0,28(sp)
204057e6:	6105                	addi	sp,sp,32
204057e8:	8082                	ret

204057ea <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
204057ea:	1101                	addi	sp,sp,-32
204057ec:	ce06                	sw	ra,28(sp)
204057ee:	cc22                	sw	s0,24(sp)
204057f0:	1000                	addi	s0,sp,32
204057f2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
204057f6:	fec42503          	lw	a0,-20(s0)
204057fa:	35fd                	jal	204056e8 <__metal_driver_sifive_uart0_interrupt_parent>
204057fc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
204057fe:	853e                	mv	a0,a5
20405800:	40f2                	lw	ra,28(sp)
20405802:	4462                	lw	s0,24(sp)
20405804:	6105                	addi	sp,sp,32
20405806:	8082                	ret

20405808 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20405808:	1101                	addi	sp,sp,-32
2040580a:	ce06                	sw	ra,28(sp)
2040580c:	cc22                	sw	s0,24(sp)
2040580e:	1000                	addi	s0,sp,32
20405810:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20405814:	fec42503          	lw	a0,-20(s0)
20405818:	3dfd                	jal	20405716 <__metal_driver_sifive_uart0_interrupt_line>
2040581a:	87aa                	mv	a5,a0
2040581c:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20405820:	853e                	mv	a0,a5
20405822:	40f2                	lw	ra,28(sp)
20405824:	4462                	lw	s0,24(sp)
20405826:	6105                	addi	sp,sp,32
20405828:	8082                	ret

2040582a <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
2040582a:	7179                	addi	sp,sp,-48
2040582c:	d606                	sw	ra,44(sp)
2040582e:	d422                	sw	s0,40(sp)
20405830:	1800                	addi	s0,sp,48
20405832:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405836:	fdc42503          	lw	a0,-36(s0)
2040583a:	3551                	jal	204056be <__metal_driver_sifive_uart0_control_base>
2040583c:	87aa                	mv	a5,a0
2040583e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20405842:	fec42783          	lw	a5,-20(s0)
20405846:	439c                	lw	a5,0(a5)
20405848:	fff7c793          	not	a5,a5
2040584c:	83fd                	srli	a5,a5,0x1f
2040584e:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20405852:	853e                	mv	a0,a5
20405854:	50b2                	lw	ra,44(sp)
20405856:	5422                	lw	s0,40(sp)
20405858:	6145                	addi	sp,sp,48
2040585a:	8082                	ret

2040585c <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
2040585c:	7179                	addi	sp,sp,-48
2040585e:	d606                	sw	ra,44(sp)
20405860:	d422                	sw	s0,40(sp)
20405862:	1800                	addi	s0,sp,48
20405864:	fca42e23          	sw	a0,-36(s0)
20405868:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040586c:	fdc42503          	lw	a0,-36(s0)
20405870:	e4fff0ef          	jal	ra,204056be <__metal_driver_sifive_uart0_control_base>
20405874:	87aa                	mv	a5,a0
20405876:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
2040587a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
2040587c:	fdc42503          	lw	a0,-36(s0)
20405880:	376d                	jal	2040582a <__metal_driver_sifive_uart0_txready>
20405882:	87aa                	mv	a5,a0
20405884:	dfe5                	beqz	a5,2040587c <__metal_driver_sifive_uart0_putc+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20405886:	fec42783          	lw	a5,-20(s0)
2040588a:	fd842703          	lw	a4,-40(s0)
2040588e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20405890:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20405892:	853e                	mv	a0,a5
20405894:	50b2                	lw	ra,44(sp)
20405896:	5422                	lw	s0,40(sp)
20405898:	6145                	addi	sp,sp,48
2040589a:	8082                	ret

2040589c <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
2040589c:	7179                	addi	sp,sp,-48
2040589e:	d606                	sw	ra,44(sp)
204058a0:	d422                	sw	s0,40(sp)
204058a2:	1800                	addi	s0,sp,48
204058a4:	fca42e23          	sw	a0,-36(s0)
204058a8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204058ac:	fdc42503          	lw	a0,-36(s0)
204058b0:	e0fff0ef          	jal	ra,204056be <__metal_driver_sifive_uart0_control_base>
204058b4:	87aa                	mv	a5,a0
204058b6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
204058ba:	fec42783          	lw	a5,-20(s0)
204058be:	0791                	addi	a5,a5,4
204058c0:	439c                	lw	a5,0(a5)
204058c2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
204058c6:	fe842783          	lw	a5,-24(s0)
204058ca:	0007d763          	bgez	a5,204058d8 <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
204058ce:	fd842783          	lw	a5,-40(s0)
204058d2:	577d                	li	a4,-1
204058d4:	c398                	sw	a4,0(a5)
204058d6:	a801                	j	204058e6 <__metal_driver_sifive_uart0_getc+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
204058d8:	fe842783          	lw	a5,-24(s0)
204058dc:	0ff7f713          	andi	a4,a5,255
204058e0:	fd842783          	lw	a5,-40(s0)
204058e4:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
204058e6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
204058e8:	853e                	mv	a0,a5
204058ea:	50b2                	lw	ra,44(sp)
204058ec:	5422                	lw	s0,40(sp)
204058ee:	6145                	addi	sp,sp,48
204058f0:	8082                	ret

204058f2 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
204058f2:	7179                	addi	sp,sp,-48
204058f4:	d622                	sw	s0,44(sp)
204058f6:	1800                	addi	s0,sp,48
204058f8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
204058fc:	fdc42783          	lw	a5,-36(s0)
20405900:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20405904:	fec42783          	lw	a5,-20(s0)
20405908:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
2040590a:	853e                	mv	a0,a5
2040590c:	5432                	lw	s0,44(sp)
2040590e:	6145                	addi	sp,sp,48
20405910:	8082                	ret

20405912 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20405912:	7179                	addi	sp,sp,-48
20405914:	d606                	sw	ra,44(sp)
20405916:	d422                	sw	s0,40(sp)
20405918:	1800                	addi	s0,sp,48
2040591a:	fca42e23          	sw	a0,-36(s0)
2040591e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20405922:	fdc42783          	lw	a5,-36(s0)
20405926:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
2040592a:	fdc42503          	lw	a0,-36(s0)
2040592e:	d91ff0ef          	jal	ra,204056be <__metal_driver_sifive_uart0_control_base>
20405932:	87aa                	mv	a5,a0
20405934:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405938:	fdc42503          	lw	a0,-36(s0)
2040593c:	e03ff0ef          	jal	ra,2040573e <__metal_driver_sifive_uart0_clock>
20405940:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20405944:	fd842703          	lw	a4,-40(s0)
20405948:	fec42783          	lw	a5,-20(s0)
2040594c:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
2040594e:	fe442783          	lw	a5,-28(s0)
20405952:	cbb1                	beqz	a5,204059a6 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20405954:	fe442783          	lw	a5,-28(s0)
20405958:	439c                	lw	a5,0(a5)
2040595a:	439c                	lw	a5,0(a5)
2040595c:	fe442503          	lw	a0,-28(s0)
20405960:	9782                	jalr	a5
20405962:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20405966:	fe042703          	lw	a4,-32(s0)
2040596a:	fd842783          	lw	a5,-40(s0)
2040596e:	02f747b3          	div	a5,a4,a5
20405972:	fff78713          	addi	a4,a5,-1
20405976:	fe842783          	lw	a5,-24(s0)
2040597a:	07e1                	addi	a5,a5,24
2040597c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
2040597e:	fe842783          	lw	a5,-24(s0)
20405982:	07a1                	addi	a5,a5,8
20405984:	439c                	lw	a5,0(a5)
20405986:	fe842703          	lw	a4,-24(s0)
2040598a:	0721                	addi	a4,a4,8
2040598c:	0017e793          	ori	a5,a5,1
20405990:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20405992:	fe842783          	lw	a5,-24(s0)
20405996:	07b1                	addi	a5,a5,12
20405998:	439c                	lw	a5,0(a5)
2040599a:	fe842703          	lw	a4,-24(s0)
2040599e:	0731                	addi	a4,a4,12
204059a0:	0017e793          	ori	a5,a5,1
204059a4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
204059a6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
204059a8:	853e                	mv	a0,a5
204059aa:	50b2                	lw	ra,44(sp)
204059ac:	5422                	lw	s0,40(sp)
204059ae:	6145                	addi	sp,sp,48
204059b0:	8082                	ret

204059b2 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
204059b2:	7139                	addi	sp,sp,-64
204059b4:	de06                	sw	ra,60(sp)
204059b6:	dc22                	sw	s0,56(sp)
204059b8:	0080                	addi	s0,sp,64
204059ba:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
204059be:	fcc42783          	lw	a5,-52(s0)
204059c2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
204059c6:	fcc42503          	lw	a0,-52(s0)
204059ca:	cf5ff0ef          	jal	ra,204056be <__metal_driver_sifive_uart0_control_base>
204059ce:	87aa                	mv	a5,a0
204059d0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
204059d4:	fcc42503          	lw	a0,-52(s0)
204059d8:	d67ff0ef          	jal	ra,2040573e <__metal_driver_sifive_uart0_clock>
204059dc:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
204059e0:	fe842783          	lw	a5,-24(s0)
204059e4:	07a1                	addi	a5,a5,8
204059e6:	4398                	lw	a4,0(a5)
204059e8:	fe842783          	lw	a5,-24(s0)
204059ec:	07a1                	addi	a5,a5,8
204059ee:	86be                	mv	a3,a5
204059f0:	fff907b7          	lui	a5,0xfff90
204059f4:	17fd                	addi	a5,a5,-1
204059f6:	8ff9                	and	a5,a5,a4
204059f8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
204059fa:	fe842783          	lw	a5,-24(s0)
204059fe:	07a1                	addi	a5,a5,8
20405a00:	4398                	lw	a4,0(a5)
20405a02:	fe842783          	lw	a5,-24(s0)
20405a06:	07a1                	addi	a5,a5,8
20405a08:	86be                	mv	a3,a5
20405a0a:	67c1                	lui	a5,0x10
20405a0c:	8fd9                	or	a5,a5,a4
20405a0e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20405a10:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20405a12:	fe842783          	lw	a5,-24(s0)
20405a16:	07d1                	addi	a5,a5,20
20405a18:	439c                	lw	a5,0(a5)
20405a1a:	8b85                	andi	a5,a5,1
20405a1c:	dbfd                	beqz	a5,20405a12 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20405a1e:	fe842783          	lw	a5,-24(s0)
20405a22:	07a1                	addi	a5,a5,8
20405a24:	439c                	lw	a5,0(a5)
20405a26:	8b89                	andi	a5,a5,2
20405a28:	c399                	beqz	a5,20405a2e <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20405a2a:	47a5                	li	a5,9
20405a2c:	a011                	j	20405a30 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20405a2e:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20405a30:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20405a34:	fe442783          	lw	a5,-28(s0)
20405a38:	439c                	lw	a5,0(a5)
20405a3a:	439c                	lw	a5,0(a5)
20405a3c:	fe442503          	lw	a0,-28(s0)
20405a40:	9782                	jalr	a5
20405a42:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20405a46:	fe042703          	lw	a4,-32(s0)
20405a4a:	fdc42783          	lw	a5,-36(s0)
20405a4e:	02f707b3          	mul	a5,a4,a5
20405a52:	873e                	mv	a4,a5
20405a54:	fec42783          	lw	a5,-20(s0)
20405a58:	43dc                	lw	a5,4(a5)
20405a5a:	02f757b3          	divu	a5,a4,a5
20405a5e:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20405a62:	fc042a23          	sw	zero,-44(s0)
20405a66:	a039                	j	20405a74 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20405a68:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20405a6a:	fd442783          	lw	a5,-44(s0)
20405a6e:	0785                	addi	a5,a5,1
20405a70:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20405a74:	fd442783          	lw	a5,-44(s0)
20405a78:	fd842703          	lw	a4,-40(s0)
20405a7c:	fee7c6e3          	blt	a5,a4,20405a68 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20405a80:	0001                	nop
20405a82:	50f2                	lw	ra,60(sp)
20405a84:	5462                	lw	s0,56(sp)
20405a86:	6121                	addi	sp,sp,64
20405a88:	8082                	ret

20405a8a <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20405a8a:	7179                	addi	sp,sp,-48
20405a8c:	d606                	sw	ra,44(sp)
20405a8e:	d422                	sw	s0,40(sp)
20405a90:	1800                	addi	s0,sp,48
20405a92:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20405a96:	fdc42783          	lw	a5,-36(s0)
20405a9a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20405a9e:	fec42703          	lw	a4,-20(s0)
20405aa2:	fec42783          	lw	a5,-20(s0)
20405aa6:	43dc                	lw	a5,4(a5)
20405aa8:	85be                	mv	a1,a5
20405aaa:	853a                	mv	a0,a4
20405aac:	dd5fc0ef          	jal	ra,20402880 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20405ab0:	0001                	nop
20405ab2:	50b2                	lw	ra,44(sp)
20405ab4:	5422                	lw	s0,40(sp)
20405ab6:	6145                	addi	sp,sp,48
20405ab8:	8082                	ret

20405aba <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20405aba:	7139                	addi	sp,sp,-64
20405abc:	de06                	sw	ra,60(sp)
20405abe:	dc22                	sw	s0,56(sp)
20405ac0:	0080                	addi	s0,sp,64
20405ac2:	fca42623          	sw	a0,-52(s0)
20405ac6:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20405aca:	fcc42783          	lw	a5,-52(s0)
20405ace:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405ad2:	fcc42503          	lw	a0,-52(s0)
20405ad6:	c69ff0ef          	jal	ra,2040573e <__metal_driver_sifive_uart0_clock>
20405ada:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20405ade:	fcc42503          	lw	a0,-52(s0)
20405ae2:	c8bff0ef          	jal	ra,2040576c <__metal_driver_sifive_uart0_pinmux>
20405ae6:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20405aea:	fe842783          	lw	a5,-24(s0)
20405aee:	c7b9                	beqz	a5,20405b3c <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20405af0:	fec42783          	lw	a5,-20(s0)
20405af4:	20406737          	lui	a4,0x20406
20405af8:	9b270713          	addi	a4,a4,-1614 # 204059b2 <pre_rate_change_callback_func>
20405afc:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20405afe:	fec42783          	lw	a5,-20(s0)
20405b02:	fcc42703          	lw	a4,-52(s0)
20405b06:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20405b08:	fec42783          	lw	a5,-20(s0)
20405b0c:	07a1                	addi	a5,a5,8
20405b0e:	85be                	mv	a1,a5
20405b10:	fe842503          	lw	a0,-24(s0)
20405b14:	20f1                	jal	20405be0 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20405b16:	fec42783          	lw	a5,-20(s0)
20405b1a:	20406737          	lui	a4,0x20406
20405b1e:	a8a70713          	addi	a4,a4,-1398 # 20405a8a <post_rate_change_callback_func>
20405b22:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20405b24:	fec42783          	lw	a5,-20(s0)
20405b28:	fcc42703          	lw	a4,-52(s0)
20405b2c:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
20405b2e:	fec42783          	lw	a5,-20(s0)
20405b32:	07d1                	addi	a5,a5,20
20405b34:	85be                	mv	a1,a5
20405b36:	fe842503          	lw	a0,-24(s0)
20405b3a:	28d9                	jal	20405c10 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20405b3c:	fec42783          	lw	a5,-20(s0)
20405b40:	fc842583          	lw	a1,-56(s0)
20405b44:	853e                	mv	a0,a5
20405b46:	d3bfc0ef          	jal	ra,20402880 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20405b4a:	fe442783          	lw	a5,-28(s0)
20405b4e:	cb95                	beqz	a5,20405b82 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20405b50:	fcc42503          	lw	a0,-52(s0)
20405b54:	c43ff0ef          	jal	ra,20405796 <__metal_driver_sifive_uart0_pinmux_output_selector>
20405b58:	87aa                	mv	a5,a0
20405b5a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20405b5e:	fcc42503          	lw	a0,-52(s0)
20405b62:	c5fff0ef          	jal	ra,204057c0 <__metal_driver_sifive_uart0_pinmux_source_selector>
20405b66:	87aa                	mv	a5,a0
20405b68:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20405b6c:	fe442783          	lw	a5,-28(s0)
20405b70:	439c                	lw	a5,0(a5)
20405b72:	53dc                	lw	a5,36(a5)
20405b74:	fdc42603          	lw	a2,-36(s0)
20405b78:	fe042583          	lw	a1,-32(s0)
20405b7c:	fe442503          	lw	a0,-28(s0)
20405b80:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20405b82:	0001                	nop
20405b84:	50f2                	lw	ra,60(sp)
20405b86:	5462                	lw	s0,56(sp)
20405b88:	6121                	addi	sp,sp,64
20405b8a:	8082                	ret

20405b8c <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20405b8c:	7179                	addi	sp,sp,-48
20405b8e:	d622                	sw	s0,44(sp)
20405b90:	1800                	addi	s0,sp,48
20405b92:	fca42e23          	sw	a0,-36(s0)
20405b96:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20405b9a:	fd842783          	lw	a5,-40(s0)
20405b9e:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20405ba2:	fdc42783          	lw	a5,-36(s0)
20405ba6:	e781                	bnez	a5,20405bae <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20405ba8:	fd842783          	lw	a5,-40(s0)
20405bac:	a035                	j	20405bd8 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20405bae:	fdc42783          	lw	a5,-36(s0)
20405bb2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20405bb6:	a031                	j	20405bc2 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20405bb8:	fec42783          	lw	a5,-20(s0)
20405bbc:	479c                	lw	a5,8(a5)
20405bbe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20405bc2:	fec42783          	lw	a5,-20(s0)
20405bc6:	479c                	lw	a5,8(a5)
20405bc8:	fbe5                	bnez	a5,20405bb8 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20405bca:	fec42783          	lw	a5,-20(s0)
20405bce:	fd842703          	lw	a4,-40(s0)
20405bd2:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20405bd4:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20405bd8:	853e                	mv	a0,a5
20405bda:	5432                	lw	s0,44(sp)
20405bdc:	6145                	addi	sp,sp,48
20405bde:	8082                	ret

20405be0 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405be0:	1101                	addi	sp,sp,-32
20405be2:	ce06                	sw	ra,28(sp)
20405be4:	cc22                	sw	s0,24(sp)
20405be6:	1000                	addi	s0,sp,32
20405be8:	fea42623          	sw	a0,-20(s0)
20405bec:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20405bf0:	fec42783          	lw	a5,-20(s0)
20405bf4:	43dc                	lw	a5,4(a5)
20405bf6:	fe842583          	lw	a1,-24(s0)
20405bfa:	853e                	mv	a0,a5
20405bfc:	3f41                	jal	20405b8c <_metal_clock_append_to_callbacks>
20405bfe:	872a                	mv	a4,a0
20405c00:	fec42783          	lw	a5,-20(s0)
20405c04:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20405c06:	0001                	nop
20405c08:	40f2                	lw	ra,28(sp)
20405c0a:	4462                	lw	s0,24(sp)
20405c0c:	6105                	addi	sp,sp,32
20405c0e:	8082                	ret

20405c10 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405c10:	1101                	addi	sp,sp,-32
20405c12:	ce06                	sw	ra,28(sp)
20405c14:	cc22                	sw	s0,24(sp)
20405c16:	1000                	addi	s0,sp,32
20405c18:	fea42623          	sw	a0,-20(s0)
20405c1c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20405c20:	fec42783          	lw	a5,-20(s0)
20405c24:	479c                	lw	a5,8(a5)
20405c26:	fe842583          	lw	a1,-24(s0)
20405c2a:	853e                	mv	a0,a5
20405c2c:	3785                	jal	20405b8c <_metal_clock_append_to_callbacks>
20405c2e:	872a                	mv	a4,a0
20405c30:	fec42783          	lw	a5,-20(s0)
20405c34:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20405c36:	0001                	nop
20405c38:	40f2                	lw	ra,28(sp)
20405c3a:	4462                	lw	s0,24(sp)
20405c3c:	6105                	addi	sp,sp,32
20405c3e:	8082                	ret

20405c40 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20405c40:	1101                	addi	sp,sp,-32
20405c42:	ce06                	sw	ra,28(sp)
20405c44:	cc22                	sw	s0,24(sp)
20405c46:	1000                	addi	s0,sp,32
20405c48:	fea42623          	sw	a0,-20(s0)
20405c4c:	fec42783          	lw	a5,-20(s0)
20405c50:	439c                	lw	a5,0(a5)
20405c52:	57dc                	lw	a5,44(a5)
20405c54:	fec42503          	lw	a0,-20(s0)
20405c58:	9782                	jalr	a5
20405c5a:	87aa                	mv	a5,a0
20405c5c:	853e                	mv	a0,a5
20405c5e:	40f2                	lw	ra,28(sp)
20405c60:	4462                	lw	s0,24(sp)
20405c62:	6105                	addi	sp,sp,32
20405c64:	8082                	ret

20405c66 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20405c66:	1101                	addi	sp,sp,-32
20405c68:	ce22                	sw	s0,28(sp)
20405c6a:	1000                	addi	s0,sp,32
20405c6c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20405c70:	fec42783          	lw	a5,-20(s0)
20405c74:	eb89                	bnez	a5,20405c86 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20405c76:	fec42703          	lw	a4,-20(s0)
20405c7a:	070a                	slli	a4,a4,0x2
20405c7c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20405c80:	97ba                	add	a5,a5,a4
20405c82:	439c                	lw	a5,0(a5)
20405c84:	a011                	j	20405c88 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20405c86:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20405c88:	853e                	mv	a0,a5
20405c8a:	4472                	lw	s0,28(sp)
20405c8c:	6105                	addi	sp,sp,32
20405c8e:	8082                	ret

20405c90 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20405c90:	1101                	addi	sp,sp,-32
20405c92:	ce22                	sw	s0,28(sp)
20405c94:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405c96:	f14027f3          	csrr	a5,mhartid
20405c9a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20405c9e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20405ca2:	853e                	mv	a0,a5
20405ca4:	4472                	lw	s0,28(sp)
20405ca6:	6105                	addi	sp,sp,32
20405ca8:	8082                	ret

20405caa <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
20405caa:	1101                	addi	sp,sp,-32
20405cac:	ce22                	sw	s0,28(sp)
20405cae:	1000                	addi	s0,sp,32
20405cb0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20405cb4:	0001                	nop
20405cb6:	bffd                	j	20405cb4 <metal_shutdown+0xa>
	...

20405d00 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405d00:	cdefd06f          	j	204031de <metal_interrupt_vector_handler>

20405d04 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405d04:	cdafd06f          	j	204031de <metal_interrupt_vector_handler>

20405d08 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405d08:	cd6fd06f          	j	204031de <metal_interrupt_vector_handler>

20405d0c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
20405d0c:	d00fd06f          	j	2040320c <metal_software_interrupt_vector_handler>

20405d10 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405d10:	ccefd06f          	j	204031de <metal_interrupt_vector_handler>

20405d14 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405d14:	ccafd06f          	j	204031de <metal_interrupt_vector_handler>

20405d18 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405d18:	cc6fd06f          	j	204031de <metal_interrupt_vector_handler>

20405d1c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
20405d1c:	de2fd06f          	j	204032fe <metal_timer_interrupt_vector_handler>

20405d20 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20405d20:	cbefd06f          	j	204031de <metal_interrupt_vector_handler>

20405d24 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20405d24:	cbafd06f          	j	204031de <metal_interrupt_vector_handler>

20405d28 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20405d28:	cb6fd06f          	j	204031de <metal_interrupt_vector_handler>

20405d2c <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
20405d2c:	cb2fd06f          	j	204031de <metal_interrupt_vector_handler>

20405d30 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20405d30:	caefd06f          	j	204031de <metal_interrupt_vector_handler>

20405d34 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20405d34:	caafd06f          	j	204031de <metal_interrupt_vector_handler>

20405d38 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20405d38:	ca6fd06f          	j	204031de <metal_interrupt_vector_handler>

20405d3c <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
20405d3c:	ca2fd06f          	j	204031de <metal_interrupt_vector_handler>

20405d40 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20405d40:	837fd06f          	j	20403576 <metal_lc0_interrupt_vector_handler>

20405d44 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20405d44:	8c5fd06f          	j	20403608 <metal_lc1_interrupt_vector_handler>

20405d48 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20405d48:	953fd06f          	j	2040369a <metal_lc2_interrupt_vector_handler>

20405d4c <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
20405d4c:	9e1fd06f          	j	2040372c <metal_lc3_interrupt_vector_handler>

20405d50 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20405d50:	a6ffd06f          	j	204037be <metal_lc4_interrupt_vector_handler>

20405d54 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20405d54:	afdfd06f          	j	20403850 <metal_lc5_interrupt_vector_handler>

20405d58 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20405d58:	b8bfd06f          	j	204038e2 <metal_lc6_interrupt_vector_handler>

20405d5c <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
20405d5c:	c19fd06f          	j	20403974 <metal_lc7_interrupt_vector_handler>

20405d60 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20405d60:	ca7fd06f          	j	20403a06 <metal_lc8_interrupt_vector_handler>

20405d64 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20405d64:	d35fd06f          	j	20403a98 <metal_lc9_interrupt_vector_handler>

20405d68 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20405d68:	dc3fd06f          	j	20403b2a <metal_lc10_interrupt_vector_handler>

20405d6c <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
20405d6c:	e51fd06f          	j	20403bbc <metal_lc11_interrupt_vector_handler>

20405d70 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20405d70:	edffd06f          	j	20403c4e <metal_lc12_interrupt_vector_handler>

20405d74 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20405d74:	f6dfd06f          	j	20403ce0 <metal_lc13_interrupt_vector_handler>

20405d78 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20405d78:	ffbfd06f          	j	20403d72 <metal_lc14_interrupt_vector_handler>

20405d7c <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
20405d7c:	888fe06f          	j	20403e04 <metal_lc15_interrupt_vector_handler>

20405d80 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405d80:	1101                	addi	sp,sp,-32
20405d82:	ce22                	sw	s0,28(sp)
20405d84:	1000                	addi	s0,sp,32
20405d86:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
20405d8a:	fec42703          	lw	a4,-20(s0)
20405d8e:	800017b7          	lui	a5,0x80001
20405d92:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffe44c>
20405d96:	00f71763          	bne	a4,a5,20405da4 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
20405d9a:	03dfd7b7          	lui	a5,0x3dfd
20405d9e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405da2:	a011                	j	20405da6 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
20405da4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
20405da6:	853e                	mv	a0,a5
20405da8:	4472                	lw	s0,28(sp)
20405daa:	6105                	addi	sp,sp,32
20405dac:	8082                	ret

20405dae <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
20405dae:	1101                	addi	sp,sp,-32
20405db0:	ce06                	sw	ra,28(sp)
20405db2:	cc22                	sw	s0,24(sp)
20405db4:	1000                	addi	s0,sp,32
20405db6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
20405dba:	fec42503          	lw	a0,-20(s0)
20405dbe:	37c9                	jal	20405d80 <__metal_driver_fixed_clock_rate>
20405dc0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405dc2:	853e                	mv	a0,a5
20405dc4:	40f2                	lw	ra,28(sp)
20405dc6:	4462                	lw	s0,24(sp)
20405dc8:	6105                	addi	sp,sp,32
20405dca:	8082                	ret

20405dcc <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
20405dcc:	1101                	addi	sp,sp,-32
20405dce:	ce06                	sw	ra,28(sp)
20405dd0:	cc22                	sw	s0,24(sp)
20405dd2:	1000                	addi	s0,sp,32
20405dd4:	fea42623          	sw	a0,-20(s0)
20405dd8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
20405ddc:	fec42503          	lw	a0,-20(s0)
20405de0:	37f9                	jal	20405dae <__metal_driver_fixed_clock_get_rate_hz>
20405de2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20405de4:	853e                	mv	a0,a5
20405de6:	40f2                	lw	ra,28(sp)
20405de8:	4462                	lw	s0,24(sp)
20405dea:	6105                	addi	sp,sp,32
20405dec:	8082                	ret

20405dee <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
20405dee:	1101                	addi	sp,sp,-32
20405df0:	ce06                	sw	ra,28(sp)
20405df2:	cc22                	sw	s0,24(sp)
20405df4:	1000                	addi	s0,sp,32
20405df6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
20405dfa:	fec42503          	lw	a0,-20(s0)
20405dfe:	3575                	jal	20405caa <metal_shutdown>
