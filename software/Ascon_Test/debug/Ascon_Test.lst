
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/debug/Ascon_Test.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/debug/Ascon_Test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x000073e4 memsz 0x000073e4 flags rwx
    LOAD off    0x000087c8 vaddr 0x800007c8 paddr 0x800007c8 align 2**12
         filesz 0x00000000 memsz 0x000034cc flags rw-
    LOAD off    0x00009000 vaddr 0x80000000 paddr 0x204073e8 align 2**12
         filesz 0x000007c8 memsz 0x000007c8 flags rw-
    LOAD off    0x000097c8 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x000097c8 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             0000019e  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00006d02  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           000004dc  20406f04  20406f04  00007f04  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  204073e0  204073e0  000083e0  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             000007c8  80000000  204073e8  00009000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              000028cc  800007c8  800007c8  000087c8  2**3  ALLOC
  6 .stack            00000400  80003094  80003094  000087c8  2**0  ALLOC
  7 .heap             00000800  80003494  80003494  000087c8  2**0  ALLOC
  8 .debug_info       00014d24  00000000  00000000  000097c8  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     000027bb  00000000  00000000  0001e4ec  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000930  00000000  00000000  00020ca8  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     000007c8  00000000  00000000  000215d8  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00009a38  00000000  00000000  00021da0  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        0000381a  00000000  00000000  0002b7d8  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002eff2  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002f01a  2**0  CONTENTS, READONLY
 16 .debug_frame      00002668  00000000  00000000  0002f048  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20406f04 l    d  .rodata	00000000 .rodata
204073e0 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
800007c8 l    d  .bss	00000000 .bss
80003094 l    d  .stack	00000000 .stack
80003494 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
2040013e l       .init	00000000 _skip_init
20407090 l       .rodata	00000000 argv
20407094 l       .rodata	00000000 envp
20407098 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 Ascon_Test.c
20400430 l     F .text	00000404 ROUND
20400834 l     F .text	0000008e P12
204008c2 l     F .text	00000052 P6
800007d4 l     O .bss	00002740 plain_text.2819
80000000 l     O .data	0000001c bytes.2828
8000002c l     O .data	00000010 Key.2825
8000001c l     O .data	00000010 Nonce.2824
80002f14 l     O .bss	00000078 performance.2826
80002f8c l     O .bss	00000078 performance2.2827
8000003c l     O .data	0000001c bytesr.2829
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20402630 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20402b80 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
800007a8 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80003004 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
2040389c l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20403946 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
2040396c l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20403990 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
204039cc l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20403b2c l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20404068 l     F .text	00000024 __metal_driver_cpu_hartid
2040408c l     F .text	0000002a __metal_driver_cpu_timebase
204040b6 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
2040591a l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20405944 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
2040596c l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20405994 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
204059bc l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20405f10 l     F .text	00000026 __metal_driver_sifive_gpio0_base
20405f36 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20405f60 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
204067ca l     F .text	0000002a __metal_driver_sifive_uart0_control_base
204067f4 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20406822 l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
2040684a l     F .text	0000002e __metal_driver_sifive_uart0_clock
20406878 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
204068a2 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
204068cc l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20406ac0 l     F .text	000000d8 pre_rate_change_callback_func
20406b98 l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty_a-vector.o
20406e00 l       .text	00000000 IRQ_0
20406e04 l       .text	00000000 IRQ_1
20406e08 l       .text	00000000 IRQ_2
20406e0c l       .text	00000000 IRQ_3
20406e10 l       .text	00000000 IRQ_4
20406e14 l       .text	00000000 IRQ_5
20406e18 l       .text	00000000 IRQ_6
20406e1c l       .text	00000000 IRQ_7
20406e20 l       .text	00000000 IRQ_8
20406e24 l       .text	00000000 IRQ_9
20406e28 l       .text	00000000 IRQ_10
20406e2c l       .text	00000000 IRQ_11
20406e30 l       .text	00000000 IRQ_12
20406e34 l       .text	00000000 IRQ_13
20406e38 l       .text	00000000 IRQ_14
20406e3c l       .text	00000000 IRQ_15
20406e40 l       .text	00000000 IRQ_LC0
20406e44 l       .text	00000000 IRQ_LC1
20406e48 l       .text	00000000 IRQ_LC2
20406e4c l       .text	00000000 IRQ_LC3
20406e50 l       .text	00000000 IRQ_LC4
20406e54 l       .text	00000000 IRQ_LC5
20406e58 l       .text	00000000 IRQ_LC6
20406e5c l       .text	00000000 IRQ_LC7
20406e60 l       .text	00000000 IRQ_LC8
20406e64 l       .text	00000000 IRQ_LC9
20406e68 l       .text	00000000 IRQ_LC10
20406e6c l       .text	00000000 IRQ_LC11
20406e70 l       .text	00000000 IRQ_LC12
20406e74 l       .text	00000000 IRQ_LC13
20406e78 l       .text	00000000 IRQ_LC14
20406e7c l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20406e80 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000058 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
204073e4 l       .init_array	00000000 __fini_array_end
204073e4 l       .init_array	00000000 __fini_array_start
204073e4 l       .init_array	00000000 __init_array_end
204073e0 l       .init_array	00000000 __preinit_array_end
204073e0 l       .init_array	00000000 __init_array_start
204073e0 l       .init_array	00000000 __preinit_array_start
204073c0 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
20403006 g     F .text	00000030 _isatty_r
204048be  w    F .text	00000092 metal_lc4_interrupt_vector_handler
204021ca g     F .text	000000da _puts_r
20403036 g     F .text	00000034 _lseek_r
20406a20 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
20403d08 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
2040482c  w    F .text	00000092 metal_lc3_interrupt_vector_handler
204016c4 g     F .text	0000001e rdcycle
2040507e g     F .text	00000038 __metal_valid_interrupt_id
20402186 g     F .text	00000044 printf
204054a8 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000fa0 g       .data	00000000 __global_pointer$
20406c9a g     F .text	00000054 _metal_clock_append_to_callbacks
20405a0c g     F .text	00000038 __metal_plic0_complete_interrupt
20405300 g     F .text	00000150 __metal_driver_riscv_cpu_controller_interrupt_register
20402f34 g     F .text	00000036 __sseek
204026e6 g     F .text	0000006a __sinit
204022b2 g     F .text	000000c0 __swbuf_r
204026a2 g     F .text	00000044 __sfmoreglue
20403086 g     F .text	00000002 __malloc_unlock
20406d74 g     F .text	0000002a metal_cpu_get
80000780 g     O .data	00000020 __metal_dt_serial_10013000
204063a4 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
204070a4 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80003094 g       .bss	00000000 metal_segment_bss_target_end
204039fc g     F .text	0000009a __metal_clint0_mtime_get
204058ae g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20406154 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
2040361c g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20406936 g     F .text	00000034 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
800007c8 g       .bss	00000000 metal_segment_bss_target_start
20403a96 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20402fd4 g     F .text	00000032 _fstat_r
204065f4 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80003090 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20406cee g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20404b98  w    F .text	00000092 metal_lc9_interrupt_vector_handler
204072f8 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
204072b8 g     O .rodata	00000040 __metal_driver_vtable_cpu
20403918 g     F .text	0000002e metal_uart_set_baud_rate
20406bc8 g     F .text	000000d2 __metal_driver_sifive_uart0_init
20400410 g     F .text	00000020 SEED
2040553c g     F .text	00000072 __metal_driver_cpu_mcycle_get
80003494 g       .heap	00000000 metal_segment_heap_target_start
20402698 g     F .text	0000000a _cleanup_r
800007b8 g     O .data	00000004 __metal_dt_cpu_0
20401654 g     F .text	00000070 rand_ascon
20404b06  w    F .text	00000092 metal_lc8_interrupt_vector_handler
204022a4 g     F .text	0000000e puts
20404de0  w    F .text	00000092 metal_lc13_interrupt_vector_handler
2040424a g     F .text	00000018 __metal_default_exception_handler
2040348c g     F .text	00000026 _fstat
20400e22 g     F .text	000005a4 crypto_aead_decrypt
20404034 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20405aa8 g     F .text	00000062 __metal_plic0_set_priority
204054c4 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
204040e0 g     F .text	0000002c __metal_driver_cpu_get
2040726c g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
204003de g     F .text	00000032 RAND
2040413e g     F .text	00000018 __metal_interrupt_global_disable
20404a74  w    F .text	00000092 metal_lc7_interrupt_vector_handler
20404c2a  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20402e86 g     F .text	00000030 _sbrk_r
20405ec8 g     F .text	00000048 __metal_driver_riscv_plic0_disable
20405172 g     F .text	0000004e __metal_exception_register
20403436 g     F .text	00000034 _read_r
204056d0 g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20406236 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20404336 g     F .text	00000064 __metal_default_sw_handler
20406d1e g     F .text	00000030 metal_clock_register_post_rate_change_callback
204068f6 g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
204034b2 g     F .text	00000020 _isatty
204062fc g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
800007c0 g     O .data	00000008 __metal_driver_vtable_fixed_clock
800007a4 g     O .data	00000004 _global_impure_ptr
2040439a  w    F .text	0000008e metal_timer_interrupt_vector_handler
2040368c g     F .text	0000006a __libc_init_array
20406276 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
20404cbc  w    F .text	00000092 metal_lc11_interrupt_vector_handler
20405450 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
20403526 g     F .text	0000007e _sbrk
204061f0 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
2040017c g     F .init	00000002 _init
204041a0 g     F .text	0000001a __metal_interrupt_timer_disable
204063ee g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20405786 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20407384 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
2040633c g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20403654 g     F .text	00000038 __libc_fini_array
2040677c g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20405710 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
204041f2 g     F .text	0000002c __metal_interrupt_local_enable
20404000 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
2040384a g     F .text	0000002c metal_tty_putc
20405bcc g     F .text	00000018 __metal_plic0_default_handler
800000b8 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20406ff4 g     O .rodata	00000020 __sf_fake_stderr
204041d6 g     F .text	0000001c __metal_interrupt_external_disable
20406914 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20405520 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
204051c0 g     F .text	00000140 __metal_driver_riscv_cpu_controller_interrupt_init
20402baa g     F .text	00000042 __sfputs_r
20405868 g     F .text	00000046 __metal_driver_cpu_exception_register
20404156 g     F .text	00000018 __metal_interrupt_software_enable
20404708  w    F .text	00000092 metal_lc1_interrupt_vector_handler
2040306a g     F .text	0000001a memchr
204029f6 g     F .text	000000ac _free_r
800007d0 g     O .bss	00000004 _global_atexit
20400914 g     F .text	0000050e crypto_aead_encrypt
20404f96 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20403782 g     F .text	000000c8 __call_exitprocs
80003494 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
204034d2 g     F .text	0000002a _lseek
20405848 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
204058dc g     F .text	0000001e __metal_driver_cpu_get_exception_pc
204041ba g     F .text	0000001c __metal_interrupt_external_enable
204036f6 g     F .text	0000008c __register_exitproc
2040696a g     F .text	00000040 __metal_driver_sifive_uart0_putc
20405c78 g     F .text	00000146 __metal_driver_riscv_plic0_init
20405e80 g     F .text	00000048 __metal_driver_riscv_plic0_enable
204061c4 g     F .text	0000002c __metal_driver_sifive_gpio0_output
204049e2  w    F .text	00000092 metal_lc6_interrupt_vector_handler
2040410c g     F .text	0000001a __metal_myhart_id
2040679c g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20400392 g     F .text	0000004c HASH
204042a8  w    F .text	0000008e metal_software_interrupt_vector_handler
2040547c g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20402fa4 g     F .text	00000030 _close_r
20406a00 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
204013c6 g     F .text	000001fa crypto_hash
20403bea g     F .text	000000da __metal_driver_riscv_clint0_register
800007b0 g     O .data	00000008 __metal_dt_clint_2000000
20402372 g     F .text	00000110 __swsetup_r
20402750 g     F .text	0000009e __sfp
20402eb6 g     F .text	00000030 __sread
20406114 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
2040017e  w    F .init	00000000 secondary_main
2040427a  w    F .text	0000002e metal_interrupt_vector_handler
20403084 g     F .text	00000002 __malloc_lock
204025cc g     F .text	00000064 _fflush_r
20405a7c g     F .text	0000002c __metal_plic0_get_threshold
20407014 g     O .rodata	00000020 __sf_fake_stdin
204050b6 g     F .text	000000bc __metal_local_interrupt_enable
20403eca g     F .text	00000136 __metal_driver_riscv_clint0_command_request
2040294e g     F .text	000000a8 memset
20404950  w    F .text	00000092 metal_lc5_interrupt_vector_handler
204016e2 g     F .text	00000aa4 main
800007c8 g       .data	00000000 metal_segment_data_target_end
20405724 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
204057e8 g     F .text	00000060 __metal_driver_cpu_get_msip
20406db8 g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
204058fa g     F .text	00000020 __metal_driver_cpu_set_exception_pc
204059de g     F .text	0000002e __metal_plic0_claim_interrupt
20402f6a g     F .text	00000006 __sclose
20404d4e  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20402aa2 g     F .text	000000de _malloc_r
20403cec g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
204055ae g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20406d9e g     F .text	0000001a metal_cpu_get_current_hartid
204002bc g     F .text	000000d6 AEAD_DEC
20406e00 g       .text	00000000 __metal_vector_table
204073e8 g       *ABS*	00000000 metal_segment_itim_source_start
800007ac  w    O .data	00000004 __metal_cpu_table
800000c8 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
2040017c g     F .init	00000002 _fini
20402186 g     F .text	00000044 iprintf
20404126 g     F .text	00000018 __metal_interrupt_global_enable
20403612 g     F .text	0000000a atexit
20403876 g     F .text	00000026 metal_tty_putc_raw
20402f70 g     F .text	00000034 _write_r
20404186 g     F .text	0000001a __metal_interrupt_timer_enable
204069aa g     F .text	00000056 __metal_driver_sifive_uart0_getc
20403e12 g     F .text	000000b8 __metal_driver_riscv_clint0_disable
20403088 g     F .text	0000010c _printf_common
800007a0 g     O .data	00000004 _impure_ptr
2040565a g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20402482 g     F .text	0000014a __sflush_r
20406eae g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20403d5c g     F .text	000000b6 __metal_driver_riscv_clint0_enable
204073e8 g       *ABS*	00000000 metal_segment_data_source_start
80003c94 g       .heap	00000000 metal_segment_heap_target_end
20404fe6 g     F .text	00000098 __metal_controller_interrupt_vector
80000480 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
2040285a g     F .text	00000058 __swhatbuf_r
204062b6 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20404428 g     F .text	00000066 __metal_default_timer_handler
204035a4 g     F .text	0000006e _write
20405be4 g     F .text	00000094 __metal_plic0_handler
2040479a  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20404f04  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20406d4e g     F .text	00000026 metal_cpu_interrupt_controller
20402ee6 g     F .text	0000004e __swrite
20403628 g     F .text	0000002c exit
20402bec g     F .text	0000029a _vfiprintf_r
204027ee g     F .text	0000006c _fwalk_reent
20406ecc g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20407034 g     O .rodata	00000020 __sf_fake_stdout
800007bc g     O .data	00000004 __metal_dt_gpio_10012000
20404262 g     F .text	00000018 __metal_default_interrupt_handler
204038ea g     F .text	0000002e metal_uart_putc
204034fc g     F .text	0000002a _read
2040619a g     F .text	0000002a __metal_driver_sifive_gpio0_input
20404500 g     F .text	00000150 __metal_exception_handler
20404676  w    F .text	00000092 metal_lc0_interrupt_vector_handler
20406eee g     F .text	00000014 _exit
204055f4 g     F .text	00000066 __metal_driver_cpu_mtime_get
204028b2 g     F .text	0000009c __smakebuf_r
20403cc4 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20403194 g     F .text	000002a2 _printf_i
800007cc g     O .bss	00000004 __malloc_sbrk_start
20404e72  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20403b62 g     F .text	00000088 __metal_driver_riscv_clint0_init
800007c8 g     O .bss	00000004 __malloc_free_list
20400200 g     F .text	000000bc AEAD_ENC
20402bec g     F .text	0000029a _vfprintf_r
204056e6 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
204015c0 g     F .text	00000094 init_seed
20405b3e g     F .text	0000008e __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
204056fa g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
2040421e g     F .text	0000002c __metal_interrupt_local_disable
2040416e g     F .text	00000018 __metal_interrupt_software_disable
20405b0a g     F .text	00000034 __metal_plic0_get_priority
204038be g     F .text	0000002c metal_uart_init
20405a44 g     F .text	00000038 __metal_plic0_set_threshold
2040346a g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20405dbe g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	fa018193          	addi	gp,gp,-96 # 80000fa0 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	f2018193          	addi	gp,gp,-224 # 80000fa0 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	5fc03117          	auipc	sp,0x5fc03
2040008c:	40c10113          	addi	sp,sp,1036 # 80003494 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
20400090:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
20400092:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400096:	00a28563          	beq	t0,a0,204000a0 <_start+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
2040009a:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
2040009c:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009e:	bfe5                	j	20400096 <_start+0x18>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
204000a0:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a4:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a8:	08551b63          	bne	a0,t0,2040013e <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000ac:	00007297          	auipc	t0,0x7
204000b0:	33c28293          	addi	t0,t0,828 # 204073e8 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b4:	5fc00317          	auipc	t1,0x5fc00
204000b8:	f4c30313          	addi	t1,t1,-180 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000bc:	82818393          	addi	t2,gp,-2008 # 800007c8 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000c0:	00628c63          	beq	t0,t1,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c4:	00735a63          	bge	t1,t2,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000cc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ce:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000d2:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d4:	fe734ae3          	blt	t1,t2,204000c8 <_start+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d8:	00007297          	auipc	t0,0x7
204000dc:	31028293          	addi	t0,t0,784 # 204073e8 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000e0:	e7c00317          	auipc	t1,0xe7c00
204000e4:	f2030313          	addi	t1,t1,-224 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e8:	e7c00397          	auipc	t2,0xe7c00
204000ec:	f1838393          	addi	t2,t2,-232 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000f0:	00628c63          	beq	t0,t1,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f4:	00735a63          	bge	t1,t2,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000fc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fe:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
20400102:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400104:	fe734ae3          	blt	t1,t2,204000f8 <_start+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400108:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
2040010c:	5fc00317          	auipc	t1,0x5fc00
20400110:	6bc30313          	addi	t1,t1,1724 # 800007c8 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400114:	5fc03397          	auipc	t2,0x5fc03
20400118:	f8038393          	addi	t2,t2,-128 # 80003094 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
2040011c:	00735763          	bge	t1,t2,2040012a <_start+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400120:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
20400124:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
20400126:	fe734de3          	blt	t1,t2,20400120 <_start+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2040012a:	c211                	beqz	a2,2040012e <_start+0xb0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
2040012c:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
2040012e:	00003517          	auipc	a0,0x3
20400132:	52650513          	addi	a0,a0,1318 # 20403654 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
20400136:	4dc030ef          	jal	ra,20403612 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
2040013a:	552030ef          	jal	ra,2040368c <__libc_init_array>

2040013e <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
2040013e:	3f0d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400140:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
20400144:	00010737          	lui	a4,0x10
20400148:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
2040014c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
2040014e:	cb89                	beqz	a5,20400160 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400150:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
20400154:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
20400156:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400158:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
2040015c:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400160:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
20400162:	00007597          	auipc	a1,0x7
20400166:	f2e58593          	addi	a1,a1,-210 # 20407090 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
2040016a:	00007617          	auipc	a2,0x7
2040016e:	f2a60613          	addi	a2,a2,-214 # 20407094 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
20400172:	2031                	jal	2040017e <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
20400174:	4b4030ef          	jal	ra,20403628 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400178:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
2040017a:	8082                	ret

2040017c <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
2040017c:	8082                	ret

2040017e <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
2040017e:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400180:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
20400182:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
20400186:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
2040018a:	00628563          	beq	t0,t1,20400194 <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
2040018e:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
20400192:	bff5                	j	2040018e <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
20400194:	54e010ef          	jal	ra,204016e2 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400198:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
2040019a:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
2040019c:	8082                	ret

Disassembly of section .text:

20400200 <AEAD_ENC>:
AEAD_ENC():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:69
}

u32 AEAD_ENC(u32 *ad_addr, u32 ad_len,
             u32 *p_addr, u32 p_len,
             u32 *c_addr, u32 *nonce_addr,
             u32 *key_addr) {
20400200:	7139                	addi	sp,sp,-64
20400202:	de22                	sw	s0,60(sp)
20400204:	0080                	addi	s0,sp,64
20400206:	fca42e23          	sw	a0,-36(s0)
2040020a:	fcb42c23          	sw	a1,-40(s0)
2040020e:	fcc42a23          	sw	a2,-44(s0)
20400212:	fcd42823          	sw	a3,-48(s0)
20400216:	fce42623          	sw	a4,-52(s0)
2040021a:	fcf42423          	sw	a5,-56(s0)
2040021e:	fd042223          	sw	a6,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:70
    u32 rd = 0;
20400222:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:72
    //printf("Init Enc\n");
    asm volatile("fence");
20400226:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:73
    ROCC_INSTRUCTION_DS(0, rd, nonce_addr, Enc_Set_Nonce);
2040022a:	fc842783          	lw	a5,-56(s0)
2040022e:	85be                	mv	a1,a5
20400230:	2805e50b          	0x2805e50b
20400234:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:74
    asm volatile("fence":: : "memory");
20400238:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:78
    //printf("Set Nonce finish : %08x \n", rd);


    asm volatile("fence");
2040023c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:79
    ROCC_INSTRUCTION_DS(0, rd, key_addr, Enc_Set_Key);
20400240:	fc442783          	lw	a5,-60(s0)
20400244:	85be                	mv	a1,a5
20400246:	2a05e50b          	0x2a05e50b
2040024a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:80
    asm volatile("fence":: : "memory");
2040024e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:83
    //printf("Set Key  finish : %07x \n", rd);

    asm volatile("fence");
20400252:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:84
    ROCC_INSTRUCTION_DSS(0, rd, p_addr, p_len, Enc_Set_P);
20400256:	fd442783          	lw	a5,-44(s0)
2040025a:	85be                	mv	a1,a5
2040025c:	fd042603          	lw	a2,-48(s0)
20400260:	22c5f50b          	0x22c5f50b
20400264:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:85
    asm volatile("fence":: : "memory");
20400268:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:88
    //printf("Set Plain text finish length : %08x \n", rd);

    asm volatile("fence");
2040026c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:89
    ROCC_INSTRUCTION_DSS(0, rd, ad_addr, ad_len, Enc_Set_AD);
20400270:	fdc42783          	lw	a5,-36(s0)
20400274:	85be                	mv	a1,a5
20400276:	fd842603          	lw	a2,-40(s0)
2040027a:	24c5f50b          	0x24c5f50b
2040027e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:90
    asm volatile("fence":: : "memory");
20400282:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:93
    //printf("Set Associated Data finish length: %08x \n", rd);

    asm volatile("fence");
20400286:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:94
    ROCC_INSTRUCTION_DS(0, rd, c_addr, Enc_Set_C_Tag);
2040028a:	fcc42783          	lw	a5,-52(s0)
2040028e:	85be                	mv	a1,a5
20400290:	2605e50b          	0x2605e50b
20400294:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:95
    asm volatile("fence":: : "memory");
20400298:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:98
    //printf("Set Dec addr: %08x \n", rd);

    asm volatile("fence");
2040029c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:99
    ROCC_INSTRUCTION_DS(0, rd, rd, Enc_Init);
204002a0:	fec42583          	lw	a1,-20(s0)
204002a4:	2c05e50b          	0x2c05e50b
204002a8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:100
    asm volatile("fence":: : "memory");
204002ac:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:102
    //printf("Finish AEAD Dec %08x \n", rd);
    return rd;
204002b0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:103
}
204002b4:	853e                	mv	a0,a5
204002b6:	5472                	lw	s0,60(sp)
204002b8:	6121                	addi	sp,sp,64
204002ba:	8082                	ret

204002bc <AEAD_DEC>:
AEAD_DEC():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:108

u32 AEAD_DEC(u32 *ad_addr, u32 ad_len,
             u32 *c_addr, u32 c_len,
             u32 *d_addr, u32 *nonce_addr,
             u32 *key_addr, u32 *tag_addr) {
204002bc:	7139                	addi	sp,sp,-64
204002be:	de22                	sw	s0,60(sp)
204002c0:	0080                	addi	s0,sp,64
204002c2:	fca42e23          	sw	a0,-36(s0)
204002c6:	fcb42c23          	sw	a1,-40(s0)
204002ca:	fcc42a23          	sw	a2,-44(s0)
204002ce:	fcd42823          	sw	a3,-48(s0)
204002d2:	fce42623          	sw	a4,-52(s0)
204002d6:	fcf42423          	sw	a5,-56(s0)
204002da:	fd042223          	sw	a6,-60(s0)
204002de:	fd142023          	sw	a7,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:109
    u32 rd = 0;
204002e2:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:111
    // printf("Init DEC\n");
    asm volatile("fence");
204002e6:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:112
    ROCC_INSTRUCTION_DS(0, rd, nonce_addr, Enc_Set_Nonce);
204002ea:	fc842783          	lw	a5,-56(s0)
204002ee:	85be                	mv	a1,a5
204002f0:	2805e50b          	0x2805e50b
204002f4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:113
    asm volatile("fence":: : "memory");
204002f8:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:116
    //printf("Set Nonce finish : %08x \n", rd);

    asm volatile("fence");
204002fc:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:117
    ROCC_INSTRUCTION_DS(0, rd, tag_addr, Dec_Load_Tag);
20400300:	fc042783          	lw	a5,-64(s0)
20400304:	85be                	mv	a1,a5
20400306:	2e05e50b          	0x2e05e50b
2040030a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:118
    asm volatile("fence":: : "memory");
2040030e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:121
    //printf("Load Tag finish : %08x \n", rd);

    asm volatile("fence");
20400312:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:122
    ROCC_INSTRUCTION_DS(0, rd, key_addr, Enc_Set_Key);
20400316:	fc442783          	lw	a5,-60(s0)
2040031a:	85be                	mv	a1,a5
2040031c:	2a05e50b          	0x2a05e50b
20400320:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:123
    asm volatile("fence":: : "memory");
20400324:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:126
    //printf("Set Key  finish : %07x \n", rd);

    asm volatile("fence");
20400328:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:127
    ROCC_INSTRUCTION_DSS(0, rd, c_addr, c_len, Enc_Set_P);
2040032c:	fd442783          	lw	a5,-44(s0)
20400330:	85be                	mv	a1,a5
20400332:	fd042603          	lw	a2,-48(s0)
20400336:	22c5f50b          	0x22c5f50b
2040033a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:128
    asm volatile("fence":: : "memory");
2040033e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:131
    //printf("Set Plain text finish length : %08x \n", rd);

    asm volatile("fence");
20400342:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:132
    ROCC_INSTRUCTION_DSS(0, rd, ad_addr, ad_len, Enc_Set_AD);
20400346:	fdc42783          	lw	a5,-36(s0)
2040034a:	85be                	mv	a1,a5
2040034c:	fd842603          	lw	a2,-40(s0)
20400350:	24c5f50b          	0x24c5f50b
20400354:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:133
    asm volatile("fence":: : "memory");
20400358:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:136
    //printf("Set Associated Data finish length: %08x \n", rd);

    asm volatile("fence");
2040035c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:137
    ROCC_INSTRUCTION_DS(0, rd, d_addr, Enc_Set_C_Tag);
20400360:	fcc42783          	lw	a5,-52(s0)
20400364:	85be                	mv	a1,a5
20400366:	2605e50b          	0x2605e50b
2040036a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:138
    asm volatile("fence":: : "memory");
2040036e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:141
    //printf("Set Dec addr: %08x \n", rd);

    asm volatile("fence");
20400372:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:142
    ROCC_INSTRUCTION_DS(0, rd, rd, Dec_Init);
20400376:	fec42583          	lw	a1,-20(s0)
2040037a:	3005e50b          	0x3005e50b
2040037e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:143
    asm volatile("fence":: : "memory");
20400382:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:145
    //printf("Finish AEAD Dec %08x \n", rd);
    return rd;
20400386:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:146
}
2040038a:	853e                	mv	a0,a5
2040038c:	5472                	lw	s0,60(sp)
2040038e:	6121                	addi	sp,sp,64
20400390:	8082                	ret

20400392 <HASH>:
HASH():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:149

u32 HASH(u32 *m_addr, u32 m_len,
         u32 *h_addr) {
20400392:	7179                	addi	sp,sp,-48
20400394:	d622                	sw	s0,44(sp)
20400396:	1800                	addi	s0,sp,48
20400398:	fca42e23          	sw	a0,-36(s0)
2040039c:	fcb42c23          	sw	a1,-40(s0)
204003a0:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:152
    u32 rd;
    //printf("Init Hash\n");
    asm volatile("fence");
204003a4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:153
    ROCC_INSTRUCTION_DSS(0, rd, m_addr, m_len, Hash_Set_M);
204003a8:	fdc42783          	lw	a5,-36(s0)
204003ac:	85be                	mv	a1,a5
204003ae:	fd842603          	lw	a2,-40(s0)
204003b2:	62c5f50b          	0x62c5f50b
204003b6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:154
    asm volatile("fence":: : "memory");
204003ba:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:157
    //printf("Set M : %08x \n", rd);

    asm volatile("fence");
204003be:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:158
    ROCC_INSTRUCTION_DS(0, rd, h_addr, Hash_Init);
204003c2:	fd442783          	lw	a5,-44(s0)
204003c6:	85be                	mv	a1,a5
204003c8:	6405e50b          	0x6405e50b
204003cc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:159
    asm volatile("fence":: : "memory");
204003d0:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:161
    //printf(" Finish Hash: %08x \n", rd);
    return 0;
204003d4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:162
}
204003d6:	853e                	mv	a0,a5
204003d8:	5432                	lw	s0,44(sp)
204003da:	6145                	addi	sp,sp,48
204003dc:	8082                	ret

204003de <RAND>:
RAND():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:164

u32 RAND(u32 *return_addr, u32 num_rands) {
204003de:	7179                	addi	sp,sp,-48
204003e0:	d622                	sw	s0,44(sp)
204003e2:	1800                	addi	s0,sp,48
204003e4:	fca42e23          	sw	a0,-36(s0)
204003e8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:166
    u32 rd;
    asm volatile("fence");
204003ec:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:167
    ROCC_INSTRUCTION_DSS(0, rd, return_addr, num_rands, R_Rand);
204003f0:	fdc42783          	lw	a5,-36(s0)
204003f4:	85be                	mv	a1,a5
204003f6:	fd842603          	lw	a2,-40(s0)
204003fa:	84c5f50b          	0x84c5f50b
204003fe:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:168
    asm volatile("fence":: : "memory");
20400402:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:170
    //printf(" Finish Rand: %08x \n", rd);
    return 0;
20400406:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:171
}
20400408:	853e                	mv	a0,a5
2040040a:	5432                	lw	s0,44(sp)
2040040c:	6145                	addi	sp,sp,48
2040040e:	8082                	ret

20400410 <SEED>:
SEED():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:173

u32 SEED() {
20400410:	1101                	addi	sp,sp,-32
20400412:	ce22                	sw	s0,28(sp)
20400414:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:175
    u32 rd;
    asm volatile("fence");
20400416:	0ff0000f          	fence
2040041a:	8200450b          	0x8200450b
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:176
    ROCC_INSTRUCTION_D(0, rd, R_Seed);
2040041e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:177
    asm volatile("fence":: : "memory");
20400422:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:178
    return 0;
20400426:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../AsconHW/AEAD_HW.h:179
}
20400428:	853e                	mv	a0,a5
2040042a:	4472                	lw	s0,28(sp)
2040042c:	6105                	addi	sp,sp,32
2040042e:	8082                	ret

20400430 <ROUND>:
ROUND():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:47
    }
    return res;

}

static inline void ROUND(ascon_state_t *s, u32 C) {
20400430:	711d                	addi	sp,sp,-96
20400432:	cea2                	sw	s0,92(sp)
20400434:	1080                	addi	s0,sp,96
20400436:	faa42623          	sw	a0,-84(s0)
2040043a:	fab42423          	sw	a1,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:50
    ascon_state_t t;
    // addition of round constant
    s->xl[2] ^=C;
2040043e:	fac42783          	lw	a5,-84(s0)
20400442:	4fd8                	lw	a4,28(a5)
20400444:	fa842783          	lw	a5,-88(s0)
20400448:	8f3d                	xor	a4,a4,a5
2040044a:	fac42783          	lw	a5,-84(s0)
2040044e:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:54
    // printstate(" round constant", s);
    // substitution layer

    s->xh[0] ^= s->xh[4];
20400450:	fac42783          	lw	a5,-84(s0)
20400454:	4398                	lw	a4,0(a5)
20400456:	fac42783          	lw	a5,-84(s0)
2040045a:	4b9c                	lw	a5,16(a5)
2040045c:	8f3d                	xor	a4,a4,a5
2040045e:	fac42783          	lw	a5,-84(s0)
20400462:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:55
    s->xl[0] ^= s->xl[4];
20400464:	fac42783          	lw	a5,-84(s0)
20400468:	4bd8                	lw	a4,20(a5)
2040046a:	fac42783          	lw	a5,-84(s0)
2040046e:	53dc                	lw	a5,36(a5)
20400470:	8f3d                	xor	a4,a4,a5
20400472:	fac42783          	lw	a5,-84(s0)
20400476:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:57

    s->xh[4] ^= s->xh[3];
20400478:	fac42783          	lw	a5,-84(s0)
2040047c:	4b98                	lw	a4,16(a5)
2040047e:	fac42783          	lw	a5,-84(s0)
20400482:	47dc                	lw	a5,12(a5)
20400484:	8f3d                	xor	a4,a4,a5
20400486:	fac42783          	lw	a5,-84(s0)
2040048a:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:58
    s->xl[4] ^= s->xl[3];
2040048c:	fac42783          	lw	a5,-84(s0)
20400490:	53d8                	lw	a4,36(a5)
20400492:	fac42783          	lw	a5,-84(s0)
20400496:	539c                	lw	a5,32(a5)
20400498:	8f3d                	xor	a4,a4,a5
2040049a:	fac42783          	lw	a5,-84(s0)
2040049e:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:60

    s->xh[2] ^= s->xh[1];
204004a0:	fac42783          	lw	a5,-84(s0)
204004a4:	4798                	lw	a4,8(a5)
204004a6:	fac42783          	lw	a5,-84(s0)
204004aa:	43dc                	lw	a5,4(a5)
204004ac:	8f3d                	xor	a4,a4,a5
204004ae:	fac42783          	lw	a5,-84(s0)
204004b2:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:61
    s->xl[2] ^= s->xl[1];
204004b4:	fac42783          	lw	a5,-84(s0)
204004b8:	4fd8                	lw	a4,28(a5)
204004ba:	fac42783          	lw	a5,-84(s0)
204004be:	4f9c                	lw	a5,24(a5)
204004c0:	8f3d                	xor	a4,a4,a5
204004c2:	fac42783          	lw	a5,-84(s0)
204004c6:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:63
    // start of keccak s-box
    t.xh[0] = s->xh[0] ^ (~s->xh[1] & s->xh[2]);
204004c8:	fac42783          	lw	a5,-84(s0)
204004cc:	4398                	lw	a4,0(a5)
204004ce:	fac42783          	lw	a5,-84(s0)
204004d2:	43dc                	lw	a5,4(a5)
204004d4:	fff7c693          	not	a3,a5
204004d8:	fac42783          	lw	a5,-84(s0)
204004dc:	479c                	lw	a5,8(a5)
204004de:	8ff5                	and	a5,a5,a3
204004e0:	8fb9                	xor	a5,a5,a4
204004e2:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:64
    t.xl[0] = s->xl[0] ^ (~s->xl[1] & s->xl[2]);
204004e6:	fac42783          	lw	a5,-84(s0)
204004ea:	4bd8                	lw	a4,20(a5)
204004ec:	fac42783          	lw	a5,-84(s0)
204004f0:	4f9c                	lw	a5,24(a5)
204004f2:	fff7c693          	not	a3,a5
204004f6:	fac42783          	lw	a5,-84(s0)
204004fa:	4fdc                	lw	a5,28(a5)
204004fc:	8ff5                	and	a5,a5,a3
204004fe:	8fb9                	xor	a5,a5,a4
20400500:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:66

    t.xh[1] = s->xh[1] ^ (~s->xh[2] & s->xh[3]);
20400504:	fac42783          	lw	a5,-84(s0)
20400508:	43d8                	lw	a4,4(a5)
2040050a:	fac42783          	lw	a5,-84(s0)
2040050e:	479c                	lw	a5,8(a5)
20400510:	fff7c693          	not	a3,a5
20400514:	fac42783          	lw	a5,-84(s0)
20400518:	47dc                	lw	a5,12(a5)
2040051a:	8ff5                	and	a5,a5,a3
2040051c:	8fb9                	xor	a5,a5,a4
2040051e:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:67
    t.xl[1] = s->xl[1] ^ (~s->xl[2] & s->xl[3]);
20400522:	fac42783          	lw	a5,-84(s0)
20400526:	4f98                	lw	a4,24(a5)
20400528:	fac42783          	lw	a5,-84(s0)
2040052c:	4fdc                	lw	a5,28(a5)
2040052e:	fff7c693          	not	a3,a5
20400532:	fac42783          	lw	a5,-84(s0)
20400536:	539c                	lw	a5,32(a5)
20400538:	8ff5                	and	a5,a5,a3
2040053a:	8fb9                	xor	a5,a5,a4
2040053c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:69

    t.xh[2] = s->xh[2] ^ (~s->xh[3] & s->xh[4]);
20400540:	fac42783          	lw	a5,-84(s0)
20400544:	4798                	lw	a4,8(a5)
20400546:	fac42783          	lw	a5,-84(s0)
2040054a:	47dc                	lw	a5,12(a5)
2040054c:	fff7c693          	not	a3,a5
20400550:	fac42783          	lw	a5,-84(s0)
20400554:	4b9c                	lw	a5,16(a5)
20400556:	8ff5                	and	a5,a5,a3
20400558:	8fb9                	xor	a5,a5,a4
2040055a:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:70
    t.xl[2] = s->xl[2] ^ (~s->xl[3] & s->xl[4]);
2040055e:	fac42783          	lw	a5,-84(s0)
20400562:	4fd8                	lw	a4,28(a5)
20400564:	fac42783          	lw	a5,-84(s0)
20400568:	539c                	lw	a5,32(a5)
2040056a:	fff7c693          	not	a3,a5
2040056e:	fac42783          	lw	a5,-84(s0)
20400572:	53dc                	lw	a5,36(a5)
20400574:	8ff5                	and	a5,a5,a3
20400576:	8fb9                	xor	a5,a5,a4
20400578:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:72

    t.xh[3] = s->xh[3] ^ (~s->xh[4] & s->xh[0]);
2040057c:	fac42783          	lw	a5,-84(s0)
20400580:	47d8                	lw	a4,12(a5)
20400582:	fac42783          	lw	a5,-84(s0)
20400586:	4b9c                	lw	a5,16(a5)
20400588:	fff7c693          	not	a3,a5
2040058c:	fac42783          	lw	a5,-84(s0)
20400590:	439c                	lw	a5,0(a5)
20400592:	8ff5                	and	a5,a5,a3
20400594:	8fb9                	xor	a5,a5,a4
20400596:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:73
    t.xl[3] = s->xl[3] ^ (~s->xl[4] & s->xl[0]);
2040059a:	fac42783          	lw	a5,-84(s0)
2040059e:	5398                	lw	a4,32(a5)
204005a0:	fac42783          	lw	a5,-84(s0)
204005a4:	53dc                	lw	a5,36(a5)
204005a6:	fff7c693          	not	a3,a5
204005aa:	fac42783          	lw	a5,-84(s0)
204005ae:	4bdc                	lw	a5,20(a5)
204005b0:	8ff5                	and	a5,a5,a3
204005b2:	8fb9                	xor	a5,a5,a4
204005b4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:75

    t.xh[4] = s->xh[4] ^ (~s->xh[0] & s->xh[1]);
204005b8:	fac42783          	lw	a5,-84(s0)
204005bc:	4b98                	lw	a4,16(a5)
204005be:	fac42783          	lw	a5,-84(s0)
204005c2:	439c                	lw	a5,0(a5)
204005c4:	fff7c693          	not	a3,a5
204005c8:	fac42783          	lw	a5,-84(s0)
204005cc:	43dc                	lw	a5,4(a5)
204005ce:	8ff5                	and	a5,a5,a3
204005d0:	8fb9                	xor	a5,a5,a4
204005d2:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:76
    t.xl[4] = s->xl[4] ^ (~s->xl[0] & s->xl[1]);
204005d6:	fac42783          	lw	a5,-84(s0)
204005da:	53d8                	lw	a4,36(a5)
204005dc:	fac42783          	lw	a5,-84(s0)
204005e0:	4bdc                	lw	a5,20(a5)
204005e2:	fff7c693          	not	a3,a5
204005e6:	fac42783          	lw	a5,-84(s0)
204005ea:	4f9c                	lw	a5,24(a5)
204005ec:	8ff5                	and	a5,a5,a3
204005ee:	8fb9                	xor	a5,a5,a4
204005f0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:78
    // end of keccak s-box
    t.xh[1] ^= t.xh[0];
204005f4:	fcc42703          	lw	a4,-52(s0)
204005f8:	fc842783          	lw	a5,-56(s0)
204005fc:	8fb9                	xor	a5,a5,a4
204005fe:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:79
    t.xh[0] ^= t.xh[4];
20400602:	fc842703          	lw	a4,-56(s0)
20400606:	fd842783          	lw	a5,-40(s0)
2040060a:	8fb9                	xor	a5,a5,a4
2040060c:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:80
    t.xh[3] ^= t.xh[2];
20400610:	fd442703          	lw	a4,-44(s0)
20400614:	fd042783          	lw	a5,-48(s0)
20400618:	8fb9                	xor	a5,a5,a4
2040061a:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:81
    t.xh[2] = ~t.xh[2];
2040061e:	fd042783          	lw	a5,-48(s0)
20400622:	fff7c793          	not	a5,a5
20400626:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:82
    t.xl[1] ^= t.xl[0];
2040062a:	fe042703          	lw	a4,-32(s0)
2040062e:	fdc42783          	lw	a5,-36(s0)
20400632:	8fb9                	xor	a5,a5,a4
20400634:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:83
    t.xl[0] ^= t.xl[4];
20400638:	fdc42703          	lw	a4,-36(s0)
2040063c:	fec42783          	lw	a5,-20(s0)
20400640:	8fb9                	xor	a5,a5,a4
20400642:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:84
    t.xl[3] ^= t.xl[2];
20400646:	fe842703          	lw	a4,-24(s0)
2040064a:	fe442783          	lw	a5,-28(s0)
2040064e:	8fb9                	xor	a5,a5,a4
20400650:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:85
    t.xl[2] = ~t.xl[2];
20400654:	fe442783          	lw	a5,-28(s0)
20400658:	fff7c793          	not	a5,a5
2040065c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:91
    // printstate(" substitution layer", &t);
    u64  ror1;
    u64  ror2;
    //linear diffusion layer

    s->xh[0] = t.xh[0] ^ RORH(19,t.xh[0],t.xl[0]) ^ RORH(28,t.xh[0], t.xl[0]);
20400660:	fc842703          	lw	a4,-56(s0)
20400664:	fdc42783          	lw	a5,-36(s0)
20400668:	00d79693          	slli	a3,a5,0xd
2040066c:	fc842783          	lw	a5,-56(s0)
20400670:	83cd                	srli	a5,a5,0x13
20400672:	8fd5                	or	a5,a5,a3
20400674:	8f3d                	xor	a4,a4,a5
20400676:	fdc42783          	lw	a5,-36(s0)
2040067a:	00479693          	slli	a3,a5,0x4
2040067e:	fc842783          	lw	a5,-56(s0)
20400682:	83f1                	srli	a5,a5,0x1c
20400684:	8fd5                	or	a5,a5,a3
20400686:	8f3d                	xor	a4,a4,a5
20400688:	fac42783          	lw	a5,-84(s0)
2040068c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:92
    s->xl[0] = t.xl[0] ^ RORL(19,t.xh[0],t.xl[0]) ^ RORL(28,t.xh[0], t.xl[0]);
2040068e:	fdc42703          	lw	a4,-36(s0)
20400692:	fc842783          	lw	a5,-56(s0)
20400696:	00d79693          	slli	a3,a5,0xd
2040069a:	fdc42783          	lw	a5,-36(s0)
2040069e:	83cd                	srli	a5,a5,0x13
204006a0:	8fd5                	or	a5,a5,a3
204006a2:	8f3d                	xor	a4,a4,a5
204006a4:	fc842783          	lw	a5,-56(s0)
204006a8:	00479693          	slli	a3,a5,0x4
204006ac:	fdc42783          	lw	a5,-36(s0)
204006b0:	83f1                	srli	a5,a5,0x1c
204006b2:	8fd5                	or	a5,a5,a3
204006b4:	8f3d                	xor	a4,a4,a5
204006b6:	fac42783          	lw	a5,-84(s0)
204006ba:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:94

    s->xh[1] = t.xh[1] ^ RORH(61,t.xh[1],t.xl[1]) ^ RORH(39,t.xh[1], t.xl[1]);
204006bc:	fcc42703          	lw	a4,-52(s0)
204006c0:	fcc42783          	lw	a5,-52(s0)
204006c4:	00379693          	slli	a3,a5,0x3
204006c8:	fe042783          	lw	a5,-32(s0)
204006cc:	83f5                	srli	a5,a5,0x1d
204006ce:	8fd5                	or	a5,a5,a3
204006d0:	8f3d                	xor	a4,a4,a5
204006d2:	fcc42783          	lw	a5,-52(s0)
204006d6:	01979693          	slli	a3,a5,0x19
204006da:	fe042783          	lw	a5,-32(s0)
204006de:	839d                	srli	a5,a5,0x7
204006e0:	8fd5                	or	a5,a5,a3
204006e2:	8f3d                	xor	a4,a4,a5
204006e4:	fac42783          	lw	a5,-84(s0)
204006e8:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:95
    s->xl[1] = t.xl[1] ^ RORL(61,t.xh[1],t.xl[1]) ^ RORL(39,t.xh[1], t.xl[1]);
204006ea:	fe042703          	lw	a4,-32(s0)
204006ee:	fe042783          	lw	a5,-32(s0)
204006f2:	00379693          	slli	a3,a5,0x3
204006f6:	fcc42783          	lw	a5,-52(s0)
204006fa:	83f5                	srli	a5,a5,0x1d
204006fc:	8fd5                	or	a5,a5,a3
204006fe:	8f3d                	xor	a4,a4,a5
20400700:	fe042783          	lw	a5,-32(s0)
20400704:	01979693          	slli	a3,a5,0x19
20400708:	fcc42783          	lw	a5,-52(s0)
2040070c:	839d                	srli	a5,a5,0x7
2040070e:	8fd5                	or	a5,a5,a3
20400710:	8f3d                	xor	a4,a4,a5
20400712:	fac42783          	lw	a5,-84(s0)
20400716:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:97

    s->xh[2] = t.xh[2] ^ RORH(1,t.xh[2],t.xl[2]) ^ RORH(6,t.xh[2], t.xl[2]);
20400718:	fd042703          	lw	a4,-48(s0)
2040071c:	fe442783          	lw	a5,-28(s0)
20400720:	01f79693          	slli	a3,a5,0x1f
20400724:	fd042783          	lw	a5,-48(s0)
20400728:	8385                	srli	a5,a5,0x1
2040072a:	8fd5                	or	a5,a5,a3
2040072c:	8f3d                	xor	a4,a4,a5
2040072e:	fe442783          	lw	a5,-28(s0)
20400732:	01a79693          	slli	a3,a5,0x1a
20400736:	fd042783          	lw	a5,-48(s0)
2040073a:	8399                	srli	a5,a5,0x6
2040073c:	8fd5                	or	a5,a5,a3
2040073e:	8f3d                	xor	a4,a4,a5
20400740:	fac42783          	lw	a5,-84(s0)
20400744:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:98
    s->xl[2] = t.xl[2] ^ RORL(1,t.xh[2],t.xl[2]) ^ RORL(6,t.xh[2], t.xl[2]);
20400746:	fe442703          	lw	a4,-28(s0)
2040074a:	fd042783          	lw	a5,-48(s0)
2040074e:	01f79693          	slli	a3,a5,0x1f
20400752:	fe442783          	lw	a5,-28(s0)
20400756:	8385                	srli	a5,a5,0x1
20400758:	8fd5                	or	a5,a5,a3
2040075a:	8f3d                	xor	a4,a4,a5
2040075c:	fd042783          	lw	a5,-48(s0)
20400760:	01a79693          	slli	a3,a5,0x1a
20400764:	fe442783          	lw	a5,-28(s0)
20400768:	8399                	srli	a5,a5,0x6
2040076a:	8fd5                	or	a5,a5,a3
2040076c:	8f3d                	xor	a4,a4,a5
2040076e:	fac42783          	lw	a5,-84(s0)
20400772:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:100

    s->xh[3] = t.xh[3] ^ RORH(10,t.xh[3],t.xl[3]) ^ RORH(17,t.xh[3], t.xl[3]);
20400774:	fd442703          	lw	a4,-44(s0)
20400778:	fe842783          	lw	a5,-24(s0)
2040077c:	01679693          	slli	a3,a5,0x16
20400780:	fd442783          	lw	a5,-44(s0)
20400784:	83a9                	srli	a5,a5,0xa
20400786:	8fd5                	or	a5,a5,a3
20400788:	8f3d                	xor	a4,a4,a5
2040078a:	fe842783          	lw	a5,-24(s0)
2040078e:	00f79693          	slli	a3,a5,0xf
20400792:	fd442783          	lw	a5,-44(s0)
20400796:	83c5                	srli	a5,a5,0x11
20400798:	8fd5                	or	a5,a5,a3
2040079a:	8f3d                	xor	a4,a4,a5
2040079c:	fac42783          	lw	a5,-84(s0)
204007a0:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:101
    s->xl[3] = t.xl[3] ^ RORL(10,t.xh[3],t.xl[3]) ^ RORL(17,t.xh[3], t.xl[3]);
204007a2:	fe842703          	lw	a4,-24(s0)
204007a6:	fd442783          	lw	a5,-44(s0)
204007aa:	01679693          	slli	a3,a5,0x16
204007ae:	fe842783          	lw	a5,-24(s0)
204007b2:	83a9                	srli	a5,a5,0xa
204007b4:	8fd5                	or	a5,a5,a3
204007b6:	8f3d                	xor	a4,a4,a5
204007b8:	fd442783          	lw	a5,-44(s0)
204007bc:	00f79693          	slli	a3,a5,0xf
204007c0:	fe842783          	lw	a5,-24(s0)
204007c4:	83c5                	srli	a5,a5,0x11
204007c6:	8fd5                	or	a5,a5,a3
204007c8:	8f3d                	xor	a4,a4,a5
204007ca:	fac42783          	lw	a5,-84(s0)
204007ce:	d398                	sw	a4,32(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:103

    s->xh[4] = t.xh[4] ^ RORH(7,t.xh[4],t.xl[4]) ^ RORH(41,t.xh[4], t.xl[4]);
204007d0:	fd842703          	lw	a4,-40(s0)
204007d4:	fec42783          	lw	a5,-20(s0)
204007d8:	01979693          	slli	a3,a5,0x19
204007dc:	fd842783          	lw	a5,-40(s0)
204007e0:	839d                	srli	a5,a5,0x7
204007e2:	8fd5                	or	a5,a5,a3
204007e4:	8f3d                	xor	a4,a4,a5
204007e6:	fd842783          	lw	a5,-40(s0)
204007ea:	01779693          	slli	a3,a5,0x17
204007ee:	fec42783          	lw	a5,-20(s0)
204007f2:	83a5                	srli	a5,a5,0x9
204007f4:	8fd5                	or	a5,a5,a3
204007f6:	8f3d                	xor	a4,a4,a5
204007f8:	fac42783          	lw	a5,-84(s0)
204007fc:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:104
    s->xl[4] = t.xl[4] ^ RORL(7,t.xh[4],t.xl[4]) ^ RORL(41,t.xh[4], t.xl[4]);
204007fe:	fec42703          	lw	a4,-20(s0)
20400802:	fd842783          	lw	a5,-40(s0)
20400806:	01979693          	slli	a3,a5,0x19
2040080a:	fec42783          	lw	a5,-20(s0)
2040080e:	839d                	srli	a5,a5,0x7
20400810:	8fd5                	or	a5,a5,a3
20400812:	8f3d                	xor	a4,a4,a5
20400814:	fec42783          	lw	a5,-20(s0)
20400818:	01779693          	slli	a3,a5,0x17
2040081c:	fd842783          	lw	a5,-40(s0)
20400820:	83a5                	srli	a5,a5,0x9
20400822:	8fd5                	or	a5,a5,a3
20400824:	8f3d                	xor	a4,a4,a5
20400826:	fac42783          	lw	a5,-84(s0)
2040082a:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:107

    //printstate(" round output", s);
}
2040082c:	0001                	nop
2040082e:	4476                	lw	s0,92(sp)
20400830:	6125                	addi	sp,sp,96
20400832:	8082                	ret

20400834 <P12>:
P12():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:110


static inline void P12(ascon_state_t* s) {
20400834:	1101                	addi	sp,sp,-32
20400836:	ce06                	sw	ra,28(sp)
20400838:	cc22                	sw	s0,24(sp)
2040083a:	1000                	addi	s0,sp,32
2040083c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:111
  ROUND(s, 0xf0);
20400840:	0f000593          	li	a1,240
20400844:	fec42503          	lw	a0,-20(s0)
20400848:	36e5                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:112
  ROUND(s, 0xe1);
2040084a:	0e100593          	li	a1,225
2040084e:	fec42503          	lw	a0,-20(s0)
20400852:	3ef9                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:113
  ROUND(s, 0xd2);
20400854:	0d200593          	li	a1,210
20400858:	fec42503          	lw	a0,-20(s0)
2040085c:	3ed1                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:114
  ROUND(s, 0xc3);
2040085e:	0c300593          	li	a1,195
20400862:	fec42503          	lw	a0,-20(s0)
20400866:	36e9                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:115
  ROUND(s, 0xb4);
20400868:	0b400593          	li	a1,180
2040086c:	fec42503          	lw	a0,-20(s0)
20400870:	36c1                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:116
  ROUND(s, 0xa5);
20400872:	0a500593          	li	a1,165
20400876:	fec42503          	lw	a0,-20(s0)
2040087a:	3e5d                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:117
  ROUND(s, 0x96);
2040087c:	09600593          	li	a1,150
20400880:	fec42503          	lw	a0,-20(s0)
20400884:	3675                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:118
  ROUND(s, 0x87);
20400886:	08700593          	li	a1,135
2040088a:	fec42503          	lw	a0,-20(s0)
2040088e:	364d                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:119
  ROUND(s, 0x78);
20400890:	07800593          	li	a1,120
20400894:	fec42503          	lw	a0,-20(s0)
20400898:	3e61                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:120
  ROUND(s, 0x69);
2040089a:	06900593          	li	a1,105
2040089e:	fec42503          	lw	a0,-20(s0)
204008a2:	3679                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:121
  ROUND(s, 0x5a);
204008a4:	05a00593          	li	a1,90
204008a8:	fec42503          	lw	a0,-20(s0)
204008ac:	3651                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:122
  ROUND(s, 0x4b);
204008ae:	04b00593          	li	a1,75
204008b2:	fec42503          	lw	a0,-20(s0)
204008b6:	3ead                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:123
}
204008b8:	0001                	nop
204008ba:	40f2                	lw	ra,28(sp)
204008bc:	4462                	lw	s0,24(sp)
204008be:	6105                	addi	sp,sp,32
204008c0:	8082                	ret

204008c2 <P6>:
P6():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:136
  ROUND(s, 0x69);
  ROUND(s, 0x5a);
  ROUND(s, 0x4b);
}

static inline void P6(ascon_state_t* s) {
204008c2:	1101                	addi	sp,sp,-32
204008c4:	ce06                	sw	ra,28(sp)
204008c6:	cc22                	sw	s0,24(sp)
204008c8:	1000                	addi	s0,sp,32
204008ca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:137
  ROUND(s, 0x96);
204008ce:	09600593          	li	a1,150
204008d2:	fec42503          	lw	a0,-20(s0)
204008d6:	3ea9                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:138
  ROUND(s, 0x87);
204008d8:	08700593          	li	a1,135
204008dc:	fec42503          	lw	a0,-20(s0)
204008e0:	3e81                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:139
  ROUND(s, 0x78);
204008e2:	07800593          	li	a1,120
204008e6:	fec42503          	lw	a0,-20(s0)
204008ea:	3699                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:140
  ROUND(s, 0x69);
204008ec:	06900593          	li	a1,105
204008f0:	fec42503          	lw	a0,-20(s0)
204008f4:	3e35                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:141
  ROUND(s, 0x5a);
204008f6:	05a00593          	li	a1,90
204008fa:	fec42503          	lw	a0,-20(s0)
204008fe:	3e0d                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:142
  ROUND(s, 0x4b);
20400900:	04b00593          	li	a1,75
20400904:	fec42503          	lw	a0,-20(s0)
20400908:	3625                	jal	20400430 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/round.h:143
}
2040090a:	0001                	nop
2040090c:	40f2                	lw	ra,28(sp)
2040090e:	4462                	lw	s0,24(sp)
20400910:	6105                	addi	sp,sp,32
20400912:	8082                	ret

20400914 <crypto_aead_encrypt>:
crypto_aead_encrypt():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:16

#define A_128_IV_H 0x80400c06
#define A_128_IV_L 0x00000000


int crypto_aead_encrypt(u32 *c, u32 *clen, u32 *m, u32 mlen, u32 *ad, u32 adlen, u32 *npub, u32 *k) {
20400914:	7119                	addi	sp,sp,-128
20400916:	de86                	sw	ra,124(sp)
20400918:	dca2                	sw	s0,120(sp)
2040091a:	0100                	addi	s0,sp,128
2040091c:	f8a42e23          	sw	a0,-100(s0)
20400920:	f8b42c23          	sw	a1,-104(s0)
20400924:	f8c42a23          	sw	a2,-108(s0)
20400928:	f8d42823          	sw	a3,-112(s0)
2040092c:	f8e42623          	sw	a4,-116(s0)
20400930:	f8f42423          	sw	a5,-120(s0)
20400934:	f9042223          	sw	a6,-124(s0)
20400938:	f9142023          	sw	a7,-128(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:18
    /* set plaintext size */
    *clen = mlen + 16;
2040093c:	f9042783          	lw	a5,-112(s0)
20400940:	01078713          	addi	a4,a5,16
20400944:	f9842783          	lw	a5,-104(s0)
20400948:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:22

    /* load key and nonce */
    u64 K0, K1, N0, N1;
    K0.xh = k[0];
2040094a:	f8042783          	lw	a5,-128(s0)
2040094e:	439c                	lw	a5,0(a5)
20400950:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:23
    K0.xl = k[1];
20400954:	f8042783          	lw	a5,-128(s0)
20400958:	43dc                	lw	a5,4(a5)
2040095a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:24
    K1.xh = k[2];
2040095e:	f8042783          	lw	a5,-128(s0)
20400962:	479c                	lw	a5,8(a5)
20400964:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:25
    K1.xl = k[3];
20400968:	f8042783          	lw	a5,-128(s0)
2040096c:	47dc                	lw	a5,12(a5)
2040096e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:26
    N0.xh = npub[0];
20400972:	f8442783          	lw	a5,-124(s0)
20400976:	439c                	lw	a5,0(a5)
20400978:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:27
    N0.xl = npub[1];
2040097c:	f8442783          	lw	a5,-124(s0)
20400980:	43dc                	lw	a5,4(a5)
20400982:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:28
    N1.xh = npub[2];
20400986:	f8442783          	lw	a5,-124(s0)
2040098a:	479c                	lw	a5,8(a5)
2040098c:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:29
    N1.xl = npub[3];
20400990:	f8442783          	lw	a5,-124(s0)
20400994:	47dc                	lw	a5,12(a5)
20400996:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:33

    /* initialize */
    ascon_state_t s;
    s.xh[0] = A_128_IV_H;
2040099a:	804017b7          	lui	a5,0x80401
2040099e:	c0678793          	addi	a5,a5,-1018 # 80400c06 <metal_segment_heap_target_end+0x3fcf72>
204009a2:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:34
    s.xl[0] = A_128_IV_L;
204009a6:	fa042e23          	sw	zero,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:35
    s.xh[1] = K0.xh;
204009aa:	fe842783          	lw	a5,-24(s0)
204009ae:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:36
    s.xl[1] = K0.xl;
204009b2:	fec42783          	lw	a5,-20(s0)
204009b6:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:37
    s.xh[2] = K1.xh;
204009ba:	fe042783          	lw	a5,-32(s0)
204009be:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:38
    s.xl[2] = K1.xl;
204009c2:	fe442783          	lw	a5,-28(s0)
204009c6:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:39
    s.xh[3] = N0.xh;
204009ca:	fd842783          	lw	a5,-40(s0)
204009ce:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:40
    s.xl[3] = N0.xl;
204009d2:	fdc42783          	lw	a5,-36(s0)
204009d6:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:41
    s.xh[4] = N1.xh;
204009da:	fd042783          	lw	a5,-48(s0)
204009de:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:42
    s.xl[4] = N1.xl;
204009e2:	fd442783          	lw	a5,-44(s0)
204009e6:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:44
    //printstate("After init", &s, debug);
    P12(&s);
204009ea:	fa840793          	addi	a5,s0,-88
204009ee:	853e                	mv	a0,a5
204009f0:	3591                	jal	20400834 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:46

    s.xh[3] ^= K0.xh;
204009f2:	fb442703          	lw	a4,-76(s0)
204009f6:	fe842783          	lw	a5,-24(s0)
204009fa:	8fb9                	xor	a5,a5,a4
204009fc:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:47
    s.xl[3] ^= K0.xl;
20400a00:	fc842703          	lw	a4,-56(s0)
20400a04:	fec42783          	lw	a5,-20(s0)
20400a08:	8fb9                	xor	a5,a5,a4
20400a0a:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:48
    s.xh[4] ^= K1.xh;
20400a0e:	fb842703          	lw	a4,-72(s0)
20400a12:	fe042783          	lw	a5,-32(s0)
20400a16:	8fb9                	xor	a5,a5,a4
20400a18:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:49
    s.xl[4] ^= K1.xl;
20400a1c:	fcc42703          	lw	a4,-52(s0)
20400a20:	fe442783          	lw	a5,-28(s0)
20400a24:	8fb9                	xor	a5,a5,a4
20400a26:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:52
    //printstate("Xor 2 key", &s, debug);

    if (adlen) {
20400a2a:	f8842783          	lw	a5,-120(s0)
20400a2e:	14078063          	beqz	a5,20400b6e <crypto_aead_encrypt+0x25a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:53
        while (adlen >= 8) {
20400a32:	a0a1                	j	20400a7a <crypto_aead_encrypt+0x166>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:54
            s.xh[0] ^= *ad;
20400a34:	fa842703          	lw	a4,-88(s0)
20400a38:	f8c42783          	lw	a5,-116(s0)
20400a3c:	439c                	lw	a5,0(a5)
20400a3e:	8fb9                	xor	a5,a5,a4
20400a40:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:55
            ad++;
20400a44:	f8c42783          	lw	a5,-116(s0)
20400a48:	0791                	addi	a5,a5,4
20400a4a:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:56
            s.xl[0] ^= *ad;
20400a4e:	fbc42703          	lw	a4,-68(s0)
20400a52:	f8c42783          	lw	a5,-116(s0)
20400a56:	439c                	lw	a5,0(a5)
20400a58:	8fb9                	xor	a5,a5,a4
20400a5a:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:57
            ad++;
20400a5e:	f8c42783          	lw	a5,-116(s0)
20400a62:	0791                	addi	a5,a5,4
20400a64:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:58
            P6(&s);
20400a68:	fa840793          	addi	a5,s0,-88
20400a6c:	853e                	mv	a0,a5
20400a6e:	3d91                	jal	204008c2 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:60
            //printstate("Absorb AD", &s, debug);
            adlen -= 8;
20400a70:	f8842783          	lw	a5,-120(s0)
20400a74:	17e1                	addi	a5,a5,-8
20400a76:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:53
        while (adlen >= 8) {
20400a7a:	f8842703          	lw	a4,-120(s0)
20400a7e:	479d                	li	a5,7
20400a80:	fae7eae3          	bltu	a5,a4,20400a34 <crypto_aead_encrypt+0x120>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:62
        }
        s.xh[0] ^= TRUNH(adlen, *ad);
20400a84:	fa842703          	lw	a4,-88(s0)
20400a88:	f8842683          	lw	a3,-120(s0)
20400a8c:	4791                	li	a5,4
20400a8e:	00d7f663          	bgeu	a5,a3,20400a9a <crypto_aead_encrypt+0x186>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:62 (discriminator 1)
20400a92:	f8c42783          	lw	a5,-116(s0)
20400a96:	439c                	lw	a5,0(a5)
20400a98:	a025                	j	20400ac0 <crypto_aead_encrypt+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:62 (discriminator 2)
20400a9a:	f8842783          	lw	a5,-120(s0)
20400a9e:	c385                	beqz	a5,20400abe <crypto_aead_encrypt+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:62 (discriminator 4)
20400aa0:	f8c42783          	lw	a5,-116(s0)
20400aa4:	4394                	lw	a3,0(a5)
20400aa6:	f8842603          	lw	a2,-120(s0)
20400aaa:	4781                	li	a5,0
20400aac:	8f91                	sub	a5,a5,a2
20400aae:	078e                	slli	a5,a5,0x3
20400ab0:	02078793          	addi	a5,a5,32
20400ab4:	567d                	li	a2,-1
20400ab6:	00f617b3          	sll	a5,a2,a5
20400aba:	8ff5                	and	a5,a5,a3
20400abc:	a011                	j	20400ac0 <crypto_aead_encrypt+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:62 (discriminator 5)
20400abe:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:62 (discriminator 8)
20400ac0:	8fb9                	xor	a5,a5,a4
20400ac2:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:63 (discriminator 8)
        ad++;
20400ac6:	f8c42783          	lw	a5,-116(s0)
20400aca:	0791                	addi	a5,a5,4
20400acc:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:64 (discriminator 8)
        s.xl[0] ^= TRUNL(adlen, *ad);
20400ad0:	fbc42703          	lw	a4,-68(s0)
20400ad4:	f8842683          	lw	a3,-120(s0)
20400ad8:	4791                	li	a5,4
20400ada:	02d7f163          	bgeu	a5,a3,20400afc <crypto_aead_encrypt+0x1e8>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:64 (discriminator 1)
20400ade:	f8c42783          	lw	a5,-116(s0)
20400ae2:	4394                	lw	a3,0(a5)
20400ae4:	f8842603          	lw	a2,-120(s0)
20400ae8:	4781                	li	a5,0
20400aea:	8f91                	sub	a5,a5,a2
20400aec:	078e                	slli	a5,a5,0x3
20400aee:	04078793          	addi	a5,a5,64
20400af2:	567d                	li	a2,-1
20400af4:	00f617b3          	sll	a5,a2,a5
20400af8:	8ff5                	and	a5,a5,a3
20400afa:	a011                	j	20400afe <crypto_aead_encrypt+0x1ea>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:64 (discriminator 2)
20400afc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:64 (discriminator 4)
20400afe:	8fb9                	xor	a5,a5,a4
20400b00:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:66 (discriminator 4)

        s.xh[0] ^= PADH(adlen);
20400b04:	fa842703          	lw	a4,-88(s0)
20400b08:	f8842683          	lw	a3,-120(s0)
20400b0c:	478d                	li	a5,3
20400b0e:	00d7ea63          	bltu	a5,a3,20400b22 <crypto_aead_encrypt+0x20e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:66 (discriminator 1)
20400b12:	f8842783          	lw	a5,-120(s0)
20400b16:	078e                	slli	a5,a5,0x3
20400b18:	800006b7          	lui	a3,0x80000
20400b1c:	00f6d7b3          	srl	a5,a3,a5
20400b20:	a011                	j	20400b24 <crypto_aead_encrypt+0x210>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:66 (discriminator 2)
20400b22:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:66 (discriminator 4)
20400b24:	8fb9                	xor	a5,a5,a4
20400b26:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:67 (discriminator 4)
        s.xl[0] ^= PADL(adlen);
20400b2a:	fbc42703          	lw	a4,-68(s0)
20400b2e:	f8842683          	lw	a3,-120(s0)
20400b32:	478d                	li	a5,3
20400b34:	02d7f563          	bgeu	a5,a3,20400b5e <crypto_aead_encrypt+0x24a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:67 (discriminator 1)
20400b38:	f8842683          	lw	a3,-120(s0)
20400b3c:	47a1                	li	a5,8
20400b3e:	00f68e63          	beq	a3,a5,20400b5a <crypto_aead_encrypt+0x246>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:67 (discriminator 3)
20400b42:	f8842683          	lw	a3,-120(s0)
20400b46:	200007b7          	lui	a5,0x20000
20400b4a:	17f1                	addi	a5,a5,-4
20400b4c:	97b6                	add	a5,a5,a3
20400b4e:	078e                	slli	a5,a5,0x3
20400b50:	800006b7          	lui	a3,0x80000
20400b54:	00f6d7b3          	srl	a5,a3,a5
20400b58:	a021                	j	20400b60 <crypto_aead_encrypt+0x24c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:67 (discriminator 4)
20400b5a:	4781                	li	a5,0
20400b5c:	a011                	j	20400b60 <crypto_aead_encrypt+0x24c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:67 (discriminator 2)
20400b5e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:67 (discriminator 8)
20400b60:	8fb9                	xor	a5,a5,a4
20400b62:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:69 (discriminator 8)
        //printstate("Padded AD", &s, debug);
        P6(&s);
20400b66:	fa840793          	addi	a5,s0,-88
20400b6a:	853e                	mv	a0,a5
20400b6c:	3b99                	jal	204008c2 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:72
    }
    /* domain separation */
    s.xl[4] ^= 1;
20400b6e:	fcc42783          	lw	a5,-52(s0)
20400b72:	0017c793          	xori	a5,a5,1
20400b76:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:75
    //printstate("Domain Separation", &s, debug);

    while (mlen >= 8) {
20400b7a:	a885                	j	20400bea <crypto_aead_encrypt+0x2d6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:76
        s.xh[0] ^= *m;
20400b7c:	fa842703          	lw	a4,-88(s0)
20400b80:	f9442783          	lw	a5,-108(s0)
20400b84:	439c                	lw	a5,0(a5)
20400b86:	8fb9                	xor	a5,a5,a4
20400b88:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:77
        m++;
20400b8c:	f9442783          	lw	a5,-108(s0)
20400b90:	0791                	addi	a5,a5,4
20400b92:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:78
        s.xl[0] ^= *m;
20400b96:	fbc42703          	lw	a4,-68(s0)
20400b9a:	f9442783          	lw	a5,-108(s0)
20400b9e:	439c                	lw	a5,0(a5)
20400ba0:	8fb9                	xor	a5,a5,a4
20400ba2:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:79
        m++;
20400ba6:	f9442783          	lw	a5,-108(s0)
20400baa:	0791                	addi	a5,a5,4
20400bac:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:80
        *c = s.xh[0];
20400bb0:	fa842703          	lw	a4,-88(s0)
20400bb4:	f9c42783          	lw	a5,-100(s0)
20400bb8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:81
        c++;
20400bba:	f9c42783          	lw	a5,-100(s0)
20400bbe:	0791                	addi	a5,a5,4
20400bc0:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:82
        *c = s.xl[0];
20400bc4:	fbc42703          	lw	a4,-68(s0)
20400bc8:	f9c42783          	lw	a5,-100(s0)
20400bcc:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:83
        c++;
20400bce:	f9c42783          	lw	a5,-100(s0)
20400bd2:	0791                	addi	a5,a5,4
20400bd4:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:84
        mlen -= 8;
20400bd8:	f9042783          	lw	a5,-112(s0)
20400bdc:	17e1                	addi	a5,a5,-8
20400bde:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:86
        //printstate("Absorb M", &s, debug);
        P6(&s);
20400be2:	fa840793          	addi	a5,s0,-88
20400be6:	853e                	mv	a0,a5
20400be8:	39e9                	jal	204008c2 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:75
    while (mlen >= 8) {
20400bea:	f9042703          	lw	a4,-112(s0)
20400bee:	479d                	li	a5,7
20400bf0:	f8e7e6e3          	bltu	a5,a4,20400b7c <crypto_aead_encrypt+0x268>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:89
    }
    /* final block*/
    s.xh[0] ^= TRUNH(mlen, *m);
20400bf4:	fa842703          	lw	a4,-88(s0)
20400bf8:	f9042683          	lw	a3,-112(s0)
20400bfc:	4791                	li	a5,4
20400bfe:	00d7f663          	bgeu	a5,a3,20400c0a <crypto_aead_encrypt+0x2f6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:89 (discriminator 1)
20400c02:	f9442783          	lw	a5,-108(s0)
20400c06:	439c                	lw	a5,0(a5)
20400c08:	a025                	j	20400c30 <crypto_aead_encrypt+0x31c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:89 (discriminator 2)
20400c0a:	f9042783          	lw	a5,-112(s0)
20400c0e:	c385                	beqz	a5,20400c2e <crypto_aead_encrypt+0x31a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:89 (discriminator 4)
20400c10:	f9442783          	lw	a5,-108(s0)
20400c14:	4394                	lw	a3,0(a5)
20400c16:	f9042603          	lw	a2,-112(s0)
20400c1a:	4781                	li	a5,0
20400c1c:	8f91                	sub	a5,a5,a2
20400c1e:	078e                	slli	a5,a5,0x3
20400c20:	02078793          	addi	a5,a5,32 # 20000020 <metal_segment_itim_target_end+0x18000020>
20400c24:	567d                	li	a2,-1
20400c26:	00f617b3          	sll	a5,a2,a5
20400c2a:	8ff5                	and	a5,a5,a3
20400c2c:	a011                	j	20400c30 <crypto_aead_encrypt+0x31c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:89 (discriminator 5)
20400c2e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:89 (discriminator 8)
20400c30:	8fb9                	xor	a5,a5,a4
20400c32:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:90 (discriminator 8)
    m++;
20400c36:	f9442783          	lw	a5,-108(s0)
20400c3a:	0791                	addi	a5,a5,4
20400c3c:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:91 (discriminator 8)
    s.xl[0] ^= TRUNL(mlen, *m);
20400c40:	fbc42703          	lw	a4,-68(s0)
20400c44:	f9042683          	lw	a3,-112(s0)
20400c48:	4791                	li	a5,4
20400c4a:	02d7f163          	bgeu	a5,a3,20400c6c <crypto_aead_encrypt+0x358>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:91 (discriminator 1)
20400c4e:	f9442783          	lw	a5,-108(s0)
20400c52:	4394                	lw	a3,0(a5)
20400c54:	f9042603          	lw	a2,-112(s0)
20400c58:	4781                	li	a5,0
20400c5a:	8f91                	sub	a5,a5,a2
20400c5c:	078e                	slli	a5,a5,0x3
20400c5e:	04078793          	addi	a5,a5,64
20400c62:	567d                	li	a2,-1
20400c64:	00f617b3          	sll	a5,a2,a5
20400c68:	8ff5                	and	a5,a5,a3
20400c6a:	a011                	j	20400c6e <crypto_aead_encrypt+0x35a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:91 (discriminator 2)
20400c6c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:91 (discriminator 4)
20400c6e:	8fb9                	xor	a5,a5,a4
20400c70:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:93 (discriminator 4)

    if (mlen) {
20400c74:	f9042783          	lw	a5,-112(s0)
20400c78:	cfbd                	beqz	a5,20400cf6 <crypto_aead_encrypt+0x3e2>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:94
        *c = TRUNH(mlen, s.xh[0]);
20400c7a:	f9042703          	lw	a4,-112(s0)
20400c7e:	4791                	li	a5,4
20400c80:	00e7f563          	bgeu	a5,a4,20400c8a <crypto_aead_encrypt+0x376>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:94 (discriminator 1)
20400c84:	fa842783          	lw	a5,-88(s0)
20400c88:	a01d                	j	20400cae <crypto_aead_encrypt+0x39a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:94 (discriminator 2)
20400c8a:	f9042783          	lw	a5,-112(s0)
20400c8e:	cf99                	beqz	a5,20400cac <crypto_aead_encrypt+0x398>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:94 (discriminator 4)
20400c90:	fa842703          	lw	a4,-88(s0)
20400c94:	f9042683          	lw	a3,-112(s0)
20400c98:	4781                	li	a5,0
20400c9a:	8f95                	sub	a5,a5,a3
20400c9c:	078e                	slli	a5,a5,0x3
20400c9e:	02078793          	addi	a5,a5,32
20400ca2:	56fd                	li	a3,-1
20400ca4:	00f697b3          	sll	a5,a3,a5
20400ca8:	8ff9                	and	a5,a5,a4
20400caa:	a011                	j	20400cae <crypto_aead_encrypt+0x39a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:94 (discriminator 5)
20400cac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:94 (discriminator 8)
20400cae:	f9c42703          	lw	a4,-100(s0)
20400cb2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:95 (discriminator 8)
        c++;
20400cb4:	f9c42783          	lw	a5,-100(s0)
20400cb8:	0791                	addi	a5,a5,4
20400cba:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:96 (discriminator 8)
        *c = TRUNL(mlen, s.xl[0]);
20400cbe:	f9042703          	lw	a4,-112(s0)
20400cc2:	4791                	li	a5,4
20400cc4:	02e7f063          	bgeu	a5,a4,20400ce4 <crypto_aead_encrypt+0x3d0>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:96 (discriminator 1)
20400cc8:	fbc42703          	lw	a4,-68(s0)
20400ccc:	f9042683          	lw	a3,-112(s0)
20400cd0:	4781                	li	a5,0
20400cd2:	8f95                	sub	a5,a5,a3
20400cd4:	078e                	slli	a5,a5,0x3
20400cd6:	04078793          	addi	a5,a5,64
20400cda:	56fd                	li	a3,-1
20400cdc:	00f697b3          	sll	a5,a3,a5
20400ce0:	8ff9                	and	a5,a5,a4
20400ce2:	a011                	j	20400ce6 <crypto_aead_encrypt+0x3d2>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:96 (discriminator 2)
20400ce4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:96 (discriminator 4)
20400ce6:	f9c42703          	lw	a4,-100(s0)
20400cea:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:97 (discriminator 4)
        c++;
20400cec:	f9c42783          	lw	a5,-100(s0)
20400cf0:	0791                	addi	a5,a5,4
20400cf2:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:99
    }
    s.xh[0] ^= PADH(mlen);
20400cf6:	fa842703          	lw	a4,-88(s0)
20400cfa:	f9042683          	lw	a3,-112(s0)
20400cfe:	478d                	li	a5,3
20400d00:	00d7ea63          	bltu	a5,a3,20400d14 <crypto_aead_encrypt+0x400>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:99 (discriminator 1)
20400d04:	f9042783          	lw	a5,-112(s0)
20400d08:	078e                	slli	a5,a5,0x3
20400d0a:	800006b7          	lui	a3,0x80000
20400d0e:	00f6d7b3          	srl	a5,a3,a5
20400d12:	a011                	j	20400d16 <crypto_aead_encrypt+0x402>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:99 (discriminator 2)
20400d14:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:99 (discriminator 4)
20400d16:	8fb9                	xor	a5,a5,a4
20400d18:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:100 (discriminator 4)
    s.xl[0] ^= PADL(mlen);
20400d1c:	fbc42703          	lw	a4,-68(s0)
20400d20:	f9042683          	lw	a3,-112(s0)
20400d24:	478d                	li	a5,3
20400d26:	02d7f563          	bgeu	a5,a3,20400d50 <crypto_aead_encrypt+0x43c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:100 (discriminator 1)
20400d2a:	f9042683          	lw	a3,-112(s0)
20400d2e:	47a1                	li	a5,8
20400d30:	00f68e63          	beq	a3,a5,20400d4c <crypto_aead_encrypt+0x438>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:100 (discriminator 3)
20400d34:	f9042683          	lw	a3,-112(s0)
20400d38:	200007b7          	lui	a5,0x20000
20400d3c:	17f1                	addi	a5,a5,-4
20400d3e:	97b6                	add	a5,a5,a3
20400d40:	078e                	slli	a5,a5,0x3
20400d42:	800006b7          	lui	a3,0x80000
20400d46:	00f6d7b3          	srl	a5,a3,a5
20400d4a:	a021                	j	20400d52 <crypto_aead_encrypt+0x43e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:100 (discriminator 4)
20400d4c:	4781                	li	a5,0
20400d4e:	a011                	j	20400d52 <crypto_aead_encrypt+0x43e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:100 (discriminator 2)
20400d50:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:100 (discriminator 8)
20400d52:	8fb9                	xor	a5,a5,a4
20400d54:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:103 (discriminator 8)
    //printstate("Pad M", &s, debug);
    /* Ending */
    s.xh[1] ^= K0.xh;
20400d58:	fac42703          	lw	a4,-84(s0)
20400d5c:	fe842783          	lw	a5,-24(s0)
20400d60:	8fb9                	xor	a5,a5,a4
20400d62:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:104 (discriminator 8)
    s.xl[1] ^= K0.xl;
20400d66:	fc042703          	lw	a4,-64(s0)
20400d6a:	fec42783          	lw	a5,-20(s0)
20400d6e:	8fb9                	xor	a5,a5,a4
20400d70:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:105 (discriminator 8)
    s.xh[2] ^= K1.xh;
20400d74:	fb042703          	lw	a4,-80(s0)
20400d78:	fe042783          	lw	a5,-32(s0)
20400d7c:	8fb9                	xor	a5,a5,a4
20400d7e:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:106 (discriminator 8)
    s.xl[2] ^= K1.xl;
20400d82:	fc442703          	lw	a4,-60(s0)
20400d86:	fe442783          	lw	a5,-28(s0)
20400d8a:	8fb9                	xor	a5,a5,a4
20400d8c:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:109 (discriminator 8)
    //printstate("Xor key 1", &s, debug);

    P12(&s);
20400d90:	fa840793          	addi	a5,s0,-88
20400d94:	853e                	mv	a0,a5
20400d96:	3c79                	jal	20400834 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:110 (discriminator 8)
    s.xh[3] ^= K0.xh;
20400d98:	fb442703          	lw	a4,-76(s0)
20400d9c:	fe842783          	lw	a5,-24(s0)
20400da0:	8fb9                	xor	a5,a5,a4
20400da2:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:111 (discriminator 8)
    s.xl[3] ^= K0.xl;
20400da6:	fc842703          	lw	a4,-56(s0)
20400daa:	fec42783          	lw	a5,-20(s0)
20400dae:	8fb9                	xor	a5,a5,a4
20400db0:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:112 (discriminator 8)
    s.xh[4] ^= K1.xh;
20400db4:	fb842703          	lw	a4,-72(s0)
20400db8:	fe042783          	lw	a5,-32(s0)
20400dbc:	8fb9                	xor	a5,a5,a4
20400dbe:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:113 (discriminator 8)
    s.xl[4] ^= K1.xl;
20400dc2:	fcc42703          	lw	a4,-52(s0)
20400dc6:	fe442783          	lw	a5,-28(s0)
20400dca:	8fb9                	xor	a5,a5,a4
20400dcc:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:117 (discriminator 8)
    //printstate("Xor key 2", &s, debug);

    /* TAG*/
    *c = s.xh[3];
20400dd0:	fb442703          	lw	a4,-76(s0)
20400dd4:	f9c42783          	lw	a5,-100(s0)
20400dd8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:118 (discriminator 8)
    c++;
20400dda:	f9c42783          	lw	a5,-100(s0)
20400dde:	0791                	addi	a5,a5,4
20400de0:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:119 (discriminator 8)
    *c = s.xl[3];
20400de4:	fc842703          	lw	a4,-56(s0)
20400de8:	f9c42783          	lw	a5,-100(s0)
20400dec:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:120 (discriminator 8)
    c++;
20400dee:	f9c42783          	lw	a5,-100(s0)
20400df2:	0791                	addi	a5,a5,4
20400df4:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:121 (discriminator 8)
    *c = s.xh[4];
20400df8:	fb842703          	lw	a4,-72(s0)
20400dfc:	f9c42783          	lw	a5,-100(s0)
20400e00:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:122 (discriminator 8)
    c++;
20400e02:	f9c42783          	lw	a5,-100(s0)
20400e06:	0791                	addi	a5,a5,4
20400e08:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:123 (discriminator 8)
    *c = s.xl[4];
20400e0c:	fcc42703          	lw	a4,-52(s0)
20400e10:	f9c42783          	lw	a5,-100(s0)
20400e14:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:124 (discriminator 8)
    return 0;
20400e16:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:125 (discriminator 8)
}
20400e18:	853e                	mv	a0,a5
20400e1a:	50f6                	lw	ra,124(sp)
20400e1c:	5466                	lw	s0,120(sp)
20400e1e:	6109                	addi	sp,sp,128
20400e20:	8082                	ret

20400e22 <crypto_aead_decrypt>:
crypto_aead_decrypt():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:127

int crypto_aead_decrypt(u32 *m, u32 *mlen, u32 *c, u32 clen, u32 *ad, u32 adlen, u32 *npub, u32 *k) {
20400e22:	7135                	addi	sp,sp,-160
20400e24:	cf06                	sw	ra,156(sp)
20400e26:	cd22                	sw	s0,152(sp)
20400e28:	1100                	addi	s0,sp,160
20400e2a:	f6a42e23          	sw	a0,-132(s0)
20400e2e:	f6b42c23          	sw	a1,-136(s0)
20400e32:	f6c42a23          	sw	a2,-140(s0)
20400e36:	f6d42823          	sw	a3,-144(s0)
20400e3a:	f6e42623          	sw	a4,-148(s0)
20400e3e:	f6f42423          	sw	a5,-152(s0)
20400e42:	f7042223          	sw	a6,-156(s0)
20400e46:	f7142023          	sw	a7,-160(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:129
    /* set plaintext size */
    *mlen = clen;
20400e4a:	f7842783          	lw	a5,-136(s0)
20400e4e:	f7042703          	lw	a4,-144(s0)
20400e52:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:132
    /* load key and nonce */
    u64 K0, K1, N0, N1;
    K0.xh = k[0];
20400e54:	f6042783          	lw	a5,-160(s0)
20400e58:	439c                	lw	a5,0(a5)
20400e5a:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:133
    K0.xl = k[1];
20400e5e:	f6042783          	lw	a5,-160(s0)
20400e62:	43dc                	lw	a5,4(a5)
20400e64:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:134
    K1.xh = k[2];
20400e68:	f6042783          	lw	a5,-160(s0)
20400e6c:	479c                	lw	a5,8(a5)
20400e6e:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:135
    K1.xl = k[3];
20400e72:	f6042783          	lw	a5,-160(s0)
20400e76:	47dc                	lw	a5,12(a5)
20400e78:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:136
    N0.xh = npub[0];
20400e7c:	f6442783          	lw	a5,-156(s0)
20400e80:	439c                	lw	a5,0(a5)
20400e82:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:137
    N0.xl = npub[1];
20400e86:	f6442783          	lw	a5,-156(s0)
20400e8a:	43dc                	lw	a5,4(a5)
20400e8c:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:138
    N1.xh = npub[2];
20400e90:	f6442783          	lw	a5,-156(s0)
20400e94:	479c                	lw	a5,8(a5)
20400e96:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:139
    N1.xl = npub[3];
20400e9a:	f6442783          	lw	a5,-156(s0)
20400e9e:	47dc                	lw	a5,12(a5)
20400ea0:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:143

    /* initialize */
    ascon_state_t s;
    s.xh[0] = A_128_IV_H;
20400ea4:	804017b7          	lui	a5,0x80401
20400ea8:	c0678793          	addi	a5,a5,-1018 # 80400c06 <metal_segment_heap_target_end+0x3fcf72>
20400eac:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:144
    s.xl[0] = A_128_IV_L;
20400eb0:	fa042823          	sw	zero,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:145
    s.xh[1] = K0.xh;
20400eb4:	fdc42783          	lw	a5,-36(s0)
20400eb8:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:146
    s.xl[1] = K0.xl;
20400ebc:	fe042783          	lw	a5,-32(s0)
20400ec0:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:147
    s.xh[2] = K1.xh;
20400ec4:	fd442783          	lw	a5,-44(s0)
20400ec8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:148
    s.xl[2] = K1.xl;
20400ecc:	fd842783          	lw	a5,-40(s0)
20400ed0:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:149
    s.xh[3] = N0.xh;
20400ed4:	fcc42783          	lw	a5,-52(s0)
20400ed8:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:150
    s.xl[3] = N0.xl;
20400edc:	fd042783          	lw	a5,-48(s0)
20400ee0:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:151
    s.xh[4] = N1.xh;
20400ee4:	fc442783          	lw	a5,-60(s0)
20400ee8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:152
    s.xl[4] = N1.xl;
20400eec:	fc842783          	lw	a5,-56(s0)
20400ef0:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:154
    //printstate("After init", &s, debug);
    P12(&s);
20400ef4:	f9c40793          	addi	a5,s0,-100
20400ef8:	853e                	mv	a0,a5
20400efa:	3a2d                	jal	20400834 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:156

    s.xh[3] ^= K0.xh;
20400efc:	fa842703          	lw	a4,-88(s0)
20400f00:	fdc42783          	lw	a5,-36(s0)
20400f04:	8fb9                	xor	a5,a5,a4
20400f06:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:157
    s.xl[3] ^= K0.xl;
20400f0a:	fbc42703          	lw	a4,-68(s0)
20400f0e:	fe042783          	lw	a5,-32(s0)
20400f12:	8fb9                	xor	a5,a5,a4
20400f14:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:158
    s.xh[4] ^= K1.xh;
20400f18:	fac42703          	lw	a4,-84(s0)
20400f1c:	fd442783          	lw	a5,-44(s0)
20400f20:	8fb9                	xor	a5,a5,a4
20400f22:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:159
    s.xl[4] ^= K1.xl;
20400f26:	fc042703          	lw	a4,-64(s0)
20400f2a:	fd842783          	lw	a5,-40(s0)
20400f2e:	8fb9                	xor	a5,a5,a4
20400f30:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:162
    //printstate("Xor 2 key", &s, debug);

    if (adlen) {
20400f34:	f6842783          	lw	a5,-152(s0)
20400f38:	14078163          	beqz	a5,2040107a <crypto_aead_decrypt+0x258>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:163
        while (adlen >= 8) {
20400f3c:	a0a1                	j	20400f84 <crypto_aead_decrypt+0x162>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:164
            s.xh[0] ^= *ad;
20400f3e:	f9c42703          	lw	a4,-100(s0)
20400f42:	f6c42783          	lw	a5,-148(s0)
20400f46:	439c                	lw	a5,0(a5)
20400f48:	8fb9                	xor	a5,a5,a4
20400f4a:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:165
            ad++;
20400f4e:	f6c42783          	lw	a5,-148(s0)
20400f52:	0791                	addi	a5,a5,4
20400f54:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:166
            s.xl[0] ^= *ad;
20400f58:	fb042703          	lw	a4,-80(s0)
20400f5c:	f6c42783          	lw	a5,-148(s0)
20400f60:	439c                	lw	a5,0(a5)
20400f62:	8fb9                	xor	a5,a5,a4
20400f64:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:167
            ad++;
20400f68:	f6c42783          	lw	a5,-148(s0)
20400f6c:	0791                	addi	a5,a5,4
20400f6e:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:168
            P6(&s);
20400f72:	f9c40793          	addi	a5,s0,-100
20400f76:	853e                	mv	a0,a5
20400f78:	32a9                	jal	204008c2 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:170
            //printstate("Absorb AD", &s, debug);
            adlen -= 8;
20400f7a:	f6842783          	lw	a5,-152(s0)
20400f7e:	17e1                	addi	a5,a5,-8
20400f80:	f6f42423          	sw	a5,-152(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:163
        while (adlen >= 8) {
20400f84:	f6842703          	lw	a4,-152(s0)
20400f88:	479d                	li	a5,7
20400f8a:	fae7eae3          	bltu	a5,a4,20400f3e <crypto_aead_decrypt+0x11c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:172
        }
        s.xh[0] ^= TRUNH(adlen, *ad);
20400f8e:	f9c42703          	lw	a4,-100(s0)
20400f92:	f6842683          	lw	a3,-152(s0)
20400f96:	4791                	li	a5,4
20400f98:	00d7f663          	bgeu	a5,a3,20400fa4 <crypto_aead_decrypt+0x182>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:172 (discriminator 1)
20400f9c:	f6c42783          	lw	a5,-148(s0)
20400fa0:	439c                	lw	a5,0(a5)
20400fa2:	a025                	j	20400fca <crypto_aead_decrypt+0x1a8>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:172 (discriminator 2)
20400fa4:	f6842783          	lw	a5,-152(s0)
20400fa8:	c385                	beqz	a5,20400fc8 <crypto_aead_decrypt+0x1a6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:172 (discriminator 4)
20400faa:	f6c42783          	lw	a5,-148(s0)
20400fae:	4394                	lw	a3,0(a5)
20400fb0:	f6842603          	lw	a2,-152(s0)
20400fb4:	4781                	li	a5,0
20400fb6:	8f91                	sub	a5,a5,a2
20400fb8:	078e                	slli	a5,a5,0x3
20400fba:	02078793          	addi	a5,a5,32
20400fbe:	567d                	li	a2,-1
20400fc0:	00f617b3          	sll	a5,a2,a5
20400fc4:	8ff5                	and	a5,a5,a3
20400fc6:	a011                	j	20400fca <crypto_aead_decrypt+0x1a8>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:172 (discriminator 5)
20400fc8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:172 (discriminator 8)
20400fca:	8fb9                	xor	a5,a5,a4
20400fcc:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:173 (discriminator 8)
        ad++;
20400fd0:	f6c42783          	lw	a5,-148(s0)
20400fd4:	0791                	addi	a5,a5,4
20400fd6:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:174 (discriminator 8)
        s.xl[0] ^= TRUNL(adlen, *ad);
20400fda:	fb042703          	lw	a4,-80(s0)
20400fde:	f6842683          	lw	a3,-152(s0)
20400fe2:	4791                	li	a5,4
20400fe4:	02d7f163          	bgeu	a5,a3,20401006 <crypto_aead_decrypt+0x1e4>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:174 (discriminator 1)
20400fe8:	f6c42783          	lw	a5,-148(s0)
20400fec:	4394                	lw	a3,0(a5)
20400fee:	f6842603          	lw	a2,-152(s0)
20400ff2:	4781                	li	a5,0
20400ff4:	8f91                	sub	a5,a5,a2
20400ff6:	078e                	slli	a5,a5,0x3
20400ff8:	04078793          	addi	a5,a5,64
20400ffc:	567d                	li	a2,-1
20400ffe:	00f617b3          	sll	a5,a2,a5
20401002:	8ff5                	and	a5,a5,a3
20401004:	a011                	j	20401008 <crypto_aead_decrypt+0x1e6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:174 (discriminator 2)
20401006:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:174 (discriminator 4)
20401008:	8fb9                	xor	a5,a5,a4
2040100a:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:176 (discriminator 4)

        s.xh[0] ^= PADH(adlen);
2040100e:	f9c42703          	lw	a4,-100(s0)
20401012:	f6842683          	lw	a3,-152(s0)
20401016:	478d                	li	a5,3
20401018:	00d7ea63          	bltu	a5,a3,2040102c <crypto_aead_decrypt+0x20a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:176 (discriminator 1)
2040101c:	f6842783          	lw	a5,-152(s0)
20401020:	078e                	slli	a5,a5,0x3
20401022:	800006b7          	lui	a3,0x80000
20401026:	00f6d7b3          	srl	a5,a3,a5
2040102a:	a011                	j	2040102e <crypto_aead_decrypt+0x20c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:176 (discriminator 2)
2040102c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:176 (discriminator 4)
2040102e:	8fb9                	xor	a5,a5,a4
20401030:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:177 (discriminator 4)
        s.xl[0] ^= PADL(adlen);
20401034:	fb042703          	lw	a4,-80(s0)
20401038:	f6842683          	lw	a3,-152(s0)
2040103c:	478d                	li	a5,3
2040103e:	02d7f563          	bgeu	a5,a3,20401068 <crypto_aead_decrypt+0x246>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:177 (discriminator 1)
20401042:	f6842683          	lw	a3,-152(s0)
20401046:	47a1                	li	a5,8
20401048:	00f68e63          	beq	a3,a5,20401064 <crypto_aead_decrypt+0x242>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:177 (discriminator 3)
2040104c:	f6842683          	lw	a3,-152(s0)
20401050:	200007b7          	lui	a5,0x20000
20401054:	17f1                	addi	a5,a5,-4
20401056:	97b6                	add	a5,a5,a3
20401058:	078e                	slli	a5,a5,0x3
2040105a:	800006b7          	lui	a3,0x80000
2040105e:	00f6d7b3          	srl	a5,a3,a5
20401062:	a021                	j	2040106a <crypto_aead_decrypt+0x248>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:177 (discriminator 4)
20401064:	4781                	li	a5,0
20401066:	a011                	j	2040106a <crypto_aead_decrypt+0x248>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:177 (discriminator 2)
20401068:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:177 (discriminator 8)
2040106a:	8fb9                	xor	a5,a5,a4
2040106c:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:179 (discriminator 8)
        //printstate("Padded AD", &s, debug);
        P6(&s);
20401070:	f9c40793          	addi	a5,s0,-100
20401074:	853e                	mv	a0,a5
20401076:	84dff0ef          	jal	ra,204008c2 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:182
    }
    /* domain separation */
    s.xl[4] ^= 1;
2040107a:	fc042783          	lw	a5,-64(s0)
2040107e:	0017c793          	xori	a5,a5,1
20401082:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:185
    //printstate("Domain Separation", &s, debug);
    u32 ch, cl;
    while (clen >= 8) {
20401086:	a049                	j	20401108 <crypto_aead_decrypt+0x2e6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:187
        // printf("clen %d\n", clen);
        ch = *c;
20401088:	f7442783          	lw	a5,-140(s0)
2040108c:	439c                	lw	a5,0(a5)
2040108e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:188
        c++;
20401092:	f7442783          	lw	a5,-140(s0)
20401096:	0791                	addi	a5,a5,4
20401098:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:189
        cl = *c;
2040109c:	f7442783          	lw	a5,-140(s0)
204010a0:	439c                	lw	a5,0(a5)
204010a2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:190
        c++;
204010a6:	f7442783          	lw	a5,-140(s0)
204010aa:	0791                	addi	a5,a5,4
204010ac:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:191
        *m = s.xh[0] ^ ch;
204010b0:	f9c42703          	lw	a4,-100(s0)
204010b4:	fec42783          	lw	a5,-20(s0)
204010b8:	8f3d                	xor	a4,a4,a5
204010ba:	f7c42783          	lw	a5,-132(s0)
204010be:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:192
        m++;
204010c0:	f7c42783          	lw	a5,-132(s0)
204010c4:	0791                	addi	a5,a5,4
204010c6:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:193
        *m = s.xl[0] ^ cl;
204010ca:	fb042703          	lw	a4,-80(s0)
204010ce:	fe842783          	lw	a5,-24(s0)
204010d2:	8f3d                	xor	a4,a4,a5
204010d4:	f7c42783          	lw	a5,-132(s0)
204010d8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:194
        m++;
204010da:	f7c42783          	lw	a5,-132(s0)
204010de:	0791                	addi	a5,a5,4
204010e0:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:196

        s.xh[0] = ch;
204010e4:	fec42783          	lw	a5,-20(s0)
204010e8:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:197
        s.xl[0] = cl;
204010ec:	fe842783          	lw	a5,-24(s0)
204010f0:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:198
        clen -= 8;
204010f4:	f7042783          	lw	a5,-144(s0)
204010f8:	17e1                	addi	a5,a5,-8
204010fa:	f6f42823          	sw	a5,-144(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:200
        //printstate("Absorb M", &s, debug);
        P6(&s);
204010fe:	f9c40793          	addi	a5,s0,-100
20401102:	853e                	mv	a0,a5
20401104:	fbeff0ef          	jal	ra,204008c2 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:185
    while (clen >= 8) {
20401108:	f7042703          	lw	a4,-144(s0)
2040110c:	479d                	li	a5,7
2040110e:	f6e7ede3          	bltu	a5,a4,20401088 <crypto_aead_decrypt+0x266>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:203
    }
    /* final block*/
    ch = 0;
20401112:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:204
    cl = 0;
20401116:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:205
    if (clen) {
2040111a:	f7042783          	lw	a5,-144(s0)
2040111e:	10078863          	beqz	a5,2040122e <crypto_aead_decrypt+0x40c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:206
        ch = TRUNH(clen, *c);
20401122:	f7042703          	lw	a4,-144(s0)
20401126:	4791                	li	a5,4
20401128:	00e7f663          	bgeu	a5,a4,20401134 <crypto_aead_decrypt+0x312>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:206 (discriminator 1)
2040112c:	f7442783          	lw	a5,-140(s0)
20401130:	439c                	lw	a5,0(a5)
20401132:	a025                	j	2040115a <crypto_aead_decrypt+0x338>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:206 (discriminator 2)
20401134:	f7042783          	lw	a5,-144(s0)
20401138:	c385                	beqz	a5,20401158 <crypto_aead_decrypt+0x336>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:206 (discriminator 4)
2040113a:	f7442783          	lw	a5,-140(s0)
2040113e:	4398                	lw	a4,0(a5)
20401140:	f7042683          	lw	a3,-144(s0)
20401144:	4781                	li	a5,0
20401146:	8f95                	sub	a5,a5,a3
20401148:	078e                	slli	a5,a5,0x3
2040114a:	02078793          	addi	a5,a5,32 # 20000020 <metal_segment_itim_target_end+0x18000020>
2040114e:	56fd                	li	a3,-1
20401150:	00f697b3          	sll	a5,a3,a5
20401154:	8ff9                	and	a5,a5,a4
20401156:	a011                	j	2040115a <crypto_aead_decrypt+0x338>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:206 (discriminator 5)
20401158:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:206 (discriminator 8)
2040115a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:207 (discriminator 8)
        c++;
2040115e:	f7442783          	lw	a5,-140(s0)
20401162:	0791                	addi	a5,a5,4
20401164:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:208 (discriminator 8)
        cl = TRUNL(clen, *c);
20401168:	f7042703          	lw	a4,-144(s0)
2040116c:	4791                	li	a5,4
2040116e:	02e7f163          	bgeu	a5,a4,20401190 <crypto_aead_decrypt+0x36e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:208 (discriminator 1)
20401172:	f7442783          	lw	a5,-140(s0)
20401176:	4398                	lw	a4,0(a5)
20401178:	f7042683          	lw	a3,-144(s0)
2040117c:	4781                	li	a5,0
2040117e:	8f95                	sub	a5,a5,a3
20401180:	078e                	slli	a5,a5,0x3
20401182:	04078793          	addi	a5,a5,64
20401186:	56fd                	li	a3,-1
20401188:	00f697b3          	sll	a5,a3,a5
2040118c:	8ff9                	and	a5,a5,a4
2040118e:	a011                	j	20401192 <crypto_aead_decrypt+0x370>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:208 (discriminator 2)
20401190:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:208 (discriminator 4)
20401192:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:209 (discriminator 4)
        c++;
20401196:	f7442783          	lw	a5,-140(s0)
2040119a:	0791                	addi	a5,a5,4
2040119c:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:210 (discriminator 4)
        *m = TRUNH(clen, s.xh[0] ^ ch);
204011a0:	f7042703          	lw	a4,-144(s0)
204011a4:	4791                	li	a5,4
204011a6:	00e7f863          	bgeu	a5,a4,204011b6 <crypto_aead_decrypt+0x394>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:210 (discriminator 1)
204011aa:	f9c42703          	lw	a4,-100(s0)
204011ae:	fec42783          	lw	a5,-20(s0)
204011b2:	8fb9                	xor	a5,a5,a4
204011b4:	a035                	j	204011e0 <crypto_aead_decrypt+0x3be>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:210 (discriminator 2)
204011b6:	f7042783          	lw	a5,-144(s0)
204011ba:	c395                	beqz	a5,204011de <crypto_aead_decrypt+0x3bc>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:210 (discriminator 4)
204011bc:	f9c42703          	lw	a4,-100(s0)
204011c0:	fec42783          	lw	a5,-20(s0)
204011c4:	8f3d                	xor	a4,a4,a5
204011c6:	f7042683          	lw	a3,-144(s0)
204011ca:	4781                	li	a5,0
204011cc:	8f95                	sub	a5,a5,a3
204011ce:	078e                	slli	a5,a5,0x3
204011d0:	02078793          	addi	a5,a5,32
204011d4:	56fd                	li	a3,-1
204011d6:	00f697b3          	sll	a5,a3,a5
204011da:	8ff9                	and	a5,a5,a4
204011dc:	a011                	j	204011e0 <crypto_aead_decrypt+0x3be>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:210 (discriminator 5)
204011de:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:210 (discriminator 8)
204011e0:	f7c42703          	lw	a4,-132(s0)
204011e4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:211 (discriminator 8)
        m++;
204011e6:	f7c42783          	lw	a5,-132(s0)
204011ea:	0791                	addi	a5,a5,4
204011ec:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:212 (discriminator 8)
        *m = TRUNL(clen, s.xl[0] ^ cl);
204011f0:	f7042703          	lw	a4,-144(s0)
204011f4:	4791                	li	a5,4
204011f6:	02e7f363          	bgeu	a5,a4,2040121c <crypto_aead_decrypt+0x3fa>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:212 (discriminator 1)
204011fa:	fb042703          	lw	a4,-80(s0)
204011fe:	fe842783          	lw	a5,-24(s0)
20401202:	8f3d                	xor	a4,a4,a5
20401204:	f7042683          	lw	a3,-144(s0)
20401208:	4781                	li	a5,0
2040120a:	8f95                	sub	a5,a5,a3
2040120c:	078e                	slli	a5,a5,0x3
2040120e:	04078793          	addi	a5,a5,64
20401212:	56fd                	li	a3,-1
20401214:	00f697b3          	sll	a5,a3,a5
20401218:	8ff9                	and	a5,a5,a4
2040121a:	a011                	j	2040121e <crypto_aead_decrypt+0x3fc>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:212 (discriminator 2)
2040121c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:212 (discriminator 4)
2040121e:	f7c42703          	lw	a4,-132(s0)
20401222:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:213 (discriminator 4)
        m++;
20401224:	f7c42783          	lw	a5,-132(s0)
20401228:	0791                	addi	a5,a5,4
2040122a:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:215
    }
    s.xh[0] = CLEARH(clen, s.xh[0]);
2040122e:	f7042703          	lw	a4,-144(s0)
20401232:	4791                	li	a5,4
20401234:	02e7e863          	bltu	a5,a4,20401264 <crypto_aead_decrypt+0x442>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:215 (discriminator 1)
20401238:	f7042783          	lw	a5,-144(s0)
2040123c:	e781                	bnez	a5,20401244 <crypto_aead_decrypt+0x422>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:215 (discriminator 3)
2040123e:	f9c42783          	lw	a5,-100(s0)
20401242:	a015                	j	20401266 <crypto_aead_decrypt+0x444>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:215 (discriminator 4)
20401244:	f9c42703          	lw	a4,-100(s0)
20401248:	f7042683          	lw	a3,-144(s0)
2040124c:	4781                	li	a5,0
2040124e:	8f95                	sub	a5,a5,a3
20401250:	078e                	slli	a5,a5,0x3
20401252:	02078793          	addi	a5,a5,32
20401256:	56fd                	li	a3,-1
20401258:	00f697b3          	sll	a5,a3,a5
2040125c:	fff7c793          	not	a5,a5
20401260:	8ff9                	and	a5,a5,a4
20401262:	a011                	j	20401266 <crypto_aead_decrypt+0x444>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:215 (discriminator 2)
20401264:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:215 (discriminator 8)
20401266:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:216 (discriminator 8)
    s.xl[0] = CLEARL(clen, s.xl[0]);
2040126a:	f7042703          	lw	a4,-144(s0)
2040126e:	4791                	li	a5,4
20401270:	02e7f263          	bgeu	a5,a4,20401294 <crypto_aead_decrypt+0x472>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:216 (discriminator 1)
20401274:	fb042703          	lw	a4,-80(s0)
20401278:	f7042683          	lw	a3,-144(s0)
2040127c:	4781                	li	a5,0
2040127e:	8f95                	sub	a5,a5,a3
20401280:	078e                	slli	a5,a5,0x3
20401282:	04078793          	addi	a5,a5,64
20401286:	56fd                	li	a3,-1
20401288:	00f697b3          	sll	a5,a3,a5
2040128c:	fff7c793          	not	a5,a5
20401290:	8ff9                	and	a5,a5,a4
20401292:	a019                	j	20401298 <crypto_aead_decrypt+0x476>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:216 (discriminator 2)
20401294:	fb042783          	lw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:216 (discriminator 4)
20401298:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:218 (discriminator 4)
    //printstate("clear bytes", &s, debug);
    s.xh[0] |= ch;
2040129c:	f9c42703          	lw	a4,-100(s0)
204012a0:	fec42783          	lw	a5,-20(s0)
204012a4:	8fd9                	or	a5,a5,a4
204012a6:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:219 (discriminator 4)
    s.xl[0] |= cl;
204012aa:	fb042703          	lw	a4,-80(s0)
204012ae:	fe842783          	lw	a5,-24(s0)
204012b2:	8fd9                	or	a5,a5,a4
204012b4:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:220 (discriminator 4)
    s.xh[0] ^= PADH(clen);
204012b8:	f9c42703          	lw	a4,-100(s0)
204012bc:	f7042683          	lw	a3,-144(s0)
204012c0:	478d                	li	a5,3
204012c2:	00d7ea63          	bltu	a5,a3,204012d6 <crypto_aead_decrypt+0x4b4>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:220 (discriminator 1)
204012c6:	f7042783          	lw	a5,-144(s0)
204012ca:	078e                	slli	a5,a5,0x3
204012cc:	800006b7          	lui	a3,0x80000
204012d0:	00f6d7b3          	srl	a5,a3,a5
204012d4:	a011                	j	204012d8 <crypto_aead_decrypt+0x4b6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:220 (discriminator 2)
204012d6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:220 (discriminator 4)
204012d8:	8fb9                	xor	a5,a5,a4
204012da:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:221 (discriminator 4)
    s.xl[0] ^= PADL(clen);
204012de:	fb042703          	lw	a4,-80(s0)
204012e2:	f7042683          	lw	a3,-144(s0)
204012e6:	478d                	li	a5,3
204012e8:	02d7f563          	bgeu	a5,a3,20401312 <crypto_aead_decrypt+0x4f0>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:221 (discriminator 1)
204012ec:	f7042683          	lw	a3,-144(s0)
204012f0:	47a1                	li	a5,8
204012f2:	00f68e63          	beq	a3,a5,2040130e <crypto_aead_decrypt+0x4ec>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:221 (discriminator 3)
204012f6:	f7042683          	lw	a3,-144(s0)
204012fa:	200007b7          	lui	a5,0x20000
204012fe:	17f1                	addi	a5,a5,-4
20401300:	97b6                	add	a5,a5,a3
20401302:	078e                	slli	a5,a5,0x3
20401304:	800006b7          	lui	a3,0x80000
20401308:	00f6d7b3          	srl	a5,a3,a5
2040130c:	a021                	j	20401314 <crypto_aead_decrypt+0x4f2>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:221 (discriminator 4)
2040130e:	4781                	li	a5,0
20401310:	a011                	j	20401314 <crypto_aead_decrypt+0x4f2>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:221 (discriminator 2)
20401312:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:221 (discriminator 8)
20401314:	8fb9                	xor	a5,a5,a4
20401316:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:224 (discriminator 8)
    //printstate("Pad M", &s, debug);
    /* Ending */
    s.xh[1] ^= K0.xh;
2040131a:	fa042703          	lw	a4,-96(s0)
2040131e:	fdc42783          	lw	a5,-36(s0)
20401322:	8fb9                	xor	a5,a5,a4
20401324:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:225 (discriminator 8)
    s.xl[1] ^= K0.xl;
20401328:	fb442703          	lw	a4,-76(s0)
2040132c:	fe042783          	lw	a5,-32(s0)
20401330:	8fb9                	xor	a5,a5,a4
20401332:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:226 (discriminator 8)
    s.xh[2] ^= K1.xh;
20401336:	fa442703          	lw	a4,-92(s0)
2040133a:	fd442783          	lw	a5,-44(s0)
2040133e:	8fb9                	xor	a5,a5,a4
20401340:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:227 (discriminator 8)
    s.xl[2] ^= K1.xl;
20401344:	fb842703          	lw	a4,-72(s0)
20401348:	fd842783          	lw	a5,-40(s0)
2040134c:	8fb9                	xor	a5,a5,a4
2040134e:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:230 (discriminator 8)
    //printstate("Xor key 1", &s, debug);

    P12(&s);
20401352:	f9c40793          	addi	a5,s0,-100
20401356:	853e                	mv	a0,a5
20401358:	cdcff0ef          	jal	ra,20400834 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:231 (discriminator 8)
    s.xh[3] ^= K0.xh;
2040135c:	fa842703          	lw	a4,-88(s0)
20401360:	fdc42783          	lw	a5,-36(s0)
20401364:	8fb9                	xor	a5,a5,a4
20401366:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:232 (discriminator 8)
    s.xl[3] ^= K0.xl;
2040136a:	fbc42703          	lw	a4,-68(s0)
2040136e:	fe042783          	lw	a5,-32(s0)
20401372:	8fb9                	xor	a5,a5,a4
20401374:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:233 (discriminator 8)
    s.xh[4] ^= K1.xh;
20401378:	fac42703          	lw	a4,-84(s0)
2040137c:	fd442783          	lw	a5,-44(s0)
20401380:	8fb9                	xor	a5,a5,a4
20401382:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:234 (discriminator 8)
    s.xl[4] ^= K1.xl;
20401386:	fc042703          	lw	a4,-64(s0)
2040138a:	fd842783          	lw	a5,-40(s0)
2040138e:	8fb9                	xor	a5,a5,a4
20401390:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:239 (discriminator 8)
    //printstate("Xor key 2", &s, debug);

    /* TAG*/
    u32 Tag[4];
    Tag[0] = s.xh[3];
20401394:	fa842783          	lw	a5,-88(s0)
20401398:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:240 (discriminator 8)
    Tag[1] = s.xl[3];
2040139c:	fbc42783          	lw	a5,-68(s0)
204013a0:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:241 (discriminator 8)
    Tag[2] = s.xh[4];
204013a4:	fac42783          	lw	a5,-84(s0)
204013a8:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:242 (discriminator 8)
    Tag[3] = s.xl[4];
204013ac:	fc042783          	lw	a5,-64(s0)
204013b0:	f8f42c23          	sw	a5,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:243 (discriminator 8)
    int res = 0;
204013b4:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:248 (discriminator 8)
    /*for(int i = 0 ; i < 4; i ++){
        res |= c[i] ^ Tag[i];
        printf("%08x  %08x\n", c[i], Tag[i]);
    }*/
    return res;
204013b8:	fe442783          	lw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:249 (discriminator 8)
}
204013bc:	853e                	mv	a0,a5
204013be:	40fa                	lw	ra,156(sp)
204013c0:	446a                	lw	s0,152(sp)
204013c2:	610d                	addi	sp,sp,160
204013c4:	8082                	ret

204013c6 <crypto_hash>:
crypto_hash():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:251

int crypto_hash(u32 *m, u32 mlen, u32 *h) {
204013c6:	715d                	addi	sp,sp,-80
204013c8:	c686                	sw	ra,76(sp)
204013ca:	c4a2                	sw	s0,72(sp)
204013cc:	0880                	addi	s0,sp,80
204013ce:	faa42e23          	sw	a0,-68(s0)
204013d2:	fab42c23          	sw	a1,-72(s0)
204013d6:	fac42a23          	sw	a2,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:255

    /* initialize */
    ascon_state_t s;
    s.xh[0] = 0x00400c00;
204013da:	004017b7          	lui	a5,0x401
204013de:	c0078793          	addi	a5,a5,-1024 # 400c00 <__heap_size+0x400400>
204013e2:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:256
    s.xl[0] = 0x00000100;
204013e6:	10000793          	li	a5,256
204013ea:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:257
    s.xh[1] = 0;
204013ee:	fc042423          	sw	zero,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:258
    s.xl[1] = 0;
204013f2:	fc042e23          	sw	zero,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:259
    s.xh[2] = 0;
204013f6:	fc042623          	sw	zero,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:260
    s.xl[2] = 0;
204013fa:	fe042023          	sw	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:261
    s.xh[3] = 0;
204013fe:	fc042823          	sw	zero,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:262
    s.xl[3] = 0;
20401402:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:263
    s.xh[4] = 0;
20401406:	fc042a23          	sw	zero,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:264
    s.xl[4] = 0;
2040140a:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:266
    //printstate("After init", &s, debug);
    P12(&s);
2040140e:	fc440793          	addi	a5,s0,-60
20401412:	853e                	mv	a0,a5
20401414:	c20ff0ef          	jal	ra,20400834 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:269


    if (mlen) {
20401418:	fb842783          	lw	a5,-72(s0)
2040141c:	14078263          	beqz	a5,20401560 <crypto_hash+0x19a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:270
        while (mlen >= 8) {
20401420:	a0a9                	j	2040146a <crypto_hash+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:271
            s.xh[0] ^= *m;
20401422:	fc442703          	lw	a4,-60(s0)
20401426:	fbc42783          	lw	a5,-68(s0)
2040142a:	439c                	lw	a5,0(a5)
2040142c:	8fb9                	xor	a5,a5,a4
2040142e:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:272
            m++;
20401432:	fbc42783          	lw	a5,-68(s0)
20401436:	0791                	addi	a5,a5,4
20401438:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:273
            s.xl[0] ^= *m;
2040143c:	fd842703          	lw	a4,-40(s0)
20401440:	fbc42783          	lw	a5,-68(s0)
20401444:	439c                	lw	a5,0(a5)
20401446:	8fb9                	xor	a5,a5,a4
20401448:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:274
            m++;
2040144c:	fbc42783          	lw	a5,-68(s0)
20401450:	0791                	addi	a5,a5,4
20401452:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:275
            P12(&s);
20401456:	fc440793          	addi	a5,s0,-60
2040145a:	853e                	mv	a0,a5
2040145c:	bd8ff0ef          	jal	ra,20400834 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:277
            //printstate("Absorb AD", &s, debug);
            mlen -= 8;
20401460:	fb842783          	lw	a5,-72(s0)
20401464:	17e1                	addi	a5,a5,-8
20401466:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:270
        while (mlen >= 8) {
2040146a:	fb842703          	lw	a4,-72(s0)
2040146e:	479d                	li	a5,7
20401470:	fae7e9e3          	bltu	a5,a4,20401422 <crypto_hash+0x5c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:279
        }
        s.xh[0] ^= TRUNH(mlen, *m);
20401474:	fc442703          	lw	a4,-60(s0)
20401478:	fb842683          	lw	a3,-72(s0)
2040147c:	4791                	li	a5,4
2040147e:	00d7f663          	bgeu	a5,a3,2040148a <crypto_hash+0xc4>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:279 (discriminator 1)
20401482:	fbc42783          	lw	a5,-68(s0)
20401486:	439c                	lw	a5,0(a5)
20401488:	a025                	j	204014b0 <crypto_hash+0xea>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:279 (discriminator 2)
2040148a:	fb842783          	lw	a5,-72(s0)
2040148e:	c385                	beqz	a5,204014ae <crypto_hash+0xe8>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:279 (discriminator 4)
20401490:	fbc42783          	lw	a5,-68(s0)
20401494:	4394                	lw	a3,0(a5)
20401496:	fb842603          	lw	a2,-72(s0)
2040149a:	4781                	li	a5,0
2040149c:	8f91                	sub	a5,a5,a2
2040149e:	078e                	slli	a5,a5,0x3
204014a0:	02078793          	addi	a5,a5,32
204014a4:	567d                	li	a2,-1
204014a6:	00f617b3          	sll	a5,a2,a5
204014aa:	8ff5                	and	a5,a5,a3
204014ac:	a011                	j	204014b0 <crypto_hash+0xea>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:279 (discriminator 5)
204014ae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:279 (discriminator 8)
204014b0:	8fb9                	xor	a5,a5,a4
204014b2:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:280 (discriminator 8)
        m++;
204014b6:	fbc42783          	lw	a5,-68(s0)
204014ba:	0791                	addi	a5,a5,4
204014bc:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:281 (discriminator 8)
        s.xl[0] ^= TRUNL(mlen, *m);
204014c0:	fd842703          	lw	a4,-40(s0)
204014c4:	fb842683          	lw	a3,-72(s0)
204014c8:	4791                	li	a5,4
204014ca:	02d7f163          	bgeu	a5,a3,204014ec <crypto_hash+0x126>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:281 (discriminator 1)
204014ce:	fbc42783          	lw	a5,-68(s0)
204014d2:	4394                	lw	a3,0(a5)
204014d4:	fb842603          	lw	a2,-72(s0)
204014d8:	4781                	li	a5,0
204014da:	8f91                	sub	a5,a5,a2
204014dc:	078e                	slli	a5,a5,0x3
204014de:	04078793          	addi	a5,a5,64
204014e2:	567d                	li	a2,-1
204014e4:	00f617b3          	sll	a5,a2,a5
204014e8:	8ff5                	and	a5,a5,a3
204014ea:	a011                	j	204014ee <crypto_hash+0x128>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:281 (discriminator 2)
204014ec:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:281 (discriminator 4)
204014ee:	8fb9                	xor	a5,a5,a4
204014f0:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:283 (discriminator 4)

        s.xh[0] ^= PADH(mlen);
204014f4:	fc442703          	lw	a4,-60(s0)
204014f8:	fb842683          	lw	a3,-72(s0)
204014fc:	478d                	li	a5,3
204014fe:	00d7ea63          	bltu	a5,a3,20401512 <crypto_hash+0x14c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:283 (discriminator 1)
20401502:	fb842783          	lw	a5,-72(s0)
20401506:	078e                	slli	a5,a5,0x3
20401508:	800006b7          	lui	a3,0x80000
2040150c:	00f6d7b3          	srl	a5,a3,a5
20401510:	a011                	j	20401514 <crypto_hash+0x14e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:283 (discriminator 2)
20401512:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:283 (discriminator 4)
20401514:	8fb9                	xor	a5,a5,a4
20401516:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:284 (discriminator 4)
        s.xl[0] ^= PADL(mlen);
2040151a:	fd842703          	lw	a4,-40(s0)
2040151e:	fb842683          	lw	a3,-72(s0)
20401522:	478d                	li	a5,3
20401524:	02d7f563          	bgeu	a5,a3,2040154e <crypto_hash+0x188>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:284 (discriminator 1)
20401528:	fb842683          	lw	a3,-72(s0)
2040152c:	47a1                	li	a5,8
2040152e:	00f68e63          	beq	a3,a5,2040154a <crypto_hash+0x184>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:284 (discriminator 3)
20401532:	fb842683          	lw	a3,-72(s0)
20401536:	200007b7          	lui	a5,0x20000
2040153a:	17f1                	addi	a5,a5,-4
2040153c:	97b6                	add	a5,a5,a3
2040153e:	078e                	slli	a5,a5,0x3
20401540:	800006b7          	lui	a3,0x80000
20401544:	00f6d7b3          	srl	a5,a3,a5
20401548:	a021                	j	20401550 <crypto_hash+0x18a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:284 (discriminator 4)
2040154a:	4781                	li	a5,0
2040154c:	a011                	j	20401550 <crypto_hash+0x18a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:284 (discriminator 2)
2040154e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:284 (discriminator 8)
20401550:	8fb9                	xor	a5,a5,a4
20401552:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:286 (discriminator 8)
        //printstate("Padded AD", &s, debug);
        P12(&s);
20401556:	fc440793          	addi	a5,s0,-60
2040155a:	853e                	mv	a0,a5
2040155c:	ad8ff0ef          	jal	ra,20400834 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:288
    }
    for (int i = 0; i < 4; i++) {
20401560:	fe042623          	sw	zero,-20(s0)
20401564:	a099                	j	204015aa <crypto_hash+0x1e4>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:289
        h[i * 2] = s.xh[0];
20401566:	fec42783          	lw	a5,-20(s0)
2040156a:	078e                	slli	a5,a5,0x3
2040156c:	fb442703          	lw	a4,-76(s0)
20401570:	97ba                	add	a5,a5,a4
20401572:	fc442703          	lw	a4,-60(s0)
20401576:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:290
        h[i * 2 + 1] = s.xl[0];
20401578:	fec42783          	lw	a5,-20(s0)
2040157c:	078e                	slli	a5,a5,0x3
2040157e:	0791                	addi	a5,a5,4
20401580:	fb442703          	lw	a4,-76(s0)
20401584:	97ba                	add	a5,a5,a4
20401586:	fd842703          	lw	a4,-40(s0)
2040158a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:291
        if (i < 3) {
2040158c:	fec42703          	lw	a4,-20(s0)
20401590:	4789                	li	a5,2
20401592:	00e7c763          	blt	a5,a4,204015a0 <crypto_hash+0x1da>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:292
            P12(&s);
20401596:	fc440793          	addi	a5,s0,-60
2040159a:	853e                	mv	a0,a5
2040159c:	a98ff0ef          	jal	ra,20400834 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:288 (discriminator 2)
    for (int i = 0; i < 4; i++) {
204015a0:	fec42783          	lw	a5,-20(s0)
204015a4:	0785                	addi	a5,a5,1
204015a6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:288 (discriminator 1)
204015aa:	fec42703          	lw	a4,-20(s0)
204015ae:	478d                	li	a5,3
204015b0:	fae7dbe3          	bge	a5,a4,20401566 <crypto_hash+0x1a0>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:296
        }
        //printstate("Hash Round", &s, debug);
    }
    return 0;
204015b4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:297
}
204015b6:	853e                	mv	a0,a5
204015b8:	40b6                	lw	ra,76(sp)
204015ba:	4426                	lw	s0,72(sp)
204015bc:	6161                	addi	sp,sp,80
204015be:	8082                	ret

204015c0 <init_seed>:
init_seed():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:299

int init_seed(ascon_state_t *s, u64 seed) {
204015c0:	1101                	addi	sp,sp,-32
204015c2:	ce06                	sw	ra,28(sp)
204015c4:	cc22                	sw	s0,24(sp)
204015c6:	1000                	addi	s0,sp,32
204015c8:	fea42623          	sw	a0,-20(s0)
204015cc:	feb42223          	sw	a1,-28(s0)
204015d0:	fec42423          	sw	a2,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:301
    /* initialize */
    s->xh[0] = 0;
204015d4:	fec42783          	lw	a5,-20(s0)
204015d8:	0007a023          	sw	zero,0(a5) # 20000000 <metal_segment_itim_target_end+0x18000000>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:302
    s->xl[0] = 0;
204015dc:	fec42783          	lw	a5,-20(s0)
204015e0:	0007aa23          	sw	zero,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:303
    s->xh[1] = 0;
204015e4:	fec42783          	lw	a5,-20(s0)
204015e8:	0007a223          	sw	zero,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:304
    s->xl[1] = 0;
204015ec:	fec42783          	lw	a5,-20(s0)
204015f0:	0007ac23          	sw	zero,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:305
    s->xh[2] = 0;
204015f4:	fec42783          	lw	a5,-20(s0)
204015f8:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:306
    s->xl[2] = 0;
204015fc:	fec42783          	lw	a5,-20(s0)
20401600:	0007ae23          	sw	zero,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:307
    s->xh[3] = 0;
20401604:	fec42783          	lw	a5,-20(s0)
20401608:	0007a623          	sw	zero,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:308
    s->xl[3] = 0;
2040160c:	fec42783          	lw	a5,-20(s0)
20401610:	0207a023          	sw	zero,32(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:309
    s->xh[4] = 0;
20401614:	fec42783          	lw	a5,-20(s0)
20401618:	0007a823          	sw	zero,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:310
    s->xl[4] = 0;
2040161c:	fec42783          	lw	a5,-20(s0)
20401620:	0207a223          	sw	zero,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:311
    P12(s);
20401624:	fec42503          	lw	a0,-20(s0)
20401628:	a0cff0ef          	jal	ra,20400834 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:312
    s->xh[0] = seed.xh;
2040162c:	fe442703          	lw	a4,-28(s0)
20401630:	fec42783          	lw	a5,-20(s0)
20401634:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:313
    s->xl[0] = seed.xl;
20401636:	fe842703          	lw	a4,-24(s0)
2040163a:	fec42783          	lw	a5,-20(s0)
2040163e:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:314
    P12(s);
20401640:	fec42503          	lw	a0,-20(s0)
20401644:	9f0ff0ef          	jal	ra,20400834 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:315
    return 0;
20401648:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:316
}
2040164a:	853e                	mv	a0,a5
2040164c:	40f2                	lw	ra,28(sp)
2040164e:	4462                	lw	s0,24(sp)
20401650:	6105                	addi	sp,sp,32
20401652:	8082                	ret

20401654 <rand_ascon>:
rand_ascon():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:325
    s->xh[0] = seed.xh;
    s->xl[0] = seed.xl;
    P12(s);
}

int rand_ascon(ascon_state_t *s, u32 *arr, u32 len){
20401654:	7179                	addi	sp,sp,-48
20401656:	d606                	sw	ra,44(sp)
20401658:	d422                	sw	s0,40(sp)
2040165a:	1800                	addi	s0,sp,48
2040165c:	fca42e23          	sw	a0,-36(s0)
20401660:	fcb42c23          	sw	a1,-40(s0)
20401664:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:326
   for( int i = 0 ; i < len ; i ++){
20401668:	fe042623          	sw	zero,-20(s0)
2040166c:	a081                	j	204016ac <rand_ascon+0x58>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:327 (discriminator 3)
       *arr = s->xh[0];
2040166e:	fdc42783          	lw	a5,-36(s0)
20401672:	4398                	lw	a4,0(a5)
20401674:	fd842783          	lw	a5,-40(s0)
20401678:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:328 (discriminator 3)
       arr ++;
2040167a:	fd842783          	lw	a5,-40(s0)
2040167e:	0791                	addi	a5,a5,4
20401680:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:329 (discriminator 3)
       *arr = s->xl[0];
20401684:	fdc42783          	lw	a5,-36(s0)
20401688:	4bd8                	lw	a4,20(a5)
2040168a:	fd842783          	lw	a5,-40(s0)
2040168e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:330 (discriminator 3)
       arr ++;
20401690:	fd842783          	lw	a5,-40(s0)
20401694:	0791                	addi	a5,a5,4
20401696:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:331 (discriminator 3)
       P12(s);
2040169a:	fdc42503          	lw	a0,-36(s0)
2040169e:	996ff0ef          	jal	ra,20400834 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:326 (discriminator 3)
   for( int i = 0 ; i < len ; i ++){
204016a2:	fec42783          	lw	a5,-20(s0)
204016a6:	0785                	addi	a5,a5,1
204016a8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:326 (discriminator 1)
204016ac:	fec42783          	lw	a5,-20(s0)
204016b0:	fd442703          	lw	a4,-44(s0)
204016b4:	fae7ede3          	bltu	a5,a4,2040166e <rand_ascon+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:333
   }
    return  0;
204016b8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../Asconref/aead.h:334
}
204016ba:	853e                	mv	a0,a5
204016bc:	50b2                	lw	ra,44(sp)
204016be:	5422                	lw	s0,40(sp)
204016c0:	6145                	addi	sp,sp,48
204016c2:	8082                	ret

204016c4 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../RoCCcommon/csr.h:50

#define rdtime() read_csr(time)
// #define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

unsigned rdcycle() {
204016c4:	1101                	addi	sp,sp,-32
204016c6:	ce22                	sw	s0,28(sp)
204016c8:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../RoCCcommon/csr.h:51
  unsigned mcycle = 0;
204016ca:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../RoCCcommon/csr.h:53

  asm volatile ("csrr %0,mcycle"   : "=r" (mcycle)  );
204016ce:	b00027f3          	csrr	a5,mcycle
204016d2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../RoCCcommon/csr.h:55

  return mcycle;
204016d6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/../RoCCcommon/csr.h:56
}
204016da:	853e                	mv	a0,a5
204016dc:	4472                	lw	s0,28(sp)
204016de:	6105                	addi	sp,sp,32
204016e0:	8082                	ret

204016e2 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:9
#include "../RoCCcommon/csr.h"

#define  REP 30
#define PLEN 2500

int main(void) {
204016e2:	7159                	addi	sp,sp,-112
204016e4:	d686                	sw	ra,108(sp)
204016e6:	d4a2                	sw	s0,104(sp)
204016e8:	1880                	addi	s0,sp,112
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:10
    u32 clen = 0;
204016ea:	fc042223          	sw	zero,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:13

    static u32 plain_text[PLEN+12];
    for(int j = 0 ; j < PLEN; j ++){
204016ee:	fe042623          	sw	zero,-20(s0)
204016f2:	a03d                	j	20401720 <main+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:14 (discriminator 3)
        plain_text [j] = j * PLEN + j;
204016f4:	fec42703          	lw	a4,-20(s0)
204016f8:	6785                	lui	a5,0x1
204016fa:	9c578793          	addi	a5,a5,-1595 # 9c5 <__heap_size+0x1c5>
204016fe:	02f707b3          	mul	a5,a4,a5
20401702:	86be                	mv	a3,a5
20401704:	800007b7          	lui	a5,0x80000
20401708:	7d478713          	addi	a4,a5,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
2040170c:	fec42783          	lw	a5,-20(s0)
20401710:	078a                	slli	a5,a5,0x2
20401712:	97ba                	add	a5,a5,a4
20401714:	c394                	sw	a3,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:13 (discriminator 3)
    for(int j = 0 ; j < PLEN; j ++){
20401716:	fec42783          	lw	a5,-20(s0)
2040171a:	0785                	addi	a5,a5,1
2040171c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:13 (discriminator 1)
20401720:	fec42703          	lw	a4,-20(s0)
20401724:	6785                	lui	a5,0x1
20401726:	9c378793          	addi	a5,a5,-1597 # 9c3 <__heap_size+0x1c3>
2040172a:	fce7d5e3          	bge	a5,a4,204016f4 <main+0x12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:27



    unsigned start, end;
    // RoCC
    write_csr(mstatus, MSTATUS_XS);
2040172e:	67e1                	lui	a5,0x18
20401730:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:31

    // ENC

    int i = 0;
20401734:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:32
    printf("ENC \n");
20401738:	204077b7          	lui	a5,0x20407
2040173c:	f1878513          	addi	a0,a5,-232 # 20406f18 <_exit+0x2a>
20401740:	365000ef          	jal	ra,204022a4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:33
    for (int j = 0; j < 7; j++) {
20401744:	fe042223          	sw	zero,-28(s0)
20401748:	a245                	j	204018e8 <main+0x206>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:34
        for (i = 0; i < REP; i++) {
2040174a:	fe042423          	sw	zero,-24(s0)
2040174e:	a8b5                	j	204017ca <main+0xe8>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:35 (discriminator 3)
            start = rdcycle();
20401750:	3f95                	jal	204016c4 <rdcycle>
20401752:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:36 (discriminator 3)
            AEAD_ENC(plain_text, bytes[0], plain_text, bytes[j], plain_text + 2, Nonce, Key);
20401756:	800007b7          	lui	a5,0x80000
2040175a:	00078793          	mv	a5,a5
2040175e:	438c                	lw	a1,0(a5)
20401760:	800007b7          	lui	a5,0x80000
20401764:	00078713          	mv	a4,a5
20401768:	fe442783          	lw	a5,-28(s0)
2040176c:	078a                	slli	a5,a5,0x2
2040176e:	97ba                	add	a5,a5,a4
20401770:	4394                	lw	a3,0(a5)
20401772:	800007b7          	lui	a5,0x80000
20401776:	7dc78713          	addi	a4,a5,2012 # 800007dc <metal_segment_heap_target_end+0xffffcb48>
2040177a:	800007b7          	lui	a5,0x80000
2040177e:	02c78813          	addi	a6,a5,44 # 8000002c <metal_segment_heap_target_end+0xffffc398>
20401782:	800007b7          	lui	a5,0x80000
20401786:	01c78793          	addi	a5,a5,28 # 8000001c <metal_segment_heap_target_end+0xffffc388>
2040178a:	80000637          	lui	a2,0x80000
2040178e:	7d460613          	addi	a2,a2,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401792:	80000537          	lui	a0,0x80000
20401796:	7d450513          	addi	a0,a0,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
2040179a:	a67fe0ef          	jal	ra,20400200 <AEAD_ENC>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:37 (discriminator 3)
            end = rdcycle();
2040179e:	371d                	jal	204016c4 <rdcycle>
204017a0:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:38 (discriminator 3)
            performance[i] = end - start;
204017a4:	fc842703          	lw	a4,-56(s0)
204017a8:	fcc42783          	lw	a5,-52(s0)
204017ac:	8f1d                	sub	a4,a4,a5
204017ae:	800037b7          	lui	a5,0x80003
204017b2:	f1478693          	addi	a3,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
204017b6:	fe842783          	lw	a5,-24(s0)
204017ba:	078a                	slli	a5,a5,0x2
204017bc:	97b6                	add	a5,a5,a3
204017be:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:34 (discriminator 3)
        for (i = 0; i < REP; i++) {
204017c0:	fe842783          	lw	a5,-24(s0)
204017c4:	0785                	addi	a5,a5,1
204017c6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:34 (discriminator 1)
204017ca:	fe842703          	lw	a4,-24(s0)
204017ce:	47f5                	li	a5,29
204017d0:	f8e7d0e3          	bge	a5,a4,20401750 <main+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:40
        }
        for (i = 0; i < REP; i++) {
204017d4:	fe042423          	sw	zero,-24(s0)
204017d8:	a8a5                	j	20401850 <main+0x16e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:41 (discriminator 3)
            start = rdcycle();
204017da:	35ed                	jal	204016c4 <rdcycle>
204017dc:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:42 (discriminator 3)
            crypto_aead_encrypt(plain_text+2, &clen, plain_text, bytes[j], plain_text, 0, Nonce, Key);
204017e0:	800007b7          	lui	a5,0x80000
204017e4:	7dc78513          	addi	a0,a5,2012 # 800007dc <metal_segment_heap_target_end+0xffffcb48>
204017e8:	800007b7          	lui	a5,0x80000
204017ec:	00078713          	mv	a4,a5
204017f0:	fe442783          	lw	a5,-28(s0)
204017f4:	078a                	slli	a5,a5,0x2
204017f6:	97ba                	add	a5,a5,a4
204017f8:	4394                	lw	a3,0(a5)
204017fa:	fc440593          	addi	a1,s0,-60
204017fe:	800007b7          	lui	a5,0x80000
20401802:	02c78893          	addi	a7,a5,44 # 8000002c <metal_segment_heap_target_end+0xffffc398>
20401806:	800007b7          	lui	a5,0x80000
2040180a:	01c78813          	addi	a6,a5,28 # 8000001c <metal_segment_heap_target_end+0xffffc388>
2040180e:	4781                	li	a5,0
20401810:	80000737          	lui	a4,0x80000
20401814:	7d470713          	addi	a4,a4,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401818:	80000637          	lui	a2,0x80000
2040181c:	7d460613          	addi	a2,a2,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401820:	8f4ff0ef          	jal	ra,20400914 <crypto_aead_encrypt>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:43 (discriminator 3)
            end = rdcycle();
20401824:	3545                	jal	204016c4 <rdcycle>
20401826:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:44 (discriminator 3)
            performance2[i] = end - start;
2040182a:	fc842703          	lw	a4,-56(s0)
2040182e:	fcc42783          	lw	a5,-52(s0)
20401832:	8f1d                	sub	a4,a4,a5
20401834:	800037b7          	lui	a5,0x80003
20401838:	f8c78693          	addi	a3,a5,-116 # 80002f8c <metal_segment_heap_target_end+0xfffff2f8>
2040183c:	fe842783          	lw	a5,-24(s0)
20401840:	078a                	slli	a5,a5,0x2
20401842:	97b6                	add	a5,a5,a3
20401844:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:40 (discriminator 3)
        for (i = 0; i < REP; i++) {
20401846:	fe842783          	lw	a5,-24(s0)
2040184a:	0785                	addi	a5,a5,1
2040184c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:40 (discriminator 1)
20401850:	fe842703          	lw	a4,-24(s0)
20401854:	47f5                	li	a5,29
20401856:	f8e7d2e3          	bge	a5,a4,204017da <main+0xf8>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:46
        }
        printf("ENC bytes %d \n", bytes[j]);
2040185a:	800007b7          	lui	a5,0x80000
2040185e:	00078713          	mv	a4,a5
20401862:	fe442783          	lw	a5,-28(s0)
20401866:	078a                	slli	a5,a5,0x2
20401868:	97ba                	add	a5,a5,a4
2040186a:	439c                	lw	a5,0(a5)
2040186c:	85be                	mv	a1,a5
2040186e:	204077b7          	lui	a5,0x20407
20401872:	f2078513          	addi	a0,a5,-224 # 20406f20 <_exit+0x32>
20401876:	111000ef          	jal	ra,20402186 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:47
        for (i = 0; i < REP; i++) {
2040187a:	fe042423          	sw	zero,-24(s0)
2040187e:	a899                	j	204018d4 <main+0x1f2>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:48 (discriminator 3)
            printf("%d:   SWcycles : %u   HWcycles : %u\n", i, performance2[i], performance[i]);
20401880:	800037b7          	lui	a5,0x80003
20401884:	f8c78713          	addi	a4,a5,-116 # 80002f8c <metal_segment_heap_target_end+0xfffff2f8>
20401888:	fe842783          	lw	a5,-24(s0)
2040188c:	078a                	slli	a5,a5,0x2
2040188e:	97ba                	add	a5,a5,a4
20401890:	4390                	lw	a2,0(a5)
20401892:	800037b7          	lui	a5,0x80003
20401896:	f1478713          	addi	a4,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
2040189a:	fe842783          	lw	a5,-24(s0)
2040189e:	078a                	slli	a5,a5,0x2
204018a0:	97ba                	add	a5,a5,a4
204018a2:	439c                	lw	a5,0(a5)
204018a4:	86be                	mv	a3,a5
204018a6:	fe842583          	lw	a1,-24(s0)
204018aa:	204077b7          	lui	a5,0x20407
204018ae:	f3078513          	addi	a0,a5,-208 # 20406f30 <_exit+0x42>
204018b2:	0d5000ef          	jal	ra,20402186 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:49 (discriminator 3)
            performance[i] = 0;
204018b6:	800037b7          	lui	a5,0x80003
204018ba:	f1478713          	addi	a4,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
204018be:	fe842783          	lw	a5,-24(s0)
204018c2:	078a                	slli	a5,a5,0x2
204018c4:	97ba                	add	a5,a5,a4
204018c6:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:47 (discriminator 3)
        for (i = 0; i < REP; i++) {
204018ca:	fe842783          	lw	a5,-24(s0)
204018ce:	0785                	addi	a5,a5,1
204018d0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:47 (discriminator 1)
204018d4:	fe842703          	lw	a4,-24(s0)
204018d8:	47f5                	li	a5,29
204018da:	fae7d3e3          	bge	a5,a4,20401880 <main+0x19e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:33 (discriminator 2)
    for (int j = 0; j < 7; j++) {
204018de:	fe442783          	lw	a5,-28(s0)
204018e2:	0785                	addi	a5,a5,1
204018e4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:33 (discriminator 1)
204018e8:	fe442703          	lw	a4,-28(s0)
204018ec:	4799                	li	a5,6
204018ee:	e4e7dee3          	bge	a5,a4,2040174a <main+0x68>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:53
        }
    }

    printf("ENC 100 A\n");
204018f2:	204077b7          	lui	a5,0x20407
204018f6:	f5878513          	addi	a0,a5,-168 # 20406f58 <_exit+0x6a>
204018fa:	1ab000ef          	jal	ra,204022a4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:54
    for (int j = 0; j < 7; j++) {
204018fe:	fe042023          	sw	zero,-32(s0)
20401902:	aa69                	j	20401a9c <main+0x3ba>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:55
        for (i = 0; i < REP; i++) {
20401904:	fe042423          	sw	zero,-24(s0)
20401908:	a895                	j	2040197c <main+0x29a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:56 (discriminator 3)
            start = rdcycle();
2040190a:	3b6d                	jal	204016c4 <rdcycle>
2040190c:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:57 (discriminator 3)
            AEAD_ENC(plain_text, bytes[j], plain_text, 0, plain_text+2, Nonce, Key);
20401910:	800007b7          	lui	a5,0x80000
20401914:	00078713          	mv	a4,a5
20401918:	fe042783          	lw	a5,-32(s0)
2040191c:	078a                	slli	a5,a5,0x2
2040191e:	97ba                	add	a5,a5,a4
20401920:	438c                	lw	a1,0(a5)
20401922:	800007b7          	lui	a5,0x80000
20401926:	7dc78713          	addi	a4,a5,2012 # 800007dc <metal_segment_heap_target_end+0xffffcb48>
2040192a:	800007b7          	lui	a5,0x80000
2040192e:	02c78813          	addi	a6,a5,44 # 8000002c <metal_segment_heap_target_end+0xffffc398>
20401932:	800007b7          	lui	a5,0x80000
20401936:	01c78793          	addi	a5,a5,28 # 8000001c <metal_segment_heap_target_end+0xffffc388>
2040193a:	4681                	li	a3,0
2040193c:	80000637          	lui	a2,0x80000
20401940:	7d460613          	addi	a2,a2,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401944:	80000537          	lui	a0,0x80000
20401948:	7d450513          	addi	a0,a0,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
2040194c:	8b5fe0ef          	jal	ra,20400200 <AEAD_ENC>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:58 (discriminator 3)
            end = rdcycle();
20401950:	3b95                	jal	204016c4 <rdcycle>
20401952:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:59 (discriminator 3)
            performance[i] = end - start;
20401956:	fc842703          	lw	a4,-56(s0)
2040195a:	fcc42783          	lw	a5,-52(s0)
2040195e:	8f1d                	sub	a4,a4,a5
20401960:	800037b7          	lui	a5,0x80003
20401964:	f1478693          	addi	a3,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
20401968:	fe842783          	lw	a5,-24(s0)
2040196c:	078a                	slli	a5,a5,0x2
2040196e:	97b6                	add	a5,a5,a3
20401970:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:55 (discriminator 3)
        for (i = 0; i < REP; i++) {
20401972:	fe842783          	lw	a5,-24(s0)
20401976:	0785                	addi	a5,a5,1
20401978:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:55 (discriminator 1)
2040197c:	fe842703          	lw	a4,-24(s0)
20401980:	47f5                	li	a5,29
20401982:	f8e7d4e3          	bge	a5,a4,2040190a <main+0x228>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:61
        }
        for (i = 0; i < REP; i++) {
20401986:	fe042423          	sw	zero,-24(s0)
2040198a:	a8ad                	j	20401a04 <main+0x322>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:62 (discriminator 3)
            start = rdcycle();
2040198c:	3b25                	jal	204016c4 <rdcycle>
2040198e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:63 (discriminator 3)
            crypto_aead_encrypt(plain_text+2, &clen, plain_text, 0, plain_text, bytes[j], Nonce, Key);
20401992:	800007b7          	lui	a5,0x80000
20401996:	7dc78513          	addi	a0,a5,2012 # 800007dc <metal_segment_heap_target_end+0xffffcb48>
2040199a:	800007b7          	lui	a5,0x80000
2040199e:	00078713          	mv	a4,a5
204019a2:	fe042783          	lw	a5,-32(s0)
204019a6:	078a                	slli	a5,a5,0x2
204019a8:	97ba                	add	a5,a5,a4
204019aa:	4398                	lw	a4,0(a5)
204019ac:	fc440593          	addi	a1,s0,-60
204019b0:	800007b7          	lui	a5,0x80000
204019b4:	02c78893          	addi	a7,a5,44 # 8000002c <metal_segment_heap_target_end+0xffffc398>
204019b8:	800007b7          	lui	a5,0x80000
204019bc:	01c78813          	addi	a6,a5,28 # 8000001c <metal_segment_heap_target_end+0xffffc388>
204019c0:	87ba                	mv	a5,a4
204019c2:	80000737          	lui	a4,0x80000
204019c6:	7d470713          	addi	a4,a4,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
204019ca:	4681                	li	a3,0
204019cc:	80000637          	lui	a2,0x80000
204019d0:	7d460613          	addi	a2,a2,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
204019d4:	f41fe0ef          	jal	ra,20400914 <crypto_aead_encrypt>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:64 (discriminator 3)
            end = rdcycle();
204019d8:	31f5                	jal	204016c4 <rdcycle>
204019da:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:65 (discriminator 3)
            performance2[i] = end - start;
204019de:	fc842703          	lw	a4,-56(s0)
204019e2:	fcc42783          	lw	a5,-52(s0)
204019e6:	8f1d                	sub	a4,a4,a5
204019e8:	800037b7          	lui	a5,0x80003
204019ec:	f8c78693          	addi	a3,a5,-116 # 80002f8c <metal_segment_heap_target_end+0xfffff2f8>
204019f0:	fe842783          	lw	a5,-24(s0)
204019f4:	078a                	slli	a5,a5,0x2
204019f6:	97b6                	add	a5,a5,a3
204019f8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:61 (discriminator 3)
        for (i = 0; i < REP; i++) {
204019fa:	fe842783          	lw	a5,-24(s0)
204019fe:	0785                	addi	a5,a5,1
20401a00:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:61 (discriminator 1)
20401a04:	fe842703          	lw	a4,-24(s0)
20401a08:	47f5                	li	a5,29
20401a0a:	f8e7d1e3          	bge	a5,a4,2040198c <main+0x2aa>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:67
        }
        printf("ENC 100 A bytes %d \n", bytes[j]);
20401a0e:	800007b7          	lui	a5,0x80000
20401a12:	00078713          	mv	a4,a5
20401a16:	fe042783          	lw	a5,-32(s0)
20401a1a:	078a                	slli	a5,a5,0x2
20401a1c:	97ba                	add	a5,a5,a4
20401a1e:	439c                	lw	a5,0(a5)
20401a20:	85be                	mv	a1,a5
20401a22:	204077b7          	lui	a5,0x20407
20401a26:	f6478513          	addi	a0,a5,-156 # 20406f64 <_exit+0x76>
20401a2a:	75c000ef          	jal	ra,20402186 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:68
        for (i = 0; i < REP; i++) {
20401a2e:	fe042423          	sw	zero,-24(s0)
20401a32:	a899                	j	20401a88 <main+0x3a6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:69 (discriminator 3)
            printf("%d:   SWcycles : %u   HWcycles : %u\n", i, performance2[i], performance[i]);
20401a34:	800037b7          	lui	a5,0x80003
20401a38:	f8c78713          	addi	a4,a5,-116 # 80002f8c <metal_segment_heap_target_end+0xfffff2f8>
20401a3c:	fe842783          	lw	a5,-24(s0)
20401a40:	078a                	slli	a5,a5,0x2
20401a42:	97ba                	add	a5,a5,a4
20401a44:	4390                	lw	a2,0(a5)
20401a46:	800037b7          	lui	a5,0x80003
20401a4a:	f1478713          	addi	a4,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
20401a4e:	fe842783          	lw	a5,-24(s0)
20401a52:	078a                	slli	a5,a5,0x2
20401a54:	97ba                	add	a5,a5,a4
20401a56:	439c                	lw	a5,0(a5)
20401a58:	86be                	mv	a3,a5
20401a5a:	fe842583          	lw	a1,-24(s0)
20401a5e:	204077b7          	lui	a5,0x20407
20401a62:	f3078513          	addi	a0,a5,-208 # 20406f30 <_exit+0x42>
20401a66:	720000ef          	jal	ra,20402186 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:70 (discriminator 3)
            performance[i] = 0;
20401a6a:	800037b7          	lui	a5,0x80003
20401a6e:	f1478713          	addi	a4,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
20401a72:	fe842783          	lw	a5,-24(s0)
20401a76:	078a                	slli	a5,a5,0x2
20401a78:	97ba                	add	a5,a5,a4
20401a7a:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:68 (discriminator 3)
        for (i = 0; i < REP; i++) {
20401a7e:	fe842783          	lw	a5,-24(s0)
20401a82:	0785                	addi	a5,a5,1
20401a84:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:68 (discriminator 1)
20401a88:	fe842703          	lw	a4,-24(s0)
20401a8c:	47f5                	li	a5,29
20401a8e:	fae7d3e3          	bge	a5,a4,20401a34 <main+0x352>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:54 (discriminator 2)
    for (int j = 0; j < 7; j++) {
20401a92:	fe042783          	lw	a5,-32(s0)
20401a96:	0785                	addi	a5,a5,1
20401a98:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:54 (discriminator 1)
20401a9c:	fe042703          	lw	a4,-32(s0)
20401aa0:	4799                	li	a5,6
20401aa2:	e6e7d1e3          	bge	a5,a4,20401904 <main+0x222>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:77
    }



    /// DEC
    printf("DEC \n");
20401aa6:	204077b7          	lui	a5,0x20407
20401aaa:	f7c78513          	addi	a0,a5,-132 # 20406f7c <_exit+0x8e>
20401aae:	7f6000ef          	jal	ra,204022a4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:78
    for (int j = 0; j < 7; j++) {
20401ab2:	fc042e23          	sw	zero,-36(s0)
20401ab6:	a255                	j	20401c5a <main+0x578>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:79
        for (i = 0; i < REP; i++) {
20401ab8:	fe042423          	sw	zero,-24(s0)
20401abc:	a051                	j	20401b40 <main+0x45e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:80 (discriminator 3)
            start = rdcycle();
20401abe:	3119                	jal	204016c4 <rdcycle>
20401ac0:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:81 (discriminator 3)
            AEAD_DEC(plain_text, bytes[0], plain_text, bytes[j], plain_text+2, Nonce, Key, plain_text);
20401ac4:	800007b7          	lui	a5,0x80000
20401ac8:	00078793          	mv	a5,a5
20401acc:	438c                	lw	a1,0(a5)
20401ace:	800007b7          	lui	a5,0x80000
20401ad2:	00078713          	mv	a4,a5
20401ad6:	fdc42783          	lw	a5,-36(s0)
20401ada:	078a                	slli	a5,a5,0x2
20401adc:	97ba                	add	a5,a5,a4
20401ade:	4394                	lw	a3,0(a5)
20401ae0:	800007b7          	lui	a5,0x80000
20401ae4:	7dc78713          	addi	a4,a5,2012 # 800007dc <metal_segment_heap_target_end+0xffffcb48>
20401ae8:	800007b7          	lui	a5,0x80000
20401aec:	7d478893          	addi	a7,a5,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401af0:	800007b7          	lui	a5,0x80000
20401af4:	02c78813          	addi	a6,a5,44 # 8000002c <metal_segment_heap_target_end+0xffffc398>
20401af8:	800007b7          	lui	a5,0x80000
20401afc:	01c78793          	addi	a5,a5,28 # 8000001c <metal_segment_heap_target_end+0xffffc388>
20401b00:	80000637          	lui	a2,0x80000
20401b04:	7d460613          	addi	a2,a2,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401b08:	80000537          	lui	a0,0x80000
20401b0c:	7d450513          	addi	a0,a0,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401b10:	facfe0ef          	jal	ra,204002bc <AEAD_DEC>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:82 (discriminator 3)
            end = rdcycle();
20401b14:	3e45                	jal	204016c4 <rdcycle>
20401b16:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:83 (discriminator 3)
            performance[i] = end - start;
20401b1a:	fc842703          	lw	a4,-56(s0)
20401b1e:	fcc42783          	lw	a5,-52(s0)
20401b22:	8f1d                	sub	a4,a4,a5
20401b24:	800037b7          	lui	a5,0x80003
20401b28:	f1478693          	addi	a3,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
20401b2c:	fe842783          	lw	a5,-24(s0)
20401b30:	078a                	slli	a5,a5,0x2
20401b32:	97b6                	add	a5,a5,a3
20401b34:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:79 (discriminator 3)
        for (i = 0; i < REP; i++) {
20401b36:	fe842783          	lw	a5,-24(s0)
20401b3a:	0785                	addi	a5,a5,1
20401b3c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:79 (discriminator 1)
20401b40:	fe842703          	lw	a4,-24(s0)
20401b44:	47f5                	li	a5,29
20401b46:	f6e7dce3          	bge	a5,a4,20401abe <main+0x3dc>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:85
        }
        for (i = 0; i < REP; i++) {
20401b4a:	fe042423          	sw	zero,-24(s0)
20401b4e:	a8a5                	j	20401bc6 <main+0x4e4>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:86 (discriminator 3)
            start = rdcycle();
20401b50:	3e95                	jal	204016c4 <rdcycle>
20401b52:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:87 (discriminator 3)
            crypto_aead_decrypt(plain_text+2, &clen, plain_text, bytes[j], plain_text, 0, Nonce, Key);
20401b56:	800007b7          	lui	a5,0x80000
20401b5a:	7dc78513          	addi	a0,a5,2012 # 800007dc <metal_segment_heap_target_end+0xffffcb48>
20401b5e:	800007b7          	lui	a5,0x80000
20401b62:	00078713          	mv	a4,a5
20401b66:	fdc42783          	lw	a5,-36(s0)
20401b6a:	078a                	slli	a5,a5,0x2
20401b6c:	97ba                	add	a5,a5,a4
20401b6e:	4394                	lw	a3,0(a5)
20401b70:	fc440593          	addi	a1,s0,-60
20401b74:	800007b7          	lui	a5,0x80000
20401b78:	02c78893          	addi	a7,a5,44 # 8000002c <metal_segment_heap_target_end+0xffffc398>
20401b7c:	800007b7          	lui	a5,0x80000
20401b80:	01c78813          	addi	a6,a5,28 # 8000001c <metal_segment_heap_target_end+0xffffc388>
20401b84:	4781                	li	a5,0
20401b86:	80000737          	lui	a4,0x80000
20401b8a:	7d470713          	addi	a4,a4,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401b8e:	80000637          	lui	a2,0x80000
20401b92:	7d460613          	addi	a2,a2,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401b96:	a8cff0ef          	jal	ra,20400e22 <crypto_aead_decrypt>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:88 (discriminator 3)
            end = rdcycle();
20401b9a:	362d                	jal	204016c4 <rdcycle>
20401b9c:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:89 (discriminator 3)
            performance2[i] = end - start;
20401ba0:	fc842703          	lw	a4,-56(s0)
20401ba4:	fcc42783          	lw	a5,-52(s0)
20401ba8:	8f1d                	sub	a4,a4,a5
20401baa:	800037b7          	lui	a5,0x80003
20401bae:	f8c78693          	addi	a3,a5,-116 # 80002f8c <metal_segment_heap_target_end+0xfffff2f8>
20401bb2:	fe842783          	lw	a5,-24(s0)
20401bb6:	078a                	slli	a5,a5,0x2
20401bb8:	97b6                	add	a5,a5,a3
20401bba:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:85 (discriminator 3)
        for (i = 0; i < REP; i++) {
20401bbc:	fe842783          	lw	a5,-24(s0)
20401bc0:	0785                	addi	a5,a5,1
20401bc2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:85 (discriminator 1)
20401bc6:	fe842703          	lw	a4,-24(s0)
20401bca:	47f5                	li	a5,29
20401bcc:	f8e7d2e3          	bge	a5,a4,20401b50 <main+0x46e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:91
        }
        printf("DEC bytes %d \n", bytes[j]);
20401bd0:	800007b7          	lui	a5,0x80000
20401bd4:	00078713          	mv	a4,a5
20401bd8:	fdc42783          	lw	a5,-36(s0)
20401bdc:	078a                	slli	a5,a5,0x2
20401bde:	97ba                	add	a5,a5,a4
20401be0:	439c                	lw	a5,0(a5)
20401be2:	85be                	mv	a1,a5
20401be4:	204077b7          	lui	a5,0x20407
20401be8:	f8478513          	addi	a0,a5,-124 # 20406f84 <_exit+0x96>
20401bec:	2b69                	jal	20402186 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:92
        for (i = 0; i < REP; i++) {
20401bee:	fe042423          	sw	zero,-24(s0)
20401bf2:	a891                	j	20401c46 <main+0x564>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:93 (discriminator 3)
            printf("%d:   SWcycles : %u   HWcycles : %u\n", i, performance2[i], performance[i]);
20401bf4:	800037b7          	lui	a5,0x80003
20401bf8:	f8c78713          	addi	a4,a5,-116 # 80002f8c <metal_segment_heap_target_end+0xfffff2f8>
20401bfc:	fe842783          	lw	a5,-24(s0)
20401c00:	078a                	slli	a5,a5,0x2
20401c02:	97ba                	add	a5,a5,a4
20401c04:	4390                	lw	a2,0(a5)
20401c06:	800037b7          	lui	a5,0x80003
20401c0a:	f1478713          	addi	a4,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
20401c0e:	fe842783          	lw	a5,-24(s0)
20401c12:	078a                	slli	a5,a5,0x2
20401c14:	97ba                	add	a5,a5,a4
20401c16:	439c                	lw	a5,0(a5)
20401c18:	86be                	mv	a3,a5
20401c1a:	fe842583          	lw	a1,-24(s0)
20401c1e:	204077b7          	lui	a5,0x20407
20401c22:	f3078513          	addi	a0,a5,-208 # 20406f30 <_exit+0x42>
20401c26:	2385                	jal	20402186 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:94 (discriminator 3)
            performance[i] = 0;
20401c28:	800037b7          	lui	a5,0x80003
20401c2c:	f1478713          	addi	a4,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
20401c30:	fe842783          	lw	a5,-24(s0)
20401c34:	078a                	slli	a5,a5,0x2
20401c36:	97ba                	add	a5,a5,a4
20401c38:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:92 (discriminator 3)
        for (i = 0; i < REP; i++) {
20401c3c:	fe842783          	lw	a5,-24(s0)
20401c40:	0785                	addi	a5,a5,1
20401c42:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:92 (discriminator 1)
20401c46:	fe842703          	lw	a4,-24(s0)
20401c4a:	47f5                	li	a5,29
20401c4c:	fae7d4e3          	bge	a5,a4,20401bf4 <main+0x512>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:78 (discriminator 2)
    for (int j = 0; j < 7; j++) {
20401c50:	fdc42783          	lw	a5,-36(s0)
20401c54:	0785                	addi	a5,a5,1
20401c56:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:78 (discriminator 1)
20401c5a:	fdc42703          	lw	a4,-36(s0)
20401c5e:	4799                	li	a5,6
20401c60:	e4e7dce3          	bge	a5,a4,20401ab8 <main+0x3d6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:98
        }
    }

    printf("DEC 100 A\n");
20401c64:	204077b7          	lui	a5,0x20407
20401c68:	f9478513          	addi	a0,a5,-108 # 20406f94 <_exit+0xa6>
20401c6c:	2d25                	jal	204022a4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:99
    for (int j = 0; j < 7; j++) {
20401c6e:	fc042c23          	sw	zero,-40(s0)
20401c72:	a27d                	j	20401e20 <main+0x73e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:100
        for (i = 0; i < REP; i++) {
20401c74:	fe042423          	sw	zero,-24(s0)
20401c78:	a051                	j	20401cfc <main+0x61a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:101 (discriminator 3)
            start = rdcycle();
20401c7a:	34a9                	jal	204016c4 <rdcycle>
20401c7c:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:102 (discriminator 3)
            AEAD_DEC(plain_text, bytes[j], plain_text, bytes[0], plain_text+2, Nonce, Key, plain_text);
20401c80:	800007b7          	lui	a5,0x80000
20401c84:	00078713          	mv	a4,a5
20401c88:	fd842783          	lw	a5,-40(s0)
20401c8c:	078a                	slli	a5,a5,0x2
20401c8e:	97ba                	add	a5,a5,a4
20401c90:	438c                	lw	a1,0(a5)
20401c92:	800007b7          	lui	a5,0x80000
20401c96:	00078793          	mv	a5,a5
20401c9a:	4394                	lw	a3,0(a5)
20401c9c:	800007b7          	lui	a5,0x80000
20401ca0:	7dc78713          	addi	a4,a5,2012 # 800007dc <metal_segment_heap_target_end+0xffffcb48>
20401ca4:	800007b7          	lui	a5,0x80000
20401ca8:	7d478893          	addi	a7,a5,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401cac:	800007b7          	lui	a5,0x80000
20401cb0:	02c78813          	addi	a6,a5,44 # 8000002c <metal_segment_heap_target_end+0xffffc398>
20401cb4:	800007b7          	lui	a5,0x80000
20401cb8:	01c78793          	addi	a5,a5,28 # 8000001c <metal_segment_heap_target_end+0xffffc388>
20401cbc:	80000637          	lui	a2,0x80000
20401cc0:	7d460613          	addi	a2,a2,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401cc4:	80000537          	lui	a0,0x80000
20401cc8:	7d450513          	addi	a0,a0,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401ccc:	df0fe0ef          	jal	ra,204002bc <AEAD_DEC>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:103 (discriminator 3)
            end = rdcycle();
20401cd0:	3ad5                	jal	204016c4 <rdcycle>
20401cd2:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:104 (discriminator 3)
            performance[i] = end - start;
20401cd6:	fc842703          	lw	a4,-56(s0)
20401cda:	fcc42783          	lw	a5,-52(s0)
20401cde:	8f1d                	sub	a4,a4,a5
20401ce0:	800037b7          	lui	a5,0x80003
20401ce4:	f1478693          	addi	a3,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
20401ce8:	fe842783          	lw	a5,-24(s0)
20401cec:	078a                	slli	a5,a5,0x2
20401cee:	97b6                	add	a5,a5,a3
20401cf0:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:100 (discriminator 3)
        for (i = 0; i < REP; i++) {
20401cf2:	fe842783          	lw	a5,-24(s0)
20401cf6:	0785                	addi	a5,a5,1
20401cf8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:100 (discriminator 1)
20401cfc:	fe842703          	lw	a4,-24(s0)
20401d00:	47f5                	li	a5,29
20401d02:	f6e7dce3          	bge	a5,a4,20401c7a <main+0x598>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:106
        }
        for (i = 0; i < REP; i++) {
20401d06:	fe042423          	sw	zero,-24(s0)
20401d0a:	a049                	j	20401d8c <main+0x6aa>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:107 (discriminator 3)
            start = rdcycle();
20401d0c:	3a65                	jal	204016c4 <rdcycle>
20401d0e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:108 (discriminator 3)
            crypto_aead_decrypt(plain_text+2, &clen, plain_text, bytes[0], plain_text, bytes[j], Nonce, Key);
20401d12:	800007b7          	lui	a5,0x80000
20401d16:	7dc78513          	addi	a0,a5,2012 # 800007dc <metal_segment_heap_target_end+0xffffcb48>
20401d1a:	800007b7          	lui	a5,0x80000
20401d1e:	00078793          	mv	a5,a5
20401d22:	4394                	lw	a3,0(a5)
20401d24:	800007b7          	lui	a5,0x80000
20401d28:	00078713          	mv	a4,a5
20401d2c:	fd842783          	lw	a5,-40(s0)
20401d30:	078a                	slli	a5,a5,0x2
20401d32:	97ba                	add	a5,a5,a4
20401d34:	4398                	lw	a4,0(a5)
20401d36:	fc440593          	addi	a1,s0,-60
20401d3a:	800007b7          	lui	a5,0x80000
20401d3e:	02c78893          	addi	a7,a5,44 # 8000002c <metal_segment_heap_target_end+0xffffc398>
20401d42:	800007b7          	lui	a5,0x80000
20401d46:	01c78813          	addi	a6,a5,28 # 8000001c <metal_segment_heap_target_end+0xffffc388>
20401d4a:	87ba                	mv	a5,a4
20401d4c:	80000737          	lui	a4,0x80000
20401d50:	7d470713          	addi	a4,a4,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401d54:	80000637          	lui	a2,0x80000
20401d58:	7d460613          	addi	a2,a2,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401d5c:	8c6ff0ef          	jal	ra,20400e22 <crypto_aead_decrypt>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:109 (discriminator 3)
            end = rdcycle();
20401d60:	3295                	jal	204016c4 <rdcycle>
20401d62:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:110 (discriminator 3)
            performance2[i] = end - start;
20401d66:	fc842703          	lw	a4,-56(s0)
20401d6a:	fcc42783          	lw	a5,-52(s0)
20401d6e:	8f1d                	sub	a4,a4,a5
20401d70:	800037b7          	lui	a5,0x80003
20401d74:	f8c78693          	addi	a3,a5,-116 # 80002f8c <metal_segment_heap_target_end+0xfffff2f8>
20401d78:	fe842783          	lw	a5,-24(s0)
20401d7c:	078a                	slli	a5,a5,0x2
20401d7e:	97b6                	add	a5,a5,a3
20401d80:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:106 (discriminator 3)
        for (i = 0; i < REP; i++) {
20401d82:	fe842783          	lw	a5,-24(s0)
20401d86:	0785                	addi	a5,a5,1
20401d88:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:106 (discriminator 1)
20401d8c:	fe842703          	lw	a4,-24(s0)
20401d90:	47f5                	li	a5,29
20401d92:	f6e7dde3          	bge	a5,a4,20401d0c <main+0x62a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:112
        }
        printf("DEC 100 A bytes %d \n", bytes[j]);
20401d96:	800007b7          	lui	a5,0x80000
20401d9a:	00078713          	mv	a4,a5
20401d9e:	fd842783          	lw	a5,-40(s0)
20401da2:	078a                	slli	a5,a5,0x2
20401da4:	97ba                	add	a5,a5,a4
20401da6:	439c                	lw	a5,0(a5)
20401da8:	85be                	mv	a1,a5
20401daa:	204077b7          	lui	a5,0x20407
20401dae:	fa078513          	addi	a0,a5,-96 # 20406fa0 <_exit+0xb2>
20401db2:	2ed1                	jal	20402186 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:113
        for (i = 0; i < REP; i++) {
20401db4:	fe042423          	sw	zero,-24(s0)
20401db8:	a891                	j	20401e0c <main+0x72a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:114 (discriminator 3)
            printf("%d:   SWcycles : %u   HWcycles : %u\n", i, performance2[i], performance[i]);
20401dba:	800037b7          	lui	a5,0x80003
20401dbe:	f8c78713          	addi	a4,a5,-116 # 80002f8c <metal_segment_heap_target_end+0xfffff2f8>
20401dc2:	fe842783          	lw	a5,-24(s0)
20401dc6:	078a                	slli	a5,a5,0x2
20401dc8:	97ba                	add	a5,a5,a4
20401dca:	4390                	lw	a2,0(a5)
20401dcc:	800037b7          	lui	a5,0x80003
20401dd0:	f1478713          	addi	a4,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
20401dd4:	fe842783          	lw	a5,-24(s0)
20401dd8:	078a                	slli	a5,a5,0x2
20401dda:	97ba                	add	a5,a5,a4
20401ddc:	439c                	lw	a5,0(a5)
20401dde:	86be                	mv	a3,a5
20401de0:	fe842583          	lw	a1,-24(s0)
20401de4:	204077b7          	lui	a5,0x20407
20401de8:	f3078513          	addi	a0,a5,-208 # 20406f30 <_exit+0x42>
20401dec:	2e69                	jal	20402186 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:115 (discriminator 3)
            performance[i] = 0;
20401dee:	800037b7          	lui	a5,0x80003
20401df2:	f1478713          	addi	a4,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
20401df6:	fe842783          	lw	a5,-24(s0)
20401dfa:	078a                	slli	a5,a5,0x2
20401dfc:	97ba                	add	a5,a5,a4
20401dfe:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:113 (discriminator 3)
        for (i = 0; i < REP; i++) {
20401e02:	fe842783          	lw	a5,-24(s0)
20401e06:	0785                	addi	a5,a5,1
20401e08:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:113 (discriminator 1)
20401e0c:	fe842703          	lw	a4,-24(s0)
20401e10:	47f5                	li	a5,29
20401e12:	fae7d4e3          	bge	a5,a4,20401dba <main+0x6d8>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:99 (discriminator 2)
    for (int j = 0; j < 7; j++) {
20401e16:	fd842783          	lw	a5,-40(s0)
20401e1a:	0785                	addi	a5,a5,1
20401e1c:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:99 (discriminator 1)
20401e20:	fd842703          	lw	a4,-40(s0)
20401e24:	4799                	li	a5,6
20401e26:	e4e7d7e3          	bge	a5,a4,20401c74 <main+0x592>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:121
        }
    }

   //// HASH

    printf("HASH \n");
20401e2a:	204077b7          	lui	a5,0x20407
20401e2e:	fb878513          	addi	a0,a5,-72 # 20406fb8 <_exit+0xca>
20401e32:	298d                	jal	204022a4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:122
    for (int j = 0; j < 7; j++) {
20401e34:	fc042a23          	sw	zero,-44(s0)
20401e38:	a2a5                	j	20401fa0 <main+0x8be>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:123
        for (i = 0; i < REP; i++) {
20401e3a:	fe042423          	sw	zero,-24(s0)
20401e3e:	a085                	j	20401e9e <main+0x7bc>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:124 (discriminator 3)
            start = rdcycle();
20401e40:	885ff0ef          	jal	ra,204016c4 <rdcycle>
20401e44:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:125 (discriminator 3)
            HASH(plain_text, bytes[j], plain_text);
20401e48:	800007b7          	lui	a5,0x80000
20401e4c:	00078713          	mv	a4,a5
20401e50:	fd442783          	lw	a5,-44(s0)
20401e54:	078a                	slli	a5,a5,0x2
20401e56:	97ba                	add	a5,a5,a4
20401e58:	4398                	lw	a4,0(a5)
20401e5a:	800007b7          	lui	a5,0x80000
20401e5e:	7d478613          	addi	a2,a5,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401e62:	85ba                	mv	a1,a4
20401e64:	800007b7          	lui	a5,0x80000
20401e68:	7d478513          	addi	a0,a5,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401e6c:	d26fe0ef          	jal	ra,20400392 <HASH>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:126 (discriminator 3)
            end = rdcycle();
20401e70:	855ff0ef          	jal	ra,204016c4 <rdcycle>
20401e74:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:127 (discriminator 3)
            performance[i] = end - start;
20401e78:	fc842703          	lw	a4,-56(s0)
20401e7c:	fcc42783          	lw	a5,-52(s0)
20401e80:	8f1d                	sub	a4,a4,a5
20401e82:	800037b7          	lui	a5,0x80003
20401e86:	f1478693          	addi	a3,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
20401e8a:	fe842783          	lw	a5,-24(s0)
20401e8e:	078a                	slli	a5,a5,0x2
20401e90:	97b6                	add	a5,a5,a3
20401e92:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:123 (discriminator 3)
        for (i = 0; i < REP; i++) {
20401e94:	fe842783          	lw	a5,-24(s0)
20401e98:	0785                	addi	a5,a5,1
20401e9a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:123 (discriminator 1)
20401e9e:	fe842703          	lw	a4,-24(s0)
20401ea2:	47f5                	li	a5,29
20401ea4:	f8e7dee3          	bge	a5,a4,20401e40 <main+0x75e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:129
        }
        for (i = 0; i < REP; i++) {
20401ea8:	fe042423          	sw	zero,-24(s0)
20401eac:	a085                	j	20401f0c <main+0x82a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:130 (discriminator 3)
            start = rdcycle();
20401eae:	817ff0ef          	jal	ra,204016c4 <rdcycle>
20401eb2:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:131 (discriminator 3)
            crypto_hash(plain_text, bytes[j], plain_text);
20401eb6:	800007b7          	lui	a5,0x80000
20401eba:	00078713          	mv	a4,a5
20401ebe:	fd442783          	lw	a5,-44(s0)
20401ec2:	078a                	slli	a5,a5,0x2
20401ec4:	97ba                	add	a5,a5,a4
20401ec6:	4398                	lw	a4,0(a5)
20401ec8:	800007b7          	lui	a5,0x80000
20401ecc:	7d478613          	addi	a2,a5,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401ed0:	85ba                	mv	a1,a4
20401ed2:	800007b7          	lui	a5,0x80000
20401ed6:	7d478513          	addi	a0,a5,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401eda:	cecff0ef          	jal	ra,204013c6 <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:132 (discriminator 3)
            end = rdcycle();
20401ede:	fe6ff0ef          	jal	ra,204016c4 <rdcycle>
20401ee2:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:133 (discriminator 3)
            performance2[i] = end - start;
20401ee6:	fc842703          	lw	a4,-56(s0)
20401eea:	fcc42783          	lw	a5,-52(s0)
20401eee:	8f1d                	sub	a4,a4,a5
20401ef0:	800037b7          	lui	a5,0x80003
20401ef4:	f8c78693          	addi	a3,a5,-116 # 80002f8c <metal_segment_heap_target_end+0xfffff2f8>
20401ef8:	fe842783          	lw	a5,-24(s0)
20401efc:	078a                	slli	a5,a5,0x2
20401efe:	97b6                	add	a5,a5,a3
20401f00:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:129 (discriminator 3)
        for (i = 0; i < REP; i++) {
20401f02:	fe842783          	lw	a5,-24(s0)
20401f06:	0785                	addi	a5,a5,1
20401f08:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:129 (discriminator 1)
20401f0c:	fe842703          	lw	a4,-24(s0)
20401f10:	47f5                	li	a5,29
20401f12:	f8e7dee3          	bge	a5,a4,20401eae <main+0x7cc>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:135
        }
        printf("HASH 100 A bytes %d \n", bytes[j]);
20401f16:	800007b7          	lui	a5,0x80000
20401f1a:	00078713          	mv	a4,a5
20401f1e:	fd442783          	lw	a5,-44(s0)
20401f22:	078a                	slli	a5,a5,0x2
20401f24:	97ba                	add	a5,a5,a4
20401f26:	439c                	lw	a5,0(a5)
20401f28:	85be                	mv	a1,a5
20401f2a:	204077b7          	lui	a5,0x20407
20401f2e:	fc078513          	addi	a0,a5,-64 # 20406fc0 <_exit+0xd2>
20401f32:	2c91                	jal	20402186 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:136
        for (i = 0; i < REP; i++) {
20401f34:	fe042423          	sw	zero,-24(s0)
20401f38:	a891                	j	20401f8c <main+0x8aa>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:137 (discriminator 3)
            printf("%d:   SWcycles : %u   HWcycles : %u\n", i, performance2[i], performance[i]);
20401f3a:	800037b7          	lui	a5,0x80003
20401f3e:	f8c78713          	addi	a4,a5,-116 # 80002f8c <metal_segment_heap_target_end+0xfffff2f8>
20401f42:	fe842783          	lw	a5,-24(s0)
20401f46:	078a                	slli	a5,a5,0x2
20401f48:	97ba                	add	a5,a5,a4
20401f4a:	4390                	lw	a2,0(a5)
20401f4c:	800037b7          	lui	a5,0x80003
20401f50:	f1478713          	addi	a4,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
20401f54:	fe842783          	lw	a5,-24(s0)
20401f58:	078a                	slli	a5,a5,0x2
20401f5a:	97ba                	add	a5,a5,a4
20401f5c:	439c                	lw	a5,0(a5)
20401f5e:	86be                	mv	a3,a5
20401f60:	fe842583          	lw	a1,-24(s0)
20401f64:	204077b7          	lui	a5,0x20407
20401f68:	f3078513          	addi	a0,a5,-208 # 20406f30 <_exit+0x42>
20401f6c:	2c29                	jal	20402186 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:138 (discriminator 3)
            performance[i] = 0;
20401f6e:	800037b7          	lui	a5,0x80003
20401f72:	f1478713          	addi	a4,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
20401f76:	fe842783          	lw	a5,-24(s0)
20401f7a:	078a                	slli	a5,a5,0x2
20401f7c:	97ba                	add	a5,a5,a4
20401f7e:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:136 (discriminator 3)
        for (i = 0; i < REP; i++) {
20401f82:	fe842783          	lw	a5,-24(s0)
20401f86:	0785                	addi	a5,a5,1
20401f88:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:136 (discriminator 1)
20401f8c:	fe842703          	lw	a4,-24(s0)
20401f90:	47f5                	li	a5,29
20401f92:	fae7d4e3          	bge	a5,a4,20401f3a <main+0x858>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:122 (discriminator 2)
    for (int j = 0; j < 7; j++) {
20401f96:	fd442783          	lw	a5,-44(s0)
20401f9a:	0785                	addi	a5,a5,1
20401f9c:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:122 (discriminator 1)
20401fa0:	fd442703          	lw	a4,-44(s0)
20401fa4:	4799                	li	a5,6
20401fa6:	e8e7dae3          	bge	a5,a4,20401e3a <main+0x758>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:145
    }
    //// RANDOM



    printf("Random \n");
20401faa:	204077b7          	lui	a5,0x20407
20401fae:	fd878513          	addi	a0,a5,-40 # 20406fd8 <_exit+0xea>
20401fb2:	2ccd                	jal	204022a4 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:146
    for (int j = 0; j < 7; j++) {
20401fb4:	fc042823          	sw	zero,-48(s0)
20401fb8:	aa65                	j	20402170 <main+0xa8e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:147
        for (i = 0; i < REP; i++) {
20401fba:	fe042423          	sw	zero,-24(s0)
20401fbe:	a885                	j	2040202e <main+0x94c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:148
            start = rdcycle();
20401fc0:	f04ff0ef          	jal	ra,204016c4 <rdcycle>
20401fc4:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:149
            SEED();
20401fc8:	c48fe0ef          	jal	ra,20400410 <SEED>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:150
            if(bytesr[j]>0) RAND(plain_text,bytesr[j]);
20401fcc:	800007b7          	lui	a5,0x80000
20401fd0:	03c78713          	addi	a4,a5,60 # 8000003c <metal_segment_heap_target_end+0xffffc3a8>
20401fd4:	fd042783          	lw	a5,-48(s0)
20401fd8:	078a                	slli	a5,a5,0x2
20401fda:	97ba                	add	a5,a5,a4
20401fdc:	439c                	lw	a5,0(a5)
20401fde:	c38d                	beqz	a5,20402000 <main+0x91e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:150 (discriminator 1)
20401fe0:	800007b7          	lui	a5,0x80000
20401fe4:	03c78713          	addi	a4,a5,60 # 8000003c <metal_segment_heap_target_end+0xffffc3a8>
20401fe8:	fd042783          	lw	a5,-48(s0)
20401fec:	078a                	slli	a5,a5,0x2
20401fee:	97ba                	add	a5,a5,a4
20401ff0:	439c                	lw	a5,0(a5)
20401ff2:	85be                	mv	a1,a5
20401ff4:	800007b7          	lui	a5,0x80000
20401ff8:	7d478513          	addi	a0,a5,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20401ffc:	be2fe0ef          	jal	ra,204003de <RAND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:151 (discriminator 2)
            end = rdcycle();
20402000:	ec4ff0ef          	jal	ra,204016c4 <rdcycle>
20402004:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:152 (discriminator 2)
            performance[i] = end - start;
20402008:	fc842703          	lw	a4,-56(s0)
2040200c:	fcc42783          	lw	a5,-52(s0)
20402010:	8f1d                	sub	a4,a4,a5
20402012:	800037b7          	lui	a5,0x80003
20402016:	f1478693          	addi	a3,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
2040201a:	fe842783          	lw	a5,-24(s0)
2040201e:	078a                	slli	a5,a5,0x2
20402020:	97b6                	add	a5,a5,a3
20402022:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:147 (discriminator 2)
        for (i = 0; i < REP; i++) {
20402024:	fe842783          	lw	a5,-24(s0)
20402028:	0785                	addi	a5,a5,1
2040202a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:147 (discriminator 1)
2040202e:	fe842703          	lw	a4,-24(s0)
20402032:	47f5                	li	a5,29
20402034:	f8e7d6e3          	bge	a5,a4,20401fc0 <main+0x8de>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:156
        }
        ascon_state_t s;
        u64 seed;
        seed.xh = plain_text[0];
20402038:	800007b7          	lui	a5,0x80000
2040203c:	7d478793          	addi	a5,a5,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
20402040:	439c                	lw	a5,0(a5)
20402042:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:157
        seed.xl = plain_text[1];
20402046:	800007b7          	lui	a5,0x80000
2040204a:	7d478793          	addi	a5,a5,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
2040204e:	43dc                	lw	a5,4(a5)
20402050:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:158
        for (i = 0; i < REP; i++) {
20402054:	fe042423          	sw	zero,-24(s0)
20402058:	a051                	j	204020dc <main+0x9fa>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:159
            start = rdcycle();
2040205a:	e6aff0ef          	jal	ra,204016c4 <rdcycle>
2040205e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:160
            init_seed(&s,seed);
20402062:	f9440793          	addi	a5,s0,-108
20402066:	fbc42583          	lw	a1,-68(s0)
2040206a:	fc042603          	lw	a2,-64(s0)
2040206e:	853e                	mv	a0,a5
20402070:	d50ff0ef          	jal	ra,204015c0 <init_seed>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:161
            if(bytesr[j] > 0) rand_ascon(&s, plain_text,bytesr[j]);
20402074:	800007b7          	lui	a5,0x80000
20402078:	03c78713          	addi	a4,a5,60 # 8000003c <metal_segment_heap_target_end+0xffffc3a8>
2040207c:	fd042783          	lw	a5,-48(s0)
20402080:	078a                	slli	a5,a5,0x2
20402082:	97ba                	add	a5,a5,a4
20402084:	439c                	lw	a5,0(a5)
20402086:	c785                	beqz	a5,204020ae <main+0x9cc>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:161 (discriminator 1)
20402088:	800007b7          	lui	a5,0x80000
2040208c:	03c78713          	addi	a4,a5,60 # 8000003c <metal_segment_heap_target_end+0xffffc3a8>
20402090:	fd042783          	lw	a5,-48(s0)
20402094:	078a                	slli	a5,a5,0x2
20402096:	97ba                	add	a5,a5,a4
20402098:	439c                	lw	a5,0(a5)
2040209a:	f9440713          	addi	a4,s0,-108
2040209e:	863e                	mv	a2,a5
204020a0:	800007b7          	lui	a5,0x80000
204020a4:	7d478593          	addi	a1,a5,2004 # 800007d4 <metal_segment_heap_target_end+0xffffcb40>
204020a8:	853a                	mv	a0,a4
204020aa:	daaff0ef          	jal	ra,20401654 <rand_ascon>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:162 (discriminator 2)
            end = rdcycle();
204020ae:	e16ff0ef          	jal	ra,204016c4 <rdcycle>
204020b2:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:163 (discriminator 2)
            performance2[i] = end - start;
204020b6:	fc842703          	lw	a4,-56(s0)
204020ba:	fcc42783          	lw	a5,-52(s0)
204020be:	8f1d                	sub	a4,a4,a5
204020c0:	800037b7          	lui	a5,0x80003
204020c4:	f8c78693          	addi	a3,a5,-116 # 80002f8c <metal_segment_heap_target_end+0xfffff2f8>
204020c8:	fe842783          	lw	a5,-24(s0)
204020cc:	078a                	slli	a5,a5,0x2
204020ce:	97b6                	add	a5,a5,a3
204020d0:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:158 (discriminator 2)
        for (i = 0; i < REP; i++) {
204020d2:	fe842783          	lw	a5,-24(s0)
204020d6:	0785                	addi	a5,a5,1
204020d8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:158 (discriminator 1)
204020dc:	fe842703          	lw	a4,-24(s0)
204020e0:	47f5                	li	a5,29
204020e2:	f6e7dce3          	bge	a5,a4,2040205a <main+0x978>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:165
        }
        printf("RANDOM bytes %d \n", bytesr[j]);
204020e6:	800007b7          	lui	a5,0x80000
204020ea:	03c78713          	addi	a4,a5,60 # 8000003c <metal_segment_heap_target_end+0xffffc3a8>
204020ee:	fd042783          	lw	a5,-48(s0)
204020f2:	078a                	slli	a5,a5,0x2
204020f4:	97ba                	add	a5,a5,a4
204020f6:	439c                	lw	a5,0(a5)
204020f8:	85be                	mv	a1,a5
204020fa:	204077b7          	lui	a5,0x20407
204020fe:	fe078513          	addi	a0,a5,-32 # 20406fe0 <_exit+0xf2>
20402102:	2051                	jal	20402186 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:166
        for (i = 0; i < REP; i++) {
20402104:	fe042423          	sw	zero,-24(s0)
20402108:	a891                	j	2040215c <main+0xa7a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:167 (discriminator 3)
            printf("%d:   SWcycles : %u   HWcycles : %u\n", i, performance2[i], performance[i]);
2040210a:	800037b7          	lui	a5,0x80003
2040210e:	f8c78713          	addi	a4,a5,-116 # 80002f8c <metal_segment_heap_target_end+0xfffff2f8>
20402112:	fe842783          	lw	a5,-24(s0)
20402116:	078a                	slli	a5,a5,0x2
20402118:	97ba                	add	a5,a5,a4
2040211a:	4390                	lw	a2,0(a5)
2040211c:	800037b7          	lui	a5,0x80003
20402120:	f1478713          	addi	a4,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
20402124:	fe842783          	lw	a5,-24(s0)
20402128:	078a                	slli	a5,a5,0x2
2040212a:	97ba                	add	a5,a5,a4
2040212c:	439c                	lw	a5,0(a5)
2040212e:	86be                	mv	a3,a5
20402130:	fe842583          	lw	a1,-24(s0)
20402134:	204077b7          	lui	a5,0x20407
20402138:	f3078513          	addi	a0,a5,-208 # 20406f30 <_exit+0x42>
2040213c:	20a9                	jal	20402186 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:168 (discriminator 3)
            performance[i] = 0;
2040213e:	800037b7          	lui	a5,0x80003
20402142:	f1478713          	addi	a4,a5,-236 # 80002f14 <metal_segment_heap_target_end+0xfffff280>
20402146:	fe842783          	lw	a5,-24(s0)
2040214a:	078a                	slli	a5,a5,0x2
2040214c:	97ba                	add	a5,a5,a4
2040214e:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:166 (discriminator 3)
        for (i = 0; i < REP; i++) {
20402152:	fe842783          	lw	a5,-24(s0)
20402156:	0785                	addi	a5,a5,1
20402158:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:166 (discriminator 1)
2040215c:	fe842703          	lw	a4,-24(s0)
20402160:	47f5                	li	a5,29
20402162:	fae7d4e3          	bge	a5,a4,2040210a <main+0xa28>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:146 (discriminator 2)
    for (int j = 0; j < 7; j++) {
20402166:	fd042783          	lw	a5,-48(s0)
2040216a:	0785                	addi	a5,a5,1
2040216c:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:146 (discriminator 1)
20402170:	fd042703          	lw	a4,-48(s0)
20402174:	4799                	li	a5,6
20402176:	e4e7d2e3          	bge	a5,a4,20401fba <main+0x8d8>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:171
        }
    }
    return 0;
2040217a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_Test/Ascon_Test.c:172
2040217c:	853e                	mv	a0,a5
2040217e:	50b6                	lw	ra,108(sp)
20402180:	5426                	lw	s0,104(sp)
20402182:	6165                	addi	sp,sp,112
20402184:	8082                	ret

20402186 <iprintf>:
printf():
20402186:	7139                	addi	sp,sp,-64
20402188:	da3e                	sw	a5,52(sp)
2040218a:	d22e                	sw	a1,36(sp)
2040218c:	d432                	sw	a2,40(sp)
2040218e:	d636                	sw	a3,44(sp)
20402190:	d83a                	sw	a4,48(sp)
20402192:	dc42                	sw	a6,56(sp)
20402194:	de46                	sw	a7,60(sp)
20402196:	5fbfe797          	auipc	a5,0x5fbfe
2040219a:	60a78793          	addi	a5,a5,1546 # 800007a0 <_impure_ptr>
2040219e:	cc22                	sw	s0,24(sp)
204021a0:	4380                	lw	s0,0(a5)
204021a2:	ca26                	sw	s1,20(sp)
204021a4:	ce06                	sw	ra,28(sp)
204021a6:	84aa                	mv	s1,a0
204021a8:	c409                	beqz	s0,204021b2 <iprintf+0x2c>
204021aa:	4c1c                	lw	a5,24(s0)
204021ac:	e399                	bnez	a5,204021b2 <iprintf+0x2c>
204021ae:	8522                	mv	a0,s0
204021b0:	2b1d                	jal	204026e6 <__sinit>
204021b2:	440c                	lw	a1,8(s0)
204021b4:	1054                	addi	a3,sp,36
204021b6:	8626                	mv	a2,s1
204021b8:	8522                	mv	a0,s0
204021ba:	c636                	sw	a3,12(sp)
204021bc:	231000ef          	jal	ra,20402bec <_vfiprintf_r>
204021c0:	40f2                	lw	ra,28(sp)
204021c2:	4462                	lw	s0,24(sp)
204021c4:	44d2                	lw	s1,20(sp)
204021c6:	6121                	addi	sp,sp,64
204021c8:	8082                	ret

204021ca <_puts_r>:
_puts_r():
204021ca:	1101                	addi	sp,sp,-32
204021cc:	ca26                	sw	s1,20(sp)
204021ce:	c84a                	sw	s2,16(sp)
204021d0:	ce06                	sw	ra,28(sp)
204021d2:	cc22                	sw	s0,24(sp)
204021d4:	c64e                	sw	s3,12(sp)
204021d6:	c452                	sw	s4,8(sp)
204021d8:	84aa                	mv	s1,a0
204021da:	892e                	mv	s2,a1
204021dc:	c501                	beqz	a0,204021e4 <_puts_r+0x1a>
204021de:	4d1c                	lw	a5,24(a0)
204021e0:	e391                	bnez	a5,204021e4 <_puts_r+0x1a>
204021e2:	2311                	jal	204026e6 <__sinit>
204021e4:	4c9c                	lw	a5,24(s1)
204021e6:	4480                	lw	s0,8(s1)
204021e8:	e399                	bnez	a5,204021ee <_puts_r+0x24>
204021ea:	8526                	mv	a0,s1
204021ec:	29ed                	jal	204026e6 <__sinit>
204021ee:	00005797          	auipc	a5,0x5
204021f2:	e2678793          	addi	a5,a5,-474 # 20407014 <__sf_fake_stdin>
204021f6:	02f41c63          	bne	s0,a5,2040222e <_puts_r+0x64>
204021fa:	40c0                	lw	s0,4(s1)
204021fc:	00c45783          	lhu	a5,12(s0)
20402200:	8ba1                	andi	a5,a5,8
20402202:	c7b1                	beqz	a5,2040224e <_puts_r+0x84>
20402204:	481c                	lw	a5,16(s0)
20402206:	c7a1                	beqz	a5,2040224e <_puts_r+0x84>
20402208:	59fd                	li	s3,-1
2040220a:	4a29                	li	s4,10
2040220c:	441c                	lw	a5,8(s0)
2040220e:	00094583          	lbu	a1,0(s2)
20402212:	17fd                	addi	a5,a5,-1
20402214:	e9b1                	bnez	a1,20402268 <_puts_r+0x9e>
20402216:	c41c                	sw	a5,8(s0)
20402218:	0607de63          	bgez	a5,20402294 <_puts_r+0xca>
2040221c:	8622                	mv	a2,s0
2040221e:	45a9                	li	a1,10
20402220:	8526                	mv	a0,s1
20402222:	2841                	jal	204022b2 <__swbuf_r>
20402224:	57fd                	li	a5,-1
20402226:	02f50863          	beq	a0,a5,20402256 <_puts_r+0x8c>
2040222a:	4529                	li	a0,10
2040222c:	a035                	j	20402258 <_puts_r+0x8e>
2040222e:	00005797          	auipc	a5,0x5
20402232:	e0678793          	addi	a5,a5,-506 # 20407034 <__sf_fake_stdout>
20402236:	00f41463          	bne	s0,a5,2040223e <_puts_r+0x74>
2040223a:	4480                	lw	s0,8(s1)
2040223c:	b7c1                	j	204021fc <_puts_r+0x32>
2040223e:	00005797          	auipc	a5,0x5
20402242:	db678793          	addi	a5,a5,-586 # 20406ff4 <__sf_fake_stderr>
20402246:	faf41be3          	bne	s0,a5,204021fc <_puts_r+0x32>
2040224a:	44c0                	lw	s0,12(s1)
2040224c:	bf45                	j	204021fc <_puts_r+0x32>
2040224e:	85a2                	mv	a1,s0
20402250:	8526                	mv	a0,s1
20402252:	2205                	jal	20402372 <__swsetup_r>
20402254:	d955                	beqz	a0,20402208 <_puts_r+0x3e>
20402256:	557d                	li	a0,-1
20402258:	40f2                	lw	ra,28(sp)
2040225a:	4462                	lw	s0,24(sp)
2040225c:	44d2                	lw	s1,20(sp)
2040225e:	4942                	lw	s2,16(sp)
20402260:	49b2                	lw	s3,12(sp)
20402262:	4a22                	lw	s4,8(sp)
20402264:	6105                	addi	sp,sp,32
20402266:	8082                	ret
20402268:	c41c                	sw	a5,8(s0)
2040226a:	0905                	addi	s2,s2,1
2040226c:	0007d763          	bgez	a5,2040227a <_puts_r+0xb0>
20402270:	4c18                	lw	a4,24(s0)
20402272:	00e7cb63          	blt	a5,a4,20402288 <_puts_r+0xbe>
20402276:	01458963          	beq	a1,s4,20402288 <_puts_r+0xbe>
2040227a:	401c                	lw	a5,0(s0)
2040227c:	00178713          	addi	a4,a5,1
20402280:	c018                	sw	a4,0(s0)
20402282:	00b78023          	sb	a1,0(a5)
20402286:	b759                	j	2040220c <_puts_r+0x42>
20402288:	8622                	mv	a2,s0
2040228a:	8526                	mv	a0,s1
2040228c:	201d                	jal	204022b2 <__swbuf_r>
2040228e:	f7351fe3          	bne	a0,s3,2040220c <_puts_r+0x42>
20402292:	b7d1                	j	20402256 <_puts_r+0x8c>
20402294:	401c                	lw	a5,0(s0)
20402296:	00178713          	addi	a4,a5,1
2040229a:	c018                	sw	a4,0(s0)
2040229c:	4729                	li	a4,10
2040229e:	00e78023          	sb	a4,0(a5)
204022a2:	b761                	j	2040222a <_puts_r+0x60>

204022a4 <puts>:
puts():
204022a4:	5fbfe797          	auipc	a5,0x5fbfe
204022a8:	4fc78793          	addi	a5,a5,1276 # 800007a0 <_impure_ptr>
204022ac:	85aa                	mv	a1,a0
204022ae:	4388                	lw	a0,0(a5)
204022b0:	bf29                	j	204021ca <_puts_r>

204022b2 <__swbuf_r>:
__swbuf_r():
204022b2:	1101                	addi	sp,sp,-32
204022b4:	cc22                	sw	s0,24(sp)
204022b6:	ca26                	sw	s1,20(sp)
204022b8:	c84a                	sw	s2,16(sp)
204022ba:	ce06                	sw	ra,28(sp)
204022bc:	c64e                	sw	s3,12(sp)
204022be:	84aa                	mv	s1,a0
204022c0:	892e                	mv	s2,a1
204022c2:	8432                	mv	s0,a2
204022c4:	c501                	beqz	a0,204022cc <__swbuf_r+0x1a>
204022c6:	4d1c                	lw	a5,24(a0)
204022c8:	e391                	bnez	a5,204022cc <__swbuf_r+0x1a>
204022ca:	2931                	jal	204026e6 <__sinit>
204022cc:	00005797          	auipc	a5,0x5
204022d0:	d4878793          	addi	a5,a5,-696 # 20407014 <__sf_fake_stdin>
204022d4:	06f41963          	bne	s0,a5,20402346 <__swbuf_r+0x94>
204022d8:	40c0                	lw	s0,4(s1)
204022da:	4c1c                	lw	a5,24(s0)
204022dc:	c41c                	sw	a5,8(s0)
204022de:	00c45783          	lhu	a5,12(s0)
204022e2:	8ba1                	andi	a5,a5,8
204022e4:	c3c9                	beqz	a5,20402366 <__swbuf_r+0xb4>
204022e6:	481c                	lw	a5,16(s0)
204022e8:	cfbd                	beqz	a5,20402366 <__swbuf_r+0xb4>
204022ea:	481c                	lw	a5,16(s0)
204022ec:	4008                	lw	a0,0(s0)
204022ee:	0ff97993          	andi	s3,s2,255
204022f2:	0ff97913          	andi	s2,s2,255
204022f6:	8d1d                	sub	a0,a0,a5
204022f8:	485c                	lw	a5,20(s0)
204022fa:	00f54663          	blt	a0,a5,20402306 <__swbuf_r+0x54>
204022fe:	85a2                	mv	a1,s0
20402300:	8526                	mv	a0,s1
20402302:	24e9                	jal	204025cc <_fflush_r>
20402304:	e52d                	bnez	a0,2040236e <__swbuf_r+0xbc>
20402306:	441c                	lw	a5,8(s0)
20402308:	0505                	addi	a0,a0,1
2040230a:	17fd                	addi	a5,a5,-1
2040230c:	c41c                	sw	a5,8(s0)
2040230e:	401c                	lw	a5,0(s0)
20402310:	00178713          	addi	a4,a5,1
20402314:	c018                	sw	a4,0(s0)
20402316:	01378023          	sb	s3,0(a5)
2040231a:	485c                	lw	a5,20(s0)
2040231c:	00a78963          	beq	a5,a0,2040232e <__swbuf_r+0x7c>
20402320:	00c45783          	lhu	a5,12(s0)
20402324:	8b85                	andi	a5,a5,1
20402326:	cb81                	beqz	a5,20402336 <__swbuf_r+0x84>
20402328:	47a9                	li	a5,10
2040232a:	00f91663          	bne	s2,a5,20402336 <__swbuf_r+0x84>
2040232e:	85a2                	mv	a1,s0
20402330:	8526                	mv	a0,s1
20402332:	2c69                	jal	204025cc <_fflush_r>
20402334:	ed0d                	bnez	a0,2040236e <__swbuf_r+0xbc>
20402336:	40f2                	lw	ra,28(sp)
20402338:	4462                	lw	s0,24(sp)
2040233a:	854a                	mv	a0,s2
2040233c:	44d2                	lw	s1,20(sp)
2040233e:	4942                	lw	s2,16(sp)
20402340:	49b2                	lw	s3,12(sp)
20402342:	6105                	addi	sp,sp,32
20402344:	8082                	ret
20402346:	00005797          	auipc	a5,0x5
2040234a:	cee78793          	addi	a5,a5,-786 # 20407034 <__sf_fake_stdout>
2040234e:	00f41463          	bne	s0,a5,20402356 <__swbuf_r+0xa4>
20402352:	4480                	lw	s0,8(s1)
20402354:	b759                	j	204022da <__swbuf_r+0x28>
20402356:	00005797          	auipc	a5,0x5
2040235a:	c9e78793          	addi	a5,a5,-866 # 20406ff4 <__sf_fake_stderr>
2040235e:	f6f41ee3          	bne	s0,a5,204022da <__swbuf_r+0x28>
20402362:	44c0                	lw	s0,12(s1)
20402364:	bf9d                	j	204022da <__swbuf_r+0x28>
20402366:	85a2                	mv	a1,s0
20402368:	8526                	mv	a0,s1
2040236a:	2021                	jal	20402372 <__swsetup_r>
2040236c:	dd3d                	beqz	a0,204022ea <__swbuf_r+0x38>
2040236e:	597d                	li	s2,-1
20402370:	b7d9                	j	20402336 <__swbuf_r+0x84>

20402372 <__swsetup_r>:
__swsetup_r():
20402372:	1141                	addi	sp,sp,-16
20402374:	5fbfe797          	auipc	a5,0x5fbfe
20402378:	42c78793          	addi	a5,a5,1068 # 800007a0 <_impure_ptr>
2040237c:	c226                	sw	s1,4(sp)
2040237e:	4384                	lw	s1,0(a5)
20402380:	c422                	sw	s0,8(sp)
20402382:	c04a                	sw	s2,0(sp)
20402384:	c606                	sw	ra,12(sp)
20402386:	892a                	mv	s2,a0
20402388:	842e                	mv	s0,a1
2040238a:	c489                	beqz	s1,20402394 <__swsetup_r+0x22>
2040238c:	4c9c                	lw	a5,24(s1)
2040238e:	e399                	bnez	a5,20402394 <__swsetup_r+0x22>
20402390:	8526                	mv	a0,s1
20402392:	2e91                	jal	204026e6 <__sinit>
20402394:	00005797          	auipc	a5,0x5
20402398:	c8078793          	addi	a5,a5,-896 # 20407014 <__sf_fake_stdin>
2040239c:	02f41c63          	bne	s0,a5,204023d4 <__swsetup_r+0x62>
204023a0:	40c0                	lw	s0,4(s1)
204023a2:	00c41703          	lh	a4,12(s0)
204023a6:	01071793          	slli	a5,a4,0x10
204023aa:	83c1                	srli	a5,a5,0x10
204023ac:	0087f693          	andi	a3,a5,8
204023b0:	eeb5                	bnez	a3,2040242c <__swsetup_r+0xba>
204023b2:	0107f693          	andi	a3,a5,16
204023b6:	ee9d                	bnez	a3,204023f4 <__swsetup_r+0x82>
204023b8:	47a5                	li	a5,9
204023ba:	00f92023          	sw	a5,0(s2)
204023be:	04076713          	ori	a4,a4,64
204023c2:	00e41623          	sh	a4,12(s0)
204023c6:	557d                	li	a0,-1
204023c8:	40b2                	lw	ra,12(sp)
204023ca:	4422                	lw	s0,8(sp)
204023cc:	4492                	lw	s1,4(sp)
204023ce:	4902                	lw	s2,0(sp)
204023d0:	0141                	addi	sp,sp,16
204023d2:	8082                	ret
204023d4:	00005797          	auipc	a5,0x5
204023d8:	c6078793          	addi	a5,a5,-928 # 20407034 <__sf_fake_stdout>
204023dc:	00f41463          	bne	s0,a5,204023e4 <__swsetup_r+0x72>
204023e0:	4480                	lw	s0,8(s1)
204023e2:	b7c1                	j	204023a2 <__swsetup_r+0x30>
204023e4:	00005797          	auipc	a5,0x5
204023e8:	c1078793          	addi	a5,a5,-1008 # 20406ff4 <__sf_fake_stderr>
204023ec:	faf41be3          	bne	s0,a5,204023a2 <__swsetup_r+0x30>
204023f0:	44c0                	lw	s0,12(s1)
204023f2:	bf45                	j	204023a2 <__swsetup_r+0x30>
204023f4:	8b91                	andi	a5,a5,4
204023f6:	c78d                	beqz	a5,20402420 <__swsetup_r+0xae>
204023f8:	584c                	lw	a1,52(s0)
204023fa:	c989                	beqz	a1,2040240c <__swsetup_r+0x9a>
204023fc:	04440793          	addi	a5,s0,68
20402400:	00f58463          	beq	a1,a5,20402408 <__swsetup_r+0x96>
20402404:	854a                	mv	a0,s2
20402406:	2bc5                	jal	204029f6 <_free_r>
20402408:	02042a23          	sw	zero,52(s0)
2040240c:	00c45783          	lhu	a5,12(s0)
20402410:	00042223          	sw	zero,4(s0)
20402414:	fdb7f793          	andi	a5,a5,-37
20402418:	00f41623          	sh	a5,12(s0)
2040241c:	481c                	lw	a5,16(s0)
2040241e:	c01c                	sw	a5,0(s0)
20402420:	00c45783          	lhu	a5,12(s0)
20402424:	0087e793          	ori	a5,a5,8
20402428:	00f41623          	sh	a5,12(s0)
2040242c:	481c                	lw	a5,16(s0)
2040242e:	ef81                	bnez	a5,20402446 <__swsetup_r+0xd4>
20402430:	00c45783          	lhu	a5,12(s0)
20402434:	20000713          	li	a4,512
20402438:	2807f793          	andi	a5,a5,640
2040243c:	00e78563          	beq	a5,a4,20402446 <__swsetup_r+0xd4>
20402440:	85a2                	mv	a1,s0
20402442:	854a                	mv	a0,s2
20402444:	21bd                	jal	204028b2 <__smakebuf_r>
20402446:	00c45783          	lhu	a5,12(s0)
2040244a:	0017f713          	andi	a4,a5,1
2040244e:	c705                	beqz	a4,20402476 <__swsetup_r+0x104>
20402450:	485c                	lw	a5,20(s0)
20402452:	00042423          	sw	zero,8(s0)
20402456:	40f007b3          	neg	a5,a5
2040245a:	cc1c                	sw	a5,24(s0)
2040245c:	481c                	lw	a5,16(s0)
2040245e:	4501                	li	a0,0
20402460:	f7a5                	bnez	a5,204023c8 <__swsetup_r+0x56>
20402462:	00c41783          	lh	a5,12(s0)
20402466:	0807f713          	andi	a4,a5,128
2040246a:	df39                	beqz	a4,204023c8 <__swsetup_r+0x56>
2040246c:	0407e793          	ori	a5,a5,64
20402470:	00f41623          	sh	a5,12(s0)
20402474:	bf89                	j	204023c6 <__swsetup_r+0x54>
20402476:	8b89                	andi	a5,a5,2
20402478:	4701                	li	a4,0
2040247a:	e391                	bnez	a5,2040247e <__swsetup_r+0x10c>
2040247c:	4858                	lw	a4,20(s0)
2040247e:	c418                	sw	a4,8(s0)
20402480:	bff1                	j	2040245c <__swsetup_r+0xea>

20402482 <__sflush_r>:
__sflush_r():
20402482:	00c5d783          	lhu	a5,12(a1)
20402486:	1101                	addi	sp,sp,-32
20402488:	cc22                	sw	s0,24(sp)
2040248a:	ca26                	sw	s1,20(sp)
2040248c:	ce06                	sw	ra,28(sp)
2040248e:	c84a                	sw	s2,16(sp)
20402490:	c64e                	sw	s3,12(sp)
20402492:	0087f713          	andi	a4,a5,8
20402496:	84aa                	mv	s1,a0
20402498:	842e                	mv	s0,a1
2040249a:	e765                	bnez	a4,20402582 <__sflush_r+0x100>
2040249c:	41d8                	lw	a4,4(a1)
2040249e:	00e04763          	bgtz	a4,204024ac <__sflush_r+0x2a>
204024a2:	41b8                	lw	a4,64(a1)
204024a4:	00e04463          	bgtz	a4,204024ac <__sflush_r+0x2a>
204024a8:	4501                	li	a0,0
204024aa:	a0c1                	j	2040256a <__sflush_r+0xe8>
204024ac:	5458                	lw	a4,44(s0)
204024ae:	df6d                	beqz	a4,204024a8 <__sflush_r+0x26>
204024b0:	0004a903          	lw	s2,0(s1)
204024b4:	01379693          	slli	a3,a5,0x13
204024b8:	0004a023          	sw	zero,0(s1)
204024bc:	0606de63          	bgez	a3,20402538 <__sflush_r+0xb6>
204024c0:	4868                	lw	a0,84(s0)
204024c2:	00c45783          	lhu	a5,12(s0)
204024c6:	8b91                	andi	a5,a5,4
204024c8:	c799                	beqz	a5,204024d6 <__sflush_r+0x54>
204024ca:	405c                	lw	a5,4(s0)
204024cc:	8d1d                	sub	a0,a0,a5
204024ce:	585c                	lw	a5,52(s0)
204024d0:	c399                	beqz	a5,204024d6 <__sflush_r+0x54>
204024d2:	403c                	lw	a5,64(s0)
204024d4:	8d1d                	sub	a0,a0,a5
204024d6:	545c                	lw	a5,44(s0)
204024d8:	500c                	lw	a1,32(s0)
204024da:	862a                	mv	a2,a0
204024dc:	4681                	li	a3,0
204024de:	8526                	mv	a0,s1
204024e0:	9782                	jalr	a5
204024e2:	57fd                	li	a5,-1
204024e4:	00c45703          	lhu	a4,12(s0)
204024e8:	00f51d63          	bne	a0,a5,20402502 <__sflush_r+0x80>
204024ec:	4094                	lw	a3,0(s1)
204024ee:	47f5                	li	a5,29
204024f0:	08d7e463          	bltu	a5,a3,20402578 <__sflush_r+0xf6>
204024f4:	204007b7          	lui	a5,0x20400
204024f8:	0785                	addi	a5,a5,1
204024fa:	00d7d7b3          	srl	a5,a5,a3
204024fe:	8b85                	andi	a5,a5,1
20402500:	cfa5                	beqz	a5,20402578 <__sflush_r+0xf6>
20402502:	481c                	lw	a5,16(s0)
20402504:	00042223          	sw	zero,4(s0)
20402508:	c01c                	sw	a5,0(s0)
2040250a:	01371793          	slli	a5,a4,0x13
2040250e:	0007d863          	bgez	a5,2040251e <__sflush_r+0x9c>
20402512:	57fd                	li	a5,-1
20402514:	00f51463          	bne	a0,a5,2040251c <__sflush_r+0x9a>
20402518:	409c                	lw	a5,0(s1)
2040251a:	e391                	bnez	a5,2040251e <__sflush_r+0x9c>
2040251c:	c868                	sw	a0,84(s0)
2040251e:	584c                	lw	a1,52(s0)
20402520:	0124a023          	sw	s2,0(s1)
20402524:	d1d1                	beqz	a1,204024a8 <__sflush_r+0x26>
20402526:	04440793          	addi	a5,s0,68
2040252a:	00f58463          	beq	a1,a5,20402532 <__sflush_r+0xb0>
2040252e:	8526                	mv	a0,s1
20402530:	21d9                	jal	204029f6 <_free_r>
20402532:	02042a23          	sw	zero,52(s0)
20402536:	bf8d                	j	204024a8 <__sflush_r+0x26>
20402538:	500c                	lw	a1,32(s0)
2040253a:	4685                	li	a3,1
2040253c:	4601                	li	a2,0
2040253e:	8526                	mv	a0,s1
20402540:	9702                	jalr	a4
20402542:	57fd                	li	a5,-1
20402544:	f6f51fe3          	bne	a0,a5,204024c2 <__sflush_r+0x40>
20402548:	409c                	lw	a5,0(s1)
2040254a:	dfa5                	beqz	a5,204024c2 <__sflush_r+0x40>
2040254c:	4775                	li	a4,29
2040254e:	00e78563          	beq	a5,a4,20402558 <__sflush_r+0xd6>
20402552:	4759                	li	a4,22
20402554:	00e79563          	bne	a5,a4,2040255e <__sflush_r+0xdc>
20402558:	0124a023          	sw	s2,0(s1)
2040255c:	b7b1                	j	204024a8 <__sflush_r+0x26>
2040255e:	00c45783          	lhu	a5,12(s0)
20402562:	0407e793          	ori	a5,a5,64
20402566:	00f41623          	sh	a5,12(s0)
2040256a:	40f2                	lw	ra,28(sp)
2040256c:	4462                	lw	s0,24(sp)
2040256e:	44d2                	lw	s1,20(sp)
20402570:	4942                	lw	s2,16(sp)
20402572:	49b2                	lw	s3,12(sp)
20402574:	6105                	addi	sp,sp,32
20402576:	8082                	ret
20402578:	04076713          	ori	a4,a4,64
2040257c:	00e41623          	sh	a4,12(s0)
20402580:	b7ed                	j	2040256a <__sflush_r+0xe8>
20402582:	0105a983          	lw	s3,16(a1)
20402586:	f20981e3          	beqz	s3,204024a8 <__sflush_r+0x26>
2040258a:	0005a903          	lw	s2,0(a1)
2040258e:	8b8d                	andi	a5,a5,3
20402590:	0135a023          	sw	s3,0(a1)
20402594:	41390933          	sub	s2,s2,s3
20402598:	4701                	li	a4,0
2040259a:	e391                	bnez	a5,2040259e <__sflush_r+0x11c>
2040259c:	49d8                	lw	a4,20(a1)
2040259e:	c418                	sw	a4,8(s0)
204025a0:	f12054e3          	blez	s2,204024a8 <__sflush_r+0x26>
204025a4:	541c                	lw	a5,40(s0)
204025a6:	500c                	lw	a1,32(s0)
204025a8:	86ca                	mv	a3,s2
204025aa:	864e                	mv	a2,s3
204025ac:	8526                	mv	a0,s1
204025ae:	9782                	jalr	a5
204025b0:	00a04a63          	bgtz	a0,204025c4 <__sflush_r+0x142>
204025b4:	00c45783          	lhu	a5,12(s0)
204025b8:	557d                	li	a0,-1
204025ba:	0407e793          	ori	a5,a5,64
204025be:	00f41623          	sh	a5,12(s0)
204025c2:	b765                	j	2040256a <__sflush_r+0xe8>
204025c4:	99aa                	add	s3,s3,a0
204025c6:	40a90933          	sub	s2,s2,a0
204025ca:	bfd9                	j	204025a0 <__sflush_r+0x11e>

204025cc <_fflush_r>:
_fflush_r():
204025cc:	499c                	lw	a5,16(a1)
204025ce:	cfb9                	beqz	a5,2040262c <_fflush_r+0x60>
204025d0:	1101                	addi	sp,sp,-32
204025d2:	cc22                	sw	s0,24(sp)
204025d4:	ce06                	sw	ra,28(sp)
204025d6:	842a                	mv	s0,a0
204025d8:	c511                	beqz	a0,204025e4 <_fflush_r+0x18>
204025da:	4d1c                	lw	a5,24(a0)
204025dc:	e781                	bnez	a5,204025e4 <_fflush_r+0x18>
204025de:	c62e                	sw	a1,12(sp)
204025e0:	2219                	jal	204026e6 <__sinit>
204025e2:	45b2                	lw	a1,12(sp)
204025e4:	00005797          	auipc	a5,0x5
204025e8:	a3078793          	addi	a5,a5,-1488 # 20407014 <__sf_fake_stdin>
204025ec:	00f59b63          	bne	a1,a5,20402602 <_fflush_r+0x36>
204025f0:	404c                	lw	a1,4(s0)
204025f2:	00c59783          	lh	a5,12(a1)
204025f6:	c795                	beqz	a5,20402622 <_fflush_r+0x56>
204025f8:	8522                	mv	a0,s0
204025fa:	4462                	lw	s0,24(sp)
204025fc:	40f2                	lw	ra,28(sp)
204025fe:	6105                	addi	sp,sp,32
20402600:	b549                	j	20402482 <__sflush_r>
20402602:	00005797          	auipc	a5,0x5
20402606:	a3278793          	addi	a5,a5,-1486 # 20407034 <__sf_fake_stdout>
2040260a:	00f59463          	bne	a1,a5,20402612 <_fflush_r+0x46>
2040260e:	440c                	lw	a1,8(s0)
20402610:	b7cd                	j	204025f2 <_fflush_r+0x26>
20402612:	00005797          	auipc	a5,0x5
20402616:	9e278793          	addi	a5,a5,-1566 # 20406ff4 <__sf_fake_stderr>
2040261a:	fcf59ce3          	bne	a1,a5,204025f2 <_fflush_r+0x26>
2040261e:	444c                	lw	a1,12(s0)
20402620:	bfc9                	j	204025f2 <_fflush_r+0x26>
20402622:	40f2                	lw	ra,28(sp)
20402624:	4462                	lw	s0,24(sp)
20402626:	4501                	li	a0,0
20402628:	6105                	addi	sp,sp,32
2040262a:	8082                	ret
2040262c:	4501                	li	a0,0
2040262e:	8082                	ret

20402630 <std>:
std():
20402630:	1141                	addi	sp,sp,-16
20402632:	c422                	sw	s0,8(sp)
20402634:	c606                	sw	ra,12(sp)
20402636:	842a                	mv	s0,a0
20402638:	00b51623          	sh	a1,12(a0)
2040263c:	00c51723          	sh	a2,14(a0)
20402640:	00052023          	sw	zero,0(a0)
20402644:	00052223          	sw	zero,4(a0)
20402648:	00052423          	sw	zero,8(a0)
2040264c:	06052223          	sw	zero,100(a0)
20402650:	00052823          	sw	zero,16(a0)
20402654:	00052a23          	sw	zero,20(a0)
20402658:	00052c23          	sw	zero,24(a0)
2040265c:	4621                	li	a2,8
2040265e:	4581                	li	a1,0
20402660:	05c50513          	addi	a0,a0,92
20402664:	24ed                	jal	2040294e <memset>
20402666:	00001797          	auipc	a5,0x1
2040266a:	85078793          	addi	a5,a5,-1968 # 20402eb6 <__sread>
2040266e:	d05c                	sw	a5,36(s0)
20402670:	00001797          	auipc	a5,0x1
20402674:	87678793          	addi	a5,a5,-1930 # 20402ee6 <__swrite>
20402678:	d41c                	sw	a5,40(s0)
2040267a:	00001797          	auipc	a5,0x1
2040267e:	8ba78793          	addi	a5,a5,-1862 # 20402f34 <__sseek>
20402682:	d45c                	sw	a5,44(s0)
20402684:	00001797          	auipc	a5,0x1
20402688:	8e678793          	addi	a5,a5,-1818 # 20402f6a <__sclose>
2040268c:	d000                	sw	s0,32(s0)
2040268e:	d81c                	sw	a5,48(s0)
20402690:	40b2                	lw	ra,12(sp)
20402692:	4422                	lw	s0,8(sp)
20402694:	0141                	addi	sp,sp,16
20402696:	8082                	ret

20402698 <_cleanup_r>:
_cleanup_r():
20402698:	00000597          	auipc	a1,0x0
2040269c:	f3458593          	addi	a1,a1,-204 # 204025cc <_fflush_r>
204026a0:	a2b9                	j	204027ee <_fwalk_reent>

204026a2 <__sfmoreglue>:
__sfmoreglue():
204026a2:	1141                	addi	sp,sp,-16
204026a4:	c226                	sw	s1,4(sp)
204026a6:	06800613          	li	a2,104
204026aa:	fff58493          	addi	s1,a1,-1
204026ae:	02c484b3          	mul	s1,s1,a2
204026b2:	c04a                	sw	s2,0(sp)
204026b4:	892e                	mv	s2,a1
204026b6:	c422                	sw	s0,8(sp)
204026b8:	c606                	sw	ra,12(sp)
204026ba:	07448593          	addi	a1,s1,116
204026be:	26d5                	jal	20402aa2 <_malloc_r>
204026c0:	842a                	mv	s0,a0
204026c2:	c919                	beqz	a0,204026d8 <__sfmoreglue+0x36>
204026c4:	00052023          	sw	zero,0(a0)
204026c8:	01252223          	sw	s2,4(a0)
204026cc:	0531                	addi	a0,a0,12
204026ce:	c408                	sw	a0,8(s0)
204026d0:	06848613          	addi	a2,s1,104
204026d4:	4581                	li	a1,0
204026d6:	2ca5                	jal	2040294e <memset>
204026d8:	8522                	mv	a0,s0
204026da:	40b2                	lw	ra,12(sp)
204026dc:	4422                	lw	s0,8(sp)
204026de:	4492                	lw	s1,4(sp)
204026e0:	4902                	lw	s2,0(sp)
204026e2:	0141                	addi	sp,sp,16
204026e4:	8082                	ret

204026e6 <__sinit>:
__sinit():
204026e6:	4d1c                	lw	a5,24(a0)
204026e8:	e3bd                	bnez	a5,2040274e <__sinit+0x68>
204026ea:	1141                	addi	sp,sp,-16
204026ec:	c606                	sw	ra,12(sp)
204026ee:	c422                	sw	s0,8(sp)
204026f0:	00000797          	auipc	a5,0x0
204026f4:	fa878793          	addi	a5,a5,-88 # 20402698 <_cleanup_r>
204026f8:	d51c                	sw	a5,40(a0)
204026fa:	5fbfe797          	auipc	a5,0x5fbfe
204026fe:	0aa78793          	addi	a5,a5,170 # 800007a4 <_global_impure_ptr>
20402702:	439c                	lw	a5,0(a5)
20402704:	04052423          	sw	zero,72(a0)
20402708:	04052623          	sw	zero,76(a0)
2040270c:	04052823          	sw	zero,80(a0)
20402710:	00f51463          	bne	a0,a5,20402718 <__sinit+0x32>
20402714:	4785                	li	a5,1
20402716:	cd1c                	sw	a5,24(a0)
20402718:	842a                	mv	s0,a0
2040271a:	281d                	jal	20402750 <__sfp>
2040271c:	c048                	sw	a0,4(s0)
2040271e:	8522                	mv	a0,s0
20402720:	2805                	jal	20402750 <__sfp>
20402722:	c408                	sw	a0,8(s0)
20402724:	8522                	mv	a0,s0
20402726:	202d                	jal	20402750 <__sfp>
20402728:	c448                	sw	a0,12(s0)
2040272a:	4048                	lw	a0,4(s0)
2040272c:	4601                	li	a2,0
2040272e:	4591                	li	a1,4
20402730:	3701                	jal	20402630 <std>
20402732:	4408                	lw	a0,8(s0)
20402734:	4605                	li	a2,1
20402736:	45a5                	li	a1,9
20402738:	3de5                	jal	20402630 <std>
2040273a:	4448                	lw	a0,12(s0)
2040273c:	4609                	li	a2,2
2040273e:	45c9                	li	a1,18
20402740:	3dc5                	jal	20402630 <std>
20402742:	4785                	li	a5,1
20402744:	cc1c                	sw	a5,24(s0)
20402746:	40b2                	lw	ra,12(sp)
20402748:	4422                	lw	s0,8(sp)
2040274a:	0141                	addi	sp,sp,16
2040274c:	8082                	ret
2040274e:	8082                	ret

20402750 <__sfp>:
__sfp():
20402750:	1141                	addi	sp,sp,-16
20402752:	5fbfe797          	auipc	a5,0x5fbfe
20402756:	05278793          	addi	a5,a5,82 # 800007a4 <_global_impure_ptr>
2040275a:	c226                	sw	s1,4(sp)
2040275c:	4384                	lw	s1,0(a5)
2040275e:	c04a                	sw	s2,0(sp)
20402760:	c606                	sw	ra,12(sp)
20402762:	4c9c                	lw	a5,24(s1)
20402764:	c422                	sw	s0,8(sp)
20402766:	892a                	mv	s2,a0
20402768:	e399                	bnez	a5,2040276e <__sfp+0x1e>
2040276a:	8526                	mv	a0,s1
2040276c:	3fad                	jal	204026e6 <__sinit>
2040276e:	04848493          	addi	s1,s1,72
20402772:	4480                	lw	s0,8(s1)
20402774:	40dc                	lw	a5,4(s1)
20402776:	17fd                	addi	a5,a5,-1
20402778:	0007d663          	bgez	a5,20402784 <__sfp+0x34>
2040277c:	409c                	lw	a5,0(s1)
2040277e:	cfb1                	beqz	a5,204027da <__sfp+0x8a>
20402780:	4084                	lw	s1,0(s1)
20402782:	bfc5                	j	20402772 <__sfp+0x22>
20402784:	00c41703          	lh	a4,12(s0)
20402788:	e731                	bnez	a4,204027d4 <__sfp+0x84>
2040278a:	77c1                	lui	a5,0xffff0
2040278c:	0785                	addi	a5,a5,1
2040278e:	06042223          	sw	zero,100(s0)
20402792:	00042023          	sw	zero,0(s0)
20402796:	00042223          	sw	zero,4(s0)
2040279a:	00042423          	sw	zero,8(s0)
2040279e:	c45c                	sw	a5,12(s0)
204027a0:	00042823          	sw	zero,16(s0)
204027a4:	00042a23          	sw	zero,20(s0)
204027a8:	00042c23          	sw	zero,24(s0)
204027ac:	4621                	li	a2,8
204027ae:	4581                	li	a1,0
204027b0:	05c40513          	addi	a0,s0,92
204027b4:	2a69                	jal	2040294e <memset>
204027b6:	02042a23          	sw	zero,52(s0)
204027ba:	02042c23          	sw	zero,56(s0)
204027be:	04042423          	sw	zero,72(s0)
204027c2:	04042623          	sw	zero,76(s0)
204027c6:	8522                	mv	a0,s0
204027c8:	40b2                	lw	ra,12(sp)
204027ca:	4422                	lw	s0,8(sp)
204027cc:	4492                	lw	s1,4(sp)
204027ce:	4902                	lw	s2,0(sp)
204027d0:	0141                	addi	sp,sp,16
204027d2:	8082                	ret
204027d4:	06840413          	addi	s0,s0,104
204027d8:	bf79                	j	20402776 <__sfp+0x26>
204027da:	4591                	li	a1,4
204027dc:	854a                	mv	a0,s2
204027de:	35d1                	jal	204026a2 <__sfmoreglue>
204027e0:	c088                	sw	a0,0(s1)
204027e2:	842a                	mv	s0,a0
204027e4:	fd51                	bnez	a0,20402780 <__sfp+0x30>
204027e6:	47b1                	li	a5,12
204027e8:	00f92023          	sw	a5,0(s2)
204027ec:	bfe9                	j	204027c6 <__sfp+0x76>

204027ee <_fwalk_reent>:
_fwalk_reent():
204027ee:	7179                	addi	sp,sp,-48
204027f0:	d422                	sw	s0,40(sp)
204027f2:	d04a                	sw	s2,32(sp)
204027f4:	cc52                	sw	s4,24(sp)
204027f6:	ca56                	sw	s5,20(sp)
204027f8:	c85a                	sw	s6,16(sp)
204027fa:	c65e                	sw	s7,12(sp)
204027fc:	d606                	sw	ra,44(sp)
204027fe:	d226                	sw	s1,36(sp)
20402800:	ce4e                	sw	s3,28(sp)
20402802:	8a2a                	mv	s4,a0
20402804:	8aae                	mv	s5,a1
20402806:	04850413          	addi	s0,a0,72
2040280a:	4901                	li	s2,0
2040280c:	4b05                	li	s6,1
2040280e:	5bfd                	li	s7,-1
20402810:	ec09                	bnez	s0,2040282a <_fwalk_reent+0x3c>
20402812:	50b2                	lw	ra,44(sp)
20402814:	5422                	lw	s0,40(sp)
20402816:	854a                	mv	a0,s2
20402818:	5492                	lw	s1,36(sp)
2040281a:	5902                	lw	s2,32(sp)
2040281c:	49f2                	lw	s3,28(sp)
2040281e:	4a62                	lw	s4,24(sp)
20402820:	4ad2                	lw	s5,20(sp)
20402822:	4b42                	lw	s6,16(sp)
20402824:	4bb2                	lw	s7,12(sp)
20402826:	6145                	addi	sp,sp,48
20402828:	8082                	ret
2040282a:	4404                	lw	s1,8(s0)
2040282c:	00442983          	lw	s3,4(s0)
20402830:	19fd                	addi	s3,s3,-1
20402832:	0009d463          	bgez	s3,2040283a <_fwalk_reent+0x4c>
20402836:	4000                	lw	s0,0(s0)
20402838:	bfe1                	j	20402810 <_fwalk_reent+0x22>
2040283a:	00c4d783          	lhu	a5,12(s1)
2040283e:	00fb7b63          	bgeu	s6,a5,20402854 <_fwalk_reent+0x66>
20402842:	00e49783          	lh	a5,14(s1)
20402846:	01778763          	beq	a5,s7,20402854 <_fwalk_reent+0x66>
2040284a:	85a6                	mv	a1,s1
2040284c:	8552                	mv	a0,s4
2040284e:	9a82                	jalr	s5
20402850:	00a96933          	or	s2,s2,a0
20402854:	06848493          	addi	s1,s1,104
20402858:	bfe1                	j	20402830 <_fwalk_reent+0x42>

2040285a <__swhatbuf_r>:
__swhatbuf_r():
2040285a:	7119                	addi	sp,sp,-128
2040285c:	daa6                	sw	s1,116(sp)
2040285e:	84ae                	mv	s1,a1
20402860:	00e59583          	lh	a1,14(a1)
20402864:	dca2                	sw	s0,120(sp)
20402866:	de86                	sw	ra,124(sp)
20402868:	8432                	mv	s0,a2
2040286a:	0005dc63          	bgez	a1,20402882 <__swhatbuf_r+0x28>
2040286e:	00c4d783          	lhu	a5,12(s1)
20402872:	0006a023          	sw	zero,0(a3) # 80000000 <metal_segment_heap_target_end+0xffffc36c>
20402876:	0807f793          	andi	a5,a5,128
2040287a:	e39d                	bnez	a5,204028a0 <__swhatbuf_r+0x46>
2040287c:	40000793          	li	a5,1024
20402880:	a015                	j	204028a4 <__swhatbuf_r+0x4a>
20402882:	0830                	addi	a2,sp,24
20402884:	c636                	sw	a3,12(sp)
20402886:	27b9                	jal	20402fd4 <_fstat_r>
20402888:	46b2                	lw	a3,12(sp)
2040288a:	fe0542e3          	bltz	a0,2040286e <__swhatbuf_r+0x14>
2040288e:	4772                	lw	a4,28(sp)
20402890:	67bd                	lui	a5,0xf
20402892:	8ff9                	and	a5,a5,a4
20402894:	7779                	lui	a4,0xffffe
20402896:	97ba                	add	a5,a5,a4
20402898:	0017b793          	seqz	a5,a5
2040289c:	c29c                	sw	a5,0(a3)
2040289e:	bff9                	j	2040287c <__swhatbuf_r+0x22>
204028a0:	04000793          	li	a5,64
204028a4:	c01c                	sw	a5,0(s0)
204028a6:	50f6                	lw	ra,124(sp)
204028a8:	5466                	lw	s0,120(sp)
204028aa:	54d6                	lw	s1,116(sp)
204028ac:	4501                	li	a0,0
204028ae:	6109                	addi	sp,sp,128
204028b0:	8082                	ret

204028b2 <__smakebuf_r>:
__smakebuf_r():
204028b2:	00c5d783          	lhu	a5,12(a1)
204028b6:	1101                	addi	sp,sp,-32
204028b8:	cc22                	sw	s0,24(sp)
204028ba:	ce06                	sw	ra,28(sp)
204028bc:	ca26                	sw	s1,20(sp)
204028be:	c84a                	sw	s2,16(sp)
204028c0:	8b89                	andi	a5,a5,2
204028c2:	842e                	mv	s0,a1
204028c4:	cf89                	beqz	a5,204028de <__smakebuf_r+0x2c>
204028c6:	04740793          	addi	a5,s0,71
204028ca:	c01c                	sw	a5,0(s0)
204028cc:	c81c                	sw	a5,16(s0)
204028ce:	4785                	li	a5,1
204028d0:	c85c                	sw	a5,20(s0)
204028d2:	40f2                	lw	ra,28(sp)
204028d4:	4462                	lw	s0,24(sp)
204028d6:	44d2                	lw	s1,20(sp)
204028d8:	4942                	lw	s2,16(sp)
204028da:	6105                	addi	sp,sp,32
204028dc:	8082                	ret
204028de:	0074                	addi	a3,sp,12
204028e0:	0030                	addi	a2,sp,8
204028e2:	84aa                	mv	s1,a0
204028e4:	3f9d                	jal	2040285a <__swhatbuf_r>
204028e6:	45a2                	lw	a1,8(sp)
204028e8:	892a                	mv	s2,a0
204028ea:	8526                	mv	a0,s1
204028ec:	2a5d                	jal	20402aa2 <_malloc_r>
204028ee:	ed01                	bnez	a0,20402906 <__smakebuf_r+0x54>
204028f0:	00c41783          	lh	a5,12(s0)
204028f4:	2007f713          	andi	a4,a5,512
204028f8:	ff69                	bnez	a4,204028d2 <__smakebuf_r+0x20>
204028fa:	9bf1                	andi	a5,a5,-4
204028fc:	0027e793          	ori	a5,a5,2
20402900:	00f41623          	sh	a5,12(s0)
20402904:	b7c9                	j	204028c6 <__smakebuf_r+0x14>
20402906:	00000797          	auipc	a5,0x0
2040290a:	d9278793          	addi	a5,a5,-622 # 20402698 <_cleanup_r>
2040290e:	d49c                	sw	a5,40(s1)
20402910:	00c45783          	lhu	a5,12(s0)
20402914:	c008                	sw	a0,0(s0)
20402916:	c808                	sw	a0,16(s0)
20402918:	0807e793          	ori	a5,a5,128
2040291c:	00f41623          	sh	a5,12(s0)
20402920:	47a2                	lw	a5,8(sp)
20402922:	c85c                	sw	a5,20(s0)
20402924:	47b2                	lw	a5,12(sp)
20402926:	cf89                	beqz	a5,20402940 <__smakebuf_r+0x8e>
20402928:	00e41583          	lh	a1,14(s0)
2040292c:	8526                	mv	a0,s1
2040292e:	2de1                	jal	20403006 <_isatty_r>
20402930:	c901                	beqz	a0,20402940 <__smakebuf_r+0x8e>
20402932:	00c45783          	lhu	a5,12(s0)
20402936:	9bf1                	andi	a5,a5,-4
20402938:	0017e793          	ori	a5,a5,1
2040293c:	00f41623          	sh	a5,12(s0)
20402940:	00c45783          	lhu	a5,12(s0)
20402944:	00f96933          	or	s2,s2,a5
20402948:	01241623          	sh	s2,12(s0)
2040294c:	b759                	j	204028d2 <__smakebuf_r+0x20>

2040294e <memset>:
memset():
2040294e:	433d                	li	t1,15
20402950:	872a                	mv	a4,a0
20402952:	02c37363          	bgeu	t1,a2,20402978 <memset+0x2a>
20402956:	00f77793          	andi	a5,a4,15
2040295a:	efbd                	bnez	a5,204029d8 <memset+0x8a>
2040295c:	e5ad                	bnez	a1,204029c6 <memset+0x78>
2040295e:	ff067693          	andi	a3,a2,-16
20402962:	8a3d                	andi	a2,a2,15
20402964:	96ba                	add	a3,a3,a4
20402966:	c30c                	sw	a1,0(a4)
20402968:	c34c                	sw	a1,4(a4)
2040296a:	c70c                	sw	a1,8(a4)
2040296c:	c74c                	sw	a1,12(a4)
2040296e:	0741                	addi	a4,a4,16
20402970:	fed76be3          	bltu	a4,a3,20402966 <memset+0x18>
20402974:	e211                	bnez	a2,20402978 <memset+0x2a>
20402976:	8082                	ret
20402978:	40c306b3          	sub	a3,t1,a2
2040297c:	068a                	slli	a3,a3,0x2
2040297e:	00000297          	auipc	t0,0x0
20402982:	9696                	add	a3,a3,t0
20402984:	00a68067          	jr	10(a3)
20402988:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffa37a>
2040298c:	00b706a3          	sb	a1,13(a4)
20402990:	00b70623          	sb	a1,12(a4)
20402994:	00b705a3          	sb	a1,11(a4)
20402998:	00b70523          	sb	a1,10(a4)
2040299c:	00b704a3          	sb	a1,9(a4)
204029a0:	00b70423          	sb	a1,8(a4)
204029a4:	00b703a3          	sb	a1,7(a4)
204029a8:	00b70323          	sb	a1,6(a4)
204029ac:	00b702a3          	sb	a1,5(a4)
204029b0:	00b70223          	sb	a1,4(a4)
204029b4:	00b701a3          	sb	a1,3(a4)
204029b8:	00b70123          	sb	a1,2(a4)
204029bc:	00b700a3          	sb	a1,1(a4)
204029c0:	00b70023          	sb	a1,0(a4)
204029c4:	8082                	ret
204029c6:	0ff5f593          	andi	a1,a1,255
204029ca:	00859693          	slli	a3,a1,0x8
204029ce:	8dd5                	or	a1,a1,a3
204029d0:	01059693          	slli	a3,a1,0x10
204029d4:	8dd5                	or	a1,a1,a3
204029d6:	b761                	j	2040295e <memset+0x10>
204029d8:	00279693          	slli	a3,a5,0x2
204029dc:	00000297          	auipc	t0,0x0
204029e0:	9696                	add	a3,a3,t0
204029e2:	8286                	mv	t0,ra
204029e4:	fa8680e7          	jalr	-88(a3)
204029e8:	8096                	mv	ra,t0
204029ea:	17c1                	addi	a5,a5,-16
204029ec:	8f1d                	sub	a4,a4,a5
204029ee:	963e                	add	a2,a2,a5
204029f0:	f8c374e3          	bgeu	t1,a2,20402978 <memset+0x2a>
204029f4:	b7a5                	j	2040295c <memset+0xe>

204029f6 <_free_r>:
_free_r():
204029f6:	c5cd                	beqz	a1,20402aa0 <_free_r+0xaa>
204029f8:	ffc5a783          	lw	a5,-4(a1)
204029fc:	1141                	addi	sp,sp,-16
204029fe:	c422                	sw	s0,8(sp)
20402a00:	c606                	sw	ra,12(sp)
20402a02:	c226                	sw	s1,4(sp)
20402a04:	ffc58413          	addi	s0,a1,-4
20402a08:	0007d363          	bgez	a5,20402a0e <_free_r+0x18>
20402a0c:	943e                	add	s0,s0,a5
20402a0e:	84aa                	mv	s1,a0
20402a10:	2d95                	jal	20403084 <__malloc_lock>
20402a12:	5fbfe797          	auipc	a5,0x5fbfe
20402a16:	db678793          	addi	a5,a5,-586 # 800007c8 <metal_segment_data_target_end>
20402a1a:	439c                	lw	a5,0(a5)
20402a1c:	ef89                	bnez	a5,20402a36 <_free_r+0x40>
20402a1e:	00042223          	sw	zero,4(s0)
20402a22:	5fbfe797          	auipc	a5,0x5fbfe
20402a26:	da87a323          	sw	s0,-602(a5) # 800007c8 <metal_segment_data_target_end>
20402a2a:	4422                	lw	s0,8(sp)
20402a2c:	40b2                	lw	ra,12(sp)
20402a2e:	8526                	mv	a0,s1
20402a30:	4492                	lw	s1,4(sp)
20402a32:	0141                	addi	sp,sp,16
20402a34:	ad89                	j	20403086 <__malloc_unlock>
20402a36:	00f47e63          	bgeu	s0,a5,20402a52 <_free_r+0x5c>
20402a3a:	4014                	lw	a3,0(s0)
20402a3c:	00d40733          	add	a4,s0,a3
20402a40:	00e79663          	bne	a5,a4,20402a4c <_free_r+0x56>
20402a44:	4398                	lw	a4,0(a5)
20402a46:	43dc                	lw	a5,4(a5)
20402a48:	9736                	add	a4,a4,a3
20402a4a:	c018                	sw	a4,0(s0)
20402a4c:	c05c                	sw	a5,4(s0)
20402a4e:	bfd1                	j	20402a22 <_free_r+0x2c>
20402a50:	87ba                	mv	a5,a4
20402a52:	43d8                	lw	a4,4(a5)
20402a54:	c319                	beqz	a4,20402a5a <_free_r+0x64>
20402a56:	fee47de3          	bgeu	s0,a4,20402a50 <_free_r+0x5a>
20402a5a:	4394                	lw	a3,0(a5)
20402a5c:	00d78633          	add	a2,a5,a3
20402a60:	00861f63          	bne	a2,s0,20402a7e <_free_r+0x88>
20402a64:	4010                	lw	a2,0(s0)
20402a66:	96b2                	add	a3,a3,a2
20402a68:	c394                	sw	a3,0(a5)
20402a6a:	00d78633          	add	a2,a5,a3
20402a6e:	fac71ee3          	bne	a4,a2,20402a2a <_free_r+0x34>
20402a72:	4310                	lw	a2,0(a4)
20402a74:	4358                	lw	a4,4(a4)
20402a76:	96b2                	add	a3,a3,a2
20402a78:	c394                	sw	a3,0(a5)
20402a7a:	c3d8                	sw	a4,4(a5)
20402a7c:	b77d                	j	20402a2a <_free_r+0x34>
20402a7e:	00c47563          	bgeu	s0,a2,20402a88 <_free_r+0x92>
20402a82:	47b1                	li	a5,12
20402a84:	c09c                	sw	a5,0(s1)
20402a86:	b755                	j	20402a2a <_free_r+0x34>
20402a88:	4010                	lw	a2,0(s0)
20402a8a:	00c406b3          	add	a3,s0,a2
20402a8e:	00d71663          	bne	a4,a3,20402a9a <_free_r+0xa4>
20402a92:	4314                	lw	a3,0(a4)
20402a94:	4358                	lw	a4,4(a4)
20402a96:	96b2                	add	a3,a3,a2
20402a98:	c014                	sw	a3,0(s0)
20402a9a:	c058                	sw	a4,4(s0)
20402a9c:	c3c0                	sw	s0,4(a5)
20402a9e:	b771                	j	20402a2a <_free_r+0x34>
20402aa0:	8082                	ret

20402aa2 <_malloc_r>:
_malloc_r():
20402aa2:	1101                	addi	sp,sp,-32
20402aa4:	ca26                	sw	s1,20(sp)
20402aa6:	00358493          	addi	s1,a1,3
20402aaa:	98f1                	andi	s1,s1,-4
20402aac:	ce06                	sw	ra,28(sp)
20402aae:	cc22                	sw	s0,24(sp)
20402ab0:	c84a                	sw	s2,16(sp)
20402ab2:	c64e                	sw	s3,12(sp)
20402ab4:	04a1                	addi	s1,s1,8
20402ab6:	47b1                	li	a5,12
20402ab8:	04f4f763          	bgeu	s1,a5,20402b06 <_malloc_r+0x64>
20402abc:	44b1                	li	s1,12
20402abe:	04b4e663          	bltu	s1,a1,20402b0a <_malloc_r+0x68>
20402ac2:	892a                	mv	s2,a0
20402ac4:	23c1                	jal	20403084 <__malloc_lock>
20402ac6:	5fbfe797          	auipc	a5,0x5fbfe
20402aca:	d0278793          	addi	a5,a5,-766 # 800007c8 <metal_segment_data_target_end>
20402ace:	4398                	lw	a4,0(a5)
20402ad0:	843a                	mv	s0,a4
20402ad2:	e431                	bnez	s0,20402b1e <_malloc_r+0x7c>
20402ad4:	5fbfe797          	auipc	a5,0x5fbfe
20402ad8:	cf878793          	addi	a5,a5,-776 # 800007cc <__malloc_sbrk_start>
20402adc:	439c                	lw	a5,0(a5)
20402ade:	eb81                	bnez	a5,20402aee <_malloc_r+0x4c>
20402ae0:	4581                	li	a1,0
20402ae2:	854a                	mv	a0,s2
20402ae4:	264d                	jal	20402e86 <_sbrk_r>
20402ae6:	5fbfe797          	auipc	a5,0x5fbfe
20402aea:	cea7a323          	sw	a0,-794(a5) # 800007cc <__malloc_sbrk_start>
20402aee:	85a6                	mv	a1,s1
20402af0:	854a                	mv	a0,s2
20402af2:	2e51                	jal	20402e86 <_sbrk_r>
20402af4:	59fd                	li	s3,-1
20402af6:	07351963          	bne	a0,s3,20402b68 <_malloc_r+0xc6>
20402afa:	47b1                	li	a5,12
20402afc:	00f92023          	sw	a5,0(s2)
20402b00:	854a                	mv	a0,s2
20402b02:	2351                	jal	20403086 <__malloc_unlock>
20402b04:	a029                	j	20402b0e <_malloc_r+0x6c>
20402b06:	fa04dce3          	bgez	s1,20402abe <_malloc_r+0x1c>
20402b0a:	47b1                	li	a5,12
20402b0c:	c11c                	sw	a5,0(a0)
20402b0e:	4501                	li	a0,0
20402b10:	40f2                	lw	ra,28(sp)
20402b12:	4462                	lw	s0,24(sp)
20402b14:	44d2                	lw	s1,20(sp)
20402b16:	4942                	lw	s2,16(sp)
20402b18:	49b2                	lw	s3,12(sp)
20402b1a:	6105                	addi	sp,sp,32
20402b1c:	8082                	ret
20402b1e:	401c                	lw	a5,0(s0)
20402b20:	8f85                	sub	a5,a5,s1
20402b22:	0407c063          	bltz	a5,20402b62 <_malloc_r+0xc0>
20402b26:	46ad                	li	a3,11
20402b28:	00f6f663          	bgeu	a3,a5,20402b34 <_malloc_r+0x92>
20402b2c:	c01c                	sw	a5,0(s0)
20402b2e:	943e                	add	s0,s0,a5
20402b30:	c004                	sw	s1,0(s0)
20402b32:	a801                	j	20402b42 <_malloc_r+0xa0>
20402b34:	405c                	lw	a5,4(s0)
20402b36:	02871463          	bne	a4,s0,20402b5e <_malloc_r+0xbc>
20402b3a:	5fbfe717          	auipc	a4,0x5fbfe
20402b3e:	c8f72723          	sw	a5,-882(a4) # 800007c8 <metal_segment_data_target_end>
20402b42:	854a                	mv	a0,s2
20402b44:	2389                	jal	20403086 <__malloc_unlock>
20402b46:	00b40513          	addi	a0,s0,11
20402b4a:	00440793          	addi	a5,s0,4
20402b4e:	9961                	andi	a0,a0,-8
20402b50:	40f50733          	sub	a4,a0,a5
20402b54:	df55                	beqz	a4,20402b10 <_malloc_r+0x6e>
20402b56:	943a                	add	s0,s0,a4
20402b58:	8f89                	sub	a5,a5,a0
20402b5a:	c01c                	sw	a5,0(s0)
20402b5c:	bf55                	j	20402b10 <_malloc_r+0x6e>
20402b5e:	c35c                	sw	a5,4(a4)
20402b60:	b7cd                	j	20402b42 <_malloc_r+0xa0>
20402b62:	8722                	mv	a4,s0
20402b64:	4040                	lw	s0,4(s0)
20402b66:	b7b5                	j	20402ad2 <_malloc_r+0x30>
20402b68:	00350413          	addi	s0,a0,3
20402b6c:	9871                	andi	s0,s0,-4
20402b6e:	fc8501e3          	beq	a0,s0,20402b30 <_malloc_r+0x8e>
20402b72:	40a405b3          	sub	a1,s0,a0
20402b76:	854a                	mv	a0,s2
20402b78:	2639                	jal	20402e86 <_sbrk_r>
20402b7a:	fb351be3          	bne	a0,s3,20402b30 <_malloc_r+0x8e>
20402b7e:	bfb5                	j	20402afa <_malloc_r+0x58>

20402b80 <__sfputc_r>:
__sfputc_r():
20402b80:	461c                	lw	a5,8(a2)
20402b82:	17fd                	addi	a5,a5,-1
20402b84:	c61c                	sw	a5,8(a2)
20402b86:	0007da63          	bgez	a5,20402b9a <__sfputc_r+0x1a>
20402b8a:	4e18                	lw	a4,24(a2)
20402b8c:	00e7c563          	blt	a5,a4,20402b96 <__sfputc_r+0x16>
20402b90:	47a9                	li	a5,10
20402b92:	00f59463          	bne	a1,a5,20402b9a <__sfputc_r+0x1a>
20402b96:	f1cff06f          	j	204022b2 <__swbuf_r>
20402b9a:	421c                	lw	a5,0(a2)
20402b9c:	852e                	mv	a0,a1
20402b9e:	00178713          	addi	a4,a5,1
20402ba2:	c218                	sw	a4,0(a2)
20402ba4:	00b78023          	sb	a1,0(a5)
20402ba8:	8082                	ret

20402baa <__sfputs_r>:
__sfputs_r():
20402baa:	1101                	addi	sp,sp,-32
20402bac:	cc22                	sw	s0,24(sp)
20402bae:	ca26                	sw	s1,20(sp)
20402bb0:	c84a                	sw	s2,16(sp)
20402bb2:	c64e                	sw	s3,12(sp)
20402bb4:	c452                	sw	s4,8(sp)
20402bb6:	ce06                	sw	ra,28(sp)
20402bb8:	892a                	mv	s2,a0
20402bba:	89ae                	mv	s3,a1
20402bbc:	8432                	mv	s0,a2
20402bbe:	00d604b3          	add	s1,a2,a3
20402bc2:	5a7d                	li	s4,-1
20402bc4:	00941463          	bne	s0,s1,20402bcc <__sfputs_r+0x22>
20402bc8:	4501                	li	a0,0
20402bca:	a809                	j	20402bdc <__sfputs_r+0x32>
20402bcc:	00044583          	lbu	a1,0(s0)
20402bd0:	864e                	mv	a2,s3
20402bd2:	854a                	mv	a0,s2
20402bd4:	3775                	jal	20402b80 <__sfputc_r>
20402bd6:	0405                	addi	s0,s0,1
20402bd8:	ff4516e3          	bne	a0,s4,20402bc4 <__sfputs_r+0x1a>
20402bdc:	40f2                	lw	ra,28(sp)
20402bde:	4462                	lw	s0,24(sp)
20402be0:	44d2                	lw	s1,20(sp)
20402be2:	4942                	lw	s2,16(sp)
20402be4:	49b2                	lw	s3,12(sp)
20402be6:	4a22                	lw	s4,8(sp)
20402be8:	6105                	addi	sp,sp,32
20402bea:	8082                	ret

20402bec <_vfiprintf_r>:
_vfiprintf_r():
20402bec:	7135                	addi	sp,sp,-160
20402bee:	cd22                	sw	s0,152(sp)
20402bf0:	cb26                	sw	s1,148(sp)
20402bf2:	c94a                	sw	s2,144(sp)
20402bf4:	c74e                	sw	s3,140(sp)
20402bf6:	cf06                	sw	ra,156(sp)
20402bf8:	c552                	sw	s4,136(sp)
20402bfa:	c356                	sw	s5,132(sp)
20402bfc:	c15a                	sw	s6,128(sp)
20402bfe:	dede                	sw	s7,124(sp)
20402c00:	dce2                	sw	s8,120(sp)
20402c02:	dae6                	sw	s9,116(sp)
20402c04:	89aa                	mv	s3,a0
20402c06:	84ae                	mv	s1,a1
20402c08:	8932                	mv	s2,a2
20402c0a:	8436                	mv	s0,a3
20402c0c:	c509                	beqz	a0,20402c16 <_vfiprintf_r+0x2a>
20402c0e:	4d1c                	lw	a5,24(a0)
20402c10:	e399                	bnez	a5,20402c16 <_vfiprintf_r+0x2a>
20402c12:	ad5ff0ef          	jal	ra,204026e6 <__sinit>
20402c16:	00004797          	auipc	a5,0x4
20402c1a:	3fe78793          	addi	a5,a5,1022 # 20407014 <__sf_fake_stdin>
20402c1e:	0cf49b63          	bne	s1,a5,20402cf4 <_vfiprintf_r+0x108>
20402c22:	0049a483          	lw	s1,4(s3)
20402c26:	00c4d783          	lhu	a5,12(s1)
20402c2a:	8ba1                	andi	a5,a5,8
20402c2c:	c7f5                	beqz	a5,20402d18 <_vfiprintf_r+0x12c>
20402c2e:	489c                	lw	a5,16(s1)
20402c30:	c7e5                	beqz	a5,20402d18 <_vfiprintf_r+0x12c>
20402c32:	02000793          	li	a5,32
20402c36:	02f104a3          	sb	a5,41(sp)
20402c3a:	03000793          	li	a5,48
20402c3e:	d202                	sw	zero,36(sp)
20402c40:	02f10523          	sb	a5,42(sp)
20402c44:	c622                	sw	s0,12(sp)
20402c46:	02500b93          	li	s7,37
20402c4a:	00004a97          	auipc	s5,0x4
20402c4e:	40aa8a93          	addi	s5,s5,1034 # 20407054 <__sf_fake_stdout+0x20>
20402c52:	4c05                	li	s8,1
20402c54:	4b29                	li	s6,10
20402c56:	844a                	mv	s0,s2
20402c58:	00044783          	lbu	a5,0(s0)
20402c5c:	c399                	beqz	a5,20402c62 <_vfiprintf_r+0x76>
20402c5e:	0f779063          	bne	a5,s7,20402d3e <_vfiprintf_r+0x152>
20402c62:	41240cb3          	sub	s9,s0,s2
20402c66:	000c8d63          	beqz	s9,20402c80 <_vfiprintf_r+0x94>
20402c6a:	86e6                	mv	a3,s9
20402c6c:	864a                	mv	a2,s2
20402c6e:	85a6                	mv	a1,s1
20402c70:	854e                	mv	a0,s3
20402c72:	3f25                	jal	20402baa <__sfputs_r>
20402c74:	57fd                	li	a5,-1
20402c76:	1ef50663          	beq	a0,a5,20402e62 <_vfiprintf_r+0x276>
20402c7a:	5692                	lw	a3,36(sp)
20402c7c:	96e6                	add	a3,a3,s9
20402c7e:	d236                	sw	a3,36(sp)
20402c80:	00044783          	lbu	a5,0(s0)
20402c84:	1c078f63          	beqz	a5,20402e62 <_vfiprintf_r+0x276>
20402c88:	57fd                	li	a5,-1
20402c8a:	00140913          	addi	s2,s0,1
20402c8e:	c802                	sw	zero,16(sp)
20402c90:	ce02                	sw	zero,28(sp)
20402c92:	ca3e                	sw	a5,20(sp)
20402c94:	cc02                	sw	zero,24(sp)
20402c96:	040109a3          	sb	zero,83(sp)
20402c9a:	d482                	sw	zero,104(sp)
20402c9c:	00094583          	lbu	a1,0(s2)
20402ca0:	4615                	li	a2,5
20402ca2:	8556                	mv	a0,s5
20402ca4:	26d9                	jal	2040306a <memchr>
20402ca6:	00190413          	addi	s0,s2,1
20402caa:	47c2                	lw	a5,16(sp)
20402cac:	e959                	bnez	a0,20402d42 <_vfiprintf_r+0x156>
20402cae:	0107f713          	andi	a4,a5,16
20402cb2:	c709                	beqz	a4,20402cbc <_vfiprintf_r+0xd0>
20402cb4:	02000713          	li	a4,32
20402cb8:	04e109a3          	sb	a4,83(sp)
20402cbc:	0087f713          	andi	a4,a5,8
20402cc0:	c709                	beqz	a4,20402cca <_vfiprintf_r+0xde>
20402cc2:	02b00713          	li	a4,43
20402cc6:	04e109a3          	sb	a4,83(sp)
20402cca:	00094683          	lbu	a3,0(s2)
20402cce:	02a00713          	li	a4,42
20402cd2:	08e68063          	beq	a3,a4,20402d52 <_vfiprintf_r+0x166>
20402cd6:	47f2                	lw	a5,28(sp)
20402cd8:	844a                	mv	s0,s2
20402cda:	4681                	li	a3,0
20402cdc:	4625                	li	a2,9
20402cde:	00044703          	lbu	a4,0(s0)
20402ce2:	00140593          	addi	a1,s0,1
20402ce6:	fd070713          	addi	a4,a4,-48
20402cea:	0ae67963          	bgeu	a2,a4,20402d9c <_vfiprintf_r+0x1b0>
20402cee:	cab5                	beqz	a3,20402d62 <_vfiprintf_r+0x176>
20402cf0:	ce3e                	sw	a5,28(sp)
20402cf2:	a885                	j	20402d62 <_vfiprintf_r+0x176>
20402cf4:	00004797          	auipc	a5,0x4
20402cf8:	34078793          	addi	a5,a5,832 # 20407034 <__sf_fake_stdout>
20402cfc:	00f49563          	bne	s1,a5,20402d06 <_vfiprintf_r+0x11a>
20402d00:	0089a483          	lw	s1,8(s3)
20402d04:	b70d                	j	20402c26 <_vfiprintf_r+0x3a>
20402d06:	00004797          	auipc	a5,0x4
20402d0a:	2ee78793          	addi	a5,a5,750 # 20406ff4 <__sf_fake_stderr>
20402d0e:	f0f49ce3          	bne	s1,a5,20402c26 <_vfiprintf_r+0x3a>
20402d12:	00c9a483          	lw	s1,12(s3)
20402d16:	bf01                	j	20402c26 <_vfiprintf_r+0x3a>
20402d18:	85a6                	mv	a1,s1
20402d1a:	854e                	mv	a0,s3
20402d1c:	e56ff0ef          	jal	ra,20402372 <__swsetup_r>
20402d20:	d909                	beqz	a0,20402c32 <_vfiprintf_r+0x46>
20402d22:	557d                	li	a0,-1
20402d24:	40fa                	lw	ra,156(sp)
20402d26:	446a                	lw	s0,152(sp)
20402d28:	44da                	lw	s1,148(sp)
20402d2a:	494a                	lw	s2,144(sp)
20402d2c:	49ba                	lw	s3,140(sp)
20402d2e:	4a2a                	lw	s4,136(sp)
20402d30:	4a9a                	lw	s5,132(sp)
20402d32:	4b0a                	lw	s6,128(sp)
20402d34:	5bf6                	lw	s7,124(sp)
20402d36:	5c66                	lw	s8,120(sp)
20402d38:	5cd6                	lw	s9,116(sp)
20402d3a:	610d                	addi	sp,sp,160
20402d3c:	8082                	ret
20402d3e:	0405                	addi	s0,s0,1
20402d40:	bf21                	j	20402c58 <_vfiprintf_r+0x6c>
20402d42:	41550533          	sub	a0,a0,s5
20402d46:	00ac1533          	sll	a0,s8,a0
20402d4a:	8fc9                	or	a5,a5,a0
20402d4c:	c83e                	sw	a5,16(sp)
20402d4e:	8922                	mv	s2,s0
20402d50:	b7b1                	j	20402c9c <_vfiprintf_r+0xb0>
20402d52:	4732                	lw	a4,12(sp)
20402d54:	00470693          	addi	a3,a4,4
20402d58:	4318                	lw	a4,0(a4)
20402d5a:	c636                	sw	a3,12(sp)
20402d5c:	02074963          	bltz	a4,20402d8e <_vfiprintf_r+0x1a2>
20402d60:	ce3a                	sw	a4,28(sp)
20402d62:	00044703          	lbu	a4,0(s0)
20402d66:	02e00793          	li	a5,46
20402d6a:	04f71f63          	bne	a4,a5,20402dc8 <_vfiprintf_r+0x1dc>
20402d6e:	00144703          	lbu	a4,1(s0)
20402d72:	02a00793          	li	a5,42
20402d76:	02f71b63          	bne	a4,a5,20402dac <_vfiprintf_r+0x1c0>
20402d7a:	47b2                	lw	a5,12(sp)
20402d7c:	0409                	addi	s0,s0,2
20402d7e:	00478713          	addi	a4,a5,4
20402d82:	439c                	lw	a5,0(a5)
20402d84:	c63a                	sw	a4,12(sp)
20402d86:	0207c163          	bltz	a5,20402da8 <_vfiprintf_r+0x1bc>
20402d8a:	ca3e                	sw	a5,20(sp)
20402d8c:	a835                	j	20402dc8 <_vfiprintf_r+0x1dc>
20402d8e:	40e00733          	neg	a4,a4
20402d92:	0027e793          	ori	a5,a5,2
20402d96:	ce3a                	sw	a4,28(sp)
20402d98:	c83e                	sw	a5,16(sp)
20402d9a:	b7e1                	j	20402d62 <_vfiprintf_r+0x176>
20402d9c:	036787b3          	mul	a5,a5,s6
20402da0:	4685                	li	a3,1
20402da2:	842e                	mv	s0,a1
20402da4:	97ba                	add	a5,a5,a4
20402da6:	bf25                	j	20402cde <_vfiprintf_r+0xf2>
20402da8:	57fd                	li	a5,-1
20402daa:	b7c5                	j	20402d8a <_vfiprintf_r+0x19e>
20402dac:	0405                	addi	s0,s0,1
20402dae:	ca02                	sw	zero,20(sp)
20402db0:	4681                	li	a3,0
20402db2:	4781                	li	a5,0
20402db4:	4625                	li	a2,9
20402db6:	00044703          	lbu	a4,0(s0)
20402dba:	00140593          	addi	a1,s0,1
20402dbe:	fd070713          	addi	a4,a4,-48
20402dc2:	06e67663          	bgeu	a2,a4,20402e2e <_vfiprintf_r+0x242>
20402dc6:	f2f1                	bnez	a3,20402d8a <_vfiprintf_r+0x19e>
20402dc8:	00044583          	lbu	a1,0(s0)
20402dcc:	460d                	li	a2,3
20402dce:	00004517          	auipc	a0,0x4
20402dd2:	28e50513          	addi	a0,a0,654 # 2040705c <__sf_fake_stdout+0x28>
20402dd6:	2c51                	jal	2040306a <memchr>
20402dd8:	cd11                	beqz	a0,20402df4 <_vfiprintf_r+0x208>
20402dda:	00004797          	auipc	a5,0x4
20402dde:	28278793          	addi	a5,a5,642 # 2040705c <__sf_fake_stdout+0x28>
20402de2:	8d1d                	sub	a0,a0,a5
20402de4:	04000793          	li	a5,64
20402de8:	00a797b3          	sll	a5,a5,a0
20402dec:	4542                	lw	a0,16(sp)
20402dee:	0405                	addi	s0,s0,1
20402df0:	8d5d                	or	a0,a0,a5
20402df2:	c82a                	sw	a0,16(sp)
20402df4:	00044583          	lbu	a1,0(s0)
20402df8:	4619                	li	a2,6
20402dfa:	00004517          	auipc	a0,0x4
20402dfe:	26650513          	addi	a0,a0,614 # 20407060 <__sf_fake_stdout+0x2c>
20402e02:	00140913          	addi	s2,s0,1
20402e06:	02b10423          	sb	a1,40(sp)
20402e0a:	2485                	jal	2040306a <memchr>
20402e0c:	c13d                	beqz	a0,20402e72 <_vfiprintf_r+0x286>
20402e0e:	dfbfd797          	auipc	a5,0xdfbfd
20402e12:	1f278793          	addi	a5,a5,498 # 0 <__metal_boot_hart>
20402e16:	e795                	bnez	a5,20402e42 <_vfiprintf_r+0x256>
20402e18:	4742                	lw	a4,16(sp)
20402e1a:	47b2                	lw	a5,12(sp)
20402e1c:	10077713          	andi	a4,a4,256
20402e20:	cf09                	beqz	a4,20402e3a <_vfiprintf_r+0x24e>
20402e22:	0791                	addi	a5,a5,4
20402e24:	c63e                	sw	a5,12(sp)
20402e26:	5792                	lw	a5,36(sp)
20402e28:	97d2                	add	a5,a5,s4
20402e2a:	d23e                	sw	a5,36(sp)
20402e2c:	b52d                	j	20402c56 <_vfiprintf_r+0x6a>
20402e2e:	036787b3          	mul	a5,a5,s6
20402e32:	4685                	li	a3,1
20402e34:	842e                	mv	s0,a1
20402e36:	97ba                	add	a5,a5,a4
20402e38:	bfbd                	j	20402db6 <_vfiprintf_r+0x1ca>
20402e3a:	079d                	addi	a5,a5,7
20402e3c:	9be1                	andi	a5,a5,-8
20402e3e:	07a1                	addi	a5,a5,8
20402e40:	b7d5                	j	20402e24 <_vfiprintf_r+0x238>
20402e42:	0078                	addi	a4,sp,12
20402e44:	00000697          	auipc	a3,0x0
20402e48:	d6668693          	addi	a3,a3,-666 # 20402baa <__sfputs_r>
20402e4c:	8626                	mv	a2,s1
20402e4e:	080c                	addi	a1,sp,16
20402e50:	854e                	mv	a0,s3
20402e52:	00000097          	auipc	ra,0x0
20402e56:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
20402e5a:	57fd                	li	a5,-1
20402e5c:	8a2a                	mv	s4,a0
20402e5e:	fcf514e3          	bne	a0,a5,20402e26 <_vfiprintf_r+0x23a>
20402e62:	00c4d783          	lhu	a5,12(s1)
20402e66:	0407f793          	andi	a5,a5,64
20402e6a:	ea079ce3          	bnez	a5,20402d22 <_vfiprintf_r+0x136>
20402e6e:	5512                	lw	a0,36(sp)
20402e70:	bd55                	j	20402d24 <_vfiprintf_r+0x138>
20402e72:	0078                	addi	a4,sp,12
20402e74:	00000697          	auipc	a3,0x0
20402e78:	d3668693          	addi	a3,a3,-714 # 20402baa <__sfputs_r>
20402e7c:	8626                	mv	a2,s1
20402e7e:	080c                	addi	a1,sp,16
20402e80:	854e                	mv	a0,s3
20402e82:	2e09                	jal	20403194 <_printf_i>
20402e84:	bfd9                	j	20402e5a <_vfiprintf_r+0x26e>

20402e86 <_sbrk_r>:
_sbrk_r():
20402e86:	1141                	addi	sp,sp,-16
20402e88:	c422                	sw	s0,8(sp)
20402e8a:	842a                	mv	s0,a0
20402e8c:	852e                	mv	a0,a1
20402e8e:	5fc00797          	auipc	a5,0x5fc00
20402e92:	2007a123          	sw	zero,514(a5) # 80003090 <errno>
20402e96:	c606                	sw	ra,12(sp)
20402e98:	2579                	jal	20403526 <_sbrk>
20402e9a:	57fd                	li	a5,-1
20402e9c:	00f51963          	bne	a0,a5,20402eae <_sbrk_r+0x28>
20402ea0:	5fc00797          	auipc	a5,0x5fc00
20402ea4:	1f078793          	addi	a5,a5,496 # 80003090 <errno>
20402ea8:	439c                	lw	a5,0(a5)
20402eaa:	c391                	beqz	a5,20402eae <_sbrk_r+0x28>
20402eac:	c01c                	sw	a5,0(s0)
20402eae:	40b2                	lw	ra,12(sp)
20402eb0:	4422                	lw	s0,8(sp)
20402eb2:	0141                	addi	sp,sp,16
20402eb4:	8082                	ret

20402eb6 <__sread>:
__sread():
20402eb6:	1141                	addi	sp,sp,-16
20402eb8:	c422                	sw	s0,8(sp)
20402eba:	842e                	mv	s0,a1
20402ebc:	00e59583          	lh	a1,14(a1)
20402ec0:	c606                	sw	ra,12(sp)
20402ec2:	2b95                	jal	20403436 <_read_r>
20402ec4:	00054963          	bltz	a0,20402ed6 <__sread+0x20>
20402ec8:	487c                	lw	a5,84(s0)
20402eca:	97aa                	add	a5,a5,a0
20402ecc:	c87c                	sw	a5,84(s0)
20402ece:	40b2                	lw	ra,12(sp)
20402ed0:	4422                	lw	s0,8(sp)
20402ed2:	0141                	addi	sp,sp,16
20402ed4:	8082                	ret
20402ed6:	00c45783          	lhu	a5,12(s0)
20402eda:	777d                	lui	a4,0xfffff
20402edc:	177d                	addi	a4,a4,-1
20402ede:	8ff9                	and	a5,a5,a4
20402ee0:	00f41623          	sh	a5,12(s0)
20402ee4:	b7ed                	j	20402ece <__sread+0x18>

20402ee6 <__swrite>:
__swrite():
20402ee6:	00c5d783          	lhu	a5,12(a1)
20402eea:	1101                	addi	sp,sp,-32
20402eec:	cc22                	sw	s0,24(sp)
20402eee:	ca26                	sw	s1,20(sp)
20402ef0:	c84a                	sw	s2,16(sp)
20402ef2:	c64e                	sw	s3,12(sp)
20402ef4:	ce06                	sw	ra,28(sp)
20402ef6:	1007f793          	andi	a5,a5,256
20402efa:	84aa                	mv	s1,a0
20402efc:	842e                	mv	s0,a1
20402efe:	8932                	mv	s2,a2
20402f00:	89b6                	mv	s3,a3
20402f02:	c791                	beqz	a5,20402f0e <__swrite+0x28>
20402f04:	00e59583          	lh	a1,14(a1)
20402f08:	4689                	li	a3,2
20402f0a:	4601                	li	a2,0
20402f0c:	222d                	jal	20403036 <_lseek_r>
20402f0e:	00c45783          	lhu	a5,12(s0)
20402f12:	777d                	lui	a4,0xfffff
20402f14:	177d                	addi	a4,a4,-1
20402f16:	8ff9                	and	a5,a5,a4
20402f18:	00f41623          	sh	a5,12(s0)
20402f1c:	00e41583          	lh	a1,14(s0)
20402f20:	4462                	lw	s0,24(sp)
20402f22:	40f2                	lw	ra,28(sp)
20402f24:	86ce                	mv	a3,s3
20402f26:	864a                	mv	a2,s2
20402f28:	49b2                	lw	s3,12(sp)
20402f2a:	4942                	lw	s2,16(sp)
20402f2c:	8526                	mv	a0,s1
20402f2e:	44d2                	lw	s1,20(sp)
20402f30:	6105                	addi	sp,sp,32
20402f32:	a83d                	j	20402f70 <_write_r>

20402f34 <__sseek>:
__sseek():
20402f34:	1141                	addi	sp,sp,-16
20402f36:	c422                	sw	s0,8(sp)
20402f38:	842e                	mv	s0,a1
20402f3a:	00e59583          	lh	a1,14(a1)
20402f3e:	c606                	sw	ra,12(sp)
20402f40:	28dd                	jal	20403036 <_lseek_r>
20402f42:	57fd                	li	a5,-1
20402f44:	00c45703          	lhu	a4,12(s0)
20402f48:	00f51b63          	bne	a0,a5,20402f5e <__sseek+0x2a>
20402f4c:	77fd                	lui	a5,0xfffff
20402f4e:	17fd                	addi	a5,a5,-1
20402f50:	8ff9                	and	a5,a5,a4
20402f52:	00f41623          	sh	a5,12(s0)
20402f56:	40b2                	lw	ra,12(sp)
20402f58:	4422                	lw	s0,8(sp)
20402f5a:	0141                	addi	sp,sp,16
20402f5c:	8082                	ret
20402f5e:	6785                	lui	a5,0x1
20402f60:	8fd9                	or	a5,a5,a4
20402f62:	00f41623          	sh	a5,12(s0)
20402f66:	c868                	sw	a0,84(s0)
20402f68:	b7fd                	j	20402f56 <__sseek+0x22>

20402f6a <__sclose>:
__sclose():
20402f6a:	00e59583          	lh	a1,14(a1)
20402f6e:	a81d                	j	20402fa4 <_close_r>

20402f70 <_write_r>:
_write_r():
20402f70:	1141                	addi	sp,sp,-16
20402f72:	c422                	sw	s0,8(sp)
20402f74:	842a                	mv	s0,a0
20402f76:	852e                	mv	a0,a1
20402f78:	85b2                	mv	a1,a2
20402f7a:	8636                	mv	a2,a3
20402f7c:	5fc00797          	auipc	a5,0x5fc00
20402f80:	1007aa23          	sw	zero,276(a5) # 80003090 <errno>
20402f84:	c606                	sw	ra,12(sp)
20402f86:	2d39                	jal	204035a4 <_write>
20402f88:	57fd                	li	a5,-1
20402f8a:	00f51963          	bne	a0,a5,20402f9c <_write_r+0x2c>
20402f8e:	5fc00797          	auipc	a5,0x5fc00
20402f92:	10278793          	addi	a5,a5,258 # 80003090 <errno>
20402f96:	439c                	lw	a5,0(a5)
20402f98:	c391                	beqz	a5,20402f9c <_write_r+0x2c>
20402f9a:	c01c                	sw	a5,0(s0)
20402f9c:	40b2                	lw	ra,12(sp)
20402f9e:	4422                	lw	s0,8(sp)
20402fa0:	0141                	addi	sp,sp,16
20402fa2:	8082                	ret

20402fa4 <_close_r>:
_close_r():
20402fa4:	1141                	addi	sp,sp,-16
20402fa6:	c422                	sw	s0,8(sp)
20402fa8:	842a                	mv	s0,a0
20402faa:	852e                	mv	a0,a1
20402fac:	5fc00797          	auipc	a5,0x5fc00
20402fb0:	0e07a223          	sw	zero,228(a5) # 80003090 <errno>
20402fb4:	c606                	sw	ra,12(sp)
20402fb6:	2955                	jal	2040346a <_close>
20402fb8:	57fd                	li	a5,-1
20402fba:	00f51963          	bne	a0,a5,20402fcc <_close_r+0x28>
20402fbe:	5fc00797          	auipc	a5,0x5fc00
20402fc2:	0d278793          	addi	a5,a5,210 # 80003090 <errno>
20402fc6:	439c                	lw	a5,0(a5)
20402fc8:	c391                	beqz	a5,20402fcc <_close_r+0x28>
20402fca:	c01c                	sw	a5,0(s0)
20402fcc:	40b2                	lw	ra,12(sp)
20402fce:	4422                	lw	s0,8(sp)
20402fd0:	0141                	addi	sp,sp,16
20402fd2:	8082                	ret

20402fd4 <_fstat_r>:
_fstat_r():
20402fd4:	1141                	addi	sp,sp,-16
20402fd6:	c422                	sw	s0,8(sp)
20402fd8:	842a                	mv	s0,a0
20402fda:	852e                	mv	a0,a1
20402fdc:	85b2                	mv	a1,a2
20402fde:	5fc00797          	auipc	a5,0x5fc00
20402fe2:	0a07a923          	sw	zero,178(a5) # 80003090 <errno>
20402fe6:	c606                	sw	ra,12(sp)
20402fe8:	2155                	jal	2040348c <_fstat>
20402fea:	57fd                	li	a5,-1
20402fec:	00f51963          	bne	a0,a5,20402ffe <_fstat_r+0x2a>
20402ff0:	5fc00797          	auipc	a5,0x5fc00
20402ff4:	0a078793          	addi	a5,a5,160 # 80003090 <errno>
20402ff8:	439c                	lw	a5,0(a5)
20402ffa:	c391                	beqz	a5,20402ffe <_fstat_r+0x2a>
20402ffc:	c01c                	sw	a5,0(s0)
20402ffe:	40b2                	lw	ra,12(sp)
20403000:	4422                	lw	s0,8(sp)
20403002:	0141                	addi	sp,sp,16
20403004:	8082                	ret

20403006 <_isatty_r>:
_isatty_r():
20403006:	1141                	addi	sp,sp,-16
20403008:	c422                	sw	s0,8(sp)
2040300a:	842a                	mv	s0,a0
2040300c:	852e                	mv	a0,a1
2040300e:	5fc00797          	auipc	a5,0x5fc00
20403012:	0807a123          	sw	zero,130(a5) # 80003090 <errno>
20403016:	c606                	sw	ra,12(sp)
20403018:	2969                	jal	204034b2 <_isatty>
2040301a:	57fd                	li	a5,-1
2040301c:	00f51963          	bne	a0,a5,2040302e <_isatty_r+0x28>
20403020:	5fc00797          	auipc	a5,0x5fc00
20403024:	07078793          	addi	a5,a5,112 # 80003090 <errno>
20403028:	439c                	lw	a5,0(a5)
2040302a:	c391                	beqz	a5,2040302e <_isatty_r+0x28>
2040302c:	c01c                	sw	a5,0(s0)
2040302e:	40b2                	lw	ra,12(sp)
20403030:	4422                	lw	s0,8(sp)
20403032:	0141                	addi	sp,sp,16
20403034:	8082                	ret

20403036 <_lseek_r>:
_lseek_r():
20403036:	1141                	addi	sp,sp,-16
20403038:	c422                	sw	s0,8(sp)
2040303a:	842a                	mv	s0,a0
2040303c:	852e                	mv	a0,a1
2040303e:	85b2                	mv	a1,a2
20403040:	8636                	mv	a2,a3
20403042:	5fc00797          	auipc	a5,0x5fc00
20403046:	0407a723          	sw	zero,78(a5) # 80003090 <errno>
2040304a:	c606                	sw	ra,12(sp)
2040304c:	2159                	jal	204034d2 <_lseek>
2040304e:	57fd                	li	a5,-1
20403050:	00f51963          	bne	a0,a5,20403062 <_lseek_r+0x2c>
20403054:	5fc00797          	auipc	a5,0x5fc00
20403058:	03c78793          	addi	a5,a5,60 # 80003090 <errno>
2040305c:	439c                	lw	a5,0(a5)
2040305e:	c391                	beqz	a5,20403062 <_lseek_r+0x2c>
20403060:	c01c                	sw	a5,0(s0)
20403062:	40b2                	lw	ra,12(sp)
20403064:	4422                	lw	s0,8(sp)
20403066:	0141                	addi	sp,sp,16
20403068:	8082                	ret

2040306a <memchr>:
memchr():
2040306a:	0ff5f593          	andi	a1,a1,255
2040306e:	962a                	add	a2,a2,a0
20403070:	00c51463          	bne	a0,a2,20403078 <memchr+0xe>
20403074:	4501                	li	a0,0
20403076:	8082                	ret
20403078:	00054783          	lbu	a5,0(a0)
2040307c:	feb78de3          	beq	a5,a1,20403076 <memchr+0xc>
20403080:	0505                	addi	a0,a0,1
20403082:	b7fd                	j	20403070 <memchr+0x6>

20403084 <__malloc_lock>:
__malloc_lock():
20403084:	8082                	ret

20403086 <__malloc_unlock>:
__malloc_unlock():
20403086:	8082                	ret

20403088 <_printf_common>:
_printf_common():
20403088:	7179                	addi	sp,sp,-48
2040308a:	ca56                	sw	s5,20(sp)
2040308c:	499c                	lw	a5,16(a1)
2040308e:	8aba                	mv	s5,a4
20403090:	4598                	lw	a4,8(a1)
20403092:	d422                	sw	s0,40(sp)
20403094:	d226                	sw	s1,36(sp)
20403096:	ce4e                	sw	s3,28(sp)
20403098:	cc52                	sw	s4,24(sp)
2040309a:	d606                	sw	ra,44(sp)
2040309c:	d04a                	sw	s2,32(sp)
2040309e:	c85a                	sw	s6,16(sp)
204030a0:	c65e                	sw	s7,12(sp)
204030a2:	89aa                	mv	s3,a0
204030a4:	842e                	mv	s0,a1
204030a6:	84b2                	mv	s1,a2
204030a8:	8a36                	mv	s4,a3
204030aa:	00e7d363          	bge	a5,a4,204030b0 <_printf_common+0x28>
204030ae:	87ba                	mv	a5,a4
204030b0:	c09c                	sw	a5,0(s1)
204030b2:	04344703          	lbu	a4,67(s0)
204030b6:	c319                	beqz	a4,204030bc <_printf_common+0x34>
204030b8:	0785                	addi	a5,a5,1
204030ba:	c09c                	sw	a5,0(s1)
204030bc:	401c                	lw	a5,0(s0)
204030be:	0207f793          	andi	a5,a5,32
204030c2:	c781                	beqz	a5,204030ca <_printf_common+0x42>
204030c4:	409c                	lw	a5,0(s1)
204030c6:	0789                	addi	a5,a5,2
204030c8:	c09c                	sw	a5,0(s1)
204030ca:	00042903          	lw	s2,0(s0)
204030ce:	00697913          	andi	s2,s2,6
204030d2:	00091a63          	bnez	s2,204030e6 <_printf_common+0x5e>
204030d6:	01940b13          	addi	s6,s0,25
204030da:	5bfd                	li	s7,-1
204030dc:	445c                	lw	a5,12(s0)
204030de:	4098                	lw	a4,0(s1)
204030e0:	8f99                	sub	a5,a5,a4
204030e2:	04f94c63          	blt	s2,a5,2040313a <_printf_common+0xb2>
204030e6:	401c                	lw	a5,0(s0)
204030e8:	04344683          	lbu	a3,67(s0)
204030ec:	0207f793          	andi	a5,a5,32
204030f0:	00d036b3          	snez	a3,a3
204030f4:	eba5                	bnez	a5,20403164 <_printf_common+0xdc>
204030f6:	04340613          	addi	a2,s0,67
204030fa:	85d2                	mv	a1,s4
204030fc:	854e                	mv	a0,s3
204030fe:	9a82                	jalr	s5
20403100:	57fd                	li	a5,-1
20403102:	04f50363          	beq	a0,a5,20403148 <_printf_common+0xc0>
20403106:	401c                	lw	a5,0(s0)
20403108:	4611                	li	a2,4
2040310a:	4098                	lw	a4,0(s1)
2040310c:	8b99                	andi	a5,a5,6
2040310e:	4454                	lw	a3,12(s0)
20403110:	4481                	li	s1,0
20403112:	00c79763          	bne	a5,a2,20403120 <_printf_common+0x98>
20403116:	40e684b3          	sub	s1,a3,a4
2040311a:	0004d363          	bgez	s1,20403120 <_printf_common+0x98>
2040311e:	4481                	li	s1,0
20403120:	441c                	lw	a5,8(s0)
20403122:	4818                	lw	a4,16(s0)
20403124:	00f75463          	bge	a4,a5,2040312c <_printf_common+0xa4>
20403128:	8f99                	sub	a5,a5,a4
2040312a:	94be                	add	s1,s1,a5
2040312c:	4901                	li	s2,0
2040312e:	0469                	addi	s0,s0,26
20403130:	5b7d                	li	s6,-1
20403132:	05249863          	bne	s1,s2,20403182 <_printf_common+0xfa>
20403136:	4501                	li	a0,0
20403138:	a809                	j	2040314a <_printf_common+0xc2>
2040313a:	4685                	li	a3,1
2040313c:	865a                	mv	a2,s6
2040313e:	85d2                	mv	a1,s4
20403140:	854e                	mv	a0,s3
20403142:	9a82                	jalr	s5
20403144:	01751e63          	bne	a0,s7,20403160 <_printf_common+0xd8>
20403148:	557d                	li	a0,-1
2040314a:	50b2                	lw	ra,44(sp)
2040314c:	5422                	lw	s0,40(sp)
2040314e:	5492                	lw	s1,36(sp)
20403150:	5902                	lw	s2,32(sp)
20403152:	49f2                	lw	s3,28(sp)
20403154:	4a62                	lw	s4,24(sp)
20403156:	4ad2                	lw	s5,20(sp)
20403158:	4b42                	lw	s6,16(sp)
2040315a:	4bb2                	lw	s7,12(sp)
2040315c:	6145                	addi	sp,sp,48
2040315e:	8082                	ret
20403160:	0905                	addi	s2,s2,1
20403162:	bfad                	j	204030dc <_printf_common+0x54>
20403164:	00d40733          	add	a4,s0,a3
20403168:	03000613          	li	a2,48
2040316c:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffb3af>
20403170:	04544703          	lbu	a4,69(s0)
20403174:	00168793          	addi	a5,a3,1
20403178:	97a2                	add	a5,a5,s0
2040317a:	0689                	addi	a3,a3,2
2040317c:	04e781a3          	sb	a4,67(a5)
20403180:	bf9d                	j	204030f6 <_printf_common+0x6e>
20403182:	4685                	li	a3,1
20403184:	8622                	mv	a2,s0
20403186:	85d2                	mv	a1,s4
20403188:	854e                	mv	a0,s3
2040318a:	9a82                	jalr	s5
2040318c:	fb650ee3          	beq	a0,s6,20403148 <_printf_common+0xc0>
20403190:	0905                	addi	s2,s2,1
20403192:	b745                	j	20403132 <_printf_common+0xaa>

20403194 <_printf_i>:
_printf_i():
20403194:	7179                	addi	sp,sp,-48
20403196:	d422                	sw	s0,40(sp)
20403198:	d226                	sw	s1,36(sp)
2040319a:	d04a                	sw	s2,32(sp)
2040319c:	ce4e                	sw	s3,28(sp)
2040319e:	d606                	sw	ra,44(sp)
204031a0:	cc52                	sw	s4,24(sp)
204031a2:	ca56                	sw	s5,20(sp)
204031a4:	c85a                	sw	s6,16(sp)
204031a6:	89b6                	mv	s3,a3
204031a8:	0185c683          	lbu	a3,24(a1)
204031ac:	06e00793          	li	a5,110
204031b0:	8932                	mv	s2,a2
204031b2:	84aa                	mv	s1,a0
204031b4:	842e                	mv	s0,a1
204031b6:	04358613          	addi	a2,a1,67
204031ba:	1ef68063          	beq	a3,a5,2040339a <_printf_i+0x206>
204031be:	06d7e263          	bltu	a5,a3,20403222 <_printf_i+0x8e>
204031c2:	06300793          	li	a5,99
204031c6:	0af68263          	beq	a3,a5,2040326a <_printf_i+0xd6>
204031ca:	00d7ed63          	bltu	a5,a3,204031e4 <_printf_i+0x50>
204031ce:	1e068a63          	beqz	a3,204033c2 <_printf_i+0x22e>
204031d2:	05800793          	li	a5,88
204031d6:	16f68663          	beq	a3,a5,20403342 <_printf_i+0x1ae>
204031da:	04240a93          	addi	s5,s0,66
204031de:	04d40123          	sb	a3,66(s0)
204031e2:	a869                	j	2040327c <_printf_i+0xe8>
204031e4:	06400793          	li	a5,100
204031e8:	00f68663          	beq	a3,a5,204031f4 <_printf_i+0x60>
204031ec:	06900793          	li	a5,105
204031f0:	fef695e3          	bne	a3,a5,204031da <_printf_i+0x46>
204031f4:	401c                	lw	a5,0(s0)
204031f6:	4308                	lw	a0,0(a4)
204031f8:	0807f693          	andi	a3,a5,128
204031fc:	00450593          	addi	a1,a0,4
20403200:	c2c1                	beqz	a3,20403280 <_printf_i+0xec>
20403202:	411c                	lw	a5,0(a0)
20403204:	c30c                	sw	a1,0(a4)
20403206:	0007d863          	bgez	a5,20403216 <_printf_i+0x82>
2040320a:	02d00713          	li	a4,45
2040320e:	40f007b3          	neg	a5,a5
20403212:	04e401a3          	sb	a4,67(s0)
20403216:	00004697          	auipc	a3,0x4
2040321a:	e5268693          	addi	a3,a3,-430 # 20407068 <__sf_fake_stdout+0x34>
2040321e:	4729                	li	a4,10
20403220:	a065                	j	204032c8 <_printf_i+0x134>
20403222:	07300793          	li	a5,115
20403226:	1af68263          	beq	a3,a5,204033ca <_printf_i+0x236>
2040322a:	00d7ef63          	bltu	a5,a3,20403248 <_printf_i+0xb4>
2040322e:	06f00793          	li	a5,111
20403232:	04f68f63          	beq	a3,a5,20403290 <_printf_i+0xfc>
20403236:	07000793          	li	a5,112
2040323a:	faf690e3          	bne	a3,a5,204031da <_printf_i+0x46>
2040323e:	419c                	lw	a5,0(a1)
20403240:	0207e793          	ori	a5,a5,32
20403244:	c19c                	sw	a5,0(a1)
20403246:	a809                	j	20403258 <_printf_i+0xc4>
20403248:	07500793          	li	a5,117
2040324c:	04f68263          	beq	a3,a5,20403290 <_printf_i+0xfc>
20403250:	07800793          	li	a5,120
20403254:	f8f693e3          	bne	a3,a5,204031da <_printf_i+0x46>
20403258:	07800793          	li	a5,120
2040325c:	04f402a3          	sb	a5,69(s0)
20403260:	00004697          	auipc	a3,0x4
20403264:	e1c68693          	addi	a3,a3,-484 # 2040707c <__sf_fake_stdout+0x48>
20403268:	a0dd                	j	2040334e <_printf_i+0x1ba>
2040326a:	431c                	lw	a5,0(a4)
2040326c:	04258a93          	addi	s5,a1,66
20403270:	00478693          	addi	a3,a5,4
20403274:	439c                	lw	a5,0(a5)
20403276:	c314                	sw	a3,0(a4)
20403278:	04f58123          	sb	a5,66(a1)
2040327c:	4785                	li	a5,1
2040327e:	a2ad                	j	204033e8 <_printf_i+0x254>
20403280:	0407f693          	andi	a3,a5,64
20403284:	411c                	lw	a5,0(a0)
20403286:	c30c                	sw	a1,0(a4)
20403288:	debd                	beqz	a3,20403206 <_printf_i+0x72>
2040328a:	07c2                	slli	a5,a5,0x10
2040328c:	87c1                	srai	a5,a5,0x10
2040328e:	bfa5                	j	20403206 <_printf_i+0x72>
20403290:	400c                	lw	a1,0(s0)
20403292:	431c                	lw	a5,0(a4)
20403294:	0805f813          	andi	a6,a1,128
20403298:	00478513          	addi	a0,a5,4
2040329c:	00080563          	beqz	a6,204032a6 <_printf_i+0x112>
204032a0:	c308                	sw	a0,0(a4)
204032a2:	439c                	lw	a5,0(a5)
204032a4:	a039                	j	204032b2 <_printf_i+0x11e>
204032a6:	0405f593          	andi	a1,a1,64
204032aa:	c308                	sw	a0,0(a4)
204032ac:	d9fd                	beqz	a1,204032a2 <_printf_i+0x10e>
204032ae:	0007d783          	lhu	a5,0(a5)
204032b2:	06f00713          	li	a4,111
204032b6:	0ce68a63          	beq	a3,a4,2040338a <_printf_i+0x1f6>
204032ba:	00004697          	auipc	a3,0x4
204032be:	dae68693          	addi	a3,a3,-594 # 20407068 <__sf_fake_stdout+0x34>
204032c2:	4729                	li	a4,10
204032c4:	040401a3          	sb	zero,67(s0)
204032c8:	404c                	lw	a1,4(s0)
204032ca:	c40c                	sw	a1,8(s0)
204032cc:	0005c563          	bltz	a1,204032d6 <_printf_i+0x142>
204032d0:	4008                	lw	a0,0(s0)
204032d2:	996d                	andi	a0,a0,-5
204032d4:	c008                	sw	a0,0(s0)
204032d6:	e399                	bnez	a5,204032dc <_printf_i+0x148>
204032d8:	8ab2                	mv	s5,a2
204032da:	cd91                	beqz	a1,204032f6 <_printf_i+0x162>
204032dc:	8ab2                	mv	s5,a2
204032de:	02e7f5b3          	remu	a1,a5,a4
204032e2:	1afd                	addi	s5,s5,-1
204032e4:	95b6                	add	a1,a1,a3
204032e6:	0005c583          	lbu	a1,0(a1)
204032ea:	00ba8023          	sb	a1,0(s5)
204032ee:	02e7d5b3          	divu	a1,a5,a4
204032f2:	0ae7f263          	bgeu	a5,a4,20403396 <_printf_i+0x202>
204032f6:	47a1                	li	a5,8
204032f8:	00f71e63          	bne	a4,a5,20403314 <_printf_i+0x180>
204032fc:	401c                	lw	a5,0(s0)
204032fe:	8b85                	andi	a5,a5,1
20403300:	cb91                	beqz	a5,20403314 <_printf_i+0x180>
20403302:	4058                	lw	a4,4(s0)
20403304:	481c                	lw	a5,16(s0)
20403306:	00e7c763          	blt	a5,a4,20403314 <_printf_i+0x180>
2040330a:	03000793          	li	a5,48
2040330e:	fefa8fa3          	sb	a5,-1(s5)
20403312:	1afd                	addi	s5,s5,-1
20403314:	41560633          	sub	a2,a2,s5
20403318:	c810                	sw	a2,16(s0)
2040331a:	874e                	mv	a4,s3
2040331c:	86ca                	mv	a3,s2
2040331e:	0070                	addi	a2,sp,12
20403320:	85a2                	mv	a1,s0
20403322:	8526                	mv	a0,s1
20403324:	3395                	jal	20403088 <_printf_common>
20403326:	5a7d                	li	s4,-1
20403328:	0d451463          	bne	a0,s4,204033f0 <_printf_i+0x25c>
2040332c:	557d                	li	a0,-1
2040332e:	50b2                	lw	ra,44(sp)
20403330:	5422                	lw	s0,40(sp)
20403332:	5492                	lw	s1,36(sp)
20403334:	5902                	lw	s2,32(sp)
20403336:	49f2                	lw	s3,28(sp)
20403338:	4a62                	lw	s4,24(sp)
2040333a:	4ad2                	lw	s5,20(sp)
2040333c:	4b42                	lw	s6,16(sp)
2040333e:	6145                	addi	sp,sp,48
20403340:	8082                	ret
20403342:	04d582a3          	sb	a3,69(a1)
20403346:	00004697          	auipc	a3,0x4
2040334a:	d2268693          	addi	a3,a3,-734 # 20407068 <__sf_fake_stdout+0x34>
2040334e:	400c                	lw	a1,0(s0)
20403350:	4308                	lw	a0,0(a4)
20403352:	0805f813          	andi	a6,a1,128
20403356:	411c                	lw	a5,0(a0)
20403358:	0511                	addi	a0,a0,4
2040335a:	02080063          	beqz	a6,2040337a <_printf_i+0x1e6>
2040335e:	c308                	sw	a0,0(a4)
20403360:	0015f713          	andi	a4,a1,1
20403364:	c701                	beqz	a4,2040336c <_printf_i+0x1d8>
20403366:	0205e593          	ori	a1,a1,32
2040336a:	c00c                	sw	a1,0(s0)
2040336c:	4741                	li	a4,16
2040336e:	fbb9                	bnez	a5,204032c4 <_printf_i+0x130>
20403370:	400c                	lw	a1,0(s0)
20403372:	fdf5f593          	andi	a1,a1,-33
20403376:	c00c                	sw	a1,0(s0)
20403378:	b7b1                	j	204032c4 <_printf_i+0x130>
2040337a:	0405f813          	andi	a6,a1,64
2040337e:	c308                	sw	a0,0(a4)
20403380:	fe0800e3          	beqz	a6,20403360 <_printf_i+0x1cc>
20403384:	07c2                	slli	a5,a5,0x10
20403386:	83c1                	srli	a5,a5,0x10
20403388:	bfe1                	j	20403360 <_printf_i+0x1cc>
2040338a:	00004697          	auipc	a3,0x4
2040338e:	cde68693          	addi	a3,a3,-802 # 20407068 <__sf_fake_stdout+0x34>
20403392:	4721                	li	a4,8
20403394:	bf05                	j	204032c4 <_printf_i+0x130>
20403396:	87ae                	mv	a5,a1
20403398:	b799                	j	204032de <_printf_i+0x14a>
2040339a:	4194                	lw	a3,0(a1)
2040339c:	431c                	lw	a5,0(a4)
2040339e:	49cc                	lw	a1,20(a1)
204033a0:	0806f813          	andi	a6,a3,128
204033a4:	00478513          	addi	a0,a5,4
204033a8:	00080663          	beqz	a6,204033b4 <_printf_i+0x220>
204033ac:	c308                	sw	a0,0(a4)
204033ae:	439c                	lw	a5,0(a5)
204033b0:	c38c                	sw	a1,0(a5)
204033b2:	a801                	j	204033c2 <_printf_i+0x22e>
204033b4:	c308                	sw	a0,0(a4)
204033b6:	0406f693          	andi	a3,a3,64
204033ba:	439c                	lw	a5,0(a5)
204033bc:	daf5                	beqz	a3,204033b0 <_printf_i+0x21c>
204033be:	00b79023          	sh	a1,0(a5)
204033c2:	00042823          	sw	zero,16(s0)
204033c6:	8ab2                	mv	s5,a2
204033c8:	bf89                	j	2040331a <_printf_i+0x186>
204033ca:	431c                	lw	a5,0(a4)
204033cc:	41d0                	lw	a2,4(a1)
204033ce:	4581                	li	a1,0
204033d0:	00478693          	addi	a3,a5,4
204033d4:	c314                	sw	a3,0(a4)
204033d6:	0007aa83          	lw	s5,0(a5)
204033da:	8556                	mv	a0,s5
204033dc:	3179                	jal	2040306a <memchr>
204033de:	c501                	beqz	a0,204033e6 <_printf_i+0x252>
204033e0:	41550533          	sub	a0,a0,s5
204033e4:	c048                	sw	a0,4(s0)
204033e6:	405c                	lw	a5,4(s0)
204033e8:	c81c                	sw	a5,16(s0)
204033ea:	040401a3          	sb	zero,67(s0)
204033ee:	b735                	j	2040331a <_printf_i+0x186>
204033f0:	4814                	lw	a3,16(s0)
204033f2:	8656                	mv	a2,s5
204033f4:	85ca                	mv	a1,s2
204033f6:	8526                	mv	a0,s1
204033f8:	9982                	jalr	s3
204033fa:	f34509e3          	beq	a0,s4,2040332c <_printf_i+0x198>
204033fe:	401c                	lw	a5,0(s0)
20403400:	8b89                	andi	a5,a5,2
20403402:	e78d                	bnez	a5,2040342c <_printf_i+0x298>
20403404:	47b2                	lw	a5,12(sp)
20403406:	4448                	lw	a0,12(s0)
20403408:	f2f553e3          	bge	a0,a5,2040332e <_printf_i+0x19a>
2040340c:	853e                	mv	a0,a5
2040340e:	b705                	j	2040332e <_printf_i+0x19a>
20403410:	4685                	li	a3,1
20403412:	8656                	mv	a2,s5
20403414:	85ca                	mv	a1,s2
20403416:	8526                	mv	a0,s1
20403418:	9982                	jalr	s3
2040341a:	f16509e3          	beq	a0,s6,2040332c <_printf_i+0x198>
2040341e:	0a05                	addi	s4,s4,1
20403420:	445c                	lw	a5,12(s0)
20403422:	4732                	lw	a4,12(sp)
20403424:	8f99                	sub	a5,a5,a4
20403426:	fefa45e3          	blt	s4,a5,20403410 <_printf_i+0x27c>
2040342a:	bfe9                	j	20403404 <_printf_i+0x270>
2040342c:	4a01                	li	s4,0
2040342e:	01940a93          	addi	s5,s0,25
20403432:	5b7d                	li	s6,-1
20403434:	b7f5                	j	20403420 <_printf_i+0x28c>

20403436 <_read_r>:
_read_r():
20403436:	1141                	addi	sp,sp,-16
20403438:	c422                	sw	s0,8(sp)
2040343a:	842a                	mv	s0,a0
2040343c:	852e                	mv	a0,a1
2040343e:	85b2                	mv	a1,a2
20403440:	8636                	mv	a2,a3
20403442:	5fc00797          	auipc	a5,0x5fc00
20403446:	c407a723          	sw	zero,-946(a5) # 80003090 <errno>
2040344a:	c606                	sw	ra,12(sp)
2040344c:	2845                	jal	204034fc <_read>
2040344e:	57fd                	li	a5,-1
20403450:	00f51963          	bne	a0,a5,20403462 <_read_r+0x2c>
20403454:	5fc00797          	auipc	a5,0x5fc00
20403458:	c3c78793          	addi	a5,a5,-964 # 80003090 <errno>
2040345c:	439c                	lw	a5,0(a5)
2040345e:	c391                	beqz	a5,20403462 <_read_r+0x2c>
20403460:	c01c                	sw	a5,0(s0)
20403462:	40b2                	lw	ra,12(sp)
20403464:	4422                	lw	s0,8(sp)
20403466:	0141                	addi	sp,sp,16
20403468:	8082                	ret

2040346a <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
2040346a:	1101                	addi	sp,sp,-32
2040346c:	ce06                	sw	ra,28(sp)
2040346e:	cc22                	sw	s0,24(sp)
20403470:	1000                	addi	s0,sp,32
20403472:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20403476:	225d                	jal	2040361c <__errno>
20403478:	872a                	mv	a4,a0
2040347a:	05800793          	li	a5,88
2040347e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20403480:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20403482:	853e                	mv	a0,a5
20403484:	40f2                	lw	ra,28(sp)
20403486:	4462                	lw	s0,24(sp)
20403488:	6105                	addi	sp,sp,32
2040348a:	8082                	ret

2040348c <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
2040348c:	1101                	addi	sp,sp,-32
2040348e:	ce06                	sw	ra,28(sp)
20403490:	cc22                	sw	s0,24(sp)
20403492:	1000                	addi	s0,sp,32
20403494:	fea42623          	sw	a0,-20(s0)
20403498:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
2040349c:	2241                	jal	2040361c <__errno>
2040349e:	872a                	mv	a4,a0
204034a0:	fa800793          	li	a5,-88
204034a4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
204034a6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
204034a8:	853e                	mv	a0,a5
204034aa:	40f2                	lw	ra,28(sp)
204034ac:	4462                	lw	s0,24(sp)
204034ae:	6105                	addi	sp,sp,32
204034b0:	8082                	ret

204034b2 <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
204034b2:	1101                	addi	sp,sp,-32
204034b4:	ce22                	sw	s0,28(sp)
204034b6:	1000                	addi	s0,sp,32
204034b8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
204034bc:	fec42783          	lw	a5,-20(s0)
204034c0:	17fd                	addi	a5,a5,-1
204034c2:	0017b793          	seqz	a5,a5
204034c6:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
204034ca:	853e                	mv	a0,a5
204034cc:	4472                	lw	s0,28(sp)
204034ce:	6105                	addi	sp,sp,32
204034d0:	8082                	ret

204034d2 <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
204034d2:	1101                	addi	sp,sp,-32
204034d4:	ce06                	sw	ra,28(sp)
204034d6:	cc22                	sw	s0,24(sp)
204034d8:	1000                	addi	s0,sp,32
204034da:	fea42623          	sw	a0,-20(s0)
204034de:	feb42423          	sw	a1,-24(s0)
204034e2:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
204034e6:	2a1d                	jal	2040361c <__errno>
204034e8:	872a                	mv	a4,a0
204034ea:	05800793          	li	a5,88
204034ee:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
204034f0:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
204034f2:	853e                	mv	a0,a5
204034f4:	40f2                	lw	ra,28(sp)
204034f6:	4462                	lw	s0,24(sp)
204034f8:	6105                	addi	sp,sp,32
204034fa:	8082                	ret

204034fc <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
204034fc:	1101                	addi	sp,sp,-32
204034fe:	ce06                	sw	ra,28(sp)
20403500:	cc22                	sw	s0,24(sp)
20403502:	1000                	addi	s0,sp,32
20403504:	fea42623          	sw	a0,-20(s0)
20403508:	feb42423          	sw	a1,-24(s0)
2040350c:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20403510:	2231                	jal	2040361c <__errno>
20403512:	872a                	mv	a4,a0
20403514:	05800793          	li	a5,88
20403518:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
2040351a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
2040351c:	853e                	mv	a0,a5
2040351e:	40f2                	lw	ra,28(sp)
20403520:	4462                	lw	s0,24(sp)
20403522:	6105                	addi	sp,sp,32
20403524:	8082                	ret

20403526 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20403526:	7179                	addi	sp,sp,-48
20403528:	d622                	sw	s0,44(sp)
2040352a:	1800                	addi	s0,sp,48
2040352c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20403530:	800007b7          	lui	a5,0x80000
20403534:	7a87a783          	lw	a5,1960(a5) # 800007a8 <metal_segment_heap_target_end+0xffffcb14>
20403538:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
2040353c:	800037b7          	lui	a5,0x80003
20403540:	49478713          	addi	a4,a5,1172 # 80003494 <metal_segment_heap_target_end+0xfffff800>
20403544:	800047b7          	lui	a5,0x80004
20403548:	c9478793          	addi	a5,a5,-876 # 80003c94 <metal_segment_heap_target_end+0x0>
2040354c:	00f71463          	bne	a4,a5,20403554 <_sbrk+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20403550:	57fd                	li	a5,-1
20403552:	a0a9                	j	2040359c <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20403554:	800007b7          	lui	a5,0x80000
20403558:	7a87a703          	lw	a4,1960(a5) # 800007a8 <metal_segment_heap_target_end+0xffffcb14>
2040355c:	fdc42783          	lw	a5,-36(s0)
20403560:	973e                	add	a4,a4,a5
20403562:	800047b7          	lui	a5,0x80004
20403566:	c9478793          	addi	a5,a5,-876 # 80003c94 <metal_segment_heap_target_end+0x0>
2040356a:	02f77063          	bgeu	a4,a5,2040358a <_sbrk+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
2040356e:	800007b7          	lui	a5,0x80000
20403572:	7a87a703          	lw	a4,1960(a5) # 800007a8 <metal_segment_heap_target_end+0xffffcb14>
20403576:	fdc42783          	lw	a5,-36(s0)
2040357a:	973e                	add	a4,a4,a5
2040357c:	800007b7          	lui	a5,0x80000
20403580:	7ae7a423          	sw	a4,1960(a5) # 800007a8 <metal_segment_heap_target_end+0xffffcb14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20403584:	fec42783          	lw	a5,-20(s0)
20403588:	a811                	j	2040359c <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
2040358a:	800007b7          	lui	a5,0x80000
2040358e:	80004737          	lui	a4,0x80004
20403592:	c9470713          	addi	a4,a4,-876 # 80003c94 <metal_segment_heap_target_end+0x0>
20403596:	7ae7a423          	sw	a4,1960(a5) # 800007a8 <metal_segment_heap_target_end+0xffffcb14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
2040359a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
2040359c:	853e                	mv	a0,a5
2040359e:	5432                	lw	s0,44(sp)
204035a0:	6145                	addi	sp,sp,48
204035a2:	8082                	ret

204035a4 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
204035a4:	7179                	addi	sp,sp,-48
204035a6:	d606                	sw	ra,44(sp)
204035a8:	d422                	sw	s0,40(sp)
204035aa:	1800                	addi	s0,sp,48
204035ac:	fca42e23          	sw	a0,-36(s0)
204035b0:	fcb42c23          	sw	a1,-40(s0)
204035b4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
204035b8:	fdc42703          	lw	a4,-36(s0)
204035bc:	4785                	li	a5,1
204035be:	00f70963          	beq	a4,a5,204035d0 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
204035c2:	28a9                	jal	2040361c <__errno>
204035c4:	872a                	mv	a4,a0
204035c6:	05800793          	li	a5,88
204035ca:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
204035cc:	57fd                	li	a5,-1
204035ce:	a82d                	j	20403608 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
204035d0:	fd842783          	lw	a5,-40(s0)
204035d4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
204035d8:	fe042623          	sw	zero,-20(s0)
204035dc:	a839                	j	204035fa <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
204035de:	fe842703          	lw	a4,-24(s0)
204035e2:	fec42783          	lw	a5,-20(s0)
204035e6:	97ba                	add	a5,a5,a4
204035e8:	0007c783          	lbu	a5,0(a5)
204035ec:	853e                	mv	a0,a5
204035ee:	2cb1                	jal	2040384a <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
204035f0:	fec42783          	lw	a5,-20(s0)
204035f4:	0785                	addi	a5,a5,1
204035f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
204035fa:	fec42703          	lw	a4,-20(s0)
204035fe:	fd442783          	lw	a5,-44(s0)
20403602:	fcf76ee3          	bltu	a4,a5,204035de <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20403606:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20403608:	853e                	mv	a0,a5
2040360a:	50b2                	lw	ra,44(sp)
2040360c:	5422                	lw	s0,40(sp)
2040360e:	6145                	addi	sp,sp,48
20403610:	8082                	ret

20403612 <atexit>:
atexit():
20403612:	85aa                	mv	a1,a0
20403614:	4681                	li	a3,0
20403616:	4601                	li	a2,0
20403618:	4501                	li	a0,0
2040361a:	a8f1                	j	204036f6 <__register_exitproc>

2040361c <__errno>:
__errno():
2040361c:	5fbfd797          	auipc	a5,0x5fbfd
20403620:	18478793          	addi	a5,a5,388 # 800007a0 <_impure_ptr>
20403624:	4388                	lw	a0,0(a5)
20403626:	8082                	ret

20403628 <exit>:
exit():
20403628:	1141                	addi	sp,sp,-16
2040362a:	c422                	sw	s0,8(sp)
2040362c:	c606                	sw	ra,12(sp)
2040362e:	00000797          	auipc	a5,0x0
20403632:	15478793          	addi	a5,a5,340 # 20403782 <__call_exitprocs>
20403636:	842a                	mv	s0,a0
20403638:	c399                	beqz	a5,2040363e <exit+0x16>
2040363a:	4581                	li	a1,0
2040363c:	2299                	jal	20403782 <__call_exitprocs>
2040363e:	5fbfd797          	auipc	a5,0x5fbfd
20403642:	16678793          	addi	a5,a5,358 # 800007a4 <_global_impure_ptr>
20403646:	4388                	lw	a0,0(a5)
20403648:	551c                	lw	a5,40(a0)
2040364a:	c391                	beqz	a5,2040364e <exit+0x26>
2040364c:	9782                	jalr	a5
2040364e:	8522                	mv	a0,s0
20403650:	09f030ef          	jal	ra,20406eee <_exit>

20403654 <__libc_fini_array>:
__libc_fini_array():
20403654:	1141                	addi	sp,sp,-16
20403656:	00004797          	auipc	a5,0x4
2040365a:	d8e78793          	addi	a5,a5,-626 # 204073e4 <__fini_array_end>
2040365e:	c422                	sw	s0,8(sp)
20403660:	00004417          	auipc	s0,0x4
20403664:	d8440413          	addi	s0,s0,-636 # 204073e4 <__fini_array_end>
20403668:	8c1d                	sub	s0,s0,a5
2040366a:	c226                	sw	s1,4(sp)
2040366c:	c606                	sw	ra,12(sp)
2040366e:	8409                	srai	s0,s0,0x2
20403670:	84be                	mv	s1,a5
20403672:	e411                	bnez	s0,2040367e <__libc_fini_array+0x2a>
20403674:	40b2                	lw	ra,12(sp)
20403676:	4422                	lw	s0,8(sp)
20403678:	4492                	lw	s1,4(sp)
2040367a:	0141                	addi	sp,sp,16
2040367c:	8082                	ret
2040367e:	147d                	addi	s0,s0,-1
20403680:	00241793          	slli	a5,s0,0x2
20403684:	97a6                	add	a5,a5,s1
20403686:	439c                	lw	a5,0(a5)
20403688:	9782                	jalr	a5
2040368a:	b7e5                	j	20403672 <__libc_fini_array+0x1e>

2040368c <__libc_init_array>:
__libc_init_array():
2040368c:	1141                	addi	sp,sp,-16
2040368e:	00004797          	auipc	a5,0x4
20403692:	d5278793          	addi	a5,a5,-686 # 204073e0 <__init_array_start>
20403696:	c422                	sw	s0,8(sp)
20403698:	00004417          	auipc	s0,0x4
2040369c:	d4840413          	addi	s0,s0,-696 # 204073e0 <__init_array_start>
204036a0:	8c1d                	sub	s0,s0,a5
204036a2:	c226                	sw	s1,4(sp)
204036a4:	c04a                	sw	s2,0(sp)
204036a6:	c606                	sw	ra,12(sp)
204036a8:	8409                	srai	s0,s0,0x2
204036aa:	4481                	li	s1,0
204036ac:	893e                	mv	s2,a5
204036ae:	02849663          	bne	s1,s0,204036da <__libc_init_array+0x4e>
204036b2:	00004797          	auipc	a5,0x4
204036b6:	d2e78793          	addi	a5,a5,-722 # 204073e0 <__init_array_start>
204036ba:	00004417          	auipc	s0,0x4
204036be:	d2a40413          	addi	s0,s0,-726 # 204073e4 <__fini_array_end>
204036c2:	8c1d                	sub	s0,s0,a5
204036c4:	8409                	srai	s0,s0,0x2
204036c6:	4481                	li	s1,0
204036c8:	893e                	mv	s2,a5
204036ca:	00849f63          	bne	s1,s0,204036e8 <__libc_init_array+0x5c>
204036ce:	40b2                	lw	ra,12(sp)
204036d0:	4422                	lw	s0,8(sp)
204036d2:	4492                	lw	s1,4(sp)
204036d4:	4902                	lw	s2,0(sp)
204036d6:	0141                	addi	sp,sp,16
204036d8:	8082                	ret
204036da:	00249793          	slli	a5,s1,0x2
204036de:	97ca                	add	a5,a5,s2
204036e0:	439c                	lw	a5,0(a5)
204036e2:	0485                	addi	s1,s1,1
204036e4:	9782                	jalr	a5
204036e6:	b7e1                	j	204036ae <__libc_init_array+0x22>
204036e8:	00249793          	slli	a5,s1,0x2
204036ec:	97ca                	add	a5,a5,s2
204036ee:	439c                	lw	a5,0(a5)
204036f0:	0485                	addi	s1,s1,1
204036f2:	9782                	jalr	a5
204036f4:	bfd9                	j	204036ca <__libc_init_array+0x3e>

204036f6 <__register_exitproc>:
__register_exitproc():
204036f6:	5fbfd797          	auipc	a5,0x5fbfd
204036fa:	0da78793          	addi	a5,a5,218 # 800007d0 <_global_atexit>
204036fe:	439c                	lw	a5,0(a5)
20403700:	8e2a                	mv	t3,a0
20403702:	e78d                	bnez	a5,2040372c <__register_exitproc+0x36>
20403704:	5fc00717          	auipc	a4,0x5fc00
20403708:	90070713          	addi	a4,a4,-1792 # 80003004 <_global_atexit0>
2040370c:	5fbfd797          	auipc	a5,0x5fbfd
20403710:	0ce7a223          	sw	a4,196(a5) # 800007d0 <_global_atexit>
20403714:	dfbfd517          	auipc	a0,0xdfbfd
20403718:	8ec50513          	addi	a0,a0,-1812 # 0 <__metal_boot_hart>
2040371c:	87ba                	mv	a5,a4
2040371e:	c519                	beqz	a0,2040372c <__register_exitproc+0x36>
20403720:	411c                	lw	a5,0(a0)
20403722:	5fc00517          	auipc	a0,0x5fc00
20403726:	96f52523          	sw	a5,-1686(a0) # 8000308c <_global_atexit0+0x88>
2040372a:	87ba                	mv	a5,a4
2040372c:	43d8                	lw	a4,4(a5)
2040372e:	487d                	li	a6,31
20403730:	557d                	li	a0,-1
20403732:	04e84763          	blt	a6,a4,20403780 <__register_exitproc+0x8a>
20403736:	020e0e63          	beqz	t3,20403772 <__register_exitproc+0x7c>
2040373a:	0887a803          	lw	a6,136(a5)
2040373e:	04080163          	beqz	a6,20403780 <__register_exitproc+0x8a>
20403742:	00271893          	slli	a7,a4,0x2
20403746:	98c2                	add	a7,a7,a6
20403748:	00c8a023          	sw	a2,0(a7)
2040374c:	10082303          	lw	t1,256(a6)
20403750:	4605                	li	a2,1
20403752:	00e61633          	sll	a2,a2,a4
20403756:	00c36333          	or	t1,t1,a2
2040375a:	10682023          	sw	t1,256(a6)
2040375e:	08d8a023          	sw	a3,128(a7)
20403762:	4689                	li	a3,2
20403764:	00de1763          	bne	t3,a3,20403772 <__register_exitproc+0x7c>
20403768:	10482683          	lw	a3,260(a6)
2040376c:	8e55                	or	a2,a2,a3
2040376e:	10c82223          	sw	a2,260(a6)
20403772:	00170693          	addi	a3,a4,1
20403776:	070a                	slli	a4,a4,0x2
20403778:	c3d4                	sw	a3,4(a5)
2040377a:	97ba                	add	a5,a5,a4
2040377c:	c78c                	sw	a1,8(a5)
2040377e:	4501                	li	a0,0
20403780:	8082                	ret

20403782 <__call_exitprocs>:
__call_exitprocs():
20403782:	7179                	addi	sp,sp,-48
20403784:	cc52                	sw	s4,24(sp)
20403786:	ca56                	sw	s5,20(sp)
20403788:	c85a                	sw	s6,16(sp)
2040378a:	c65e                	sw	s7,12(sp)
2040378c:	d606                	sw	ra,44(sp)
2040378e:	d422                	sw	s0,40(sp)
20403790:	d226                	sw	s1,36(sp)
20403792:	d04a                	sw	s2,32(sp)
20403794:	ce4e                	sw	s3,28(sp)
20403796:	c462                	sw	s8,8(sp)
20403798:	8b2a                	mv	s6,a0
2040379a:	8a2e                	mv	s4,a1
2040379c:	5fbfda97          	auipc	s5,0x5fbfd
204037a0:	034a8a93          	addi	s5,s5,52 # 800007d0 <_global_atexit>
204037a4:	4b85                	li	s7,1
204037a6:	000aa403          	lw	s0,0(s5)
204037aa:	c811                	beqz	s0,204037be <__call_exitprocs+0x3c>
204037ac:	4044                	lw	s1,4(s0)
204037ae:	08842983          	lw	s3,136(s0)
204037b2:	fff48913          	addi	s2,s1,-1
204037b6:	048a                	slli	s1,s1,0x2
204037b8:	94a2                	add	s1,s1,s0
204037ba:	00095e63          	bgez	s2,204037d6 <__call_exitprocs+0x54>
204037be:	50b2                	lw	ra,44(sp)
204037c0:	5422                	lw	s0,40(sp)
204037c2:	5492                	lw	s1,36(sp)
204037c4:	5902                	lw	s2,32(sp)
204037c6:	49f2                	lw	s3,28(sp)
204037c8:	4a62                	lw	s4,24(sp)
204037ca:	4ad2                	lw	s5,20(sp)
204037cc:	4b42                	lw	s6,16(sp)
204037ce:	4bb2                	lw	s7,12(sp)
204037d0:	4c22                	lw	s8,8(sp)
204037d2:	6145                	addi	sp,sp,48
204037d4:	8082                	ret
204037d6:	000a0e63          	beqz	s4,204037f2 <__call_exitprocs+0x70>
204037da:	00099563          	bnez	s3,204037e4 <__call_exitprocs+0x62>
204037de:	197d                	addi	s2,s2,-1
204037e0:	14f1                	addi	s1,s1,-4
204037e2:	bfe1                	j	204037ba <__call_exitprocs+0x38>
204037e4:	00291793          	slli	a5,s2,0x2
204037e8:	97ce                	add	a5,a5,s3
204037ea:	0807a783          	lw	a5,128(a5)
204037ee:	ff4798e3          	bne	a5,s4,204037de <__call_exitprocs+0x5c>
204037f2:	4058                	lw	a4,4(s0)
204037f4:	40dc                	lw	a5,4(s1)
204037f6:	177d                	addi	a4,a4,-1
204037f8:	03271863          	bne	a4,s2,20403828 <__call_exitprocs+0xa6>
204037fc:	01242223          	sw	s2,4(s0)
20403800:	dff9                	beqz	a5,204037de <__call_exitprocs+0x5c>
20403802:	00442c03          	lw	s8,4(s0)
20403806:	00098863          	beqz	s3,20403816 <__call_exitprocs+0x94>
2040380a:	1009a683          	lw	a3,256(s3)
2040380e:	012b9733          	sll	a4,s7,s2
20403812:	8ef9                	and	a3,a3,a4
20403814:	ee89                	bnez	a3,2040382e <__call_exitprocs+0xac>
20403816:	9782                	jalr	a5
20403818:	4058                	lw	a4,4(s0)
2040381a:	000aa783          	lw	a5,0(s5)
2040381e:	f98714e3          	bne	a4,s8,204037a6 <__call_exitprocs+0x24>
20403822:	faf40ee3          	beq	s0,a5,204037de <__call_exitprocs+0x5c>
20403826:	b741                	j	204037a6 <__call_exitprocs+0x24>
20403828:	0004a223          	sw	zero,4(s1)
2040382c:	bfd1                	j	20403800 <__call_exitprocs+0x7e>
2040382e:	00291693          	slli	a3,s2,0x2
20403832:	96ce                	add	a3,a3,s3
20403834:	428c                	lw	a1,0(a3)
20403836:	1049a683          	lw	a3,260(s3)
2040383a:	8f75                	and	a4,a4,a3
2040383c:	e701                	bnez	a4,20403844 <__call_exitprocs+0xc2>
2040383e:	855a                	mv	a0,s6
20403840:	9782                	jalr	a5
20403842:	bfd9                	j	20403818 <__call_exitprocs+0x96>
20403844:	852e                	mv	a0,a1
20403846:	9782                	jalr	a5
20403848:	bfc1                	j	20403818 <__call_exitprocs+0x96>

2040384a <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
2040384a:	1101                	addi	sp,sp,-32
2040384c:	ce06                	sw	ra,28(sp)
2040384e:	cc22                	sw	s0,24(sp)
20403850:	1000                	addi	s0,sp,32
20403852:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20403856:	fec42703          	lw	a4,-20(s0)
2040385a:	47a9                	li	a5,10
2040385c:	00f71463          	bne	a4,a5,20403864 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20403860:	4535                	li	a0,13
20403862:	2811                	jal	20403876 <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20403864:	fec42503          	lw	a0,-20(s0)
20403868:	2039                	jal	20403876 <metal_tty_putc_raw>
2040386a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
2040386c:	853e                	mv	a0,a5
2040386e:	40f2                	lw	ra,28(sp)
20403870:	4462                	lw	s0,24(sp)
20403872:	6105                	addi	sp,sp,32
20403874:	8082                	ret

20403876 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20403876:	1101                	addi	sp,sp,-32
20403878:	ce06                	sw	ra,28(sp)
2040387a:	cc22                	sw	s0,24(sp)
2040387c:	1000                	addi	s0,sp,32
2040387e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20403882:	fec42583          	lw	a1,-20(s0)
20403886:	800007b7          	lui	a5,0x80000
2040388a:	78078513          	addi	a0,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcaec>
2040388e:	28b1                	jal	204038ea <metal_uart_putc>
20403890:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20403892:	853e                	mv	a0,a5
20403894:	40f2                	lw	ra,28(sp)
20403896:	4462                	lw	s0,24(sp)
20403898:	6105                	addi	sp,sp,32
2040389a:	8082                	ret

2040389c <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
2040389c:	1141                	addi	sp,sp,-16
2040389e:	c606                	sw	ra,12(sp)
204038a0:	c422                	sw	s0,8(sp)
204038a2:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
204038a4:	67f1                	lui	a5,0x1c
204038a6:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
204038aa:	800007b7          	lui	a5,0x80000
204038ae:	78078513          	addi	a0,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcaec>
204038b2:	2031                	jal	204038be <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
204038b4:	0001                	nop
204038b6:	40b2                	lw	ra,12(sp)
204038b8:	4422                	lw	s0,8(sp)
204038ba:	0141                	addi	sp,sp,16
204038bc:	8082                	ret

204038be <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
204038be:	1101                	addi	sp,sp,-32
204038c0:	ce06                	sw	ra,28(sp)
204038c2:	cc22                	sw	s0,24(sp)
204038c4:	1000                	addi	s0,sp,32
204038c6:	fea42623          	sw	a0,-20(s0)
204038ca:	feb42423          	sw	a1,-24(s0)
204038ce:	fec42783          	lw	a5,-20(s0)
204038d2:	439c                	lw	a5,0(a5)
204038d4:	439c                	lw	a5,0(a5)
204038d6:	fe842583          	lw	a1,-24(s0)
204038da:	fec42503          	lw	a0,-20(s0)
204038de:	9782                	jalr	a5
204038e0:	0001                	nop
204038e2:	40f2                	lw	ra,28(sp)
204038e4:	4462                	lw	s0,24(sp)
204038e6:	6105                	addi	sp,sp,32
204038e8:	8082                	ret

204038ea <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
204038ea:	1101                	addi	sp,sp,-32
204038ec:	ce06                	sw	ra,28(sp)
204038ee:	cc22                	sw	s0,24(sp)
204038f0:	1000                	addi	s0,sp,32
204038f2:	fea42623          	sw	a0,-20(s0)
204038f6:	feb42423          	sw	a1,-24(s0)
204038fa:	fec42783          	lw	a5,-20(s0)
204038fe:	439c                	lw	a5,0(a5)
20403900:	43dc                	lw	a5,4(a5)
20403902:	fe842583          	lw	a1,-24(s0)
20403906:	fec42503          	lw	a0,-20(s0)
2040390a:	9782                	jalr	a5
2040390c:	87aa                	mv	a5,a0
2040390e:	853e                	mv	a0,a5
20403910:	40f2                	lw	ra,28(sp)
20403912:	4462                	lw	s0,24(sp)
20403914:	6105                	addi	sp,sp,32
20403916:	8082                	ret

20403918 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20403918:	1101                	addi	sp,sp,-32
2040391a:	ce06                	sw	ra,28(sp)
2040391c:	cc22                	sw	s0,24(sp)
2040391e:	1000                	addi	s0,sp,32
20403920:	fea42623          	sw	a0,-20(s0)
20403924:	feb42423          	sw	a1,-24(s0)
20403928:	fec42783          	lw	a5,-20(s0)
2040392c:	439c                	lw	a5,0(a5)
2040392e:	4bdc                	lw	a5,20(a5)
20403930:	fe842583          	lw	a1,-24(s0)
20403934:	fec42503          	lw	a0,-20(s0)
20403938:	9782                	jalr	a5
2040393a:	87aa                	mv	a5,a0
2040393c:	853e                	mv	a0,a5
2040393e:	40f2                	lw	ra,28(sp)
20403940:	4462                	lw	s0,24(sp)
20403942:	6105                	addi	sp,sp,32
20403944:	8082                	ret

20403946 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20403946:	1101                	addi	sp,sp,-32
20403948:	ce22                	sw	s0,28(sp)
2040394a:	1000                	addi	s0,sp,32
2040394c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20403950:	fec42703          	lw	a4,-20(s0)
20403954:	81018793          	addi	a5,gp,-2032 # 800007b0 <__metal_dt_clint_2000000>
20403958:	00f71563          	bne	a4,a5,20403962 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
2040395c:	020007b7          	lui	a5,0x2000
20403960:	a011                	j	20403964 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
20403962:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:143
	}
}
20403964:	853e                	mv	a0,a5
20403966:	4472                	lw	s0,28(sp)
20403968:	6105                	addi	sp,sp,32
2040396a:	8082                	ret

2040396c <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
2040396c:	1101                	addi	sp,sp,-32
2040396e:	ce22                	sw	s0,28(sp)
20403970:	1000                	addi	s0,sp,32
20403972:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20403976:	fec42703          	lw	a4,-20(s0)
2040397a:	81018793          	addi	a5,gp,-2032 # 800007b0 <__metal_dt_clint_2000000>
2040397e:	00f71463          	bne	a4,a5,20403986 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
20403982:	4789                	li	a5,2
20403984:	a011                	j	20403988 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20403986:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:163
	}
}
20403988:	853e                	mv	a0,a5
2040398a:	4472                	lw	s0,28(sp)
2040398c:	6105                	addi	sp,sp,32
2040398e:	8082                	ret

20403990 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20403990:	1101                	addi	sp,sp,-32
20403992:	ce22                	sw	s0,28(sp)
20403994:	1000                	addi	s0,sp,32
20403996:	fea42623          	sw	a0,-20(s0)
2040399a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:167
	if (idx == 0) {
2040399e:	fe842783          	lw	a5,-24(s0)
204039a2:	e791                	bnez	a5,204039ae <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
204039a4:	800007b7          	lui	a5,0x80000
204039a8:	0c878793          	addi	a5,a5,200 # 800000c8 <metal_segment_heap_target_end+0xffffc434>
204039ac:	a821                	j	204039c4 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
204039ae:	fe842703          	lw	a4,-24(s0)
204039b2:	4785                	li	a5,1
204039b4:	00f71763          	bne	a4,a5,204039c2 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
204039b8:	800007b7          	lui	a5,0x80000
204039bc:	0c878793          	addi	a5,a5,200 # 800000c8 <metal_segment_heap_target_end+0xffffc434>
204039c0:	a011                	j	204039c4 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
204039c2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:176
	}
}
204039c4:	853e                	mv	a0,a5
204039c6:	4472                	lw	s0,28(sp)
204039c8:	6105                	addi	sp,sp,32
204039ca:	8082                	ret

204039cc <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
204039cc:	1101                	addi	sp,sp,-32
204039ce:	ce22                	sw	s0,28(sp)
204039d0:	1000                	addi	s0,sp,32
204039d2:	fea42623          	sw	a0,-20(s0)
204039d6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:180
	if (idx == 0) {
204039da:	fe842783          	lw	a5,-24(s0)
204039de:	e399                	bnez	a5,204039e4 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:181
		return 3;
204039e0:	478d                	li	a5,3
204039e2:	a809                	j	204039f4 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
204039e4:	fe842703          	lw	a4,-24(s0)
204039e8:	4785                	li	a5,1
204039ea:	00f71463          	bne	a4,a5,204039f2 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:184
		return 7;
204039ee:	479d                	li	a5,7
204039f0:	a011                	j	204039f4 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
204039f2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:189
	}
}
204039f4:	853e                	mv	a0,a5
204039f6:	4472                	lw	s0,28(sp)
204039f8:	6105                	addi	sp,sp,32
204039fa:	8082                	ret

204039fc <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
204039fc:	715d                	addi	sp,sp,-80
204039fe:	c686                	sw	ra,76(sp)
20403a00:	c4a2                	sw	s0,72(sp)
20403a02:	c2ca                	sw	s2,68(sp)
20403a04:	c0ce                	sw	s3,64(sp)
20403a06:	de52                	sw	s4,60(sp)
20403a08:	dc56                	sw	s5,56(sp)
20403a0a:	da5a                	sw	s6,52(sp)
20403a0c:	d85e                	sw	s7,48(sp)
20403a0e:	d662                	sw	s8,44(sp)
20403a10:	d466                	sw	s9,40(sp)
20403a12:	0880                	addi	s0,sp,80
20403a14:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20403a18:	fbc42783          	lw	a5,-68(s0)
20403a1c:	853e                	mv	a0,a5
20403a1e:	3725                	jal	20403946 <__metal_driver_sifive_clint0_control_base>
20403a20:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20403a24:	fcc42703          	lw	a4,-52(s0)
20403a28:	67b1                	lui	a5,0xc
20403a2a:	17f1                	addi	a5,a5,-4
20403a2c:	97ba                	add	a5,a5,a4
20403a2e:	439c                	lw	a5,0(a5)
20403a30:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20403a34:	fcc42703          	lw	a4,-52(s0)
20403a38:	67b1                	lui	a5,0xc
20403a3a:	17e1                	addi	a5,a5,-8
20403a3c:	97ba                	add	a5,a5,a4
20403a3e:	439c                	lw	a5,0(a5)
20403a40:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20403a44:	fcc42703          	lw	a4,-52(s0)
20403a48:	67b1                	lui	a5,0xc
20403a4a:	17f1                	addi	a5,a5,-4
20403a4c:	97ba                	add	a5,a5,a4
20403a4e:	439c                	lw	a5,0(a5)
20403a50:	fc842703          	lw	a4,-56(s0)
20403a54:	fcf718e3          	bne	a4,a5,20403a24 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20403a58:	fc842783          	lw	a5,-56(s0)
20403a5c:	8c3e                	mv	s8,a5
20403a5e:	4c81                	li	s9,0
20403a60:	000c1993          	slli	s3,s8,0x0
20403a64:	4901                	li	s2,0
20403a66:	fc442783          	lw	a5,-60(s0)
20403a6a:	8a3e                	mv	s4,a5
20403a6c:	4a81                	li	s5,0
20403a6e:	01496b33          	or	s6,s2,s4
20403a72:	0159ebb3          	or	s7,s3,s5
20403a76:	87da                	mv	a5,s6
20403a78:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
20403a7a:	853e                	mv	a0,a5
20403a7c:	85c2                	mv	a1,a6
20403a7e:	40b6                	lw	ra,76(sp)
20403a80:	4426                	lw	s0,72(sp)
20403a82:	4916                	lw	s2,68(sp)
20403a84:	4986                	lw	s3,64(sp)
20403a86:	5a72                	lw	s4,60(sp)
20403a88:	5ae2                	lw	s5,56(sp)
20403a8a:	5b52                	lw	s6,52(sp)
20403a8c:	5bc2                	lw	s7,48(sp)
20403a8e:	5c32                	lw	s8,44(sp)
20403a90:	5ca2                	lw	s9,40(sp)
20403a92:	6161                	addi	sp,sp,80
20403a94:	8082                	ret

20403a96 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20403a96:	7179                	addi	sp,sp,-48
20403a98:	d606                	sw	ra,44(sp)
20403a9a:	d422                	sw	s0,40(sp)
20403a9c:	d24a                	sw	s2,36(sp)
20403a9e:	d04e                	sw	s3,32(sp)
20403aa0:	1800                	addi	s0,sp,48
20403aa2:	fca42e23          	sw	a0,-36(s0)
20403aa6:	fcb42c23          	sw	a1,-40(s0)
20403aaa:	fcc42823          	sw	a2,-48(s0)
20403aae:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20403ab2:	fdc42783          	lw	a5,-36(s0)
20403ab6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20403aba:	fec42783          	lw	a5,-20(s0)
20403abe:	853e                	mv	a0,a5
20403ac0:	3559                	jal	20403946 <__metal_driver_sifive_clint0_control_base>
20403ac2:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20403ac6:	fd842783          	lw	a5,-40(s0)
20403aca:	078e                	slli	a5,a5,0x3
20403acc:	873e                	mv	a4,a5
20403ace:	fe842783          	lw	a5,-24(s0)
20403ad2:	973e                	add	a4,a4,a5
20403ad4:	6791                	lui	a5,0x4
20403ad6:	0791                	addi	a5,a5,4
20403ad8:	97ba                	add	a5,a5,a4
20403ada:	873e                	mv	a4,a5
20403adc:	57fd                	li	a5,-1
20403ade:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20403ae0:	fd842783          	lw	a5,-40(s0)
20403ae4:	078e                	slli	a5,a5,0x3
20403ae6:	873e                	mv	a4,a5
20403ae8:	fe842783          	lw	a5,-24(s0)
20403aec:	973e                	add	a4,a4,a5
20403aee:	6791                	lui	a5,0x4
20403af0:	97ba                	add	a5,a5,a4
20403af2:	873e                	mv	a4,a5
20403af4:	fd042783          	lw	a5,-48(s0)
20403af8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20403afa:	fd442783          	lw	a5,-44(s0)
20403afe:	0007d913          	srli	s2,a5,0x0
20403b02:	4981                	li	s3,0
20403b04:	fd842783          	lw	a5,-40(s0)
20403b08:	078e                	slli	a5,a5,0x3
20403b0a:	873e                	mv	a4,a5
20403b0c:	fe842783          	lw	a5,-24(s0)
20403b10:	973e                	add	a4,a4,a5
20403b12:	6791                	lui	a5,0x4
20403b14:	0791                	addi	a5,a5,4
20403b16:	97ba                	add	a5,a5,a4
20403b18:	874a                	mv	a4,s2
20403b1a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20403b1c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20403b1e:	853e                	mv	a0,a5
20403b20:	50b2                	lw	ra,44(sp)
20403b22:	5422                	lw	s0,40(sp)
20403b24:	5912                	lw	s2,36(sp)
20403b26:	5982                	lw	s3,32(sp)
20403b28:	6145                	addi	sp,sp,48
20403b2a:	8082                	ret

20403b2c <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20403b2c:	1101                	addi	sp,sp,-32
20403b2e:	ce06                	sw	ra,28(sp)
20403b30:	cc22                	sw	s0,24(sp)
20403b32:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20403b34:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20403b38:	f14027f3          	csrr	a5,mhartid
20403b3c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20403b40:	fec42783          	lw	a5,-20(s0)
20403b44:	853e                	mv	a0,a5
20403b46:	22e030ef          	jal	ra,20406d74 <metal_cpu_get>
20403b4a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20403b4e:	fe842503          	lw	a0,-24(s0)
20403b52:	1fc030ef          	jal	ra,20406d4e <metal_cpu_interrupt_controller>
20403b56:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20403b58:	853e                	mv	a0,a5
20403b5a:	40f2                	lw	ra,28(sp)
20403b5c:	4462                	lw	s0,24(sp)
20403b5e:	6105                	addi	sp,sp,32
20403b60:	8082                	ret

20403b62 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20403b62:	7139                	addi	sp,sp,-64
20403b64:	de06                	sw	ra,60(sp)
20403b66:	dc22                	sw	s0,56(sp)
20403b68:	0080                	addi	s0,sp,64
20403b6a:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20403b6e:	fcc42503          	lw	a0,-52(s0)
20403b72:	3bed                	jal	2040396c <__metal_driver_sifive_clint0_num_interrupts>
20403b74:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20403b78:	fcc42783          	lw	a5,-52(s0)
20403b7c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20403b80:	fe442783          	lw	a5,-28(s0)
20403b84:	43dc                	lw	a5,4(a5)
20403b86:	efa9                	bnez	a5,20403be0 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20403b88:	fe042623          	sw	zero,-20(s0)
20403b8c:	a081                	j	20403bcc <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20403b8e:	fec42583          	lw	a1,-20(s0)
20403b92:	fcc42503          	lw	a0,-52(s0)
20403b96:	3bed                	jal	20403990 <__metal_driver_sifive_clint0_interrupt_parents>
20403b98:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20403b9c:	fec42583          	lw	a1,-20(s0)
20403ba0:	fcc42503          	lw	a0,-52(s0)
20403ba4:	3525                	jal	204039cc <__metal_driver_sifive_clint0_interrupt_lines>
20403ba6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20403baa:	fe042783          	lw	a5,-32(s0)
20403bae:	439c                	lw	a5,0(a5)
20403bb0:	4fdc                	lw	a5,28(a5)
20403bb2:	fcc42683          	lw	a3,-52(s0)
20403bb6:	4601                	li	a2,0
20403bb8:	fdc42583          	lw	a1,-36(s0)
20403bbc:	fe042503          	lw	a0,-32(s0)
20403bc0:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20403bc2:	fec42783          	lw	a5,-20(s0)
20403bc6:	0785                	addi	a5,a5,1
20403bc8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20403bcc:	fec42703          	lw	a4,-20(s0)
20403bd0:	fe842783          	lw	a5,-24(s0)
20403bd4:	faf74de3          	blt	a4,a5,20403b8e <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20403bd8:	fe442783          	lw	a5,-28(s0)
20403bdc:	4705                	li	a4,1
20403bde:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20403be0:	0001                	nop
20403be2:	50f2                	lw	ra,60(sp)
20403be4:	5462                	lw	s0,56(sp)
20403be6:	6121                	addi	sp,sp,64
20403be8:	8082                	ret

20403bea <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20403bea:	7139                	addi	sp,sp,-64
20403bec:	de06                	sw	ra,60(sp)
20403bee:	dc22                	sw	s0,56(sp)
20403bf0:	0080                	addi	s0,sp,64
20403bf2:	fca42623          	sw	a0,-52(s0)
20403bf6:	fcb42423          	sw	a1,-56(s0)
20403bfa:	fcc42223          	sw	a2,-60(s0)
20403bfe:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20403c02:	57fd                	li	a5,-1
20403c04:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20403c08:	38e010ef          	jal	ra,20404f96 <__metal_controller_interrupt_vector_mode>
20403c0c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
20403c10:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20403c14:	3f21                	jal	20403b2c <_get_cpu_intc>
20403c16:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20403c1a:	fcc42503          	lw	a0,-52(s0)
20403c1e:	33b9                	jal	2040396c <__metal_driver_sifive_clint0_num_interrupts>
20403c20:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20403c24:	fe042703          	lw	a4,-32(s0)
20403c28:	4785                	li	a5,1
20403c2a:	00f70863          	beq	a4,a5,20403c3a <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20403c2e:	fe042783          	lw	a5,-32(s0)
20403c32:	c781                	beqz	a5,20403c3a <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20403c34:	fec42783          	lw	a5,-20(s0)
20403c38:	a049                	j	20403cba <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20403c3a:	fe042223          	sw	zero,-28(s0)
20403c3e:	a091                	j	20403c82 <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20403c40:	fe442583          	lw	a1,-28(s0)
20403c44:	fcc42503          	lw	a0,-52(s0)
20403c48:	3351                	jal	204039cc <__metal_driver_sifive_clint0_interrupt_lines>
20403c4a:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20403c4e:	fe442583          	lw	a1,-28(s0)
20403c52:	fcc42503          	lw	a0,-52(s0)
20403c56:	3b2d                	jal	20403990 <__metal_driver_sifive_clint0_interrupt_parents>
20403c58:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20403c5c:	fdc42703          	lw	a4,-36(s0)
20403c60:	fe842783          	lw	a5,-24(s0)
20403c64:	00f71863          	bne	a4,a5,20403c74 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20403c68:	fc842703          	lw	a4,-56(s0)
20403c6c:	fd442783          	lw	a5,-44(s0)
20403c70:	02f70063          	beq	a4,a5,20403c90 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20403c74:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20403c78:	fe442783          	lw	a5,-28(s0)
20403c7c:	0785                	addi	a5,a5,1
20403c7e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20403c82:	fe442703          	lw	a4,-28(s0)
20403c86:	fd842783          	lw	a5,-40(s0)
20403c8a:	faf74be3          	blt	a4,a5,20403c40 <__metal_driver_riscv_clint0_register+0x56>
20403c8e:	a011                	j	20403c92 <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20403c90:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20403c92:	fe842783          	lw	a5,-24(s0)
20403c96:	c385                	beqz	a5,20403cb6 <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20403c98:	fe842783          	lw	a5,-24(s0)
20403c9c:	439c                	lw	a5,0(a5)
20403c9e:	4fdc                	lw	a5,28(a5)
20403ca0:	fc042683          	lw	a3,-64(s0)
20403ca4:	fc442603          	lw	a2,-60(s0)
20403ca8:	fc842583          	lw	a1,-56(s0)
20403cac:	fe842503          	lw	a0,-24(s0)
20403cb0:	9782                	jalr	a5
20403cb2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20403cb6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20403cba:	853e                	mv	a0,a5
20403cbc:	50f2                	lw	ra,60(sp)
20403cbe:	5462                	lw	s0,56(sp)
20403cc0:	6121                	addi	sp,sp,64
20403cc2:	8082                	ret

20403cc4 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20403cc4:	7179                	addi	sp,sp,-48
20403cc6:	d622                	sw	s0,44(sp)
20403cc8:	1800                	addi	s0,sp,48
20403cca:	fca42e23          	sw	a0,-36(s0)
20403cce:	fcb42c23          	sw	a1,-40(s0)
20403cd2:	fcc42a23          	sw	a2,-44(s0)
20403cd6:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20403cda:	57fd                	li	a5,-1
20403cdc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20403ce0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20403ce4:	853e                	mv	a0,a5
20403ce6:	5432                	lw	s0,44(sp)
20403ce8:	6145                	addi	sp,sp,48
20403cea:	8082                	ret

20403cec <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20403cec:	1101                	addi	sp,sp,-32
20403cee:	ce06                	sw	ra,28(sp)
20403cf0:	cc22                	sw	s0,24(sp)
20403cf2:	1000                	addi	s0,sp,32
20403cf4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20403cf8:	29e010ef          	jal	ra,20404f96 <__metal_controller_interrupt_vector_mode>
20403cfc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
20403cfe:	853e                	mv	a0,a5
20403d00:	40f2                	lw	ra,28(sp)
20403d02:	4462                	lw	s0,24(sp)
20403d04:	6105                	addi	sp,sp,32
20403d06:	8082                	ret

20403d08 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20403d08:	7179                	addi	sp,sp,-48
20403d0a:	d606                	sw	ra,44(sp)
20403d0c:	d422                	sw	s0,40(sp)
20403d0e:	1800                	addi	s0,sp,48
20403d10:	fca42e23          	sw	a0,-36(s0)
20403d14:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20403d18:	57fd                	li	a5,-1
20403d1a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20403d1e:	3539                	jal	20403b2c <_get_cpu_intc>
20403d20:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20403d24:	fe842783          	lw	a5,-24(s0)
20403d28:	c395                	beqz	a5,20403d4c <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20403d2a:	fd842703          	lw	a4,-40(s0)
20403d2e:	4785                	li	a5,1
20403d30:	00e7ef63          	bltu	a5,a4,20403d4e <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20403d34:	fe842783          	lw	a5,-24(s0)
20403d38:	439c                	lw	a5,0(a5)
20403d3a:	43dc                	lw	a5,4(a5)
20403d3c:	fd842583          	lw	a1,-40(s0)
20403d40:	fe842503          	lw	a0,-24(s0)
20403d44:	9782                	jalr	a5
20403d46:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
20403d4a:	a011                	j	20403d4e <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20403d4c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
20403d4e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20403d52:	853e                	mv	a0,a5
20403d54:	50b2                	lw	ra,44(sp)
20403d56:	5422                	lw	s0,40(sp)
20403d58:	6145                	addi	sp,sp,48
20403d5a:	8082                	ret

20403d5c <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20403d5c:	7139                	addi	sp,sp,-64
20403d5e:	de06                	sw	ra,60(sp)
20403d60:	dc22                	sw	s0,56(sp)
20403d62:	0080                	addi	s0,sp,64
20403d64:	fca42623          	sw	a0,-52(s0)
20403d68:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20403d6c:	57fd                	li	a5,-1
20403d6e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20403d72:	fc842783          	lw	a5,-56(s0)
20403d76:	c7d9                	beqz	a5,20403e04 <__metal_driver_riscv_clint0_enable+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20403d78:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20403d7c:	3b45                	jal	20403b2c <_get_cpu_intc>
20403d7e:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20403d82:	fcc42503          	lw	a0,-52(s0)
20403d86:	be7ff0ef          	jal	ra,2040396c <__metal_driver_sifive_clint0_num_interrupts>
20403d8a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20403d8e:	fe042223          	sw	zero,-28(s0)
20403d92:	a099                	j	20403dd8 <__metal_driver_riscv_clint0_enable+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20403d94:	fe442583          	lw	a1,-28(s0)
20403d98:	fcc42503          	lw	a0,-52(s0)
20403d9c:	3905                	jal	204039cc <__metal_driver_sifive_clint0_interrupt_lines>
20403d9e:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20403da2:	fe442583          	lw	a1,-28(s0)
20403da6:	fcc42503          	lw	a0,-52(s0)
20403daa:	be7ff0ef          	jal	ra,20403990 <__metal_driver_sifive_clint0_interrupt_parents>
20403dae:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20403db2:	fe042703          	lw	a4,-32(s0)
20403db6:	fe842783          	lw	a5,-24(s0)
20403dba:	00f71863          	bne	a4,a5,20403dca <__metal_driver_riscv_clint0_enable+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20403dbe:	fc842703          	lw	a4,-56(s0)
20403dc2:	fd842783          	lw	a5,-40(s0)
20403dc6:	02f70063          	beq	a4,a5,20403de6 <__metal_driver_riscv_clint0_enable+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20403dca:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20403dce:	fe442783          	lw	a5,-28(s0)
20403dd2:	0785                	addi	a5,a5,1
20403dd4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20403dd8:	fe442703          	lw	a4,-28(s0)
20403ddc:	fdc42783          	lw	a5,-36(s0)
20403de0:	faf74ae3          	blt	a4,a5,20403d94 <__metal_driver_riscv_clint0_enable+0x38>
20403de4:	a011                	j	20403de8 <__metal_driver_riscv_clint0_enable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20403de6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20403de8:	fe842783          	lw	a5,-24(s0)
20403dec:	cf81                	beqz	a5,20403e04 <__metal_driver_riscv_clint0_enable+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20403dee:	fe842783          	lw	a5,-24(s0)
20403df2:	439c                	lw	a5,0(a5)
20403df4:	53dc                	lw	a5,36(a5)
20403df6:	fc842583          	lw	a1,-56(s0)
20403dfa:	fe842503          	lw	a0,-24(s0)
20403dfe:	9782                	jalr	a5
20403e00:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20403e04:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20403e08:	853e                	mv	a0,a5
20403e0a:	50f2                	lw	ra,60(sp)
20403e0c:	5462                	lw	s0,56(sp)
20403e0e:	6121                	addi	sp,sp,64
20403e10:	8082                	ret

20403e12 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20403e12:	7139                	addi	sp,sp,-64
20403e14:	de06                	sw	ra,60(sp)
20403e16:	dc22                	sw	s0,56(sp)
20403e18:	0080                	addi	s0,sp,64
20403e1a:	fca42623          	sw	a0,-52(s0)
20403e1e:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20403e22:	57fd                	li	a5,-1
20403e24:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20403e28:	fc842783          	lw	a5,-56(s0)
20403e2c:	cbc1                	beqz	a5,20403ebc <__metal_driver_riscv_clint0_disable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20403e2e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20403e32:	39ed                	jal	20403b2c <_get_cpu_intc>
20403e34:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20403e38:	fcc42503          	lw	a0,-52(s0)
20403e3c:	b31ff0ef          	jal	ra,2040396c <__metal_driver_sifive_clint0_num_interrupts>
20403e40:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20403e44:	fe042223          	sw	zero,-28(s0)
20403e48:	a0a1                	j	20403e90 <__metal_driver_riscv_clint0_disable+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20403e4a:	fe442583          	lw	a1,-28(s0)
20403e4e:	fcc42503          	lw	a0,-52(s0)
20403e52:	b7bff0ef          	jal	ra,204039cc <__metal_driver_sifive_clint0_interrupt_lines>
20403e56:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20403e5a:	fe442583          	lw	a1,-28(s0)
20403e5e:	fcc42503          	lw	a0,-52(s0)
20403e62:	b2fff0ef          	jal	ra,20403990 <__metal_driver_sifive_clint0_interrupt_parents>
20403e66:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20403e6a:	fe042703          	lw	a4,-32(s0)
20403e6e:	fe842783          	lw	a5,-24(s0)
20403e72:	00f71863          	bne	a4,a5,20403e82 <__metal_driver_riscv_clint0_disable+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20403e76:	fc842703          	lw	a4,-56(s0)
20403e7a:	fd842783          	lw	a5,-40(s0)
20403e7e:	02f70063          	beq	a4,a5,20403e9e <__metal_driver_riscv_clint0_disable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20403e82:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20403e86:	fe442783          	lw	a5,-28(s0)
20403e8a:	0785                	addi	a5,a5,1
20403e8c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20403e90:	fe442703          	lw	a4,-28(s0)
20403e94:	fdc42783          	lw	a5,-36(s0)
20403e98:	faf749e3          	blt	a4,a5,20403e4a <__metal_driver_riscv_clint0_disable+0x38>
20403e9c:	a011                	j	20403ea0 <__metal_driver_riscv_clint0_disable+0x8e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20403e9e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20403ea0:	fe842783          	lw	a5,-24(s0)
20403ea4:	cf81                	beqz	a5,20403ebc <__metal_driver_riscv_clint0_disable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20403ea6:	fe842783          	lw	a5,-24(s0)
20403eaa:	439c                	lw	a5,0(a5)
20403eac:	579c                	lw	a5,40(a5)
20403eae:	fc842583          	lw	a1,-56(s0)
20403eb2:	fe842503          	lw	a0,-24(s0)
20403eb6:	9782                	jalr	a5
20403eb8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20403ebc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
20403ec0:	853e                	mv	a0,a5
20403ec2:	50f2                	lw	ra,60(sp)
20403ec4:	5462                	lw	s0,56(sp)
20403ec6:	6121                	addi	sp,sp,64
20403ec8:	8082                	ret

20403eca <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20403eca:	7179                	addi	sp,sp,-48
20403ecc:	d606                	sw	ra,44(sp)
20403ece:	d422                	sw	s0,40(sp)
20403ed0:	1800                	addi	s0,sp,48
20403ed2:	fca42e23          	sw	a0,-36(s0)
20403ed6:	fcb42c23          	sw	a1,-40(s0)
20403eda:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
20403ede:	57fd                	li	a5,-1
20403ee0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20403ee4:	fdc42783          	lw	a5,-36(s0)
20403ee8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20403eec:	fdc42503          	lw	a0,-36(s0)
20403ef0:	a57ff0ef          	jal	ra,20403946 <__metal_driver_sifive_clint0_control_base>
20403ef4:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20403ef8:	fd842703          	lw	a4,-40(s0)
20403efc:	4789                	li	a5,2
20403efe:	04f70963          	beq	a4,a5,20403f50 <__metal_driver_riscv_clint0_command_request+0x86>
20403f02:	fd842703          	lw	a4,-40(s0)
20403f06:	4789                	li	a5,2
20403f08:	00e7c863          	blt	a5,a4,20403f18 <__metal_driver_riscv_clint0_command_request+0x4e>
20403f0c:	fd842703          	lw	a4,-40(s0)
20403f10:	4785                	li	a5,1
20403f12:	00f70e63          	beq	a4,a5,20403f2e <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20403f16:	a8f1                	j	20403ff2 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20403f18:	fd842703          	lw	a4,-40(s0)
20403f1c:	478d                	li	a5,3
20403f1e:	04f70d63          	beq	a4,a5,20403f78 <__metal_driver_riscv_clint0_command_request+0xae>
20403f22:	fd842703          	lw	a4,-40(s0)
20403f26:	4791                	li	a5,4
20403f28:	08f70963          	beq	a4,a5,20403fba <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20403f2c:	a0d9                	j	20403ff2 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20403f2e:	fd442783          	lw	a5,-44(s0)
20403f32:	cbcd                	beqz	a5,20403fe4 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20403f34:	fe842503          	lw	a0,-24(s0)
20403f38:	ac5ff0ef          	jal	ra,204039fc <__metal_clint0_mtime_get>
20403f3c:	87aa                	mv	a5,a0
20403f3e:	882e                	mv	a6,a1
20403f40:	fd442703          	lw	a4,-44(s0)
20403f44:	c31c                	sw	a5,0(a4)
20403f46:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20403f4a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20403f4e:	a859                	j	20403fe4 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20403f50:	fd442783          	lw	a5,-44(s0)
20403f54:	cbd1                	beqz	a5,20403fe8 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20403f56:	fd442783          	lw	a5,-44(s0)
20403f5a:	439c                	lw	a5,0(a5)
20403f5c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403f60:	fe042783          	lw	a5,-32(s0)
20403f64:	078a                	slli	a5,a5,0x2
20403f66:	873e                	mv	a4,a5
20403f68:	fe442783          	lw	a5,-28(s0)
20403f6c:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20403f6e:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20403f72:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20403f76:	a88d                	j	20403fe8 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20403f78:	fd442783          	lw	a5,-44(s0)
20403f7c:	cba5                	beqz	a5,20403fec <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20403f7e:	fd442783          	lw	a5,-44(s0)
20403f82:	439c                	lw	a5,0(a5)
20403f84:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403f88:	fe042783          	lw	a5,-32(s0)
20403f8c:	078a                	slli	a5,a5,0x2
20403f8e:	873e                	mv	a4,a5
20403f90:	fe442783          	lw	a5,-28(s0)
20403f94:	97ba                	add	a5,a5,a4
20403f96:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20403f98:	4785                	li	a5,1
20403f9a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20403f9c:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403fa0:	fe042783          	lw	a5,-32(s0)
20403fa4:	078a                	slli	a5,a5,0x2
20403fa6:	873e                	mv	a4,a5
20403fa8:	fe442783          	lw	a5,-28(s0)
20403fac:	97ba                	add	a5,a5,a4
20403fae:	439c                	lw	a5,0(a5)
20403fb0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20403fb4:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20403fb8:	a815                	j	20403fec <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20403fba:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20403fbe:	fd442783          	lw	a5,-44(s0)
20403fc2:	c79d                	beqz	a5,20403ff0 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20403fc4:	fd442783          	lw	a5,-44(s0)
20403fc8:	439c                	lw	a5,0(a5)
20403fca:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403fce:	fe042783          	lw	a5,-32(s0)
20403fd2:	078a                	slli	a5,a5,0x2
20403fd4:	873e                	mv	a4,a5
20403fd6:	fe442783          	lw	a5,-28(s0)
20403fda:	97ba                	add	a5,a5,a4
20403fdc:	439c                	lw	a5,0(a5)
20403fde:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20403fe2:	a039                	j	20403ff0 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20403fe4:	0001                	nop
20403fe6:	a031                	j	20403ff2 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20403fe8:	0001                	nop
20403fea:	a021                	j	20403ff2 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20403fec:	0001                	nop
20403fee:	a011                	j	20403ff2 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20403ff0:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20403ff2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
20403ff6:	853e                	mv	a0,a5
20403ff8:	50b2                	lw	ra,44(sp)
20403ffa:	5422                	lw	s0,40(sp)
20403ffc:	6145                	addi	sp,sp,48
20403ffe:	8082                	ret

20404000 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20404000:	7179                	addi	sp,sp,-48
20404002:	d606                	sw	ra,44(sp)
20404004:	d422                	sw	s0,40(sp)
20404006:	1800                	addi	s0,sp,48
20404008:	fca42e23          	sw	a0,-36(s0)
2040400c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20404010:	58f020ef          	jal	ra,20406d9e <metal_cpu_get_current_hartid>
20404014:	87aa                	mv	a5,a0
20404016:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
2040401a:	fec40793          	addi	a5,s0,-20
2040401e:	863e                	mv	a2,a5
20404020:	4589                	li	a1,2
20404022:	fdc42503          	lw	a0,-36(s0)
20404026:	3555                	jal	20403eca <__metal_driver_riscv_clint0_command_request>
20404028:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
2040402a:	853e                	mv	a0,a5
2040402c:	50b2                	lw	ra,44(sp)
2040402e:	5422                	lw	s0,40(sp)
20404030:	6145                	addi	sp,sp,48
20404032:	8082                	ret

20404034 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20404034:	7179                	addi	sp,sp,-48
20404036:	d606                	sw	ra,44(sp)
20404038:	d422                	sw	s0,40(sp)
2040403a:	1800                	addi	s0,sp,48
2040403c:	fca42e23          	sw	a0,-36(s0)
20404040:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
20404044:	55b020ef          	jal	ra,20406d9e <metal_cpu_get_current_hartid>
20404048:	87aa                	mv	a5,a0
2040404a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
2040404e:	fec40793          	addi	a5,s0,-20
20404052:	863e                	mv	a2,a5
20404054:	458d                	li	a1,3
20404056:	fdc42503          	lw	a0,-36(s0)
2040405a:	3d85                	jal	20403eca <__metal_driver_riscv_clint0_command_request>
2040405c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
2040405e:	853e                	mv	a0,a5
20404060:	50b2                	lw	ra,44(sp)
20404062:	5422                	lw	s0,40(sp)
20404064:	6145                	addi	sp,sp,48
20404066:	8082                	ret

20404068 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20404068:	1101                	addi	sp,sp,-32
2040406a:	ce22                	sw	s0,28(sp)
2040406c:	1000                	addi	s0,sp,32
2040406e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20404072:	fec42703          	lw	a4,-20(s0)
20404076:	81818793          	addi	a5,gp,-2024 # 800007b8 <__metal_dt_cpu_0>
2040407a:	00f71463          	bne	a4,a5,20404082 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:197
		return 0;
2040407e:	4781                	li	a5,0
20404080:	a011                	j	20404084 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
20404082:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:202
	}
}
20404084:	853e                	mv	a0,a5
20404086:	4472                	lw	s0,28(sp)
20404088:	6105                	addi	sp,sp,32
2040408a:	8082                	ret

2040408c <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
2040408c:	1101                	addi	sp,sp,-32
2040408e:	ce22                	sw	s0,28(sp)
20404090:	1000                	addi	s0,sp,32
20404092:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20404096:	fec42703          	lw	a4,-20(s0)
2040409a:	81818793          	addi	a5,gp,-2024 # 800007b8 <__metal_dt_cpu_0>
2040409e:	00f71763          	bne	a4,a5,204040ac <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:207
		return 1000000;
204040a2:	000f47b7          	lui	a5,0xf4
204040a6:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
204040aa:	a011                	j	204040ae <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
204040ac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:212
	}
}
204040ae:	853e                	mv	a0,a5
204040b0:	4472                	lw	s0,28(sp)
204040b2:	6105                	addi	sp,sp,32
204040b4:	8082                	ret

204040b6 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
204040b6:	1101                	addi	sp,sp,-32
204040b8:	ce22                	sw	s0,28(sp)
204040ba:	1000                	addi	s0,sp,32
204040bc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204040c0:	fec42703          	lw	a4,-20(s0)
204040c4:	81818793          	addi	a5,gp,-2024 # 800007b8 <__metal_dt_cpu_0>
204040c8:	00f71763          	bne	a4,a5,204040d6 <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
204040cc:	800007b7          	lui	a5,0x80000
204040d0:	0c878793          	addi	a5,a5,200 # 800000c8 <metal_segment_heap_target_end+0xffffc434>
204040d4:	a011                	j	204040d8 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
204040d6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:222
	}
}
204040d8:	853e                	mv	a0,a5
204040da:	4472                	lw	s0,28(sp)
204040dc:	6105                	addi	sp,sp,32
204040de:	8082                	ret

204040e0 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
204040e0:	1101                	addi	sp,sp,-32
204040e2:	ce22                	sw	s0,28(sp)
204040e4:	1000                	addi	s0,sp,32
204040e6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
204040ea:	fec42783          	lw	a5,-20(s0)
204040ee:	00f04a63          	bgtz	a5,20404102 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
204040f2:	fec42703          	lw	a4,-20(s0)
204040f6:	070a                	slli	a4,a4,0x2
204040f8:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
204040fc:	97ba                	add	a5,a5,a4
204040fe:	439c                	lw	a5,0(a5)
20404100:	a011                	j	20404104 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20404102:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20404104:	853e                	mv	a0,a5
20404106:	4472                	lw	s0,28(sp)
20404108:	6105                	addi	sp,sp,32
2040410a:	8082                	ret

2040410c <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
2040410c:	1101                	addi	sp,sp,-32
2040410e:	ce22                	sw	s0,28(sp)
20404110:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20404112:	f14027f3          	csrr	a5,mhartid
20404116:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
2040411a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
2040411e:	853e                	mv	a0,a5
20404120:	4472                	lw	s0,28(sp)
20404122:	6105                	addi	sp,sp,32
20404124:	8082                	ret

20404126 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20404126:	1101                	addi	sp,sp,-32
20404128:	ce22                	sw	s0,28(sp)
2040412a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
2040412c:	47a1                	li	a5,8
2040412e:	3007a7f3          	csrrs	a5,mstatus,a5
20404132:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
20404136:	0001                	nop
20404138:	4472                	lw	s0,28(sp)
2040413a:	6105                	addi	sp,sp,32
2040413c:	8082                	ret

2040413e <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
2040413e:	1101                	addi	sp,sp,-32
20404140:	ce22                	sw	s0,28(sp)
20404142:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20404144:	47a1                	li	a5,8
20404146:	3007b7f3          	csrrc	a5,mstatus,a5
2040414a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
2040414e:	0001                	nop
20404150:	4472                	lw	s0,28(sp)
20404152:	6105                	addi	sp,sp,32
20404154:	8082                	ret

20404156 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
20404156:	1101                	addi	sp,sp,-32
20404158:	ce22                	sw	s0,28(sp)
2040415a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
2040415c:	47a1                	li	a5,8
2040415e:	3047a7f3          	csrrs	a5,mie,a5
20404162:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
20404166:	0001                	nop
20404168:	4472                	lw	s0,28(sp)
2040416a:	6105                	addi	sp,sp,32
2040416c:	8082                	ret

2040416e <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
2040416e:	1101                	addi	sp,sp,-32
20404170:	ce22                	sw	s0,28(sp)
20404172:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20404174:	47a1                	li	a5,8
20404176:	3047b7f3          	csrrc	a5,mie,a5
2040417a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
2040417e:	0001                	nop
20404180:	4472                	lw	s0,28(sp)
20404182:	6105                	addi	sp,sp,32
20404184:	8082                	ret

20404186 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
20404186:	1101                	addi	sp,sp,-32
20404188:	ce22                	sw	s0,28(sp)
2040418a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
2040418c:	08000793          	li	a5,128
20404190:	3047a7f3          	csrrs	a5,mie,a5
20404194:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20404198:	0001                	nop
2040419a:	4472                	lw	s0,28(sp)
2040419c:	6105                	addi	sp,sp,32
2040419e:	8082                	ret

204041a0 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
204041a0:	1101                	addi	sp,sp,-32
204041a2:	ce22                	sw	s0,28(sp)
204041a4:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204041a6:	08000793          	li	a5,128
204041aa:	3047b7f3          	csrrc	a5,mie,a5
204041ae:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
204041b2:	0001                	nop
204041b4:	4472                	lw	s0,28(sp)
204041b6:	6105                	addi	sp,sp,32
204041b8:	8082                	ret

204041ba <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
204041ba:	1101                	addi	sp,sp,-32
204041bc:	ce22                	sw	s0,28(sp)
204041be:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
204041c0:	6785                	lui	a5,0x1
204041c2:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
204041c6:	3047a7f3          	csrrs	a5,mie,a5
204041ca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
204041ce:	0001                	nop
204041d0:	4472                	lw	s0,28(sp)
204041d2:	6105                	addi	sp,sp,32
204041d4:	8082                	ret

204041d6 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
204041d6:	1101                	addi	sp,sp,-32
204041d8:	ce22                	sw	s0,28(sp)
204041da:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
204041dc:	6785                	lui	a5,0x1
204041de:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
204041e2:	3047b7f3          	csrrc	a5,mie,a5
204041e6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
204041ea:	0001                	nop
204041ec:	4472                	lw	s0,28(sp)
204041ee:	6105                	addi	sp,sp,32
204041f0:	8082                	ret

204041f2 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
204041f2:	7179                	addi	sp,sp,-48
204041f4:	d622                	sw	s0,44(sp)
204041f6:	1800                	addi	s0,sp,48
204041f8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
204041fc:	fdc42783          	lw	a5,-36(s0)
20404200:	4705                	li	a4,1
20404202:	00f717b3          	sll	a5,a4,a5
20404206:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
2040420a:	fec42783          	lw	a5,-20(s0)
2040420e:	3047a7f3          	csrrs	a5,mie,a5
20404212:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
20404216:	0001                	nop
20404218:	5432                	lw	s0,44(sp)
2040421a:	6145                	addi	sp,sp,48
2040421c:	8082                	ret

2040421e <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
2040421e:	7179                	addi	sp,sp,-48
20404220:	d622                	sw	s0,44(sp)
20404222:	1800                	addi	s0,sp,48
20404224:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
20404228:	fdc42783          	lw	a5,-36(s0)
2040422c:	4705                	li	a4,1
2040422e:	00f717b3          	sll	a5,a4,a5
20404232:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20404236:	fec42783          	lw	a5,-20(s0)
2040423a:	3047b7f3          	csrrc	a5,mie,a5
2040423e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20404242:	0001                	nop
20404244:	5432                	lw	s0,44(sp)
20404246:	6145                	addi	sp,sp,48
20404248:	8082                	ret

2040424a <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
2040424a:	1101                	addi	sp,sp,-32
2040424c:	ce06                	sw	ra,28(sp)
2040424e:	cc22                	sw	s0,24(sp)
20404250:	1000                	addi	s0,sp,32
20404252:	fea42623          	sw	a0,-20(s0)
20404256:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
2040425a:	06400513          	li	a0,100
2040425e:	35b020ef          	jal	ra,20406db8 <metal_shutdown>

20404262 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20404262:	1101                	addi	sp,sp,-32
20404264:	ce06                	sw	ra,28(sp)
20404266:	cc22                	sw	s0,24(sp)
20404268:	1000                	addi	s0,sp,32
2040426a:	fea42623          	sw	a0,-20(s0)
2040426e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20404272:	0c800513          	li	a0,200
20404276:	343020ef          	jal	ra,20406db8 <metal_shutdown>

2040427a <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
2040427a:	715d                	addi	sp,sp,-80
2040427c:	c686                	sw	ra,76(sp)
2040427e:	c496                	sw	t0,72(sp)
20404280:	c29a                	sw	t1,68(sp)
20404282:	c09e                	sw	t2,64(sp)
20404284:	de22                	sw	s0,60(sp)
20404286:	dc2a                	sw	a0,56(sp)
20404288:	da2e                	sw	a1,52(sp)
2040428a:	d832                	sw	a2,48(sp)
2040428c:	d636                	sw	a3,44(sp)
2040428e:	d43a                	sw	a4,40(sp)
20404290:	d23e                	sw	a5,36(sp)
20404292:	d042                	sw	a6,32(sp)
20404294:	ce46                	sw	a7,28(sp)
20404296:	cc72                	sw	t3,24(sp)
20404298:	ca76                	sw	t4,20(sp)
2040429a:	c87a                	sw	t5,16(sp)
2040429c:	c67e                	sw	t6,12(sp)
2040429e:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
204042a0:	12c00513          	li	a0,300
204042a4:	315020ef          	jal	ra,20406db8 <metal_shutdown>

204042a8 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
204042a8:	711d                	addi	sp,sp,-96
204042aa:	ce86                	sw	ra,92(sp)
204042ac:	cc96                	sw	t0,88(sp)
204042ae:	ca9a                	sw	t1,84(sp)
204042b0:	c89e                	sw	t2,80(sp)
204042b2:	c6a2                	sw	s0,76(sp)
204042b4:	c4aa                	sw	a0,72(sp)
204042b6:	c2ae                	sw	a1,68(sp)
204042b8:	c0b2                	sw	a2,64(sp)
204042ba:	de36                	sw	a3,60(sp)
204042bc:	dc3a                	sw	a4,56(sp)
204042be:	da3e                	sw	a5,52(sp)
204042c0:	d842                	sw	a6,48(sp)
204042c2:	d646                	sw	a7,44(sp)
204042c4:	d472                	sw	t3,40(sp)
204042c6:	d276                	sw	t4,36(sp)
204042c8:	d07a                	sw	t5,32(sp)
204042ca:	ce7e                	sw	t6,28(sp)
204042cc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204042ce:	3d3d                	jal	2040410c <__metal_myhart_id>
204042d0:	872a                	mv	a4,a0
204042d2:	070a                	slli	a4,a4,0x2
204042d4:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
204042d8:	97ba                	add	a5,a5,a4
204042da:	439c                	lw	a5,0(a5)
204042dc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
204042e0:	fac42783          	lw	a5,-84(s0)
204042e4:	c785                	beqz	a5,2040430c <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204042e6:	fac42503          	lw	a0,-84(s0)
204042ea:	33f1                	jal	204040b6 <__metal_driver_cpu_interrupt_controller>
204042ec:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
204042f0:	fa842783          	lw	a5,-88(s0)
204042f4:	0e07a783          	lw	a5,224(a5)
204042f8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
204042fc:	fa842783          	lw	a5,-88(s0)
20404300:	0d87a783          	lw	a5,216(a5)
20404304:	fa442583          	lw	a1,-92(s0)
20404308:	450d                	li	a0,3
2040430a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
2040430c:	0001                	nop
2040430e:	40f6                	lw	ra,92(sp)
20404310:	42e6                	lw	t0,88(sp)
20404312:	4356                	lw	t1,84(sp)
20404314:	43c6                	lw	t2,80(sp)
20404316:	4436                	lw	s0,76(sp)
20404318:	4526                	lw	a0,72(sp)
2040431a:	4596                	lw	a1,68(sp)
2040431c:	4606                	lw	a2,64(sp)
2040431e:	56f2                	lw	a3,60(sp)
20404320:	5762                	lw	a4,56(sp)
20404322:	57d2                	lw	a5,52(sp)
20404324:	5842                	lw	a6,48(sp)
20404326:	58b2                	lw	a7,44(sp)
20404328:	5e22                	lw	t3,40(sp)
2040432a:	5e92                	lw	t4,36(sp)
2040432c:	5f02                	lw	t5,32(sp)
2040432e:	4ff2                	lw	t6,28(sp)
20404330:	6125                	addi	sp,sp,96
20404332:	30200073          	mret

20404336 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20404336:	7179                	addi	sp,sp,-48
20404338:	d606                	sw	ra,44(sp)
2040433a:	d422                	sw	s0,40(sp)
2040433c:	1800                	addi	s0,sp,48
2040433e:	fca42e23          	sw	a0,-36(s0)
20404342:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404346:	33d9                	jal	2040410c <__metal_myhart_id>
20404348:	872a                	mv	a4,a0
2040434a:	070a                	slli	a4,a4,0x2
2040434c:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
20404350:	97ba                	add	a5,a5,a4
20404352:	439c                	lw	a5,0(a5)
20404354:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20404358:	342027f3          	csrr	a5,mcause
2040435c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20404360:	fec42783          	lw	a5,-20(s0)
20404364:	c795                	beqz	a5,20404390 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404366:	fec42503          	lw	a0,-20(s0)
2040436a:	33b1                	jal	204040b6 <__metal_driver_cpu_interrupt_controller>
2040436c:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20404370:	fe842783          	lw	a5,-24(s0)
20404374:	3ff7f793          	andi	a5,a5,1023
20404378:	fe442703          	lw	a4,-28(s0)
2040437c:	0e078793          	addi	a5,a5,224
20404380:	078a                	slli	a5,a5,0x2
20404382:	97ba                	add	a5,a5,a4
20404384:	479c                	lw	a5,8(a5)
20404386:	fdc42583          	lw	a1,-36(s0)
2040438a:	fec42503          	lw	a0,-20(s0)
2040438e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20404390:	0001                	nop
20404392:	50b2                	lw	ra,44(sp)
20404394:	5422                	lw	s0,40(sp)
20404396:	6145                	addi	sp,sp,48
20404398:	8082                	ret

2040439a <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
2040439a:	711d                	addi	sp,sp,-96
2040439c:	ce86                	sw	ra,92(sp)
2040439e:	cc96                	sw	t0,88(sp)
204043a0:	ca9a                	sw	t1,84(sp)
204043a2:	c89e                	sw	t2,80(sp)
204043a4:	c6a2                	sw	s0,76(sp)
204043a6:	c4aa                	sw	a0,72(sp)
204043a8:	c2ae                	sw	a1,68(sp)
204043aa:	c0b2                	sw	a2,64(sp)
204043ac:	de36                	sw	a3,60(sp)
204043ae:	dc3a                	sw	a4,56(sp)
204043b0:	da3e                	sw	a5,52(sp)
204043b2:	d842                	sw	a6,48(sp)
204043b4:	d646                	sw	a7,44(sp)
204043b6:	d472                	sw	t3,40(sp)
204043b8:	d276                	sw	t4,36(sp)
204043ba:	d07a                	sw	t5,32(sp)
204043bc:	ce7e                	sw	t6,28(sp)
204043be:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204043c0:	33b1                	jal	2040410c <__metal_myhart_id>
204043c2:	872a                	mv	a4,a0
204043c4:	070a                	slli	a4,a4,0x2
204043c6:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
204043ca:	97ba                	add	a5,a5,a4
204043cc:	439c                	lw	a5,0(a5)
204043ce:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
204043d2:	fac42783          	lw	a5,-84(s0)
204043d6:	c785                	beqz	a5,204043fe <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204043d8:	fac42503          	lw	a0,-84(s0)
204043dc:	39e9                	jal	204040b6 <__metal_driver_cpu_interrupt_controller>
204043de:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
204043e2:	fa842783          	lw	a5,-88(s0)
204043e6:	1407a783          	lw	a5,320(a5)
204043ea:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
204043ee:	fa842783          	lw	a5,-88(s0)
204043f2:	1387a783          	lw	a5,312(a5)
204043f6:	fa442583          	lw	a1,-92(s0)
204043fa:	451d                	li	a0,7
204043fc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
204043fe:	0001                	nop
20404400:	40f6                	lw	ra,92(sp)
20404402:	42e6                	lw	t0,88(sp)
20404404:	4356                	lw	t1,84(sp)
20404406:	43c6                	lw	t2,80(sp)
20404408:	4436                	lw	s0,76(sp)
2040440a:	4526                	lw	a0,72(sp)
2040440c:	4596                	lw	a1,68(sp)
2040440e:	4606                	lw	a2,64(sp)
20404410:	56f2                	lw	a3,60(sp)
20404412:	5762                	lw	a4,56(sp)
20404414:	57d2                	lw	a5,52(sp)
20404416:	5842                	lw	a6,48(sp)
20404418:	58b2                	lw	a7,44(sp)
2040441a:	5e22                	lw	t3,40(sp)
2040441c:	5e92                	lw	t4,36(sp)
2040441e:	5f02                	lw	t5,32(sp)
20404420:	4ff2                	lw	t6,28(sp)
20404422:	6125                	addi	sp,sp,96
20404424:	30200073          	mret

20404428 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20404428:	7179                	addi	sp,sp,-48
2040442a:	d606                	sw	ra,44(sp)
2040442c:	d422                	sw	s0,40(sp)
2040442e:	1800                	addi	s0,sp,48
20404430:	fca42e23          	sw	a0,-36(s0)
20404434:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20404438:	39d1                	jal	2040410c <__metal_myhart_id>
2040443a:	87aa                	mv	a5,a0
2040443c:	853e                	mv	a0,a5
2040443e:	314d                	jal	204040e0 <__metal_driver_cpu_get>
20404440:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20404444:	fec42503          	lw	a0,-20(s0)
20404448:	1ac010ef          	jal	ra,204055f4 <__metal_driver_cpu_mtime_get>
2040444c:	fea42023          	sw	a0,-32(s0)
20404450:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20404454:	fe042783          	lw	a5,-32(s0)
20404458:	fe442803          	lw	a6,-28(s0)
2040445c:	45a9                	li	a1,10
2040445e:	4601                	li	a2,0
20404460:	00b786b3          	add	a3,a5,a1
20404464:	8536                	mv	a0,a3
20404466:	00f53533          	sltu	a0,a0,a5
2040446a:	00c80733          	add	a4,a6,a2
2040446e:	00e507b3          	add	a5,a0,a4
20404472:	873e                	mv	a4,a5
20404474:	87b6                	mv	a5,a3
20404476:	883a                	mv	a6,a4
20404478:	85be                	mv	a1,a5
2040447a:	8642                	mv	a2,a6
2040447c:	fec42503          	lw	a0,-20(s0)
20404480:	1da010ef          	jal	ra,2040565a <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20404484:	0001                	nop
20404486:	50b2                	lw	ra,44(sp)
20404488:	5422                	lw	s0,40(sp)
2040448a:	6145                	addi	sp,sp,48
2040448c:	8082                	ret
	...

20404500 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20404500:	7119                	addi	sp,sp,-128
20404502:	de86                	sw	ra,124(sp)
20404504:	dc96                	sw	t0,120(sp)
20404506:	da9a                	sw	t1,116(sp)
20404508:	d89e                	sw	t2,112(sp)
2040450a:	d6a2                	sw	s0,108(sp)
2040450c:	d4aa                	sw	a0,104(sp)
2040450e:	d2ae                	sw	a1,100(sp)
20404510:	d0b2                	sw	a2,96(sp)
20404512:	ceb6                	sw	a3,92(sp)
20404514:	ccba                	sw	a4,88(sp)
20404516:	cabe                	sw	a5,84(sp)
20404518:	c8c2                	sw	a6,80(sp)
2040451a:	c6c6                	sw	a7,76(sp)
2040451c:	c4f2                	sw	t3,72(sp)
2040451e:	c2f6                	sw	t4,68(sp)
20404520:	c0fa                	sw	t5,64(sp)
20404522:	de7e                	sw	t6,60(sp)
20404524:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404526:	be7ff0ef          	jal	ra,2040410c <__metal_myhart_id>
2040452a:	872a                	mv	a4,a0
2040452c:	070a                	slli	a4,a4,0x2
2040452e:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
20404532:	97ba                	add	a5,a5,a4
20404534:	439c                	lw	a5,0(a5)
20404536:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
2040453a:	342027f3          	csrr	a5,mcause
2040453e:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20404542:	341027f3          	csrr	a5,mepc
20404546:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
2040454a:	343027f3          	csrr	a5,mtval
2040454e:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20404552:	305027f3          	csrr	a5,mtvec
20404556:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
2040455a:	fac42783          	lw	a5,-84(s0)
2040455e:	c7e9                	beqz	a5,20404628 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404560:	fac42503          	lw	a0,-84(s0)
20404564:	b53ff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404568:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
2040456c:	fa842783          	lw	a5,-88(s0)
20404570:	3ff7f793          	andi	a5,a5,1023
20404574:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20404578:	fa842783          	lw	a5,-88(s0)
2040457c:	0807d863          	bgez	a5,2040460c <__metal_exception_handler+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20404580:	f9442703          	lw	a4,-108(s0)
20404584:	47ad                	li	a5,11
20404586:	00e7d763          	bge	a5,a4,20404594 <__metal_exception_handler+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
2040458a:	f9c42783          	lw	a5,-100(s0)
2040458e:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20404592:	ef9d                	bnez	a5,204045d0 <__metal_exception_handler+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20404594:	f9842683          	lw	a3,-104(s0)
20404598:	f9442703          	lw	a4,-108(s0)
2040459c:	87ba                	mv	a5,a4
2040459e:	0786                	slli	a5,a5,0x1
204045a0:	97ba                	add	a5,a5,a4
204045a2:	078e                	slli	a5,a5,0x3
204045a4:	97b6                	add	a5,a5,a3
204045a6:	0987a783          	lw	a5,152(a5)
204045aa:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
204045ae:	f9842683          	lw	a3,-104(s0)
204045b2:	f9442703          	lw	a4,-108(s0)
204045b6:	87ba                	mv	a5,a4
204045b8:	0786                	slli	a5,a5,0x1
204045ba:	97ba                	add	a5,a5,a4
204045bc:	078e                	slli	a5,a5,0x3
204045be:	97b6                	add	a5,a5,a3
204045c0:	0907a783          	lw	a5,144(a5)
204045c4:	f8c42583          	lw	a1,-116(s0)
204045c8:	f9442503          	lw	a0,-108(s0)
204045cc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
204045ce:	a8a9                	j	20404628 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
204045d0:	f9c42783          	lw	a5,-100(s0)
204045d4:	03f7f713          	andi	a4,a5,63
204045d8:	4789                	li	a5,2
204045da:	04f71763          	bne	a4,a5,20404628 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
204045de:	307027f3          	csrr	a5,mtvt
204045e2:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204045e6:	f9842783          	lw	a5,-104(s0)
204045ea:	0dc7a783          	lw	a5,220(a5)
204045ee:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
204045f2:	f9042783          	lw	a5,-112(s0)
204045f6:	439c                	lw	a5,0(a5)
204045f8:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
204045fc:	f8842783          	lw	a5,-120(s0)
20404600:	f8c42583          	lw	a1,-116(s0)
20404604:	f9442503          	lw	a0,-108(s0)
20404608:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
2040460a:	a839                	j	20404628 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
2040460c:	f9842703          	lw	a4,-104(s0)
20404610:	f9442783          	lw	a5,-108(s0)
20404614:	0e078793          	addi	a5,a5,224
20404618:	078a                	slli	a5,a5,0x2
2040461a:	97ba                	add	a5,a5,a4
2040461c:	479c                	lw	a5,8(a5)
2040461e:	f9442583          	lw	a1,-108(s0)
20404622:	fac42503          	lw	a0,-84(s0)
20404626:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20404628:	50f6                	lw	ra,124(sp)
2040462a:	52e6                	lw	t0,120(sp)
2040462c:	5356                	lw	t1,116(sp)
2040462e:	53c6                	lw	t2,112(sp)
20404630:	5436                	lw	s0,108(sp)
20404632:	5526                	lw	a0,104(sp)
20404634:	5596                	lw	a1,100(sp)
20404636:	5606                	lw	a2,96(sp)
20404638:	46f6                	lw	a3,92(sp)
2040463a:	4766                	lw	a4,88(sp)
2040463c:	47d6                	lw	a5,84(sp)
2040463e:	4846                	lw	a6,80(sp)
20404640:	48b6                	lw	a7,76(sp)
20404642:	4e26                	lw	t3,72(sp)
20404644:	4e96                	lw	t4,68(sp)
20404646:	4f06                	lw	t5,64(sp)
20404648:	5ff2                	lw	t6,60(sp)
2040464a:	6109                	addi	sp,sp,128
2040464c:	30200073          	mret
	...

20404676 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20404676:	711d                	addi	sp,sp,-96
20404678:	ce86                	sw	ra,92(sp)
2040467a:	cc96                	sw	t0,88(sp)
2040467c:	ca9a                	sw	t1,84(sp)
2040467e:	c89e                	sw	t2,80(sp)
20404680:	c6a2                	sw	s0,76(sp)
20404682:	c4aa                	sw	a0,72(sp)
20404684:	c2ae                	sw	a1,68(sp)
20404686:	c0b2                	sw	a2,64(sp)
20404688:	de36                	sw	a3,60(sp)
2040468a:	dc3a                	sw	a4,56(sp)
2040468c:	da3e                	sw	a5,52(sp)
2040468e:	d842                	sw	a6,48(sp)
20404690:	d646                	sw	a7,44(sp)
20404692:	d472                	sw	t3,40(sp)
20404694:	d276                	sw	t4,36(sp)
20404696:	d07a                	sw	t5,32(sp)
20404698:	ce7e                	sw	t6,28(sp)
2040469a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040469c:	a71ff0ef          	jal	ra,2040410c <__metal_myhart_id>
204046a0:	872a                	mv	a4,a0
204046a2:	070a                	slli	a4,a4,0x2
204046a4:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
204046a8:	97ba                	add	a5,a5,a4
204046aa:	439c                	lw	a5,0(a5)
204046ac:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
204046b0:	fac42783          	lw	a5,-84(s0)
204046b4:	c78d                	beqz	a5,204046de <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204046b6:	fac42503          	lw	a0,-84(s0)
204046ba:	9fdff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
204046be:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
204046c2:	fa842783          	lw	a5,-88(s0)
204046c6:	2187a783          	lw	a5,536(a5)
204046ca:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
204046ce:	fa842783          	lw	a5,-88(s0)
204046d2:	2107a783          	lw	a5,528(a5)
204046d6:	fa442583          	lw	a1,-92(s0)
204046da:	4541                	li	a0,16
204046dc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
204046de:	0001                	nop
204046e0:	40f6                	lw	ra,92(sp)
204046e2:	42e6                	lw	t0,88(sp)
204046e4:	4356                	lw	t1,84(sp)
204046e6:	43c6                	lw	t2,80(sp)
204046e8:	4436                	lw	s0,76(sp)
204046ea:	4526                	lw	a0,72(sp)
204046ec:	4596                	lw	a1,68(sp)
204046ee:	4606                	lw	a2,64(sp)
204046f0:	56f2                	lw	a3,60(sp)
204046f2:	5762                	lw	a4,56(sp)
204046f4:	57d2                	lw	a5,52(sp)
204046f6:	5842                	lw	a6,48(sp)
204046f8:	58b2                	lw	a7,44(sp)
204046fa:	5e22                	lw	t3,40(sp)
204046fc:	5e92                	lw	t4,36(sp)
204046fe:	5f02                	lw	t5,32(sp)
20404700:	4ff2                	lw	t6,28(sp)
20404702:	6125                	addi	sp,sp,96
20404704:	30200073          	mret

20404708 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20404708:	711d                	addi	sp,sp,-96
2040470a:	ce86                	sw	ra,92(sp)
2040470c:	cc96                	sw	t0,88(sp)
2040470e:	ca9a                	sw	t1,84(sp)
20404710:	c89e                	sw	t2,80(sp)
20404712:	c6a2                	sw	s0,76(sp)
20404714:	c4aa                	sw	a0,72(sp)
20404716:	c2ae                	sw	a1,68(sp)
20404718:	c0b2                	sw	a2,64(sp)
2040471a:	de36                	sw	a3,60(sp)
2040471c:	dc3a                	sw	a4,56(sp)
2040471e:	da3e                	sw	a5,52(sp)
20404720:	d842                	sw	a6,48(sp)
20404722:	d646                	sw	a7,44(sp)
20404724:	d472                	sw	t3,40(sp)
20404726:	d276                	sw	t4,36(sp)
20404728:	d07a                	sw	t5,32(sp)
2040472a:	ce7e                	sw	t6,28(sp)
2040472c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040472e:	9dfff0ef          	jal	ra,2040410c <__metal_myhart_id>
20404732:	872a                	mv	a4,a0
20404734:	070a                	slli	a4,a4,0x2
20404736:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
2040473a:	97ba                	add	a5,a5,a4
2040473c:	439c                	lw	a5,0(a5)
2040473e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20404742:	fac42783          	lw	a5,-84(s0)
20404746:	c78d                	beqz	a5,20404770 <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404748:	fac42503          	lw	a0,-84(s0)
2040474c:	96bff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404750:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20404754:	fa842783          	lw	a5,-88(s0)
20404758:	2307a783          	lw	a5,560(a5)
2040475c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20404760:	fa842783          	lw	a5,-88(s0)
20404764:	2287a783          	lw	a5,552(a5)
20404768:	fa442583          	lw	a1,-92(s0)
2040476c:	4545                	li	a0,17
2040476e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20404770:	0001                	nop
20404772:	40f6                	lw	ra,92(sp)
20404774:	42e6                	lw	t0,88(sp)
20404776:	4356                	lw	t1,84(sp)
20404778:	43c6                	lw	t2,80(sp)
2040477a:	4436                	lw	s0,76(sp)
2040477c:	4526                	lw	a0,72(sp)
2040477e:	4596                	lw	a1,68(sp)
20404780:	4606                	lw	a2,64(sp)
20404782:	56f2                	lw	a3,60(sp)
20404784:	5762                	lw	a4,56(sp)
20404786:	57d2                	lw	a5,52(sp)
20404788:	5842                	lw	a6,48(sp)
2040478a:	58b2                	lw	a7,44(sp)
2040478c:	5e22                	lw	t3,40(sp)
2040478e:	5e92                	lw	t4,36(sp)
20404790:	5f02                	lw	t5,32(sp)
20404792:	4ff2                	lw	t6,28(sp)
20404794:	6125                	addi	sp,sp,96
20404796:	30200073          	mret

2040479a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
2040479a:	711d                	addi	sp,sp,-96
2040479c:	ce86                	sw	ra,92(sp)
2040479e:	cc96                	sw	t0,88(sp)
204047a0:	ca9a                	sw	t1,84(sp)
204047a2:	c89e                	sw	t2,80(sp)
204047a4:	c6a2                	sw	s0,76(sp)
204047a6:	c4aa                	sw	a0,72(sp)
204047a8:	c2ae                	sw	a1,68(sp)
204047aa:	c0b2                	sw	a2,64(sp)
204047ac:	de36                	sw	a3,60(sp)
204047ae:	dc3a                	sw	a4,56(sp)
204047b0:	da3e                	sw	a5,52(sp)
204047b2:	d842                	sw	a6,48(sp)
204047b4:	d646                	sw	a7,44(sp)
204047b6:	d472                	sw	t3,40(sp)
204047b8:	d276                	sw	t4,36(sp)
204047ba:	d07a                	sw	t5,32(sp)
204047bc:	ce7e                	sw	t6,28(sp)
204047be:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204047c0:	94dff0ef          	jal	ra,2040410c <__metal_myhart_id>
204047c4:	872a                	mv	a4,a0
204047c6:	070a                	slli	a4,a4,0x2
204047c8:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
204047cc:	97ba                	add	a5,a5,a4
204047ce:	439c                	lw	a5,0(a5)
204047d0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
204047d4:	fac42783          	lw	a5,-84(s0)
204047d8:	c78d                	beqz	a5,20404802 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204047da:	fac42503          	lw	a0,-84(s0)
204047de:	8d9ff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
204047e2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
204047e6:	fa842783          	lw	a5,-88(s0)
204047ea:	2487a783          	lw	a5,584(a5)
204047ee:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
204047f2:	fa842783          	lw	a5,-88(s0)
204047f6:	2407a783          	lw	a5,576(a5)
204047fa:	fa442583          	lw	a1,-92(s0)
204047fe:	4549                	li	a0,18
20404800:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20404802:	0001                	nop
20404804:	40f6                	lw	ra,92(sp)
20404806:	42e6                	lw	t0,88(sp)
20404808:	4356                	lw	t1,84(sp)
2040480a:	43c6                	lw	t2,80(sp)
2040480c:	4436                	lw	s0,76(sp)
2040480e:	4526                	lw	a0,72(sp)
20404810:	4596                	lw	a1,68(sp)
20404812:	4606                	lw	a2,64(sp)
20404814:	56f2                	lw	a3,60(sp)
20404816:	5762                	lw	a4,56(sp)
20404818:	57d2                	lw	a5,52(sp)
2040481a:	5842                	lw	a6,48(sp)
2040481c:	58b2                	lw	a7,44(sp)
2040481e:	5e22                	lw	t3,40(sp)
20404820:	5e92                	lw	t4,36(sp)
20404822:	5f02                	lw	t5,32(sp)
20404824:	4ff2                	lw	t6,28(sp)
20404826:	6125                	addi	sp,sp,96
20404828:	30200073          	mret

2040482c <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
2040482c:	711d                	addi	sp,sp,-96
2040482e:	ce86                	sw	ra,92(sp)
20404830:	cc96                	sw	t0,88(sp)
20404832:	ca9a                	sw	t1,84(sp)
20404834:	c89e                	sw	t2,80(sp)
20404836:	c6a2                	sw	s0,76(sp)
20404838:	c4aa                	sw	a0,72(sp)
2040483a:	c2ae                	sw	a1,68(sp)
2040483c:	c0b2                	sw	a2,64(sp)
2040483e:	de36                	sw	a3,60(sp)
20404840:	dc3a                	sw	a4,56(sp)
20404842:	da3e                	sw	a5,52(sp)
20404844:	d842                	sw	a6,48(sp)
20404846:	d646                	sw	a7,44(sp)
20404848:	d472                	sw	t3,40(sp)
2040484a:	d276                	sw	t4,36(sp)
2040484c:	d07a                	sw	t5,32(sp)
2040484e:	ce7e                	sw	t6,28(sp)
20404850:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404852:	8bbff0ef          	jal	ra,2040410c <__metal_myhart_id>
20404856:	872a                	mv	a4,a0
20404858:	070a                	slli	a4,a4,0x2
2040485a:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
2040485e:	97ba                	add	a5,a5,a4
20404860:	439c                	lw	a5,0(a5)
20404862:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20404866:	fac42783          	lw	a5,-84(s0)
2040486a:	c78d                	beqz	a5,20404894 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040486c:	fac42503          	lw	a0,-84(s0)
20404870:	847ff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404874:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20404878:	fa842783          	lw	a5,-88(s0)
2040487c:	2607a783          	lw	a5,608(a5)
20404880:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20404884:	fa842783          	lw	a5,-88(s0)
20404888:	2587a783          	lw	a5,600(a5)
2040488c:	fa442583          	lw	a1,-92(s0)
20404890:	454d                	li	a0,19
20404892:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20404894:	0001                	nop
20404896:	40f6                	lw	ra,92(sp)
20404898:	42e6                	lw	t0,88(sp)
2040489a:	4356                	lw	t1,84(sp)
2040489c:	43c6                	lw	t2,80(sp)
2040489e:	4436                	lw	s0,76(sp)
204048a0:	4526                	lw	a0,72(sp)
204048a2:	4596                	lw	a1,68(sp)
204048a4:	4606                	lw	a2,64(sp)
204048a6:	56f2                	lw	a3,60(sp)
204048a8:	5762                	lw	a4,56(sp)
204048aa:	57d2                	lw	a5,52(sp)
204048ac:	5842                	lw	a6,48(sp)
204048ae:	58b2                	lw	a7,44(sp)
204048b0:	5e22                	lw	t3,40(sp)
204048b2:	5e92                	lw	t4,36(sp)
204048b4:	5f02                	lw	t5,32(sp)
204048b6:	4ff2                	lw	t6,28(sp)
204048b8:	6125                	addi	sp,sp,96
204048ba:	30200073          	mret

204048be <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
204048be:	711d                	addi	sp,sp,-96
204048c0:	ce86                	sw	ra,92(sp)
204048c2:	cc96                	sw	t0,88(sp)
204048c4:	ca9a                	sw	t1,84(sp)
204048c6:	c89e                	sw	t2,80(sp)
204048c8:	c6a2                	sw	s0,76(sp)
204048ca:	c4aa                	sw	a0,72(sp)
204048cc:	c2ae                	sw	a1,68(sp)
204048ce:	c0b2                	sw	a2,64(sp)
204048d0:	de36                	sw	a3,60(sp)
204048d2:	dc3a                	sw	a4,56(sp)
204048d4:	da3e                	sw	a5,52(sp)
204048d6:	d842                	sw	a6,48(sp)
204048d8:	d646                	sw	a7,44(sp)
204048da:	d472                	sw	t3,40(sp)
204048dc:	d276                	sw	t4,36(sp)
204048de:	d07a                	sw	t5,32(sp)
204048e0:	ce7e                	sw	t6,28(sp)
204048e2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204048e4:	829ff0ef          	jal	ra,2040410c <__metal_myhart_id>
204048e8:	872a                	mv	a4,a0
204048ea:	070a                	slli	a4,a4,0x2
204048ec:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
204048f0:	97ba                	add	a5,a5,a4
204048f2:	439c                	lw	a5,0(a5)
204048f4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
204048f8:	fac42783          	lw	a5,-84(s0)
204048fc:	c78d                	beqz	a5,20404926 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204048fe:	fac42503          	lw	a0,-84(s0)
20404902:	fb4ff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404906:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
2040490a:	fa842783          	lw	a5,-88(s0)
2040490e:	2787a783          	lw	a5,632(a5)
20404912:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20404916:	fa842783          	lw	a5,-88(s0)
2040491a:	2707a783          	lw	a5,624(a5)
2040491e:	fa442583          	lw	a1,-92(s0)
20404922:	4551                	li	a0,20
20404924:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20404926:	0001                	nop
20404928:	40f6                	lw	ra,92(sp)
2040492a:	42e6                	lw	t0,88(sp)
2040492c:	4356                	lw	t1,84(sp)
2040492e:	43c6                	lw	t2,80(sp)
20404930:	4436                	lw	s0,76(sp)
20404932:	4526                	lw	a0,72(sp)
20404934:	4596                	lw	a1,68(sp)
20404936:	4606                	lw	a2,64(sp)
20404938:	56f2                	lw	a3,60(sp)
2040493a:	5762                	lw	a4,56(sp)
2040493c:	57d2                	lw	a5,52(sp)
2040493e:	5842                	lw	a6,48(sp)
20404940:	58b2                	lw	a7,44(sp)
20404942:	5e22                	lw	t3,40(sp)
20404944:	5e92                	lw	t4,36(sp)
20404946:	5f02                	lw	t5,32(sp)
20404948:	4ff2                	lw	t6,28(sp)
2040494a:	6125                	addi	sp,sp,96
2040494c:	30200073          	mret

20404950 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20404950:	711d                	addi	sp,sp,-96
20404952:	ce86                	sw	ra,92(sp)
20404954:	cc96                	sw	t0,88(sp)
20404956:	ca9a                	sw	t1,84(sp)
20404958:	c89e                	sw	t2,80(sp)
2040495a:	c6a2                	sw	s0,76(sp)
2040495c:	c4aa                	sw	a0,72(sp)
2040495e:	c2ae                	sw	a1,68(sp)
20404960:	c0b2                	sw	a2,64(sp)
20404962:	de36                	sw	a3,60(sp)
20404964:	dc3a                	sw	a4,56(sp)
20404966:	da3e                	sw	a5,52(sp)
20404968:	d842                	sw	a6,48(sp)
2040496a:	d646                	sw	a7,44(sp)
2040496c:	d472                	sw	t3,40(sp)
2040496e:	d276                	sw	t4,36(sp)
20404970:	d07a                	sw	t5,32(sp)
20404972:	ce7e                	sw	t6,28(sp)
20404974:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404976:	f96ff0ef          	jal	ra,2040410c <__metal_myhart_id>
2040497a:	872a                	mv	a4,a0
2040497c:	070a                	slli	a4,a4,0x2
2040497e:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
20404982:	97ba                	add	a5,a5,a4
20404984:	439c                	lw	a5,0(a5)
20404986:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
2040498a:	fac42783          	lw	a5,-84(s0)
2040498e:	c78d                	beqz	a5,204049b8 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404990:	fac42503          	lw	a0,-84(s0)
20404994:	f22ff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404998:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
2040499c:	fa842783          	lw	a5,-88(s0)
204049a0:	2907a783          	lw	a5,656(a5)
204049a4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
204049a8:	fa842783          	lw	a5,-88(s0)
204049ac:	2887a783          	lw	a5,648(a5)
204049b0:	fa442583          	lw	a1,-92(s0)
204049b4:	4555                	li	a0,21
204049b6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
204049b8:	0001                	nop
204049ba:	40f6                	lw	ra,92(sp)
204049bc:	42e6                	lw	t0,88(sp)
204049be:	4356                	lw	t1,84(sp)
204049c0:	43c6                	lw	t2,80(sp)
204049c2:	4436                	lw	s0,76(sp)
204049c4:	4526                	lw	a0,72(sp)
204049c6:	4596                	lw	a1,68(sp)
204049c8:	4606                	lw	a2,64(sp)
204049ca:	56f2                	lw	a3,60(sp)
204049cc:	5762                	lw	a4,56(sp)
204049ce:	57d2                	lw	a5,52(sp)
204049d0:	5842                	lw	a6,48(sp)
204049d2:	58b2                	lw	a7,44(sp)
204049d4:	5e22                	lw	t3,40(sp)
204049d6:	5e92                	lw	t4,36(sp)
204049d8:	5f02                	lw	t5,32(sp)
204049da:	4ff2                	lw	t6,28(sp)
204049dc:	6125                	addi	sp,sp,96
204049de:	30200073          	mret

204049e2 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
204049e2:	711d                	addi	sp,sp,-96
204049e4:	ce86                	sw	ra,92(sp)
204049e6:	cc96                	sw	t0,88(sp)
204049e8:	ca9a                	sw	t1,84(sp)
204049ea:	c89e                	sw	t2,80(sp)
204049ec:	c6a2                	sw	s0,76(sp)
204049ee:	c4aa                	sw	a0,72(sp)
204049f0:	c2ae                	sw	a1,68(sp)
204049f2:	c0b2                	sw	a2,64(sp)
204049f4:	de36                	sw	a3,60(sp)
204049f6:	dc3a                	sw	a4,56(sp)
204049f8:	da3e                	sw	a5,52(sp)
204049fa:	d842                	sw	a6,48(sp)
204049fc:	d646                	sw	a7,44(sp)
204049fe:	d472                	sw	t3,40(sp)
20404a00:	d276                	sw	t4,36(sp)
20404a02:	d07a                	sw	t5,32(sp)
20404a04:	ce7e                	sw	t6,28(sp)
20404a06:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404a08:	f04ff0ef          	jal	ra,2040410c <__metal_myhart_id>
20404a0c:	872a                	mv	a4,a0
20404a0e:	070a                	slli	a4,a4,0x2
20404a10:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
20404a14:	97ba                	add	a5,a5,a4
20404a16:	439c                	lw	a5,0(a5)
20404a18:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
20404a1c:	fac42783          	lw	a5,-84(s0)
20404a20:	c78d                	beqz	a5,20404a4a <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404a22:	fac42503          	lw	a0,-84(s0)
20404a26:	e90ff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404a2a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
20404a2e:	fa842783          	lw	a5,-88(s0)
20404a32:	2a87a783          	lw	a5,680(a5)
20404a36:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
20404a3a:	fa842783          	lw	a5,-88(s0)
20404a3e:	2a07a783          	lw	a5,672(a5)
20404a42:	fa442583          	lw	a1,-92(s0)
20404a46:	4559                	li	a0,22
20404a48:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
20404a4a:	0001                	nop
20404a4c:	40f6                	lw	ra,92(sp)
20404a4e:	42e6                	lw	t0,88(sp)
20404a50:	4356                	lw	t1,84(sp)
20404a52:	43c6                	lw	t2,80(sp)
20404a54:	4436                	lw	s0,76(sp)
20404a56:	4526                	lw	a0,72(sp)
20404a58:	4596                	lw	a1,68(sp)
20404a5a:	4606                	lw	a2,64(sp)
20404a5c:	56f2                	lw	a3,60(sp)
20404a5e:	5762                	lw	a4,56(sp)
20404a60:	57d2                	lw	a5,52(sp)
20404a62:	5842                	lw	a6,48(sp)
20404a64:	58b2                	lw	a7,44(sp)
20404a66:	5e22                	lw	t3,40(sp)
20404a68:	5e92                	lw	t4,36(sp)
20404a6a:	5f02                	lw	t5,32(sp)
20404a6c:	4ff2                	lw	t6,28(sp)
20404a6e:	6125                	addi	sp,sp,96
20404a70:	30200073          	mret

20404a74 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20404a74:	711d                	addi	sp,sp,-96
20404a76:	ce86                	sw	ra,92(sp)
20404a78:	cc96                	sw	t0,88(sp)
20404a7a:	ca9a                	sw	t1,84(sp)
20404a7c:	c89e                	sw	t2,80(sp)
20404a7e:	c6a2                	sw	s0,76(sp)
20404a80:	c4aa                	sw	a0,72(sp)
20404a82:	c2ae                	sw	a1,68(sp)
20404a84:	c0b2                	sw	a2,64(sp)
20404a86:	de36                	sw	a3,60(sp)
20404a88:	dc3a                	sw	a4,56(sp)
20404a8a:	da3e                	sw	a5,52(sp)
20404a8c:	d842                	sw	a6,48(sp)
20404a8e:	d646                	sw	a7,44(sp)
20404a90:	d472                	sw	t3,40(sp)
20404a92:	d276                	sw	t4,36(sp)
20404a94:	d07a                	sw	t5,32(sp)
20404a96:	ce7e                	sw	t6,28(sp)
20404a98:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404a9a:	e72ff0ef          	jal	ra,2040410c <__metal_myhart_id>
20404a9e:	872a                	mv	a4,a0
20404aa0:	070a                	slli	a4,a4,0x2
20404aa2:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
20404aa6:	97ba                	add	a5,a5,a4
20404aa8:	439c                	lw	a5,0(a5)
20404aaa:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
20404aae:	fac42783          	lw	a5,-84(s0)
20404ab2:	c78d                	beqz	a5,20404adc <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404ab4:	fac42503          	lw	a0,-84(s0)
20404ab8:	dfeff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404abc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20404ac0:	fa842783          	lw	a5,-88(s0)
20404ac4:	2c07a783          	lw	a5,704(a5)
20404ac8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
20404acc:	fa842783          	lw	a5,-88(s0)
20404ad0:	2b87a783          	lw	a5,696(a5)
20404ad4:	fa442583          	lw	a1,-92(s0)
20404ad8:	455d                	li	a0,23
20404ada:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
20404adc:	0001                	nop
20404ade:	40f6                	lw	ra,92(sp)
20404ae0:	42e6                	lw	t0,88(sp)
20404ae2:	4356                	lw	t1,84(sp)
20404ae4:	43c6                	lw	t2,80(sp)
20404ae6:	4436                	lw	s0,76(sp)
20404ae8:	4526                	lw	a0,72(sp)
20404aea:	4596                	lw	a1,68(sp)
20404aec:	4606                	lw	a2,64(sp)
20404aee:	56f2                	lw	a3,60(sp)
20404af0:	5762                	lw	a4,56(sp)
20404af2:	57d2                	lw	a5,52(sp)
20404af4:	5842                	lw	a6,48(sp)
20404af6:	58b2                	lw	a7,44(sp)
20404af8:	5e22                	lw	t3,40(sp)
20404afa:	5e92                	lw	t4,36(sp)
20404afc:	5f02                	lw	t5,32(sp)
20404afe:	4ff2                	lw	t6,28(sp)
20404b00:	6125                	addi	sp,sp,96
20404b02:	30200073          	mret

20404b06 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20404b06:	711d                	addi	sp,sp,-96
20404b08:	ce86                	sw	ra,92(sp)
20404b0a:	cc96                	sw	t0,88(sp)
20404b0c:	ca9a                	sw	t1,84(sp)
20404b0e:	c89e                	sw	t2,80(sp)
20404b10:	c6a2                	sw	s0,76(sp)
20404b12:	c4aa                	sw	a0,72(sp)
20404b14:	c2ae                	sw	a1,68(sp)
20404b16:	c0b2                	sw	a2,64(sp)
20404b18:	de36                	sw	a3,60(sp)
20404b1a:	dc3a                	sw	a4,56(sp)
20404b1c:	da3e                	sw	a5,52(sp)
20404b1e:	d842                	sw	a6,48(sp)
20404b20:	d646                	sw	a7,44(sp)
20404b22:	d472                	sw	t3,40(sp)
20404b24:	d276                	sw	t4,36(sp)
20404b26:	d07a                	sw	t5,32(sp)
20404b28:	ce7e                	sw	t6,28(sp)
20404b2a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404b2c:	de0ff0ef          	jal	ra,2040410c <__metal_myhart_id>
20404b30:	872a                	mv	a4,a0
20404b32:	070a                	slli	a4,a4,0x2
20404b34:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
20404b38:	97ba                	add	a5,a5,a4
20404b3a:	439c                	lw	a5,0(a5)
20404b3c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20404b40:	fac42783          	lw	a5,-84(s0)
20404b44:	c78d                	beqz	a5,20404b6e <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404b46:	fac42503          	lw	a0,-84(s0)
20404b4a:	d6cff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404b4e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20404b52:	fa842783          	lw	a5,-88(s0)
20404b56:	2d87a783          	lw	a5,728(a5)
20404b5a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20404b5e:	fa842783          	lw	a5,-88(s0)
20404b62:	2d07a783          	lw	a5,720(a5)
20404b66:	fa442583          	lw	a1,-92(s0)
20404b6a:	4561                	li	a0,24
20404b6c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20404b6e:	0001                	nop
20404b70:	40f6                	lw	ra,92(sp)
20404b72:	42e6                	lw	t0,88(sp)
20404b74:	4356                	lw	t1,84(sp)
20404b76:	43c6                	lw	t2,80(sp)
20404b78:	4436                	lw	s0,76(sp)
20404b7a:	4526                	lw	a0,72(sp)
20404b7c:	4596                	lw	a1,68(sp)
20404b7e:	4606                	lw	a2,64(sp)
20404b80:	56f2                	lw	a3,60(sp)
20404b82:	5762                	lw	a4,56(sp)
20404b84:	57d2                	lw	a5,52(sp)
20404b86:	5842                	lw	a6,48(sp)
20404b88:	58b2                	lw	a7,44(sp)
20404b8a:	5e22                	lw	t3,40(sp)
20404b8c:	5e92                	lw	t4,36(sp)
20404b8e:	5f02                	lw	t5,32(sp)
20404b90:	4ff2                	lw	t6,28(sp)
20404b92:	6125                	addi	sp,sp,96
20404b94:	30200073          	mret

20404b98 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20404b98:	711d                	addi	sp,sp,-96
20404b9a:	ce86                	sw	ra,92(sp)
20404b9c:	cc96                	sw	t0,88(sp)
20404b9e:	ca9a                	sw	t1,84(sp)
20404ba0:	c89e                	sw	t2,80(sp)
20404ba2:	c6a2                	sw	s0,76(sp)
20404ba4:	c4aa                	sw	a0,72(sp)
20404ba6:	c2ae                	sw	a1,68(sp)
20404ba8:	c0b2                	sw	a2,64(sp)
20404baa:	de36                	sw	a3,60(sp)
20404bac:	dc3a                	sw	a4,56(sp)
20404bae:	da3e                	sw	a5,52(sp)
20404bb0:	d842                	sw	a6,48(sp)
20404bb2:	d646                	sw	a7,44(sp)
20404bb4:	d472                	sw	t3,40(sp)
20404bb6:	d276                	sw	t4,36(sp)
20404bb8:	d07a                	sw	t5,32(sp)
20404bba:	ce7e                	sw	t6,28(sp)
20404bbc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404bbe:	d4eff0ef          	jal	ra,2040410c <__metal_myhart_id>
20404bc2:	872a                	mv	a4,a0
20404bc4:	070a                	slli	a4,a4,0x2
20404bc6:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
20404bca:	97ba                	add	a5,a5,a4
20404bcc:	439c                	lw	a5,0(a5)
20404bce:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20404bd2:	fac42783          	lw	a5,-84(s0)
20404bd6:	c78d                	beqz	a5,20404c00 <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404bd8:	fac42503          	lw	a0,-84(s0)
20404bdc:	cdaff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404be0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20404be4:	fa842783          	lw	a5,-88(s0)
20404be8:	2f07a783          	lw	a5,752(a5)
20404bec:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20404bf0:	fa842783          	lw	a5,-88(s0)
20404bf4:	2e87a783          	lw	a5,744(a5)
20404bf8:	fa442583          	lw	a1,-92(s0)
20404bfc:	4565                	li	a0,25
20404bfe:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20404c00:	0001                	nop
20404c02:	40f6                	lw	ra,92(sp)
20404c04:	42e6                	lw	t0,88(sp)
20404c06:	4356                	lw	t1,84(sp)
20404c08:	43c6                	lw	t2,80(sp)
20404c0a:	4436                	lw	s0,76(sp)
20404c0c:	4526                	lw	a0,72(sp)
20404c0e:	4596                	lw	a1,68(sp)
20404c10:	4606                	lw	a2,64(sp)
20404c12:	56f2                	lw	a3,60(sp)
20404c14:	5762                	lw	a4,56(sp)
20404c16:	57d2                	lw	a5,52(sp)
20404c18:	5842                	lw	a6,48(sp)
20404c1a:	58b2                	lw	a7,44(sp)
20404c1c:	5e22                	lw	t3,40(sp)
20404c1e:	5e92                	lw	t4,36(sp)
20404c20:	5f02                	lw	t5,32(sp)
20404c22:	4ff2                	lw	t6,28(sp)
20404c24:	6125                	addi	sp,sp,96
20404c26:	30200073          	mret

20404c2a <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
20404c2a:	711d                	addi	sp,sp,-96
20404c2c:	ce86                	sw	ra,92(sp)
20404c2e:	cc96                	sw	t0,88(sp)
20404c30:	ca9a                	sw	t1,84(sp)
20404c32:	c89e                	sw	t2,80(sp)
20404c34:	c6a2                	sw	s0,76(sp)
20404c36:	c4aa                	sw	a0,72(sp)
20404c38:	c2ae                	sw	a1,68(sp)
20404c3a:	c0b2                	sw	a2,64(sp)
20404c3c:	de36                	sw	a3,60(sp)
20404c3e:	dc3a                	sw	a4,56(sp)
20404c40:	da3e                	sw	a5,52(sp)
20404c42:	d842                	sw	a6,48(sp)
20404c44:	d646                	sw	a7,44(sp)
20404c46:	d472                	sw	t3,40(sp)
20404c48:	d276                	sw	t4,36(sp)
20404c4a:	d07a                	sw	t5,32(sp)
20404c4c:	ce7e                	sw	t6,28(sp)
20404c4e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404c50:	cbcff0ef          	jal	ra,2040410c <__metal_myhart_id>
20404c54:	872a                	mv	a4,a0
20404c56:	070a                	slli	a4,a4,0x2
20404c58:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
20404c5c:	97ba                	add	a5,a5,a4
20404c5e:	439c                	lw	a5,0(a5)
20404c60:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20404c64:	fac42783          	lw	a5,-84(s0)
20404c68:	c78d                	beqz	a5,20404c92 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404c6a:	fac42503          	lw	a0,-84(s0)
20404c6e:	c48ff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404c72:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20404c76:	fa842783          	lw	a5,-88(s0)
20404c7a:	3087a783          	lw	a5,776(a5)
20404c7e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20404c82:	fa842783          	lw	a5,-88(s0)
20404c86:	3007a783          	lw	a5,768(a5)
20404c8a:	fa442583          	lw	a1,-92(s0)
20404c8e:	4569                	li	a0,26
20404c90:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20404c92:	0001                	nop
20404c94:	40f6                	lw	ra,92(sp)
20404c96:	42e6                	lw	t0,88(sp)
20404c98:	4356                	lw	t1,84(sp)
20404c9a:	43c6                	lw	t2,80(sp)
20404c9c:	4436                	lw	s0,76(sp)
20404c9e:	4526                	lw	a0,72(sp)
20404ca0:	4596                	lw	a1,68(sp)
20404ca2:	4606                	lw	a2,64(sp)
20404ca4:	56f2                	lw	a3,60(sp)
20404ca6:	5762                	lw	a4,56(sp)
20404ca8:	57d2                	lw	a5,52(sp)
20404caa:	5842                	lw	a6,48(sp)
20404cac:	58b2                	lw	a7,44(sp)
20404cae:	5e22                	lw	t3,40(sp)
20404cb0:	5e92                	lw	t4,36(sp)
20404cb2:	5f02                	lw	t5,32(sp)
20404cb4:	4ff2                	lw	t6,28(sp)
20404cb6:	6125                	addi	sp,sp,96
20404cb8:	30200073          	mret

20404cbc <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
20404cbc:	711d                	addi	sp,sp,-96
20404cbe:	ce86                	sw	ra,92(sp)
20404cc0:	cc96                	sw	t0,88(sp)
20404cc2:	ca9a                	sw	t1,84(sp)
20404cc4:	c89e                	sw	t2,80(sp)
20404cc6:	c6a2                	sw	s0,76(sp)
20404cc8:	c4aa                	sw	a0,72(sp)
20404cca:	c2ae                	sw	a1,68(sp)
20404ccc:	c0b2                	sw	a2,64(sp)
20404cce:	de36                	sw	a3,60(sp)
20404cd0:	dc3a                	sw	a4,56(sp)
20404cd2:	da3e                	sw	a5,52(sp)
20404cd4:	d842                	sw	a6,48(sp)
20404cd6:	d646                	sw	a7,44(sp)
20404cd8:	d472                	sw	t3,40(sp)
20404cda:	d276                	sw	t4,36(sp)
20404cdc:	d07a                	sw	t5,32(sp)
20404cde:	ce7e                	sw	t6,28(sp)
20404ce0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404ce2:	c2aff0ef          	jal	ra,2040410c <__metal_myhart_id>
20404ce6:	872a                	mv	a4,a0
20404ce8:	070a                	slli	a4,a4,0x2
20404cea:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
20404cee:	97ba                	add	a5,a5,a4
20404cf0:	439c                	lw	a5,0(a5)
20404cf2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20404cf6:	fac42783          	lw	a5,-84(s0)
20404cfa:	c78d                	beqz	a5,20404d24 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404cfc:	fac42503          	lw	a0,-84(s0)
20404d00:	bb6ff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404d04:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20404d08:	fa842783          	lw	a5,-88(s0)
20404d0c:	3207a783          	lw	a5,800(a5)
20404d10:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20404d14:	fa842783          	lw	a5,-88(s0)
20404d18:	3187a783          	lw	a5,792(a5)
20404d1c:	fa442583          	lw	a1,-92(s0)
20404d20:	456d                	li	a0,27
20404d22:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20404d24:	0001                	nop
20404d26:	40f6                	lw	ra,92(sp)
20404d28:	42e6                	lw	t0,88(sp)
20404d2a:	4356                	lw	t1,84(sp)
20404d2c:	43c6                	lw	t2,80(sp)
20404d2e:	4436                	lw	s0,76(sp)
20404d30:	4526                	lw	a0,72(sp)
20404d32:	4596                	lw	a1,68(sp)
20404d34:	4606                	lw	a2,64(sp)
20404d36:	56f2                	lw	a3,60(sp)
20404d38:	5762                	lw	a4,56(sp)
20404d3a:	57d2                	lw	a5,52(sp)
20404d3c:	5842                	lw	a6,48(sp)
20404d3e:	58b2                	lw	a7,44(sp)
20404d40:	5e22                	lw	t3,40(sp)
20404d42:	5e92                	lw	t4,36(sp)
20404d44:	5f02                	lw	t5,32(sp)
20404d46:	4ff2                	lw	t6,28(sp)
20404d48:	6125                	addi	sp,sp,96
20404d4a:	30200073          	mret

20404d4e <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
20404d4e:	711d                	addi	sp,sp,-96
20404d50:	ce86                	sw	ra,92(sp)
20404d52:	cc96                	sw	t0,88(sp)
20404d54:	ca9a                	sw	t1,84(sp)
20404d56:	c89e                	sw	t2,80(sp)
20404d58:	c6a2                	sw	s0,76(sp)
20404d5a:	c4aa                	sw	a0,72(sp)
20404d5c:	c2ae                	sw	a1,68(sp)
20404d5e:	c0b2                	sw	a2,64(sp)
20404d60:	de36                	sw	a3,60(sp)
20404d62:	dc3a                	sw	a4,56(sp)
20404d64:	da3e                	sw	a5,52(sp)
20404d66:	d842                	sw	a6,48(sp)
20404d68:	d646                	sw	a7,44(sp)
20404d6a:	d472                	sw	t3,40(sp)
20404d6c:	d276                	sw	t4,36(sp)
20404d6e:	d07a                	sw	t5,32(sp)
20404d70:	ce7e                	sw	t6,28(sp)
20404d72:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404d74:	b98ff0ef          	jal	ra,2040410c <__metal_myhart_id>
20404d78:	872a                	mv	a4,a0
20404d7a:	070a                	slli	a4,a4,0x2
20404d7c:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
20404d80:	97ba                	add	a5,a5,a4
20404d82:	439c                	lw	a5,0(a5)
20404d84:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20404d88:	fac42783          	lw	a5,-84(s0)
20404d8c:	c78d                	beqz	a5,20404db6 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404d8e:	fac42503          	lw	a0,-84(s0)
20404d92:	b24ff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404d96:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20404d9a:	fa842783          	lw	a5,-88(s0)
20404d9e:	3387a783          	lw	a5,824(a5)
20404da2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20404da6:	fa842783          	lw	a5,-88(s0)
20404daa:	3307a783          	lw	a5,816(a5)
20404dae:	fa442583          	lw	a1,-92(s0)
20404db2:	4571                	li	a0,28
20404db4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20404db6:	0001                	nop
20404db8:	40f6                	lw	ra,92(sp)
20404dba:	42e6                	lw	t0,88(sp)
20404dbc:	4356                	lw	t1,84(sp)
20404dbe:	43c6                	lw	t2,80(sp)
20404dc0:	4436                	lw	s0,76(sp)
20404dc2:	4526                	lw	a0,72(sp)
20404dc4:	4596                	lw	a1,68(sp)
20404dc6:	4606                	lw	a2,64(sp)
20404dc8:	56f2                	lw	a3,60(sp)
20404dca:	5762                	lw	a4,56(sp)
20404dcc:	57d2                	lw	a5,52(sp)
20404dce:	5842                	lw	a6,48(sp)
20404dd0:	58b2                	lw	a7,44(sp)
20404dd2:	5e22                	lw	t3,40(sp)
20404dd4:	5e92                	lw	t4,36(sp)
20404dd6:	5f02                	lw	t5,32(sp)
20404dd8:	4ff2                	lw	t6,28(sp)
20404dda:	6125                	addi	sp,sp,96
20404ddc:	30200073          	mret

20404de0 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20404de0:	711d                	addi	sp,sp,-96
20404de2:	ce86                	sw	ra,92(sp)
20404de4:	cc96                	sw	t0,88(sp)
20404de6:	ca9a                	sw	t1,84(sp)
20404de8:	c89e                	sw	t2,80(sp)
20404dea:	c6a2                	sw	s0,76(sp)
20404dec:	c4aa                	sw	a0,72(sp)
20404dee:	c2ae                	sw	a1,68(sp)
20404df0:	c0b2                	sw	a2,64(sp)
20404df2:	de36                	sw	a3,60(sp)
20404df4:	dc3a                	sw	a4,56(sp)
20404df6:	da3e                	sw	a5,52(sp)
20404df8:	d842                	sw	a6,48(sp)
20404dfa:	d646                	sw	a7,44(sp)
20404dfc:	d472                	sw	t3,40(sp)
20404dfe:	d276                	sw	t4,36(sp)
20404e00:	d07a                	sw	t5,32(sp)
20404e02:	ce7e                	sw	t6,28(sp)
20404e04:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404e06:	b06ff0ef          	jal	ra,2040410c <__metal_myhart_id>
20404e0a:	872a                	mv	a4,a0
20404e0c:	070a                	slli	a4,a4,0x2
20404e0e:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
20404e12:	97ba                	add	a5,a5,a4
20404e14:	439c                	lw	a5,0(a5)
20404e16:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20404e1a:	fac42783          	lw	a5,-84(s0)
20404e1e:	c78d                	beqz	a5,20404e48 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404e20:	fac42503          	lw	a0,-84(s0)
20404e24:	a92ff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404e28:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
20404e2c:	fa842783          	lw	a5,-88(s0)
20404e30:	3507a783          	lw	a5,848(a5)
20404e34:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20404e38:	fa842783          	lw	a5,-88(s0)
20404e3c:	3487a783          	lw	a5,840(a5)
20404e40:	fa442583          	lw	a1,-92(s0)
20404e44:	4575                	li	a0,29
20404e46:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20404e48:	0001                	nop
20404e4a:	40f6                	lw	ra,92(sp)
20404e4c:	42e6                	lw	t0,88(sp)
20404e4e:	4356                	lw	t1,84(sp)
20404e50:	43c6                	lw	t2,80(sp)
20404e52:	4436                	lw	s0,76(sp)
20404e54:	4526                	lw	a0,72(sp)
20404e56:	4596                	lw	a1,68(sp)
20404e58:	4606                	lw	a2,64(sp)
20404e5a:	56f2                	lw	a3,60(sp)
20404e5c:	5762                	lw	a4,56(sp)
20404e5e:	57d2                	lw	a5,52(sp)
20404e60:	5842                	lw	a6,48(sp)
20404e62:	58b2                	lw	a7,44(sp)
20404e64:	5e22                	lw	t3,40(sp)
20404e66:	5e92                	lw	t4,36(sp)
20404e68:	5f02                	lw	t5,32(sp)
20404e6a:	4ff2                	lw	t6,28(sp)
20404e6c:	6125                	addi	sp,sp,96
20404e6e:	30200073          	mret

20404e72 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20404e72:	711d                	addi	sp,sp,-96
20404e74:	ce86                	sw	ra,92(sp)
20404e76:	cc96                	sw	t0,88(sp)
20404e78:	ca9a                	sw	t1,84(sp)
20404e7a:	c89e                	sw	t2,80(sp)
20404e7c:	c6a2                	sw	s0,76(sp)
20404e7e:	c4aa                	sw	a0,72(sp)
20404e80:	c2ae                	sw	a1,68(sp)
20404e82:	c0b2                	sw	a2,64(sp)
20404e84:	de36                	sw	a3,60(sp)
20404e86:	dc3a                	sw	a4,56(sp)
20404e88:	da3e                	sw	a5,52(sp)
20404e8a:	d842                	sw	a6,48(sp)
20404e8c:	d646                	sw	a7,44(sp)
20404e8e:	d472                	sw	t3,40(sp)
20404e90:	d276                	sw	t4,36(sp)
20404e92:	d07a                	sw	t5,32(sp)
20404e94:	ce7e                	sw	t6,28(sp)
20404e96:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404e98:	a74ff0ef          	jal	ra,2040410c <__metal_myhart_id>
20404e9c:	872a                	mv	a4,a0
20404e9e:	070a                	slli	a4,a4,0x2
20404ea0:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
20404ea4:	97ba                	add	a5,a5,a4
20404ea6:	439c                	lw	a5,0(a5)
20404ea8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
20404eac:	fac42783          	lw	a5,-84(s0)
20404eb0:	c78d                	beqz	a5,20404eda <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404eb2:	fac42503          	lw	a0,-84(s0)
20404eb6:	a00ff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404eba:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
20404ebe:	fa842783          	lw	a5,-88(s0)
20404ec2:	3687a783          	lw	a5,872(a5)
20404ec6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20404eca:	fa842783          	lw	a5,-88(s0)
20404ece:	3607a783          	lw	a5,864(a5)
20404ed2:	fa442583          	lw	a1,-92(s0)
20404ed6:	4579                	li	a0,30
20404ed8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20404eda:	0001                	nop
20404edc:	40f6                	lw	ra,92(sp)
20404ede:	42e6                	lw	t0,88(sp)
20404ee0:	4356                	lw	t1,84(sp)
20404ee2:	43c6                	lw	t2,80(sp)
20404ee4:	4436                	lw	s0,76(sp)
20404ee6:	4526                	lw	a0,72(sp)
20404ee8:	4596                	lw	a1,68(sp)
20404eea:	4606                	lw	a2,64(sp)
20404eec:	56f2                	lw	a3,60(sp)
20404eee:	5762                	lw	a4,56(sp)
20404ef0:	57d2                	lw	a5,52(sp)
20404ef2:	5842                	lw	a6,48(sp)
20404ef4:	58b2                	lw	a7,44(sp)
20404ef6:	5e22                	lw	t3,40(sp)
20404ef8:	5e92                	lw	t4,36(sp)
20404efa:	5f02                	lw	t5,32(sp)
20404efc:	4ff2                	lw	t6,28(sp)
20404efe:	6125                	addi	sp,sp,96
20404f00:	30200073          	mret

20404f04 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20404f04:	711d                	addi	sp,sp,-96
20404f06:	ce86                	sw	ra,92(sp)
20404f08:	cc96                	sw	t0,88(sp)
20404f0a:	ca9a                	sw	t1,84(sp)
20404f0c:	c89e                	sw	t2,80(sp)
20404f0e:	c6a2                	sw	s0,76(sp)
20404f10:	c4aa                	sw	a0,72(sp)
20404f12:	c2ae                	sw	a1,68(sp)
20404f14:	c0b2                	sw	a2,64(sp)
20404f16:	de36                	sw	a3,60(sp)
20404f18:	dc3a                	sw	a4,56(sp)
20404f1a:	da3e                	sw	a5,52(sp)
20404f1c:	d842                	sw	a6,48(sp)
20404f1e:	d646                	sw	a7,44(sp)
20404f20:	d472                	sw	t3,40(sp)
20404f22:	d276                	sw	t4,36(sp)
20404f24:	d07a                	sw	t5,32(sp)
20404f26:	ce7e                	sw	t6,28(sp)
20404f28:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404f2a:	9e2ff0ef          	jal	ra,2040410c <__metal_myhart_id>
20404f2e:	872a                	mv	a4,a0
20404f30:	070a                	slli	a4,a4,0x2
20404f32:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
20404f36:	97ba                	add	a5,a5,a4
20404f38:	439c                	lw	a5,0(a5)
20404f3a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
20404f3e:	fac42783          	lw	a5,-84(s0)
20404f42:	c78d                	beqz	a5,20404f6c <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404f44:	fac42503          	lw	a0,-84(s0)
20404f48:	96eff0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20404f4c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
20404f50:	fa842783          	lw	a5,-88(s0)
20404f54:	3807a783          	lw	a5,896(a5)
20404f58:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
20404f5c:	fa842783          	lw	a5,-88(s0)
20404f60:	3787a783          	lw	a5,888(a5)
20404f64:	fa442583          	lw	a1,-92(s0)
20404f68:	457d                	li	a0,31
20404f6a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
20404f6c:	0001                	nop
20404f6e:	40f6                	lw	ra,92(sp)
20404f70:	42e6                	lw	t0,88(sp)
20404f72:	4356                	lw	t1,84(sp)
20404f74:	43c6                	lw	t2,80(sp)
20404f76:	4436                	lw	s0,76(sp)
20404f78:	4526                	lw	a0,72(sp)
20404f7a:	4596                	lw	a1,68(sp)
20404f7c:	4606                	lw	a2,64(sp)
20404f7e:	56f2                	lw	a3,60(sp)
20404f80:	5762                	lw	a4,56(sp)
20404f82:	57d2                	lw	a5,52(sp)
20404f84:	5842                	lw	a6,48(sp)
20404f86:	58b2                	lw	a7,44(sp)
20404f88:	5e22                	lw	t3,40(sp)
20404f8a:	5e92                	lw	t4,36(sp)
20404f8c:	5f02                	lw	t5,32(sp)
20404f8e:	4ff2                	lw	t6,28(sp)
20404f90:	6125                	addi	sp,sp,96
20404f92:	30200073          	mret

20404f96 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20404f96:	1101                	addi	sp,sp,-32
20404f98:	ce22                	sw	s0,28(sp)
20404f9a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20404f9c:	305027f3          	csrr	a5,mtvec
20404fa0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20404fa4:	fec42783          	lw	a5,-20(s0)
20404fa8:	03f7f793          	andi	a5,a5,63
20404fac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
20404fb0:	fec42703          	lw	a4,-20(s0)
20404fb4:	4789                	li	a5,2
20404fb6:	00f70d63          	beq	a4,a5,20404fd0 <__metal_controller_interrupt_vector_mode+0x3a>
20404fba:	fec42703          	lw	a4,-20(s0)
20404fbe:	478d                	li	a5,3
20404fc0:	00f70a63          	beq	a4,a5,20404fd4 <__metal_controller_interrupt_vector_mode+0x3e>
20404fc4:	fec42703          	lw	a4,-20(s0)
20404fc8:	4785                	li	a5,1
20404fca:	00f70763          	beq	a4,a5,20404fd8 <__metal_controller_interrupt_vector_mode+0x42>
20404fce:	a039                	j	20404fdc <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
20404fd0:	478d                	li	a5,3
20404fd2:	a031                	j	20404fde <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20404fd4:	4791                	li	a5,4
20404fd6:	a021                	j	20404fde <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20404fd8:	4785                	li	a5,1
20404fda:	a011                	j	20404fde <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
20404fdc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
20404fde:	853e                	mv	a0,a5
20404fe0:	4472                	lw	s0,28(sp)
20404fe2:	6105                	addi	sp,sp,32
20404fe4:	8082                	ret

20404fe6 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20404fe6:	7179                	addi	sp,sp,-48
20404fe8:	d622                	sw	s0,44(sp)
20404fea:	1800                	addi	s0,sp,48
20404fec:	fca42e23          	sw	a0,-36(s0)
20404ff0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20404ff4:	305027f3          	csrr	a5,mtvec
20404ff8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
20404ffc:	fec42783          	lw	a5,-20(s0)
20405000:	fc07f793          	andi	a5,a5,-64
20405004:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20405008:	fd842783          	lw	a5,-40(s0)
2040500c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20405010:	fdc42703          	lw	a4,-36(s0)
20405014:	4791                	li	a5,4
20405016:	06e7e063          	bltu	a5,a4,20405076 <__metal_controller_interrupt_vector+0x90>
2040501a:	fdc42783          	lw	a5,-36(s0)
2040501e:	00279713          	slli	a4,a5,0x2
20405022:	204077b7          	lui	a5,0x20407
20405026:	0f078793          	addi	a5,a5,240 # 204070f0 <__metal_driver_vtable_riscv_clint0+0x4c>
2040502a:	97ba                	add	a5,a5,a4
2040502c:	439c                	lw	a5,0(a5)
2040502e:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20405030:	fe842783          	lw	a5,-24(s0)
20405034:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20405038:	fec42783          	lw	a5,-20(s0)
2040503c:	0027e793          	ori	a5,a5,2
20405040:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20405044:	a80d                	j	20405076 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20405046:	fe842783          	lw	a5,-24(s0)
2040504a:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
2040504e:	fec42783          	lw	a5,-20(s0)
20405052:	0037e793          	ori	a5,a5,3
20405056:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
2040505a:	a831                	j	20405076 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
2040505c:	fe842783          	lw	a5,-24(s0)
20405060:	0017e793          	ori	a5,a5,1
20405064:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20405068:	a039                	j	20405076 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
2040506a:	fe842783          	lw	a5,-24(s0)
2040506e:	9bf1                	andi	a5,a5,-4
20405070:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20405074:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20405076:	0001                	nop
20405078:	5432                	lw	s0,44(sp)
2040507a:	6145                	addi	sp,sp,48
2040507c:	8082                	ret

2040507e <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
2040507e:	1101                	addi	sp,sp,-32
20405080:	ce22                	sw	s0,28(sp)
20405082:	1000                	addi	s0,sp,32
20405084:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20405088:	fec42783          	lw	a5,-20(s0)
2040508c:	17f5                	addi	a5,a5,-3
2040508e:	4771                	li	a4,28
20405090:	00f76d63          	bltu	a4,a5,204050aa <__metal_valid_interrupt_id+0x2c>
20405094:	00279713          	slli	a4,a5,0x2
20405098:	204077b7          	lui	a5,0x20407
2040509c:	10478793          	addi	a5,a5,260 # 20407104 <__metal_driver_vtable_riscv_clint0+0x60>
204050a0:	97ba                	add	a5,a5,a4
204050a2:	439c                	lw	a5,0(a5)
204050a4:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
204050a6:	4785                	li	a5,1
204050a8:	a019                	j	204050ae <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
204050aa:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
204050ac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
204050ae:	853e                	mv	a0,a5
204050b0:	4472                	lw	s0,28(sp)
204050b2:	6105                	addi	sp,sp,32
204050b4:	8082                	ret

204050b6 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
204050b6:	7179                	addi	sp,sp,-48
204050b8:	d606                	sw	ra,44(sp)
204050ba:	d422                	sw	s0,40(sp)
204050bc:	1800                	addi	s0,sp,48
204050be:	fca42e23          	sw	a0,-36(s0)
204050c2:	fcb42c23          	sw	a1,-40(s0)
204050c6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
204050ca:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
204050ce:	fdc42783          	lw	a5,-36(s0)
204050d2:	e399                	bnez	a5,204050d8 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
204050d4:	57fd                	li	a5,-1
204050d6:	a849                	j	20405168 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
204050d8:	fd842703          	lw	a4,-40(s0)
204050dc:	47fd                	li	a5,31
204050de:	08e7e063          	bltu	a5,a4,2040515e <__metal_local_interrupt_enable+0xa8>
204050e2:	fd842783          	lw	a5,-40(s0)
204050e6:	00279713          	slli	a4,a5,0x2
204050ea:	204077b7          	lui	a5,0x20407
204050ee:	17878793          	addi	a5,a5,376 # 20407178 <__metal_driver_vtable_riscv_clint0+0xd4>
204050f2:	97ba                	add	a5,a5,a4
204050f4:	439c                	lw	a5,0(a5)
204050f6:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
204050f8:	fd442783          	lw	a5,-44(s0)
204050fc:	c781                	beqz	a5,20405104 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
204050fe:	828ff0ef          	jal	ra,20404126 <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20405102:	a08d                	j	20405164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20405104:	83aff0ef          	jal	ra,2040413e <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20405108:	a8b1                	j	20405164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
2040510a:	fd442783          	lw	a5,-44(s0)
2040510e:	c781                	beqz	a5,20405116 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20405110:	846ff0ef          	jal	ra,20404156 <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20405114:	a881                	j	20405164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20405116:	858ff0ef          	jal	ra,2040416e <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
2040511a:	a0a9                	j	20405164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040511c:	fd442783          	lw	a5,-44(s0)
20405120:	c781                	beqz	a5,20405128 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20405122:	864ff0ef          	jal	ra,20404186 <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20405126:	a83d                	j	20405164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20405128:	878ff0ef          	jal	ra,204041a0 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
2040512c:	a825                	j	20405164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
2040512e:	fd442783          	lw	a5,-44(s0)
20405132:	c781                	beqz	a5,2040513a <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20405134:	886ff0ef          	jal	ra,204041ba <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20405138:	a035                	j	20405164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
2040513a:	89cff0ef          	jal	ra,204041d6 <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
2040513e:	a01d                	j	20405164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20405140:	fd442783          	lw	a5,-44(s0)
20405144:	c799                	beqz	a5,20405152 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20405146:	fd842783          	lw	a5,-40(s0)
2040514a:	853e                	mv	a0,a5
2040514c:	8a6ff0ef          	jal	ra,204041f2 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20405150:	a811                	j	20405164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20405152:	fd842783          	lw	a5,-40(s0)
20405156:	853e                	mv	a0,a5
20405158:	8c6ff0ef          	jal	ra,2040421e <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
2040515c:	a021                	j	20405164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
2040515e:	57fd                	li	a5,-1
20405160:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20405164:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20405168:	853e                	mv	a0,a5
2040516a:	50b2                	lw	ra,44(sp)
2040516c:	5422                	lw	s0,40(sp)
2040516e:	6145                	addi	sp,sp,48
20405170:	8082                	ret

20405172 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20405172:	7179                	addi	sp,sp,-48
20405174:	d622                	sw	s0,44(sp)
20405176:	1800                	addi	s0,sp,48
20405178:	fca42e23          	sw	a0,-36(s0)
2040517c:	fcb42c23          	sw	a1,-40(s0)
20405180:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20405184:	fdc42783          	lw	a5,-36(s0)
20405188:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040518c:	fd842703          	lw	a4,-40(s0)
20405190:	47ad                	li	a5,11
20405192:	02e7c263          	blt	a5,a4,204051b6 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20405196:	fd442783          	lw	a5,-44(s0)
2040519a:	cf91                	beqz	a5,204051b6 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040519c:	fec42703          	lw	a4,-20(s0)
204051a0:	fd842783          	lw	a5,-40(s0)
204051a4:	0e078793          	addi	a5,a5,224
204051a8:	078a                	slli	a5,a5,0x2
204051aa:	97ba                	add	a5,a5,a4
204051ac:	fd442703          	lw	a4,-44(s0)
204051b0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
204051b2:	4781                	li	a5,0
204051b4:	a011                	j	204051b8 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
204051b6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
204051b8:	853e                	mv	a0,a5
204051ba:	5432                	lw	s0,44(sp)
204051bc:	6145                	addi	sp,sp,48
204051be:	8082                	ret

204051c0 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
204051c0:	7139                	addi	sp,sp,-64
204051c2:	de06                	sw	ra,60(sp)
204051c4:	dc22                	sw	s0,56(sp)
204051c6:	0080                	addi	s0,sp,64
204051c8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204051cc:	fcc42783          	lw	a5,-52(s0)
204051d0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
204051d4:	fe442783          	lw	a5,-28(s0)
204051d8:	43dc                	lw	a5,4(a5)
204051da:	10079e63          	bnez	a5,204052f6 <__metal_driver_riscv_cpu_controller_interrupt_init+0x136>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
204051de:	57fd                	li	a5,-1
204051e0:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
204051e4:	57fd                	li	a5,-1
204051e6:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
204051ea:	301027f3          	csrr	a5,misa
204051ee:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
204051f2:	fe042703          	lw	a4,-32(s0)
204051f6:	6789                	lui	a5,0x2
204051f8:	8ff9                	and	a5,a5,a4
204051fa:	e799                	bnez	a5,20405208 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
204051fc:	fe042703          	lw	a4,-32(s0)
20405200:	000407b7          	lui	a5,0x40
20405204:	8ff9                	and	a5,a5,a4
20405206:	c799                	beqz	a5,20405214 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20405208:	57fd                	li	a5,-1
2040520a:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040520e:	57fd                	li	a5,-1
20405210:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20405214:	fe042703          	lw	a4,-32(s0)
20405218:	000407b7          	lui	a5,0x40
2040521c:	8ff9                	and	a5,a5,a4
2040521e:	c781                	beqz	a5,20405226 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20405220:	57fd                	li	a5,-1
20405222:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20405226:	fe042623          	sw	zero,-20(s0)
2040522a:	a0b9                	j	20405278 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
2040522c:	fe442683          	lw	a3,-28(s0)
20405230:	fec42703          	lw	a4,-20(s0)
20405234:	87ba                	mv	a5,a4
20405236:	0786                	slli	a5,a5,0x1
20405238:	97ba                	add	a5,a5,a4
2040523a:	078e                	slli	a5,a5,0x3
2040523c:	97b6                	add	a5,a5,a3
2040523e:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20405242:	fe442683          	lw	a3,-28(s0)
20405246:	fec42703          	lw	a4,-20(s0)
2040524a:	87ba                	mv	a5,a4
2040524c:	0786                	slli	a5,a5,0x1
2040524e:	97ba                	add	a5,a5,a4
20405250:	078e                	slli	a5,a5,0x3
20405252:	97b6                	add	a5,a5,a3
20405254:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20405258:	fe442683          	lw	a3,-28(s0)
2040525c:	fec42703          	lw	a4,-20(s0)
20405260:	87ba                	mv	a5,a4
20405262:	0786                	slli	a5,a5,0x1
20405264:	97ba                	add	a5,a5,a4
20405266:	078e                	slli	a5,a5,0x3
20405268:	97b6                	add	a5,a5,a3
2040526a:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
2040526e:	fec42783          	lw	a5,-20(s0)
20405272:	0785                	addi	a5,a5,1
20405274:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20405278:	fec42703          	lw	a4,-20(s0)
2040527c:	47fd                	li	a5,31
2040527e:	fae7d7e3          	bge	a5,a4,2040522c <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20405282:	fe042423          	sw	zero,-24(s0)
20405286:	a01d                	j	204052ac <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20405288:	fe442703          	lw	a4,-28(s0)
2040528c:	fe842783          	lw	a5,-24(s0)
20405290:	0e078793          	addi	a5,a5,224
20405294:	078a                	slli	a5,a5,0x2
20405296:	97ba                	add	a5,a5,a4
20405298:	20404737          	lui	a4,0x20404
2040529c:	24a70713          	addi	a4,a4,586 # 2040424a <__metal_default_exception_handler>
204052a0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
204052a2:	fe842783          	lw	a5,-24(s0)
204052a6:	0785                	addi	a5,a5,1
204052a8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
204052ac:	fe842703          	lw	a4,-24(s0)
204052b0:	47ad                	li	a5,11
204052b2:	fce7dbe3          	bge	a5,a4,20405288 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
204052b6:	204047b7          	lui	a5,0x20404
204052ba:	50078593          	addi	a1,a5,1280 # 20404500 <__metal_exception_handler>
204052be:	4501                	li	a0,0
204052c0:	d27ff0ef          	jal	ra,20404fe6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
204052c4:	301027f3          	csrr	a5,misa
204052c8:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
204052cc:	fdc42703          	lw	a4,-36(s0)
204052d0:	67c1                	lui	a5,0x10
204052d2:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
204052d6:	8ff9                	and	a5,a5,a4
204052d8:	cb99                	beqz	a5,204052ee <__metal_driver_riscv_cpu_controller_interrupt_init+0x12e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
204052da:	300027f3          	csrr	a5,mstatus
204052de:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
204052e2:	fdc42703          	lw	a4,-36(s0)
204052e6:	6789                	lui	a5,0x2
204052e8:	8fd9                	or	a5,a5,a4
204052ea:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
204052ee:	fe442783          	lw	a5,-28(s0)
204052f2:	4705                	li	a4,1
204052f4:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
204052f6:	0001                	nop
204052f8:	50f2                	lw	ra,60(sp)
204052fa:	5462                	lw	s0,56(sp)
204052fc:	6121                	addi	sp,sp,64
204052fe:	8082                	ret

20405300 <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20405300:	7179                	addi	sp,sp,-48
20405302:	d606                	sw	ra,44(sp)
20405304:	d422                	sw	s0,40(sp)
20405306:	1800                	addi	s0,sp,48
20405308:	fca42e23          	sw	a0,-36(s0)
2040530c:	fcb42c23          	sw	a1,-40(s0)
20405310:	fcc42a23          	sw	a2,-44(s0)
20405314:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20405318:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040531c:	fdc42783          	lw	a5,-36(s0)
20405320:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20405324:	fd842503          	lw	a0,-40(s0)
20405328:	d57ff0ef          	jal	ra,2040507e <__metal_valid_interrupt_id>
2040532c:	87aa                	mv	a5,a0
2040532e:	e399                	bnez	a5,20405334 <__metal_driver_riscv_cpu_controller_interrupt_register+0x34>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
20405330:	57d5                	li	a5,-11
20405332:	aa11                	j	20405446 <__metal_driver_riscv_cpu_controller_interrupt_register+0x146>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20405334:	fd442783          	lw	a5,-44(s0)
20405338:	cf85                	beqz	a5,20405370 <__metal_driver_riscv_cpu_controller_interrupt_register+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
2040533a:	fe842683          	lw	a3,-24(s0)
2040533e:	fd842703          	lw	a4,-40(s0)
20405342:	87ba                	mv	a5,a4
20405344:	0786                	slli	a5,a5,0x1
20405346:	97ba                	add	a5,a5,a4
20405348:	078e                	slli	a5,a5,0x3
2040534a:	97b6                	add	a5,a5,a3
2040534c:	fd442703          	lw	a4,-44(s0)
20405350:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20405354:	fe842683          	lw	a3,-24(s0)
20405358:	fd842703          	lw	a4,-40(s0)
2040535c:	87ba                	mv	a5,a4
2040535e:	0786                	slli	a5,a5,0x1
20405360:	97ba                	add	a5,a5,a4
20405362:	078e                	slli	a5,a5,0x3
20405364:	97b6                	add	a5,a5,a3
20405366:	fd042703          	lw	a4,-48(s0)
2040536a:	08e7ac23          	sw	a4,152(a5)
2040536e:	a8d1                	j	20405442 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
20405370:	fd842783          	lw	a5,-40(s0)
20405374:	17f5                	addi	a5,a5,-3
20405376:	4771                	li	a4,28
20405378:	0cf76263          	bltu	a4,a5,2040543c <__metal_driver_riscv_cpu_controller_interrupt_register+0x13c>
2040537c:	00279713          	slli	a4,a5,0x2
20405380:	204077b7          	lui	a5,0x20407
20405384:	1f878793          	addi	a5,a5,504 # 204071f8 <__metal_driver_vtable_riscv_clint0+0x154>
20405388:	97ba                	add	a5,a5,a4
2040538a:	439c                	lw	a5,0(a5)
2040538c:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
2040538e:	fe842683          	lw	a3,-24(s0)
20405392:	fd842703          	lw	a4,-40(s0)
20405396:	87ba                	mv	a5,a4
20405398:	0786                	slli	a5,a5,0x1
2040539a:	97ba                	add	a5,a5,a4
2040539c:	078e                	slli	a5,a5,0x3
2040539e:	97b6                	add	a5,a5,a3
204053a0:	20404737          	lui	a4,0x20404
204053a4:	33670713          	addi	a4,a4,822 # 20404336 <__metal_default_sw_handler>
204053a8:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
204053ac:	fe842683          	lw	a3,-24(s0)
204053b0:	fd842703          	lw	a4,-40(s0)
204053b4:	87ba                	mv	a5,a4
204053b6:	0786                	slli	a5,a5,0x1
204053b8:	97ba                	add	a5,a5,a4
204053ba:	078e                	slli	a5,a5,0x3
204053bc:	97b6                	add	a5,a5,a3
204053be:	fd042703          	lw	a4,-48(s0)
204053c2:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
204053c6:	a8b5                	j	20405442 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
204053c8:	fe842683          	lw	a3,-24(s0)
204053cc:	fd842703          	lw	a4,-40(s0)
204053d0:	87ba                	mv	a5,a4
204053d2:	0786                	slli	a5,a5,0x1
204053d4:	97ba                	add	a5,a5,a4
204053d6:	078e                	slli	a5,a5,0x3
204053d8:	97b6                	add	a5,a5,a3
204053da:	20404737          	lui	a4,0x20404
204053de:	42870713          	addi	a4,a4,1064 # 20404428 <__metal_default_timer_handler>
204053e2:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
204053e6:	fe842683          	lw	a3,-24(s0)
204053ea:	fd842703          	lw	a4,-40(s0)
204053ee:	87ba                	mv	a5,a4
204053f0:	0786                	slli	a5,a5,0x1
204053f2:	97ba                	add	a5,a5,a4
204053f4:	078e                	slli	a5,a5,0x3
204053f6:	97b6                	add	a5,a5,a3
204053f8:	fd042703          	lw	a4,-48(s0)
204053fc:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20405400:	a089                	j	20405442 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20405402:	fe842683          	lw	a3,-24(s0)
20405406:	fd842703          	lw	a4,-40(s0)
2040540a:	87ba                	mv	a5,a4
2040540c:	0786                	slli	a5,a5,0x1
2040540e:	97ba                	add	a5,a5,a4
20405410:	078e                	slli	a5,a5,0x3
20405412:	97b6                	add	a5,a5,a3
20405414:	20404737          	lui	a4,0x20404
20405418:	26270713          	addi	a4,a4,610 # 20404262 <__metal_default_interrupt_handler>
2040541c:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20405420:	fe842683          	lw	a3,-24(s0)
20405424:	fd842703          	lw	a4,-40(s0)
20405428:	87ba                	mv	a5,a4
2040542a:	0786                	slli	a5,a5,0x1
2040542c:	97ba                	add	a5,a5,a4
2040542e:	078e                	slli	a5,a5,0x3
20405430:	97b6                	add	a5,a5,a3
20405432:	fd042703          	lw	a4,-48(s0)
20405436:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
2040543a:	a021                	j	20405442 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
2040543c:	57d1                	li	a5,-12
2040543e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
20405442:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20405446:	853e                	mv	a0,a5
20405448:	50b2                	lw	ra,44(sp)
2040544a:	5422                	lw	s0,40(sp)
2040544c:	6145                	addi	sp,sp,48
2040544e:	8082                	ret

20405450 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20405450:	1101                	addi	sp,sp,-32
20405452:	ce06                	sw	ra,28(sp)
20405454:	cc22                	sw	s0,24(sp)
20405456:	1000                	addi	s0,sp,32
20405458:	fea42623          	sw	a0,-20(s0)
2040545c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20405460:	fe842783          	lw	a5,-24(s0)
20405464:	4605                	li	a2,1
20405466:	85be                	mv	a1,a5
20405468:	fec42503          	lw	a0,-20(s0)
2040546c:	c4bff0ef          	jal	ra,204050b6 <__metal_local_interrupt_enable>
20405470:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
20405472:	853e                	mv	a0,a5
20405474:	40f2                	lw	ra,28(sp)
20405476:	4462                	lw	s0,24(sp)
20405478:	6105                	addi	sp,sp,32
2040547a:	8082                	ret

2040547c <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
2040547c:	1101                	addi	sp,sp,-32
2040547e:	ce06                	sw	ra,28(sp)
20405480:	cc22                	sw	s0,24(sp)
20405482:	1000                	addi	s0,sp,32
20405484:	fea42623          	sw	a0,-20(s0)
20405488:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
2040548c:	fe842783          	lw	a5,-24(s0)
20405490:	4601                	li	a2,0
20405492:	85be                	mv	a1,a5
20405494:	fec42503          	lw	a0,-20(s0)
20405498:	c1fff0ef          	jal	ra,204050b6 <__metal_local_interrupt_enable>
2040549c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
2040549e:	853e                	mv	a0,a5
204054a0:	40f2                	lw	ra,28(sp)
204054a2:	4462                	lw	s0,24(sp)
204054a4:	6105                	addi	sp,sp,32
204054a6:	8082                	ret

204054a8 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
204054a8:	1101                	addi	sp,sp,-32
204054aa:	ce06                	sw	ra,28(sp)
204054ac:	cc22                	sw	s0,24(sp)
204054ae:	1000                	addi	s0,sp,32
204054b0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
204054b4:	ae3ff0ef          	jal	ra,20404f96 <__metal_controller_interrupt_vector_mode>
204054b8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
204054ba:	853e                	mv	a0,a5
204054bc:	40f2                	lw	ra,28(sp)
204054be:	4462                	lw	s0,24(sp)
204054c0:	6105                	addi	sp,sp,32
204054c2:	8082                	ret

204054c4 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
204054c4:	7179                	addi	sp,sp,-48
204054c6:	d606                	sw	ra,44(sp)
204054c8:	d422                	sw	s0,40(sp)
204054ca:	1800                	addi	s0,sp,48
204054cc:	fca42e23          	sw	a0,-36(s0)
204054d0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204054d4:	fdc42783          	lw	a5,-36(s0)
204054d8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
204054dc:	fd842783          	lw	a5,-40(s0)
204054e0:	eb99                	bnez	a5,204054f6 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
204054e2:	204047b7          	lui	a5,0x20404
204054e6:	50078593          	addi	a1,a5,1280 # 20404500 <__metal_exception_handler>
204054ea:	fd842503          	lw	a0,-40(s0)
204054ee:	af9ff0ef          	jal	ra,20404fe6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
204054f2:	4781                	li	a5,0
204054f4:	a00d                	j	20405516 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
204054f6:	fd842703          	lw	a4,-40(s0)
204054fa:	4785                	li	a5,1
204054fc:	00f71c63          	bne	a4,a5,20405514 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20405500:	204077b7          	lui	a5,0x20407
20405504:	e0078593          	addi	a1,a5,-512 # 20406e00 <__metal_vector_table>
20405508:	fd842503          	lw	a0,-40(s0)
2040550c:	adbff0ef          	jal	ra,20404fe6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20405510:	4781                	li	a5,0
20405512:	a011                	j	20405516 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20405514:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20405516:	853e                	mv	a0,a5
20405518:	50b2                	lw	ra,44(sp)
2040551a:	5422                	lw	s0,40(sp)
2040551c:	6145                	addi	sp,sp,48
2040551e:	8082                	ret

20405520 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20405520:	1101                	addi	sp,sp,-32
20405522:	ce22                	sw	s0,28(sp)
20405524:	1000                	addi	s0,sp,32
20405526:	fea42623          	sw	a0,-20(s0)
2040552a:	feb42423          	sw	a1,-24(s0)
2040552e:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20405532:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
20405534:	853e                	mv	a0,a5
20405536:	4472                	lw	s0,28(sp)
20405538:	6105                	addi	sp,sp,32
2040553a:	8082                	ret

2040553c <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
2040553c:	7139                	addi	sp,sp,-64
2040553e:	de22                	sw	s0,60(sp)
20405540:	0080                	addi	s0,sp,64
20405542:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20405546:	4301                	li	t1,0
20405548:	4381                	li	t2,0
2040554a:	fe642423          	sw	t1,-24(s0)
2040554e:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20405552:	b8002573          	csrr	a0,mcycleh
20405556:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
2040555a:	b0002573          	csrr	a0,mcycle
2040555e:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20405562:	b8002573          	csrr	a0,mcycleh
20405566:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
2040556a:	fe442883          	lw	a7,-28(s0)
2040556e:	fdc42503          	lw	a0,-36(s0)
20405572:	02a89563          	bne	a7,a0,2040559c <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20405576:	fe442503          	lw	a0,-28(s0)
2040557a:	85aa                	mv	a1,a0
2040557c:	4601                	li	a2,0
2040557e:	00059813          	slli	a6,a1,0x0
20405582:	4781                	li	a5,0
20405584:	fe042603          	lw	a2,-32(s0)
20405588:	86b2                	mv	a3,a2
2040558a:	4701                	li	a4,0
2040558c:	00d7e633          	or	a2,a5,a3
20405590:	fec42423          	sw	a2,-24(s0)
20405594:	00e867b3          	or	a5,a6,a4
20405598:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
2040559c:	fe842783          	lw	a5,-24(s0)
204055a0:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
204055a4:	853e                	mv	a0,a5
204055a6:	85c2                	mv	a1,a6
204055a8:	5472                	lw	s0,60(sp)
204055aa:	6121                	addi	sp,sp,64
204055ac:	8082                	ret

204055ae <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
204055ae:	7179                	addi	sp,sp,-48
204055b0:	d606                	sw	ra,44(sp)
204055b2:	d422                	sw	s0,40(sp)
204055b4:	d24a                	sw	s2,36(sp)
204055b6:	d04e                	sw	s3,32(sp)
204055b8:	1800                	addi	s0,sp,48
204055ba:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
204055be:	fdc42783          	lw	a5,-36(s0)
204055c2:	e781                	bnez	a5,204055ca <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
204055c4:	4901                	li	s2,0
204055c6:	4981                	li	s3,0
204055c8:	a821                	j	204055e0 <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
204055ca:	fdc42503          	lw	a0,-36(s0)
204055ce:	abffe0ef          	jal	ra,2040408c <__metal_driver_cpu_timebase>
204055d2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
204055d6:	fec42783          	lw	a5,-20(s0)
204055da:	893e                	mv	s2,a5
204055dc:	87fd                	srai	a5,a5,0x1f
204055de:	89be                	mv	s3,a5
204055e0:	87ca                	mv	a5,s2
204055e2:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
204055e4:	853e                	mv	a0,a5
204055e6:	85c2                	mv	a1,a6
204055e8:	50b2                	lw	ra,44(sp)
204055ea:	5422                	lw	s0,40(sp)
204055ec:	5912                	lw	s2,36(sp)
204055ee:	5982                	lw	s3,32(sp)
204055f0:	6145                	addi	sp,sp,48
204055f2:	8082                	ret

204055f4 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
204055f4:	7179                	addi	sp,sp,-48
204055f6:	d606                	sw	ra,44(sp)
204055f8:	d422                	sw	s0,40(sp)
204055fa:	1800                	addi	s0,sp,48
204055fc:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20405600:	4781                	li	a5,0
20405602:	4801                	li	a6,0
20405604:	fef42023          	sw	a5,-32(s0)
20405608:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040560c:	fdc42503          	lw	a0,-36(s0)
20405610:	aa7fe0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20405614:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20405618:	fec42783          	lw	a5,-20(s0)
2040561c:	c78d                	beqz	a5,20405646 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
2040561e:	fec42783          	lw	a5,-20(s0)
20405622:	13c7a783          	lw	a5,316(a5)
20405626:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
2040562a:	fe842783          	lw	a5,-24(s0)
2040562e:	cf81                	beqz	a5,20405646 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20405630:	fe842783          	lw	a5,-24(s0)
20405634:	439c                	lw	a5,0(a5)
20405636:	43f8                	lw	a4,68(a5)
20405638:	fe040793          	addi	a5,s0,-32
2040563c:	863e                	mv	a2,a5
2040563e:	4585                	li	a1,1
20405640:	fe842503          	lw	a0,-24(s0)
20405644:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20405646:	fe042783          	lw	a5,-32(s0)
2040564a:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
2040564e:	853e                	mv	a0,a5
20405650:	85c2                	mv	a1,a6
20405652:	50b2                	lw	ra,44(sp)
20405654:	5422                	lw	s0,40(sp)
20405656:	6145                	addi	sp,sp,48
20405658:	8082                	ret

2040565a <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
2040565a:	7179                	addi	sp,sp,-48
2040565c:	d606                	sw	ra,44(sp)
2040565e:	d422                	sw	s0,40(sp)
20405660:	d226                	sw	s1,36(sp)
20405662:	1800                	addi	s0,sp,48
20405664:	fca42e23          	sw	a0,-36(s0)
20405668:	fcb42823          	sw	a1,-48(s0)
2040566c:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20405670:	57fd                	li	a5,-1
20405672:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20405676:	fdc42503          	lw	a0,-36(s0)
2040567a:	a3dfe0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
2040567e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20405682:	fe842783          	lw	a5,-24(s0)
20405686:	cf8d                	beqz	a5,204056c0 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20405688:	fe842783          	lw	a5,-24(s0)
2040568c:	13c7a783          	lw	a5,316(a5)
20405690:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20405694:	fe442783          	lw	a5,-28(s0)
20405698:	c785                	beqz	a5,204056c0 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
2040569a:	fe442783          	lw	a5,-28(s0)
2040569e:	439c                	lw	a5,0(a5)
204056a0:	47a4                	lw	s1,72(a5)
204056a2:	fdc42503          	lw	a0,-36(s0)
204056a6:	9c3fe0ef          	jal	ra,20404068 <__metal_driver_cpu_hartid>
204056aa:	87aa                	mv	a5,a0
204056ac:	fd042603          	lw	a2,-48(s0)
204056b0:	fd442683          	lw	a3,-44(s0)
204056b4:	85be                	mv	a1,a5
204056b6:	fe442503          	lw	a0,-28(s0)
204056ba:	9482                	jalr	s1
204056bc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
204056c0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
204056c4:	853e                	mv	a0,a5
204056c6:	50b2                	lw	ra,44(sp)
204056c8:	5422                	lw	s0,40(sp)
204056ca:	5492                	lw	s1,36(sp)
204056cc:	6145                	addi	sp,sp,48
204056ce:	8082                	ret

204056d0 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
204056d0:	1101                	addi	sp,sp,-32
204056d2:	ce22                	sw	s0,28(sp)
204056d4:	1000                	addi	s0,sp,32
204056d6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
204056da:	81018793          	addi	a5,gp,-2032 # 800007b0 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
204056de:	853e                	mv	a0,a5
204056e0:	4472                	lw	s0,28(sp)
204056e2:	6105                	addi	sp,sp,32
204056e4:	8082                	ret

204056e6 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
204056e6:	1101                	addi	sp,sp,-32
204056e8:	ce22                	sw	s0,28(sp)
204056ea:	1000                	addi	s0,sp,32
204056ec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
204056f0:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
204056f2:	853e                	mv	a0,a5
204056f4:	4472                	lw	s0,28(sp)
204056f6:	6105                	addi	sp,sp,32
204056f8:	8082                	ret

204056fa <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
204056fa:	1101                	addi	sp,sp,-32
204056fc:	ce22                	sw	s0,28(sp)
204056fe:	1000                	addi	s0,sp,32
20405700:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20405704:	81018793          	addi	a5,gp,-2032 # 800007b0 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20405708:	853e                	mv	a0,a5
2040570a:	4472                	lw	s0,28(sp)
2040570c:	6105                	addi	sp,sp,32
2040570e:	8082                	ret

20405710 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20405710:	1101                	addi	sp,sp,-32
20405712:	ce22                	sw	s0,28(sp)
20405714:	1000                	addi	s0,sp,32
20405716:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
2040571a:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
2040571c:	853e                	mv	a0,a5
2040571e:	4472                	lw	s0,28(sp)
20405720:	6105                	addi	sp,sp,32
20405722:	8082                	ret

20405724 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20405724:	7179                	addi	sp,sp,-48
20405726:	d606                	sw	ra,44(sp)
20405728:	d422                	sw	s0,40(sp)
2040572a:	1800                	addi	s0,sp,48
2040572c:	fca42e23          	sw	a0,-36(s0)
20405730:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20405734:	57fd                	li	a5,-1
20405736:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040573a:	fdc42503          	lw	a0,-36(s0)
2040573e:	979fe0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20405742:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20405746:	fe842783          	lw	a5,-24(s0)
2040574a:	c79d                	beqz	a5,20405778 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040574c:	fe842783          	lw	a5,-24(s0)
20405750:	0dc7a783          	lw	a5,220(a5)
20405754:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20405758:	fe442783          	lw	a5,-28(s0)
2040575c:	cf91                	beqz	a5,20405778 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
2040575e:	fe442783          	lw	a5,-28(s0)
20405762:	439c                	lw	a5,0(a5)
20405764:	43f8                	lw	a4,68(a5)
20405766:	fd840793          	addi	a5,s0,-40
2040576a:	863e                	mv	a2,a5
2040576c:	458d                	li	a1,3
2040576e:	fe442503          	lw	a0,-28(s0)
20405772:	9702                	jalr	a4
20405774:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20405778:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
2040577c:	853e                	mv	a0,a5
2040577e:	50b2                	lw	ra,44(sp)
20405780:	5422                	lw	s0,40(sp)
20405782:	6145                	addi	sp,sp,48
20405784:	8082                	ret

20405786 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20405786:	7179                	addi	sp,sp,-48
20405788:	d606                	sw	ra,44(sp)
2040578a:	d422                	sw	s0,40(sp)
2040578c:	1800                	addi	s0,sp,48
2040578e:	fca42e23          	sw	a0,-36(s0)
20405792:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20405796:	57fd                	li	a5,-1
20405798:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040579c:	fdc42503          	lw	a0,-36(s0)
204057a0:	917fe0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
204057a4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
204057a8:	fe842783          	lw	a5,-24(s0)
204057ac:	c79d                	beqz	a5,204057da <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204057ae:	fe842783          	lw	a5,-24(s0)
204057b2:	0dc7a783          	lw	a5,220(a5)
204057b6:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
204057ba:	fe442783          	lw	a5,-28(s0)
204057be:	cf91                	beqz	a5,204057da <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
204057c0:	fe442783          	lw	a5,-28(s0)
204057c4:	439c                	lw	a5,0(a5)
204057c6:	43f8                	lw	a4,68(a5)
204057c8:	fd840793          	addi	a5,s0,-40
204057cc:	863e                	mv	a2,a5
204057ce:	4589                	li	a1,2
204057d0:	fe442503          	lw	a0,-28(s0)
204057d4:	9702                	jalr	a4
204057d6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
204057da:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
204057de:	853e                	mv	a0,a5
204057e0:	50b2                	lw	ra,44(sp)
204057e2:	5422                	lw	s0,40(sp)
204057e4:	6145                	addi	sp,sp,48
204057e6:	8082                	ret

204057e8 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
204057e8:	7179                	addi	sp,sp,-48
204057ea:	d606                	sw	ra,44(sp)
204057ec:	d422                	sw	s0,40(sp)
204057ee:	1800                	addi	s0,sp,48
204057f0:	fca42e23          	sw	a0,-36(s0)
204057f4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
204057f8:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204057fc:	fdc42503          	lw	a0,-36(s0)
20405800:	8b7fe0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20405804:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20405808:	fe842783          	lw	a5,-24(s0)
2040580c:	c79d                	beqz	a5,2040583a <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040580e:	fe842783          	lw	a5,-24(s0)
20405812:	0dc7a783          	lw	a5,220(a5)
20405816:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
2040581a:	fe442783          	lw	a5,-28(s0)
2040581e:	cf91                	beqz	a5,2040583a <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20405820:	fe442783          	lw	a5,-28(s0)
20405824:	439c                	lw	a5,0(a5)
20405826:	43f8                	lw	a4,68(a5)
20405828:	fd840793          	addi	a5,s0,-40
2040582c:	863e                	mv	a2,a5
2040582e:	4591                	li	a1,4
20405830:	fe442503          	lw	a0,-28(s0)
20405834:	9702                	jalr	a4
20405836:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
2040583a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
2040583e:	853e                	mv	a0,a5
20405840:	50b2                	lw	ra,44(sp)
20405842:	5422                	lw	s0,40(sp)
20405844:	6145                	addi	sp,sp,48
20405846:	8082                	ret

20405848 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20405848:	1101                	addi	sp,sp,-32
2040584a:	ce06                	sw	ra,28(sp)
2040584c:	cc22                	sw	s0,24(sp)
2040584e:	1000                	addi	s0,sp,32
20405850:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20405854:	fec42503          	lw	a0,-20(s0)
20405858:	85ffe0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
2040585c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
2040585e:	853e                	mv	a0,a5
20405860:	40f2                	lw	ra,28(sp)
20405862:	4462                	lw	s0,24(sp)
20405864:	6105                	addi	sp,sp,32
20405866:	8082                	ret

20405868 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20405868:	7179                	addi	sp,sp,-48
2040586a:	d606                	sw	ra,44(sp)
2040586c:	d422                	sw	s0,40(sp)
2040586e:	1800                	addi	s0,sp,48
20405870:	fca42e23          	sw	a0,-36(s0)
20405874:	fcb42c23          	sw	a1,-40(s0)
20405878:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040587c:	fdc42503          	lw	a0,-36(s0)
20405880:	837fe0ef          	jal	ra,204040b6 <__metal_driver_cpu_interrupt_controller>
20405884:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20405888:	fec42783          	lw	a5,-20(s0)
2040588c:	cb99                	beqz	a5,204058a2 <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
2040588e:	fd442603          	lw	a2,-44(s0)
20405892:	fd842583          	lw	a1,-40(s0)
20405896:	fec42503          	lw	a0,-20(s0)
2040589a:	8d9ff0ef          	jal	ra,20405172 <__metal_exception_register>
2040589e:	87aa                	mv	a5,a0
204058a0:	a011                	j	204058a4 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
204058a2:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
204058a4:	853e                	mv	a0,a5
204058a6:	50b2                	lw	ra,44(sp)
204058a8:	5422                	lw	s0,40(sp)
204058aa:	6145                	addi	sp,sp,48
204058ac:	8082                	ret

204058ae <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
204058ae:	1101                	addi	sp,sp,-32
204058b0:	ce22                	sw	s0,28(sp)
204058b2:	1000                	addi	s0,sp,32
204058b4:	fea42623          	sw	a0,-20(s0)
204058b8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
204058bc:	fe842783          	lw	a5,-24(s0)
204058c0:	0007d783          	lhu	a5,0(a5)
204058c4:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
204058c8:	478d                	li	a5,3
204058ca:	00f71463          	bne	a4,a5,204058d2 <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
204058ce:	4791                	li	a5,4
204058d0:	a011                	j	204058d4 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
204058d2:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
204058d4:	853e                	mv	a0,a5
204058d6:	4472                	lw	s0,28(sp)
204058d8:	6105                	addi	sp,sp,32
204058da:	8082                	ret

204058dc <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
204058dc:	7179                	addi	sp,sp,-48
204058de:	d622                	sw	s0,44(sp)
204058e0:	1800                	addi	s0,sp,48
204058e2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204058e6:	341027f3          	csrr	a5,mepc
204058ea:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
204058ee:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
204058f2:	853e                	mv	a0,a5
204058f4:	5432                	lw	s0,44(sp)
204058f6:	6145                	addi	sp,sp,48
204058f8:	8082                	ret

204058fa <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
204058fa:	1101                	addi	sp,sp,-32
204058fc:	ce22                	sw	s0,28(sp)
204058fe:	1000                	addi	s0,sp,32
20405900:	fea42623          	sw	a0,-20(s0)
20405904:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20405908:	fe842783          	lw	a5,-24(s0)
2040590c:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20405910:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20405912:	853e                	mv	a0,a5
20405914:	4472                	lw	s0,28(sp)
20405916:	6105                	addi	sp,sp,32
20405918:	8082                	ret

2040591a <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
2040591a:	1101                	addi	sp,sp,-32
2040591c:	ce22                	sw	s0,28(sp)
2040591e:	1000                	addi	s0,sp,32
20405920:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20405924:	fec42703          	lw	a4,-20(s0)
20405928:	800007b7          	lui	a5,0x80000
2040592c:	48078793          	addi	a5,a5,1152 # 80000480 <metal_segment_heap_target_end+0xffffc7ec>
20405930:	00f71563          	bne	a4,a5,2040593a <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20405934:	0c0007b7          	lui	a5,0xc000
20405938:	a011                	j	2040593c <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
2040593a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:245
	}
}
2040593c:	853e                	mv	a0,a5
2040593e:	4472                	lw	s0,28(sp)
20405940:	6105                	addi	sp,sp,32
20405942:	8082                	ret

20405944 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20405944:	1101                	addi	sp,sp,-32
20405946:	ce22                	sw	s0,28(sp)
20405948:	1000                	addi	s0,sp,32
2040594a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
2040594e:	fec42703          	lw	a4,-20(s0)
20405952:	800007b7          	lui	a5,0x80000
20405956:	48078793          	addi	a5,a5,1152 # 80000480 <metal_segment_heap_target_end+0xffffc7ec>
2040595a:	00f71463          	bne	a4,a5,20405962 <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
2040595e:	47ed                	li	a5,27
20405960:	a011                	j	20405964 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
20405962:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:265
	}
}
20405964:	853e                	mv	a0,a5
20405966:	4472                	lw	s0,28(sp)
20405968:	6105                	addi	sp,sp,32
2040596a:	8082                	ret

2040596c <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
2040596c:	1101                	addi	sp,sp,-32
2040596e:	ce22                	sw	s0,28(sp)
20405970:	1000                	addi	s0,sp,32
20405972:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20405976:	fec42703          	lw	a4,-20(s0)
2040597a:	800007b7          	lui	a5,0x80000
2040597e:	48078793          	addi	a5,a5,1152 # 80000480 <metal_segment_heap_target_end+0xffffc7ec>
20405982:	00f71463          	bne	a4,a5,2040598a <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20405986:	479d                	li	a5,7
20405988:	a011                	j	2040598c <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
2040598a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:275
	}
}
2040598c:	853e                	mv	a0,a5
2040598e:	4472                	lw	s0,28(sp)
20405990:	6105                	addi	sp,sp,32
20405992:	8082                	ret

20405994 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20405994:	1101                	addi	sp,sp,-32
20405996:	ce22                	sw	s0,28(sp)
20405998:	1000                	addi	s0,sp,32
2040599a:	fea42623          	sw	a0,-20(s0)
2040599e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:279
	if (idx == 0) {
204059a2:	fe842783          	lw	a5,-24(s0)
204059a6:	e791                	bnez	a5,204059b2 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
204059a8:	800007b7          	lui	a5,0x80000
204059ac:	0c878793          	addi	a5,a5,200 # 800000c8 <metal_segment_heap_target_end+0xffffc434>
204059b0:	a011                	j	204059b4 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
204059b2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:285
	}
}
204059b4:	853e                	mv	a0,a5
204059b6:	4472                	lw	s0,28(sp)
204059b8:	6105                	addi	sp,sp,32
204059ba:	8082                	ret

204059bc <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
204059bc:	1101                	addi	sp,sp,-32
204059be:	ce22                	sw	s0,28(sp)
204059c0:	1000                	addi	s0,sp,32
204059c2:	fea42623          	sw	a0,-20(s0)
204059c6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:289
	if (idx == 0) {
204059ca:	fe842783          	lw	a5,-24(s0)
204059ce:	e399                	bnez	a5,204059d4 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:290
		return 11;
204059d0:	47ad                	li	a5,11
204059d2:	a011                	j	204059d6 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
204059d4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:295
	}
}
204059d6:	853e                	mv	a0,a5
204059d8:	4472                	lw	s0,28(sp)
204059da:	6105                	addi	sp,sp,32
204059dc:	8082                	ret

204059de <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
204059de:	7179                	addi	sp,sp,-48
204059e0:	d606                	sw	ra,44(sp)
204059e2:	d422                	sw	s0,40(sp)
204059e4:	1800                	addi	s0,sp,48
204059e6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204059ea:	fdc42503          	lw	a0,-36(s0)
204059ee:	3735                	jal	2040591a <__metal_driver_sifive_plic0_control_base>
204059f0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204059f4:	fec42703          	lw	a4,-20(s0)
204059f8:	002007b7          	lui	a5,0x200
204059fc:	0791                	addi	a5,a5,4
204059fe:	97ba                	add	a5,a5,a4
20405a00:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20405a02:	853e                	mv	a0,a5
20405a04:	50b2                	lw	ra,44(sp)
20405a06:	5422                	lw	s0,40(sp)
20405a08:	6145                	addi	sp,sp,48
20405a0a:	8082                	ret

20405a0c <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20405a0c:	7179                	addi	sp,sp,-48
20405a0e:	d606                	sw	ra,44(sp)
20405a10:	d422                	sw	s0,40(sp)
20405a12:	1800                	addi	s0,sp,48
20405a14:	fca42e23          	sw	a0,-36(s0)
20405a18:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20405a1c:	fdc42503          	lw	a0,-36(s0)
20405a20:	3ded                	jal	2040591a <__metal_driver_sifive_plic0_control_base>
20405a22:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20405a26:	fec42703          	lw	a4,-20(s0)
20405a2a:	002007b7          	lui	a5,0x200
20405a2e:	0791                	addi	a5,a5,4
20405a30:	97ba                	add	a5,a5,a4
20405a32:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20405a34:	fd842783          	lw	a5,-40(s0)
20405a38:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20405a3a:	0001                	nop
20405a3c:	50b2                	lw	ra,44(sp)
20405a3e:	5422                	lw	s0,40(sp)
20405a40:	6145                	addi	sp,sp,48
20405a42:	8082                	ret

20405a44 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20405a44:	7179                	addi	sp,sp,-48
20405a46:	d606                	sw	ra,44(sp)
20405a48:	d422                	sw	s0,40(sp)
20405a4a:	1800                	addi	s0,sp,48
20405a4c:	fca42e23          	sw	a0,-36(s0)
20405a50:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20405a54:	fdc42503          	lw	a0,-36(s0)
20405a58:	35c9                	jal	2040591a <__metal_driver_sifive_plic0_control_base>
20405a5a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20405a5e:	fec42703          	lw	a4,-20(s0)
20405a62:	002007b7          	lui	a5,0x200
20405a66:	97ba                	add	a5,a5,a4
20405a68:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20405a6a:	fd842783          	lw	a5,-40(s0)
20405a6e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
20405a70:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
20405a72:	853e                	mv	a0,a5
20405a74:	50b2                	lw	ra,44(sp)
20405a76:	5422                	lw	s0,40(sp)
20405a78:	6145                	addi	sp,sp,48
20405a7a:	8082                	ret

20405a7c <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20405a7c:	7179                	addi	sp,sp,-48
20405a7e:	d606                	sw	ra,44(sp)
20405a80:	d422                	sw	s0,40(sp)
20405a82:	1800                	addi	s0,sp,48
20405a84:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20405a88:	fdc42503          	lw	a0,-36(s0)
20405a8c:	3579                	jal	2040591a <__metal_driver_sifive_plic0_control_base>
20405a8e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20405a92:	fec42703          	lw	a4,-20(s0)
20405a96:	002007b7          	lui	a5,0x200
20405a9a:	97ba                	add	a5,a5,a4
20405a9c:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20405a9e:	853e                	mv	a0,a5
20405aa0:	50b2                	lw	ra,44(sp)
20405aa2:	5422                	lw	s0,40(sp)
20405aa4:	6145                	addi	sp,sp,48
20405aa6:	8082                	ret

20405aa8 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20405aa8:	7179                	addi	sp,sp,-48
20405aaa:	d606                	sw	ra,44(sp)
20405aac:	d422                	sw	s0,40(sp)
20405aae:	1800                	addi	s0,sp,48
20405ab0:	fca42e23          	sw	a0,-36(s0)
20405ab4:	fcb42c23          	sw	a1,-40(s0)
20405ab8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20405abc:	fdc42503          	lw	a0,-36(s0)
20405ac0:	3da9                	jal	2040591a <__metal_driver_sifive_plic0_control_base>
20405ac2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20405ac6:	fdc42503          	lw	a0,-36(s0)
20405aca:	354d                	jal	2040596c <__metal_driver_sifive_plic0_max_priority>
20405acc:	87aa                	mv	a5,a0
20405ace:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20405ad2:	fe842783          	lw	a5,-24(s0)
20405ad6:	c785                	beqz	a5,20405afe <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20405ad8:	fd442703          	lw	a4,-44(s0)
20405adc:	fe842783          	lw	a5,-24(s0)
20405ae0:	00f77f63          	bgeu	a4,a5,20405afe <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20405ae4:	fd842783          	lw	a5,-40(s0)
20405ae8:	078a                	slli	a5,a5,0x2
20405aea:	873e                	mv	a4,a5
20405aec:	fec42783          	lw	a5,-20(s0)
20405af0:	97ba                	add	a5,a5,a4
20405af2:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20405af4:	fd442783          	lw	a5,-44(s0)
20405af8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20405afa:	4781                	li	a5,0
20405afc:	a011                	j	20405b00 <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20405afe:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
20405b00:	853e                	mv	a0,a5
20405b02:	50b2                	lw	ra,44(sp)
20405b04:	5422                	lw	s0,40(sp)
20405b06:	6145                	addi	sp,sp,48
20405b08:	8082                	ret

20405b0a <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20405b0a:	7179                	addi	sp,sp,-48
20405b0c:	d606                	sw	ra,44(sp)
20405b0e:	d422                	sw	s0,40(sp)
20405b10:	1800                	addi	s0,sp,48
20405b12:	fca42e23          	sw	a0,-36(s0)
20405b16:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20405b1a:	fdc42503          	lw	a0,-36(s0)
20405b1e:	3bf5                	jal	2040591a <__metal_driver_sifive_plic0_control_base>
20405b20:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20405b24:	fd842783          	lw	a5,-40(s0)
20405b28:	078a                	slli	a5,a5,0x2
20405b2a:	873e                	mv	a4,a5
20405b2c:	fec42783          	lw	a5,-20(s0)
20405b30:	97ba                	add	a5,a5,a4
20405b32:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20405b34:	853e                	mv	a0,a5
20405b36:	50b2                	lw	ra,44(sp)
20405b38:	5422                	lw	s0,40(sp)
20405b3a:	6145                	addi	sp,sp,48
20405b3c:	8082                	ret

20405b3e <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20405b3e:	7179                	addi	sp,sp,-48
20405b40:	d606                	sw	ra,44(sp)
20405b42:	d422                	sw	s0,40(sp)
20405b44:	1800                	addi	s0,sp,48
20405b46:	fca42e23          	sw	a0,-36(s0)
20405b4a:	fcb42c23          	sw	a1,-40(s0)
20405b4e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20405b52:	fdc42503          	lw	a0,-36(s0)
20405b56:	dc5ff0ef          	jal	ra,2040591a <__metal_driver_sifive_plic0_control_base>
20405b5a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20405b5e:	fd842783          	lw	a5,-40(s0)
20405b62:	8795                	srai	a5,a5,0x5
20405b64:	078a                	slli	a5,a5,0x2
20405b66:	873e                	mv	a4,a5
20405b68:	fec42783          	lw	a5,-20(s0)
20405b6c:	973e                	add	a4,a4,a5
20405b6e:	6789                	lui	a5,0x2
20405b70:	97ba                	add	a5,a5,a4
20405b72:	439c                	lw	a5,0(a5)
20405b74:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20405b78:	fd442783          	lw	a5,-44(s0)
20405b7c:	cf81                	beqz	a5,20405b94 <__metal_plic0_enable+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20405b7e:	fd842783          	lw	a5,-40(s0)
20405b82:	8bfd                	andi	a5,a5,31
20405b84:	4705                	li	a4,1
20405b86:	00f717b3          	sll	a5,a4,a5
20405b8a:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20405b8c:	fe842783          	lw	a5,-24(s0)
20405b90:	8fd9                	or	a5,a5,a4
20405b92:	a829                	j	20405bac <__metal_plic0_enable+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20405b94:	fd842783          	lw	a5,-40(s0)
20405b98:	8bfd                	andi	a5,a5,31
20405b9a:	4705                	li	a4,1
20405b9c:	00f717b3          	sll	a5,a4,a5
20405ba0:	fff7c793          	not	a5,a5
20405ba4:	873e                	mv	a4,a5
20405ba6:	fe842783          	lw	a5,-24(s0)
20405baa:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20405bac:	fd842703          	lw	a4,-40(s0)
20405bb0:	8715                	srai	a4,a4,0x5
20405bb2:	070a                	slli	a4,a4,0x2
20405bb4:	86ba                	mv	a3,a4
20405bb6:	fec42703          	lw	a4,-20(s0)
20405bba:	96ba                	add	a3,a3,a4
20405bbc:	6709                	lui	a4,0x2
20405bbe:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20405bc0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20405bc2:	0001                	nop
20405bc4:	50b2                	lw	ra,44(sp)
20405bc6:	5422                	lw	s0,40(sp)
20405bc8:	6145                	addi	sp,sp,48
20405bca:	8082                	ret

20405bcc <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20405bcc:	1101                	addi	sp,sp,-32
20405bce:	ce06                	sw	ra,28(sp)
20405bd0:	cc22                	sw	s0,24(sp)
20405bd2:	1000                	addi	s0,sp,32
20405bd4:	fea42623          	sw	a0,-20(s0)
20405bd8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20405bdc:	12c00513          	li	a0,300
20405be0:	1d8010ef          	jal	ra,20406db8 <metal_shutdown>

20405be4 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20405be4:	7179                	addi	sp,sp,-48
20405be6:	d606                	sw	ra,44(sp)
20405be8:	d422                	sw	s0,40(sp)
20405bea:	1800                	addi	s0,sp,48
20405bec:	fca42e23          	sw	a0,-36(s0)
20405bf0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20405bf4:	fd842783          	lw	a5,-40(s0)
20405bf8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20405bfc:	fec42503          	lw	a0,-20(s0)
20405c00:	ddfff0ef          	jal	ra,204059de <__metal_plic0_claim_interrupt>
20405c04:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20405c08:	fec42503          	lw	a0,-20(s0)
20405c0c:	d39ff0ef          	jal	ra,20405944 <__metal_driver_sifive_plic0_num_interrupts>
20405c10:	87aa                	mv	a5,a0
20405c12:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20405c16:	fe842703          	lw	a4,-24(s0)
20405c1a:	fe442783          	lw	a5,-28(s0)
20405c1e:	04f77263          	bgeu	a4,a5,20405c62 <__metal_plic0_handler+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20405c22:	fec42703          	lw	a4,-20(s0)
20405c26:	fe842783          	lw	a5,-24(s0)
20405c2a:	078a                	slli	a5,a5,0x2
20405c2c:	97ba                	add	a5,a5,a4
20405c2e:	479c                	lw	a5,8(a5)
20405c30:	cb8d                	beqz	a5,20405c62 <__metal_plic0_handler+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
20405c32:	fec42703          	lw	a4,-20(s0)
20405c36:	fe842783          	lw	a5,-24(s0)
20405c3a:	078a                	slli	a5,a5,0x2
20405c3c:	97ba                	add	a5,a5,a4
20405c3e:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20405c42:	fe842603          	lw	a2,-24(s0)
20405c46:	fec42683          	lw	a3,-20(s0)
20405c4a:	fe842703          	lw	a4,-24(s0)
20405c4e:	87ba                	mv	a5,a4
20405c50:	0786                	slli	a5,a5,0x1
20405c52:	97ba                	add	a5,a5,a4
20405c54:	078e                	slli	a5,a5,0x3
20405c56:	97b6                	add	a5,a5,a3
20405c58:	0887a783          	lw	a5,136(a5)
20405c5c:	85be                	mv	a1,a5
20405c5e:	8532                	mv	a0,a2
20405c60:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20405c62:	fe842583          	lw	a1,-24(s0)
20405c66:	fec42503          	lw	a0,-20(s0)
20405c6a:	da3ff0ef          	jal	ra,20405a0c <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
20405c6e:	0001                	nop
20405c70:	50b2                	lw	ra,44(sp)
20405c72:	5422                	lw	s0,40(sp)
20405c74:	6145                	addi	sp,sp,48
20405c76:	8082                	ret

20405c78 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20405c78:	7139                	addi	sp,sp,-64
20405c7a:	de06                	sw	ra,60(sp)
20405c7c:	dc22                	sw	s0,56(sp)
20405c7e:	0080                	addi	s0,sp,64
20405c80:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20405c84:	fcc42783          	lw	a5,-52(s0)
20405c88:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20405c8c:	fe442783          	lw	a5,-28(s0)
20405c90:	43dc                	lw	a5,4(a5)
20405c92:	12079163          	bnez	a5,20405db4 <__metal_driver_riscv_plic0_init+0x13c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20405c96:	fe042623          	sw	zero,-20(s0)
20405c9a:	a229                	j	20405da4 <__metal_driver_riscv_plic0_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20405c9c:	fcc42503          	lw	a0,-52(s0)
20405ca0:	ca5ff0ef          	jal	ra,20405944 <__metal_driver_sifive_plic0_num_interrupts>
20405ca4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20405ca8:	fec42583          	lw	a1,-20(s0)
20405cac:	fcc42503          	lw	a0,-52(s0)
20405cb0:	ce5ff0ef          	jal	ra,20405994 <__metal_driver_sifive_plic0_interrupt_parents>
20405cb4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20405cb8:	fec42583          	lw	a1,-20(s0)
20405cbc:	fcc42503          	lw	a0,-52(s0)
20405cc0:	cfdff0ef          	jal	ra,204059bc <__metal_driver_sifive_plic0_interrupt_lines>
20405cc4:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
20405cc8:	fdc42783          	lw	a5,-36(s0)
20405ccc:	439c                	lw	a5,0(a5)
20405cce:	439c                	lw	a5,0(a5)
20405cd0:	fdc42503          	lw	a0,-36(s0)
20405cd4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20405cd6:	fe042423          	sw	zero,-24(s0)
20405cda:	a08d                	j	20405d3c <__metal_driver_riscv_plic0_init+0xc4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20405cdc:	4601                	li	a2,0
20405cde:	fe842583          	lw	a1,-24(s0)
20405ce2:	fe442503          	lw	a0,-28(s0)
20405ce6:	3da1                	jal	20405b3e <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
20405ce8:	4601                	li	a2,0
20405cea:	fe842583          	lw	a1,-24(s0)
20405cee:	fcc42503          	lw	a0,-52(s0)
20405cf2:	db7ff0ef          	jal	ra,20405aa8 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20405cf6:	fe442703          	lw	a4,-28(s0)
20405cfa:	fe842783          	lw	a5,-24(s0)
20405cfe:	078a                	slli	a5,a5,0x2
20405d00:	97ba                	add	a5,a5,a4
20405d02:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20405d06:	fe442683          	lw	a3,-28(s0)
20405d0a:	fe842703          	lw	a4,-24(s0)
20405d0e:	87ba                	mv	a5,a4
20405d10:	0786                	slli	a5,a5,0x1
20405d12:	97ba                	add	a5,a5,a4
20405d14:	078e                	slli	a5,a5,0x3
20405d16:	97b6                	add	a5,a5,a3
20405d18:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20405d1c:	fe442683          	lw	a3,-28(s0)
20405d20:	fe842703          	lw	a4,-24(s0)
20405d24:	87ba                	mv	a5,a4
20405d26:	0786                	slli	a5,a5,0x1
20405d28:	97ba                	add	a5,a5,a4
20405d2a:	078e                	slli	a5,a5,0x3
20405d2c:	97b6                	add	a5,a5,a3
20405d2e:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20405d32:	fe842783          	lw	a5,-24(s0)
20405d36:	0785                	addi	a5,a5,1
20405d38:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20405d3c:	fe842703          	lw	a4,-24(s0)
20405d40:	fe042783          	lw	a5,-32(s0)
20405d44:	f8f74ce3          	blt	a4,a5,20405cdc <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
20405d48:	4581                	li	a1,0
20405d4a:	fcc42503          	lw	a0,-52(s0)
20405d4e:	cf7ff0ef          	jal	ra,20405a44 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20405d52:	fdc42783          	lw	a5,-36(s0)
20405d56:	439c                	lw	a5,0(a5)
20405d58:	4fdc                	lw	a5,28(a5)
20405d5a:	fe442683          	lw	a3,-28(s0)
20405d5e:	4601                	li	a2,0
20405d60:	fd842583          	lw	a1,-40(s0)
20405d64:	fdc42503          	lw	a0,-36(s0)
20405d68:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
20405d6a:	fdc42783          	lw	a5,-36(s0)
20405d6e:	439c                	lw	a5,0(a5)
20405d70:	4fd8                	lw	a4,28(a5)
20405d72:	fe442683          	lw	a3,-28(s0)
20405d76:	204067b7          	lui	a5,0x20406
20405d7a:	be478613          	addi	a2,a5,-1052 # 20405be4 <__metal_plic0_handler>
20405d7e:	fd842583          	lw	a1,-40(s0)
20405d82:	fdc42503          	lw	a0,-36(s0)
20405d86:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
20405d88:	fdc42783          	lw	a5,-36(s0)
20405d8c:	439c                	lw	a5,0(a5)
20405d8e:	53dc                	lw	a5,36(a5)
20405d90:	fd842583          	lw	a1,-40(s0)
20405d94:	fdc42503          	lw	a0,-36(s0)
20405d98:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20405d9a:	fec42783          	lw	a5,-20(s0)
20405d9e:	0785                	addi	a5,a5,1
20405da0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20405da4:	fec42783          	lw	a5,-20(s0)
20405da8:	eef05ae3          	blez	a5,20405c9c <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20405dac:	fe442783          	lw	a5,-28(s0)
20405db0:	4705                	li	a4,1
20405db2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20405db4:	0001                	nop
20405db6:	50f2                	lw	ra,60(sp)
20405db8:	5462                	lw	s0,56(sp)
20405dba:	6121                	addi	sp,sp,64
20405dbc:	8082                	ret

20405dbe <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20405dbe:	7179                	addi	sp,sp,-48
20405dc0:	d606                	sw	ra,44(sp)
20405dc2:	d422                	sw	s0,40(sp)
20405dc4:	1800                	addi	s0,sp,48
20405dc6:	fca42e23          	sw	a0,-36(s0)
20405dca:	fcb42c23          	sw	a1,-40(s0)
20405dce:	fcc42a23          	sw	a2,-44(s0)
20405dd2:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20405dd6:	fdc42783          	lw	a5,-36(s0)
20405dda:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20405dde:	fdc42503          	lw	a0,-36(s0)
20405de2:	b63ff0ef          	jal	ra,20405944 <__metal_driver_sifive_plic0_num_interrupts>
20405de6:	872a                	mv	a4,a0
20405de8:	fd842783          	lw	a5,-40(s0)
20405dec:	00e7c463          	blt	a5,a4,20405df4 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20405df0:	57fd                	li	a5,-1
20405df2:	a051                	j	20405e76 <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20405df4:	fd442783          	lw	a5,-44(s0)
20405df8:	cf9d                	beqz	a5,20405e36 <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
20405dfa:	4609                	li	a2,2
20405dfc:	fd842583          	lw	a1,-40(s0)
20405e00:	fdc42503          	lw	a0,-36(s0)
20405e04:	ca5ff0ef          	jal	ra,20405aa8 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
20405e08:	fec42703          	lw	a4,-20(s0)
20405e0c:	fd842783          	lw	a5,-40(s0)
20405e10:	078a                	slli	a5,a5,0x2
20405e12:	97ba                	add	a5,a5,a4
20405e14:	fd442703          	lw	a4,-44(s0)
20405e18:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
20405e1a:	fec42683          	lw	a3,-20(s0)
20405e1e:	fd842703          	lw	a4,-40(s0)
20405e22:	87ba                	mv	a5,a4
20405e24:	0786                	slli	a5,a5,0x1
20405e26:	97ba                	add	a5,a5,a4
20405e28:	078e                	slli	a5,a5,0x3
20405e2a:	97b6                	add	a5,a5,a3
20405e2c:	fd042703          	lw	a4,-48(s0)
20405e30:	08e7a423          	sw	a4,136(a5)
20405e34:	a081                	j	20405e74 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20405e36:	4605                	li	a2,1
20405e38:	fd842583          	lw	a1,-40(s0)
20405e3c:	fdc42503          	lw	a0,-36(s0)
20405e40:	c69ff0ef          	jal	ra,20405aa8 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20405e44:	fec42703          	lw	a4,-20(s0)
20405e48:	fd842783          	lw	a5,-40(s0)
20405e4c:	078a                	slli	a5,a5,0x2
20405e4e:	97ba                	add	a5,a5,a4
20405e50:	20406737          	lui	a4,0x20406
20405e54:	bcc70713          	addi	a4,a4,-1076 # 20405bcc <__metal_plic0_default_handler>
20405e58:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
20405e5a:	fec42683          	lw	a3,-20(s0)
20405e5e:	fd842703          	lw	a4,-40(s0)
20405e62:	87ba                	mv	a5,a4
20405e64:	0786                	slli	a5,a5,0x1
20405e66:	97ba                	add	a5,a5,a4
20405e68:	078e                	slli	a5,a5,0x3
20405e6a:	97b6                	add	a5,a5,a3
20405e6c:	fd042703          	lw	a4,-48(s0)
20405e70:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20405e74:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
20405e76:	853e                	mv	a0,a5
20405e78:	50b2                	lw	ra,44(sp)
20405e7a:	5422                	lw	s0,40(sp)
20405e7c:	6145                	addi	sp,sp,48
20405e7e:	8082                	ret

20405e80 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20405e80:	7179                	addi	sp,sp,-48
20405e82:	d606                	sw	ra,44(sp)
20405e84:	d422                	sw	s0,40(sp)
20405e86:	1800                	addi	s0,sp,48
20405e88:	fca42e23          	sw	a0,-36(s0)
20405e8c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20405e90:	fdc42783          	lw	a5,-36(s0)
20405e94:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20405e98:	fdc42503          	lw	a0,-36(s0)
20405e9c:	aa9ff0ef          	jal	ra,20405944 <__metal_driver_sifive_plic0_num_interrupts>
20405ea0:	872a                	mv	a4,a0
20405ea2:	fd842783          	lw	a5,-40(s0)
20405ea6:	00e7c463          	blt	a5,a4,20405eae <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
20405eaa:	57fd                	li	a5,-1
20405eac:	a809                	j	20405ebe <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20405eae:	4605                	li	a2,1
20405eb0:	fd842583          	lw	a1,-40(s0)
20405eb4:	fec42503          	lw	a0,-20(s0)
20405eb8:	c87ff0ef          	jal	ra,20405b3e <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
20405ebc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20405ebe:	853e                	mv	a0,a5
20405ec0:	50b2                	lw	ra,44(sp)
20405ec2:	5422                	lw	s0,40(sp)
20405ec4:	6145                	addi	sp,sp,48
20405ec6:	8082                	ret

20405ec8 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20405ec8:	7179                	addi	sp,sp,-48
20405eca:	d606                	sw	ra,44(sp)
20405ecc:	d422                	sw	s0,40(sp)
20405ece:	1800                	addi	s0,sp,48
20405ed0:	fca42e23          	sw	a0,-36(s0)
20405ed4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20405ed8:	fdc42783          	lw	a5,-36(s0)
20405edc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20405ee0:	fdc42503          	lw	a0,-36(s0)
20405ee4:	a61ff0ef          	jal	ra,20405944 <__metal_driver_sifive_plic0_num_interrupts>
20405ee8:	872a                	mv	a4,a0
20405eea:	fd842783          	lw	a5,-40(s0)
20405eee:	00e7c463          	blt	a5,a4,20405ef6 <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20405ef2:	57fd                	li	a5,-1
20405ef4:	a809                	j	20405f06 <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20405ef6:	4601                	li	a2,0
20405ef8:	fd842583          	lw	a1,-40(s0)
20405efc:	fec42503          	lw	a0,-20(s0)
20405f00:	c3fff0ef          	jal	ra,20405b3e <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20405f04:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20405f06:	853e                	mv	a0,a5
20405f08:	50b2                	lw	ra,44(sp)
20405f0a:	5422                	lw	s0,40(sp)
20405f0c:	6145                	addi	sp,sp,48
20405f0e:	8082                	ret

20405f10 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20405f10:	1101                	addi	sp,sp,-32
20405f12:	ce22                	sw	s0,28(sp)
20405f14:	1000                	addi	s0,sp,32
20405f16:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20405f1a:	fec42703          	lw	a4,-20(s0)
20405f1e:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
20405f22:	00f71563          	bne	a4,a5,20405f2c <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20405f26:	100127b7          	lui	a5,0x10012
20405f2a:	a011                	j	20405f2e <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
20405f2c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:395
	}
}
20405f2e:	853e                	mv	a0,a5
20405f30:	4472                	lw	s0,28(sp)
20405f32:	6105                	addi	sp,sp,32
20405f34:	8082                	ret

20405f36 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
20405f36:	1101                	addi	sp,sp,-32
20405f38:	ce22                	sw	s0,28(sp)
20405f3a:	1000                	addi	s0,sp,32
20405f3c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20405f40:	fec42703          	lw	a4,-20(s0)
20405f44:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
20405f48:	00f71763          	bne	a4,a5,20405f56 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20405f4c:	800007b7          	lui	a5,0x80000
20405f50:	48078793          	addi	a5,a5,1152 # 80000480 <metal_segment_heap_target_end+0xffffc7ec>
20405f54:	a011                	j	20405f58 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
20405f56:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:425
	}
}
20405f58:	853e                	mv	a0,a5
20405f5a:	4472                	lw	s0,28(sp)
20405f5c:	6105                	addi	sp,sp,32
20405f5e:	8082                	ret

20405f60 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
20405f60:	1101                	addi	sp,sp,-32
20405f62:	ce22                	sw	s0,28(sp)
20405f64:	1000                	addi	s0,sp,32
20405f66:	fea42623          	sw	a0,-20(s0)
20405f6a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20405f6e:	fec42703          	lw	a4,-20(s0)
20405f72:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
20405f76:	00f71763          	bne	a4,a5,20405f84 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:429 (discriminator 1)
20405f7a:	fe842783          	lw	a5,-24(s0)
20405f7e:	e399                	bnez	a5,20405f84 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:430
		return 7;
20405f80:	479d                	li	a5,7
20405f82:	a269                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20405f84:	fec42703          	lw	a4,-20(s0)
20405f88:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
20405f8c:	00f71963          	bne	a4,a5,20405f9e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:432 (discriminator 1)
20405f90:	fe842703          	lw	a4,-24(s0)
20405f94:	4785                	li	a5,1
20405f96:	00f71463          	bne	a4,a5,20405f9e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:433
		return 8;
20405f9a:	47a1                	li	a5,8
20405f9c:	aa85                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20405f9e:	fec42703          	lw	a4,-20(s0)
20405fa2:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
20405fa6:	00f71963          	bne	a4,a5,20405fb8 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:435 (discriminator 1)
20405faa:	fe842703          	lw	a4,-24(s0)
20405fae:	4789                	li	a5,2
20405fb0:	00f71463          	bne	a4,a5,20405fb8 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:436
		return 9;
20405fb4:	47a5                	li	a5,9
20405fb6:	aa99                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20405fb8:	fec42703          	lw	a4,-20(s0)
20405fbc:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
20405fc0:	00f71963          	bne	a4,a5,20405fd2 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:438 (discriminator 1)
20405fc4:	fe842703          	lw	a4,-24(s0)
20405fc8:	478d                	li	a5,3
20405fca:	00f71463          	bne	a4,a5,20405fd2 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:439
		return 10;
20405fce:	47a9                	li	a5,10
20405fd0:	aa35                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20405fd2:	fec42703          	lw	a4,-20(s0)
20405fd6:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
20405fda:	00f71963          	bne	a4,a5,20405fec <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:441 (discriminator 1)
20405fde:	fe842703          	lw	a4,-24(s0)
20405fe2:	4791                	li	a5,4
20405fe4:	00f71463          	bne	a4,a5,20405fec <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:442
		return 11;
20405fe8:	47ad                	li	a5,11
20405fea:	a20d                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
20405fec:	fec42703          	lw	a4,-20(s0)
20405ff0:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
20405ff4:	00f71963          	bne	a4,a5,20406006 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:444 (discriminator 1)
20405ff8:	fe842703          	lw	a4,-24(s0)
20405ffc:	4795                	li	a5,5
20405ffe:	00f71463          	bne	a4,a5,20406006 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:445
		return 12;
20406002:	47b1                	li	a5,12
20406004:	a221                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20406006:	fec42703          	lw	a4,-20(s0)
2040600a:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
2040600e:	00f71963          	bne	a4,a5,20406020 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:447 (discriminator 1)
20406012:	fe842703          	lw	a4,-24(s0)
20406016:	4799                	li	a5,6
20406018:	00f71463          	bne	a4,a5,20406020 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:448
		return 13;
2040601c:	47b5                	li	a5,13
2040601e:	a0fd                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20406020:	fec42703          	lw	a4,-20(s0)
20406024:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
20406028:	00f71963          	bne	a4,a5,2040603a <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:450 (discriminator 1)
2040602c:	fe842703          	lw	a4,-24(s0)
20406030:	479d                	li	a5,7
20406032:	00f71463          	bne	a4,a5,2040603a <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:451
		return 14;
20406036:	47b9                	li	a5,14
20406038:	a8d1                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
2040603a:	fec42703          	lw	a4,-20(s0)
2040603e:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
20406042:	00f71963          	bne	a4,a5,20406054 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:453 (discriminator 1)
20406046:	fe842703          	lw	a4,-24(s0)
2040604a:	47a1                	li	a5,8
2040604c:	00f71463          	bne	a4,a5,20406054 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:454
		return 15;
20406050:	47bd                	li	a5,15
20406052:	a86d                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20406054:	fec42703          	lw	a4,-20(s0)
20406058:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
2040605c:	00f71963          	bne	a4,a5,2040606e <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:456 (discriminator 1)
20406060:	fe842703          	lw	a4,-24(s0)
20406064:	47a5                	li	a5,9
20406066:	00f71463          	bne	a4,a5,2040606e <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:457
		return 16;
2040606a:	47c1                	li	a5,16
2040606c:	a045                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
2040606e:	fec42703          	lw	a4,-20(s0)
20406072:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
20406076:	00f71963          	bne	a4,a5,20406088 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:459 (discriminator 1)
2040607a:	fe842703          	lw	a4,-24(s0)
2040607e:	47a9                	li	a5,10
20406080:	00f71463          	bne	a4,a5,20406088 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:460
		return 17;
20406084:	47c5                	li	a5,17
20406086:	a059                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
20406088:	fec42703          	lw	a4,-20(s0)
2040608c:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
20406090:	00f71963          	bne	a4,a5,204060a2 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:462 (discriminator 1)
20406094:	fe842703          	lw	a4,-24(s0)
20406098:	47ad                	li	a5,11
2040609a:	00f71463          	bne	a4,a5,204060a2 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:463
		return 18;
2040609e:	47c9                	li	a5,18
204060a0:	a0b5                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
204060a2:	fec42703          	lw	a4,-20(s0)
204060a6:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
204060aa:	00f71963          	bne	a4,a5,204060bc <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:465 (discriminator 1)
204060ae:	fe842703          	lw	a4,-24(s0)
204060b2:	47b1                	li	a5,12
204060b4:	00f71463          	bne	a4,a5,204060bc <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:466
		return 19;
204060b8:	47cd                	li	a5,19
204060ba:	a889                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
204060bc:	fec42703          	lw	a4,-20(s0)
204060c0:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
204060c4:	00f71963          	bne	a4,a5,204060d6 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:468 (discriminator 1)
204060c8:	fe842703          	lw	a4,-24(s0)
204060cc:	47b5                	li	a5,13
204060ce:	00f71463          	bne	a4,a5,204060d6 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:469
		return 20;
204060d2:	47d1                	li	a5,20
204060d4:	a825                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
204060d6:	fec42703          	lw	a4,-20(s0)
204060da:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
204060de:	00f71963          	bne	a4,a5,204060f0 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:471 (discriminator 1)
204060e2:	fe842703          	lw	a4,-24(s0)
204060e6:	47b9                	li	a5,14
204060e8:	00f71463          	bne	a4,a5,204060f0 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:472
		return 21;
204060ec:	47d5                	li	a5,21
204060ee:	a839                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
204060f0:	fec42703          	lw	a4,-20(s0)
204060f4:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
204060f8:	00f71963          	bne	a4,a5,2040610a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:474 (discriminator 1)
204060fc:	fe842703          	lw	a4,-24(s0)
20406100:	47bd                	li	a5,15
20406102:	00f71463          	bne	a4,a5,2040610a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:475
		return 22;
20406106:	47d9                	li	a5,22
20406108:	a011                	j	2040610c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
2040610a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:480
	}
}
2040610c:	853e                	mv	a0,a5
2040610e:	4472                	lw	s0,28(sp)
20406110:	6105                	addi	sp,sp,32
20406112:	8082                	ret

20406114 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20406114:	7179                	addi	sp,sp,-48
20406116:	d606                	sw	ra,44(sp)
20406118:	d422                	sw	s0,40(sp)
2040611a:	1800                	addi	s0,sp,48
2040611c:	fca42e23          	sw	a0,-36(s0)
20406120:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406124:	fdc42503          	lw	a0,-36(s0)
20406128:	de9ff0ef          	jal	ra,20405f10 <__metal_driver_sifive_gpio0_base>
2040612c:	87aa                	mv	a5,a0
2040612e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20406132:	fec42783          	lw	a5,-20(s0)
20406136:	0791                	addi	a5,a5,4
20406138:	4398                	lw	a4,0(a5)
2040613a:	fd842783          	lw	a5,-40(s0)
2040613e:	fec42683          	lw	a3,-20(s0)
20406142:	0691                	addi	a3,a3,4
20406144:	8fd9                	or	a5,a5,a4
20406146:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
20406148:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
2040614a:	853e                	mv	a0,a5
2040614c:	50b2                	lw	ra,44(sp)
2040614e:	5422                	lw	s0,40(sp)
20406150:	6145                	addi	sp,sp,48
20406152:	8082                	ret

20406154 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20406154:	7179                	addi	sp,sp,-48
20406156:	d606                	sw	ra,44(sp)
20406158:	d422                	sw	s0,40(sp)
2040615a:	1800                	addi	s0,sp,48
2040615c:	fca42e23          	sw	a0,-36(s0)
20406160:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406164:	fdc42503          	lw	a0,-36(s0)
20406168:	da9ff0ef          	jal	ra,20405f10 <__metal_driver_sifive_gpio0_base>
2040616c:	87aa                	mv	a5,a0
2040616e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
20406172:	fec42783          	lw	a5,-20(s0)
20406176:	0791                	addi	a5,a5,4
20406178:	439c                	lw	a5,0(a5)
2040617a:	fd842703          	lw	a4,-40(s0)
2040617e:	fff74713          	not	a4,a4
20406182:	86ba                	mv	a3,a4
20406184:	fec42703          	lw	a4,-20(s0)
20406188:	0711                	addi	a4,a4,4
2040618a:	8ff5                	and	a5,a5,a3
2040618c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
2040618e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
20406190:	853e                	mv	a0,a5
20406192:	50b2                	lw	ra,44(sp)
20406194:	5422                	lw	s0,40(sp)
20406196:	6145                	addi	sp,sp,48
20406198:	8082                	ret

2040619a <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
2040619a:	7179                	addi	sp,sp,-48
2040619c:	d606                	sw	ra,44(sp)
2040619e:	d422                	sw	s0,40(sp)
204061a0:	1800                	addi	s0,sp,48
204061a2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204061a6:	fdc42503          	lw	a0,-36(s0)
204061aa:	d67ff0ef          	jal	ra,20405f10 <__metal_driver_sifive_gpio0_base>
204061ae:	87aa                	mv	a5,a0
204061b0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
204061b4:	fec42783          	lw	a5,-20(s0)
204061b8:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
204061ba:	853e                	mv	a0,a5
204061bc:	50b2                	lw	ra,44(sp)
204061be:	5422                	lw	s0,40(sp)
204061c0:	6145                	addi	sp,sp,48
204061c2:	8082                	ret

204061c4 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
204061c4:	7179                	addi	sp,sp,-48
204061c6:	d606                	sw	ra,44(sp)
204061c8:	d422                	sw	s0,40(sp)
204061ca:	1800                	addi	s0,sp,48
204061cc:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204061d0:	fdc42503          	lw	a0,-36(s0)
204061d4:	d3dff0ef          	jal	ra,20405f10 <__metal_driver_sifive_gpio0_base>
204061d8:	87aa                	mv	a5,a0
204061da:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
204061de:	fec42783          	lw	a5,-20(s0)
204061e2:	07b1                	addi	a5,a5,12
204061e4:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
204061e6:	853e                	mv	a0,a5
204061e8:	50b2                	lw	ra,44(sp)
204061ea:	5422                	lw	s0,40(sp)
204061ec:	6145                	addi	sp,sp,48
204061ee:	8082                	ret

204061f0 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
204061f0:	7179                	addi	sp,sp,-48
204061f2:	d606                	sw	ra,44(sp)
204061f4:	d422                	sw	s0,40(sp)
204061f6:	1800                	addi	s0,sp,48
204061f8:	fca42e23          	sw	a0,-36(s0)
204061fc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406200:	fdc42503          	lw	a0,-36(s0)
20406204:	d0dff0ef          	jal	ra,20405f10 <__metal_driver_sifive_gpio0_base>
20406208:	87aa                	mv	a5,a0
2040620a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
2040620e:	fec42783          	lw	a5,-20(s0)
20406212:	07a1                	addi	a5,a5,8
20406214:	439c                	lw	a5,0(a5)
20406216:	fd842703          	lw	a4,-40(s0)
2040621a:	fff74713          	not	a4,a4
2040621e:	86ba                	mv	a3,a4
20406220:	fec42703          	lw	a4,-20(s0)
20406224:	0721                	addi	a4,a4,8
20406226:	8ff5                	and	a5,a5,a3
20406228:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
2040622a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
2040622c:	853e                	mv	a0,a5
2040622e:	50b2                	lw	ra,44(sp)
20406230:	5422                	lw	s0,40(sp)
20406232:	6145                	addi	sp,sp,48
20406234:	8082                	ret

20406236 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20406236:	7179                	addi	sp,sp,-48
20406238:	d606                	sw	ra,44(sp)
2040623a:	d422                	sw	s0,40(sp)
2040623c:	1800                	addi	s0,sp,48
2040623e:	fca42e23          	sw	a0,-36(s0)
20406242:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406246:	fdc42503          	lw	a0,-36(s0)
2040624a:	cc7ff0ef          	jal	ra,20405f10 <__metal_driver_sifive_gpio0_base>
2040624e:	87aa                	mv	a5,a0
20406250:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
20406254:	fec42783          	lw	a5,-20(s0)
20406258:	07a1                	addi	a5,a5,8
2040625a:	4398                	lw	a4,0(a5)
2040625c:	fd842783          	lw	a5,-40(s0)
20406260:	fec42683          	lw	a3,-20(s0)
20406264:	06a1                	addi	a3,a3,8
20406266:	8fd9                	or	a5,a5,a4
20406268:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
2040626a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
2040626c:	853e                	mv	a0,a5
2040626e:	50b2                	lw	ra,44(sp)
20406270:	5422                	lw	s0,40(sp)
20406272:	6145                	addi	sp,sp,48
20406274:	8082                	ret

20406276 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20406276:	7179                	addi	sp,sp,-48
20406278:	d606                	sw	ra,44(sp)
2040627a:	d422                	sw	s0,40(sp)
2040627c:	1800                	addi	s0,sp,48
2040627e:	fca42e23          	sw	a0,-36(s0)
20406282:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406286:	fdc42503          	lw	a0,-36(s0)
2040628a:	c87ff0ef          	jal	ra,20405f10 <__metal_driver_sifive_gpio0_base>
2040628e:	87aa                	mv	a5,a0
20406290:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20406294:	fec42783          	lw	a5,-20(s0)
20406298:	07b1                	addi	a5,a5,12
2040629a:	4398                	lw	a4,0(a5)
2040629c:	fd842783          	lw	a5,-40(s0)
204062a0:	fec42683          	lw	a3,-20(s0)
204062a4:	06b1                	addi	a3,a3,12
204062a6:	8fd9                	or	a5,a5,a4
204062a8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
204062aa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
204062ac:	853e                	mv	a0,a5
204062ae:	50b2                	lw	ra,44(sp)
204062b0:	5422                	lw	s0,40(sp)
204062b2:	6145                	addi	sp,sp,48
204062b4:	8082                	ret

204062b6 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
204062b6:	7179                	addi	sp,sp,-48
204062b8:	d606                	sw	ra,44(sp)
204062ba:	d422                	sw	s0,40(sp)
204062bc:	1800                	addi	s0,sp,48
204062be:	fca42e23          	sw	a0,-36(s0)
204062c2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204062c6:	fdc42503          	lw	a0,-36(s0)
204062ca:	c47ff0ef          	jal	ra,20405f10 <__metal_driver_sifive_gpio0_base>
204062ce:	87aa                	mv	a5,a0
204062d0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
204062d4:	fec42783          	lw	a5,-20(s0)
204062d8:	07b1                	addi	a5,a5,12
204062da:	439c                	lw	a5,0(a5)
204062dc:	fd842703          	lw	a4,-40(s0)
204062e0:	fff74713          	not	a4,a4
204062e4:	86ba                	mv	a3,a4
204062e6:	fec42703          	lw	a4,-20(s0)
204062ea:	0731                	addi	a4,a4,12
204062ec:	8ff5                	and	a5,a5,a3
204062ee:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
204062f0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
204062f2:	853e                	mv	a0,a5
204062f4:	50b2                	lw	ra,44(sp)
204062f6:	5422                	lw	s0,40(sp)
204062f8:	6145                	addi	sp,sp,48
204062fa:	8082                	ret

204062fc <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
204062fc:	7179                	addi	sp,sp,-48
204062fe:	d606                	sw	ra,44(sp)
20406300:	d422                	sw	s0,40(sp)
20406302:	1800                	addi	s0,sp,48
20406304:	fca42e23          	sw	a0,-36(s0)
20406308:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040630c:	fdc42503          	lw	a0,-36(s0)
20406310:	c01ff0ef          	jal	ra,20405f10 <__metal_driver_sifive_gpio0_base>
20406314:	87aa                	mv	a5,a0
20406316:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
2040631a:	fec42783          	lw	a5,-20(s0)
2040631e:	07b1                	addi	a5,a5,12
20406320:	4398                	lw	a4,0(a5)
20406322:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20406326:	fec42683          	lw	a3,-20(s0)
2040632a:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
2040632c:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
2040632e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20406330:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
20406332:	853e                	mv	a0,a5
20406334:	50b2                	lw	ra,44(sp)
20406336:	5422                	lw	s0,40(sp)
20406338:	6145                	addi	sp,sp,48
2040633a:	8082                	ret

2040633c <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
2040633c:	7179                	addi	sp,sp,-48
2040633e:	d606                	sw	ra,44(sp)
20406340:	d422                	sw	s0,40(sp)
20406342:	1800                	addi	s0,sp,48
20406344:	fca42e23          	sw	a0,-36(s0)
20406348:	fcb42c23          	sw	a1,-40(s0)
2040634c:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406350:	fdc42503          	lw	a0,-36(s0)
20406354:	bbdff0ef          	jal	ra,20405f10 <__metal_driver_sifive_gpio0_base>
20406358:	87aa                	mv	a5,a0
2040635a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
2040635e:	fec42783          	lw	a5,-20(s0)
20406362:	03c78793          	addi	a5,a5,60
20406366:	439c                	lw	a5,0(a5)
20406368:	fd842703          	lw	a4,-40(s0)
2040636c:	fff74713          	not	a4,a4
20406370:	86ba                	mv	a3,a4
20406372:	fec42703          	lw	a4,-20(s0)
20406376:	03c70713          	addi	a4,a4,60
2040637a:	8ff5                	and	a5,a5,a3
2040637c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
2040637e:	fec42783          	lw	a5,-20(s0)
20406382:	03878793          	addi	a5,a5,56
20406386:	4398                	lw	a4,0(a5)
20406388:	fd442783          	lw	a5,-44(s0)
2040638c:	fec42683          	lw	a3,-20(s0)
20406390:	03868693          	addi	a3,a3,56
20406394:	8fd9                	or	a5,a5,a4
20406396:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20406398:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
2040639a:	853e                	mv	a0,a5
2040639c:	50b2                	lw	ra,44(sp)
2040639e:	5422                	lw	s0,40(sp)
204063a0:	6145                	addi	sp,sp,48
204063a2:	8082                	ret

204063a4 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
204063a4:	7179                	addi	sp,sp,-48
204063a6:	d606                	sw	ra,44(sp)
204063a8:	d422                	sw	s0,40(sp)
204063aa:	1800                	addi	s0,sp,48
204063ac:	fca42e23          	sw	a0,-36(s0)
204063b0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204063b4:	fdc42503          	lw	a0,-36(s0)
204063b8:	b59ff0ef          	jal	ra,20405f10 <__metal_driver_sifive_gpio0_base>
204063bc:	87aa                	mv	a5,a0
204063be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
204063c2:	fec42783          	lw	a5,-20(s0)
204063c6:	03878793          	addi	a5,a5,56
204063ca:	439c                	lw	a5,0(a5)
204063cc:	fd842703          	lw	a4,-40(s0)
204063d0:	fff74713          	not	a4,a4
204063d4:	86ba                	mv	a3,a4
204063d6:	fec42703          	lw	a4,-20(s0)
204063da:	03870713          	addi	a4,a4,56
204063de:	8ff5                	and	a5,a5,a3
204063e0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
204063e2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
204063e4:	853e                	mv	a0,a5
204063e6:	50b2                	lw	ra,44(sp)
204063e8:	5422                	lw	s0,40(sp)
204063ea:	6145                	addi	sp,sp,48
204063ec:	8082                	ret

204063ee <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204063ee:	7179                	addi	sp,sp,-48
204063f0:	d606                	sw	ra,44(sp)
204063f2:	d422                	sw	s0,40(sp)
204063f4:	1800                	addi	s0,sp,48
204063f6:	fca42e23          	sw	a0,-36(s0)
204063fa:	fcb42c23          	sw	a1,-40(s0)
204063fe:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406402:	fdc42503          	lw	a0,-36(s0)
20406406:	b0bff0ef          	jal	ra,20405f10 <__metal_driver_sifive_gpio0_base>
2040640a:	87aa                	mv	a5,a0
2040640c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20406410:	fd442703          	lw	a4,-44(s0)
20406414:	479d                	li	a5,7
20406416:	1ce7e963          	bltu	a5,a4,204065e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
2040641a:	fd442783          	lw	a5,-44(s0)
2040641e:	00279713          	slli	a4,a5,0x2
20406422:	204077b7          	lui	a5,0x20407
20406426:	34478793          	addi	a5,a5,836 # 20407344 <__metal_driver_vtable_riscv_plic0+0x4c>
2040642a:	97ba                	add	a5,a5,a4
2040642c:	439c                	lw	a5,0(a5)
2040642e:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20406430:	fec42783          	lw	a5,-20(s0)
20406434:	07e1                	addi	a5,a5,24
20406436:	439c                	lw	a5,0(a5)
20406438:	fd842703          	lw	a4,-40(s0)
2040643c:	fff74713          	not	a4,a4
20406440:	86ba                	mv	a3,a4
20406442:	fec42703          	lw	a4,-20(s0)
20406446:	0761                	addi	a4,a4,24
20406448:	8ff5                	and	a5,a5,a3
2040644a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
2040644c:	fec42783          	lw	a5,-20(s0)
20406450:	02078793          	addi	a5,a5,32
20406454:	439c                	lw	a5,0(a5)
20406456:	fd842703          	lw	a4,-40(s0)
2040645a:	fff74713          	not	a4,a4
2040645e:	86ba                	mv	a3,a4
20406460:	fec42703          	lw	a4,-20(s0)
20406464:	02070713          	addi	a4,a4,32
20406468:	8ff5                	and	a5,a5,a3
2040646a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
2040646c:	fec42783          	lw	a5,-20(s0)
20406470:	02878793          	addi	a5,a5,40
20406474:	439c                	lw	a5,0(a5)
20406476:	fd842703          	lw	a4,-40(s0)
2040647a:	fff74713          	not	a4,a4
2040647e:	86ba                	mv	a3,a4
20406480:	fec42703          	lw	a4,-20(s0)
20406484:	02870713          	addi	a4,a4,40
20406488:	8ff5                	and	a5,a5,a3
2040648a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
2040648c:	fec42783          	lw	a5,-20(s0)
20406490:	03078793          	addi	a5,a5,48
20406494:	439c                	lw	a5,0(a5)
20406496:	fd842703          	lw	a4,-40(s0)
2040649a:	fff74713          	not	a4,a4
2040649e:	86ba                	mv	a3,a4
204064a0:	fec42703          	lw	a4,-20(s0)
204064a4:	03070713          	addi	a4,a4,48
204064a8:	8ff5                	and	a5,a5,a3
204064aa:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
204064ac:	aa35                	j	204065e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204064ae:	fec42783          	lw	a5,-20(s0)
204064b2:	07e1                	addi	a5,a5,24
204064b4:	4398                	lw	a4,0(a5)
204064b6:	fd842783          	lw	a5,-40(s0)
204064ba:	fec42683          	lw	a3,-20(s0)
204064be:	06e1                	addi	a3,a3,24
204064c0:	8fd9                	or	a5,a5,a4
204064c2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
204064c4:	a215                	j	204065e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204064c6:	fec42783          	lw	a5,-20(s0)
204064ca:	02078793          	addi	a5,a5,32
204064ce:	4398                	lw	a4,0(a5)
204064d0:	fd842783          	lw	a5,-40(s0)
204064d4:	fec42683          	lw	a3,-20(s0)
204064d8:	02068693          	addi	a3,a3,32
204064dc:	8fd9                	or	a5,a5,a4
204064de:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
204064e0:	a221                	j	204065e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204064e2:	fec42783          	lw	a5,-20(s0)
204064e6:	07e1                	addi	a5,a5,24
204064e8:	4398                	lw	a4,0(a5)
204064ea:	fd842783          	lw	a5,-40(s0)
204064ee:	fec42683          	lw	a3,-20(s0)
204064f2:	06e1                	addi	a3,a3,24
204064f4:	8fd9                	or	a5,a5,a4
204064f6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204064f8:	fec42783          	lw	a5,-20(s0)
204064fc:	02078793          	addi	a5,a5,32
20406500:	4398                	lw	a4,0(a5)
20406502:	fd842783          	lw	a5,-40(s0)
20406506:	fec42683          	lw	a3,-20(s0)
2040650a:	02068693          	addi	a3,a3,32
2040650e:	8fd9                	or	a5,a5,a4
20406510:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20406512:	a8d9                	j	204065e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20406514:	fec42783          	lw	a5,-20(s0)
20406518:	02878793          	addi	a5,a5,40
2040651c:	4398                	lw	a4,0(a5)
2040651e:	fd842783          	lw	a5,-40(s0)
20406522:	fec42683          	lw	a3,-20(s0)
20406526:	02868693          	addi	a3,a3,40
2040652a:	8fd9                	or	a5,a5,a4
2040652c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
2040652e:	a86d                	j	204065e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20406530:	fec42783          	lw	a5,-20(s0)
20406534:	03078793          	addi	a5,a5,48
20406538:	4398                	lw	a4,0(a5)
2040653a:	fd842783          	lw	a5,-40(s0)
2040653e:	fec42683          	lw	a3,-20(s0)
20406542:	03068693          	addi	a3,a3,48
20406546:	8fd9                	or	a5,a5,a4
20406548:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
2040654a:	a879                	j	204065e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
2040654c:	fec42783          	lw	a5,-20(s0)
20406550:	02878793          	addi	a5,a5,40
20406554:	4398                	lw	a4,0(a5)
20406556:	fd842783          	lw	a5,-40(s0)
2040655a:	fec42683          	lw	a3,-20(s0)
2040655e:	02868693          	addi	a3,a3,40
20406562:	8fd9                	or	a5,a5,a4
20406564:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20406566:	fec42783          	lw	a5,-20(s0)
2040656a:	03078793          	addi	a5,a5,48
2040656e:	4398                	lw	a4,0(a5)
20406570:	fd842783          	lw	a5,-40(s0)
20406574:	fec42683          	lw	a3,-20(s0)
20406578:	03068693          	addi	a3,a3,48
2040657c:	8fd9                	or	a5,a5,a4
2040657e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20406580:	a0a5                	j	204065e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20406582:	fec42783          	lw	a5,-20(s0)
20406586:	07e1                	addi	a5,a5,24
20406588:	4398                	lw	a4,0(a5)
2040658a:	fd842783          	lw	a5,-40(s0)
2040658e:	fec42683          	lw	a3,-20(s0)
20406592:	06e1                	addi	a3,a3,24
20406594:	8fd9                	or	a5,a5,a4
20406596:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20406598:	fec42783          	lw	a5,-20(s0)
2040659c:	02078793          	addi	a5,a5,32
204065a0:	4398                	lw	a4,0(a5)
204065a2:	fd842783          	lw	a5,-40(s0)
204065a6:	fec42683          	lw	a3,-20(s0)
204065aa:	02068693          	addi	a3,a3,32
204065ae:	8fd9                	or	a5,a5,a4
204065b0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204065b2:	fec42783          	lw	a5,-20(s0)
204065b6:	02878793          	addi	a5,a5,40
204065ba:	4398                	lw	a4,0(a5)
204065bc:	fd842783          	lw	a5,-40(s0)
204065c0:	fec42683          	lw	a3,-20(s0)
204065c4:	02868693          	addi	a3,a3,40
204065c8:	8fd9                	or	a5,a5,a4
204065ca:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204065cc:	fec42783          	lw	a5,-20(s0)
204065d0:	03078793          	addi	a5,a5,48
204065d4:	4398                	lw	a4,0(a5)
204065d6:	fd842783          	lw	a5,-40(s0)
204065da:	fec42683          	lw	a3,-20(s0)
204065de:	03068693          	addi	a3,a3,48
204065e2:	8fd9                	or	a5,a5,a4
204065e4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
204065e6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
204065e8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
204065ea:	853e                	mv	a0,a5
204065ec:	50b2                	lw	ra,44(sp)
204065ee:	5422                	lw	s0,40(sp)
204065f0:	6145                	addi	sp,sp,48
204065f2:	8082                	ret

204065f4 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204065f4:	7179                	addi	sp,sp,-48
204065f6:	d606                	sw	ra,44(sp)
204065f8:	d422                	sw	s0,40(sp)
204065fa:	1800                	addi	s0,sp,48
204065fc:	fca42e23          	sw	a0,-36(s0)
20406600:	fcb42c23          	sw	a1,-40(s0)
20406604:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406608:	fdc42503          	lw	a0,-36(s0)
2040660c:	905ff0ef          	jal	ra,20405f10 <__metal_driver_sifive_gpio0_base>
20406610:	87aa                	mv	a5,a0
20406612:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20406616:	fd442703          	lw	a4,-44(s0)
2040661a:	479d                	li	a5,7
2040661c:	14e7ea63          	bltu	a5,a4,20406770 <__metal_driver_sifive_gpio0_clear_int+0x17c>
20406620:	fd442783          	lw	a5,-44(s0)
20406624:	00279713          	slli	a4,a5,0x2
20406628:	204077b7          	lui	a5,0x20407
2040662c:	36478793          	addi	a5,a5,868 # 20407364 <__metal_driver_vtable_riscv_plic0+0x6c>
20406630:	97ba                	add	a5,a5,a4
20406632:	439c                	lw	a5,0(a5)
20406634:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20406636:	fec42783          	lw	a5,-20(s0)
2040663a:	07f1                	addi	a5,a5,28
2040663c:	4398                	lw	a4,0(a5)
2040663e:	fd842783          	lw	a5,-40(s0)
20406642:	fec42683          	lw	a3,-20(s0)
20406646:	06f1                	addi	a3,a3,28
20406648:	8fd9                	or	a5,a5,a4
2040664a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
2040664c:	a215                	j	20406770 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
2040664e:	fec42783          	lw	a5,-20(s0)
20406652:	02478793          	addi	a5,a5,36
20406656:	4398                	lw	a4,0(a5)
20406658:	fd842783          	lw	a5,-40(s0)
2040665c:	fec42683          	lw	a3,-20(s0)
20406660:	02468693          	addi	a3,a3,36
20406664:	8fd9                	or	a5,a5,a4
20406666:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20406668:	a221                	j	20406770 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
2040666a:	fec42783          	lw	a5,-20(s0)
2040666e:	07f1                	addi	a5,a5,28
20406670:	4398                	lw	a4,0(a5)
20406672:	fd842783          	lw	a5,-40(s0)
20406676:	fec42683          	lw	a3,-20(s0)
2040667a:	06f1                	addi	a3,a3,28
2040667c:	8fd9                	or	a5,a5,a4
2040667e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20406680:	fec42783          	lw	a5,-20(s0)
20406684:	02478793          	addi	a5,a5,36
20406688:	4398                	lw	a4,0(a5)
2040668a:	fd842783          	lw	a5,-40(s0)
2040668e:	fec42683          	lw	a3,-20(s0)
20406692:	02468693          	addi	a3,a3,36
20406696:	8fd9                	or	a5,a5,a4
20406698:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
2040669a:	a8d9                	j	20406770 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
2040669c:	fec42783          	lw	a5,-20(s0)
204066a0:	02c78793          	addi	a5,a5,44
204066a4:	4398                	lw	a4,0(a5)
204066a6:	fd842783          	lw	a5,-40(s0)
204066aa:	fec42683          	lw	a3,-20(s0)
204066ae:	02c68693          	addi	a3,a3,44
204066b2:	8fd9                	or	a5,a5,a4
204066b4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
204066b6:	a86d                	j	20406770 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204066b8:	fec42783          	lw	a5,-20(s0)
204066bc:	03478793          	addi	a5,a5,52
204066c0:	4398                	lw	a4,0(a5)
204066c2:	fd842783          	lw	a5,-40(s0)
204066c6:	fec42683          	lw	a3,-20(s0)
204066ca:	03468693          	addi	a3,a3,52
204066ce:	8fd9                	or	a5,a5,a4
204066d0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
204066d2:	a879                	j	20406770 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
204066d4:	fec42783          	lw	a5,-20(s0)
204066d8:	02c78793          	addi	a5,a5,44
204066dc:	4398                	lw	a4,0(a5)
204066de:	fd842783          	lw	a5,-40(s0)
204066e2:	fec42683          	lw	a3,-20(s0)
204066e6:	02c68693          	addi	a3,a3,44
204066ea:	8fd9                	or	a5,a5,a4
204066ec:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204066ee:	fec42783          	lw	a5,-20(s0)
204066f2:	03478793          	addi	a5,a5,52
204066f6:	4398                	lw	a4,0(a5)
204066f8:	fd842783          	lw	a5,-40(s0)
204066fc:	fec42683          	lw	a3,-20(s0)
20406700:	03468693          	addi	a3,a3,52
20406704:	8fd9                	or	a5,a5,a4
20406706:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20406708:	a0a5                	j	20406770 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
2040670a:	fec42783          	lw	a5,-20(s0)
2040670e:	07f1                	addi	a5,a5,28
20406710:	4398                	lw	a4,0(a5)
20406712:	fd842783          	lw	a5,-40(s0)
20406716:	fec42683          	lw	a3,-20(s0)
2040671a:	06f1                	addi	a3,a3,28
2040671c:	8fd9                	or	a5,a5,a4
2040671e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20406720:	fec42783          	lw	a5,-20(s0)
20406724:	02478793          	addi	a5,a5,36
20406728:	4398                	lw	a4,0(a5)
2040672a:	fd842783          	lw	a5,-40(s0)
2040672e:	fec42683          	lw	a3,-20(s0)
20406732:	02468693          	addi	a3,a3,36
20406736:	8fd9                	or	a5,a5,a4
20406738:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
2040673a:	fec42783          	lw	a5,-20(s0)
2040673e:	02c78793          	addi	a5,a5,44
20406742:	4398                	lw	a4,0(a5)
20406744:	fd842783          	lw	a5,-40(s0)
20406748:	fec42683          	lw	a3,-20(s0)
2040674c:	02c68693          	addi	a3,a3,44
20406750:	8fd9                	or	a5,a5,a4
20406752:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20406754:	fec42783          	lw	a5,-20(s0)
20406758:	03478793          	addi	a5,a5,52
2040675c:	4398                	lw	a4,0(a5)
2040675e:	fd842783          	lw	a5,-40(s0)
20406762:	fec42683          	lw	a3,-20(s0)
20406766:	03468693          	addi	a3,a3,52
2040676a:	8fd9                	or	a5,a5,a4
2040676c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
2040676e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20406770:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20406772:	853e                	mv	a0,a5
20406774:	50b2                	lw	ra,44(sp)
20406776:	5422                	lw	s0,40(sp)
20406778:	6145                	addi	sp,sp,48
2040677a:	8082                	ret

2040677c <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
2040677c:	1101                	addi	sp,sp,-32
2040677e:	ce06                	sw	ra,28(sp)
20406780:	cc22                	sw	s0,24(sp)
20406782:	1000                	addi	s0,sp,32
20406784:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20406788:	fec42503          	lw	a0,-20(s0)
2040678c:	faaff0ef          	jal	ra,20405f36 <__metal_driver_sifive_gpio0_interrupt_parent>
20406790:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20406792:	853e                	mv	a0,a5
20406794:	40f2                	lw	ra,28(sp)
20406796:	4462                	lw	s0,24(sp)
20406798:	6105                	addi	sp,sp,32
2040679a:	8082                	ret

2040679c <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
2040679c:	7179                	addi	sp,sp,-48
2040679e:	d606                	sw	ra,44(sp)
204067a0:	d422                	sw	s0,40(sp)
204067a2:	1800                	addi	s0,sp,48
204067a4:	fca42e23          	sw	a0,-36(s0)
204067a8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
204067ac:	fd842583          	lw	a1,-40(s0)
204067b0:	fdc42503          	lw	a0,-36(s0)
204067b4:	facff0ef          	jal	ra,20405f60 <__metal_driver_sifive_gpio0_interrupt_lines>
204067b8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
204067bc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
204067c0:	853e                	mv	a0,a5
204067c2:	50b2                	lw	ra,44(sp)
204067c4:	5422                	lw	s0,40(sp)
204067c6:	6145                	addi	sp,sp,48
204067c8:	8082                	ret

204067ca <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
204067ca:	1101                	addi	sp,sp,-32
204067cc:	ce22                	sw	s0,28(sp)
204067ce:	1000                	addi	s0,sp,32
204067d0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204067d4:	fec42703          	lw	a4,-20(s0)
204067d8:	800007b7          	lui	a5,0x80000
204067dc:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcaec>
204067e0:	00f71563          	bne	a4,a5,204067ea <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
204067e4:	100137b7          	lui	a5,0x10013
204067e8:	a011                	j	204067ec <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
204067ea:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:571
	}
}
204067ec:	853e                	mv	a0,a5
204067ee:	4472                	lw	s0,28(sp)
204067f0:	6105                	addi	sp,sp,32
204067f2:	8082                	ret

204067f4 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
204067f4:	1101                	addi	sp,sp,-32
204067f6:	ce22                	sw	s0,28(sp)
204067f8:	1000                	addi	s0,sp,32
204067fa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204067fe:	fec42703          	lw	a4,-20(s0)
20406802:	800007b7          	lui	a5,0x80000
20406806:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcaec>
2040680a:	00f71763          	bne	a4,a5,20406818 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
2040680e:	800007b7          	lui	a5,0x80000
20406812:	48078793          	addi	a5,a5,1152 # 80000480 <metal_segment_heap_target_end+0xffffc7ec>
20406816:	a011                	j	2040681a <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20406818:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:601
	}
}
2040681a:	853e                	mv	a0,a5
2040681c:	4472                	lw	s0,28(sp)
2040681e:	6105                	addi	sp,sp,32
20406820:	8082                	ret

20406822 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20406822:	1101                	addi	sp,sp,-32
20406824:	ce22                	sw	s0,28(sp)
20406826:	1000                	addi	s0,sp,32
20406828:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040682c:	fec42703          	lw	a4,-20(s0)
20406830:	800007b7          	lui	a5,0x80000
20406834:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcaec>
20406838:	00f71463          	bne	a4,a5,20406840 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:606
		return 5;
2040683c:	4795                	li	a5,5
2040683e:	a011                	j	20406842 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20406840:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:611
	}
}
20406842:	853e                	mv	a0,a5
20406844:	4472                	lw	s0,28(sp)
20406846:	6105                	addi	sp,sp,32
20406848:	8082                	ret

2040684a <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
2040684a:	1101                	addi	sp,sp,-32
2040684c:	ce22                	sw	s0,28(sp)
2040684e:	1000                	addi	s0,sp,32
20406850:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20406854:	fec42703          	lw	a4,-20(s0)
20406858:	800007b7          	lui	a5,0x80000
2040685c:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcaec>
20406860:	00f71763          	bne	a4,a5,2040686e <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20406864:	800007b7          	lui	a5,0x80000
20406868:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffc424>
2040686c:	a011                	j	20406870 <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
2040686e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:621
	}
}
20406870:	853e                	mv	a0,a5
20406872:	4472                	lw	s0,28(sp)
20406874:	6105                	addi	sp,sp,32
20406876:	8082                	ret

20406878 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20406878:	1101                	addi	sp,sp,-32
2040687a:	ce22                	sw	s0,28(sp)
2040687c:	1000                	addi	s0,sp,32
2040687e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20406882:	fec42703          	lw	a4,-20(s0)
20406886:	800007b7          	lui	a5,0x80000
2040688a:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcaec>
2040688e:	00f71563          	bne	a4,a5,20406898 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20406892:	81c18793          	addi	a5,gp,-2020 # 800007bc <__metal_dt_gpio_10012000>
20406896:	a011                	j	2040689a <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20406898:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:631
	}
}
2040689a:	853e                	mv	a0,a5
2040689c:	4472                	lw	s0,28(sp)
2040689e:	6105                	addi	sp,sp,32
204068a0:	8082                	ret

204068a2 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
204068a2:	1101                	addi	sp,sp,-32
204068a4:	ce22                	sw	s0,28(sp)
204068a6:	1000                	addi	s0,sp,32
204068a8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204068ac:	fec42703          	lw	a4,-20(s0)
204068b0:	800007b7          	lui	a5,0x80000
204068b4:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcaec>
204068b8:	00f71563          	bne	a4,a5,204068c2 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:636
		return 196608;
204068bc:	000307b7          	lui	a5,0x30
204068c0:	a011                	j	204068c4 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
204068c2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:641
	}
}
204068c4:	853e                	mv	a0,a5
204068c6:	4472                	lw	s0,28(sp)
204068c8:	6105                	addi	sp,sp,32
204068ca:	8082                	ret

204068cc <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
204068cc:	1101                	addi	sp,sp,-32
204068ce:	ce22                	sw	s0,28(sp)
204068d0:	1000                	addi	s0,sp,32
204068d2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204068d6:	fec42703          	lw	a4,-20(s0)
204068da:	800007b7          	lui	a5,0x80000
204068de:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcaec>
204068e2:	00f71563          	bne	a4,a5,204068ec <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:646
		return 196608;
204068e6:	000307b7          	lui	a5,0x30
204068ea:	a011                	j	204068ee <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
204068ec:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:651
	}
}
204068ee:	853e                	mv	a0,a5
204068f0:	4472                	lw	s0,28(sp)
204068f2:	6105                	addi	sp,sp,32
204068f4:	8082                	ret

204068f6 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
204068f6:	1101                	addi	sp,sp,-32
204068f8:	ce06                	sw	ra,28(sp)
204068fa:	cc22                	sw	s0,24(sp)
204068fc:	1000                	addi	s0,sp,32
204068fe:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20406902:	fec42503          	lw	a0,-20(s0)
20406906:	35fd                	jal	204067f4 <__metal_driver_sifive_uart0_interrupt_parent>
20406908:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
2040690a:	853e                	mv	a0,a5
2040690c:	40f2                	lw	ra,28(sp)
2040690e:	4462                	lw	s0,24(sp)
20406910:	6105                	addi	sp,sp,32
20406912:	8082                	ret

20406914 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20406914:	1101                	addi	sp,sp,-32
20406916:	ce06                	sw	ra,28(sp)
20406918:	cc22                	sw	s0,24(sp)
2040691a:	1000                	addi	s0,sp,32
2040691c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20406920:	fec42503          	lw	a0,-20(s0)
20406924:	3dfd                	jal	20406822 <__metal_driver_sifive_uart0_interrupt_line>
20406926:	87aa                	mv	a5,a0
20406928:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
2040692c:	853e                	mv	a0,a5
2040692e:	40f2                	lw	ra,28(sp)
20406930:	4462                	lw	s0,24(sp)
20406932:	6105                	addi	sp,sp,32
20406934:	8082                	ret

20406936 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20406936:	7179                	addi	sp,sp,-48
20406938:	d606                	sw	ra,44(sp)
2040693a:	d422                	sw	s0,40(sp)
2040693c:	1800                	addi	s0,sp,48
2040693e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20406942:	fdc42503          	lw	a0,-36(s0)
20406946:	e85ff0ef          	jal	ra,204067ca <__metal_driver_sifive_uart0_control_base>
2040694a:	87aa                	mv	a5,a0
2040694c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20406950:	fec42783          	lw	a5,-20(s0)
20406954:	439c                	lw	a5,0(a5)
20406956:	fff7c793          	not	a5,a5
2040695a:	83fd                	srli	a5,a5,0x1f
2040695c:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20406960:	853e                	mv	a0,a5
20406962:	50b2                	lw	ra,44(sp)
20406964:	5422                	lw	s0,40(sp)
20406966:	6145                	addi	sp,sp,48
20406968:	8082                	ret

2040696a <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
2040696a:	7179                	addi	sp,sp,-48
2040696c:	d606                	sw	ra,44(sp)
2040696e:	d422                	sw	s0,40(sp)
20406970:	1800                	addi	s0,sp,48
20406972:	fca42e23          	sw	a0,-36(s0)
20406976:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040697a:	fdc42503          	lw	a0,-36(s0)
2040697e:	e4dff0ef          	jal	ra,204067ca <__metal_driver_sifive_uart0_control_base>
20406982:	87aa                	mv	a5,a0
20406984:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20406988:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
2040698a:	fdc42503          	lw	a0,-36(s0)
2040698e:	3765                	jal	20406936 <__metal_driver_sifive_uart0_txready>
20406990:	87aa                	mv	a5,a0
20406992:	dfe5                	beqz	a5,2040698a <__metal_driver_sifive_uart0_putc+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20406994:	fec42783          	lw	a5,-20(s0)
20406998:	fd842703          	lw	a4,-40(s0)
2040699c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
2040699e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
204069a0:	853e                	mv	a0,a5
204069a2:	50b2                	lw	ra,44(sp)
204069a4:	5422                	lw	s0,40(sp)
204069a6:	6145                	addi	sp,sp,48
204069a8:	8082                	ret

204069aa <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
204069aa:	7179                	addi	sp,sp,-48
204069ac:	d606                	sw	ra,44(sp)
204069ae:	d422                	sw	s0,40(sp)
204069b0:	1800                	addi	s0,sp,48
204069b2:	fca42e23          	sw	a0,-36(s0)
204069b6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204069ba:	fdc42503          	lw	a0,-36(s0)
204069be:	e0dff0ef          	jal	ra,204067ca <__metal_driver_sifive_uart0_control_base>
204069c2:	87aa                	mv	a5,a0
204069c4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
204069c8:	fec42783          	lw	a5,-20(s0)
204069cc:	0791                	addi	a5,a5,4
204069ce:	439c                	lw	a5,0(a5)
204069d0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
204069d4:	fe842783          	lw	a5,-24(s0)
204069d8:	0007d763          	bgez	a5,204069e6 <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
204069dc:	fd842783          	lw	a5,-40(s0)
204069e0:	577d                	li	a4,-1
204069e2:	c398                	sw	a4,0(a5)
204069e4:	a801                	j	204069f4 <__metal_driver_sifive_uart0_getc+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
204069e6:	fe842783          	lw	a5,-24(s0)
204069ea:	0ff7f713          	andi	a4,a5,255
204069ee:	fd842783          	lw	a5,-40(s0)
204069f2:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
204069f4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
204069f6:	853e                	mv	a0,a5
204069f8:	50b2                	lw	ra,44(sp)
204069fa:	5422                	lw	s0,40(sp)
204069fc:	6145                	addi	sp,sp,48
204069fe:	8082                	ret

20406a00 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20406a00:	7179                	addi	sp,sp,-48
20406a02:	d622                	sw	s0,44(sp)
20406a04:	1800                	addi	s0,sp,48
20406a06:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20406a0a:	fdc42783          	lw	a5,-36(s0)
20406a0e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20406a12:	fec42783          	lw	a5,-20(s0)
20406a16:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
20406a18:	853e                	mv	a0,a5
20406a1a:	5432                	lw	s0,44(sp)
20406a1c:	6145                	addi	sp,sp,48
20406a1e:	8082                	ret

20406a20 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20406a20:	7179                	addi	sp,sp,-48
20406a22:	d606                	sw	ra,44(sp)
20406a24:	d422                	sw	s0,40(sp)
20406a26:	1800                	addi	s0,sp,48
20406a28:	fca42e23          	sw	a0,-36(s0)
20406a2c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20406a30:	fdc42783          	lw	a5,-36(s0)
20406a34:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20406a38:	fdc42503          	lw	a0,-36(s0)
20406a3c:	d8fff0ef          	jal	ra,204067ca <__metal_driver_sifive_uart0_control_base>
20406a40:	87aa                	mv	a5,a0
20406a42:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20406a46:	fdc42503          	lw	a0,-36(s0)
20406a4a:	e01ff0ef          	jal	ra,2040684a <__metal_driver_sifive_uart0_clock>
20406a4e:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20406a52:	fd842703          	lw	a4,-40(s0)
20406a56:	fec42783          	lw	a5,-20(s0)
20406a5a:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
20406a5c:	fe442783          	lw	a5,-28(s0)
20406a60:	cbb1                	beqz	a5,20406ab4 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20406a62:	fe442783          	lw	a5,-28(s0)
20406a66:	439c                	lw	a5,0(a5)
20406a68:	439c                	lw	a5,0(a5)
20406a6a:	fe442503          	lw	a0,-28(s0)
20406a6e:	9782                	jalr	a5
20406a70:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20406a74:	fe042703          	lw	a4,-32(s0)
20406a78:	fd842783          	lw	a5,-40(s0)
20406a7c:	02f747b3          	div	a5,a4,a5
20406a80:	fff78713          	addi	a4,a5,-1
20406a84:	fe842783          	lw	a5,-24(s0)
20406a88:	07e1                	addi	a5,a5,24
20406a8a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20406a8c:	fe842783          	lw	a5,-24(s0)
20406a90:	07a1                	addi	a5,a5,8
20406a92:	439c                	lw	a5,0(a5)
20406a94:	fe842703          	lw	a4,-24(s0)
20406a98:	0721                	addi	a4,a4,8
20406a9a:	0017e793          	ori	a5,a5,1
20406a9e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20406aa0:	fe842783          	lw	a5,-24(s0)
20406aa4:	07b1                	addi	a5,a5,12
20406aa6:	439c                	lw	a5,0(a5)
20406aa8:	fe842703          	lw	a4,-24(s0)
20406aac:	0731                	addi	a4,a4,12
20406aae:	0017e793          	ori	a5,a5,1
20406ab2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20406ab4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20406ab6:	853e                	mv	a0,a5
20406ab8:	50b2                	lw	ra,44(sp)
20406aba:	5422                	lw	s0,40(sp)
20406abc:	6145                	addi	sp,sp,48
20406abe:	8082                	ret

20406ac0 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20406ac0:	7139                	addi	sp,sp,-64
20406ac2:	de06                	sw	ra,60(sp)
20406ac4:	dc22                	sw	s0,56(sp)
20406ac6:	0080                	addi	s0,sp,64
20406ac8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20406acc:	fcc42783          	lw	a5,-52(s0)
20406ad0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20406ad4:	fcc42503          	lw	a0,-52(s0)
20406ad8:	cf3ff0ef          	jal	ra,204067ca <__metal_driver_sifive_uart0_control_base>
20406adc:	87aa                	mv	a5,a0
20406ade:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20406ae2:	fcc42503          	lw	a0,-52(s0)
20406ae6:	d65ff0ef          	jal	ra,2040684a <__metal_driver_sifive_uart0_clock>
20406aea:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20406aee:	fe842783          	lw	a5,-24(s0)
20406af2:	07a1                	addi	a5,a5,8
20406af4:	4398                	lw	a4,0(a5)
20406af6:	fe842783          	lw	a5,-24(s0)
20406afa:	07a1                	addi	a5,a5,8
20406afc:	86be                	mv	a3,a5
20406afe:	fff907b7          	lui	a5,0xfff90
20406b02:	17fd                	addi	a5,a5,-1
20406b04:	8ff9                	and	a5,a5,a4
20406b06:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20406b08:	fe842783          	lw	a5,-24(s0)
20406b0c:	07a1                	addi	a5,a5,8
20406b0e:	4398                	lw	a4,0(a5)
20406b10:	fe842783          	lw	a5,-24(s0)
20406b14:	07a1                	addi	a5,a5,8
20406b16:	86be                	mv	a3,a5
20406b18:	67c1                	lui	a5,0x10
20406b1a:	8fd9                	or	a5,a5,a4
20406b1c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20406b1e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20406b20:	fe842783          	lw	a5,-24(s0)
20406b24:	07d1                	addi	a5,a5,20
20406b26:	439c                	lw	a5,0(a5)
20406b28:	8b85                	andi	a5,a5,1
20406b2a:	dbfd                	beqz	a5,20406b20 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20406b2c:	fe842783          	lw	a5,-24(s0)
20406b30:	07a1                	addi	a5,a5,8
20406b32:	439c                	lw	a5,0(a5)
20406b34:	8b89                	andi	a5,a5,2
20406b36:	c399                	beqz	a5,20406b3c <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20406b38:	47a5                	li	a5,9
20406b3a:	a011                	j	20406b3e <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20406b3c:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20406b3e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20406b42:	fe442783          	lw	a5,-28(s0)
20406b46:	439c                	lw	a5,0(a5)
20406b48:	439c                	lw	a5,0(a5)
20406b4a:	fe442503          	lw	a0,-28(s0)
20406b4e:	9782                	jalr	a5
20406b50:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20406b54:	fe042703          	lw	a4,-32(s0)
20406b58:	fdc42783          	lw	a5,-36(s0)
20406b5c:	02f707b3          	mul	a5,a4,a5
20406b60:	873e                	mv	a4,a5
20406b62:	fec42783          	lw	a5,-20(s0)
20406b66:	43dc                	lw	a5,4(a5)
20406b68:	02f757b3          	divu	a5,a4,a5
20406b6c:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20406b70:	fc042a23          	sw	zero,-44(s0)
20406b74:	a039                	j	20406b82 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20406b76:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20406b78:	fd442783          	lw	a5,-44(s0)
20406b7c:	0785                	addi	a5,a5,1
20406b7e:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20406b82:	fd442783          	lw	a5,-44(s0)
20406b86:	fd842703          	lw	a4,-40(s0)
20406b8a:	fee7c6e3          	blt	a5,a4,20406b76 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20406b8e:	0001                	nop
20406b90:	50f2                	lw	ra,60(sp)
20406b92:	5462                	lw	s0,56(sp)
20406b94:	6121                	addi	sp,sp,64
20406b96:	8082                	ret

20406b98 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20406b98:	7179                	addi	sp,sp,-48
20406b9a:	d606                	sw	ra,44(sp)
20406b9c:	d422                	sw	s0,40(sp)
20406b9e:	1800                	addi	s0,sp,48
20406ba0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20406ba4:	fdc42783          	lw	a5,-36(s0)
20406ba8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20406bac:	fec42703          	lw	a4,-20(s0)
20406bb0:	fec42783          	lw	a5,-20(s0)
20406bb4:	43dc                	lw	a5,4(a5)
20406bb6:	85be                	mv	a1,a5
20406bb8:	853a                	mv	a0,a4
20406bba:	d5ffc0ef          	jal	ra,20403918 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20406bbe:	0001                	nop
20406bc0:	50b2                	lw	ra,44(sp)
20406bc2:	5422                	lw	s0,40(sp)
20406bc4:	6145                	addi	sp,sp,48
20406bc6:	8082                	ret

20406bc8 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20406bc8:	7139                	addi	sp,sp,-64
20406bca:	de06                	sw	ra,60(sp)
20406bcc:	dc22                	sw	s0,56(sp)
20406bce:	0080                	addi	s0,sp,64
20406bd0:	fca42623          	sw	a0,-52(s0)
20406bd4:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20406bd8:	fcc42783          	lw	a5,-52(s0)
20406bdc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20406be0:	fcc42503          	lw	a0,-52(s0)
20406be4:	c67ff0ef          	jal	ra,2040684a <__metal_driver_sifive_uart0_clock>
20406be8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20406bec:	fcc42503          	lw	a0,-52(s0)
20406bf0:	c89ff0ef          	jal	ra,20406878 <__metal_driver_sifive_uart0_pinmux>
20406bf4:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20406bf8:	fe842783          	lw	a5,-24(s0)
20406bfc:	c7b9                	beqz	a5,20406c4a <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20406bfe:	fec42783          	lw	a5,-20(s0)
20406c02:	20407737          	lui	a4,0x20407
20406c06:	ac070713          	addi	a4,a4,-1344 # 20406ac0 <pre_rate_change_callback_func>
20406c0a:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20406c0c:	fec42783          	lw	a5,-20(s0)
20406c10:	fcc42703          	lw	a4,-52(s0)
20406c14:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20406c16:	fec42783          	lw	a5,-20(s0)
20406c1a:	07a1                	addi	a5,a5,8
20406c1c:	85be                	mv	a1,a5
20406c1e:	fe842503          	lw	a0,-24(s0)
20406c22:	20f1                	jal	20406cee <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20406c24:	fec42783          	lw	a5,-20(s0)
20406c28:	20407737          	lui	a4,0x20407
20406c2c:	b9870713          	addi	a4,a4,-1128 # 20406b98 <post_rate_change_callback_func>
20406c30:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20406c32:	fec42783          	lw	a5,-20(s0)
20406c36:	fcc42703          	lw	a4,-52(s0)
20406c3a:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
20406c3c:	fec42783          	lw	a5,-20(s0)
20406c40:	07d1                	addi	a5,a5,20
20406c42:	85be                	mv	a1,a5
20406c44:	fe842503          	lw	a0,-24(s0)
20406c48:	28d9                	jal	20406d1e <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20406c4a:	fec42783          	lw	a5,-20(s0)
20406c4e:	fc842583          	lw	a1,-56(s0)
20406c52:	853e                	mv	a0,a5
20406c54:	cc5fc0ef          	jal	ra,20403918 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20406c58:	fe442783          	lw	a5,-28(s0)
20406c5c:	cb95                	beqz	a5,20406c90 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20406c5e:	fcc42503          	lw	a0,-52(s0)
20406c62:	c41ff0ef          	jal	ra,204068a2 <__metal_driver_sifive_uart0_pinmux_output_selector>
20406c66:	87aa                	mv	a5,a0
20406c68:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20406c6c:	fcc42503          	lw	a0,-52(s0)
20406c70:	c5dff0ef          	jal	ra,204068cc <__metal_driver_sifive_uart0_pinmux_source_selector>
20406c74:	87aa                	mv	a5,a0
20406c76:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20406c7a:	fe442783          	lw	a5,-28(s0)
20406c7e:	439c                	lw	a5,0(a5)
20406c80:	53dc                	lw	a5,36(a5)
20406c82:	fdc42603          	lw	a2,-36(s0)
20406c86:	fe042583          	lw	a1,-32(s0)
20406c8a:	fe442503          	lw	a0,-28(s0)
20406c8e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20406c90:	0001                	nop
20406c92:	50f2                	lw	ra,60(sp)
20406c94:	5462                	lw	s0,56(sp)
20406c96:	6121                	addi	sp,sp,64
20406c98:	8082                	ret

20406c9a <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20406c9a:	7179                	addi	sp,sp,-48
20406c9c:	d622                	sw	s0,44(sp)
20406c9e:	1800                	addi	s0,sp,48
20406ca0:	fca42e23          	sw	a0,-36(s0)
20406ca4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20406ca8:	fd842783          	lw	a5,-40(s0)
20406cac:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20406cb0:	fdc42783          	lw	a5,-36(s0)
20406cb4:	e781                	bnez	a5,20406cbc <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20406cb6:	fd842783          	lw	a5,-40(s0)
20406cba:	a035                	j	20406ce6 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20406cbc:	fdc42783          	lw	a5,-36(s0)
20406cc0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20406cc4:	a031                	j	20406cd0 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20406cc6:	fec42783          	lw	a5,-20(s0)
20406cca:	479c                	lw	a5,8(a5)
20406ccc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20406cd0:	fec42783          	lw	a5,-20(s0)
20406cd4:	479c                	lw	a5,8(a5)
20406cd6:	fbe5                	bnez	a5,20406cc6 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20406cd8:	fec42783          	lw	a5,-20(s0)
20406cdc:	fd842703          	lw	a4,-40(s0)
20406ce0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20406ce2:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20406ce6:	853e                	mv	a0,a5
20406ce8:	5432                	lw	s0,44(sp)
20406cea:	6145                	addi	sp,sp,48
20406cec:	8082                	ret

20406cee <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20406cee:	1101                	addi	sp,sp,-32
20406cf0:	ce06                	sw	ra,28(sp)
20406cf2:	cc22                	sw	s0,24(sp)
20406cf4:	1000                	addi	s0,sp,32
20406cf6:	fea42623          	sw	a0,-20(s0)
20406cfa:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20406cfe:	fec42783          	lw	a5,-20(s0)
20406d02:	43dc                	lw	a5,4(a5)
20406d04:	fe842583          	lw	a1,-24(s0)
20406d08:	853e                	mv	a0,a5
20406d0a:	3f41                	jal	20406c9a <_metal_clock_append_to_callbacks>
20406d0c:	872a                	mv	a4,a0
20406d0e:	fec42783          	lw	a5,-20(s0)
20406d12:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20406d14:	0001                	nop
20406d16:	40f2                	lw	ra,28(sp)
20406d18:	4462                	lw	s0,24(sp)
20406d1a:	6105                	addi	sp,sp,32
20406d1c:	8082                	ret

20406d1e <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20406d1e:	1101                	addi	sp,sp,-32
20406d20:	ce06                	sw	ra,28(sp)
20406d22:	cc22                	sw	s0,24(sp)
20406d24:	1000                	addi	s0,sp,32
20406d26:	fea42623          	sw	a0,-20(s0)
20406d2a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20406d2e:	fec42783          	lw	a5,-20(s0)
20406d32:	479c                	lw	a5,8(a5)
20406d34:	fe842583          	lw	a1,-24(s0)
20406d38:	853e                	mv	a0,a5
20406d3a:	3785                	jal	20406c9a <_metal_clock_append_to_callbacks>
20406d3c:	872a                	mv	a4,a0
20406d3e:	fec42783          	lw	a5,-20(s0)
20406d42:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20406d44:	0001                	nop
20406d46:	40f2                	lw	ra,28(sp)
20406d48:	4462                	lw	s0,24(sp)
20406d4a:	6105                	addi	sp,sp,32
20406d4c:	8082                	ret

20406d4e <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20406d4e:	1101                	addi	sp,sp,-32
20406d50:	ce06                	sw	ra,28(sp)
20406d52:	cc22                	sw	s0,24(sp)
20406d54:	1000                	addi	s0,sp,32
20406d56:	fea42623          	sw	a0,-20(s0)
20406d5a:	fec42783          	lw	a5,-20(s0)
20406d5e:	439c                	lw	a5,0(a5)
20406d60:	57dc                	lw	a5,44(a5)
20406d62:	fec42503          	lw	a0,-20(s0)
20406d66:	9782                	jalr	a5
20406d68:	87aa                	mv	a5,a0
20406d6a:	853e                	mv	a0,a5
20406d6c:	40f2                	lw	ra,28(sp)
20406d6e:	4462                	lw	s0,24(sp)
20406d70:	6105                	addi	sp,sp,32
20406d72:	8082                	ret

20406d74 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20406d74:	1101                	addi	sp,sp,-32
20406d76:	ce22                	sw	s0,28(sp)
20406d78:	1000                	addi	s0,sp,32
20406d7a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20406d7e:	fec42783          	lw	a5,-20(s0)
20406d82:	eb89                	bnez	a5,20406d94 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20406d84:	fec42703          	lw	a4,-20(s0)
20406d88:	070a                	slli	a4,a4,0x2
20406d8a:	80c18793          	addi	a5,gp,-2036 # 800007ac <__metal_cpu_table>
20406d8e:	97ba                	add	a5,a5,a4
20406d90:	439c                	lw	a5,0(a5)
20406d92:	a011                	j	20406d96 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20406d94:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20406d96:	853e                	mv	a0,a5
20406d98:	4472                	lw	s0,28(sp)
20406d9a:	6105                	addi	sp,sp,32
20406d9c:	8082                	ret

20406d9e <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20406d9e:	1101                	addi	sp,sp,-32
20406da0:	ce22                	sw	s0,28(sp)
20406da2:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20406da4:	f14027f3          	csrr	a5,mhartid
20406da8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20406dac:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20406db0:	853e                	mv	a0,a5
20406db2:	4472                	lw	s0,28(sp)
20406db4:	6105                	addi	sp,sp,32
20406db6:	8082                	ret

20406db8 <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
20406db8:	1101                	addi	sp,sp,-32
20406dba:	ce22                	sw	s0,28(sp)
20406dbc:	1000                	addi	s0,sp,32
20406dbe:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20406dc2:	0001                	nop
20406dc4:	bffd                	j	20406dc2 <metal_shutdown+0xa>
	...

20406e00 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20406e00:	c7afd06f          	j	2040427a <metal_interrupt_vector_handler>

20406e04 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20406e04:	c76fd06f          	j	2040427a <metal_interrupt_vector_handler>

20406e08 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20406e08:	c72fd06f          	j	2040427a <metal_interrupt_vector_handler>

20406e0c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
20406e0c:	c9cfd06f          	j	204042a8 <metal_software_interrupt_vector_handler>

20406e10 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20406e10:	c6afd06f          	j	2040427a <metal_interrupt_vector_handler>

20406e14 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20406e14:	c66fd06f          	j	2040427a <metal_interrupt_vector_handler>

20406e18 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20406e18:	c62fd06f          	j	2040427a <metal_interrupt_vector_handler>

20406e1c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
20406e1c:	d7efd06f          	j	2040439a <metal_timer_interrupt_vector_handler>

20406e20 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20406e20:	c5afd06f          	j	2040427a <metal_interrupt_vector_handler>

20406e24 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20406e24:	c56fd06f          	j	2040427a <metal_interrupt_vector_handler>

20406e28 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20406e28:	c52fd06f          	j	2040427a <metal_interrupt_vector_handler>

20406e2c <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
20406e2c:	c4efd06f          	j	2040427a <metal_interrupt_vector_handler>

20406e30 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20406e30:	c4afd06f          	j	2040427a <metal_interrupt_vector_handler>

20406e34 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20406e34:	c46fd06f          	j	2040427a <metal_interrupt_vector_handler>

20406e38 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20406e38:	c42fd06f          	j	2040427a <metal_interrupt_vector_handler>

20406e3c <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
20406e3c:	c3efd06f          	j	2040427a <metal_interrupt_vector_handler>

20406e40 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20406e40:	837fd06f          	j	20404676 <metal_lc0_interrupt_vector_handler>

20406e44 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20406e44:	8c5fd06f          	j	20404708 <metal_lc1_interrupt_vector_handler>

20406e48 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20406e48:	953fd06f          	j	2040479a <metal_lc2_interrupt_vector_handler>

20406e4c <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
20406e4c:	9e1fd06f          	j	2040482c <metal_lc3_interrupt_vector_handler>

20406e50 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20406e50:	a6ffd06f          	j	204048be <metal_lc4_interrupt_vector_handler>

20406e54 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20406e54:	afdfd06f          	j	20404950 <metal_lc5_interrupt_vector_handler>

20406e58 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20406e58:	b8bfd06f          	j	204049e2 <metal_lc6_interrupt_vector_handler>

20406e5c <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
20406e5c:	c19fd06f          	j	20404a74 <metal_lc7_interrupt_vector_handler>

20406e60 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20406e60:	ca7fd06f          	j	20404b06 <metal_lc8_interrupt_vector_handler>

20406e64 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20406e64:	d35fd06f          	j	20404b98 <metal_lc9_interrupt_vector_handler>

20406e68 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20406e68:	dc3fd06f          	j	20404c2a <metal_lc10_interrupt_vector_handler>

20406e6c <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
20406e6c:	e51fd06f          	j	20404cbc <metal_lc11_interrupt_vector_handler>

20406e70 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20406e70:	edffd06f          	j	20404d4e <metal_lc12_interrupt_vector_handler>

20406e74 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20406e74:	f6dfd06f          	j	20404de0 <metal_lc13_interrupt_vector_handler>

20406e78 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20406e78:	ffbfd06f          	j	20404e72 <metal_lc14_interrupt_vector_handler>

20406e7c <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
20406e7c:	888fe06f          	j	20404f04 <metal_lc15_interrupt_vector_handler>

20406e80 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:120
{
20406e80:	1101                	addi	sp,sp,-32
20406e82:	ce22                	sw	s0,28(sp)
20406e84:	1000                	addi	s0,sp,32
20406e86:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
20406e8a:	fec42703          	lw	a4,-20(s0)
20406e8e:	800007b7          	lui	a5,0x80000
20406e92:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffc424>
20406e96:	00f71763          	bne	a4,a5,20406ea4 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
20406e9a:	03dfd7b7          	lui	a5,0x3dfd
20406e9e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20406ea2:	a011                	j	20406ea6 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:125
		return 0;
20406ea4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:127
}
20406ea6:	853e                	mv	a0,a5
20406ea8:	4472                	lw	s0,28(sp)
20406eaa:	6105                	addi	sp,sp,32
20406eac:	8082                	ret

20406eae <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
20406eae:	1101                	addi	sp,sp,-32
20406eb0:	ce06                	sw	ra,28(sp)
20406eb2:	cc22                	sw	s0,24(sp)
20406eb4:	1000                	addi	s0,sp,32
20406eb6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
20406eba:	fec42503          	lw	a0,-20(s0)
20406ebe:	37c9                	jal	20406e80 <__metal_driver_fixed_clock_rate>
20406ec0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20406ec2:	853e                	mv	a0,a5
20406ec4:	40f2                	lw	ra,28(sp)
20406ec6:	4462                	lw	s0,24(sp)
20406ec8:	6105                	addi	sp,sp,32
20406eca:	8082                	ret

20406ecc <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
20406ecc:	1101                	addi	sp,sp,-32
20406ece:	ce06                	sw	ra,28(sp)
20406ed0:	cc22                	sw	s0,24(sp)
20406ed2:	1000                	addi	s0,sp,32
20406ed4:	fea42623          	sw	a0,-20(s0)
20406ed8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
20406edc:	fec42503          	lw	a0,-20(s0)
20406ee0:	37f9                	jal	20406eae <__metal_driver_fixed_clock_get_rate_hz>
20406ee2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20406ee4:	853e                	mv	a0,a5
20406ee6:	40f2                	lw	ra,28(sp)
20406ee8:	4462                	lw	s0,24(sp)
20406eea:	6105                	addi	sp,sp,32
20406eec:	8082                	ret

20406eee <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
20406eee:	1101                	addi	sp,sp,-32
20406ef0:	ce06                	sw	ra,28(sp)
20406ef2:	cc22                	sw	s0,24(sp)
20406ef4:	1000                	addi	s0,sp,32
20406ef6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
20406efa:	fec42503          	lw	a0,-20(s0)
20406efe:	ebbff0ef          	jal	ra,20406db8 <metal_shutdown>
