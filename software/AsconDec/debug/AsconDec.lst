
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/debug/AsconDec.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/debug/AsconDec.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x000062e4 memsz 0x000062e4 flags rwx
    LOAD off    0x00007730 vaddr 0x80001730 paddr 0x80001730 align 2**12
         filesz 0x00000000 memsz 0x00001c84 flags rw-
    LOAD off    0x00008000 vaddr 0x80000000 paddr 0x204062e8 align 2**12
         filesz 0x00001730 memsz 0x00001730 flags rw-
    LOAD off    0x00009730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00009730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             0000019e  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005c00  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           000004e0  20405e00  20405e00  00006e00  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  204062e0  204062e0  000072e0  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00001730  80000000  204062e8  00008000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              00001084  80001730  80001730  00007730  2**3  ALLOC
  6 .stack            00000400  800027b4  800027b4  00007730  2**0  ALLOC
  7 .heap             00000800  80002bb4  80002bb4  00007730  2**0  ALLOC
  8 .debug_info       00014ca7  00000000  00000000  00009730  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     000027ca  00000000  00000000  0001e3d7  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000930  00000000  00000000  00020ba8  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     000007c8  00000000  00000000  000214d8  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       000093ba  00000000  00000000  00021ca0  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        0000383f  00000000  00000000  0002b05a  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002e899  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002e8c1  2**0  CONTENTS, READONLY
 16 .debug_frame      0000266c  00000000  00000000  0002e8ec  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405e00 l    d  .rodata	00000000 .rodata
204062e0 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80001730 l    d  .bss	00000000 .bss
800027b4 l    d  .stack	00000000 .stack
80002bb4 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
2040013e l       .init	00000000 _skip_init
20405f90 l       .rodata	00000000 argv
20405f94 l       .rodata	00000000 envp
20405f98 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 AsconDec.c
204003a8 l     F .text	00000404 ROUND
204007ac l     F .text	0000008e P12
2040083a l     F .text	00000052 P6
80000000 l     O .data	000007d0 asso_text.2823
800007d0 l     O .data	000007d0 plain_text.2822
8000173c l     O .bss	000007e0 cipher_text.2824
80000fa0 l     O .data	00000010 Key.2828
80000fb0 l     O .data	00000010 Nonce.2825
80001f1c l     O .bss	00000028 hash.2827
80001f44 l     O .bss	000007e0 dec_text.2826
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
2040158e l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20401ade l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80001710 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80002724 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
204027f8 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
204028a2 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
204028c8 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
204028ec l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20402928 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20402a88 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20402fbe l     F .text	00000024 __metal_driver_cpu_hartid
20402fe2 l     F .text	0000002a __metal_driver_cpu_timebase
2040300c l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20404816 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20404840 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20404868 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20404890 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
204048b8 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404e04 l     F .text	00000026 __metal_driver_sifive_gpio0_base
20404e2a l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20404e54 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
204056be l     F .text	0000002a __metal_driver_sifive_uart0_control_base
204056e8 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20405716 l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
2040573e l     F .text	0000002e __metal_driver_sifive_uart0_clock
2040576c l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20405796 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
204057c0 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
204059b2 l     F .text	000000d8 pre_rate_change_callback_func
20405a8a l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty_a-vector.o
20405d00 l       .text	00000000 IRQ_0
20405d04 l       .text	00000000 IRQ_1
20405d08 l       .text	00000000 IRQ_2
20405d0c l       .text	00000000 IRQ_3
20405d10 l       .text	00000000 IRQ_4
20405d14 l       .text	00000000 IRQ_5
20405d18 l       .text	00000000 IRQ_6
20405d1c l       .text	00000000 IRQ_7
20405d20 l       .text	00000000 IRQ_8
20405d24 l       .text	00000000 IRQ_9
20405d28 l       .text	00000000 IRQ_10
20405d2c l       .text	00000000 IRQ_11
20405d30 l       .text	00000000 IRQ_12
20405d34 l       .text	00000000 IRQ_13
20405d38 l       .text	00000000 IRQ_14
20405d3c l       .text	00000000 IRQ_15
20405d40 l       .text	00000000 IRQ_LC0
20405d44 l       .text	00000000 IRQ_LC1
20405d48 l       .text	00000000 IRQ_LC2
20405d4c l       .text	00000000 IRQ_LC3
20405d50 l       .text	00000000 IRQ_LC4
20405d54 l       .text	00000000 IRQ_LC5
20405d58 l       .text	00000000 IRQ_LC6
20405d5c l       .text	00000000 IRQ_LC7
20405d60 l       .text	00000000 IRQ_LC8
20405d64 l       .text	00000000 IRQ_LC9
20405d68 l       .text	00000000 IRQ_LC10
20405d6c l       .text	00000000 IRQ_LC11
20405d70 l       .text	00000000 IRQ_LC12
20405d74 l       .text	00000000 IRQ_LC13
20405d78 l       .text	00000000 IRQ_LC14
20405d7c l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405d80 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000fc0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
204062e4 l       .init_array	00000000 __fini_array_end
204062e4 l       .init_array	00000000 __fini_array_start
204062e4 l       .init_array	00000000 __init_array_end
204062e0 l       .init_array	00000000 __preinit_array_end
204062e0 l       .init_array	00000000 __init_array_start
204062e0 l       .init_array	00000000 __preinit_array_start
2040107a g     F .text	0000002c putchar
204062c0 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
20401f62 g     F .text	00000030 _isatty_r
204037be  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20401128 g     F .text	000000da _puts_r
20401f92 g     F .text	00000034 _lseek_r
20405912 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
20402c64 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
2040372c  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400e2a g     F .text	0000001e rdcycle
20403f7e g     F .text	00000038 __metal_valid_interrupt_id
20401036 g     F .text	00000044 printf
204043a4 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80001f08 g       .data	00000000 __global_pointer$
20405b8c g     F .text	00000054 _metal_clock_append_to_callbacks
20404908 g     F .text	00000038 __metal_plic0_complete_interrupt
204041fe g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20401e90 g     F .text	00000036 __sseek
20401644 g     F .text	0000006a __sinit
20401210 g     F .text	000000c0 __swbuf_r
20401600 g     F .text	00000044 __sfmoreglue
20401fe2 g     F .text	00000002 __malloc_unlock
20405c66 g     F .text	0000002a metal_cpu_get
800016e8 g     O .data	00000020 __metal_dt_serial_10013000
20405298 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20405fa4 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
800027b4 g       .bss	00000000 metal_segment_bss_target_end
20402958 g     F .text	0000009a __metal_clint0_mtime_get
204047aa g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20405048 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
20402578 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
2040582a g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80001730 g       .bss	00000000 metal_segment_bss_target_start
204029f2 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401f30 g     F .text	00000032 _fstat_r
204054e8 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
800027b0 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20405be0 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20403a98  w    F .text	00000092 metal_lc9_interrupt_vector_handler
204061f8 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
204061b8 g     O .rodata	00000040 __metal_driver_vtable_cpu
20402874 g     F .text	0000002e metal_uart_set_baud_rate
20405aba g     F .text	000000d2 __metal_driver_sifive_uart0_init
20404438 g     F .text	00000072 __metal_driver_cpu_mcycle_get
80002bb4 g       .heap	00000000 metal_segment_heap_target_start
204015f6 g     F .text	0000000a _cleanup_r
80001720 g     O .data	00000004 __metal_dt_cpu_0
20403a06  w    F .text	00000092 metal_lc8_interrupt_vector_handler
20401202 g     F .text	0000000e puts
20403ce0  w    F .text	00000092 metal_lc13_interrupt_vector_handler
204031a0 g     F .text	00000018 __metal_default_exception_handler
204023e8 g     F .text	00000026 _fstat
2040088c g     F .text	0000059e crypto_aead_decrypt
20402f8a g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
204049a4 g     F .text	00000062 __metal_plic0_set_priority
204043c0 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20403036 g     F .text	0000002c __metal_driver_cpu_get
2040616c g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
20403094 g     F .text	00000018 __metal_interrupt_global_disable
20403974  w    F .text	00000092 metal_lc7_interrupt_vector_handler
20403b2a  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20401de2 g     F .text	00000030 _sbrk_r
20404dbc g     F .text	00000048 __metal_driver_riscv_plic0_disable
20404072 g     F .text	0000004e __metal_exception_register
20402392 g     F .text	00000034 _read_r
204045cc g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
2040512a g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
2040328c g     F .text	00000064 __metal_default_sw_handler
20405c10 g     F .text	00000030 metal_clock_register_post_rate_change_callback
204057ea g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
2040240e g     F .text	00000020 _isatty
204051f0 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80001728 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000170c g     O .data	00000004 _global_impure_ptr
204032f0  w    F .text	0000008e metal_timer_interrupt_vector_handler
204025e8 g     F .text	0000006a __libc_init_array
2040516a g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
20403bbc  w    F .text	00000092 metal_lc11_interrupt_vector_handler
2040434c g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
20402482 g     F .text	0000007e _sbrk
204050e4 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
2040017c g     F .init	00000002 _init
204030f6 g     F .text	0000001a __metal_interrupt_timer_disable
204052e2 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20404682 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20406284 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20405230 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
204025b0 g     F .text	00000038 __libc_fini_array
20405670 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
2040460c g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20403148 g     F .text	0000002c __metal_interrupt_local_enable
20402f56 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
204027a6 g     F .text	0000002c metal_tty_putc
20404ac6 g     F .text	00000018 __metal_plic0_default_handler
204010a6 g     F .text	00000082 _putc_r
80001020 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20405ef4 g     O .rodata	00000020 __sf_fake_stderr
2040312c g     F .text	0000001c __metal_interrupt_external_disable
20405808 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
2040441c g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
204040c0 g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20401b08 g     F .text	00000042 __sfputs_r
20404764 g     F .text	00000046 __metal_driver_cpu_exception_register
204030ac g     F .text	00000018 __metal_interrupt_software_enable
20403608  w    F .text	00000092 metal_lc1_interrupt_vector_handler
20401fc6 g     F .text	0000001a memchr
20401954 g     F .text	000000ac _free_r
80001738 g     O .bss	00000004 _global_atexit
20403e96 g     F .text	00000050 __metal_controller_interrupt_vector_mode
204026de g     F .text	000000c8 __call_exitprocs
80002bb4 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
2040242e g     F .text	0000002a _lseek
20404744 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
204047d8 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20403110 g     F .text	0000001c __metal_interrupt_external_enable
20402652 g     F .text	0000008c __register_exitproc
2040585c g     F .text	00000040 __metal_driver_sifive_uart0_putc
20404b6e g     F .text	00000144 __metal_driver_riscv_plic0_init
20404d74 g     F .text	00000048 __metal_driver_riscv_plic0_enable
204050b8 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20400200 g     F .text	000000be printC
204038e2  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20403062 g     F .text	0000001a __metal_myhart_id
20405690 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
204031fe  w    F .text	0000008e metal_software_interrupt_vector_handler
20404378 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20401f00 g     F .text	00000030 _close_r
204058f2 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20402b46 g     F .text	000000da __metal_driver_riscv_clint0_register
80001718 g     O .data	00000008 __metal_dt_clint_2000000
204012d0 g     F .text	00000110 __swsetup_r
204016ae g     F .text	0000009e __sfp
20401e12 g     F .text	00000030 __sread
20405008 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
2040017e  w    F .init	00000000 secondary_main
204031d0  w    F .text	0000002e metal_interrupt_vector_handler
20401fe0 g     F .text	00000002 __malloc_lock
2040152a g     F .text	00000064 _fflush_r
20404978 g     F .text	0000002c __metal_plic0_get_threshold
20405f14 g     O .rodata	00000020 __sf_fake_stdin
20403fb6 g     F .text	000000bc __metal_local_interrupt_enable
20402e20 g     F .text	00000136 __metal_driver_riscv_clint0_command_request
204018ac g     F .text	000000a8 memset
20403850  w    F .text	00000092 metal_lc5_interrupt_vector_handler
20400e48 g     F .text	000001ee main
80001730 g       .data	00000000 metal_segment_data_target_end
20404620 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
204046e4 g     F .text	00000060 __metal_driver_cpu_get_msip
20405caa g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
204047f6 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
204048da g     F .text	0000002e __metal_plic0_claim_interrupt
20401ec6 g     F .text	00000006 __sclose
20403c4e  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20401a00 g     F .text	000000de _malloc_r
20402c48 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
204044aa g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20405c90 g     F .text	0000001a metal_cpu_get_current_hartid
204002be g     F .text	000000ea AEAD_DEC
20405d00 g       .text	00000000 __metal_vector_table
204062e8 g       *ABS*	00000000 metal_segment_itim_source_start
80001714  w    O .data	00000004 __metal_cpu_table
80001030 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
2040017c g     F .init	00000002 _fini
20401036 g     F .text	00000044 iprintf
2040307c g     F .text	00000018 __metal_interrupt_global_enable
2040256e g     F .text	0000000a atexit
204027d2 g     F .text	00000026 metal_tty_putc_raw
20401ecc g     F .text	00000034 _write_r
204030dc g     F .text	0000001a __metal_interrupt_timer_enable
2040589c g     F .text	00000056 __metal_driver_sifive_uart0_getc
20402d6a g     F .text	000000b6 __metal_driver_riscv_clint0_disable
20401fe4 g     F .text	0000010c _printf_common
80001708 g     O .data	00000004 _impure_ptr
20404556 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
204013e0 g     F .text	0000014a __sflush_r
20405dae g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20402cb8 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
204062e8 g       *ABS*	00000000 metal_segment_data_source_start
800033b4 g       .heap	00000000 metal_segment_heap_target_end
20403ee6 g     F .text	00000098 __metal_controller_interrupt_vector
800013e8 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
204017b8 g     F .text	00000058 __swhatbuf_r
204051aa g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
2040337e g     F .text	00000066 __metal_default_timer_handler
20402500 g     F .text	0000006e _write
20404ade g     F .text	00000090 __metal_plic0_handler
2040369a  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403e04  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20405c40 g     F .text	00000026 metal_cpu_interrupt_controller
20401e42 g     F .text	0000004e __swrite
20402584 g     F .text	0000002c exit
20401b4a g     F .text	00000298 _vfiprintf_r
2040174c g     F .text	0000006c _fwalk_reent
20405dcc g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20405f34 g     O .rodata	00000020 __sf_fake_stdout
80001724 g     O .data	00000004 __metal_dt_gpio_10012000
204031b8 g     F .text	00000018 __metal_default_interrupt_handler
20402846 g     F .text	0000002e metal_uart_putc
20402458 g     F .text	0000002a _read
2040508e g     F .text	0000002a __metal_driver_sifive_gpio0_input
20403400 g     F .text	00000150 __metal_exception_handler
20403576  w    F .text	00000092 metal_lc0_interrupt_vector_handler
20405dee g     F .text	00000012 _exit
204044f0 g     F .text	00000066 __metal_driver_cpu_mtime_get
20401810 g     F .text	0000009c __smakebuf_r
20402c20 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
204020f0 g     F .text	000002a2 _printf_i
80001734 g     O .bss	00000004 __malloc_sbrk_start
20403d72  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20402abe g     F .text	00000088 __metal_driver_riscv_clint0_init
80001730 g     O .bss	00000004 __malloc_free_list
20401b4a g     F .text	00000298 _vfprintf_r
204045e2 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20404a3a g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
204045f6 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20403174 g     F .text	0000002c __metal_interrupt_local_disable
204030c4 g     F .text	00000018 __metal_interrupt_software_disable
20404a06 g     F .text	00000034 __metal_plic0_get_priority
2040281a g     F .text	0000002c metal_uart_init
20404940 g     F .text	00000038 __metal_plic0_set_threshold
204023c6 g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20404cb2 g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc02197          	auipc	gp,0x5fc02
20400004:	f0818193          	addi	gp,gp,-248 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc02197          	auipc	gp,0x5fc02
20400084:	e8818193          	addi	gp,gp,-376 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	5fc03117          	auipc	sp,0x5fc03
2040008c:	b2c10113          	addi	sp,sp,-1236 # 80002bb4 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
20400090:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
20400092:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400096:	00a28563          	beq	t0,a0,204000a0 <_start+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
2040009a:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
2040009c:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009e:	bfe5                	j	20400096 <_start+0x18>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
204000a0:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a4:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a8:	08551b63          	bne	a0,t0,2040013e <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000ac:	00006297          	auipc	t0,0x6
204000b0:	23c28293          	addi	t0,t0,572 # 204062e8 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b4:	5fc00317          	auipc	t1,0x5fc00
204000b8:	f4c30313          	addi	t1,t1,-180 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000bc:	82818393          	addi	t2,gp,-2008 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000c0:	00628c63          	beq	t0,t1,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c4:	00735a63          	bge	t1,t2,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000cc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ce:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000d2:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d4:	fe734ae3          	blt	t1,t2,204000c8 <_start+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d8:	00006297          	auipc	t0,0x6
204000dc:	21028293          	addi	t0,t0,528 # 204062e8 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000e0:	e7c00317          	auipc	t1,0xe7c00
204000e4:	f2030313          	addi	t1,t1,-224 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e8:	e7c00397          	auipc	t2,0xe7c00
204000ec:	f1838393          	addi	t2,t2,-232 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000f0:	00628c63          	beq	t0,t1,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f4:	00735a63          	bge	t1,t2,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000fc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fe:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
20400102:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400104:	fe734ae3          	blt	t1,t2,204000f8 <_start+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400108:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
2040010c:	5fc01317          	auipc	t1,0x5fc01
20400110:	62430313          	addi	t1,t1,1572 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400114:	5fc02397          	auipc	t2,0x5fc02
20400118:	6a038393          	addi	t2,t2,1696 # 800027b4 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
2040011c:	00735763          	bge	t1,t2,2040012a <_start+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400120:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
20400124:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
20400126:	fe734de3          	blt	t1,t2,20400120 <_start+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2040012a:	c211                	beqz	a2,2040012e <_start+0xb0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
2040012c:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
2040012e:	00002517          	auipc	a0,0x2
20400132:	48250513          	addi	a0,a0,1154 # 204025b0 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
20400136:	438020ef          	jal	ra,2040256e <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
2040013a:	4ae020ef          	jal	ra,204025e8 <__libc_init_array>

2040013e <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
2040013e:	3f0d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400140:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
20400144:	00010737          	lui	a4,0x10
20400148:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
2040014c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
2040014e:	cb89                	beqz	a5,20400160 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400150:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
20400154:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
20400156:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400158:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
2040015c:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400160:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
20400162:	00006597          	auipc	a1,0x6
20400166:	e2e58593          	addi	a1,a1,-466 # 20405f90 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
2040016a:	00006617          	auipc	a2,0x6
2040016e:	e2a60613          	addi	a2,a2,-470 # 20405f94 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
20400172:	2031                	jal	2040017e <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
20400174:	410020ef          	jal	ra,20402584 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400178:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
2040017a:	8082                	ret

2040017c <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
2040017c:	8082                	ret

2040017e <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
2040017e:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400180:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
20400182:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
20400186:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
2040018a:	00628563          	beq	t0,t1,20400194 <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
2040018e:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
20400192:	bff5                	j	2040018e <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
20400194:	4b5000ef          	jal	ra,20400e48 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400198:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
2040019a:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
2040019c:	8082                	ret

Disassembly of section .text:

20400200 <printC>:
printC():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:46

u32 RAND(u32 *return_addr, u32 num_rands);

u32 SEED();

void printC(u32 *arr, u32 a_len, int cipher, int del) {
20400200:	7179                	addi	sp,sp,-48
20400202:	d606                	sw	ra,44(sp)
20400204:	d422                	sw	s0,40(sp)
20400206:	1800                	addi	s0,sp,48
20400208:	fca42e23          	sw	a0,-36(s0)
2040020c:	fcb42c23          	sw	a1,-40(s0)
20400210:	fcc42a23          	sw	a2,-44(s0)
20400214:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:47
    int len = (a_len % 8 == 0) ? (a_len / 4) * 2 : (a_len / 4) * 2 + 2;
20400218:	fd842783          	lw	a5,-40(s0)
2040021c:	8b9d                	andi	a5,a5,7
2040021e:	e791                	bnez	a5,2040022a <printC+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:47 (discriminator 1)
20400220:	fd842783          	lw	a5,-40(s0)
20400224:	8389                	srli	a5,a5,0x2
20400226:	0786                	slli	a5,a5,0x1
20400228:	a031                	j	20400234 <printC+0x34>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:47 (discriminator 2)
2040022a:	fd842783          	lw	a5,-40(s0)
2040022e:	8389                	srli	a5,a5,0x2
20400230:	0785                	addi	a5,a5,1
20400232:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:47 (discriminator 4)
20400234:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:48 (discriminator 4)
    len = (cipher) ? len + 4 : len;
20400238:	fd442783          	lw	a5,-44(s0)
2040023c:	c789                	beqz	a5,20400246 <printC+0x46>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:48 (discriminator 1)
2040023e:	fe842783          	lw	a5,-24(s0)
20400242:	0791                	addi	a5,a5,4
20400244:	a019                	j	2040024a <printC+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:48 (discriminator 2)
20400246:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:48 (discriminator 4)
2040024a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:49 (discriminator 4)
    for (int i = 0; i < len; i++) {
2040024e:	fe042623          	sw	zero,-20(s0)
20400252:	a881                	j	204002a2 <printC+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:50
        if (i % 2 == 0) {
20400254:	fec42783          	lw	a5,-20(s0)
20400258:	8b85                	andi	a5,a5,1
2040025a:	e781                	bnez	a5,20400262 <printC+0x62>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:51
            printf("\n");
2040025c:	4529                	li	a0,10
2040025e:	61d000ef          	jal	ra,2040107a <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:53
        }
        printf("%08x ", arr[i], i);
20400262:	fec42783          	lw	a5,-20(s0)
20400266:	078a                	slli	a5,a5,0x2
20400268:	fdc42703          	lw	a4,-36(s0)
2040026c:	97ba                	add	a5,a5,a4
2040026e:	439c                	lw	a5,0(a5)
20400270:	fec42603          	lw	a2,-20(s0)
20400274:	85be                	mv	a1,a5
20400276:	204067b7          	lui	a5,0x20406
2040027a:	e0078513          	addi	a0,a5,-512 # 20405e00 <_exit+0x12>
2040027e:	5b9000ef          	jal	ra,20401036 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:54
        if (del) {
20400282:	fd042783          	lw	a5,-48(s0)
20400286:	cb89                	beqz	a5,20400298 <printC+0x98>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:55
            arr[i] = 0;
20400288:	fec42783          	lw	a5,-20(s0)
2040028c:	078a                	slli	a5,a5,0x2
2040028e:	fdc42703          	lw	a4,-36(s0)
20400292:	97ba                	add	a5,a5,a4
20400294:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:49 (discriminator 2)
    for (int i = 0; i < len; i++) {
20400298:	fec42783          	lw	a5,-20(s0)
2040029c:	0785                	addi	a5,a5,1
2040029e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:49 (discriminator 1)
204002a2:	fec42703          	lw	a4,-20(s0)
204002a6:	fe842783          	lw	a5,-24(s0)
204002aa:	faf745e3          	blt	a4,a5,20400254 <printC+0x54>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:58
        }
    }
    printf("\n");
204002ae:	4529                	li	a0,10
204002b0:	5cb000ef          	jal	ra,2040107a <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:59
}
204002b4:	0001                	nop
204002b6:	50b2                	lw	ra,44(sp)
204002b8:	5422                	lw	s0,40(sp)
204002ba:	6145                	addi	sp,sp,48
204002bc:	8082                	ret

204002be <AEAD_DEC>:
AEAD_DEC():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:108
}

u32 AEAD_DEC(u32 *ad_addr, u32 ad_len,
             u32 *c_addr, u32 c_len,
             u32 *d_addr, u32 *nonce_addr,
             u32 *key_addr, u32 *tag_addr) {
204002be:	7139                	addi	sp,sp,-64
204002c0:	de06                	sw	ra,60(sp)
204002c2:	dc22                	sw	s0,56(sp)
204002c4:	0080                	addi	s0,sp,64
204002c6:	fca42e23          	sw	a0,-36(s0)
204002ca:	fcb42c23          	sw	a1,-40(s0)
204002ce:	fcc42a23          	sw	a2,-44(s0)
204002d2:	fcd42823          	sw	a3,-48(s0)
204002d6:	fce42623          	sw	a4,-52(s0)
204002da:	fcf42423          	sw	a5,-56(s0)
204002de:	fd042223          	sw	a6,-60(s0)
204002e2:	fd142023          	sw	a7,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:109
    u32 rd = 0;
204002e6:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:111
    // printf("Init DEC\n");
    asm volatile("fence");
204002ea:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:112
    ROCC_INSTRUCTION_DS(0, rd, nonce_addr, Enc_Set_Nonce);
204002ee:	fc842783          	lw	a5,-56(s0)
204002f2:	85be                	mv	a1,a5
204002f4:	2805e50b          	0x2805e50b
204002f8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:113
    asm volatile("fence":: : "memory");
204002fc:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:116
    //printf("Set Nonce finish : %08x \n", rd);

    asm volatile("fence");
20400300:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:117
    ROCC_INSTRUCTION_DS(0, rd, tag_addr, Dec_Load_Tag);
20400304:	fc042783          	lw	a5,-64(s0)
20400308:	85be                	mv	a1,a5
2040030a:	2e05e50b          	0x2e05e50b
2040030e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:118
    asm volatile("fence":: : "memory");
20400312:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:121
    //printf("Load Tag finish : %08x \n", rd);

    asm volatile("fence");
20400316:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:122
    ROCC_INSTRUCTION_DS(0, rd, key_addr, Enc_Set_Key);
2040031a:	fc442783          	lw	a5,-60(s0)
2040031e:	85be                	mv	a1,a5
20400320:	2a05e50b          	0x2a05e50b
20400324:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:123
    asm volatile("fence":: : "memory");
20400328:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:126
    //printf("Set Key  finish : %07x \n", rd);

    asm volatile("fence");
2040032c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:127
    ROCC_INSTRUCTION_DSS(0, rd, c_addr, c_len, Enc_Set_P);
20400330:	fd442783          	lw	a5,-44(s0)
20400334:	85be                	mv	a1,a5
20400336:	fd042603          	lw	a2,-48(s0)
2040033a:	22c5f50b          	0x22c5f50b
2040033e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:128
    asm volatile("fence":: : "memory");
20400342:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:131
    //printf("Set Plain text finish length : %08x \n", rd);

    asm volatile("fence");
20400346:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:132
    ROCC_INSTRUCTION_DSS(0, rd, ad_addr, ad_len, Enc_Set_AD);
2040034a:	fdc42783          	lw	a5,-36(s0)
2040034e:	85be                	mv	a1,a5
20400350:	fd842603          	lw	a2,-40(s0)
20400354:	24c5f50b          	0x24c5f50b
20400358:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:133
    asm volatile("fence":: : "memory");
2040035c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:136
    //printf("Set Associated Data finish length: %08x \n", rd);

    asm volatile("fence");
20400360:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:137
    ROCC_INSTRUCTION_DS(0, rd, d_addr, Enc_Set_C_Tag);
20400364:	fcc42783          	lw	a5,-52(s0)
20400368:	85be                	mv	a1,a5
2040036a:	2605e50b          	0x2605e50b
2040036e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:138
    asm volatile("fence":: : "memory");
20400372:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:141
    //printf("Set Dec addr: %08x \n", rd);

    asm volatile("fence");
20400376:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:142
    ROCC_INSTRUCTION_DS(0, rd, rd, Dec_Init);
2040037a:	fec42583          	lw	a1,-20(s0)
2040037e:	3005e50b          	0x3005e50b
20400382:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:143
    asm volatile("fence":: : "memory");
20400386:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:144
    printf("Finish AEAD Dec %08x \n", rd);
2040038a:	fec42583          	lw	a1,-20(s0)
2040038e:	204067b7          	lui	a5,0x20406
20400392:	e0878513          	addi	a0,a5,-504 # 20405e08 <_exit+0x1a>
20400396:	4a1000ef          	jal	ra,20401036 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:145
    return rd;
2040039a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:146
}
2040039e:	853e                	mv	a0,a5
204003a0:	50f2                	lw	ra,60(sp)
204003a2:	5462                	lw	s0,56(sp)
204003a4:	6121                	addi	sp,sp,64
204003a6:	8082                	ret

204003a8 <ROUND>:
ROUND():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:47
    }
    return res;

}

static inline void ROUND(ascon_state_t *s, u32 C) {
204003a8:	711d                	addi	sp,sp,-96
204003aa:	cea2                	sw	s0,92(sp)
204003ac:	1080                	addi	s0,sp,96
204003ae:	faa42623          	sw	a0,-84(s0)
204003b2:	fab42423          	sw	a1,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:50
    ascon_state_t t;
    // addition of round constant
    s->xl[2] ^=C;
204003b6:	fac42783          	lw	a5,-84(s0)
204003ba:	4fd8                	lw	a4,28(a5)
204003bc:	fa842783          	lw	a5,-88(s0)
204003c0:	8f3d                	xor	a4,a4,a5
204003c2:	fac42783          	lw	a5,-84(s0)
204003c6:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:54
    // printstate(" round constant", s);
    // substitution layer

    s->xh[0] ^= s->xh[4];
204003c8:	fac42783          	lw	a5,-84(s0)
204003cc:	4398                	lw	a4,0(a5)
204003ce:	fac42783          	lw	a5,-84(s0)
204003d2:	4b9c                	lw	a5,16(a5)
204003d4:	8f3d                	xor	a4,a4,a5
204003d6:	fac42783          	lw	a5,-84(s0)
204003da:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:55
    s->xl[0] ^= s->xl[4];
204003dc:	fac42783          	lw	a5,-84(s0)
204003e0:	4bd8                	lw	a4,20(a5)
204003e2:	fac42783          	lw	a5,-84(s0)
204003e6:	53dc                	lw	a5,36(a5)
204003e8:	8f3d                	xor	a4,a4,a5
204003ea:	fac42783          	lw	a5,-84(s0)
204003ee:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:57

    s->xh[4] ^= s->xh[3];
204003f0:	fac42783          	lw	a5,-84(s0)
204003f4:	4b98                	lw	a4,16(a5)
204003f6:	fac42783          	lw	a5,-84(s0)
204003fa:	47dc                	lw	a5,12(a5)
204003fc:	8f3d                	xor	a4,a4,a5
204003fe:	fac42783          	lw	a5,-84(s0)
20400402:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:58
    s->xl[4] ^= s->xl[3];
20400404:	fac42783          	lw	a5,-84(s0)
20400408:	53d8                	lw	a4,36(a5)
2040040a:	fac42783          	lw	a5,-84(s0)
2040040e:	539c                	lw	a5,32(a5)
20400410:	8f3d                	xor	a4,a4,a5
20400412:	fac42783          	lw	a5,-84(s0)
20400416:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:60

    s->xh[2] ^= s->xh[1];
20400418:	fac42783          	lw	a5,-84(s0)
2040041c:	4798                	lw	a4,8(a5)
2040041e:	fac42783          	lw	a5,-84(s0)
20400422:	43dc                	lw	a5,4(a5)
20400424:	8f3d                	xor	a4,a4,a5
20400426:	fac42783          	lw	a5,-84(s0)
2040042a:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:61
    s->xl[2] ^= s->xl[1];
2040042c:	fac42783          	lw	a5,-84(s0)
20400430:	4fd8                	lw	a4,28(a5)
20400432:	fac42783          	lw	a5,-84(s0)
20400436:	4f9c                	lw	a5,24(a5)
20400438:	8f3d                	xor	a4,a4,a5
2040043a:	fac42783          	lw	a5,-84(s0)
2040043e:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:63
    // start of keccak s-box
    t.xh[0] = s->xh[0] ^ (~s->xh[1] & s->xh[2]);
20400440:	fac42783          	lw	a5,-84(s0)
20400444:	4398                	lw	a4,0(a5)
20400446:	fac42783          	lw	a5,-84(s0)
2040044a:	43dc                	lw	a5,4(a5)
2040044c:	fff7c693          	not	a3,a5
20400450:	fac42783          	lw	a5,-84(s0)
20400454:	479c                	lw	a5,8(a5)
20400456:	8ff5                	and	a5,a5,a3
20400458:	8fb9                	xor	a5,a5,a4
2040045a:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:64
    t.xl[0] = s->xl[0] ^ (~s->xl[1] & s->xl[2]);
2040045e:	fac42783          	lw	a5,-84(s0)
20400462:	4bd8                	lw	a4,20(a5)
20400464:	fac42783          	lw	a5,-84(s0)
20400468:	4f9c                	lw	a5,24(a5)
2040046a:	fff7c693          	not	a3,a5
2040046e:	fac42783          	lw	a5,-84(s0)
20400472:	4fdc                	lw	a5,28(a5)
20400474:	8ff5                	and	a5,a5,a3
20400476:	8fb9                	xor	a5,a5,a4
20400478:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:66

    t.xh[1] = s->xh[1] ^ (~s->xh[2] & s->xh[3]);
2040047c:	fac42783          	lw	a5,-84(s0)
20400480:	43d8                	lw	a4,4(a5)
20400482:	fac42783          	lw	a5,-84(s0)
20400486:	479c                	lw	a5,8(a5)
20400488:	fff7c693          	not	a3,a5
2040048c:	fac42783          	lw	a5,-84(s0)
20400490:	47dc                	lw	a5,12(a5)
20400492:	8ff5                	and	a5,a5,a3
20400494:	8fb9                	xor	a5,a5,a4
20400496:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:67
    t.xl[1] = s->xl[1] ^ (~s->xl[2] & s->xl[3]);
2040049a:	fac42783          	lw	a5,-84(s0)
2040049e:	4f98                	lw	a4,24(a5)
204004a0:	fac42783          	lw	a5,-84(s0)
204004a4:	4fdc                	lw	a5,28(a5)
204004a6:	fff7c693          	not	a3,a5
204004aa:	fac42783          	lw	a5,-84(s0)
204004ae:	539c                	lw	a5,32(a5)
204004b0:	8ff5                	and	a5,a5,a3
204004b2:	8fb9                	xor	a5,a5,a4
204004b4:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:69

    t.xh[2] = s->xh[2] ^ (~s->xh[3] & s->xh[4]);
204004b8:	fac42783          	lw	a5,-84(s0)
204004bc:	4798                	lw	a4,8(a5)
204004be:	fac42783          	lw	a5,-84(s0)
204004c2:	47dc                	lw	a5,12(a5)
204004c4:	fff7c693          	not	a3,a5
204004c8:	fac42783          	lw	a5,-84(s0)
204004cc:	4b9c                	lw	a5,16(a5)
204004ce:	8ff5                	and	a5,a5,a3
204004d0:	8fb9                	xor	a5,a5,a4
204004d2:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:70
    t.xl[2] = s->xl[2] ^ (~s->xl[3] & s->xl[4]);
204004d6:	fac42783          	lw	a5,-84(s0)
204004da:	4fd8                	lw	a4,28(a5)
204004dc:	fac42783          	lw	a5,-84(s0)
204004e0:	539c                	lw	a5,32(a5)
204004e2:	fff7c693          	not	a3,a5
204004e6:	fac42783          	lw	a5,-84(s0)
204004ea:	53dc                	lw	a5,36(a5)
204004ec:	8ff5                	and	a5,a5,a3
204004ee:	8fb9                	xor	a5,a5,a4
204004f0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:72

    t.xh[3] = s->xh[3] ^ (~s->xh[4] & s->xh[0]);
204004f4:	fac42783          	lw	a5,-84(s0)
204004f8:	47d8                	lw	a4,12(a5)
204004fa:	fac42783          	lw	a5,-84(s0)
204004fe:	4b9c                	lw	a5,16(a5)
20400500:	fff7c693          	not	a3,a5
20400504:	fac42783          	lw	a5,-84(s0)
20400508:	439c                	lw	a5,0(a5)
2040050a:	8ff5                	and	a5,a5,a3
2040050c:	8fb9                	xor	a5,a5,a4
2040050e:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:73
    t.xl[3] = s->xl[3] ^ (~s->xl[4] & s->xl[0]);
20400512:	fac42783          	lw	a5,-84(s0)
20400516:	5398                	lw	a4,32(a5)
20400518:	fac42783          	lw	a5,-84(s0)
2040051c:	53dc                	lw	a5,36(a5)
2040051e:	fff7c693          	not	a3,a5
20400522:	fac42783          	lw	a5,-84(s0)
20400526:	4bdc                	lw	a5,20(a5)
20400528:	8ff5                	and	a5,a5,a3
2040052a:	8fb9                	xor	a5,a5,a4
2040052c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:75

    t.xh[4] = s->xh[4] ^ (~s->xh[0] & s->xh[1]);
20400530:	fac42783          	lw	a5,-84(s0)
20400534:	4b98                	lw	a4,16(a5)
20400536:	fac42783          	lw	a5,-84(s0)
2040053a:	439c                	lw	a5,0(a5)
2040053c:	fff7c693          	not	a3,a5
20400540:	fac42783          	lw	a5,-84(s0)
20400544:	43dc                	lw	a5,4(a5)
20400546:	8ff5                	and	a5,a5,a3
20400548:	8fb9                	xor	a5,a5,a4
2040054a:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:76
    t.xl[4] = s->xl[4] ^ (~s->xl[0] & s->xl[1]);
2040054e:	fac42783          	lw	a5,-84(s0)
20400552:	53d8                	lw	a4,36(a5)
20400554:	fac42783          	lw	a5,-84(s0)
20400558:	4bdc                	lw	a5,20(a5)
2040055a:	fff7c693          	not	a3,a5
2040055e:	fac42783          	lw	a5,-84(s0)
20400562:	4f9c                	lw	a5,24(a5)
20400564:	8ff5                	and	a5,a5,a3
20400566:	8fb9                	xor	a5,a5,a4
20400568:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:78
    // end of keccak s-box
    t.xh[1] ^= t.xh[0];
2040056c:	fcc42703          	lw	a4,-52(s0)
20400570:	fc842783          	lw	a5,-56(s0)
20400574:	8fb9                	xor	a5,a5,a4
20400576:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:79
    t.xh[0] ^= t.xh[4];
2040057a:	fc842703          	lw	a4,-56(s0)
2040057e:	fd842783          	lw	a5,-40(s0)
20400582:	8fb9                	xor	a5,a5,a4
20400584:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:80
    t.xh[3] ^= t.xh[2];
20400588:	fd442703          	lw	a4,-44(s0)
2040058c:	fd042783          	lw	a5,-48(s0)
20400590:	8fb9                	xor	a5,a5,a4
20400592:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:81
    t.xh[2] = ~t.xh[2];
20400596:	fd042783          	lw	a5,-48(s0)
2040059a:	fff7c793          	not	a5,a5
2040059e:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:82
    t.xl[1] ^= t.xl[0];
204005a2:	fe042703          	lw	a4,-32(s0)
204005a6:	fdc42783          	lw	a5,-36(s0)
204005aa:	8fb9                	xor	a5,a5,a4
204005ac:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:83
    t.xl[0] ^= t.xl[4];
204005b0:	fdc42703          	lw	a4,-36(s0)
204005b4:	fec42783          	lw	a5,-20(s0)
204005b8:	8fb9                	xor	a5,a5,a4
204005ba:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:84
    t.xl[3] ^= t.xl[2];
204005be:	fe842703          	lw	a4,-24(s0)
204005c2:	fe442783          	lw	a5,-28(s0)
204005c6:	8fb9                	xor	a5,a5,a4
204005c8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:85
    t.xl[2] = ~t.xl[2];
204005cc:	fe442783          	lw	a5,-28(s0)
204005d0:	fff7c793          	not	a5,a5
204005d4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:91
    // printstate(" substitution layer", &t);
    u64  ror1;
    u64  ror2;
    //linear diffusion layer

    s->xh[0] = t.xh[0] ^ RORH(19,t.xh[0],t.xl[0]) ^ RORH(28,t.xh[0], t.xl[0]);
204005d8:	fc842703          	lw	a4,-56(s0)
204005dc:	fdc42783          	lw	a5,-36(s0)
204005e0:	00d79693          	slli	a3,a5,0xd
204005e4:	fc842783          	lw	a5,-56(s0)
204005e8:	83cd                	srli	a5,a5,0x13
204005ea:	8fd5                	or	a5,a5,a3
204005ec:	8f3d                	xor	a4,a4,a5
204005ee:	fdc42783          	lw	a5,-36(s0)
204005f2:	00479693          	slli	a3,a5,0x4
204005f6:	fc842783          	lw	a5,-56(s0)
204005fa:	83f1                	srli	a5,a5,0x1c
204005fc:	8fd5                	or	a5,a5,a3
204005fe:	8f3d                	xor	a4,a4,a5
20400600:	fac42783          	lw	a5,-84(s0)
20400604:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:92
    s->xl[0] = t.xl[0] ^ RORL(19,t.xh[0],t.xl[0]) ^ RORL(28,t.xh[0], t.xl[0]);
20400606:	fdc42703          	lw	a4,-36(s0)
2040060a:	fc842783          	lw	a5,-56(s0)
2040060e:	00d79693          	slli	a3,a5,0xd
20400612:	fdc42783          	lw	a5,-36(s0)
20400616:	83cd                	srli	a5,a5,0x13
20400618:	8fd5                	or	a5,a5,a3
2040061a:	8f3d                	xor	a4,a4,a5
2040061c:	fc842783          	lw	a5,-56(s0)
20400620:	00479693          	slli	a3,a5,0x4
20400624:	fdc42783          	lw	a5,-36(s0)
20400628:	83f1                	srli	a5,a5,0x1c
2040062a:	8fd5                	or	a5,a5,a3
2040062c:	8f3d                	xor	a4,a4,a5
2040062e:	fac42783          	lw	a5,-84(s0)
20400632:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:94

    s->xh[1] = t.xh[1] ^ RORH(61,t.xh[1],t.xl[1]) ^ RORH(39,t.xh[1], t.xl[1]);
20400634:	fcc42703          	lw	a4,-52(s0)
20400638:	fcc42783          	lw	a5,-52(s0)
2040063c:	00379693          	slli	a3,a5,0x3
20400640:	fe042783          	lw	a5,-32(s0)
20400644:	83f5                	srli	a5,a5,0x1d
20400646:	8fd5                	or	a5,a5,a3
20400648:	8f3d                	xor	a4,a4,a5
2040064a:	fcc42783          	lw	a5,-52(s0)
2040064e:	01979693          	slli	a3,a5,0x19
20400652:	fe042783          	lw	a5,-32(s0)
20400656:	839d                	srli	a5,a5,0x7
20400658:	8fd5                	or	a5,a5,a3
2040065a:	8f3d                	xor	a4,a4,a5
2040065c:	fac42783          	lw	a5,-84(s0)
20400660:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:95
    s->xl[1] = t.xl[1] ^ RORL(61,t.xh[1],t.xl[1]) ^ RORL(39,t.xh[1], t.xl[1]);
20400662:	fe042703          	lw	a4,-32(s0)
20400666:	fe042783          	lw	a5,-32(s0)
2040066a:	00379693          	slli	a3,a5,0x3
2040066e:	fcc42783          	lw	a5,-52(s0)
20400672:	83f5                	srli	a5,a5,0x1d
20400674:	8fd5                	or	a5,a5,a3
20400676:	8f3d                	xor	a4,a4,a5
20400678:	fe042783          	lw	a5,-32(s0)
2040067c:	01979693          	slli	a3,a5,0x19
20400680:	fcc42783          	lw	a5,-52(s0)
20400684:	839d                	srli	a5,a5,0x7
20400686:	8fd5                	or	a5,a5,a3
20400688:	8f3d                	xor	a4,a4,a5
2040068a:	fac42783          	lw	a5,-84(s0)
2040068e:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:97

    s->xh[2] = t.xh[2] ^ RORH(1,t.xh[2],t.xl[2]) ^ RORH(6,t.xh[2], t.xl[2]);
20400690:	fd042703          	lw	a4,-48(s0)
20400694:	fe442783          	lw	a5,-28(s0)
20400698:	01f79693          	slli	a3,a5,0x1f
2040069c:	fd042783          	lw	a5,-48(s0)
204006a0:	8385                	srli	a5,a5,0x1
204006a2:	8fd5                	or	a5,a5,a3
204006a4:	8f3d                	xor	a4,a4,a5
204006a6:	fe442783          	lw	a5,-28(s0)
204006aa:	01a79693          	slli	a3,a5,0x1a
204006ae:	fd042783          	lw	a5,-48(s0)
204006b2:	8399                	srli	a5,a5,0x6
204006b4:	8fd5                	or	a5,a5,a3
204006b6:	8f3d                	xor	a4,a4,a5
204006b8:	fac42783          	lw	a5,-84(s0)
204006bc:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:98
    s->xl[2] = t.xl[2] ^ RORL(1,t.xh[2],t.xl[2]) ^ RORL(6,t.xh[2], t.xl[2]);
204006be:	fe442703          	lw	a4,-28(s0)
204006c2:	fd042783          	lw	a5,-48(s0)
204006c6:	01f79693          	slli	a3,a5,0x1f
204006ca:	fe442783          	lw	a5,-28(s0)
204006ce:	8385                	srli	a5,a5,0x1
204006d0:	8fd5                	or	a5,a5,a3
204006d2:	8f3d                	xor	a4,a4,a5
204006d4:	fd042783          	lw	a5,-48(s0)
204006d8:	01a79693          	slli	a3,a5,0x1a
204006dc:	fe442783          	lw	a5,-28(s0)
204006e0:	8399                	srli	a5,a5,0x6
204006e2:	8fd5                	or	a5,a5,a3
204006e4:	8f3d                	xor	a4,a4,a5
204006e6:	fac42783          	lw	a5,-84(s0)
204006ea:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:100

    s->xh[3] = t.xh[3] ^ RORH(10,t.xh[3],t.xl[3]) ^ RORH(17,t.xh[3], t.xl[3]);
204006ec:	fd442703          	lw	a4,-44(s0)
204006f0:	fe842783          	lw	a5,-24(s0)
204006f4:	01679693          	slli	a3,a5,0x16
204006f8:	fd442783          	lw	a5,-44(s0)
204006fc:	83a9                	srli	a5,a5,0xa
204006fe:	8fd5                	or	a5,a5,a3
20400700:	8f3d                	xor	a4,a4,a5
20400702:	fe842783          	lw	a5,-24(s0)
20400706:	00f79693          	slli	a3,a5,0xf
2040070a:	fd442783          	lw	a5,-44(s0)
2040070e:	83c5                	srli	a5,a5,0x11
20400710:	8fd5                	or	a5,a5,a3
20400712:	8f3d                	xor	a4,a4,a5
20400714:	fac42783          	lw	a5,-84(s0)
20400718:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:101
    s->xl[3] = t.xl[3] ^ RORL(10,t.xh[3],t.xl[3]) ^ RORL(17,t.xh[3], t.xl[3]);
2040071a:	fe842703          	lw	a4,-24(s0)
2040071e:	fd442783          	lw	a5,-44(s0)
20400722:	01679693          	slli	a3,a5,0x16
20400726:	fe842783          	lw	a5,-24(s0)
2040072a:	83a9                	srli	a5,a5,0xa
2040072c:	8fd5                	or	a5,a5,a3
2040072e:	8f3d                	xor	a4,a4,a5
20400730:	fd442783          	lw	a5,-44(s0)
20400734:	00f79693          	slli	a3,a5,0xf
20400738:	fe842783          	lw	a5,-24(s0)
2040073c:	83c5                	srli	a5,a5,0x11
2040073e:	8fd5                	or	a5,a5,a3
20400740:	8f3d                	xor	a4,a4,a5
20400742:	fac42783          	lw	a5,-84(s0)
20400746:	d398                	sw	a4,32(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:103

    s->xh[4] = t.xh[4] ^ RORH(7,t.xh[4],t.xl[4]) ^ RORH(41,t.xh[4], t.xl[4]);
20400748:	fd842703          	lw	a4,-40(s0)
2040074c:	fec42783          	lw	a5,-20(s0)
20400750:	01979693          	slli	a3,a5,0x19
20400754:	fd842783          	lw	a5,-40(s0)
20400758:	839d                	srli	a5,a5,0x7
2040075a:	8fd5                	or	a5,a5,a3
2040075c:	8f3d                	xor	a4,a4,a5
2040075e:	fd842783          	lw	a5,-40(s0)
20400762:	01779693          	slli	a3,a5,0x17
20400766:	fec42783          	lw	a5,-20(s0)
2040076a:	83a5                	srli	a5,a5,0x9
2040076c:	8fd5                	or	a5,a5,a3
2040076e:	8f3d                	xor	a4,a4,a5
20400770:	fac42783          	lw	a5,-84(s0)
20400774:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:104
    s->xl[4] = t.xl[4] ^ RORL(7,t.xh[4],t.xl[4]) ^ RORL(41,t.xh[4], t.xl[4]);
20400776:	fec42703          	lw	a4,-20(s0)
2040077a:	fd842783          	lw	a5,-40(s0)
2040077e:	01979693          	slli	a3,a5,0x19
20400782:	fec42783          	lw	a5,-20(s0)
20400786:	839d                	srli	a5,a5,0x7
20400788:	8fd5                	or	a5,a5,a3
2040078a:	8f3d                	xor	a4,a4,a5
2040078c:	fec42783          	lw	a5,-20(s0)
20400790:	01779693          	slli	a3,a5,0x17
20400794:	fd842783          	lw	a5,-40(s0)
20400798:	83a5                	srli	a5,a5,0x9
2040079a:	8fd5                	or	a5,a5,a3
2040079c:	8f3d                	xor	a4,a4,a5
2040079e:	fac42783          	lw	a5,-84(s0)
204007a2:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:107

    //printstate(" round output", s);
}
204007a4:	0001                	nop
204007a6:	4476                	lw	s0,92(sp)
204007a8:	6125                	addi	sp,sp,96
204007aa:	8082                	ret

204007ac <P12>:
P12():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:110


static inline void P12(ascon_state_t* s) {
204007ac:	1101                	addi	sp,sp,-32
204007ae:	ce06                	sw	ra,28(sp)
204007b0:	cc22                	sw	s0,24(sp)
204007b2:	1000                	addi	s0,sp,32
204007b4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:111
  ROUND(s, 0xf0);
204007b8:	0f000593          	li	a1,240
204007bc:	fec42503          	lw	a0,-20(s0)
204007c0:	36e5                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:112
  ROUND(s, 0xe1);
204007c2:	0e100593          	li	a1,225
204007c6:	fec42503          	lw	a0,-20(s0)
204007ca:	3ef9                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:113
  ROUND(s, 0xd2);
204007cc:	0d200593          	li	a1,210
204007d0:	fec42503          	lw	a0,-20(s0)
204007d4:	3ed1                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:114
  ROUND(s, 0xc3);
204007d6:	0c300593          	li	a1,195
204007da:	fec42503          	lw	a0,-20(s0)
204007de:	36e9                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:115
  ROUND(s, 0xb4);
204007e0:	0b400593          	li	a1,180
204007e4:	fec42503          	lw	a0,-20(s0)
204007e8:	36c1                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:116
  ROUND(s, 0xa5);
204007ea:	0a500593          	li	a1,165
204007ee:	fec42503          	lw	a0,-20(s0)
204007f2:	3e5d                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:117
  ROUND(s, 0x96);
204007f4:	09600593          	li	a1,150
204007f8:	fec42503          	lw	a0,-20(s0)
204007fc:	3675                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:118
  ROUND(s, 0x87);
204007fe:	08700593          	li	a1,135
20400802:	fec42503          	lw	a0,-20(s0)
20400806:	364d                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:119
  ROUND(s, 0x78);
20400808:	07800593          	li	a1,120
2040080c:	fec42503          	lw	a0,-20(s0)
20400810:	3e61                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:120
  ROUND(s, 0x69);
20400812:	06900593          	li	a1,105
20400816:	fec42503          	lw	a0,-20(s0)
2040081a:	3679                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:121
  ROUND(s, 0x5a);
2040081c:	05a00593          	li	a1,90
20400820:	fec42503          	lw	a0,-20(s0)
20400824:	3651                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:122
  ROUND(s, 0x4b);
20400826:	04b00593          	li	a1,75
2040082a:	fec42503          	lw	a0,-20(s0)
2040082e:	3ead                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:123
}
20400830:	0001                	nop
20400832:	40f2                	lw	ra,28(sp)
20400834:	4462                	lw	s0,24(sp)
20400836:	6105                	addi	sp,sp,32
20400838:	8082                	ret

2040083a <P6>:
P6():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:136
  ROUND(s, 0x69);
  ROUND(s, 0x5a);
  ROUND(s, 0x4b);
}

static inline void P6(ascon_state_t* s) {
2040083a:	1101                	addi	sp,sp,-32
2040083c:	ce06                	sw	ra,28(sp)
2040083e:	cc22                	sw	s0,24(sp)
20400840:	1000                	addi	s0,sp,32
20400842:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:137
  ROUND(s, 0x96);
20400846:	09600593          	li	a1,150
2040084a:	fec42503          	lw	a0,-20(s0)
2040084e:	3ea9                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:138
  ROUND(s, 0x87);
20400850:	08700593          	li	a1,135
20400854:	fec42503          	lw	a0,-20(s0)
20400858:	3e81                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:139
  ROUND(s, 0x78);
2040085a:	07800593          	li	a1,120
2040085e:	fec42503          	lw	a0,-20(s0)
20400862:	3699                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:140
  ROUND(s, 0x69);
20400864:	06900593          	li	a1,105
20400868:	fec42503          	lw	a0,-20(s0)
2040086c:	3e35                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:141
  ROUND(s, 0x5a);
2040086e:	05a00593          	li	a1,90
20400872:	fec42503          	lw	a0,-20(s0)
20400876:	3e0d                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:142
  ROUND(s, 0x4b);
20400878:	04b00593          	li	a1,75
2040087c:	fec42503          	lw	a0,-20(s0)
20400880:	3625                	jal	204003a8 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:143
}
20400882:	0001                	nop
20400884:	40f2                	lw	ra,28(sp)
20400886:	4462                	lw	s0,24(sp)
20400888:	6105                	addi	sp,sp,32
2040088a:	8082                	ret

2040088c <crypto_aead_decrypt>:
crypto_aead_decrypt():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:127
    c++;
    *c = s.xl[4];
    return 0;
}

int crypto_aead_decrypt(u32 *m, u32 *mlen, u32 *c, u32 clen, u32 *ad, u32 adlen, u32 *npub, u32 *k) {
2040088c:	7135                	addi	sp,sp,-160
2040088e:	cf06                	sw	ra,156(sp)
20400890:	cd22                	sw	s0,152(sp)
20400892:	1100                	addi	s0,sp,160
20400894:	f6a42e23          	sw	a0,-132(s0)
20400898:	f6b42c23          	sw	a1,-136(s0)
2040089c:	f6c42a23          	sw	a2,-140(s0)
204008a0:	f6d42823          	sw	a3,-144(s0)
204008a4:	f6e42623          	sw	a4,-148(s0)
204008a8:	f6f42423          	sw	a5,-152(s0)
204008ac:	f7042223          	sw	a6,-156(s0)
204008b0:	f7142023          	sw	a7,-160(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:129
    /* set plaintext size */
    *mlen = clen;
204008b4:	f7842783          	lw	a5,-136(s0)
204008b8:	f7042703          	lw	a4,-144(s0)
204008bc:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:132
    /* load key and nonce */
    u64 K0, K1, N0, N1;
    K0.xh = k[0];
204008be:	f6042783          	lw	a5,-160(s0)
204008c2:	439c                	lw	a5,0(a5)
204008c4:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:133
    K0.xl = k[1];
204008c8:	f6042783          	lw	a5,-160(s0)
204008cc:	43dc                	lw	a5,4(a5)
204008ce:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:134
    K1.xh = k[2];
204008d2:	f6042783          	lw	a5,-160(s0)
204008d6:	479c                	lw	a5,8(a5)
204008d8:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:135
    K1.xl = k[3];
204008dc:	f6042783          	lw	a5,-160(s0)
204008e0:	47dc                	lw	a5,12(a5)
204008e2:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:136
    N0.xh = npub[0];
204008e6:	f6442783          	lw	a5,-156(s0)
204008ea:	439c                	lw	a5,0(a5)
204008ec:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:137
    N0.xl = npub[1];
204008f0:	f6442783          	lw	a5,-156(s0)
204008f4:	43dc                	lw	a5,4(a5)
204008f6:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:138
    N1.xh = npub[2];
204008fa:	f6442783          	lw	a5,-156(s0)
204008fe:	479c                	lw	a5,8(a5)
20400900:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:139
    N1.xl = npub[3];
20400904:	f6442783          	lw	a5,-156(s0)
20400908:	47dc                	lw	a5,12(a5)
2040090a:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:143

    /* initialize */
    ascon_state_t s;
    s.xh[0] = A_128_IV_H;
2040090e:	804017b7          	lui	a5,0x80401
20400912:	c0678793          	addi	a5,a5,-1018 # 80400c06 <metal_segment_heap_target_end+0x3fd852>
20400916:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:144
    s.xl[0] = A_128_IV_L;
2040091a:	fa042823          	sw	zero,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:145
    s.xh[1] = K0.xh;
2040091e:	fdc42783          	lw	a5,-36(s0)
20400922:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:146
    s.xl[1] = K0.xl;
20400926:	fe042783          	lw	a5,-32(s0)
2040092a:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:147
    s.xh[2] = K1.xh;
2040092e:	fd442783          	lw	a5,-44(s0)
20400932:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:148
    s.xl[2] = K1.xl;
20400936:	fd842783          	lw	a5,-40(s0)
2040093a:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:149
    s.xh[3] = N0.xh;
2040093e:	fcc42783          	lw	a5,-52(s0)
20400942:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:150
    s.xl[3] = N0.xl;
20400946:	fd042783          	lw	a5,-48(s0)
2040094a:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:151
    s.xh[4] = N1.xh;
2040094e:	fc442783          	lw	a5,-60(s0)
20400952:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:152
    s.xl[4] = N1.xl;
20400956:	fc842783          	lw	a5,-56(s0)
2040095a:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:154
    //printstate("After init", &s, debug);
    P12(&s);
2040095e:	f9c40793          	addi	a5,s0,-100
20400962:	853e                	mv	a0,a5
20400964:	35a1                	jal	204007ac <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:156

    s.xh[3] ^= K0.xh;
20400966:	fa842703          	lw	a4,-88(s0)
2040096a:	fdc42783          	lw	a5,-36(s0)
2040096e:	8fb9                	xor	a5,a5,a4
20400970:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:157
    s.xl[3] ^= K0.xl;
20400974:	fbc42703          	lw	a4,-68(s0)
20400978:	fe042783          	lw	a5,-32(s0)
2040097c:	8fb9                	xor	a5,a5,a4
2040097e:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:158
    s.xh[4] ^= K1.xh;
20400982:	fac42703          	lw	a4,-84(s0)
20400986:	fd442783          	lw	a5,-44(s0)
2040098a:	8fb9                	xor	a5,a5,a4
2040098c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:159
    s.xl[4] ^= K1.xl;
20400990:	fc042703          	lw	a4,-64(s0)
20400994:	fd842783          	lw	a5,-40(s0)
20400998:	8fb9                	xor	a5,a5,a4
2040099a:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:162
    //printstate("Xor 2 key", &s, debug);

    if (adlen) {
2040099e:	f6842783          	lw	a5,-152(s0)
204009a2:	14078063          	beqz	a5,20400ae2 <crypto_aead_decrypt+0x256>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:163
        while (adlen >= 8) {
204009a6:	a0a1                	j	204009ee <crypto_aead_decrypt+0x162>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:164
            s.xh[0] ^= *ad;
204009a8:	f9c42703          	lw	a4,-100(s0)
204009ac:	f6c42783          	lw	a5,-148(s0)
204009b0:	439c                	lw	a5,0(a5)
204009b2:	8fb9                	xor	a5,a5,a4
204009b4:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:165
            ad++;
204009b8:	f6c42783          	lw	a5,-148(s0)
204009bc:	0791                	addi	a5,a5,4
204009be:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:166
            s.xl[0] ^= *ad;
204009c2:	fb042703          	lw	a4,-80(s0)
204009c6:	f6c42783          	lw	a5,-148(s0)
204009ca:	439c                	lw	a5,0(a5)
204009cc:	8fb9                	xor	a5,a5,a4
204009ce:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:167
            ad++;
204009d2:	f6c42783          	lw	a5,-148(s0)
204009d6:	0791                	addi	a5,a5,4
204009d8:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:168
            P6(&s);
204009dc:	f9c40793          	addi	a5,s0,-100
204009e0:	853e                	mv	a0,a5
204009e2:	3da1                	jal	2040083a <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:170
            //printstate("Absorb AD", &s, debug);
            adlen -= 8;
204009e4:	f6842783          	lw	a5,-152(s0)
204009e8:	17e1                	addi	a5,a5,-8
204009ea:	f6f42423          	sw	a5,-152(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:163
        while (adlen >= 8) {
204009ee:	f6842703          	lw	a4,-152(s0)
204009f2:	479d                	li	a5,7
204009f4:	fae7eae3          	bltu	a5,a4,204009a8 <crypto_aead_decrypt+0x11c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:172
        }
        s.xh[0] ^= TRUNH(adlen, *ad);
204009f8:	f9c42703          	lw	a4,-100(s0)
204009fc:	f6842683          	lw	a3,-152(s0)
20400a00:	4791                	li	a5,4
20400a02:	00d7f663          	bgeu	a5,a3,20400a0e <crypto_aead_decrypt+0x182>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:172 (discriminator 1)
20400a06:	f6c42783          	lw	a5,-148(s0)
20400a0a:	439c                	lw	a5,0(a5)
20400a0c:	a025                	j	20400a34 <crypto_aead_decrypt+0x1a8>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:172 (discriminator 2)
20400a0e:	f6842783          	lw	a5,-152(s0)
20400a12:	c385                	beqz	a5,20400a32 <crypto_aead_decrypt+0x1a6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:172 (discriminator 4)
20400a14:	f6c42783          	lw	a5,-148(s0)
20400a18:	4394                	lw	a3,0(a5)
20400a1a:	f6842603          	lw	a2,-152(s0)
20400a1e:	4781                	li	a5,0
20400a20:	8f91                	sub	a5,a5,a2
20400a22:	078e                	slli	a5,a5,0x3
20400a24:	02078793          	addi	a5,a5,32
20400a28:	567d                	li	a2,-1
20400a2a:	00f617b3          	sll	a5,a2,a5
20400a2e:	8ff5                	and	a5,a5,a3
20400a30:	a011                	j	20400a34 <crypto_aead_decrypt+0x1a8>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:172 (discriminator 5)
20400a32:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:172 (discriminator 8)
20400a34:	8fb9                	xor	a5,a5,a4
20400a36:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:173 (discriminator 8)
        ad++;
20400a3a:	f6c42783          	lw	a5,-148(s0)
20400a3e:	0791                	addi	a5,a5,4
20400a40:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:174 (discriminator 8)
        s.xl[0] ^= TRUNL(adlen, *ad);
20400a44:	fb042703          	lw	a4,-80(s0)
20400a48:	f6842683          	lw	a3,-152(s0)
20400a4c:	4791                	li	a5,4
20400a4e:	02d7f163          	bgeu	a5,a3,20400a70 <crypto_aead_decrypt+0x1e4>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:174 (discriminator 1)
20400a52:	f6c42783          	lw	a5,-148(s0)
20400a56:	4394                	lw	a3,0(a5)
20400a58:	f6842603          	lw	a2,-152(s0)
20400a5c:	4781                	li	a5,0
20400a5e:	8f91                	sub	a5,a5,a2
20400a60:	078e                	slli	a5,a5,0x3
20400a62:	04078793          	addi	a5,a5,64
20400a66:	567d                	li	a2,-1
20400a68:	00f617b3          	sll	a5,a2,a5
20400a6c:	8ff5                	and	a5,a5,a3
20400a6e:	a011                	j	20400a72 <crypto_aead_decrypt+0x1e6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:174 (discriminator 2)
20400a70:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:174 (discriminator 4)
20400a72:	8fb9                	xor	a5,a5,a4
20400a74:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:176 (discriminator 4)

        s.xh[0] ^= PADH(adlen);
20400a78:	f9c42703          	lw	a4,-100(s0)
20400a7c:	f6842683          	lw	a3,-152(s0)
20400a80:	478d                	li	a5,3
20400a82:	00d7ea63          	bltu	a5,a3,20400a96 <crypto_aead_decrypt+0x20a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:176 (discriminator 1)
20400a86:	f6842783          	lw	a5,-152(s0)
20400a8a:	078e                	slli	a5,a5,0x3
20400a8c:	800006b7          	lui	a3,0x80000
20400a90:	00f6d7b3          	srl	a5,a3,a5
20400a94:	a011                	j	20400a98 <crypto_aead_decrypt+0x20c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:176 (discriminator 2)
20400a96:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:176 (discriminator 4)
20400a98:	8fb9                	xor	a5,a5,a4
20400a9a:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:177 (discriminator 4)
        s.xl[0] ^= PADL(adlen);
20400a9e:	fb042703          	lw	a4,-80(s0)
20400aa2:	f6842683          	lw	a3,-152(s0)
20400aa6:	478d                	li	a5,3
20400aa8:	02d7f563          	bgeu	a5,a3,20400ad2 <crypto_aead_decrypt+0x246>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:177 (discriminator 1)
20400aac:	f6842683          	lw	a3,-152(s0)
20400ab0:	47a1                	li	a5,8
20400ab2:	00f68e63          	beq	a3,a5,20400ace <crypto_aead_decrypt+0x242>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:177 (discriminator 3)
20400ab6:	f6842683          	lw	a3,-152(s0)
20400aba:	200007b7          	lui	a5,0x20000
20400abe:	17f1                	addi	a5,a5,-4
20400ac0:	97b6                	add	a5,a5,a3
20400ac2:	078e                	slli	a5,a5,0x3
20400ac4:	800006b7          	lui	a3,0x80000
20400ac8:	00f6d7b3          	srl	a5,a3,a5
20400acc:	a021                	j	20400ad4 <crypto_aead_decrypt+0x248>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:177 (discriminator 4)
20400ace:	4781                	li	a5,0
20400ad0:	a011                	j	20400ad4 <crypto_aead_decrypt+0x248>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:177 (discriminator 2)
20400ad2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:177 (discriminator 8)
20400ad4:	8fb9                	xor	a5,a5,a4
20400ad6:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:179 (discriminator 8)
        //printstate("Padded AD", &s, debug);
        P6(&s);
20400ada:	f9c40793          	addi	a5,s0,-100
20400ade:	853e                	mv	a0,a5
20400ae0:	3ba9                	jal	2040083a <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:182
    }
    /* domain separation */
    s.xl[4] ^= 1;
20400ae2:	fc042783          	lw	a5,-64(s0)
20400ae6:	0017c793          	xori	a5,a5,1
20400aea:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:185
    //printstate("Domain Separation", &s, debug);
    u32 ch, cl;
    while (clen >= 8) {
20400aee:	a041                	j	20400b6e <crypto_aead_decrypt+0x2e2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:187
        // printf("clen %d\n", clen);
        ch = *c;
20400af0:	f7442783          	lw	a5,-140(s0)
20400af4:	439c                	lw	a5,0(a5)
20400af6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:188
        c++;
20400afa:	f7442783          	lw	a5,-140(s0)
20400afe:	0791                	addi	a5,a5,4
20400b00:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:189
        cl = *c;
20400b04:	f7442783          	lw	a5,-140(s0)
20400b08:	439c                	lw	a5,0(a5)
20400b0a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:190
        c++;
20400b0e:	f7442783          	lw	a5,-140(s0)
20400b12:	0791                	addi	a5,a5,4
20400b14:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:191
        *m = s.xh[0] ^ ch;
20400b18:	f9c42703          	lw	a4,-100(s0)
20400b1c:	fec42783          	lw	a5,-20(s0)
20400b20:	8f3d                	xor	a4,a4,a5
20400b22:	f7c42783          	lw	a5,-132(s0)
20400b26:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:192
        m++;
20400b28:	f7c42783          	lw	a5,-132(s0)
20400b2c:	0791                	addi	a5,a5,4
20400b2e:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:193
        *m = s.xl[0] ^ cl;
20400b32:	fb042703          	lw	a4,-80(s0)
20400b36:	fe842783          	lw	a5,-24(s0)
20400b3a:	8f3d                	xor	a4,a4,a5
20400b3c:	f7c42783          	lw	a5,-132(s0)
20400b40:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:194
        m++;
20400b42:	f7c42783          	lw	a5,-132(s0)
20400b46:	0791                	addi	a5,a5,4
20400b48:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:196

        s.xh[0] = ch;
20400b4c:	fec42783          	lw	a5,-20(s0)
20400b50:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:197
        s.xl[0] = cl;
20400b54:	fe842783          	lw	a5,-24(s0)
20400b58:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:198
        clen -= 8;
20400b5c:	f7042783          	lw	a5,-144(s0)
20400b60:	17e1                	addi	a5,a5,-8
20400b62:	f6f42823          	sw	a5,-144(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:200
        //printstate("Absorb M", &s, debug);
        P6(&s);
20400b66:	f9c40793          	addi	a5,s0,-100
20400b6a:	853e                	mv	a0,a5
20400b6c:	31f9                	jal	2040083a <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:185
    while (clen >= 8) {
20400b6e:	f7042703          	lw	a4,-144(s0)
20400b72:	479d                	li	a5,7
20400b74:	f6e7eee3          	bltu	a5,a4,20400af0 <crypto_aead_decrypt+0x264>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:203
    }
    /* final block*/
    ch = 0;
20400b78:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:204
    cl = 0;
20400b7c:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:205
    if (clen) {
20400b80:	f7042783          	lw	a5,-144(s0)
20400b84:	10078863          	beqz	a5,20400c94 <crypto_aead_decrypt+0x408>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:206
        ch = TRUNH(clen, *c);
20400b88:	f7042703          	lw	a4,-144(s0)
20400b8c:	4791                	li	a5,4
20400b8e:	00e7f663          	bgeu	a5,a4,20400b9a <crypto_aead_decrypt+0x30e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:206 (discriminator 1)
20400b92:	f7442783          	lw	a5,-140(s0)
20400b96:	439c                	lw	a5,0(a5)
20400b98:	a025                	j	20400bc0 <crypto_aead_decrypt+0x334>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:206 (discriminator 2)
20400b9a:	f7042783          	lw	a5,-144(s0)
20400b9e:	c385                	beqz	a5,20400bbe <crypto_aead_decrypt+0x332>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:206 (discriminator 4)
20400ba0:	f7442783          	lw	a5,-140(s0)
20400ba4:	4398                	lw	a4,0(a5)
20400ba6:	f7042683          	lw	a3,-144(s0)
20400baa:	4781                	li	a5,0
20400bac:	8f95                	sub	a5,a5,a3
20400bae:	078e                	slli	a5,a5,0x3
20400bb0:	02078793          	addi	a5,a5,32 # 20000020 <metal_segment_itim_target_end+0x18000020>
20400bb4:	56fd                	li	a3,-1
20400bb6:	00f697b3          	sll	a5,a3,a5
20400bba:	8ff9                	and	a5,a5,a4
20400bbc:	a011                	j	20400bc0 <crypto_aead_decrypt+0x334>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:206 (discriminator 5)
20400bbe:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:206 (discriminator 8)
20400bc0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:207 (discriminator 8)
        c++;
20400bc4:	f7442783          	lw	a5,-140(s0)
20400bc8:	0791                	addi	a5,a5,4
20400bca:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:208 (discriminator 8)
        cl = TRUNL(clen, *c);
20400bce:	f7042703          	lw	a4,-144(s0)
20400bd2:	4791                	li	a5,4
20400bd4:	02e7f163          	bgeu	a5,a4,20400bf6 <crypto_aead_decrypt+0x36a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:208 (discriminator 1)
20400bd8:	f7442783          	lw	a5,-140(s0)
20400bdc:	4398                	lw	a4,0(a5)
20400bde:	f7042683          	lw	a3,-144(s0)
20400be2:	4781                	li	a5,0
20400be4:	8f95                	sub	a5,a5,a3
20400be6:	078e                	slli	a5,a5,0x3
20400be8:	04078793          	addi	a5,a5,64
20400bec:	56fd                	li	a3,-1
20400bee:	00f697b3          	sll	a5,a3,a5
20400bf2:	8ff9                	and	a5,a5,a4
20400bf4:	a011                	j	20400bf8 <crypto_aead_decrypt+0x36c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:208 (discriminator 2)
20400bf6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:208 (discriminator 4)
20400bf8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:209 (discriminator 4)
        c++;
20400bfc:	f7442783          	lw	a5,-140(s0)
20400c00:	0791                	addi	a5,a5,4
20400c02:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:210 (discriminator 4)
        *m = TRUNH(clen, s.xh[0] ^ ch);
20400c06:	f7042703          	lw	a4,-144(s0)
20400c0a:	4791                	li	a5,4
20400c0c:	00e7f863          	bgeu	a5,a4,20400c1c <crypto_aead_decrypt+0x390>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:210 (discriminator 1)
20400c10:	f9c42703          	lw	a4,-100(s0)
20400c14:	fec42783          	lw	a5,-20(s0)
20400c18:	8fb9                	xor	a5,a5,a4
20400c1a:	a035                	j	20400c46 <crypto_aead_decrypt+0x3ba>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:210 (discriminator 2)
20400c1c:	f7042783          	lw	a5,-144(s0)
20400c20:	c395                	beqz	a5,20400c44 <crypto_aead_decrypt+0x3b8>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:210 (discriminator 4)
20400c22:	f9c42703          	lw	a4,-100(s0)
20400c26:	fec42783          	lw	a5,-20(s0)
20400c2a:	8f3d                	xor	a4,a4,a5
20400c2c:	f7042683          	lw	a3,-144(s0)
20400c30:	4781                	li	a5,0
20400c32:	8f95                	sub	a5,a5,a3
20400c34:	078e                	slli	a5,a5,0x3
20400c36:	02078793          	addi	a5,a5,32
20400c3a:	56fd                	li	a3,-1
20400c3c:	00f697b3          	sll	a5,a3,a5
20400c40:	8ff9                	and	a5,a5,a4
20400c42:	a011                	j	20400c46 <crypto_aead_decrypt+0x3ba>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:210 (discriminator 5)
20400c44:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:210 (discriminator 8)
20400c46:	f7c42703          	lw	a4,-132(s0)
20400c4a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:211 (discriminator 8)
        m++;
20400c4c:	f7c42783          	lw	a5,-132(s0)
20400c50:	0791                	addi	a5,a5,4
20400c52:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:212 (discriminator 8)
        *m = TRUNL(clen, s.xl[0] ^ cl);
20400c56:	f7042703          	lw	a4,-144(s0)
20400c5a:	4791                	li	a5,4
20400c5c:	02e7f363          	bgeu	a5,a4,20400c82 <crypto_aead_decrypt+0x3f6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:212 (discriminator 1)
20400c60:	fb042703          	lw	a4,-80(s0)
20400c64:	fe842783          	lw	a5,-24(s0)
20400c68:	8f3d                	xor	a4,a4,a5
20400c6a:	f7042683          	lw	a3,-144(s0)
20400c6e:	4781                	li	a5,0
20400c70:	8f95                	sub	a5,a5,a3
20400c72:	078e                	slli	a5,a5,0x3
20400c74:	04078793          	addi	a5,a5,64
20400c78:	56fd                	li	a3,-1
20400c7a:	00f697b3          	sll	a5,a3,a5
20400c7e:	8ff9                	and	a5,a5,a4
20400c80:	a011                	j	20400c84 <crypto_aead_decrypt+0x3f8>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:212 (discriminator 2)
20400c82:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:212 (discriminator 4)
20400c84:	f7c42703          	lw	a4,-132(s0)
20400c88:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:213 (discriminator 4)
        m++;
20400c8a:	f7c42783          	lw	a5,-132(s0)
20400c8e:	0791                	addi	a5,a5,4
20400c90:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:215
    }
    s.xh[0] = CLEARH(clen, s.xh[0]);
20400c94:	f7042703          	lw	a4,-144(s0)
20400c98:	4791                	li	a5,4
20400c9a:	02e7e863          	bltu	a5,a4,20400cca <crypto_aead_decrypt+0x43e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:215 (discriminator 1)
20400c9e:	f7042783          	lw	a5,-144(s0)
20400ca2:	e781                	bnez	a5,20400caa <crypto_aead_decrypt+0x41e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:215 (discriminator 3)
20400ca4:	f9c42783          	lw	a5,-100(s0)
20400ca8:	a015                	j	20400ccc <crypto_aead_decrypt+0x440>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:215 (discriminator 4)
20400caa:	f9c42703          	lw	a4,-100(s0)
20400cae:	f7042683          	lw	a3,-144(s0)
20400cb2:	4781                	li	a5,0
20400cb4:	8f95                	sub	a5,a5,a3
20400cb6:	078e                	slli	a5,a5,0x3
20400cb8:	02078793          	addi	a5,a5,32
20400cbc:	56fd                	li	a3,-1
20400cbe:	00f697b3          	sll	a5,a3,a5
20400cc2:	fff7c793          	not	a5,a5
20400cc6:	8ff9                	and	a5,a5,a4
20400cc8:	a011                	j	20400ccc <crypto_aead_decrypt+0x440>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:215 (discriminator 2)
20400cca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:215 (discriminator 8)
20400ccc:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:216 (discriminator 8)
    s.xl[0] = CLEARL(clen, s.xl[0]);
20400cd0:	f7042703          	lw	a4,-144(s0)
20400cd4:	4791                	li	a5,4
20400cd6:	02e7f263          	bgeu	a5,a4,20400cfa <crypto_aead_decrypt+0x46e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:216 (discriminator 1)
20400cda:	fb042703          	lw	a4,-80(s0)
20400cde:	f7042683          	lw	a3,-144(s0)
20400ce2:	4781                	li	a5,0
20400ce4:	8f95                	sub	a5,a5,a3
20400ce6:	078e                	slli	a5,a5,0x3
20400ce8:	04078793          	addi	a5,a5,64
20400cec:	56fd                	li	a3,-1
20400cee:	00f697b3          	sll	a5,a3,a5
20400cf2:	fff7c793          	not	a5,a5
20400cf6:	8ff9                	and	a5,a5,a4
20400cf8:	a019                	j	20400cfe <crypto_aead_decrypt+0x472>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:216 (discriminator 2)
20400cfa:	fb042783          	lw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:216 (discriminator 4)
20400cfe:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:218 (discriminator 4)
    //printstate("clear bytes", &s, debug);
    s.xh[0] |= ch;
20400d02:	f9c42703          	lw	a4,-100(s0)
20400d06:	fec42783          	lw	a5,-20(s0)
20400d0a:	8fd9                	or	a5,a5,a4
20400d0c:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:219 (discriminator 4)
    s.xl[0] |= cl;
20400d10:	fb042703          	lw	a4,-80(s0)
20400d14:	fe842783          	lw	a5,-24(s0)
20400d18:	8fd9                	or	a5,a5,a4
20400d1a:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:220 (discriminator 4)
    s.xh[0] ^= PADH(clen);
20400d1e:	f9c42703          	lw	a4,-100(s0)
20400d22:	f7042683          	lw	a3,-144(s0)
20400d26:	478d                	li	a5,3
20400d28:	00d7ea63          	bltu	a5,a3,20400d3c <crypto_aead_decrypt+0x4b0>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:220 (discriminator 1)
20400d2c:	f7042783          	lw	a5,-144(s0)
20400d30:	078e                	slli	a5,a5,0x3
20400d32:	800006b7          	lui	a3,0x80000
20400d36:	00f6d7b3          	srl	a5,a3,a5
20400d3a:	a011                	j	20400d3e <crypto_aead_decrypt+0x4b2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:220 (discriminator 2)
20400d3c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:220 (discriminator 4)
20400d3e:	8fb9                	xor	a5,a5,a4
20400d40:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:221 (discriminator 4)
    s.xl[0] ^= PADL(clen);
20400d44:	fb042703          	lw	a4,-80(s0)
20400d48:	f7042683          	lw	a3,-144(s0)
20400d4c:	478d                	li	a5,3
20400d4e:	02d7f563          	bgeu	a5,a3,20400d78 <crypto_aead_decrypt+0x4ec>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:221 (discriminator 1)
20400d52:	f7042683          	lw	a3,-144(s0)
20400d56:	47a1                	li	a5,8
20400d58:	00f68e63          	beq	a3,a5,20400d74 <crypto_aead_decrypt+0x4e8>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:221 (discriminator 3)
20400d5c:	f7042683          	lw	a3,-144(s0)
20400d60:	200007b7          	lui	a5,0x20000
20400d64:	17f1                	addi	a5,a5,-4
20400d66:	97b6                	add	a5,a5,a3
20400d68:	078e                	slli	a5,a5,0x3
20400d6a:	800006b7          	lui	a3,0x80000
20400d6e:	00f6d7b3          	srl	a5,a3,a5
20400d72:	a021                	j	20400d7a <crypto_aead_decrypt+0x4ee>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:221 (discriminator 4)
20400d74:	4781                	li	a5,0
20400d76:	a011                	j	20400d7a <crypto_aead_decrypt+0x4ee>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:221 (discriminator 2)
20400d78:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:221 (discriminator 8)
20400d7a:	8fb9                	xor	a5,a5,a4
20400d7c:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:224 (discriminator 8)
    //printstate("Pad M", &s, debug);
    /* Ending */
    s.xh[1] ^= K0.xh;
20400d80:	fa042703          	lw	a4,-96(s0)
20400d84:	fdc42783          	lw	a5,-36(s0)
20400d88:	8fb9                	xor	a5,a5,a4
20400d8a:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:225 (discriminator 8)
    s.xl[1] ^= K0.xl;
20400d8e:	fb442703          	lw	a4,-76(s0)
20400d92:	fe042783          	lw	a5,-32(s0)
20400d96:	8fb9                	xor	a5,a5,a4
20400d98:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:226 (discriminator 8)
    s.xh[2] ^= K1.xh;
20400d9c:	fa442703          	lw	a4,-92(s0)
20400da0:	fd442783          	lw	a5,-44(s0)
20400da4:	8fb9                	xor	a5,a5,a4
20400da6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:227 (discriminator 8)
    s.xl[2] ^= K1.xl;
20400daa:	fb842703          	lw	a4,-72(s0)
20400dae:	fd842783          	lw	a5,-40(s0)
20400db2:	8fb9                	xor	a5,a5,a4
20400db4:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:230 (discriminator 8)
    //printstate("Xor key 1", &s, debug);

    P12(&s);
20400db8:	f9c40793          	addi	a5,s0,-100
20400dbc:	853e                	mv	a0,a5
20400dbe:	32fd                	jal	204007ac <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:231 (discriminator 8)
    s.xh[3] ^= K0.xh;
20400dc0:	fa842703          	lw	a4,-88(s0)
20400dc4:	fdc42783          	lw	a5,-36(s0)
20400dc8:	8fb9                	xor	a5,a5,a4
20400dca:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:232 (discriminator 8)
    s.xl[3] ^= K0.xl;
20400dce:	fbc42703          	lw	a4,-68(s0)
20400dd2:	fe042783          	lw	a5,-32(s0)
20400dd6:	8fb9                	xor	a5,a5,a4
20400dd8:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:233 (discriminator 8)
    s.xh[4] ^= K1.xh;
20400ddc:	fac42703          	lw	a4,-84(s0)
20400de0:	fd442783          	lw	a5,-44(s0)
20400de4:	8fb9                	xor	a5,a5,a4
20400de6:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:234 (discriminator 8)
    s.xl[4] ^= K1.xl;
20400dea:	fc042703          	lw	a4,-64(s0)
20400dee:	fd842783          	lw	a5,-40(s0)
20400df2:	8fb9                	xor	a5,a5,a4
20400df4:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:239 (discriminator 8)
    //printstate("Xor key 2", &s, debug);

    /* TAG*/
    u32 Tag[4];
    Tag[0] = s.xh[3];
20400df8:	fa842783          	lw	a5,-88(s0)
20400dfc:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:240 (discriminator 8)
    Tag[1] = s.xl[3];
20400e00:	fbc42783          	lw	a5,-68(s0)
20400e04:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:241 (discriminator 8)
    Tag[2] = s.xh[4];
20400e08:	fac42783          	lw	a5,-84(s0)
20400e0c:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:242 (discriminator 8)
    Tag[3] = s.xl[4];
20400e10:	fc042783          	lw	a5,-64(s0)
20400e14:	f8f42c23          	sw	a5,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:243 (discriminator 8)
    int res = 0;
20400e18:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:248 (discriminator 8)
    /*for(int i = 0 ; i < 4; i ++){
        res |= c[i] ^ Tag[i];
        printf("%08x  %08x\n", c[i], Tag[i]);
    }*/
    return res;
20400e1c:	fe442783          	lw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:249 (discriminator 8)
}
20400e20:	853e                	mv	a0,a5
20400e22:	40fa                	lw	ra,156(sp)
20400e24:	446a                	lw	s0,152(sp)
20400e26:	610d                	addi	sp,sp,160
20400e28:	8082                	ret

20400e2a <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../RoCCcommon/csr.h:50

#define rdtime() read_csr(time)
// #define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

unsigned rdcycle() {
20400e2a:	1101                	addi	sp,sp,-32
20400e2c:	ce22                	sw	s0,28(sp)
20400e2e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../RoCCcommon/csr.h:51
  unsigned mcycle = 0;
20400e30:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../RoCCcommon/csr.h:53

  asm volatile ("csrr %0,mcycle"   : "=r" (mcycle)  );
20400e34:	b00027f3          	csrr	a5,mcycle
20400e38:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../RoCCcommon/csr.h:55

  return mcycle;
20400e3c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../RoCCcommon/csr.h:56
}
20400e40:	853e                	mv	a0,a5
20400e42:	4472                	lw	s0,28(sp)
20400e44:	6105                	addi	sp,sp,32
20400e46:	8082                	ret

20400e48 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:6
#include "../AsconHW/AEAD_HW.h"
#include "../Asconref/aead.h"
#include <stdio.h>
#include "../RoCCcommon/csr.h"

int main(void) {
20400e48:	7179                	addi	sp,sp,-48
20400e4a:	d606                	sw	ra,44(sp)
20400e4c:	d422                	sw	s0,40(sp)
20400e4e:	1800                	addi	s0,sp,48
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:7
    u32 plain_len = 32;
20400e50:	02000793          	li	a5,32
20400e54:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:8
    u32 asso_len = 32; /// CReo que asignaste a memoria
20400e58:	02000793          	li	a5,32
20400e5c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:9
    u32 clen = 0;
20400e60:	fc042823          	sw	zero,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:10
    u32 plain_len_int = plain_len / 8;
20400e64:	fe842783          	lw	a5,-24(s0)
20400e68:	838d                	srli	a5,a5,0x3
20400e6a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:11
    plain_len_int = (plain_len % 8 == 0) ? plain_len_int*2 : plain_len_int*2 +2;
20400e6e:	fe842783          	lw	a5,-24(s0)
20400e72:	8b9d                	andi	a5,a5,7
20400e74:	e789                	bnez	a5,20400e7e <main+0x36>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:11 (discriminator 1)
20400e76:	fe042783          	lw	a5,-32(s0)
20400e7a:	0786                	slli	a5,a5,0x1
20400e7c:	a029                	j	20400e86 <main+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:11 (discriminator 2)
20400e7e:	fe042783          	lw	a5,-32(s0)
20400e82:	0785                	addi	a5,a5,1
20400e84:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:11 (discriminator 4)
20400e86:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:26 (discriminator 4)
    static u32 Key[4] = {0x11111111, 0x22222222, 0x33333333, 0x44444445};

    static u32 *tag_addr;


    printf("Init Ascon Dec \n");
20400e8a:	204067b7          	lui	a5,0x20406
20400e8e:	e2c78513          	addi	a0,a5,-468 # 20405e2c <_exit+0x3e>
20400e92:	2e85                	jal	20401202 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:27 (discriminator 4)
    printf("Ad addr = %08x\n", asso_text);
20400e94:	800007b7          	lui	a5,0x80000
20400e98:	00078593          	mv	a1,a5
20400e9c:	204067b7          	lui	a5,0x20406
20400ea0:	e3c78513          	addi	a0,a5,-452 # 20405e3c <_exit+0x4e>
20400ea4:	2a49                	jal	20401036 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:28 (discriminator 4)
    printf("Pl addr = %08x\n", plain_text);
20400ea6:	800007b7          	lui	a5,0x80000
20400eaa:	7d078593          	addi	a1,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd41c>
20400eae:	204067b7          	lui	a5,0x20406
20400eb2:	e4c78513          	addi	a0,a5,-436 # 20405e4c <_exit+0x5e>
20400eb6:	2241                	jal	20401036 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:29 (discriminator 4)
    printf("Ct addr = %08x\n", cipher_text);
20400eb8:	800017b7          	lui	a5,0x80001
20400ebc:	73c78593          	addi	a1,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffe388>
20400ec0:	204067b7          	lui	a5,0x20406
20400ec4:	e5c78513          	addi	a0,a5,-420 # 20405e5c <_exit+0x6e>
20400ec8:	22bd                	jal	20401036 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:30 (discriminator 4)
    printf("Ke addr = %08x\n", Key);
20400eca:	800017b7          	lui	a5,0x80001
20400ece:	fa078593          	addi	a1,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdbec>
20400ed2:	204067b7          	lui	a5,0x20406
20400ed6:	e6c78513          	addi	a0,a5,-404 # 20405e6c <_exit+0x7e>
20400eda:	2ab1                	jal	20401036 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:31 (discriminator 4)
    printf("Np addr = %08x\n", Nonce);
20400edc:	800017b7          	lui	a5,0x80001
20400ee0:	fb078593          	addi	a1,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdbfc>
20400ee4:	204067b7          	lui	a5,0x20406
20400ee8:	e7c78513          	addi	a0,a5,-388 # 20405e7c <_exit+0x8e>
20400eec:	22a9                	jal	20401036 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:32 (discriminator 4)
    printf("hash addr = %08x\n", hash);
20400eee:	01418593          	addi	a1,gp,20 # 80001f1c <hash.2827>
20400ef2:	204067b7          	lui	a5,0x20406
20400ef6:	e8c78513          	addi	a0,a5,-372 # 20405e8c <_exit+0x9e>
20400efa:	2a35                	jal	20401036 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:34 (discriminator 4)
    unsigned start, end, HWcycles;
    int rd = 0;
20400efc:	fc042e23          	sw	zero,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:36 (discriminator 4)
    // RoCC
    write_csr(mstatus, MSTATUS_XS);
20400f00:	67e1                	lui	a5,0x18
20400f02:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:43 (discriminator 4)
    /*printf("Init Hash\n");
    HASH(plain_text,plain_len,hash);
    printf(" Finish Hash: %07x \n", rd);
    printC(hash,9,0,1);*/

    for(int i = 0 ; i < 32; i++){
20400f06:	fe042623          	sw	zero,-20(s0)
20400f0a:	aa19                	j	20401020 <main+0x1d8>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:44 (discriminator 3)
    printf("Dec HW: \n");
20400f0c:	204067b7          	lui	a5,0x20406
20400f10:	ea078513          	addi	a0,a5,-352 # 20405ea0 <_exit+0xb2>
20400f14:	24fd                	jal	20401202 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:45 (discriminator 3)
    start = rdcycle();
20400f16:	3f11                	jal	20400e2a <rdcycle>
20400f18:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:46 (discriminator 3)
    AEAD_DEC(asso_text, asso_len, plain_text, plain_len, cipher_text, Nonce, Key, dec_text);
20400f1c:	800027b7          	lui	a5,0x80002
20400f20:	f4478893          	addi	a7,a5,-188 # 80001f44 <metal_segment_heap_target_end+0xffffeb90>
20400f24:	800017b7          	lui	a5,0x80001
20400f28:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdbec>
20400f2c:	800017b7          	lui	a5,0x80001
20400f30:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdbfc>
20400f34:	80001737          	lui	a4,0x80001
20400f38:	73c70713          	addi	a4,a4,1852 # 8000173c <metal_segment_heap_target_end+0xffffe388>
20400f3c:	fe842683          	lw	a3,-24(s0)
20400f40:	80000637          	lui	a2,0x80000
20400f44:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd41c>
20400f48:	fe442583          	lw	a1,-28(s0)
20400f4c:	80000537          	lui	a0,0x80000
20400f50:	00050513          	mv	a0,a0
20400f54:	b6aff0ef          	jal	ra,204002be <AEAD_DEC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:47 (discriminator 3)
    end = rdcycle();
20400f58:	3dc9                	jal	20400e2a <rdcycle>
20400f5a:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:48 (discriminator 3)
    printf("Total time HW = %d cycles\n",end-start);
20400f5e:	fd442703          	lw	a4,-44(s0)
20400f62:	fd842783          	lw	a5,-40(s0)
20400f66:	40f707b3          	sub	a5,a4,a5
20400f6a:	85be                	mv	a1,a5
20400f6c:	204067b7          	lui	a5,0x20406
20400f70:	eac78513          	addi	a0,a5,-340 # 20405eac <_exit+0xbe>
20400f74:	20c9                	jal	20401036 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:49 (discriminator 3)
    printC(cipher_text, plain_len_int, 1, 1);
20400f76:	4685                	li	a3,1
20400f78:	4605                	li	a2,1
20400f7a:	fe042583          	lw	a1,-32(s0)
20400f7e:	800017b7          	lui	a5,0x80001
20400f82:	73c78513          	addi	a0,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffe388>
20400f86:	a7aff0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:50 (discriminator 3)
    printf("\nX\n");
20400f8a:	204067b7          	lui	a5,0x20406
20400f8e:	ec878513          	addi	a0,a5,-312 # 20405ec8 <_exit+0xda>
20400f92:	2c85                	jal	20401202 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:51 (discriminator 3)
    printf("Dec SW: \n");
20400f94:	204067b7          	lui	a5,0x20406
20400f98:	ecc78513          	addi	a0,a5,-308 # 20405ecc <_exit+0xde>
20400f9c:	249d                	jal	20401202 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:52 (discriminator 3)
    start = rdcycle();
20400f9e:	3571                	jal	20400e2a <rdcycle>
20400fa0:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:53 (discriminator 3)
    crypto_aead_decrypt(cipher_text, &clen,plain_text,plain_len,asso_text,asso_len,Nonce,   Key);
20400fa4:	fd040593          	addi	a1,s0,-48
20400fa8:	800017b7          	lui	a5,0x80001
20400fac:	fa078893          	addi	a7,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdbec>
20400fb0:	800017b7          	lui	a5,0x80001
20400fb4:	fb078813          	addi	a6,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdbfc>
20400fb8:	fe442783          	lw	a5,-28(s0)
20400fbc:	80000737          	lui	a4,0x80000
20400fc0:	00070713          	mv	a4,a4
20400fc4:	fe842683          	lw	a3,-24(s0)
20400fc8:	80000637          	lui	a2,0x80000
20400fcc:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd41c>
20400fd0:	80001537          	lui	a0,0x80001
20400fd4:	73c50513          	addi	a0,a0,1852 # 8000173c <metal_segment_heap_target_end+0xffffe388>
20400fd8:	3855                	jal	2040088c <crypto_aead_decrypt>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:54 (discriminator 3)
    end = rdcycle();
20400fda:	3d81                	jal	20400e2a <rdcycle>
20400fdc:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:55 (discriminator 3)
    printf("Total time SW = %d cycles\n",end-start);
20400fe0:	fd442703          	lw	a4,-44(s0)
20400fe4:	fd842783          	lw	a5,-40(s0)
20400fe8:	40f707b3          	sub	a5,a4,a5
20400fec:	85be                	mv	a1,a5
20400fee:	204067b7          	lui	a5,0x20406
20400ff2:	ed878513          	addi	a0,a5,-296 # 20405ed8 <_exit+0xea>
20400ff6:	2081                	jal	20401036 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:56 (discriminator 3)
    printC(cipher_text, plain_len_int, 1, 1);
20400ff8:	4685                	li	a3,1
20400ffa:	4605                	li	a2,1
20400ffc:	fe042583          	lw	a1,-32(s0)
20401000:	800017b7          	lui	a5,0x80001
20401004:	73c78513          	addi	a0,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffe388>
20401008:	9f8ff0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:57 (discriminator 3)
    printf("\nX\n");}
2040100c:	204067b7          	lui	a5,0x20406
20401010:	ec878513          	addi	a0,a5,-312 # 20405ec8 <_exit+0xda>
20401014:	22fd                	jal	20401202 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:43 (discriminator 3)
    for(int i = 0 ; i < 32; i++){
20401016:	fec42783          	lw	a5,-20(s0)
2040101a:	0785                	addi	a5,a5,1
2040101c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:43 (discriminator 1)
20401020:	fec42703          	lw	a4,-20(s0)
20401024:	47fd                	li	a5,31
20401026:	eee7d3e3          	bge	a5,a4,20400f0c <main+0xc4>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:60


    return 0;
2040102a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:63


2040102c:	853e                	mv	a0,a5
2040102e:	50b2                	lw	ra,44(sp)
20401030:	5422                	lw	s0,40(sp)
20401032:	6145                	addi	sp,sp,48
20401034:	8082                	ret

20401036 <iprintf>:
printf():
20401036:	7139                	addi	sp,sp,-64
20401038:	da3e                	sw	a5,52(sp)
2040103a:	d22e                	sw	a1,36(sp)
2040103c:	d432                	sw	a2,40(sp)
2040103e:	d636                	sw	a3,44(sp)
20401040:	d83a                	sw	a4,48(sp)
20401042:	dc42                	sw	a6,56(sp)
20401044:	de46                	sw	a7,60(sp)
20401046:	5fc00797          	auipc	a5,0x5fc00
2040104a:	6c278793          	addi	a5,a5,1730 # 80001708 <_impure_ptr>
2040104e:	cc22                	sw	s0,24(sp)
20401050:	4380                	lw	s0,0(a5)
20401052:	ca26                	sw	s1,20(sp)
20401054:	ce06                	sw	ra,28(sp)
20401056:	84aa                	mv	s1,a0
20401058:	c409                	beqz	s0,20401062 <iprintf+0x2c>
2040105a:	4c1c                	lw	a5,24(s0)
2040105c:	e399                	bnez	a5,20401062 <iprintf+0x2c>
2040105e:	8522                	mv	a0,s0
20401060:	23d5                	jal	20401644 <__sinit>
20401062:	440c                	lw	a1,8(s0)
20401064:	1054                	addi	a3,sp,36
20401066:	8626                	mv	a2,s1
20401068:	8522                	mv	a0,s0
2040106a:	c636                	sw	a3,12(sp)
2040106c:	2df000ef          	jal	ra,20401b4a <_vfiprintf_r>
20401070:	40f2                	lw	ra,28(sp)
20401072:	4462                	lw	s0,24(sp)
20401074:	44d2                	lw	s1,20(sp)
20401076:	6121                	addi	sp,sp,64
20401078:	8082                	ret

2040107a <putchar>:
putchar():
2040107a:	1101                	addi	sp,sp,-32
2040107c:	5fc00797          	auipc	a5,0x5fc00
20401080:	68c78793          	addi	a5,a5,1676 # 80001708 <_impure_ptr>
20401084:	cc22                	sw	s0,24(sp)
20401086:	4380                	lw	s0,0(a5)
20401088:	ce06                	sw	ra,28(sp)
2040108a:	85aa                	mv	a1,a0
2040108c:	c419                	beqz	s0,2040109a <putchar+0x20>
2040108e:	4c1c                	lw	a5,24(s0)
20401090:	e789                	bnez	a5,2040109a <putchar+0x20>
20401092:	c62a                	sw	a0,12(sp)
20401094:	8522                	mv	a0,s0
20401096:	237d                	jal	20401644 <__sinit>
20401098:	45b2                	lw	a1,12(sp)
2040109a:	4410                	lw	a2,8(s0)
2040109c:	8522                	mv	a0,s0
2040109e:	4462                	lw	s0,24(sp)
204010a0:	40f2                	lw	ra,28(sp)
204010a2:	6105                	addi	sp,sp,32
204010a4:	a009                	j	204010a6 <_putc_r>

204010a6 <_putc_r>:
_putc_r():
204010a6:	1101                	addi	sp,sp,-32
204010a8:	cc22                	sw	s0,24(sp)
204010aa:	ce06                	sw	ra,28(sp)
204010ac:	842a                	mv	s0,a0
204010ae:	c901                	beqz	a0,204010be <_putc_r+0x18>
204010b0:	4d1c                	lw	a5,24(a0)
204010b2:	e791                	bnez	a5,204010be <_putc_r+0x18>
204010b4:	c632                	sw	a2,12(sp)
204010b6:	c42e                	sw	a1,8(sp)
204010b8:	2371                	jal	20401644 <__sinit>
204010ba:	4632                	lw	a2,12(sp)
204010bc:	45a2                	lw	a1,8(sp)
204010be:	00005797          	auipc	a5,0x5
204010c2:	e5678793          	addi	a5,a5,-426 # 20405f14 <__sf_fake_stdin>
204010c6:	02f61563          	bne	a2,a5,204010f0 <_putc_r+0x4a>
204010ca:	4050                	lw	a2,4(s0)
204010cc:	461c                	lw	a5,8(a2)
204010ce:	17fd                	addi	a5,a5,-1
204010d0:	c61c                	sw	a5,8(a2)
204010d2:	0207df63          	bgez	a5,20401110 <_putc_r+0x6a>
204010d6:	4e18                	lw	a4,24(a2)
204010d8:	00e7c763          	blt	a5,a4,204010e6 <_putc_r+0x40>
204010dc:	0ff5f793          	andi	a5,a1,255
204010e0:	4729                	li	a4,10
204010e2:	02e79763          	bne	a5,a4,20401110 <_putc_r+0x6a>
204010e6:	8522                	mv	a0,s0
204010e8:	4462                	lw	s0,24(sp)
204010ea:	40f2                	lw	ra,28(sp)
204010ec:	6105                	addi	sp,sp,32
204010ee:	a20d                	j	20401210 <__swbuf_r>
204010f0:	00005797          	auipc	a5,0x5
204010f4:	e4478793          	addi	a5,a5,-444 # 20405f34 <__sf_fake_stdout>
204010f8:	00f61463          	bne	a2,a5,20401100 <_putc_r+0x5a>
204010fc:	4410                	lw	a2,8(s0)
204010fe:	b7f9                	j	204010cc <_putc_r+0x26>
20401100:	00005797          	auipc	a5,0x5
20401104:	df478793          	addi	a5,a5,-524 # 20405ef4 <__sf_fake_stderr>
20401108:	fcf612e3          	bne	a2,a5,204010cc <_putc_r+0x26>
2040110c:	4450                	lw	a2,12(s0)
2040110e:	bf7d                	j	204010cc <_putc_r+0x26>
20401110:	421c                	lw	a5,0(a2)
20401112:	0ff5f513          	andi	a0,a1,255
20401116:	00178713          	addi	a4,a5,1
2040111a:	c218                	sw	a4,0(a2)
2040111c:	00b78023          	sb	a1,0(a5)
20401120:	40f2                	lw	ra,28(sp)
20401122:	4462                	lw	s0,24(sp)
20401124:	6105                	addi	sp,sp,32
20401126:	8082                	ret

20401128 <_puts_r>:
_puts_r():
20401128:	1101                	addi	sp,sp,-32
2040112a:	ca26                	sw	s1,20(sp)
2040112c:	c84a                	sw	s2,16(sp)
2040112e:	ce06                	sw	ra,28(sp)
20401130:	cc22                	sw	s0,24(sp)
20401132:	c64e                	sw	s3,12(sp)
20401134:	c452                	sw	s4,8(sp)
20401136:	84aa                	mv	s1,a0
20401138:	892e                	mv	s2,a1
2040113a:	c501                	beqz	a0,20401142 <_puts_r+0x1a>
2040113c:	4d1c                	lw	a5,24(a0)
2040113e:	e391                	bnez	a5,20401142 <_puts_r+0x1a>
20401140:	2311                	jal	20401644 <__sinit>
20401142:	4c9c                	lw	a5,24(s1)
20401144:	4480                	lw	s0,8(s1)
20401146:	e399                	bnez	a5,2040114c <_puts_r+0x24>
20401148:	8526                	mv	a0,s1
2040114a:	29ed                	jal	20401644 <__sinit>
2040114c:	00005797          	auipc	a5,0x5
20401150:	dc878793          	addi	a5,a5,-568 # 20405f14 <__sf_fake_stdin>
20401154:	02f41c63          	bne	s0,a5,2040118c <_puts_r+0x64>
20401158:	40c0                	lw	s0,4(s1)
2040115a:	00c45783          	lhu	a5,12(s0)
2040115e:	8ba1                	andi	a5,a5,8
20401160:	c7b1                	beqz	a5,204011ac <_puts_r+0x84>
20401162:	481c                	lw	a5,16(s0)
20401164:	c7a1                	beqz	a5,204011ac <_puts_r+0x84>
20401166:	59fd                	li	s3,-1
20401168:	4a29                	li	s4,10
2040116a:	441c                	lw	a5,8(s0)
2040116c:	00094583          	lbu	a1,0(s2)
20401170:	17fd                	addi	a5,a5,-1
20401172:	e9b1                	bnez	a1,204011c6 <_puts_r+0x9e>
20401174:	c41c                	sw	a5,8(s0)
20401176:	0607de63          	bgez	a5,204011f2 <_puts_r+0xca>
2040117a:	8622                	mv	a2,s0
2040117c:	45a9                	li	a1,10
2040117e:	8526                	mv	a0,s1
20401180:	2841                	jal	20401210 <__swbuf_r>
20401182:	57fd                	li	a5,-1
20401184:	02f50863          	beq	a0,a5,204011b4 <_puts_r+0x8c>
20401188:	4529                	li	a0,10
2040118a:	a035                	j	204011b6 <_puts_r+0x8e>
2040118c:	00005797          	auipc	a5,0x5
20401190:	da878793          	addi	a5,a5,-600 # 20405f34 <__sf_fake_stdout>
20401194:	00f41463          	bne	s0,a5,2040119c <_puts_r+0x74>
20401198:	4480                	lw	s0,8(s1)
2040119a:	b7c1                	j	2040115a <_puts_r+0x32>
2040119c:	00005797          	auipc	a5,0x5
204011a0:	d5878793          	addi	a5,a5,-680 # 20405ef4 <__sf_fake_stderr>
204011a4:	faf41be3          	bne	s0,a5,2040115a <_puts_r+0x32>
204011a8:	44c0                	lw	s0,12(s1)
204011aa:	bf45                	j	2040115a <_puts_r+0x32>
204011ac:	85a2                	mv	a1,s0
204011ae:	8526                	mv	a0,s1
204011b0:	2205                	jal	204012d0 <__swsetup_r>
204011b2:	d955                	beqz	a0,20401166 <_puts_r+0x3e>
204011b4:	557d                	li	a0,-1
204011b6:	40f2                	lw	ra,28(sp)
204011b8:	4462                	lw	s0,24(sp)
204011ba:	44d2                	lw	s1,20(sp)
204011bc:	4942                	lw	s2,16(sp)
204011be:	49b2                	lw	s3,12(sp)
204011c0:	4a22                	lw	s4,8(sp)
204011c2:	6105                	addi	sp,sp,32
204011c4:	8082                	ret
204011c6:	c41c                	sw	a5,8(s0)
204011c8:	0905                	addi	s2,s2,1
204011ca:	0007d763          	bgez	a5,204011d8 <_puts_r+0xb0>
204011ce:	4c18                	lw	a4,24(s0)
204011d0:	00e7cb63          	blt	a5,a4,204011e6 <_puts_r+0xbe>
204011d4:	01458963          	beq	a1,s4,204011e6 <_puts_r+0xbe>
204011d8:	401c                	lw	a5,0(s0)
204011da:	00178713          	addi	a4,a5,1
204011de:	c018                	sw	a4,0(s0)
204011e0:	00b78023          	sb	a1,0(a5)
204011e4:	b759                	j	2040116a <_puts_r+0x42>
204011e6:	8622                	mv	a2,s0
204011e8:	8526                	mv	a0,s1
204011ea:	201d                	jal	20401210 <__swbuf_r>
204011ec:	f7351fe3          	bne	a0,s3,2040116a <_puts_r+0x42>
204011f0:	b7d1                	j	204011b4 <_puts_r+0x8c>
204011f2:	401c                	lw	a5,0(s0)
204011f4:	00178713          	addi	a4,a5,1
204011f8:	c018                	sw	a4,0(s0)
204011fa:	4729                	li	a4,10
204011fc:	00e78023          	sb	a4,0(a5)
20401200:	b761                	j	20401188 <_puts_r+0x60>

20401202 <puts>:
puts():
20401202:	5fc00797          	auipc	a5,0x5fc00
20401206:	50678793          	addi	a5,a5,1286 # 80001708 <_impure_ptr>
2040120a:	85aa                	mv	a1,a0
2040120c:	4388                	lw	a0,0(a5)
2040120e:	bf29                	j	20401128 <_puts_r>

20401210 <__swbuf_r>:
__swbuf_r():
20401210:	1101                	addi	sp,sp,-32
20401212:	cc22                	sw	s0,24(sp)
20401214:	ca26                	sw	s1,20(sp)
20401216:	c84a                	sw	s2,16(sp)
20401218:	ce06                	sw	ra,28(sp)
2040121a:	c64e                	sw	s3,12(sp)
2040121c:	84aa                	mv	s1,a0
2040121e:	892e                	mv	s2,a1
20401220:	8432                	mv	s0,a2
20401222:	c501                	beqz	a0,2040122a <__swbuf_r+0x1a>
20401224:	4d1c                	lw	a5,24(a0)
20401226:	e391                	bnez	a5,2040122a <__swbuf_r+0x1a>
20401228:	2931                	jal	20401644 <__sinit>
2040122a:	00005797          	auipc	a5,0x5
2040122e:	cea78793          	addi	a5,a5,-790 # 20405f14 <__sf_fake_stdin>
20401232:	06f41963          	bne	s0,a5,204012a4 <__swbuf_r+0x94>
20401236:	40c0                	lw	s0,4(s1)
20401238:	4c1c                	lw	a5,24(s0)
2040123a:	c41c                	sw	a5,8(s0)
2040123c:	00c45783          	lhu	a5,12(s0)
20401240:	8ba1                	andi	a5,a5,8
20401242:	c3c9                	beqz	a5,204012c4 <__swbuf_r+0xb4>
20401244:	481c                	lw	a5,16(s0)
20401246:	cfbd                	beqz	a5,204012c4 <__swbuf_r+0xb4>
20401248:	481c                	lw	a5,16(s0)
2040124a:	4008                	lw	a0,0(s0)
2040124c:	0ff97993          	andi	s3,s2,255
20401250:	0ff97913          	andi	s2,s2,255
20401254:	8d1d                	sub	a0,a0,a5
20401256:	485c                	lw	a5,20(s0)
20401258:	00f54663          	blt	a0,a5,20401264 <__swbuf_r+0x54>
2040125c:	85a2                	mv	a1,s0
2040125e:	8526                	mv	a0,s1
20401260:	24e9                	jal	2040152a <_fflush_r>
20401262:	e52d                	bnez	a0,204012cc <__swbuf_r+0xbc>
20401264:	441c                	lw	a5,8(s0)
20401266:	0505                	addi	a0,a0,1
20401268:	17fd                	addi	a5,a5,-1
2040126a:	c41c                	sw	a5,8(s0)
2040126c:	401c                	lw	a5,0(s0)
2040126e:	00178713          	addi	a4,a5,1
20401272:	c018                	sw	a4,0(s0)
20401274:	01378023          	sb	s3,0(a5)
20401278:	485c                	lw	a5,20(s0)
2040127a:	00a78963          	beq	a5,a0,2040128c <__swbuf_r+0x7c>
2040127e:	00c45783          	lhu	a5,12(s0)
20401282:	8b85                	andi	a5,a5,1
20401284:	cb81                	beqz	a5,20401294 <__swbuf_r+0x84>
20401286:	47a9                	li	a5,10
20401288:	00f91663          	bne	s2,a5,20401294 <__swbuf_r+0x84>
2040128c:	85a2                	mv	a1,s0
2040128e:	8526                	mv	a0,s1
20401290:	2c69                	jal	2040152a <_fflush_r>
20401292:	ed0d                	bnez	a0,204012cc <__swbuf_r+0xbc>
20401294:	40f2                	lw	ra,28(sp)
20401296:	4462                	lw	s0,24(sp)
20401298:	854a                	mv	a0,s2
2040129a:	44d2                	lw	s1,20(sp)
2040129c:	4942                	lw	s2,16(sp)
2040129e:	49b2                	lw	s3,12(sp)
204012a0:	6105                	addi	sp,sp,32
204012a2:	8082                	ret
204012a4:	00005797          	auipc	a5,0x5
204012a8:	c9078793          	addi	a5,a5,-880 # 20405f34 <__sf_fake_stdout>
204012ac:	00f41463          	bne	s0,a5,204012b4 <__swbuf_r+0xa4>
204012b0:	4480                	lw	s0,8(s1)
204012b2:	b759                	j	20401238 <__swbuf_r+0x28>
204012b4:	00005797          	auipc	a5,0x5
204012b8:	c4078793          	addi	a5,a5,-960 # 20405ef4 <__sf_fake_stderr>
204012bc:	f6f41ee3          	bne	s0,a5,20401238 <__swbuf_r+0x28>
204012c0:	44c0                	lw	s0,12(s1)
204012c2:	bf9d                	j	20401238 <__swbuf_r+0x28>
204012c4:	85a2                	mv	a1,s0
204012c6:	8526                	mv	a0,s1
204012c8:	2021                	jal	204012d0 <__swsetup_r>
204012ca:	dd3d                	beqz	a0,20401248 <__swbuf_r+0x38>
204012cc:	597d                	li	s2,-1
204012ce:	b7d9                	j	20401294 <__swbuf_r+0x84>

204012d0 <__swsetup_r>:
__swsetup_r():
204012d0:	1141                	addi	sp,sp,-16
204012d2:	5fc00797          	auipc	a5,0x5fc00
204012d6:	43678793          	addi	a5,a5,1078 # 80001708 <_impure_ptr>
204012da:	c226                	sw	s1,4(sp)
204012dc:	4384                	lw	s1,0(a5)
204012de:	c422                	sw	s0,8(sp)
204012e0:	c04a                	sw	s2,0(sp)
204012e2:	c606                	sw	ra,12(sp)
204012e4:	892a                	mv	s2,a0
204012e6:	842e                	mv	s0,a1
204012e8:	c489                	beqz	s1,204012f2 <__swsetup_r+0x22>
204012ea:	4c9c                	lw	a5,24(s1)
204012ec:	e399                	bnez	a5,204012f2 <__swsetup_r+0x22>
204012ee:	8526                	mv	a0,s1
204012f0:	2e91                	jal	20401644 <__sinit>
204012f2:	00005797          	auipc	a5,0x5
204012f6:	c2278793          	addi	a5,a5,-990 # 20405f14 <__sf_fake_stdin>
204012fa:	02f41c63          	bne	s0,a5,20401332 <__swsetup_r+0x62>
204012fe:	40c0                	lw	s0,4(s1)
20401300:	00c41703          	lh	a4,12(s0)
20401304:	01071793          	slli	a5,a4,0x10
20401308:	83c1                	srli	a5,a5,0x10
2040130a:	0087f693          	andi	a3,a5,8
2040130e:	eeb5                	bnez	a3,2040138a <__swsetup_r+0xba>
20401310:	0107f693          	andi	a3,a5,16
20401314:	ee9d                	bnez	a3,20401352 <__swsetup_r+0x82>
20401316:	47a5                	li	a5,9
20401318:	00f92023          	sw	a5,0(s2)
2040131c:	04076713          	ori	a4,a4,64
20401320:	00e41623          	sh	a4,12(s0)
20401324:	557d                	li	a0,-1
20401326:	40b2                	lw	ra,12(sp)
20401328:	4422                	lw	s0,8(sp)
2040132a:	4492                	lw	s1,4(sp)
2040132c:	4902                	lw	s2,0(sp)
2040132e:	0141                	addi	sp,sp,16
20401330:	8082                	ret
20401332:	00005797          	auipc	a5,0x5
20401336:	c0278793          	addi	a5,a5,-1022 # 20405f34 <__sf_fake_stdout>
2040133a:	00f41463          	bne	s0,a5,20401342 <__swsetup_r+0x72>
2040133e:	4480                	lw	s0,8(s1)
20401340:	b7c1                	j	20401300 <__swsetup_r+0x30>
20401342:	00005797          	auipc	a5,0x5
20401346:	bb278793          	addi	a5,a5,-1102 # 20405ef4 <__sf_fake_stderr>
2040134a:	faf41be3          	bne	s0,a5,20401300 <__swsetup_r+0x30>
2040134e:	44c0                	lw	s0,12(s1)
20401350:	bf45                	j	20401300 <__swsetup_r+0x30>
20401352:	8b91                	andi	a5,a5,4
20401354:	c78d                	beqz	a5,2040137e <__swsetup_r+0xae>
20401356:	584c                	lw	a1,52(s0)
20401358:	c989                	beqz	a1,2040136a <__swsetup_r+0x9a>
2040135a:	04440793          	addi	a5,s0,68
2040135e:	00f58463          	beq	a1,a5,20401366 <__swsetup_r+0x96>
20401362:	854a                	mv	a0,s2
20401364:	2bc5                	jal	20401954 <_free_r>
20401366:	02042a23          	sw	zero,52(s0)
2040136a:	00c45783          	lhu	a5,12(s0)
2040136e:	00042223          	sw	zero,4(s0)
20401372:	fdb7f793          	andi	a5,a5,-37
20401376:	00f41623          	sh	a5,12(s0)
2040137a:	481c                	lw	a5,16(s0)
2040137c:	c01c                	sw	a5,0(s0)
2040137e:	00c45783          	lhu	a5,12(s0)
20401382:	0087e793          	ori	a5,a5,8
20401386:	00f41623          	sh	a5,12(s0)
2040138a:	481c                	lw	a5,16(s0)
2040138c:	ef81                	bnez	a5,204013a4 <__swsetup_r+0xd4>
2040138e:	00c45783          	lhu	a5,12(s0)
20401392:	20000713          	li	a4,512
20401396:	2807f793          	andi	a5,a5,640
2040139a:	00e78563          	beq	a5,a4,204013a4 <__swsetup_r+0xd4>
2040139e:	85a2                	mv	a1,s0
204013a0:	854a                	mv	a0,s2
204013a2:	21bd                	jal	20401810 <__smakebuf_r>
204013a4:	00c45783          	lhu	a5,12(s0)
204013a8:	0017f713          	andi	a4,a5,1
204013ac:	c705                	beqz	a4,204013d4 <__swsetup_r+0x104>
204013ae:	485c                	lw	a5,20(s0)
204013b0:	00042423          	sw	zero,8(s0)
204013b4:	40f007b3          	neg	a5,a5
204013b8:	cc1c                	sw	a5,24(s0)
204013ba:	481c                	lw	a5,16(s0)
204013bc:	4501                	li	a0,0
204013be:	f7a5                	bnez	a5,20401326 <__swsetup_r+0x56>
204013c0:	00c41783          	lh	a5,12(s0)
204013c4:	0807f713          	andi	a4,a5,128
204013c8:	df39                	beqz	a4,20401326 <__swsetup_r+0x56>
204013ca:	0407e793          	ori	a5,a5,64
204013ce:	00f41623          	sh	a5,12(s0)
204013d2:	bf89                	j	20401324 <__swsetup_r+0x54>
204013d4:	8b89                	andi	a5,a5,2
204013d6:	4701                	li	a4,0
204013d8:	e391                	bnez	a5,204013dc <__swsetup_r+0x10c>
204013da:	4858                	lw	a4,20(s0)
204013dc:	c418                	sw	a4,8(s0)
204013de:	bff1                	j	204013ba <__swsetup_r+0xea>

204013e0 <__sflush_r>:
__sflush_r():
204013e0:	00c5d783          	lhu	a5,12(a1)
204013e4:	1101                	addi	sp,sp,-32
204013e6:	cc22                	sw	s0,24(sp)
204013e8:	ca26                	sw	s1,20(sp)
204013ea:	ce06                	sw	ra,28(sp)
204013ec:	c84a                	sw	s2,16(sp)
204013ee:	c64e                	sw	s3,12(sp)
204013f0:	0087f713          	andi	a4,a5,8
204013f4:	84aa                	mv	s1,a0
204013f6:	842e                	mv	s0,a1
204013f8:	e765                	bnez	a4,204014e0 <__sflush_r+0x100>
204013fa:	41d8                	lw	a4,4(a1)
204013fc:	00e04763          	bgtz	a4,2040140a <__sflush_r+0x2a>
20401400:	41b8                	lw	a4,64(a1)
20401402:	00e04463          	bgtz	a4,2040140a <__sflush_r+0x2a>
20401406:	4501                	li	a0,0
20401408:	a0c1                	j	204014c8 <__sflush_r+0xe8>
2040140a:	5458                	lw	a4,44(s0)
2040140c:	df6d                	beqz	a4,20401406 <__sflush_r+0x26>
2040140e:	0004a903          	lw	s2,0(s1)
20401412:	01379693          	slli	a3,a5,0x13
20401416:	0004a023          	sw	zero,0(s1)
2040141a:	0606de63          	bgez	a3,20401496 <__sflush_r+0xb6>
2040141e:	4868                	lw	a0,84(s0)
20401420:	00c45783          	lhu	a5,12(s0)
20401424:	8b91                	andi	a5,a5,4
20401426:	c799                	beqz	a5,20401434 <__sflush_r+0x54>
20401428:	405c                	lw	a5,4(s0)
2040142a:	8d1d                	sub	a0,a0,a5
2040142c:	585c                	lw	a5,52(s0)
2040142e:	c399                	beqz	a5,20401434 <__sflush_r+0x54>
20401430:	403c                	lw	a5,64(s0)
20401432:	8d1d                	sub	a0,a0,a5
20401434:	545c                	lw	a5,44(s0)
20401436:	500c                	lw	a1,32(s0)
20401438:	862a                	mv	a2,a0
2040143a:	4681                	li	a3,0
2040143c:	8526                	mv	a0,s1
2040143e:	9782                	jalr	a5
20401440:	57fd                	li	a5,-1
20401442:	00c45703          	lhu	a4,12(s0)
20401446:	00f51d63          	bne	a0,a5,20401460 <__sflush_r+0x80>
2040144a:	4094                	lw	a3,0(s1)
2040144c:	47f5                	li	a5,29
2040144e:	08d7e463          	bltu	a5,a3,204014d6 <__sflush_r+0xf6>
20401452:	204007b7          	lui	a5,0x20400
20401456:	0785                	addi	a5,a5,1
20401458:	00d7d7b3          	srl	a5,a5,a3
2040145c:	8b85                	andi	a5,a5,1
2040145e:	cfa5                	beqz	a5,204014d6 <__sflush_r+0xf6>
20401460:	481c                	lw	a5,16(s0)
20401462:	00042223          	sw	zero,4(s0)
20401466:	c01c                	sw	a5,0(s0)
20401468:	01371793          	slli	a5,a4,0x13
2040146c:	0007d863          	bgez	a5,2040147c <__sflush_r+0x9c>
20401470:	57fd                	li	a5,-1
20401472:	00f51463          	bne	a0,a5,2040147a <__sflush_r+0x9a>
20401476:	409c                	lw	a5,0(s1)
20401478:	e391                	bnez	a5,2040147c <__sflush_r+0x9c>
2040147a:	c868                	sw	a0,84(s0)
2040147c:	584c                	lw	a1,52(s0)
2040147e:	0124a023          	sw	s2,0(s1)
20401482:	d1d1                	beqz	a1,20401406 <__sflush_r+0x26>
20401484:	04440793          	addi	a5,s0,68
20401488:	00f58463          	beq	a1,a5,20401490 <__sflush_r+0xb0>
2040148c:	8526                	mv	a0,s1
2040148e:	21d9                	jal	20401954 <_free_r>
20401490:	02042a23          	sw	zero,52(s0)
20401494:	bf8d                	j	20401406 <__sflush_r+0x26>
20401496:	500c                	lw	a1,32(s0)
20401498:	4685                	li	a3,1
2040149a:	4601                	li	a2,0
2040149c:	8526                	mv	a0,s1
2040149e:	9702                	jalr	a4
204014a0:	57fd                	li	a5,-1
204014a2:	f6f51fe3          	bne	a0,a5,20401420 <__sflush_r+0x40>
204014a6:	409c                	lw	a5,0(s1)
204014a8:	dfa5                	beqz	a5,20401420 <__sflush_r+0x40>
204014aa:	4775                	li	a4,29
204014ac:	00e78563          	beq	a5,a4,204014b6 <__sflush_r+0xd6>
204014b0:	4759                	li	a4,22
204014b2:	00e79563          	bne	a5,a4,204014bc <__sflush_r+0xdc>
204014b6:	0124a023          	sw	s2,0(s1)
204014ba:	b7b1                	j	20401406 <__sflush_r+0x26>
204014bc:	00c45783          	lhu	a5,12(s0)
204014c0:	0407e793          	ori	a5,a5,64
204014c4:	00f41623          	sh	a5,12(s0)
204014c8:	40f2                	lw	ra,28(sp)
204014ca:	4462                	lw	s0,24(sp)
204014cc:	44d2                	lw	s1,20(sp)
204014ce:	4942                	lw	s2,16(sp)
204014d0:	49b2                	lw	s3,12(sp)
204014d2:	6105                	addi	sp,sp,32
204014d4:	8082                	ret
204014d6:	04076713          	ori	a4,a4,64
204014da:	00e41623          	sh	a4,12(s0)
204014de:	b7ed                	j	204014c8 <__sflush_r+0xe8>
204014e0:	0105a983          	lw	s3,16(a1)
204014e4:	f20981e3          	beqz	s3,20401406 <__sflush_r+0x26>
204014e8:	0005a903          	lw	s2,0(a1)
204014ec:	8b8d                	andi	a5,a5,3
204014ee:	0135a023          	sw	s3,0(a1)
204014f2:	41390933          	sub	s2,s2,s3
204014f6:	4701                	li	a4,0
204014f8:	e391                	bnez	a5,204014fc <__sflush_r+0x11c>
204014fa:	49d8                	lw	a4,20(a1)
204014fc:	c418                	sw	a4,8(s0)
204014fe:	f12054e3          	blez	s2,20401406 <__sflush_r+0x26>
20401502:	541c                	lw	a5,40(s0)
20401504:	500c                	lw	a1,32(s0)
20401506:	86ca                	mv	a3,s2
20401508:	864e                	mv	a2,s3
2040150a:	8526                	mv	a0,s1
2040150c:	9782                	jalr	a5
2040150e:	00a04a63          	bgtz	a0,20401522 <__sflush_r+0x142>
20401512:	00c45783          	lhu	a5,12(s0)
20401516:	557d                	li	a0,-1
20401518:	0407e793          	ori	a5,a5,64
2040151c:	00f41623          	sh	a5,12(s0)
20401520:	b765                	j	204014c8 <__sflush_r+0xe8>
20401522:	99aa                	add	s3,s3,a0
20401524:	40a90933          	sub	s2,s2,a0
20401528:	bfd9                	j	204014fe <__sflush_r+0x11e>

2040152a <_fflush_r>:
_fflush_r():
2040152a:	499c                	lw	a5,16(a1)
2040152c:	cfb9                	beqz	a5,2040158a <_fflush_r+0x60>
2040152e:	1101                	addi	sp,sp,-32
20401530:	cc22                	sw	s0,24(sp)
20401532:	ce06                	sw	ra,28(sp)
20401534:	842a                	mv	s0,a0
20401536:	c511                	beqz	a0,20401542 <_fflush_r+0x18>
20401538:	4d1c                	lw	a5,24(a0)
2040153a:	e781                	bnez	a5,20401542 <_fflush_r+0x18>
2040153c:	c62e                	sw	a1,12(sp)
2040153e:	2219                	jal	20401644 <__sinit>
20401540:	45b2                	lw	a1,12(sp)
20401542:	00005797          	auipc	a5,0x5
20401546:	9d278793          	addi	a5,a5,-1582 # 20405f14 <__sf_fake_stdin>
2040154a:	00f59b63          	bne	a1,a5,20401560 <_fflush_r+0x36>
2040154e:	404c                	lw	a1,4(s0)
20401550:	00c59783          	lh	a5,12(a1)
20401554:	c795                	beqz	a5,20401580 <_fflush_r+0x56>
20401556:	8522                	mv	a0,s0
20401558:	4462                	lw	s0,24(sp)
2040155a:	40f2                	lw	ra,28(sp)
2040155c:	6105                	addi	sp,sp,32
2040155e:	b549                	j	204013e0 <__sflush_r>
20401560:	00005797          	auipc	a5,0x5
20401564:	9d478793          	addi	a5,a5,-1580 # 20405f34 <__sf_fake_stdout>
20401568:	00f59463          	bne	a1,a5,20401570 <_fflush_r+0x46>
2040156c:	440c                	lw	a1,8(s0)
2040156e:	b7cd                	j	20401550 <_fflush_r+0x26>
20401570:	00005797          	auipc	a5,0x5
20401574:	98478793          	addi	a5,a5,-1660 # 20405ef4 <__sf_fake_stderr>
20401578:	fcf59ce3          	bne	a1,a5,20401550 <_fflush_r+0x26>
2040157c:	444c                	lw	a1,12(s0)
2040157e:	bfc9                	j	20401550 <_fflush_r+0x26>
20401580:	40f2                	lw	ra,28(sp)
20401582:	4462                	lw	s0,24(sp)
20401584:	4501                	li	a0,0
20401586:	6105                	addi	sp,sp,32
20401588:	8082                	ret
2040158a:	4501                	li	a0,0
2040158c:	8082                	ret

2040158e <std>:
std():
2040158e:	1141                	addi	sp,sp,-16
20401590:	c422                	sw	s0,8(sp)
20401592:	c606                	sw	ra,12(sp)
20401594:	842a                	mv	s0,a0
20401596:	00b51623          	sh	a1,12(a0)
2040159a:	00c51723          	sh	a2,14(a0)
2040159e:	00052023          	sw	zero,0(a0)
204015a2:	00052223          	sw	zero,4(a0)
204015a6:	00052423          	sw	zero,8(a0)
204015aa:	06052223          	sw	zero,100(a0)
204015ae:	00052823          	sw	zero,16(a0)
204015b2:	00052a23          	sw	zero,20(a0)
204015b6:	00052c23          	sw	zero,24(a0)
204015ba:	4621                	li	a2,8
204015bc:	4581                	li	a1,0
204015be:	05c50513          	addi	a0,a0,92
204015c2:	24ed                	jal	204018ac <memset>
204015c4:	00001797          	auipc	a5,0x1
204015c8:	84e78793          	addi	a5,a5,-1970 # 20401e12 <__sread>
204015cc:	d05c                	sw	a5,36(s0)
204015ce:	00001797          	auipc	a5,0x1
204015d2:	87478793          	addi	a5,a5,-1932 # 20401e42 <__swrite>
204015d6:	d41c                	sw	a5,40(s0)
204015d8:	00001797          	auipc	a5,0x1
204015dc:	8b878793          	addi	a5,a5,-1864 # 20401e90 <__sseek>
204015e0:	d45c                	sw	a5,44(s0)
204015e2:	00001797          	auipc	a5,0x1
204015e6:	8e478793          	addi	a5,a5,-1820 # 20401ec6 <__sclose>
204015ea:	d000                	sw	s0,32(s0)
204015ec:	d81c                	sw	a5,48(s0)
204015ee:	40b2                	lw	ra,12(sp)
204015f0:	4422                	lw	s0,8(sp)
204015f2:	0141                	addi	sp,sp,16
204015f4:	8082                	ret

204015f6 <_cleanup_r>:
_cleanup_r():
204015f6:	00000597          	auipc	a1,0x0
204015fa:	f3458593          	addi	a1,a1,-204 # 2040152a <_fflush_r>
204015fe:	a2b9                	j	2040174c <_fwalk_reent>

20401600 <__sfmoreglue>:
__sfmoreglue():
20401600:	1141                	addi	sp,sp,-16
20401602:	c226                	sw	s1,4(sp)
20401604:	06800613          	li	a2,104
20401608:	fff58493          	addi	s1,a1,-1
2040160c:	02c484b3          	mul	s1,s1,a2
20401610:	c04a                	sw	s2,0(sp)
20401612:	892e                	mv	s2,a1
20401614:	c422                	sw	s0,8(sp)
20401616:	c606                	sw	ra,12(sp)
20401618:	07448593          	addi	a1,s1,116
2040161c:	26d5                	jal	20401a00 <_malloc_r>
2040161e:	842a                	mv	s0,a0
20401620:	c919                	beqz	a0,20401636 <__sfmoreglue+0x36>
20401622:	00052023          	sw	zero,0(a0)
20401626:	01252223          	sw	s2,4(a0)
2040162a:	0531                	addi	a0,a0,12
2040162c:	c408                	sw	a0,8(s0)
2040162e:	06848613          	addi	a2,s1,104
20401632:	4581                	li	a1,0
20401634:	2ca5                	jal	204018ac <memset>
20401636:	8522                	mv	a0,s0
20401638:	40b2                	lw	ra,12(sp)
2040163a:	4422                	lw	s0,8(sp)
2040163c:	4492                	lw	s1,4(sp)
2040163e:	4902                	lw	s2,0(sp)
20401640:	0141                	addi	sp,sp,16
20401642:	8082                	ret

20401644 <__sinit>:
__sinit():
20401644:	4d1c                	lw	a5,24(a0)
20401646:	e3bd                	bnez	a5,204016ac <__sinit+0x68>
20401648:	1141                	addi	sp,sp,-16
2040164a:	c606                	sw	ra,12(sp)
2040164c:	c422                	sw	s0,8(sp)
2040164e:	00000797          	auipc	a5,0x0
20401652:	fa878793          	addi	a5,a5,-88 # 204015f6 <_cleanup_r>
20401656:	d51c                	sw	a5,40(a0)
20401658:	5fc00797          	auipc	a5,0x5fc00
2040165c:	0b478793          	addi	a5,a5,180 # 8000170c <_global_impure_ptr>
20401660:	439c                	lw	a5,0(a5)
20401662:	04052423          	sw	zero,72(a0)
20401666:	04052623          	sw	zero,76(a0)
2040166a:	04052823          	sw	zero,80(a0)
2040166e:	00f51463          	bne	a0,a5,20401676 <__sinit+0x32>
20401672:	4785                	li	a5,1
20401674:	cd1c                	sw	a5,24(a0)
20401676:	842a                	mv	s0,a0
20401678:	281d                	jal	204016ae <__sfp>
2040167a:	c048                	sw	a0,4(s0)
2040167c:	8522                	mv	a0,s0
2040167e:	2805                	jal	204016ae <__sfp>
20401680:	c408                	sw	a0,8(s0)
20401682:	8522                	mv	a0,s0
20401684:	202d                	jal	204016ae <__sfp>
20401686:	c448                	sw	a0,12(s0)
20401688:	4048                	lw	a0,4(s0)
2040168a:	4601                	li	a2,0
2040168c:	4591                	li	a1,4
2040168e:	3701                	jal	2040158e <std>
20401690:	4408                	lw	a0,8(s0)
20401692:	4605                	li	a2,1
20401694:	45a5                	li	a1,9
20401696:	3de5                	jal	2040158e <std>
20401698:	4448                	lw	a0,12(s0)
2040169a:	4609                	li	a2,2
2040169c:	45c9                	li	a1,18
2040169e:	3dc5                	jal	2040158e <std>
204016a0:	4785                	li	a5,1
204016a2:	cc1c                	sw	a5,24(s0)
204016a4:	40b2                	lw	ra,12(sp)
204016a6:	4422                	lw	s0,8(sp)
204016a8:	0141                	addi	sp,sp,16
204016aa:	8082                	ret
204016ac:	8082                	ret

204016ae <__sfp>:
__sfp():
204016ae:	1141                	addi	sp,sp,-16
204016b0:	5fc00797          	auipc	a5,0x5fc00
204016b4:	05c78793          	addi	a5,a5,92 # 8000170c <_global_impure_ptr>
204016b8:	c226                	sw	s1,4(sp)
204016ba:	4384                	lw	s1,0(a5)
204016bc:	c04a                	sw	s2,0(sp)
204016be:	c606                	sw	ra,12(sp)
204016c0:	4c9c                	lw	a5,24(s1)
204016c2:	c422                	sw	s0,8(sp)
204016c4:	892a                	mv	s2,a0
204016c6:	e399                	bnez	a5,204016cc <__sfp+0x1e>
204016c8:	8526                	mv	a0,s1
204016ca:	3fad                	jal	20401644 <__sinit>
204016cc:	04848493          	addi	s1,s1,72
204016d0:	4480                	lw	s0,8(s1)
204016d2:	40dc                	lw	a5,4(s1)
204016d4:	17fd                	addi	a5,a5,-1
204016d6:	0007d663          	bgez	a5,204016e2 <__sfp+0x34>
204016da:	409c                	lw	a5,0(s1)
204016dc:	cfb1                	beqz	a5,20401738 <__sfp+0x8a>
204016de:	4084                	lw	s1,0(s1)
204016e0:	bfc5                	j	204016d0 <__sfp+0x22>
204016e2:	00c41703          	lh	a4,12(s0)
204016e6:	e731                	bnez	a4,20401732 <__sfp+0x84>
204016e8:	77c1                	lui	a5,0xffff0
204016ea:	0785                	addi	a5,a5,1
204016ec:	06042223          	sw	zero,100(s0)
204016f0:	00042023          	sw	zero,0(s0)
204016f4:	00042223          	sw	zero,4(s0)
204016f8:	00042423          	sw	zero,8(s0)
204016fc:	c45c                	sw	a5,12(s0)
204016fe:	00042823          	sw	zero,16(s0)
20401702:	00042a23          	sw	zero,20(s0)
20401706:	00042c23          	sw	zero,24(s0)
2040170a:	4621                	li	a2,8
2040170c:	4581                	li	a1,0
2040170e:	05c40513          	addi	a0,s0,92
20401712:	2a69                	jal	204018ac <memset>
20401714:	02042a23          	sw	zero,52(s0)
20401718:	02042c23          	sw	zero,56(s0)
2040171c:	04042423          	sw	zero,72(s0)
20401720:	04042623          	sw	zero,76(s0)
20401724:	8522                	mv	a0,s0
20401726:	40b2                	lw	ra,12(sp)
20401728:	4422                	lw	s0,8(sp)
2040172a:	4492                	lw	s1,4(sp)
2040172c:	4902                	lw	s2,0(sp)
2040172e:	0141                	addi	sp,sp,16
20401730:	8082                	ret
20401732:	06840413          	addi	s0,s0,104
20401736:	bf79                	j	204016d4 <__sfp+0x26>
20401738:	4591                	li	a1,4
2040173a:	854a                	mv	a0,s2
2040173c:	35d1                	jal	20401600 <__sfmoreglue>
2040173e:	c088                	sw	a0,0(s1)
20401740:	842a                	mv	s0,a0
20401742:	fd51                	bnez	a0,204016de <__sfp+0x30>
20401744:	47b1                	li	a5,12
20401746:	00f92023          	sw	a5,0(s2)
2040174a:	bfe9                	j	20401724 <__sfp+0x76>

2040174c <_fwalk_reent>:
_fwalk_reent():
2040174c:	7179                	addi	sp,sp,-48
2040174e:	d422                	sw	s0,40(sp)
20401750:	d04a                	sw	s2,32(sp)
20401752:	cc52                	sw	s4,24(sp)
20401754:	ca56                	sw	s5,20(sp)
20401756:	c85a                	sw	s6,16(sp)
20401758:	c65e                	sw	s7,12(sp)
2040175a:	d606                	sw	ra,44(sp)
2040175c:	d226                	sw	s1,36(sp)
2040175e:	ce4e                	sw	s3,28(sp)
20401760:	8a2a                	mv	s4,a0
20401762:	8aae                	mv	s5,a1
20401764:	04850413          	addi	s0,a0,72
20401768:	4901                	li	s2,0
2040176a:	4b05                	li	s6,1
2040176c:	5bfd                	li	s7,-1
2040176e:	ec09                	bnez	s0,20401788 <_fwalk_reent+0x3c>
20401770:	50b2                	lw	ra,44(sp)
20401772:	5422                	lw	s0,40(sp)
20401774:	854a                	mv	a0,s2
20401776:	5492                	lw	s1,36(sp)
20401778:	5902                	lw	s2,32(sp)
2040177a:	49f2                	lw	s3,28(sp)
2040177c:	4a62                	lw	s4,24(sp)
2040177e:	4ad2                	lw	s5,20(sp)
20401780:	4b42                	lw	s6,16(sp)
20401782:	4bb2                	lw	s7,12(sp)
20401784:	6145                	addi	sp,sp,48
20401786:	8082                	ret
20401788:	4404                	lw	s1,8(s0)
2040178a:	00442983          	lw	s3,4(s0)
2040178e:	19fd                	addi	s3,s3,-1
20401790:	0009d463          	bgez	s3,20401798 <_fwalk_reent+0x4c>
20401794:	4000                	lw	s0,0(s0)
20401796:	bfe1                	j	2040176e <_fwalk_reent+0x22>
20401798:	00c4d783          	lhu	a5,12(s1)
2040179c:	00fb7b63          	bgeu	s6,a5,204017b2 <_fwalk_reent+0x66>
204017a0:	00e49783          	lh	a5,14(s1)
204017a4:	01778763          	beq	a5,s7,204017b2 <_fwalk_reent+0x66>
204017a8:	85a6                	mv	a1,s1
204017aa:	8552                	mv	a0,s4
204017ac:	9a82                	jalr	s5
204017ae:	00a96933          	or	s2,s2,a0
204017b2:	06848493          	addi	s1,s1,104
204017b6:	bfe1                	j	2040178e <_fwalk_reent+0x42>

204017b8 <__swhatbuf_r>:
__swhatbuf_r():
204017b8:	7119                	addi	sp,sp,-128
204017ba:	daa6                	sw	s1,116(sp)
204017bc:	84ae                	mv	s1,a1
204017be:	00e59583          	lh	a1,14(a1)
204017c2:	dca2                	sw	s0,120(sp)
204017c4:	de86                	sw	ra,124(sp)
204017c6:	8432                	mv	s0,a2
204017c8:	0005dc63          	bgez	a1,204017e0 <__swhatbuf_r+0x28>
204017cc:	00c4d783          	lhu	a5,12(s1)
204017d0:	0006a023          	sw	zero,0(a3) # 80000000 <metal_segment_heap_target_end+0xffffcc4c>
204017d4:	0807f793          	andi	a5,a5,128
204017d8:	e39d                	bnez	a5,204017fe <__swhatbuf_r+0x46>
204017da:	40000793          	li	a5,1024
204017de:	a015                	j	20401802 <__swhatbuf_r+0x4a>
204017e0:	0830                	addi	a2,sp,24
204017e2:	c636                	sw	a3,12(sp)
204017e4:	27b1                	jal	20401f30 <_fstat_r>
204017e6:	46b2                	lw	a3,12(sp)
204017e8:	fe0542e3          	bltz	a0,204017cc <__swhatbuf_r+0x14>
204017ec:	4772                	lw	a4,28(sp)
204017ee:	67bd                	lui	a5,0xf
204017f0:	8ff9                	and	a5,a5,a4
204017f2:	7779                	lui	a4,0xffffe
204017f4:	97ba                	add	a5,a5,a4
204017f6:	0017b793          	seqz	a5,a5
204017fa:	c29c                	sw	a5,0(a3)
204017fc:	bff9                	j	204017da <__swhatbuf_r+0x22>
204017fe:	04000793          	li	a5,64
20401802:	c01c                	sw	a5,0(s0)
20401804:	50f6                	lw	ra,124(sp)
20401806:	5466                	lw	s0,120(sp)
20401808:	54d6                	lw	s1,116(sp)
2040180a:	4501                	li	a0,0
2040180c:	6109                	addi	sp,sp,128
2040180e:	8082                	ret

20401810 <__smakebuf_r>:
__smakebuf_r():
20401810:	00c5d783          	lhu	a5,12(a1)
20401814:	1101                	addi	sp,sp,-32
20401816:	cc22                	sw	s0,24(sp)
20401818:	ce06                	sw	ra,28(sp)
2040181a:	ca26                	sw	s1,20(sp)
2040181c:	c84a                	sw	s2,16(sp)
2040181e:	8b89                	andi	a5,a5,2
20401820:	842e                	mv	s0,a1
20401822:	cf89                	beqz	a5,2040183c <__smakebuf_r+0x2c>
20401824:	04740793          	addi	a5,s0,71
20401828:	c01c                	sw	a5,0(s0)
2040182a:	c81c                	sw	a5,16(s0)
2040182c:	4785                	li	a5,1
2040182e:	c85c                	sw	a5,20(s0)
20401830:	40f2                	lw	ra,28(sp)
20401832:	4462                	lw	s0,24(sp)
20401834:	44d2                	lw	s1,20(sp)
20401836:	4942                	lw	s2,16(sp)
20401838:	6105                	addi	sp,sp,32
2040183a:	8082                	ret
2040183c:	0074                	addi	a3,sp,12
2040183e:	0030                	addi	a2,sp,8
20401840:	84aa                	mv	s1,a0
20401842:	3f9d                	jal	204017b8 <__swhatbuf_r>
20401844:	45a2                	lw	a1,8(sp)
20401846:	892a                	mv	s2,a0
20401848:	8526                	mv	a0,s1
2040184a:	2a5d                	jal	20401a00 <_malloc_r>
2040184c:	ed01                	bnez	a0,20401864 <__smakebuf_r+0x54>
2040184e:	00c41783          	lh	a5,12(s0)
20401852:	2007f713          	andi	a4,a5,512
20401856:	ff69                	bnez	a4,20401830 <__smakebuf_r+0x20>
20401858:	9bf1                	andi	a5,a5,-4
2040185a:	0027e793          	ori	a5,a5,2
2040185e:	00f41623          	sh	a5,12(s0)
20401862:	b7c9                	j	20401824 <__smakebuf_r+0x14>
20401864:	00000797          	auipc	a5,0x0
20401868:	d9278793          	addi	a5,a5,-622 # 204015f6 <_cleanup_r>
2040186c:	d49c                	sw	a5,40(s1)
2040186e:	00c45783          	lhu	a5,12(s0)
20401872:	c008                	sw	a0,0(s0)
20401874:	c808                	sw	a0,16(s0)
20401876:	0807e793          	ori	a5,a5,128
2040187a:	00f41623          	sh	a5,12(s0)
2040187e:	47a2                	lw	a5,8(sp)
20401880:	c85c                	sw	a5,20(s0)
20401882:	47b2                	lw	a5,12(sp)
20401884:	cf89                	beqz	a5,2040189e <__smakebuf_r+0x8e>
20401886:	00e41583          	lh	a1,14(s0)
2040188a:	8526                	mv	a0,s1
2040188c:	2dd9                	jal	20401f62 <_isatty_r>
2040188e:	c901                	beqz	a0,2040189e <__smakebuf_r+0x8e>
20401890:	00c45783          	lhu	a5,12(s0)
20401894:	9bf1                	andi	a5,a5,-4
20401896:	0017e793          	ori	a5,a5,1
2040189a:	00f41623          	sh	a5,12(s0)
2040189e:	00c45783          	lhu	a5,12(s0)
204018a2:	00f96933          	or	s2,s2,a5
204018a6:	01241623          	sh	s2,12(s0)
204018aa:	b759                	j	20401830 <__smakebuf_r+0x20>

204018ac <memset>:
memset():
204018ac:	433d                	li	t1,15
204018ae:	872a                	mv	a4,a0
204018b0:	02c37363          	bgeu	t1,a2,204018d6 <memset+0x2a>
204018b4:	00f77793          	andi	a5,a4,15
204018b8:	efbd                	bnez	a5,20401936 <memset+0x8a>
204018ba:	e5ad                	bnez	a1,20401924 <memset+0x78>
204018bc:	ff067693          	andi	a3,a2,-16
204018c0:	8a3d                	andi	a2,a2,15
204018c2:	96ba                	add	a3,a3,a4
204018c4:	c30c                	sw	a1,0(a4)
204018c6:	c34c                	sw	a1,4(a4)
204018c8:	c70c                	sw	a1,8(a4)
204018ca:	c74c                	sw	a1,12(a4)
204018cc:	0741                	addi	a4,a4,16
204018ce:	fed76be3          	bltu	a4,a3,204018c4 <memset+0x18>
204018d2:	e211                	bnez	a2,204018d6 <memset+0x2a>
204018d4:	8082                	ret
204018d6:	40c306b3          	sub	a3,t1,a2
204018da:	068a                	slli	a3,a3,0x2
204018dc:	00000297          	auipc	t0,0x0
204018e0:	9696                	add	a3,a3,t0
204018e2:	00a68067          	jr	10(a3)
204018e6:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffac5a>
204018ea:	00b706a3          	sb	a1,13(a4)
204018ee:	00b70623          	sb	a1,12(a4)
204018f2:	00b705a3          	sb	a1,11(a4)
204018f6:	00b70523          	sb	a1,10(a4)
204018fa:	00b704a3          	sb	a1,9(a4)
204018fe:	00b70423          	sb	a1,8(a4)
20401902:	00b703a3          	sb	a1,7(a4)
20401906:	00b70323          	sb	a1,6(a4)
2040190a:	00b702a3          	sb	a1,5(a4)
2040190e:	00b70223          	sb	a1,4(a4)
20401912:	00b701a3          	sb	a1,3(a4)
20401916:	00b70123          	sb	a1,2(a4)
2040191a:	00b700a3          	sb	a1,1(a4)
2040191e:	00b70023          	sb	a1,0(a4)
20401922:	8082                	ret
20401924:	0ff5f593          	andi	a1,a1,255
20401928:	00859693          	slli	a3,a1,0x8
2040192c:	8dd5                	or	a1,a1,a3
2040192e:	01059693          	slli	a3,a1,0x10
20401932:	8dd5                	or	a1,a1,a3
20401934:	b761                	j	204018bc <memset+0x10>
20401936:	00279693          	slli	a3,a5,0x2
2040193a:	00000297          	auipc	t0,0x0
2040193e:	9696                	add	a3,a3,t0
20401940:	8286                	mv	t0,ra
20401942:	fa8680e7          	jalr	-88(a3)
20401946:	8096                	mv	ra,t0
20401948:	17c1                	addi	a5,a5,-16
2040194a:	8f1d                	sub	a4,a4,a5
2040194c:	963e                	add	a2,a2,a5
2040194e:	f8c374e3          	bgeu	t1,a2,204018d6 <memset+0x2a>
20401952:	b7a5                	j	204018ba <memset+0xe>

20401954 <_free_r>:
_free_r():
20401954:	c5cd                	beqz	a1,204019fe <_free_r+0xaa>
20401956:	ffc5a783          	lw	a5,-4(a1)
2040195a:	1141                	addi	sp,sp,-16
2040195c:	c422                	sw	s0,8(sp)
2040195e:	c606                	sw	ra,12(sp)
20401960:	c226                	sw	s1,4(sp)
20401962:	ffc58413          	addi	s0,a1,-4
20401966:	0007d363          	bgez	a5,2040196c <_free_r+0x18>
2040196a:	943e                	add	s0,s0,a5
2040196c:	84aa                	mv	s1,a0
2040196e:	2d8d                	jal	20401fe0 <__malloc_lock>
20401970:	5fc00797          	auipc	a5,0x5fc00
20401974:	dc078793          	addi	a5,a5,-576 # 80001730 <metal_segment_data_target_end>
20401978:	439c                	lw	a5,0(a5)
2040197a:	ef89                	bnez	a5,20401994 <_free_r+0x40>
2040197c:	00042223          	sw	zero,4(s0)
20401980:	5fc00797          	auipc	a5,0x5fc00
20401984:	da87a823          	sw	s0,-592(a5) # 80001730 <metal_segment_data_target_end>
20401988:	4422                	lw	s0,8(sp)
2040198a:	40b2                	lw	ra,12(sp)
2040198c:	8526                	mv	a0,s1
2040198e:	4492                	lw	s1,4(sp)
20401990:	0141                	addi	sp,sp,16
20401992:	ad81                	j	20401fe2 <__malloc_unlock>
20401994:	00f47e63          	bgeu	s0,a5,204019b0 <_free_r+0x5c>
20401998:	4014                	lw	a3,0(s0)
2040199a:	00d40733          	add	a4,s0,a3
2040199e:	00e79663          	bne	a5,a4,204019aa <_free_r+0x56>
204019a2:	4398                	lw	a4,0(a5)
204019a4:	43dc                	lw	a5,4(a5)
204019a6:	9736                	add	a4,a4,a3
204019a8:	c018                	sw	a4,0(s0)
204019aa:	c05c                	sw	a5,4(s0)
204019ac:	bfd1                	j	20401980 <_free_r+0x2c>
204019ae:	87ba                	mv	a5,a4
204019b0:	43d8                	lw	a4,4(a5)
204019b2:	c319                	beqz	a4,204019b8 <_free_r+0x64>
204019b4:	fee47de3          	bgeu	s0,a4,204019ae <_free_r+0x5a>
204019b8:	4394                	lw	a3,0(a5)
204019ba:	00d78633          	add	a2,a5,a3
204019be:	00861f63          	bne	a2,s0,204019dc <_free_r+0x88>
204019c2:	4010                	lw	a2,0(s0)
204019c4:	96b2                	add	a3,a3,a2
204019c6:	c394                	sw	a3,0(a5)
204019c8:	00d78633          	add	a2,a5,a3
204019cc:	fac71ee3          	bne	a4,a2,20401988 <_free_r+0x34>
204019d0:	4310                	lw	a2,0(a4)
204019d2:	4358                	lw	a4,4(a4)
204019d4:	96b2                	add	a3,a3,a2
204019d6:	c394                	sw	a3,0(a5)
204019d8:	c3d8                	sw	a4,4(a5)
204019da:	b77d                	j	20401988 <_free_r+0x34>
204019dc:	00c47563          	bgeu	s0,a2,204019e6 <_free_r+0x92>
204019e0:	47b1                	li	a5,12
204019e2:	c09c                	sw	a5,0(s1)
204019e4:	b755                	j	20401988 <_free_r+0x34>
204019e6:	4010                	lw	a2,0(s0)
204019e8:	00c406b3          	add	a3,s0,a2
204019ec:	00d71663          	bne	a4,a3,204019f8 <_free_r+0xa4>
204019f0:	4314                	lw	a3,0(a4)
204019f2:	4358                	lw	a4,4(a4)
204019f4:	96b2                	add	a3,a3,a2
204019f6:	c014                	sw	a3,0(s0)
204019f8:	c058                	sw	a4,4(s0)
204019fa:	c3c0                	sw	s0,4(a5)
204019fc:	b771                	j	20401988 <_free_r+0x34>
204019fe:	8082                	ret

20401a00 <_malloc_r>:
_malloc_r():
20401a00:	1101                	addi	sp,sp,-32
20401a02:	ca26                	sw	s1,20(sp)
20401a04:	00358493          	addi	s1,a1,3
20401a08:	98f1                	andi	s1,s1,-4
20401a0a:	ce06                	sw	ra,28(sp)
20401a0c:	cc22                	sw	s0,24(sp)
20401a0e:	c84a                	sw	s2,16(sp)
20401a10:	c64e                	sw	s3,12(sp)
20401a12:	04a1                	addi	s1,s1,8
20401a14:	47b1                	li	a5,12
20401a16:	04f4f763          	bgeu	s1,a5,20401a64 <_malloc_r+0x64>
20401a1a:	44b1                	li	s1,12
20401a1c:	04b4e663          	bltu	s1,a1,20401a68 <_malloc_r+0x68>
20401a20:	892a                	mv	s2,a0
20401a22:	2b7d                	jal	20401fe0 <__malloc_lock>
20401a24:	5fc00797          	auipc	a5,0x5fc00
20401a28:	d0c78793          	addi	a5,a5,-756 # 80001730 <metal_segment_data_target_end>
20401a2c:	4398                	lw	a4,0(a5)
20401a2e:	843a                	mv	s0,a4
20401a30:	e431                	bnez	s0,20401a7c <_malloc_r+0x7c>
20401a32:	5fc00797          	auipc	a5,0x5fc00
20401a36:	d0278793          	addi	a5,a5,-766 # 80001734 <__malloc_sbrk_start>
20401a3a:	439c                	lw	a5,0(a5)
20401a3c:	eb81                	bnez	a5,20401a4c <_malloc_r+0x4c>
20401a3e:	4581                	li	a1,0
20401a40:	854a                	mv	a0,s2
20401a42:	2645                	jal	20401de2 <_sbrk_r>
20401a44:	5fc00797          	auipc	a5,0x5fc00
20401a48:	cea7a823          	sw	a0,-784(a5) # 80001734 <__malloc_sbrk_start>
20401a4c:	85a6                	mv	a1,s1
20401a4e:	854a                	mv	a0,s2
20401a50:	2e49                	jal	20401de2 <_sbrk_r>
20401a52:	59fd                	li	s3,-1
20401a54:	07351963          	bne	a0,s3,20401ac6 <_malloc_r+0xc6>
20401a58:	47b1                	li	a5,12
20401a5a:	00f92023          	sw	a5,0(s2)
20401a5e:	854a                	mv	a0,s2
20401a60:	2349                	jal	20401fe2 <__malloc_unlock>
20401a62:	a029                	j	20401a6c <_malloc_r+0x6c>
20401a64:	fa04dce3          	bgez	s1,20401a1c <_malloc_r+0x1c>
20401a68:	47b1                	li	a5,12
20401a6a:	c11c                	sw	a5,0(a0)
20401a6c:	4501                	li	a0,0
20401a6e:	40f2                	lw	ra,28(sp)
20401a70:	4462                	lw	s0,24(sp)
20401a72:	44d2                	lw	s1,20(sp)
20401a74:	4942                	lw	s2,16(sp)
20401a76:	49b2                	lw	s3,12(sp)
20401a78:	6105                	addi	sp,sp,32
20401a7a:	8082                	ret
20401a7c:	401c                	lw	a5,0(s0)
20401a7e:	8f85                	sub	a5,a5,s1
20401a80:	0407c063          	bltz	a5,20401ac0 <_malloc_r+0xc0>
20401a84:	46ad                	li	a3,11
20401a86:	00f6f663          	bgeu	a3,a5,20401a92 <_malloc_r+0x92>
20401a8a:	c01c                	sw	a5,0(s0)
20401a8c:	943e                	add	s0,s0,a5
20401a8e:	c004                	sw	s1,0(s0)
20401a90:	a801                	j	20401aa0 <_malloc_r+0xa0>
20401a92:	405c                	lw	a5,4(s0)
20401a94:	02871463          	bne	a4,s0,20401abc <_malloc_r+0xbc>
20401a98:	5fc00717          	auipc	a4,0x5fc00
20401a9c:	c8f72c23          	sw	a5,-872(a4) # 80001730 <metal_segment_data_target_end>
20401aa0:	854a                	mv	a0,s2
20401aa2:	2381                	jal	20401fe2 <__malloc_unlock>
20401aa4:	00b40513          	addi	a0,s0,11
20401aa8:	00440793          	addi	a5,s0,4
20401aac:	9961                	andi	a0,a0,-8
20401aae:	40f50733          	sub	a4,a0,a5
20401ab2:	df55                	beqz	a4,20401a6e <_malloc_r+0x6e>
20401ab4:	943a                	add	s0,s0,a4
20401ab6:	8f89                	sub	a5,a5,a0
20401ab8:	c01c                	sw	a5,0(s0)
20401aba:	bf55                	j	20401a6e <_malloc_r+0x6e>
20401abc:	c35c                	sw	a5,4(a4)
20401abe:	b7cd                	j	20401aa0 <_malloc_r+0xa0>
20401ac0:	8722                	mv	a4,s0
20401ac2:	4040                	lw	s0,4(s0)
20401ac4:	b7b5                	j	20401a30 <_malloc_r+0x30>
20401ac6:	00350413          	addi	s0,a0,3
20401aca:	9871                	andi	s0,s0,-4
20401acc:	fc8501e3          	beq	a0,s0,20401a8e <_malloc_r+0x8e>
20401ad0:	40a405b3          	sub	a1,s0,a0
20401ad4:	854a                	mv	a0,s2
20401ad6:	2631                	jal	20401de2 <_sbrk_r>
20401ad8:	fb351be3          	bne	a0,s3,20401a8e <_malloc_r+0x8e>
20401adc:	bfb5                	j	20401a58 <_malloc_r+0x58>

20401ade <__sfputc_r>:
__sfputc_r():
20401ade:	461c                	lw	a5,8(a2)
20401ae0:	17fd                	addi	a5,a5,-1
20401ae2:	c61c                	sw	a5,8(a2)
20401ae4:	0007da63          	bgez	a5,20401af8 <__sfputc_r+0x1a>
20401ae8:	4e18                	lw	a4,24(a2)
20401aea:	00e7c563          	blt	a5,a4,20401af4 <__sfputc_r+0x16>
20401aee:	47a9                	li	a5,10
20401af0:	00f59463          	bne	a1,a5,20401af8 <__sfputc_r+0x1a>
20401af4:	f1cff06f          	j	20401210 <__swbuf_r>
20401af8:	421c                	lw	a5,0(a2)
20401afa:	852e                	mv	a0,a1
20401afc:	00178713          	addi	a4,a5,1
20401b00:	c218                	sw	a4,0(a2)
20401b02:	00b78023          	sb	a1,0(a5)
20401b06:	8082                	ret

20401b08 <__sfputs_r>:
__sfputs_r():
20401b08:	1101                	addi	sp,sp,-32
20401b0a:	cc22                	sw	s0,24(sp)
20401b0c:	ca26                	sw	s1,20(sp)
20401b0e:	c84a                	sw	s2,16(sp)
20401b10:	c64e                	sw	s3,12(sp)
20401b12:	c452                	sw	s4,8(sp)
20401b14:	ce06                	sw	ra,28(sp)
20401b16:	892a                	mv	s2,a0
20401b18:	89ae                	mv	s3,a1
20401b1a:	8432                	mv	s0,a2
20401b1c:	00d604b3          	add	s1,a2,a3
20401b20:	5a7d                	li	s4,-1
20401b22:	00941463          	bne	s0,s1,20401b2a <__sfputs_r+0x22>
20401b26:	4501                	li	a0,0
20401b28:	a809                	j	20401b3a <__sfputs_r+0x32>
20401b2a:	00044583          	lbu	a1,0(s0)
20401b2e:	864e                	mv	a2,s3
20401b30:	854a                	mv	a0,s2
20401b32:	3775                	jal	20401ade <__sfputc_r>
20401b34:	0405                	addi	s0,s0,1
20401b36:	ff4516e3          	bne	a0,s4,20401b22 <__sfputs_r+0x1a>
20401b3a:	40f2                	lw	ra,28(sp)
20401b3c:	4462                	lw	s0,24(sp)
20401b3e:	44d2                	lw	s1,20(sp)
20401b40:	4942                	lw	s2,16(sp)
20401b42:	49b2                	lw	s3,12(sp)
20401b44:	4a22                	lw	s4,8(sp)
20401b46:	6105                	addi	sp,sp,32
20401b48:	8082                	ret

20401b4a <_vfiprintf_r>:
_vfiprintf_r():
20401b4a:	7135                	addi	sp,sp,-160
20401b4c:	cd22                	sw	s0,152(sp)
20401b4e:	cb26                	sw	s1,148(sp)
20401b50:	c94a                	sw	s2,144(sp)
20401b52:	c74e                	sw	s3,140(sp)
20401b54:	cf06                	sw	ra,156(sp)
20401b56:	c552                	sw	s4,136(sp)
20401b58:	c356                	sw	s5,132(sp)
20401b5a:	c15a                	sw	s6,128(sp)
20401b5c:	dede                	sw	s7,124(sp)
20401b5e:	dce2                	sw	s8,120(sp)
20401b60:	dae6                	sw	s9,116(sp)
20401b62:	89aa                	mv	s3,a0
20401b64:	84ae                	mv	s1,a1
20401b66:	8932                	mv	s2,a2
20401b68:	8436                	mv	s0,a3
20401b6a:	c501                	beqz	a0,20401b72 <_vfiprintf_r+0x28>
20401b6c:	4d1c                	lw	a5,24(a0)
20401b6e:	e391                	bnez	a5,20401b72 <_vfiprintf_r+0x28>
20401b70:	3cd1                	jal	20401644 <__sinit>
20401b72:	00004797          	auipc	a5,0x4
20401b76:	3a278793          	addi	a5,a5,930 # 20405f14 <__sf_fake_stdin>
20401b7a:	0cf49b63          	bne	s1,a5,20401c50 <_vfiprintf_r+0x106>
20401b7e:	0049a483          	lw	s1,4(s3)
20401b82:	00c4d783          	lhu	a5,12(s1)
20401b86:	8ba1                	andi	a5,a5,8
20401b88:	c7f5                	beqz	a5,20401c74 <_vfiprintf_r+0x12a>
20401b8a:	489c                	lw	a5,16(s1)
20401b8c:	c7e5                	beqz	a5,20401c74 <_vfiprintf_r+0x12a>
20401b8e:	02000793          	li	a5,32
20401b92:	02f104a3          	sb	a5,41(sp)
20401b96:	03000793          	li	a5,48
20401b9a:	d202                	sw	zero,36(sp)
20401b9c:	02f10523          	sb	a5,42(sp)
20401ba0:	c622                	sw	s0,12(sp)
20401ba2:	02500b93          	li	s7,37
20401ba6:	00004a97          	auipc	s5,0x4
20401baa:	3aea8a93          	addi	s5,s5,942 # 20405f54 <__sf_fake_stdout+0x20>
20401bae:	4c05                	li	s8,1
20401bb0:	4b29                	li	s6,10
20401bb2:	844a                	mv	s0,s2
20401bb4:	00044783          	lbu	a5,0(s0)
20401bb8:	c399                	beqz	a5,20401bbe <_vfiprintf_r+0x74>
20401bba:	0f779063          	bne	a5,s7,20401c9a <_vfiprintf_r+0x150>
20401bbe:	41240cb3          	sub	s9,s0,s2
20401bc2:	000c8d63          	beqz	s9,20401bdc <_vfiprintf_r+0x92>
20401bc6:	86e6                	mv	a3,s9
20401bc8:	864a                	mv	a2,s2
20401bca:	85a6                	mv	a1,s1
20401bcc:	854e                	mv	a0,s3
20401bce:	3f2d                	jal	20401b08 <__sfputs_r>
20401bd0:	57fd                	li	a5,-1
20401bd2:	1ef50663          	beq	a0,a5,20401dbe <_vfiprintf_r+0x274>
20401bd6:	5692                	lw	a3,36(sp)
20401bd8:	96e6                	add	a3,a3,s9
20401bda:	d236                	sw	a3,36(sp)
20401bdc:	00044783          	lbu	a5,0(s0)
20401be0:	1c078f63          	beqz	a5,20401dbe <_vfiprintf_r+0x274>
20401be4:	57fd                	li	a5,-1
20401be6:	00140913          	addi	s2,s0,1
20401bea:	c802                	sw	zero,16(sp)
20401bec:	ce02                	sw	zero,28(sp)
20401bee:	ca3e                	sw	a5,20(sp)
20401bf0:	cc02                	sw	zero,24(sp)
20401bf2:	040109a3          	sb	zero,83(sp)
20401bf6:	d482                	sw	zero,104(sp)
20401bf8:	00094583          	lbu	a1,0(s2)
20401bfc:	4615                	li	a2,5
20401bfe:	8556                	mv	a0,s5
20401c00:	26d9                	jal	20401fc6 <memchr>
20401c02:	00190413          	addi	s0,s2,1
20401c06:	47c2                	lw	a5,16(sp)
20401c08:	e959                	bnez	a0,20401c9e <_vfiprintf_r+0x154>
20401c0a:	0107f713          	andi	a4,a5,16
20401c0e:	c709                	beqz	a4,20401c18 <_vfiprintf_r+0xce>
20401c10:	02000713          	li	a4,32
20401c14:	04e109a3          	sb	a4,83(sp)
20401c18:	0087f713          	andi	a4,a5,8
20401c1c:	c709                	beqz	a4,20401c26 <_vfiprintf_r+0xdc>
20401c1e:	02b00713          	li	a4,43
20401c22:	04e109a3          	sb	a4,83(sp)
20401c26:	00094683          	lbu	a3,0(s2)
20401c2a:	02a00713          	li	a4,42
20401c2e:	08e68063          	beq	a3,a4,20401cae <_vfiprintf_r+0x164>
20401c32:	47f2                	lw	a5,28(sp)
20401c34:	844a                	mv	s0,s2
20401c36:	4681                	li	a3,0
20401c38:	4625                	li	a2,9
20401c3a:	00044703          	lbu	a4,0(s0)
20401c3e:	00140593          	addi	a1,s0,1
20401c42:	fd070713          	addi	a4,a4,-48
20401c46:	0ae67963          	bgeu	a2,a4,20401cf8 <_vfiprintf_r+0x1ae>
20401c4a:	cab5                	beqz	a3,20401cbe <_vfiprintf_r+0x174>
20401c4c:	ce3e                	sw	a5,28(sp)
20401c4e:	a885                	j	20401cbe <_vfiprintf_r+0x174>
20401c50:	00004797          	auipc	a5,0x4
20401c54:	2e478793          	addi	a5,a5,740 # 20405f34 <__sf_fake_stdout>
20401c58:	00f49563          	bne	s1,a5,20401c62 <_vfiprintf_r+0x118>
20401c5c:	0089a483          	lw	s1,8(s3)
20401c60:	b70d                	j	20401b82 <_vfiprintf_r+0x38>
20401c62:	00004797          	auipc	a5,0x4
20401c66:	29278793          	addi	a5,a5,658 # 20405ef4 <__sf_fake_stderr>
20401c6a:	f0f49ce3          	bne	s1,a5,20401b82 <_vfiprintf_r+0x38>
20401c6e:	00c9a483          	lw	s1,12(s3)
20401c72:	bf01                	j	20401b82 <_vfiprintf_r+0x38>
20401c74:	85a6                	mv	a1,s1
20401c76:	854e                	mv	a0,s3
20401c78:	e58ff0ef          	jal	ra,204012d0 <__swsetup_r>
20401c7c:	d909                	beqz	a0,20401b8e <_vfiprintf_r+0x44>
20401c7e:	557d                	li	a0,-1
20401c80:	40fa                	lw	ra,156(sp)
20401c82:	446a                	lw	s0,152(sp)
20401c84:	44da                	lw	s1,148(sp)
20401c86:	494a                	lw	s2,144(sp)
20401c88:	49ba                	lw	s3,140(sp)
20401c8a:	4a2a                	lw	s4,136(sp)
20401c8c:	4a9a                	lw	s5,132(sp)
20401c8e:	4b0a                	lw	s6,128(sp)
20401c90:	5bf6                	lw	s7,124(sp)
20401c92:	5c66                	lw	s8,120(sp)
20401c94:	5cd6                	lw	s9,116(sp)
20401c96:	610d                	addi	sp,sp,160
20401c98:	8082                	ret
20401c9a:	0405                	addi	s0,s0,1
20401c9c:	bf21                	j	20401bb4 <_vfiprintf_r+0x6a>
20401c9e:	41550533          	sub	a0,a0,s5
20401ca2:	00ac1533          	sll	a0,s8,a0
20401ca6:	8fc9                	or	a5,a5,a0
20401ca8:	c83e                	sw	a5,16(sp)
20401caa:	8922                	mv	s2,s0
20401cac:	b7b1                	j	20401bf8 <_vfiprintf_r+0xae>
20401cae:	4732                	lw	a4,12(sp)
20401cb0:	00470693          	addi	a3,a4,4
20401cb4:	4318                	lw	a4,0(a4)
20401cb6:	c636                	sw	a3,12(sp)
20401cb8:	02074963          	bltz	a4,20401cea <_vfiprintf_r+0x1a0>
20401cbc:	ce3a                	sw	a4,28(sp)
20401cbe:	00044703          	lbu	a4,0(s0)
20401cc2:	02e00793          	li	a5,46
20401cc6:	04f71f63          	bne	a4,a5,20401d24 <_vfiprintf_r+0x1da>
20401cca:	00144703          	lbu	a4,1(s0)
20401cce:	02a00793          	li	a5,42
20401cd2:	02f71b63          	bne	a4,a5,20401d08 <_vfiprintf_r+0x1be>
20401cd6:	47b2                	lw	a5,12(sp)
20401cd8:	0409                	addi	s0,s0,2
20401cda:	00478713          	addi	a4,a5,4
20401cde:	439c                	lw	a5,0(a5)
20401ce0:	c63a                	sw	a4,12(sp)
20401ce2:	0207c163          	bltz	a5,20401d04 <_vfiprintf_r+0x1ba>
20401ce6:	ca3e                	sw	a5,20(sp)
20401ce8:	a835                	j	20401d24 <_vfiprintf_r+0x1da>
20401cea:	40e00733          	neg	a4,a4
20401cee:	0027e793          	ori	a5,a5,2
20401cf2:	ce3a                	sw	a4,28(sp)
20401cf4:	c83e                	sw	a5,16(sp)
20401cf6:	b7e1                	j	20401cbe <_vfiprintf_r+0x174>
20401cf8:	036787b3          	mul	a5,a5,s6
20401cfc:	4685                	li	a3,1
20401cfe:	842e                	mv	s0,a1
20401d00:	97ba                	add	a5,a5,a4
20401d02:	bf25                	j	20401c3a <_vfiprintf_r+0xf0>
20401d04:	57fd                	li	a5,-1
20401d06:	b7c5                	j	20401ce6 <_vfiprintf_r+0x19c>
20401d08:	0405                	addi	s0,s0,1
20401d0a:	ca02                	sw	zero,20(sp)
20401d0c:	4681                	li	a3,0
20401d0e:	4781                	li	a5,0
20401d10:	4625                	li	a2,9
20401d12:	00044703          	lbu	a4,0(s0)
20401d16:	00140593          	addi	a1,s0,1
20401d1a:	fd070713          	addi	a4,a4,-48
20401d1e:	06e67663          	bgeu	a2,a4,20401d8a <_vfiprintf_r+0x240>
20401d22:	f2f1                	bnez	a3,20401ce6 <_vfiprintf_r+0x19c>
20401d24:	00044583          	lbu	a1,0(s0)
20401d28:	460d                	li	a2,3
20401d2a:	00004517          	auipc	a0,0x4
20401d2e:	23250513          	addi	a0,a0,562 # 20405f5c <__sf_fake_stdout+0x28>
20401d32:	2c51                	jal	20401fc6 <memchr>
20401d34:	cd11                	beqz	a0,20401d50 <_vfiprintf_r+0x206>
20401d36:	00004797          	auipc	a5,0x4
20401d3a:	22678793          	addi	a5,a5,550 # 20405f5c <__sf_fake_stdout+0x28>
20401d3e:	8d1d                	sub	a0,a0,a5
20401d40:	04000793          	li	a5,64
20401d44:	00a797b3          	sll	a5,a5,a0
20401d48:	4542                	lw	a0,16(sp)
20401d4a:	0405                	addi	s0,s0,1
20401d4c:	8d5d                	or	a0,a0,a5
20401d4e:	c82a                	sw	a0,16(sp)
20401d50:	00044583          	lbu	a1,0(s0)
20401d54:	4619                	li	a2,6
20401d56:	00004517          	auipc	a0,0x4
20401d5a:	20a50513          	addi	a0,a0,522 # 20405f60 <__sf_fake_stdout+0x2c>
20401d5e:	00140913          	addi	s2,s0,1
20401d62:	02b10423          	sb	a1,40(sp)
20401d66:	2485                	jal	20401fc6 <memchr>
20401d68:	c13d                	beqz	a0,20401dce <_vfiprintf_r+0x284>
20401d6a:	dfbfe797          	auipc	a5,0xdfbfe
20401d6e:	29678793          	addi	a5,a5,662 # 0 <__metal_boot_hart>
20401d72:	e795                	bnez	a5,20401d9e <_vfiprintf_r+0x254>
20401d74:	4742                	lw	a4,16(sp)
20401d76:	47b2                	lw	a5,12(sp)
20401d78:	10077713          	andi	a4,a4,256
20401d7c:	cf09                	beqz	a4,20401d96 <_vfiprintf_r+0x24c>
20401d7e:	0791                	addi	a5,a5,4
20401d80:	c63e                	sw	a5,12(sp)
20401d82:	5792                	lw	a5,36(sp)
20401d84:	97d2                	add	a5,a5,s4
20401d86:	d23e                	sw	a5,36(sp)
20401d88:	b52d                	j	20401bb2 <_vfiprintf_r+0x68>
20401d8a:	036787b3          	mul	a5,a5,s6
20401d8e:	4685                	li	a3,1
20401d90:	842e                	mv	s0,a1
20401d92:	97ba                	add	a5,a5,a4
20401d94:	bfbd                	j	20401d12 <_vfiprintf_r+0x1c8>
20401d96:	079d                	addi	a5,a5,7
20401d98:	9be1                	andi	a5,a5,-8
20401d9a:	07a1                	addi	a5,a5,8
20401d9c:	b7d5                	j	20401d80 <_vfiprintf_r+0x236>
20401d9e:	0078                	addi	a4,sp,12
20401da0:	00000697          	auipc	a3,0x0
20401da4:	d6868693          	addi	a3,a3,-664 # 20401b08 <__sfputs_r>
20401da8:	8626                	mv	a2,s1
20401daa:	080c                	addi	a1,sp,16
20401dac:	854e                	mv	a0,s3
20401dae:	00000097          	auipc	ra,0x0
20401db2:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
20401db6:	57fd                	li	a5,-1
20401db8:	8a2a                	mv	s4,a0
20401dba:	fcf514e3          	bne	a0,a5,20401d82 <_vfiprintf_r+0x238>
20401dbe:	00c4d783          	lhu	a5,12(s1)
20401dc2:	0407f793          	andi	a5,a5,64
20401dc6:	ea079ce3          	bnez	a5,20401c7e <_vfiprintf_r+0x134>
20401dca:	5512                	lw	a0,36(sp)
20401dcc:	bd55                	j	20401c80 <_vfiprintf_r+0x136>
20401dce:	0078                	addi	a4,sp,12
20401dd0:	00000697          	auipc	a3,0x0
20401dd4:	d3868693          	addi	a3,a3,-712 # 20401b08 <__sfputs_r>
20401dd8:	8626                	mv	a2,s1
20401dda:	080c                	addi	a1,sp,16
20401ddc:	854e                	mv	a0,s3
20401dde:	2e09                	jal	204020f0 <_printf_i>
20401de0:	bfd9                	j	20401db6 <_vfiprintf_r+0x26c>

20401de2 <_sbrk_r>:
_sbrk_r():
20401de2:	1141                	addi	sp,sp,-16
20401de4:	c422                	sw	s0,8(sp)
20401de6:	842a                	mv	s0,a0
20401de8:	852e                	mv	a0,a1
20401dea:	5fc01797          	auipc	a5,0x5fc01
20401dee:	9c07a323          	sw	zero,-1594(a5) # 800027b0 <errno>
20401df2:	c606                	sw	ra,12(sp)
20401df4:	2579                	jal	20402482 <_sbrk>
20401df6:	57fd                	li	a5,-1
20401df8:	00f51963          	bne	a0,a5,20401e0a <_sbrk_r+0x28>
20401dfc:	5fc01797          	auipc	a5,0x5fc01
20401e00:	9b478793          	addi	a5,a5,-1612 # 800027b0 <errno>
20401e04:	439c                	lw	a5,0(a5)
20401e06:	c391                	beqz	a5,20401e0a <_sbrk_r+0x28>
20401e08:	c01c                	sw	a5,0(s0)
20401e0a:	40b2                	lw	ra,12(sp)
20401e0c:	4422                	lw	s0,8(sp)
20401e0e:	0141                	addi	sp,sp,16
20401e10:	8082                	ret

20401e12 <__sread>:
__sread():
20401e12:	1141                	addi	sp,sp,-16
20401e14:	c422                	sw	s0,8(sp)
20401e16:	842e                	mv	s0,a1
20401e18:	00e59583          	lh	a1,14(a1)
20401e1c:	c606                	sw	ra,12(sp)
20401e1e:	2b95                	jal	20402392 <_read_r>
20401e20:	00054963          	bltz	a0,20401e32 <__sread+0x20>
20401e24:	487c                	lw	a5,84(s0)
20401e26:	97aa                	add	a5,a5,a0
20401e28:	c87c                	sw	a5,84(s0)
20401e2a:	40b2                	lw	ra,12(sp)
20401e2c:	4422                	lw	s0,8(sp)
20401e2e:	0141                	addi	sp,sp,16
20401e30:	8082                	ret
20401e32:	00c45783          	lhu	a5,12(s0)
20401e36:	777d                	lui	a4,0xfffff
20401e38:	177d                	addi	a4,a4,-1
20401e3a:	8ff9                	and	a5,a5,a4
20401e3c:	00f41623          	sh	a5,12(s0)
20401e40:	b7ed                	j	20401e2a <__sread+0x18>

20401e42 <__swrite>:
__swrite():
20401e42:	00c5d783          	lhu	a5,12(a1)
20401e46:	1101                	addi	sp,sp,-32
20401e48:	cc22                	sw	s0,24(sp)
20401e4a:	ca26                	sw	s1,20(sp)
20401e4c:	c84a                	sw	s2,16(sp)
20401e4e:	c64e                	sw	s3,12(sp)
20401e50:	ce06                	sw	ra,28(sp)
20401e52:	1007f793          	andi	a5,a5,256
20401e56:	84aa                	mv	s1,a0
20401e58:	842e                	mv	s0,a1
20401e5a:	8932                	mv	s2,a2
20401e5c:	89b6                	mv	s3,a3
20401e5e:	c791                	beqz	a5,20401e6a <__swrite+0x28>
20401e60:	00e59583          	lh	a1,14(a1)
20401e64:	4689                	li	a3,2
20401e66:	4601                	li	a2,0
20401e68:	222d                	jal	20401f92 <_lseek_r>
20401e6a:	00c45783          	lhu	a5,12(s0)
20401e6e:	777d                	lui	a4,0xfffff
20401e70:	177d                	addi	a4,a4,-1
20401e72:	8ff9                	and	a5,a5,a4
20401e74:	00f41623          	sh	a5,12(s0)
20401e78:	00e41583          	lh	a1,14(s0)
20401e7c:	4462                	lw	s0,24(sp)
20401e7e:	40f2                	lw	ra,28(sp)
20401e80:	86ce                	mv	a3,s3
20401e82:	864a                	mv	a2,s2
20401e84:	49b2                	lw	s3,12(sp)
20401e86:	4942                	lw	s2,16(sp)
20401e88:	8526                	mv	a0,s1
20401e8a:	44d2                	lw	s1,20(sp)
20401e8c:	6105                	addi	sp,sp,32
20401e8e:	a83d                	j	20401ecc <_write_r>

20401e90 <__sseek>:
__sseek():
20401e90:	1141                	addi	sp,sp,-16
20401e92:	c422                	sw	s0,8(sp)
20401e94:	842e                	mv	s0,a1
20401e96:	00e59583          	lh	a1,14(a1)
20401e9a:	c606                	sw	ra,12(sp)
20401e9c:	28dd                	jal	20401f92 <_lseek_r>
20401e9e:	57fd                	li	a5,-1
20401ea0:	00c45703          	lhu	a4,12(s0)
20401ea4:	00f51b63          	bne	a0,a5,20401eba <__sseek+0x2a>
20401ea8:	77fd                	lui	a5,0xfffff
20401eaa:	17fd                	addi	a5,a5,-1
20401eac:	8ff9                	and	a5,a5,a4
20401eae:	00f41623          	sh	a5,12(s0)
20401eb2:	40b2                	lw	ra,12(sp)
20401eb4:	4422                	lw	s0,8(sp)
20401eb6:	0141                	addi	sp,sp,16
20401eb8:	8082                	ret
20401eba:	6785                	lui	a5,0x1
20401ebc:	8fd9                	or	a5,a5,a4
20401ebe:	00f41623          	sh	a5,12(s0)
20401ec2:	c868                	sw	a0,84(s0)
20401ec4:	b7fd                	j	20401eb2 <__sseek+0x22>

20401ec6 <__sclose>:
__sclose():
20401ec6:	00e59583          	lh	a1,14(a1)
20401eca:	a81d                	j	20401f00 <_close_r>

20401ecc <_write_r>:
_write_r():
20401ecc:	1141                	addi	sp,sp,-16
20401ece:	c422                	sw	s0,8(sp)
20401ed0:	842a                	mv	s0,a0
20401ed2:	852e                	mv	a0,a1
20401ed4:	85b2                	mv	a1,a2
20401ed6:	8636                	mv	a2,a3
20401ed8:	5fc01797          	auipc	a5,0x5fc01
20401edc:	8c07ac23          	sw	zero,-1832(a5) # 800027b0 <errno>
20401ee0:	c606                	sw	ra,12(sp)
20401ee2:	2d39                	jal	20402500 <_write>
20401ee4:	57fd                	li	a5,-1
20401ee6:	00f51963          	bne	a0,a5,20401ef8 <_write_r+0x2c>
20401eea:	5fc01797          	auipc	a5,0x5fc01
20401eee:	8c678793          	addi	a5,a5,-1850 # 800027b0 <errno>
20401ef2:	439c                	lw	a5,0(a5)
20401ef4:	c391                	beqz	a5,20401ef8 <_write_r+0x2c>
20401ef6:	c01c                	sw	a5,0(s0)
20401ef8:	40b2                	lw	ra,12(sp)
20401efa:	4422                	lw	s0,8(sp)
20401efc:	0141                	addi	sp,sp,16
20401efe:	8082                	ret

20401f00 <_close_r>:
_close_r():
20401f00:	1141                	addi	sp,sp,-16
20401f02:	c422                	sw	s0,8(sp)
20401f04:	842a                	mv	s0,a0
20401f06:	852e                	mv	a0,a1
20401f08:	5fc01797          	auipc	a5,0x5fc01
20401f0c:	8a07a423          	sw	zero,-1880(a5) # 800027b0 <errno>
20401f10:	c606                	sw	ra,12(sp)
20401f12:	2955                	jal	204023c6 <_close>
20401f14:	57fd                	li	a5,-1
20401f16:	00f51963          	bne	a0,a5,20401f28 <_close_r+0x28>
20401f1a:	5fc01797          	auipc	a5,0x5fc01
20401f1e:	89678793          	addi	a5,a5,-1898 # 800027b0 <errno>
20401f22:	439c                	lw	a5,0(a5)
20401f24:	c391                	beqz	a5,20401f28 <_close_r+0x28>
20401f26:	c01c                	sw	a5,0(s0)
20401f28:	40b2                	lw	ra,12(sp)
20401f2a:	4422                	lw	s0,8(sp)
20401f2c:	0141                	addi	sp,sp,16
20401f2e:	8082                	ret

20401f30 <_fstat_r>:
_fstat_r():
20401f30:	1141                	addi	sp,sp,-16
20401f32:	c422                	sw	s0,8(sp)
20401f34:	842a                	mv	s0,a0
20401f36:	852e                	mv	a0,a1
20401f38:	85b2                	mv	a1,a2
20401f3a:	5fc01797          	auipc	a5,0x5fc01
20401f3e:	8607ab23          	sw	zero,-1930(a5) # 800027b0 <errno>
20401f42:	c606                	sw	ra,12(sp)
20401f44:	2155                	jal	204023e8 <_fstat>
20401f46:	57fd                	li	a5,-1
20401f48:	00f51963          	bne	a0,a5,20401f5a <_fstat_r+0x2a>
20401f4c:	5fc01797          	auipc	a5,0x5fc01
20401f50:	86478793          	addi	a5,a5,-1948 # 800027b0 <errno>
20401f54:	439c                	lw	a5,0(a5)
20401f56:	c391                	beqz	a5,20401f5a <_fstat_r+0x2a>
20401f58:	c01c                	sw	a5,0(s0)
20401f5a:	40b2                	lw	ra,12(sp)
20401f5c:	4422                	lw	s0,8(sp)
20401f5e:	0141                	addi	sp,sp,16
20401f60:	8082                	ret

20401f62 <_isatty_r>:
_isatty_r():
20401f62:	1141                	addi	sp,sp,-16
20401f64:	c422                	sw	s0,8(sp)
20401f66:	842a                	mv	s0,a0
20401f68:	852e                	mv	a0,a1
20401f6a:	5fc01797          	auipc	a5,0x5fc01
20401f6e:	8407a323          	sw	zero,-1978(a5) # 800027b0 <errno>
20401f72:	c606                	sw	ra,12(sp)
20401f74:	2969                	jal	2040240e <_isatty>
20401f76:	57fd                	li	a5,-1
20401f78:	00f51963          	bne	a0,a5,20401f8a <_isatty_r+0x28>
20401f7c:	5fc01797          	auipc	a5,0x5fc01
20401f80:	83478793          	addi	a5,a5,-1996 # 800027b0 <errno>
20401f84:	439c                	lw	a5,0(a5)
20401f86:	c391                	beqz	a5,20401f8a <_isatty_r+0x28>
20401f88:	c01c                	sw	a5,0(s0)
20401f8a:	40b2                	lw	ra,12(sp)
20401f8c:	4422                	lw	s0,8(sp)
20401f8e:	0141                	addi	sp,sp,16
20401f90:	8082                	ret

20401f92 <_lseek_r>:
_lseek_r():
20401f92:	1141                	addi	sp,sp,-16
20401f94:	c422                	sw	s0,8(sp)
20401f96:	842a                	mv	s0,a0
20401f98:	852e                	mv	a0,a1
20401f9a:	85b2                	mv	a1,a2
20401f9c:	8636                	mv	a2,a3
20401f9e:	5fc01797          	auipc	a5,0x5fc01
20401fa2:	8007a923          	sw	zero,-2030(a5) # 800027b0 <errno>
20401fa6:	c606                	sw	ra,12(sp)
20401fa8:	2159                	jal	2040242e <_lseek>
20401faa:	57fd                	li	a5,-1
20401fac:	00f51963          	bne	a0,a5,20401fbe <_lseek_r+0x2c>
20401fb0:	5fc01797          	auipc	a5,0x5fc01
20401fb4:	80078793          	addi	a5,a5,-2048 # 800027b0 <errno>
20401fb8:	439c                	lw	a5,0(a5)
20401fba:	c391                	beqz	a5,20401fbe <_lseek_r+0x2c>
20401fbc:	c01c                	sw	a5,0(s0)
20401fbe:	40b2                	lw	ra,12(sp)
20401fc0:	4422                	lw	s0,8(sp)
20401fc2:	0141                	addi	sp,sp,16
20401fc4:	8082                	ret

20401fc6 <memchr>:
memchr():
20401fc6:	0ff5f593          	andi	a1,a1,255
20401fca:	962a                	add	a2,a2,a0
20401fcc:	00c51463          	bne	a0,a2,20401fd4 <memchr+0xe>
20401fd0:	4501                	li	a0,0
20401fd2:	8082                	ret
20401fd4:	00054783          	lbu	a5,0(a0)
20401fd8:	feb78de3          	beq	a5,a1,20401fd2 <memchr+0xc>
20401fdc:	0505                	addi	a0,a0,1
20401fde:	b7fd                	j	20401fcc <memchr+0x6>

20401fe0 <__malloc_lock>:
__malloc_lock():
20401fe0:	8082                	ret

20401fe2 <__malloc_unlock>:
__malloc_unlock():
20401fe2:	8082                	ret

20401fe4 <_printf_common>:
_printf_common():
20401fe4:	7179                	addi	sp,sp,-48
20401fe6:	ca56                	sw	s5,20(sp)
20401fe8:	499c                	lw	a5,16(a1)
20401fea:	8aba                	mv	s5,a4
20401fec:	4598                	lw	a4,8(a1)
20401fee:	d422                	sw	s0,40(sp)
20401ff0:	d226                	sw	s1,36(sp)
20401ff2:	ce4e                	sw	s3,28(sp)
20401ff4:	cc52                	sw	s4,24(sp)
20401ff6:	d606                	sw	ra,44(sp)
20401ff8:	d04a                	sw	s2,32(sp)
20401ffa:	c85a                	sw	s6,16(sp)
20401ffc:	c65e                	sw	s7,12(sp)
20401ffe:	89aa                	mv	s3,a0
20402000:	842e                	mv	s0,a1
20402002:	84b2                	mv	s1,a2
20402004:	8a36                	mv	s4,a3
20402006:	00e7d363          	bge	a5,a4,2040200c <_printf_common+0x28>
2040200a:	87ba                	mv	a5,a4
2040200c:	c09c                	sw	a5,0(s1)
2040200e:	04344703          	lbu	a4,67(s0)
20402012:	c319                	beqz	a4,20402018 <_printf_common+0x34>
20402014:	0785                	addi	a5,a5,1
20402016:	c09c                	sw	a5,0(s1)
20402018:	401c                	lw	a5,0(s0)
2040201a:	0207f793          	andi	a5,a5,32
2040201e:	c781                	beqz	a5,20402026 <_printf_common+0x42>
20402020:	409c                	lw	a5,0(s1)
20402022:	0789                	addi	a5,a5,2
20402024:	c09c                	sw	a5,0(s1)
20402026:	00042903          	lw	s2,0(s0)
2040202a:	00697913          	andi	s2,s2,6
2040202e:	00091a63          	bnez	s2,20402042 <_printf_common+0x5e>
20402032:	01940b13          	addi	s6,s0,25
20402036:	5bfd                	li	s7,-1
20402038:	445c                	lw	a5,12(s0)
2040203a:	4098                	lw	a4,0(s1)
2040203c:	8f99                	sub	a5,a5,a4
2040203e:	04f94c63          	blt	s2,a5,20402096 <_printf_common+0xb2>
20402042:	401c                	lw	a5,0(s0)
20402044:	04344683          	lbu	a3,67(s0)
20402048:	0207f793          	andi	a5,a5,32
2040204c:	00d036b3          	snez	a3,a3
20402050:	eba5                	bnez	a5,204020c0 <_printf_common+0xdc>
20402052:	04340613          	addi	a2,s0,67
20402056:	85d2                	mv	a1,s4
20402058:	854e                	mv	a0,s3
2040205a:	9a82                	jalr	s5
2040205c:	57fd                	li	a5,-1
2040205e:	04f50363          	beq	a0,a5,204020a4 <_printf_common+0xc0>
20402062:	401c                	lw	a5,0(s0)
20402064:	4611                	li	a2,4
20402066:	4098                	lw	a4,0(s1)
20402068:	8b99                	andi	a5,a5,6
2040206a:	4454                	lw	a3,12(s0)
2040206c:	4481                	li	s1,0
2040206e:	00c79763          	bne	a5,a2,2040207c <_printf_common+0x98>
20402072:	40e684b3          	sub	s1,a3,a4
20402076:	0004d363          	bgez	s1,2040207c <_printf_common+0x98>
2040207a:	4481                	li	s1,0
2040207c:	441c                	lw	a5,8(s0)
2040207e:	4818                	lw	a4,16(s0)
20402080:	00f75463          	bge	a4,a5,20402088 <_printf_common+0xa4>
20402084:	8f99                	sub	a5,a5,a4
20402086:	94be                	add	s1,s1,a5
20402088:	4901                	li	s2,0
2040208a:	0469                	addi	s0,s0,26
2040208c:	5b7d                	li	s6,-1
2040208e:	05249863          	bne	s1,s2,204020de <_printf_common+0xfa>
20402092:	4501                	li	a0,0
20402094:	a809                	j	204020a6 <_printf_common+0xc2>
20402096:	4685                	li	a3,1
20402098:	865a                	mv	a2,s6
2040209a:	85d2                	mv	a1,s4
2040209c:	854e                	mv	a0,s3
2040209e:	9a82                	jalr	s5
204020a0:	01751e63          	bne	a0,s7,204020bc <_printf_common+0xd8>
204020a4:	557d                	li	a0,-1
204020a6:	50b2                	lw	ra,44(sp)
204020a8:	5422                	lw	s0,40(sp)
204020aa:	5492                	lw	s1,36(sp)
204020ac:	5902                	lw	s2,32(sp)
204020ae:	49f2                	lw	s3,28(sp)
204020b0:	4a62                	lw	s4,24(sp)
204020b2:	4ad2                	lw	s5,20(sp)
204020b4:	4b42                	lw	s6,16(sp)
204020b6:	4bb2                	lw	s7,12(sp)
204020b8:	6145                	addi	sp,sp,48
204020ba:	8082                	ret
204020bc:	0905                	addi	s2,s2,1
204020be:	bfad                	j	20402038 <_printf_common+0x54>
204020c0:	00d40733          	add	a4,s0,a3
204020c4:	03000613          	li	a2,48
204020c8:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffbc8f>
204020cc:	04544703          	lbu	a4,69(s0)
204020d0:	00168793          	addi	a5,a3,1
204020d4:	97a2                	add	a5,a5,s0
204020d6:	0689                	addi	a3,a3,2
204020d8:	04e781a3          	sb	a4,67(a5)
204020dc:	bf9d                	j	20402052 <_printf_common+0x6e>
204020de:	4685                	li	a3,1
204020e0:	8622                	mv	a2,s0
204020e2:	85d2                	mv	a1,s4
204020e4:	854e                	mv	a0,s3
204020e6:	9a82                	jalr	s5
204020e8:	fb650ee3          	beq	a0,s6,204020a4 <_printf_common+0xc0>
204020ec:	0905                	addi	s2,s2,1
204020ee:	b745                	j	2040208e <_printf_common+0xaa>

204020f0 <_printf_i>:
_printf_i():
204020f0:	7179                	addi	sp,sp,-48
204020f2:	d422                	sw	s0,40(sp)
204020f4:	d226                	sw	s1,36(sp)
204020f6:	d04a                	sw	s2,32(sp)
204020f8:	ce4e                	sw	s3,28(sp)
204020fa:	d606                	sw	ra,44(sp)
204020fc:	cc52                	sw	s4,24(sp)
204020fe:	ca56                	sw	s5,20(sp)
20402100:	c85a                	sw	s6,16(sp)
20402102:	89b6                	mv	s3,a3
20402104:	0185c683          	lbu	a3,24(a1)
20402108:	06e00793          	li	a5,110
2040210c:	8932                	mv	s2,a2
2040210e:	84aa                	mv	s1,a0
20402110:	842e                	mv	s0,a1
20402112:	04358613          	addi	a2,a1,67
20402116:	1ef68063          	beq	a3,a5,204022f6 <_printf_i+0x206>
2040211a:	06d7e263          	bltu	a5,a3,2040217e <_printf_i+0x8e>
2040211e:	06300793          	li	a5,99
20402122:	0af68263          	beq	a3,a5,204021c6 <_printf_i+0xd6>
20402126:	00d7ed63          	bltu	a5,a3,20402140 <_printf_i+0x50>
2040212a:	1e068a63          	beqz	a3,2040231e <_printf_i+0x22e>
2040212e:	05800793          	li	a5,88
20402132:	16f68663          	beq	a3,a5,2040229e <_printf_i+0x1ae>
20402136:	04240a93          	addi	s5,s0,66
2040213a:	04d40123          	sb	a3,66(s0)
2040213e:	a869                	j	204021d8 <_printf_i+0xe8>
20402140:	06400793          	li	a5,100
20402144:	00f68663          	beq	a3,a5,20402150 <_printf_i+0x60>
20402148:	06900793          	li	a5,105
2040214c:	fef695e3          	bne	a3,a5,20402136 <_printf_i+0x46>
20402150:	401c                	lw	a5,0(s0)
20402152:	4308                	lw	a0,0(a4)
20402154:	0807f693          	andi	a3,a5,128
20402158:	00450593          	addi	a1,a0,4
2040215c:	c2c1                	beqz	a3,204021dc <_printf_i+0xec>
2040215e:	411c                	lw	a5,0(a0)
20402160:	c30c                	sw	a1,0(a4)
20402162:	0007d863          	bgez	a5,20402172 <_printf_i+0x82>
20402166:	02d00713          	li	a4,45
2040216a:	40f007b3          	neg	a5,a5
2040216e:	04e401a3          	sb	a4,67(s0)
20402172:	00004697          	auipc	a3,0x4
20402176:	df668693          	addi	a3,a3,-522 # 20405f68 <__sf_fake_stdout+0x34>
2040217a:	4729                	li	a4,10
2040217c:	a065                	j	20402224 <_printf_i+0x134>
2040217e:	07300793          	li	a5,115
20402182:	1af68263          	beq	a3,a5,20402326 <_printf_i+0x236>
20402186:	00d7ef63          	bltu	a5,a3,204021a4 <_printf_i+0xb4>
2040218a:	06f00793          	li	a5,111
2040218e:	04f68f63          	beq	a3,a5,204021ec <_printf_i+0xfc>
20402192:	07000793          	li	a5,112
20402196:	faf690e3          	bne	a3,a5,20402136 <_printf_i+0x46>
2040219a:	419c                	lw	a5,0(a1)
2040219c:	0207e793          	ori	a5,a5,32
204021a0:	c19c                	sw	a5,0(a1)
204021a2:	a809                	j	204021b4 <_printf_i+0xc4>
204021a4:	07500793          	li	a5,117
204021a8:	04f68263          	beq	a3,a5,204021ec <_printf_i+0xfc>
204021ac:	07800793          	li	a5,120
204021b0:	f8f693e3          	bne	a3,a5,20402136 <_printf_i+0x46>
204021b4:	07800793          	li	a5,120
204021b8:	04f402a3          	sb	a5,69(s0)
204021bc:	00004697          	auipc	a3,0x4
204021c0:	dc068693          	addi	a3,a3,-576 # 20405f7c <__sf_fake_stdout+0x48>
204021c4:	a0dd                	j	204022aa <_printf_i+0x1ba>
204021c6:	431c                	lw	a5,0(a4)
204021c8:	04258a93          	addi	s5,a1,66
204021cc:	00478693          	addi	a3,a5,4
204021d0:	439c                	lw	a5,0(a5)
204021d2:	c314                	sw	a3,0(a4)
204021d4:	04f58123          	sb	a5,66(a1)
204021d8:	4785                	li	a5,1
204021da:	a2ad                	j	20402344 <_printf_i+0x254>
204021dc:	0407f693          	andi	a3,a5,64
204021e0:	411c                	lw	a5,0(a0)
204021e2:	c30c                	sw	a1,0(a4)
204021e4:	debd                	beqz	a3,20402162 <_printf_i+0x72>
204021e6:	07c2                	slli	a5,a5,0x10
204021e8:	87c1                	srai	a5,a5,0x10
204021ea:	bfa5                	j	20402162 <_printf_i+0x72>
204021ec:	400c                	lw	a1,0(s0)
204021ee:	431c                	lw	a5,0(a4)
204021f0:	0805f813          	andi	a6,a1,128
204021f4:	00478513          	addi	a0,a5,4
204021f8:	00080563          	beqz	a6,20402202 <_printf_i+0x112>
204021fc:	c308                	sw	a0,0(a4)
204021fe:	439c                	lw	a5,0(a5)
20402200:	a039                	j	2040220e <_printf_i+0x11e>
20402202:	0405f593          	andi	a1,a1,64
20402206:	c308                	sw	a0,0(a4)
20402208:	d9fd                	beqz	a1,204021fe <_printf_i+0x10e>
2040220a:	0007d783          	lhu	a5,0(a5)
2040220e:	06f00713          	li	a4,111
20402212:	0ce68a63          	beq	a3,a4,204022e6 <_printf_i+0x1f6>
20402216:	00004697          	auipc	a3,0x4
2040221a:	d5268693          	addi	a3,a3,-686 # 20405f68 <__sf_fake_stdout+0x34>
2040221e:	4729                	li	a4,10
20402220:	040401a3          	sb	zero,67(s0)
20402224:	404c                	lw	a1,4(s0)
20402226:	c40c                	sw	a1,8(s0)
20402228:	0005c563          	bltz	a1,20402232 <_printf_i+0x142>
2040222c:	4008                	lw	a0,0(s0)
2040222e:	996d                	andi	a0,a0,-5
20402230:	c008                	sw	a0,0(s0)
20402232:	e399                	bnez	a5,20402238 <_printf_i+0x148>
20402234:	8ab2                	mv	s5,a2
20402236:	cd91                	beqz	a1,20402252 <_printf_i+0x162>
20402238:	8ab2                	mv	s5,a2
2040223a:	02e7f5b3          	remu	a1,a5,a4
2040223e:	1afd                	addi	s5,s5,-1
20402240:	95b6                	add	a1,a1,a3
20402242:	0005c583          	lbu	a1,0(a1)
20402246:	00ba8023          	sb	a1,0(s5)
2040224a:	02e7d5b3          	divu	a1,a5,a4
2040224e:	0ae7f263          	bgeu	a5,a4,204022f2 <_printf_i+0x202>
20402252:	47a1                	li	a5,8
20402254:	00f71e63          	bne	a4,a5,20402270 <_printf_i+0x180>
20402258:	401c                	lw	a5,0(s0)
2040225a:	8b85                	andi	a5,a5,1
2040225c:	cb91                	beqz	a5,20402270 <_printf_i+0x180>
2040225e:	4058                	lw	a4,4(s0)
20402260:	481c                	lw	a5,16(s0)
20402262:	00e7c763          	blt	a5,a4,20402270 <_printf_i+0x180>
20402266:	03000793          	li	a5,48
2040226a:	fefa8fa3          	sb	a5,-1(s5)
2040226e:	1afd                	addi	s5,s5,-1
20402270:	41560633          	sub	a2,a2,s5
20402274:	c810                	sw	a2,16(s0)
20402276:	874e                	mv	a4,s3
20402278:	86ca                	mv	a3,s2
2040227a:	0070                	addi	a2,sp,12
2040227c:	85a2                	mv	a1,s0
2040227e:	8526                	mv	a0,s1
20402280:	3395                	jal	20401fe4 <_printf_common>
20402282:	5a7d                	li	s4,-1
20402284:	0d451463          	bne	a0,s4,2040234c <_printf_i+0x25c>
20402288:	557d                	li	a0,-1
2040228a:	50b2                	lw	ra,44(sp)
2040228c:	5422                	lw	s0,40(sp)
2040228e:	5492                	lw	s1,36(sp)
20402290:	5902                	lw	s2,32(sp)
20402292:	49f2                	lw	s3,28(sp)
20402294:	4a62                	lw	s4,24(sp)
20402296:	4ad2                	lw	s5,20(sp)
20402298:	4b42                	lw	s6,16(sp)
2040229a:	6145                	addi	sp,sp,48
2040229c:	8082                	ret
2040229e:	04d582a3          	sb	a3,69(a1)
204022a2:	00004697          	auipc	a3,0x4
204022a6:	cc668693          	addi	a3,a3,-826 # 20405f68 <__sf_fake_stdout+0x34>
204022aa:	400c                	lw	a1,0(s0)
204022ac:	4308                	lw	a0,0(a4)
204022ae:	0805f813          	andi	a6,a1,128
204022b2:	411c                	lw	a5,0(a0)
204022b4:	0511                	addi	a0,a0,4
204022b6:	02080063          	beqz	a6,204022d6 <_printf_i+0x1e6>
204022ba:	c308                	sw	a0,0(a4)
204022bc:	0015f713          	andi	a4,a1,1
204022c0:	c701                	beqz	a4,204022c8 <_printf_i+0x1d8>
204022c2:	0205e593          	ori	a1,a1,32
204022c6:	c00c                	sw	a1,0(s0)
204022c8:	4741                	li	a4,16
204022ca:	fbb9                	bnez	a5,20402220 <_printf_i+0x130>
204022cc:	400c                	lw	a1,0(s0)
204022ce:	fdf5f593          	andi	a1,a1,-33
204022d2:	c00c                	sw	a1,0(s0)
204022d4:	b7b1                	j	20402220 <_printf_i+0x130>
204022d6:	0405f813          	andi	a6,a1,64
204022da:	c308                	sw	a0,0(a4)
204022dc:	fe0800e3          	beqz	a6,204022bc <_printf_i+0x1cc>
204022e0:	07c2                	slli	a5,a5,0x10
204022e2:	83c1                	srli	a5,a5,0x10
204022e4:	bfe1                	j	204022bc <_printf_i+0x1cc>
204022e6:	00004697          	auipc	a3,0x4
204022ea:	c8268693          	addi	a3,a3,-894 # 20405f68 <__sf_fake_stdout+0x34>
204022ee:	4721                	li	a4,8
204022f0:	bf05                	j	20402220 <_printf_i+0x130>
204022f2:	87ae                	mv	a5,a1
204022f4:	b799                	j	2040223a <_printf_i+0x14a>
204022f6:	4194                	lw	a3,0(a1)
204022f8:	431c                	lw	a5,0(a4)
204022fa:	49cc                	lw	a1,20(a1)
204022fc:	0806f813          	andi	a6,a3,128
20402300:	00478513          	addi	a0,a5,4
20402304:	00080663          	beqz	a6,20402310 <_printf_i+0x220>
20402308:	c308                	sw	a0,0(a4)
2040230a:	439c                	lw	a5,0(a5)
2040230c:	c38c                	sw	a1,0(a5)
2040230e:	a801                	j	2040231e <_printf_i+0x22e>
20402310:	c308                	sw	a0,0(a4)
20402312:	0406f693          	andi	a3,a3,64
20402316:	439c                	lw	a5,0(a5)
20402318:	daf5                	beqz	a3,2040230c <_printf_i+0x21c>
2040231a:	00b79023          	sh	a1,0(a5)
2040231e:	00042823          	sw	zero,16(s0)
20402322:	8ab2                	mv	s5,a2
20402324:	bf89                	j	20402276 <_printf_i+0x186>
20402326:	431c                	lw	a5,0(a4)
20402328:	41d0                	lw	a2,4(a1)
2040232a:	4581                	li	a1,0
2040232c:	00478693          	addi	a3,a5,4
20402330:	c314                	sw	a3,0(a4)
20402332:	0007aa83          	lw	s5,0(a5)
20402336:	8556                	mv	a0,s5
20402338:	3179                	jal	20401fc6 <memchr>
2040233a:	c501                	beqz	a0,20402342 <_printf_i+0x252>
2040233c:	41550533          	sub	a0,a0,s5
20402340:	c048                	sw	a0,4(s0)
20402342:	405c                	lw	a5,4(s0)
20402344:	c81c                	sw	a5,16(s0)
20402346:	040401a3          	sb	zero,67(s0)
2040234a:	b735                	j	20402276 <_printf_i+0x186>
2040234c:	4814                	lw	a3,16(s0)
2040234e:	8656                	mv	a2,s5
20402350:	85ca                	mv	a1,s2
20402352:	8526                	mv	a0,s1
20402354:	9982                	jalr	s3
20402356:	f34509e3          	beq	a0,s4,20402288 <_printf_i+0x198>
2040235a:	401c                	lw	a5,0(s0)
2040235c:	8b89                	andi	a5,a5,2
2040235e:	e78d                	bnez	a5,20402388 <_printf_i+0x298>
20402360:	47b2                	lw	a5,12(sp)
20402362:	4448                	lw	a0,12(s0)
20402364:	f2f553e3          	bge	a0,a5,2040228a <_printf_i+0x19a>
20402368:	853e                	mv	a0,a5
2040236a:	b705                	j	2040228a <_printf_i+0x19a>
2040236c:	4685                	li	a3,1
2040236e:	8656                	mv	a2,s5
20402370:	85ca                	mv	a1,s2
20402372:	8526                	mv	a0,s1
20402374:	9982                	jalr	s3
20402376:	f16509e3          	beq	a0,s6,20402288 <_printf_i+0x198>
2040237a:	0a05                	addi	s4,s4,1
2040237c:	445c                	lw	a5,12(s0)
2040237e:	4732                	lw	a4,12(sp)
20402380:	8f99                	sub	a5,a5,a4
20402382:	fefa45e3          	blt	s4,a5,2040236c <_printf_i+0x27c>
20402386:	bfe9                	j	20402360 <_printf_i+0x270>
20402388:	4a01                	li	s4,0
2040238a:	01940a93          	addi	s5,s0,25
2040238e:	5b7d                	li	s6,-1
20402390:	b7f5                	j	2040237c <_printf_i+0x28c>

20402392 <_read_r>:
_read_r():
20402392:	1141                	addi	sp,sp,-16
20402394:	c422                	sw	s0,8(sp)
20402396:	842a                	mv	s0,a0
20402398:	852e                	mv	a0,a1
2040239a:	85b2                	mv	a1,a2
2040239c:	8636                	mv	a2,a3
2040239e:	5fc00797          	auipc	a5,0x5fc00
204023a2:	4007a923          	sw	zero,1042(a5) # 800027b0 <errno>
204023a6:	c606                	sw	ra,12(sp)
204023a8:	2845                	jal	20402458 <_read>
204023aa:	57fd                	li	a5,-1
204023ac:	00f51963          	bne	a0,a5,204023be <_read_r+0x2c>
204023b0:	5fc00797          	auipc	a5,0x5fc00
204023b4:	40078793          	addi	a5,a5,1024 # 800027b0 <errno>
204023b8:	439c                	lw	a5,0(a5)
204023ba:	c391                	beqz	a5,204023be <_read_r+0x2c>
204023bc:	c01c                	sw	a5,0(s0)
204023be:	40b2                	lw	ra,12(sp)
204023c0:	4422                	lw	s0,8(sp)
204023c2:	0141                	addi	sp,sp,16
204023c4:	8082                	ret

204023c6 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
204023c6:	1101                	addi	sp,sp,-32
204023c8:	ce06                	sw	ra,28(sp)
204023ca:	cc22                	sw	s0,24(sp)
204023cc:	1000                	addi	s0,sp,32
204023ce:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
204023d2:	225d                	jal	20402578 <__errno>
204023d4:	872a                	mv	a4,a0
204023d6:	05800793          	li	a5,88
204023da:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
204023dc:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
204023de:	853e                	mv	a0,a5
204023e0:	40f2                	lw	ra,28(sp)
204023e2:	4462                	lw	s0,24(sp)
204023e4:	6105                	addi	sp,sp,32
204023e6:	8082                	ret

204023e8 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
204023e8:	1101                	addi	sp,sp,-32
204023ea:	ce06                	sw	ra,28(sp)
204023ec:	cc22                	sw	s0,24(sp)
204023ee:	1000                	addi	s0,sp,32
204023f0:	fea42623          	sw	a0,-20(s0)
204023f4:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
204023f8:	2241                	jal	20402578 <__errno>
204023fa:	872a                	mv	a4,a0
204023fc:	fa800793          	li	a5,-88
20402400:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20402402:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20402404:	853e                	mv	a0,a5
20402406:	40f2                	lw	ra,28(sp)
20402408:	4462                	lw	s0,24(sp)
2040240a:	6105                	addi	sp,sp,32
2040240c:	8082                	ret

2040240e <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
2040240e:	1101                	addi	sp,sp,-32
20402410:	ce22                	sw	s0,28(sp)
20402412:	1000                	addi	s0,sp,32
20402414:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20402418:	fec42783          	lw	a5,-20(s0)
2040241c:	17fd                	addi	a5,a5,-1
2040241e:	0017b793          	seqz	a5,a5
20402422:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20402426:	853e                	mv	a0,a5
20402428:	4472                	lw	s0,28(sp)
2040242a:	6105                	addi	sp,sp,32
2040242c:	8082                	ret

2040242e <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
2040242e:	1101                	addi	sp,sp,-32
20402430:	ce06                	sw	ra,28(sp)
20402432:	cc22                	sw	s0,24(sp)
20402434:	1000                	addi	s0,sp,32
20402436:	fea42623          	sw	a0,-20(s0)
2040243a:	feb42423          	sw	a1,-24(s0)
2040243e:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20402442:	2a1d                	jal	20402578 <__errno>
20402444:	872a                	mv	a4,a0
20402446:	05800793          	li	a5,88
2040244a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
2040244c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
2040244e:	853e                	mv	a0,a5
20402450:	40f2                	lw	ra,28(sp)
20402452:	4462                	lw	s0,24(sp)
20402454:	6105                	addi	sp,sp,32
20402456:	8082                	ret

20402458 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20402458:	1101                	addi	sp,sp,-32
2040245a:	ce06                	sw	ra,28(sp)
2040245c:	cc22                	sw	s0,24(sp)
2040245e:	1000                	addi	s0,sp,32
20402460:	fea42623          	sw	a0,-20(s0)
20402464:	feb42423          	sw	a1,-24(s0)
20402468:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
2040246c:	2231                	jal	20402578 <__errno>
2040246e:	872a                	mv	a4,a0
20402470:	05800793          	li	a5,88
20402474:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20402476:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20402478:	853e                	mv	a0,a5
2040247a:	40f2                	lw	ra,28(sp)
2040247c:	4462                	lw	s0,24(sp)
2040247e:	6105                	addi	sp,sp,32
20402480:	8082                	ret

20402482 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20402482:	7179                	addi	sp,sp,-48
20402484:	d622                	sw	s0,44(sp)
20402486:	1800                	addi	s0,sp,48
20402488:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
2040248c:	800017b7          	lui	a5,0x80001
20402490:	7107a783          	lw	a5,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe35c>
20402494:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20402498:	800037b7          	lui	a5,0x80003
2040249c:	bb478713          	addi	a4,a5,-1100 # 80002bb4 <metal_segment_heap_target_end+0xfffff800>
204024a0:	800037b7          	lui	a5,0x80003
204024a4:	3b478793          	addi	a5,a5,948 # 800033b4 <metal_segment_heap_target_end+0x0>
204024a8:	00f71463          	bne	a4,a5,204024b0 <_sbrk+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
204024ac:	57fd                	li	a5,-1
204024ae:	a0a9                	j	204024f8 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
204024b0:	800017b7          	lui	a5,0x80001
204024b4:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe35c>
204024b8:	fdc42783          	lw	a5,-36(s0)
204024bc:	973e                	add	a4,a4,a5
204024be:	800037b7          	lui	a5,0x80003
204024c2:	3b478793          	addi	a5,a5,948 # 800033b4 <metal_segment_heap_target_end+0x0>
204024c6:	02f77063          	bgeu	a4,a5,204024e6 <_sbrk+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
204024ca:	800017b7          	lui	a5,0x80001
204024ce:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe35c>
204024d2:	fdc42783          	lw	a5,-36(s0)
204024d6:	973e                	add	a4,a4,a5
204024d8:	800017b7          	lui	a5,0x80001
204024dc:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe35c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
204024e0:	fec42783          	lw	a5,-20(s0)
204024e4:	a811                	j	204024f8 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
204024e6:	800017b7          	lui	a5,0x80001
204024ea:	80003737          	lui	a4,0x80003
204024ee:	3b470713          	addi	a4,a4,948 # 800033b4 <metal_segment_heap_target_end+0x0>
204024f2:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe35c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
204024f6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
204024f8:	853e                	mv	a0,a5
204024fa:	5432                	lw	s0,44(sp)
204024fc:	6145                	addi	sp,sp,48
204024fe:	8082                	ret

20402500 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20402500:	7179                	addi	sp,sp,-48
20402502:	d606                	sw	ra,44(sp)
20402504:	d422                	sw	s0,40(sp)
20402506:	1800                	addi	s0,sp,48
20402508:	fca42e23          	sw	a0,-36(s0)
2040250c:	fcb42c23          	sw	a1,-40(s0)
20402510:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20402514:	fdc42703          	lw	a4,-36(s0)
20402518:	4785                	li	a5,1
2040251a:	00f70963          	beq	a4,a5,2040252c <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
2040251e:	28a9                	jal	20402578 <__errno>
20402520:	872a                	mv	a4,a0
20402522:	05800793          	li	a5,88
20402526:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20402528:	57fd                	li	a5,-1
2040252a:	a82d                	j	20402564 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
2040252c:	fd842783          	lw	a5,-40(s0)
20402530:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20402534:	fe042623          	sw	zero,-20(s0)
20402538:	a839                	j	20402556 <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
2040253a:	fe842703          	lw	a4,-24(s0)
2040253e:	fec42783          	lw	a5,-20(s0)
20402542:	97ba                	add	a5,a5,a4
20402544:	0007c783          	lbu	a5,0(a5)
20402548:	853e                	mv	a0,a5
2040254a:	2cb1                	jal	204027a6 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
2040254c:	fec42783          	lw	a5,-20(s0)
20402550:	0785                	addi	a5,a5,1
20402552:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20402556:	fec42703          	lw	a4,-20(s0)
2040255a:	fd442783          	lw	a5,-44(s0)
2040255e:	fcf76ee3          	bltu	a4,a5,2040253a <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20402562:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20402564:	853e                	mv	a0,a5
20402566:	50b2                	lw	ra,44(sp)
20402568:	5422                	lw	s0,40(sp)
2040256a:	6145                	addi	sp,sp,48
2040256c:	8082                	ret

2040256e <atexit>:
atexit():
2040256e:	85aa                	mv	a1,a0
20402570:	4681                	li	a3,0
20402572:	4601                	li	a2,0
20402574:	4501                	li	a0,0
20402576:	a8f1                	j	20402652 <__register_exitproc>

20402578 <__errno>:
__errno():
20402578:	5fbff797          	auipc	a5,0x5fbff
2040257c:	19078793          	addi	a5,a5,400 # 80001708 <_impure_ptr>
20402580:	4388                	lw	a0,0(a5)
20402582:	8082                	ret

20402584 <exit>:
exit():
20402584:	1141                	addi	sp,sp,-16
20402586:	c422                	sw	s0,8(sp)
20402588:	c606                	sw	ra,12(sp)
2040258a:	00000797          	auipc	a5,0x0
2040258e:	15478793          	addi	a5,a5,340 # 204026de <__call_exitprocs>
20402592:	842a                	mv	s0,a0
20402594:	c399                	beqz	a5,2040259a <exit+0x16>
20402596:	4581                	li	a1,0
20402598:	2299                	jal	204026de <__call_exitprocs>
2040259a:	5fbff797          	auipc	a5,0x5fbff
2040259e:	17278793          	addi	a5,a5,370 # 8000170c <_global_impure_ptr>
204025a2:	4388                	lw	a0,0(a5)
204025a4:	551c                	lw	a5,40(a0)
204025a6:	c391                	beqz	a5,204025aa <exit+0x26>
204025a8:	9782                	jalr	a5
204025aa:	8522                	mv	a0,s0
204025ac:	043030ef          	jal	ra,20405dee <_exit>

204025b0 <__libc_fini_array>:
__libc_fini_array():
204025b0:	1141                	addi	sp,sp,-16
204025b2:	00004797          	auipc	a5,0x4
204025b6:	d3278793          	addi	a5,a5,-718 # 204062e4 <__fini_array_end>
204025ba:	c422                	sw	s0,8(sp)
204025bc:	00004417          	auipc	s0,0x4
204025c0:	d2840413          	addi	s0,s0,-728 # 204062e4 <__fini_array_end>
204025c4:	8c1d                	sub	s0,s0,a5
204025c6:	c226                	sw	s1,4(sp)
204025c8:	c606                	sw	ra,12(sp)
204025ca:	8409                	srai	s0,s0,0x2
204025cc:	84be                	mv	s1,a5
204025ce:	e411                	bnez	s0,204025da <__libc_fini_array+0x2a>
204025d0:	40b2                	lw	ra,12(sp)
204025d2:	4422                	lw	s0,8(sp)
204025d4:	4492                	lw	s1,4(sp)
204025d6:	0141                	addi	sp,sp,16
204025d8:	8082                	ret
204025da:	147d                	addi	s0,s0,-1
204025dc:	00241793          	slli	a5,s0,0x2
204025e0:	97a6                	add	a5,a5,s1
204025e2:	439c                	lw	a5,0(a5)
204025e4:	9782                	jalr	a5
204025e6:	b7e5                	j	204025ce <__libc_fini_array+0x1e>

204025e8 <__libc_init_array>:
__libc_init_array():
204025e8:	1141                	addi	sp,sp,-16
204025ea:	00004797          	auipc	a5,0x4
204025ee:	cf678793          	addi	a5,a5,-778 # 204062e0 <__init_array_start>
204025f2:	c422                	sw	s0,8(sp)
204025f4:	00004417          	auipc	s0,0x4
204025f8:	cec40413          	addi	s0,s0,-788 # 204062e0 <__init_array_start>
204025fc:	8c1d                	sub	s0,s0,a5
204025fe:	c226                	sw	s1,4(sp)
20402600:	c04a                	sw	s2,0(sp)
20402602:	c606                	sw	ra,12(sp)
20402604:	8409                	srai	s0,s0,0x2
20402606:	4481                	li	s1,0
20402608:	893e                	mv	s2,a5
2040260a:	02849663          	bne	s1,s0,20402636 <__libc_init_array+0x4e>
2040260e:	00004797          	auipc	a5,0x4
20402612:	cd278793          	addi	a5,a5,-814 # 204062e0 <__init_array_start>
20402616:	00004417          	auipc	s0,0x4
2040261a:	cce40413          	addi	s0,s0,-818 # 204062e4 <__fini_array_end>
2040261e:	8c1d                	sub	s0,s0,a5
20402620:	8409                	srai	s0,s0,0x2
20402622:	4481                	li	s1,0
20402624:	893e                	mv	s2,a5
20402626:	00849f63          	bne	s1,s0,20402644 <__libc_init_array+0x5c>
2040262a:	40b2                	lw	ra,12(sp)
2040262c:	4422                	lw	s0,8(sp)
2040262e:	4492                	lw	s1,4(sp)
20402630:	4902                	lw	s2,0(sp)
20402632:	0141                	addi	sp,sp,16
20402634:	8082                	ret
20402636:	00249793          	slli	a5,s1,0x2
2040263a:	97ca                	add	a5,a5,s2
2040263c:	439c                	lw	a5,0(a5)
2040263e:	0485                	addi	s1,s1,1
20402640:	9782                	jalr	a5
20402642:	b7e1                	j	2040260a <__libc_init_array+0x22>
20402644:	00249793          	slli	a5,s1,0x2
20402648:	97ca                	add	a5,a5,s2
2040264a:	439c                	lw	a5,0(a5)
2040264c:	0485                	addi	s1,s1,1
2040264e:	9782                	jalr	a5
20402650:	bfd9                	j	20402626 <__libc_init_array+0x3e>

20402652 <__register_exitproc>:
__register_exitproc():
20402652:	5fbff797          	auipc	a5,0x5fbff
20402656:	0e678793          	addi	a5,a5,230 # 80001738 <_global_atexit>
2040265a:	439c                	lw	a5,0(a5)
2040265c:	8e2a                	mv	t3,a0
2040265e:	e78d                	bnez	a5,20402688 <__register_exitproc+0x36>
20402660:	5fc00717          	auipc	a4,0x5fc00
20402664:	0c470713          	addi	a4,a4,196 # 80002724 <_global_atexit0>
20402668:	5fbff797          	auipc	a5,0x5fbff
2040266c:	0ce7a823          	sw	a4,208(a5) # 80001738 <_global_atexit>
20402670:	dfbfe517          	auipc	a0,0xdfbfe
20402674:	99050513          	addi	a0,a0,-1648 # 0 <__metal_boot_hart>
20402678:	87ba                	mv	a5,a4
2040267a:	c519                	beqz	a0,20402688 <__register_exitproc+0x36>
2040267c:	411c                	lw	a5,0(a0)
2040267e:	5fc00517          	auipc	a0,0x5fc00
20402682:	12f52723          	sw	a5,302(a0) # 800027ac <_global_atexit0+0x88>
20402686:	87ba                	mv	a5,a4
20402688:	43d8                	lw	a4,4(a5)
2040268a:	487d                	li	a6,31
2040268c:	557d                	li	a0,-1
2040268e:	04e84763          	blt	a6,a4,204026dc <__register_exitproc+0x8a>
20402692:	020e0e63          	beqz	t3,204026ce <__register_exitproc+0x7c>
20402696:	0887a803          	lw	a6,136(a5)
2040269a:	04080163          	beqz	a6,204026dc <__register_exitproc+0x8a>
2040269e:	00271893          	slli	a7,a4,0x2
204026a2:	98c2                	add	a7,a7,a6
204026a4:	00c8a023          	sw	a2,0(a7)
204026a8:	10082303          	lw	t1,256(a6)
204026ac:	4605                	li	a2,1
204026ae:	00e61633          	sll	a2,a2,a4
204026b2:	00c36333          	or	t1,t1,a2
204026b6:	10682023          	sw	t1,256(a6)
204026ba:	08d8a023          	sw	a3,128(a7)
204026be:	4689                	li	a3,2
204026c0:	00de1763          	bne	t3,a3,204026ce <__register_exitproc+0x7c>
204026c4:	10482683          	lw	a3,260(a6)
204026c8:	8e55                	or	a2,a2,a3
204026ca:	10c82223          	sw	a2,260(a6)
204026ce:	00170693          	addi	a3,a4,1
204026d2:	070a                	slli	a4,a4,0x2
204026d4:	c3d4                	sw	a3,4(a5)
204026d6:	97ba                	add	a5,a5,a4
204026d8:	c78c                	sw	a1,8(a5)
204026da:	4501                	li	a0,0
204026dc:	8082                	ret

204026de <__call_exitprocs>:
__call_exitprocs():
204026de:	7179                	addi	sp,sp,-48
204026e0:	cc52                	sw	s4,24(sp)
204026e2:	ca56                	sw	s5,20(sp)
204026e4:	c85a                	sw	s6,16(sp)
204026e6:	c65e                	sw	s7,12(sp)
204026e8:	d606                	sw	ra,44(sp)
204026ea:	d422                	sw	s0,40(sp)
204026ec:	d226                	sw	s1,36(sp)
204026ee:	d04a                	sw	s2,32(sp)
204026f0:	ce4e                	sw	s3,28(sp)
204026f2:	c462                	sw	s8,8(sp)
204026f4:	8b2a                	mv	s6,a0
204026f6:	8a2e                	mv	s4,a1
204026f8:	5fbffa97          	auipc	s5,0x5fbff
204026fc:	040a8a93          	addi	s5,s5,64 # 80001738 <_global_atexit>
20402700:	4b85                	li	s7,1
20402702:	000aa403          	lw	s0,0(s5)
20402706:	c811                	beqz	s0,2040271a <__call_exitprocs+0x3c>
20402708:	4044                	lw	s1,4(s0)
2040270a:	08842983          	lw	s3,136(s0)
2040270e:	fff48913          	addi	s2,s1,-1
20402712:	048a                	slli	s1,s1,0x2
20402714:	94a2                	add	s1,s1,s0
20402716:	00095e63          	bgez	s2,20402732 <__call_exitprocs+0x54>
2040271a:	50b2                	lw	ra,44(sp)
2040271c:	5422                	lw	s0,40(sp)
2040271e:	5492                	lw	s1,36(sp)
20402720:	5902                	lw	s2,32(sp)
20402722:	49f2                	lw	s3,28(sp)
20402724:	4a62                	lw	s4,24(sp)
20402726:	4ad2                	lw	s5,20(sp)
20402728:	4b42                	lw	s6,16(sp)
2040272a:	4bb2                	lw	s7,12(sp)
2040272c:	4c22                	lw	s8,8(sp)
2040272e:	6145                	addi	sp,sp,48
20402730:	8082                	ret
20402732:	000a0e63          	beqz	s4,2040274e <__call_exitprocs+0x70>
20402736:	00099563          	bnez	s3,20402740 <__call_exitprocs+0x62>
2040273a:	197d                	addi	s2,s2,-1
2040273c:	14f1                	addi	s1,s1,-4
2040273e:	bfe1                	j	20402716 <__call_exitprocs+0x38>
20402740:	00291793          	slli	a5,s2,0x2
20402744:	97ce                	add	a5,a5,s3
20402746:	0807a783          	lw	a5,128(a5)
2040274a:	ff4798e3          	bne	a5,s4,2040273a <__call_exitprocs+0x5c>
2040274e:	4058                	lw	a4,4(s0)
20402750:	40dc                	lw	a5,4(s1)
20402752:	177d                	addi	a4,a4,-1
20402754:	03271863          	bne	a4,s2,20402784 <__call_exitprocs+0xa6>
20402758:	01242223          	sw	s2,4(s0)
2040275c:	dff9                	beqz	a5,2040273a <__call_exitprocs+0x5c>
2040275e:	00442c03          	lw	s8,4(s0)
20402762:	00098863          	beqz	s3,20402772 <__call_exitprocs+0x94>
20402766:	1009a683          	lw	a3,256(s3)
2040276a:	012b9733          	sll	a4,s7,s2
2040276e:	8ef9                	and	a3,a3,a4
20402770:	ee89                	bnez	a3,2040278a <__call_exitprocs+0xac>
20402772:	9782                	jalr	a5
20402774:	4058                	lw	a4,4(s0)
20402776:	000aa783          	lw	a5,0(s5)
2040277a:	f98714e3          	bne	a4,s8,20402702 <__call_exitprocs+0x24>
2040277e:	faf40ee3          	beq	s0,a5,2040273a <__call_exitprocs+0x5c>
20402782:	b741                	j	20402702 <__call_exitprocs+0x24>
20402784:	0004a223          	sw	zero,4(s1)
20402788:	bfd1                	j	2040275c <__call_exitprocs+0x7e>
2040278a:	00291693          	slli	a3,s2,0x2
2040278e:	96ce                	add	a3,a3,s3
20402790:	428c                	lw	a1,0(a3)
20402792:	1049a683          	lw	a3,260(s3)
20402796:	8f75                	and	a4,a4,a3
20402798:	e701                	bnez	a4,204027a0 <__call_exitprocs+0xc2>
2040279a:	855a                	mv	a0,s6
2040279c:	9782                	jalr	a5
2040279e:	bfd9                	j	20402774 <__call_exitprocs+0x96>
204027a0:	852e                	mv	a0,a1
204027a2:	9782                	jalr	a5
204027a4:	bfc1                	j	20402774 <__call_exitprocs+0x96>

204027a6 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
204027a6:	1101                	addi	sp,sp,-32
204027a8:	ce06                	sw	ra,28(sp)
204027aa:	cc22                	sw	s0,24(sp)
204027ac:	1000                	addi	s0,sp,32
204027ae:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
204027b2:	fec42703          	lw	a4,-20(s0)
204027b6:	47a9                	li	a5,10
204027b8:	00f71463          	bne	a4,a5,204027c0 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
204027bc:	4535                	li	a0,13
204027be:	2811                	jal	204027d2 <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
204027c0:	fec42503          	lw	a0,-20(s0)
204027c4:	2039                	jal	204027d2 <metal_tty_putc_raw>
204027c6:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
204027c8:	853e                	mv	a0,a5
204027ca:	40f2                	lw	ra,28(sp)
204027cc:	4462                	lw	s0,24(sp)
204027ce:	6105                	addi	sp,sp,32
204027d0:	8082                	ret

204027d2 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
204027d2:	1101                	addi	sp,sp,-32
204027d4:	ce06                	sw	ra,28(sp)
204027d6:	cc22                	sw	s0,24(sp)
204027d8:	1000                	addi	s0,sp,32
204027da:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
204027de:	fec42583          	lw	a1,-20(s0)
204027e2:	800017b7          	lui	a5,0x80001
204027e6:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
204027ea:	28b1                	jal	20402846 <metal_uart_putc>
204027ec:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
204027ee:	853e                	mv	a0,a5
204027f0:	40f2                	lw	ra,28(sp)
204027f2:	4462                	lw	s0,24(sp)
204027f4:	6105                	addi	sp,sp,32
204027f6:	8082                	ret

204027f8 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
204027f8:	1141                	addi	sp,sp,-16
204027fa:	c606                	sw	ra,12(sp)
204027fc:	c422                	sw	s0,8(sp)
204027fe:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20402800:	67f1                	lui	a5,0x1c
20402802:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20402806:	800017b7          	lui	a5,0x80001
2040280a:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
2040280e:	2031                	jal	2040281a <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20402810:	0001                	nop
20402812:	40b2                	lw	ra,12(sp)
20402814:	4422                	lw	s0,8(sp)
20402816:	0141                	addi	sp,sp,16
20402818:	8082                	ret

2040281a <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
2040281a:	1101                	addi	sp,sp,-32
2040281c:	ce06                	sw	ra,28(sp)
2040281e:	cc22                	sw	s0,24(sp)
20402820:	1000                	addi	s0,sp,32
20402822:	fea42623          	sw	a0,-20(s0)
20402826:	feb42423          	sw	a1,-24(s0)
2040282a:	fec42783          	lw	a5,-20(s0)
2040282e:	439c                	lw	a5,0(a5)
20402830:	439c                	lw	a5,0(a5)
20402832:	fe842583          	lw	a1,-24(s0)
20402836:	fec42503          	lw	a0,-20(s0)
2040283a:	9782                	jalr	a5
2040283c:	0001                	nop
2040283e:	40f2                	lw	ra,28(sp)
20402840:	4462                	lw	s0,24(sp)
20402842:	6105                	addi	sp,sp,32
20402844:	8082                	ret

20402846 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20402846:	1101                	addi	sp,sp,-32
20402848:	ce06                	sw	ra,28(sp)
2040284a:	cc22                	sw	s0,24(sp)
2040284c:	1000                	addi	s0,sp,32
2040284e:	fea42623          	sw	a0,-20(s0)
20402852:	feb42423          	sw	a1,-24(s0)
20402856:	fec42783          	lw	a5,-20(s0)
2040285a:	439c                	lw	a5,0(a5)
2040285c:	43dc                	lw	a5,4(a5)
2040285e:	fe842583          	lw	a1,-24(s0)
20402862:	fec42503          	lw	a0,-20(s0)
20402866:	9782                	jalr	a5
20402868:	87aa                	mv	a5,a0
2040286a:	853e                	mv	a0,a5
2040286c:	40f2                	lw	ra,28(sp)
2040286e:	4462                	lw	s0,24(sp)
20402870:	6105                	addi	sp,sp,32
20402872:	8082                	ret

20402874 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20402874:	1101                	addi	sp,sp,-32
20402876:	ce06                	sw	ra,28(sp)
20402878:	cc22                	sw	s0,24(sp)
2040287a:	1000                	addi	s0,sp,32
2040287c:	fea42623          	sw	a0,-20(s0)
20402880:	feb42423          	sw	a1,-24(s0)
20402884:	fec42783          	lw	a5,-20(s0)
20402888:	439c                	lw	a5,0(a5)
2040288a:	4bdc                	lw	a5,20(a5)
2040288c:	fe842583          	lw	a1,-24(s0)
20402890:	fec42503          	lw	a0,-20(s0)
20402894:	9782                	jalr	a5
20402896:	87aa                	mv	a5,a0
20402898:	853e                	mv	a0,a5
2040289a:	40f2                	lw	ra,28(sp)
2040289c:	4462                	lw	s0,24(sp)
2040289e:	6105                	addi	sp,sp,32
204028a0:	8082                	ret

204028a2 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
204028a2:	1101                	addi	sp,sp,-32
204028a4:	ce22                	sw	s0,28(sp)
204028a6:	1000                	addi	s0,sp,32
204028a8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204028ac:	fec42703          	lw	a4,-20(s0)
204028b0:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
204028b4:	00f71563          	bne	a4,a5,204028be <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
204028b8:	020007b7          	lui	a5,0x2000
204028bc:	a011                	j	204028c0 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
204028be:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:143
	}
}
204028c0:	853e                	mv	a0,a5
204028c2:	4472                	lw	s0,28(sp)
204028c4:	6105                	addi	sp,sp,32
204028c6:	8082                	ret

204028c8 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
204028c8:	1101                	addi	sp,sp,-32
204028ca:	ce22                	sw	s0,28(sp)
204028cc:	1000                	addi	s0,sp,32
204028ce:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204028d2:	fec42703          	lw	a4,-20(s0)
204028d6:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
204028da:	00f71463          	bne	a4,a5,204028e2 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
204028de:	4789                	li	a5,2
204028e0:	a011                	j	204028e4 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
204028e2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:163
	}
}
204028e4:	853e                	mv	a0,a5
204028e6:	4472                	lw	s0,28(sp)
204028e8:	6105                	addi	sp,sp,32
204028ea:	8082                	ret

204028ec <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
204028ec:	1101                	addi	sp,sp,-32
204028ee:	ce22                	sw	s0,28(sp)
204028f0:	1000                	addi	s0,sp,32
204028f2:	fea42623          	sw	a0,-20(s0)
204028f6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:167
	if (idx == 0) {
204028fa:	fe842783          	lw	a5,-24(s0)
204028fe:	e791                	bnez	a5,2040290a <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20402900:	800017b7          	lui	a5,0x80001
20402904:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdc7c>
20402908:	a821                	j	20402920 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
2040290a:	fe842703          	lw	a4,-24(s0)
2040290e:	4785                	li	a5,1
20402910:	00f71763          	bne	a4,a5,2040291e <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20402914:	800017b7          	lui	a5,0x80001
20402918:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdc7c>
2040291c:	a011                	j	20402920 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
2040291e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:176
	}
}
20402920:	853e                	mv	a0,a5
20402922:	4472                	lw	s0,28(sp)
20402924:	6105                	addi	sp,sp,32
20402926:	8082                	ret

20402928 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20402928:	1101                	addi	sp,sp,-32
2040292a:	ce22                	sw	s0,28(sp)
2040292c:	1000                	addi	s0,sp,32
2040292e:	fea42623          	sw	a0,-20(s0)
20402932:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:180
	if (idx == 0) {
20402936:	fe842783          	lw	a5,-24(s0)
2040293a:	e399                	bnez	a5,20402940 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:181
		return 3;
2040293c:	478d                	li	a5,3
2040293e:	a809                	j	20402950 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
20402940:	fe842703          	lw	a4,-24(s0)
20402944:	4785                	li	a5,1
20402946:	00f71463          	bne	a4,a5,2040294e <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:184
		return 7;
2040294a:	479d                	li	a5,7
2040294c:	a011                	j	20402950 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
2040294e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:189
	}
}
20402950:	853e                	mv	a0,a5
20402952:	4472                	lw	s0,28(sp)
20402954:	6105                	addi	sp,sp,32
20402956:	8082                	ret

20402958 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20402958:	715d                	addi	sp,sp,-80
2040295a:	c686                	sw	ra,76(sp)
2040295c:	c4a2                	sw	s0,72(sp)
2040295e:	c2ca                	sw	s2,68(sp)
20402960:	c0ce                	sw	s3,64(sp)
20402962:	de52                	sw	s4,60(sp)
20402964:	dc56                	sw	s5,56(sp)
20402966:	da5a                	sw	s6,52(sp)
20402968:	d85e                	sw	s7,48(sp)
2040296a:	d662                	sw	s8,44(sp)
2040296c:	d466                	sw	s9,40(sp)
2040296e:	0880                	addi	s0,sp,80
20402970:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402974:	fbc42783          	lw	a5,-68(s0)
20402978:	853e                	mv	a0,a5
2040297a:	3725                	jal	204028a2 <__metal_driver_sifive_clint0_control_base>
2040297c:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20402980:	fcc42703          	lw	a4,-52(s0)
20402984:	67b1                	lui	a5,0xc
20402986:	17f1                	addi	a5,a5,-4
20402988:	97ba                	add	a5,a5,a4
2040298a:	439c                	lw	a5,0(a5)
2040298c:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20402990:	fcc42703          	lw	a4,-52(s0)
20402994:	67b1                	lui	a5,0xc
20402996:	17e1                	addi	a5,a5,-8
20402998:	97ba                	add	a5,a5,a4
2040299a:	439c                	lw	a5,0(a5)
2040299c:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
204029a0:	fcc42703          	lw	a4,-52(s0)
204029a4:	67b1                	lui	a5,0xc
204029a6:	17f1                	addi	a5,a5,-4
204029a8:	97ba                	add	a5,a5,a4
204029aa:	439c                	lw	a5,0(a5)
204029ac:	fc842703          	lw	a4,-56(s0)
204029b0:	fcf718e3          	bne	a4,a5,20402980 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
204029b4:	fc842783          	lw	a5,-56(s0)
204029b8:	8c3e                	mv	s8,a5
204029ba:	4c81                	li	s9,0
204029bc:	000c1993          	slli	s3,s8,0x0
204029c0:	4901                	li	s2,0
204029c2:	fc442783          	lw	a5,-60(s0)
204029c6:	8a3e                	mv	s4,a5
204029c8:	4a81                	li	s5,0
204029ca:	01496b33          	or	s6,s2,s4
204029ce:	0159ebb3          	or	s7,s3,s5
204029d2:	87da                	mv	a5,s6
204029d4:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
204029d6:	853e                	mv	a0,a5
204029d8:	85c2                	mv	a1,a6
204029da:	40b6                	lw	ra,76(sp)
204029dc:	4426                	lw	s0,72(sp)
204029de:	4916                	lw	s2,68(sp)
204029e0:	4986                	lw	s3,64(sp)
204029e2:	5a72                	lw	s4,60(sp)
204029e4:	5ae2                	lw	s5,56(sp)
204029e6:	5b52                	lw	s6,52(sp)
204029e8:	5bc2                	lw	s7,48(sp)
204029ea:	5c32                	lw	s8,44(sp)
204029ec:	5ca2                	lw	s9,40(sp)
204029ee:	6161                	addi	sp,sp,80
204029f0:	8082                	ret

204029f2 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
204029f2:	7179                	addi	sp,sp,-48
204029f4:	d606                	sw	ra,44(sp)
204029f6:	d422                	sw	s0,40(sp)
204029f8:	d24a                	sw	s2,36(sp)
204029fa:	d04e                	sw	s3,32(sp)
204029fc:	1800                	addi	s0,sp,48
204029fe:	fca42e23          	sw	a0,-36(s0)
20402a02:	fcb42c23          	sw	a1,-40(s0)
20402a06:	fcc42823          	sw	a2,-48(s0)
20402a0a:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20402a0e:	fdc42783          	lw	a5,-36(s0)
20402a12:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402a16:	fec42783          	lw	a5,-20(s0)
20402a1a:	853e                	mv	a0,a5
20402a1c:	3559                	jal	204028a2 <__metal_driver_sifive_clint0_control_base>
20402a1e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20402a22:	fd842783          	lw	a5,-40(s0)
20402a26:	078e                	slli	a5,a5,0x3
20402a28:	873e                	mv	a4,a5
20402a2a:	fe842783          	lw	a5,-24(s0)
20402a2e:	973e                	add	a4,a4,a5
20402a30:	6791                	lui	a5,0x4
20402a32:	0791                	addi	a5,a5,4
20402a34:	97ba                	add	a5,a5,a4
20402a36:	873e                	mv	a4,a5
20402a38:	57fd                	li	a5,-1
20402a3a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20402a3c:	fd842783          	lw	a5,-40(s0)
20402a40:	078e                	slli	a5,a5,0x3
20402a42:	873e                	mv	a4,a5
20402a44:	fe842783          	lw	a5,-24(s0)
20402a48:	973e                	add	a4,a4,a5
20402a4a:	6791                	lui	a5,0x4
20402a4c:	97ba                	add	a5,a5,a4
20402a4e:	873e                	mv	a4,a5
20402a50:	fd042783          	lw	a5,-48(s0)
20402a54:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20402a56:	fd442783          	lw	a5,-44(s0)
20402a5a:	0007d913          	srli	s2,a5,0x0
20402a5e:	4981                	li	s3,0
20402a60:	fd842783          	lw	a5,-40(s0)
20402a64:	078e                	slli	a5,a5,0x3
20402a66:	873e                	mv	a4,a5
20402a68:	fe842783          	lw	a5,-24(s0)
20402a6c:	973e                	add	a4,a4,a5
20402a6e:	6791                	lui	a5,0x4
20402a70:	0791                	addi	a5,a5,4
20402a72:	97ba                	add	a5,a5,a4
20402a74:	874a                	mv	a4,s2
20402a76:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20402a78:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20402a7a:	853e                	mv	a0,a5
20402a7c:	50b2                	lw	ra,44(sp)
20402a7e:	5422                	lw	s0,40(sp)
20402a80:	5912                	lw	s2,36(sp)
20402a82:	5982                	lw	s3,32(sp)
20402a84:	6145                	addi	sp,sp,48
20402a86:	8082                	ret

20402a88 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20402a88:	1101                	addi	sp,sp,-32
20402a8a:	ce06                	sw	ra,28(sp)
20402a8c:	cc22                	sw	s0,24(sp)
20402a8e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20402a90:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20402a94:	f14027f3          	csrr	a5,mhartid
20402a98:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20402a9c:	fec42783          	lw	a5,-20(s0)
20402aa0:	853e                	mv	a0,a5
20402aa2:	1c4030ef          	jal	ra,20405c66 <metal_cpu_get>
20402aa6:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20402aaa:	fe842503          	lw	a0,-24(s0)
20402aae:	192030ef          	jal	ra,20405c40 <metal_cpu_interrupt_controller>
20402ab2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20402ab4:	853e                	mv	a0,a5
20402ab6:	40f2                	lw	ra,28(sp)
20402ab8:	4462                	lw	s0,24(sp)
20402aba:	6105                	addi	sp,sp,32
20402abc:	8082                	ret

20402abe <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20402abe:	7139                	addi	sp,sp,-64
20402ac0:	de06                	sw	ra,60(sp)
20402ac2:	dc22                	sw	s0,56(sp)
20402ac4:	0080                	addi	s0,sp,64
20402ac6:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402aca:	fcc42503          	lw	a0,-52(s0)
20402ace:	3bed                	jal	204028c8 <__metal_driver_sifive_clint0_num_interrupts>
20402ad0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20402ad4:	fcc42783          	lw	a5,-52(s0)
20402ad8:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20402adc:	fe442783          	lw	a5,-28(s0)
20402ae0:	43dc                	lw	a5,4(a5)
20402ae2:	efa9                	bnez	a5,20402b3c <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20402ae4:	fe042623          	sw	zero,-20(s0)
20402ae8:	a081                	j	20402b28 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402aea:	fec42583          	lw	a1,-20(s0)
20402aee:	fcc42503          	lw	a0,-52(s0)
20402af2:	3bed                	jal	204028ec <__metal_driver_sifive_clint0_interrupt_parents>
20402af4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402af8:	fec42583          	lw	a1,-20(s0)
20402afc:	fcc42503          	lw	a0,-52(s0)
20402b00:	3525                	jal	20402928 <__metal_driver_sifive_clint0_interrupt_lines>
20402b02:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20402b06:	fe042783          	lw	a5,-32(s0)
20402b0a:	439c                	lw	a5,0(a5)
20402b0c:	4fdc                	lw	a5,28(a5)
20402b0e:	fcc42683          	lw	a3,-52(s0)
20402b12:	4601                	li	a2,0
20402b14:	fdc42583          	lw	a1,-36(s0)
20402b18:	fe042503          	lw	a0,-32(s0)
20402b1c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20402b1e:	fec42783          	lw	a5,-20(s0)
20402b22:	0785                	addi	a5,a5,1
20402b24:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20402b28:	fec42703          	lw	a4,-20(s0)
20402b2c:	fe842783          	lw	a5,-24(s0)
20402b30:	faf74de3          	blt	a4,a5,20402aea <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20402b34:	fe442783          	lw	a5,-28(s0)
20402b38:	4705                	li	a4,1
20402b3a:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20402b3c:	0001                	nop
20402b3e:	50f2                	lw	ra,60(sp)
20402b40:	5462                	lw	s0,56(sp)
20402b42:	6121                	addi	sp,sp,64
20402b44:	8082                	ret

20402b46 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20402b46:	7139                	addi	sp,sp,-64
20402b48:	de06                	sw	ra,60(sp)
20402b4a:	dc22                	sw	s0,56(sp)
20402b4c:	0080                	addi	s0,sp,64
20402b4e:	fca42623          	sw	a0,-52(s0)
20402b52:	fcb42423          	sw	a1,-56(s0)
20402b56:	fcc42223          	sw	a2,-60(s0)
20402b5a:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20402b5e:	57fd                	li	a5,-1
20402b60:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20402b64:	332010ef          	jal	ra,20403e96 <__metal_controller_interrupt_vector_mode>
20402b68:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
20402b6c:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402b70:	3f21                	jal	20402a88 <_get_cpu_intc>
20402b72:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402b76:	fcc42503          	lw	a0,-52(s0)
20402b7a:	33b9                	jal	204028c8 <__metal_driver_sifive_clint0_num_interrupts>
20402b7c:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20402b80:	fe042703          	lw	a4,-32(s0)
20402b84:	4785                	li	a5,1
20402b86:	00f70863          	beq	a4,a5,20402b96 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20402b8a:	fe042783          	lw	a5,-32(s0)
20402b8e:	c781                	beqz	a5,20402b96 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20402b90:	fec42783          	lw	a5,-20(s0)
20402b94:	a049                	j	20402c16 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20402b96:	fe042223          	sw	zero,-28(s0)
20402b9a:	a091                	j	20402bde <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402b9c:	fe442583          	lw	a1,-28(s0)
20402ba0:	fcc42503          	lw	a0,-52(s0)
20402ba4:	3351                	jal	20402928 <__metal_driver_sifive_clint0_interrupt_lines>
20402ba6:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402baa:	fe442583          	lw	a1,-28(s0)
20402bae:	fcc42503          	lw	a0,-52(s0)
20402bb2:	3b2d                	jal	204028ec <__metal_driver_sifive_clint0_interrupt_parents>
20402bb4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20402bb8:	fdc42703          	lw	a4,-36(s0)
20402bbc:	fe842783          	lw	a5,-24(s0)
20402bc0:	00f71863          	bne	a4,a5,20402bd0 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20402bc4:	fc842703          	lw	a4,-56(s0)
20402bc8:	fd442783          	lw	a5,-44(s0)
20402bcc:	02f70063          	beq	a4,a5,20402bec <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20402bd0:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20402bd4:	fe442783          	lw	a5,-28(s0)
20402bd8:	0785                	addi	a5,a5,1
20402bda:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20402bde:	fe442703          	lw	a4,-28(s0)
20402be2:	fd842783          	lw	a5,-40(s0)
20402be6:	faf74be3          	blt	a4,a5,20402b9c <__metal_driver_riscv_clint0_register+0x56>
20402bea:	a011                	j	20402bee <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20402bec:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20402bee:	fe842783          	lw	a5,-24(s0)
20402bf2:	c385                	beqz	a5,20402c12 <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20402bf4:	fe842783          	lw	a5,-24(s0)
20402bf8:	439c                	lw	a5,0(a5)
20402bfa:	4fdc                	lw	a5,28(a5)
20402bfc:	fc042683          	lw	a3,-64(s0)
20402c00:	fc442603          	lw	a2,-60(s0)
20402c04:	fc842583          	lw	a1,-56(s0)
20402c08:	fe842503          	lw	a0,-24(s0)
20402c0c:	9782                	jalr	a5
20402c0e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20402c12:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20402c16:	853e                	mv	a0,a5
20402c18:	50f2                	lw	ra,60(sp)
20402c1a:	5462                	lw	s0,56(sp)
20402c1c:	6121                	addi	sp,sp,64
20402c1e:	8082                	ret

20402c20 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20402c20:	7179                	addi	sp,sp,-48
20402c22:	d622                	sw	s0,44(sp)
20402c24:	1800                	addi	s0,sp,48
20402c26:	fca42e23          	sw	a0,-36(s0)
20402c2a:	fcb42c23          	sw	a1,-40(s0)
20402c2e:	fcc42a23          	sw	a2,-44(s0)
20402c32:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20402c36:	57fd                	li	a5,-1
20402c38:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20402c3c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20402c40:	853e                	mv	a0,a5
20402c42:	5432                	lw	s0,44(sp)
20402c44:	6145                	addi	sp,sp,48
20402c46:	8082                	ret

20402c48 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20402c48:	1101                	addi	sp,sp,-32
20402c4a:	ce06                	sw	ra,28(sp)
20402c4c:	cc22                	sw	s0,24(sp)
20402c4e:	1000                	addi	s0,sp,32
20402c50:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20402c54:	242010ef          	jal	ra,20403e96 <__metal_controller_interrupt_vector_mode>
20402c58:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
20402c5a:	853e                	mv	a0,a5
20402c5c:	40f2                	lw	ra,28(sp)
20402c5e:	4462                	lw	s0,24(sp)
20402c60:	6105                	addi	sp,sp,32
20402c62:	8082                	ret

20402c64 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20402c64:	7179                	addi	sp,sp,-48
20402c66:	d606                	sw	ra,44(sp)
20402c68:	d422                	sw	s0,40(sp)
20402c6a:	1800                	addi	s0,sp,48
20402c6c:	fca42e23          	sw	a0,-36(s0)
20402c70:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20402c74:	57fd                	li	a5,-1
20402c76:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20402c7a:	3539                	jal	20402a88 <_get_cpu_intc>
20402c7c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20402c80:	fe842783          	lw	a5,-24(s0)
20402c84:	c395                	beqz	a5,20402ca8 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20402c86:	fd842703          	lw	a4,-40(s0)
20402c8a:	4785                	li	a5,1
20402c8c:	00e7ef63          	bltu	a5,a4,20402caa <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20402c90:	fe842783          	lw	a5,-24(s0)
20402c94:	439c                	lw	a5,0(a5)
20402c96:	43dc                	lw	a5,4(a5)
20402c98:	fd842583          	lw	a1,-40(s0)
20402c9c:	fe842503          	lw	a0,-24(s0)
20402ca0:	9782                	jalr	a5
20402ca2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
20402ca6:	a011                	j	20402caa <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20402ca8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
20402caa:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20402cae:	853e                	mv	a0,a5
20402cb0:	50b2                	lw	ra,44(sp)
20402cb2:	5422                	lw	s0,40(sp)
20402cb4:	6145                	addi	sp,sp,48
20402cb6:	8082                	ret

20402cb8 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20402cb8:	7139                	addi	sp,sp,-64
20402cba:	de06                	sw	ra,60(sp)
20402cbc:	dc22                	sw	s0,56(sp)
20402cbe:	0080                	addi	s0,sp,64
20402cc0:	fca42623          	sw	a0,-52(s0)
20402cc4:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20402cc8:	57fd                	li	a5,-1
20402cca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20402cce:	fc842783          	lw	a5,-56(s0)
20402cd2:	c7c9                	beqz	a5,20402d5c <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20402cd4:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402cd8:	3b45                	jal	20402a88 <_get_cpu_intc>
20402cda:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402cde:	fcc42503          	lw	a0,-52(s0)
20402ce2:	36dd                	jal	204028c8 <__metal_driver_sifive_clint0_num_interrupts>
20402ce4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20402ce8:	fe042223          	sw	zero,-28(s0)
20402cec:	a091                	j	20402d30 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402cee:	fe442583          	lw	a1,-28(s0)
20402cf2:	fcc42503          	lw	a0,-52(s0)
20402cf6:	390d                	jal	20402928 <__metal_driver_sifive_clint0_interrupt_lines>
20402cf8:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402cfc:	fe442583          	lw	a1,-28(s0)
20402d00:	fcc42503          	lw	a0,-52(s0)
20402d04:	36e5                	jal	204028ec <__metal_driver_sifive_clint0_interrupt_parents>
20402d06:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20402d0a:	fe042703          	lw	a4,-32(s0)
20402d0e:	fe842783          	lw	a5,-24(s0)
20402d12:	00f71863          	bne	a4,a5,20402d22 <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20402d16:	fc842703          	lw	a4,-56(s0)
20402d1a:	fd842783          	lw	a5,-40(s0)
20402d1e:	02f70063          	beq	a4,a5,20402d3e <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20402d22:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402d26:	fe442783          	lw	a5,-28(s0)
20402d2a:	0785                	addi	a5,a5,1
20402d2c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20402d30:	fe442703          	lw	a4,-28(s0)
20402d34:	fdc42783          	lw	a5,-36(s0)
20402d38:	faf74be3          	blt	a4,a5,20402cee <__metal_driver_riscv_clint0_enable+0x36>
20402d3c:	a011                	j	20402d40 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20402d3e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20402d40:	fe842783          	lw	a5,-24(s0)
20402d44:	cf81                	beqz	a5,20402d5c <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20402d46:	fe842783          	lw	a5,-24(s0)
20402d4a:	439c                	lw	a5,0(a5)
20402d4c:	53dc                	lw	a5,36(a5)
20402d4e:	fc842583          	lw	a1,-56(s0)
20402d52:	fe842503          	lw	a0,-24(s0)
20402d56:	9782                	jalr	a5
20402d58:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20402d5c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20402d60:	853e                	mv	a0,a5
20402d62:	50f2                	lw	ra,60(sp)
20402d64:	5462                	lw	s0,56(sp)
20402d66:	6121                	addi	sp,sp,64
20402d68:	8082                	ret

20402d6a <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20402d6a:	7139                	addi	sp,sp,-64
20402d6c:	de06                	sw	ra,60(sp)
20402d6e:	dc22                	sw	s0,56(sp)
20402d70:	0080                	addi	s0,sp,64
20402d72:	fca42623          	sw	a0,-52(s0)
20402d76:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20402d7a:	57fd                	li	a5,-1
20402d7c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20402d80:	fc842783          	lw	a5,-56(s0)
20402d84:	c7d9                	beqz	a5,20402e12 <__metal_driver_riscv_clint0_disable+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20402d86:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402d8a:	39fd                	jal	20402a88 <_get_cpu_intc>
20402d8c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402d90:	fcc42503          	lw	a0,-52(s0)
20402d94:	b35ff0ef          	jal	ra,204028c8 <__metal_driver_sifive_clint0_num_interrupts>
20402d98:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20402d9c:	fe042223          	sw	zero,-28(s0)
20402da0:	a099                	j	20402de6 <__metal_driver_riscv_clint0_disable+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402da2:	fe442583          	lw	a1,-28(s0)
20402da6:	fcc42503          	lw	a0,-52(s0)
20402daa:	3ebd                	jal	20402928 <__metal_driver_sifive_clint0_interrupt_lines>
20402dac:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402db0:	fe442583          	lw	a1,-28(s0)
20402db4:	fcc42503          	lw	a0,-52(s0)
20402db8:	b35ff0ef          	jal	ra,204028ec <__metal_driver_sifive_clint0_interrupt_parents>
20402dbc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20402dc0:	fe042703          	lw	a4,-32(s0)
20402dc4:	fe842783          	lw	a5,-24(s0)
20402dc8:	00f71863          	bne	a4,a5,20402dd8 <__metal_driver_riscv_clint0_disable+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20402dcc:	fc842703          	lw	a4,-56(s0)
20402dd0:	fd842783          	lw	a5,-40(s0)
20402dd4:	02f70063          	beq	a4,a5,20402df4 <__metal_driver_riscv_clint0_disable+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20402dd8:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402ddc:	fe442783          	lw	a5,-28(s0)
20402de0:	0785                	addi	a5,a5,1
20402de2:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20402de6:	fe442703          	lw	a4,-28(s0)
20402dea:	fdc42783          	lw	a5,-36(s0)
20402dee:	faf74ae3          	blt	a4,a5,20402da2 <__metal_driver_riscv_clint0_disable+0x38>
20402df2:	a011                	j	20402df6 <__metal_driver_riscv_clint0_disable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20402df4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20402df6:	fe842783          	lw	a5,-24(s0)
20402dfa:	cf81                	beqz	a5,20402e12 <__metal_driver_riscv_clint0_disable+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20402dfc:	fe842783          	lw	a5,-24(s0)
20402e00:	439c                	lw	a5,0(a5)
20402e02:	579c                	lw	a5,40(a5)
20402e04:	fc842583          	lw	a1,-56(s0)
20402e08:	fe842503          	lw	a0,-24(s0)
20402e0c:	9782                	jalr	a5
20402e0e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20402e12:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
20402e16:	853e                	mv	a0,a5
20402e18:	50f2                	lw	ra,60(sp)
20402e1a:	5462                	lw	s0,56(sp)
20402e1c:	6121                	addi	sp,sp,64
20402e1e:	8082                	ret

20402e20 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20402e20:	7179                	addi	sp,sp,-48
20402e22:	d606                	sw	ra,44(sp)
20402e24:	d422                	sw	s0,40(sp)
20402e26:	1800                	addi	s0,sp,48
20402e28:	fca42e23          	sw	a0,-36(s0)
20402e2c:	fcb42c23          	sw	a1,-40(s0)
20402e30:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
20402e34:	57fd                	li	a5,-1
20402e36:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20402e3a:	fdc42783          	lw	a5,-36(s0)
20402e3e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20402e42:	fdc42503          	lw	a0,-36(s0)
20402e46:	a5dff0ef          	jal	ra,204028a2 <__metal_driver_sifive_clint0_control_base>
20402e4a:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20402e4e:	fd842703          	lw	a4,-40(s0)
20402e52:	4789                	li	a5,2
20402e54:	04f70963          	beq	a4,a5,20402ea6 <__metal_driver_riscv_clint0_command_request+0x86>
20402e58:	fd842703          	lw	a4,-40(s0)
20402e5c:	4789                	li	a5,2
20402e5e:	00e7c863          	blt	a5,a4,20402e6e <__metal_driver_riscv_clint0_command_request+0x4e>
20402e62:	fd842703          	lw	a4,-40(s0)
20402e66:	4785                	li	a5,1
20402e68:	00f70e63          	beq	a4,a5,20402e84 <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20402e6c:	a8f1                	j	20402f48 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20402e6e:	fd842703          	lw	a4,-40(s0)
20402e72:	478d                	li	a5,3
20402e74:	04f70d63          	beq	a4,a5,20402ece <__metal_driver_riscv_clint0_command_request+0xae>
20402e78:	fd842703          	lw	a4,-40(s0)
20402e7c:	4791                	li	a5,4
20402e7e:	08f70963          	beq	a4,a5,20402f10 <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20402e82:	a0d9                	j	20402f48 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20402e84:	fd442783          	lw	a5,-44(s0)
20402e88:	cbcd                	beqz	a5,20402f3a <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20402e8a:	fe842503          	lw	a0,-24(s0)
20402e8e:	acbff0ef          	jal	ra,20402958 <__metal_clint0_mtime_get>
20402e92:	87aa                	mv	a5,a0
20402e94:	882e                	mv	a6,a1
20402e96:	fd442703          	lw	a4,-44(s0)
20402e9a:	c31c                	sw	a5,0(a4)
20402e9c:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20402ea0:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402ea4:	a859                	j	20402f3a <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20402ea6:	fd442783          	lw	a5,-44(s0)
20402eaa:	cbd1                	beqz	a5,20402f3e <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20402eac:	fd442783          	lw	a5,-44(s0)
20402eb0:	439c                	lw	a5,0(a5)
20402eb2:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402eb6:	fe042783          	lw	a5,-32(s0)
20402eba:	078a                	slli	a5,a5,0x2
20402ebc:	873e                	mv	a4,a5
20402ebe:	fe442783          	lw	a5,-28(s0)
20402ec2:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20402ec4:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20402ec8:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402ecc:	a88d                	j	20402f3e <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20402ece:	fd442783          	lw	a5,-44(s0)
20402ed2:	cba5                	beqz	a5,20402f42 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20402ed4:	fd442783          	lw	a5,-44(s0)
20402ed8:	439c                	lw	a5,0(a5)
20402eda:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402ede:	fe042783          	lw	a5,-32(s0)
20402ee2:	078a                	slli	a5,a5,0x2
20402ee4:	873e                	mv	a4,a5
20402ee6:	fe442783          	lw	a5,-28(s0)
20402eea:	97ba                	add	a5,a5,a4
20402eec:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20402eee:	4785                	li	a5,1
20402ef0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20402ef2:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402ef6:	fe042783          	lw	a5,-32(s0)
20402efa:	078a                	slli	a5,a5,0x2
20402efc:	873e                	mv	a4,a5
20402efe:	fe442783          	lw	a5,-28(s0)
20402f02:	97ba                	add	a5,a5,a4
20402f04:	439c                	lw	a5,0(a5)
20402f06:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20402f0a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402f0e:	a815                	j	20402f42 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20402f10:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20402f14:	fd442783          	lw	a5,-44(s0)
20402f18:	c79d                	beqz	a5,20402f46 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20402f1a:	fd442783          	lw	a5,-44(s0)
20402f1e:	439c                	lw	a5,0(a5)
20402f20:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402f24:	fe042783          	lw	a5,-32(s0)
20402f28:	078a                	slli	a5,a5,0x2
20402f2a:	873e                	mv	a4,a5
20402f2c:	fe442783          	lw	a5,-28(s0)
20402f30:	97ba                	add	a5,a5,a4
20402f32:	439c                	lw	a5,0(a5)
20402f34:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402f38:	a039                	j	20402f46 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402f3a:	0001                	nop
20402f3c:	a031                	j	20402f48 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402f3e:	0001                	nop
20402f40:	a021                	j	20402f48 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402f42:	0001                	nop
20402f44:	a011                	j	20402f48 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402f46:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20402f48:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
20402f4c:	853e                	mv	a0,a5
20402f4e:	50b2                	lw	ra,44(sp)
20402f50:	5422                	lw	s0,40(sp)
20402f52:	6145                	addi	sp,sp,48
20402f54:	8082                	ret

20402f56 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20402f56:	7179                	addi	sp,sp,-48
20402f58:	d606                	sw	ra,44(sp)
20402f5a:	d422                	sw	s0,40(sp)
20402f5c:	1800                	addi	s0,sp,48
20402f5e:	fca42e23          	sw	a0,-36(s0)
20402f62:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20402f66:	52b020ef          	jal	ra,20405c90 <metal_cpu_get_current_hartid>
20402f6a:	87aa                	mv	a5,a0
20402f6c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20402f70:	fec40793          	addi	a5,s0,-20
20402f74:	863e                	mv	a2,a5
20402f76:	4589                	li	a1,2
20402f78:	fdc42503          	lw	a0,-36(s0)
20402f7c:	3555                	jal	20402e20 <__metal_driver_riscv_clint0_command_request>
20402f7e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20402f80:	853e                	mv	a0,a5
20402f82:	50b2                	lw	ra,44(sp)
20402f84:	5422                	lw	s0,40(sp)
20402f86:	6145                	addi	sp,sp,48
20402f88:	8082                	ret

20402f8a <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20402f8a:	7179                	addi	sp,sp,-48
20402f8c:	d606                	sw	ra,44(sp)
20402f8e:	d422                	sw	s0,40(sp)
20402f90:	1800                	addi	s0,sp,48
20402f92:	fca42e23          	sw	a0,-36(s0)
20402f96:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
20402f9a:	4f7020ef          	jal	ra,20405c90 <metal_cpu_get_current_hartid>
20402f9e:	87aa                	mv	a5,a0
20402fa0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
20402fa4:	fec40793          	addi	a5,s0,-20
20402fa8:	863e                	mv	a2,a5
20402faa:	458d                	li	a1,3
20402fac:	fdc42503          	lw	a0,-36(s0)
20402fb0:	3d85                	jal	20402e20 <__metal_driver_riscv_clint0_command_request>
20402fb2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20402fb4:	853e                	mv	a0,a5
20402fb6:	50b2                	lw	ra,44(sp)
20402fb8:	5422                	lw	s0,40(sp)
20402fba:	6145                	addi	sp,sp,48
20402fbc:	8082                	ret

20402fbe <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20402fbe:	1101                	addi	sp,sp,-32
20402fc0:	ce22                	sw	s0,28(sp)
20402fc2:	1000                	addi	s0,sp,32
20402fc4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402fc8:	fec42703          	lw	a4,-20(s0)
20402fcc:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20402fd0:	00f71463          	bne	a4,a5,20402fd8 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:197
		return 0;
20402fd4:	4781                	li	a5,0
20402fd6:	a011                	j	20402fda <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
20402fd8:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:202
	}
}
20402fda:	853e                	mv	a0,a5
20402fdc:	4472                	lw	s0,28(sp)
20402fde:	6105                	addi	sp,sp,32
20402fe0:	8082                	ret

20402fe2 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20402fe2:	1101                	addi	sp,sp,-32
20402fe4:	ce22                	sw	s0,28(sp)
20402fe6:	1000                	addi	s0,sp,32
20402fe8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402fec:	fec42703          	lw	a4,-20(s0)
20402ff0:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20402ff4:	00f71763          	bne	a4,a5,20403002 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:207
		return 1000000;
20402ff8:	000f47b7          	lui	a5,0xf4
20402ffc:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20403000:	a011                	j	20403004 <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
20403002:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:212
	}
}
20403004:	853e                	mv	a0,a5
20403006:	4472                	lw	s0,28(sp)
20403008:	6105                	addi	sp,sp,32
2040300a:	8082                	ret

2040300c <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
2040300c:	1101                	addi	sp,sp,-32
2040300e:	ce22                	sw	s0,28(sp)
20403010:	1000                	addi	s0,sp,32
20403012:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20403016:	fec42703          	lw	a4,-20(s0)
2040301a:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
2040301e:	00f71763          	bne	a4,a5,2040302c <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20403022:	800017b7          	lui	a5,0x80001
20403026:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdc7c>
2040302a:	a011                	j	2040302e <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
2040302c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:222
	}
}
2040302e:	853e                	mv	a0,a5
20403030:	4472                	lw	s0,28(sp)
20403032:	6105                	addi	sp,sp,32
20403034:	8082                	ret

20403036 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20403036:	1101                	addi	sp,sp,-32
20403038:	ce22                	sw	s0,28(sp)
2040303a:	1000                	addi	s0,sp,32
2040303c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20403040:	fec42783          	lw	a5,-20(s0)
20403044:	00f04a63          	bgtz	a5,20403058 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20403048:	fec42703          	lw	a4,-20(s0)
2040304c:	070a                	slli	a4,a4,0x2
2040304e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403052:	97ba                	add	a5,a5,a4
20403054:	439c                	lw	a5,0(a5)
20403056:	a011                	j	2040305a <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20403058:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
2040305a:	853e                	mv	a0,a5
2040305c:	4472                	lw	s0,28(sp)
2040305e:	6105                	addi	sp,sp,32
20403060:	8082                	ret

20403062 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20403062:	1101                	addi	sp,sp,-32
20403064:	ce22                	sw	s0,28(sp)
20403066:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20403068:	f14027f3          	csrr	a5,mhartid
2040306c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20403070:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20403074:	853e                	mv	a0,a5
20403076:	4472                	lw	s0,28(sp)
20403078:	6105                	addi	sp,sp,32
2040307a:	8082                	ret

2040307c <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
2040307c:	1101                	addi	sp,sp,-32
2040307e:	ce22                	sw	s0,28(sp)
20403080:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20403082:	47a1                	li	a5,8
20403084:	3007a7f3          	csrrs	a5,mstatus,a5
20403088:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
2040308c:	0001                	nop
2040308e:	4472                	lw	s0,28(sp)
20403090:	6105                	addi	sp,sp,32
20403092:	8082                	ret

20403094 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20403094:	1101                	addi	sp,sp,-32
20403096:	ce22                	sw	s0,28(sp)
20403098:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
2040309a:	47a1                	li	a5,8
2040309c:	3007b7f3          	csrrc	a5,mstatus,a5
204030a0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
204030a4:	0001                	nop
204030a6:	4472                	lw	s0,28(sp)
204030a8:	6105                	addi	sp,sp,32
204030aa:	8082                	ret

204030ac <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
204030ac:	1101                	addi	sp,sp,-32
204030ae:	ce22                	sw	s0,28(sp)
204030b0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204030b2:	47a1                	li	a5,8
204030b4:	3047a7f3          	csrrs	a5,mie,a5
204030b8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
204030bc:	0001                	nop
204030be:	4472                	lw	s0,28(sp)
204030c0:	6105                	addi	sp,sp,32
204030c2:	8082                	ret

204030c4 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
204030c4:	1101                	addi	sp,sp,-32
204030c6:	ce22                	sw	s0,28(sp)
204030c8:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204030ca:	47a1                	li	a5,8
204030cc:	3047b7f3          	csrrc	a5,mie,a5
204030d0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
204030d4:	0001                	nop
204030d6:	4472                	lw	s0,28(sp)
204030d8:	6105                	addi	sp,sp,32
204030da:	8082                	ret

204030dc <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
204030dc:	1101                	addi	sp,sp,-32
204030de:	ce22                	sw	s0,28(sp)
204030e0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204030e2:	08000793          	li	a5,128
204030e6:	3047a7f3          	csrrs	a5,mie,a5
204030ea:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
204030ee:	0001                	nop
204030f0:	4472                	lw	s0,28(sp)
204030f2:	6105                	addi	sp,sp,32
204030f4:	8082                	ret

204030f6 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
204030f6:	1101                	addi	sp,sp,-32
204030f8:	ce22                	sw	s0,28(sp)
204030fa:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204030fc:	08000793          	li	a5,128
20403100:	3047b7f3          	csrrc	a5,mie,a5
20403104:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20403108:	0001                	nop
2040310a:	4472                	lw	s0,28(sp)
2040310c:	6105                	addi	sp,sp,32
2040310e:	8082                	ret

20403110 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20403110:	1101                	addi	sp,sp,-32
20403112:	ce22                	sw	s0,28(sp)
20403114:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20403116:	6785                	lui	a5,0x1
20403118:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
2040311c:	3047a7f3          	csrrs	a5,mie,a5
20403120:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20403124:	0001                	nop
20403126:	4472                	lw	s0,28(sp)
20403128:	6105                	addi	sp,sp,32
2040312a:	8082                	ret

2040312c <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
2040312c:	1101                	addi	sp,sp,-32
2040312e:	ce22                	sw	s0,28(sp)
20403130:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20403132:	6785                	lui	a5,0x1
20403134:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20403138:	3047b7f3          	csrrc	a5,mie,a5
2040313c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20403140:	0001                	nop
20403142:	4472                	lw	s0,28(sp)
20403144:	6105                	addi	sp,sp,32
20403146:	8082                	ret

20403148 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20403148:	7179                	addi	sp,sp,-48
2040314a:	d622                	sw	s0,44(sp)
2040314c:	1800                	addi	s0,sp,48
2040314e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20403152:	fdc42783          	lw	a5,-36(s0)
20403156:	4705                	li	a4,1
20403158:	00f717b3          	sll	a5,a4,a5
2040315c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20403160:	fec42783          	lw	a5,-20(s0)
20403164:	3047a7f3          	csrrs	a5,mie,a5
20403168:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
2040316c:	0001                	nop
2040316e:	5432                	lw	s0,44(sp)
20403170:	6145                	addi	sp,sp,48
20403172:	8082                	ret

20403174 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20403174:	7179                	addi	sp,sp,-48
20403176:	d622                	sw	s0,44(sp)
20403178:	1800                	addi	s0,sp,48
2040317a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
2040317e:	fdc42783          	lw	a5,-36(s0)
20403182:	4705                	li	a4,1
20403184:	00f717b3          	sll	a5,a4,a5
20403188:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
2040318c:	fec42783          	lw	a5,-20(s0)
20403190:	3047b7f3          	csrrc	a5,mie,a5
20403194:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20403198:	0001                	nop
2040319a:	5432                	lw	s0,44(sp)
2040319c:	6145                	addi	sp,sp,48
2040319e:	8082                	ret

204031a0 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
204031a0:	1101                	addi	sp,sp,-32
204031a2:	ce06                	sw	ra,28(sp)
204031a4:	cc22                	sw	s0,24(sp)
204031a6:	1000                	addi	s0,sp,32
204031a8:	fea42623          	sw	a0,-20(s0)
204031ac:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
204031b0:	06400513          	li	a0,100
204031b4:	2f7020ef          	jal	ra,20405caa <metal_shutdown>

204031b8 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
204031b8:	1101                	addi	sp,sp,-32
204031ba:	ce06                	sw	ra,28(sp)
204031bc:	cc22                	sw	s0,24(sp)
204031be:	1000                	addi	s0,sp,32
204031c0:	fea42623          	sw	a0,-20(s0)
204031c4:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
204031c8:	0c800513          	li	a0,200
204031cc:	2df020ef          	jal	ra,20405caa <metal_shutdown>

204031d0 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
204031d0:	715d                	addi	sp,sp,-80
204031d2:	c686                	sw	ra,76(sp)
204031d4:	c496                	sw	t0,72(sp)
204031d6:	c29a                	sw	t1,68(sp)
204031d8:	c09e                	sw	t2,64(sp)
204031da:	de22                	sw	s0,60(sp)
204031dc:	dc2a                	sw	a0,56(sp)
204031de:	da2e                	sw	a1,52(sp)
204031e0:	d832                	sw	a2,48(sp)
204031e2:	d636                	sw	a3,44(sp)
204031e4:	d43a                	sw	a4,40(sp)
204031e6:	d23e                	sw	a5,36(sp)
204031e8:	d042                	sw	a6,32(sp)
204031ea:	ce46                	sw	a7,28(sp)
204031ec:	cc72                	sw	t3,24(sp)
204031ee:	ca76                	sw	t4,20(sp)
204031f0:	c87a                	sw	t5,16(sp)
204031f2:	c67e                	sw	t6,12(sp)
204031f4:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
204031f6:	12c00513          	li	a0,300
204031fa:	2b1020ef          	jal	ra,20405caa <metal_shutdown>

204031fe <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
204031fe:	711d                	addi	sp,sp,-96
20403200:	ce86                	sw	ra,92(sp)
20403202:	cc96                	sw	t0,88(sp)
20403204:	ca9a                	sw	t1,84(sp)
20403206:	c89e                	sw	t2,80(sp)
20403208:	c6a2                	sw	s0,76(sp)
2040320a:	c4aa                	sw	a0,72(sp)
2040320c:	c2ae                	sw	a1,68(sp)
2040320e:	c0b2                	sw	a2,64(sp)
20403210:	de36                	sw	a3,60(sp)
20403212:	dc3a                	sw	a4,56(sp)
20403214:	da3e                	sw	a5,52(sp)
20403216:	d842                	sw	a6,48(sp)
20403218:	d646                	sw	a7,44(sp)
2040321a:	d472                	sw	t3,40(sp)
2040321c:	d276                	sw	t4,36(sp)
2040321e:	d07a                	sw	t5,32(sp)
20403220:	ce7e                	sw	t6,28(sp)
20403222:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403224:	3d3d                	jal	20403062 <__metal_myhart_id>
20403226:	872a                	mv	a4,a0
20403228:	070a                	slli	a4,a4,0x2
2040322a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040322e:	97ba                	add	a5,a5,a4
20403230:	439c                	lw	a5,0(a5)
20403232:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20403236:	fac42783          	lw	a5,-84(s0)
2040323a:	c785                	beqz	a5,20403262 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040323c:	fac42503          	lw	a0,-84(s0)
20403240:	33f1                	jal	2040300c <__metal_driver_cpu_interrupt_controller>
20403242:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20403246:	fa842783          	lw	a5,-88(s0)
2040324a:	0e07a783          	lw	a5,224(a5)
2040324e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20403252:	fa842783          	lw	a5,-88(s0)
20403256:	0d87a783          	lw	a5,216(a5)
2040325a:	fa442583          	lw	a1,-92(s0)
2040325e:	450d                	li	a0,3
20403260:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20403262:	0001                	nop
20403264:	40f6                	lw	ra,92(sp)
20403266:	42e6                	lw	t0,88(sp)
20403268:	4356                	lw	t1,84(sp)
2040326a:	43c6                	lw	t2,80(sp)
2040326c:	4436                	lw	s0,76(sp)
2040326e:	4526                	lw	a0,72(sp)
20403270:	4596                	lw	a1,68(sp)
20403272:	4606                	lw	a2,64(sp)
20403274:	56f2                	lw	a3,60(sp)
20403276:	5762                	lw	a4,56(sp)
20403278:	57d2                	lw	a5,52(sp)
2040327a:	5842                	lw	a6,48(sp)
2040327c:	58b2                	lw	a7,44(sp)
2040327e:	5e22                	lw	t3,40(sp)
20403280:	5e92                	lw	t4,36(sp)
20403282:	5f02                	lw	t5,32(sp)
20403284:	4ff2                	lw	t6,28(sp)
20403286:	6125                	addi	sp,sp,96
20403288:	30200073          	mret

2040328c <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
2040328c:	7179                	addi	sp,sp,-48
2040328e:	d606                	sw	ra,44(sp)
20403290:	d422                	sw	s0,40(sp)
20403292:	1800                	addi	s0,sp,48
20403294:	fca42e23          	sw	a0,-36(s0)
20403298:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040329c:	33d9                	jal	20403062 <__metal_myhart_id>
2040329e:	872a                	mv	a4,a0
204032a0:	070a                	slli	a4,a4,0x2
204032a2:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204032a6:	97ba                	add	a5,a5,a4
204032a8:	439c                	lw	a5,0(a5)
204032aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204032ae:	342027f3          	csrr	a5,mcause
204032b2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
204032b6:	fec42783          	lw	a5,-20(s0)
204032ba:	c795                	beqz	a5,204032e6 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204032bc:	fec42503          	lw	a0,-20(s0)
204032c0:	33b1                	jal	2040300c <__metal_driver_cpu_interrupt_controller>
204032c2:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
204032c6:	fe842783          	lw	a5,-24(s0)
204032ca:	3ff7f793          	andi	a5,a5,1023
204032ce:	fe442703          	lw	a4,-28(s0)
204032d2:	0e078793          	addi	a5,a5,224
204032d6:	078a                	slli	a5,a5,0x2
204032d8:	97ba                	add	a5,a5,a4
204032da:	479c                	lw	a5,8(a5)
204032dc:	fdc42583          	lw	a1,-36(s0)
204032e0:	fec42503          	lw	a0,-20(s0)
204032e4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
204032e6:	0001                	nop
204032e8:	50b2                	lw	ra,44(sp)
204032ea:	5422                	lw	s0,40(sp)
204032ec:	6145                	addi	sp,sp,48
204032ee:	8082                	ret

204032f0 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
204032f0:	711d                	addi	sp,sp,-96
204032f2:	ce86                	sw	ra,92(sp)
204032f4:	cc96                	sw	t0,88(sp)
204032f6:	ca9a                	sw	t1,84(sp)
204032f8:	c89e                	sw	t2,80(sp)
204032fa:	c6a2                	sw	s0,76(sp)
204032fc:	c4aa                	sw	a0,72(sp)
204032fe:	c2ae                	sw	a1,68(sp)
20403300:	c0b2                	sw	a2,64(sp)
20403302:	de36                	sw	a3,60(sp)
20403304:	dc3a                	sw	a4,56(sp)
20403306:	da3e                	sw	a5,52(sp)
20403308:	d842                	sw	a6,48(sp)
2040330a:	d646                	sw	a7,44(sp)
2040330c:	d472                	sw	t3,40(sp)
2040330e:	d276                	sw	t4,36(sp)
20403310:	d07a                	sw	t5,32(sp)
20403312:	ce7e                	sw	t6,28(sp)
20403314:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403316:	33b1                	jal	20403062 <__metal_myhart_id>
20403318:	872a                	mv	a4,a0
2040331a:	070a                	slli	a4,a4,0x2
2040331c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403320:	97ba                	add	a5,a5,a4
20403322:	439c                	lw	a5,0(a5)
20403324:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20403328:	fac42783          	lw	a5,-84(s0)
2040332c:	c785                	beqz	a5,20403354 <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040332e:	fac42503          	lw	a0,-84(s0)
20403332:	39e9                	jal	2040300c <__metal_driver_cpu_interrupt_controller>
20403334:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20403338:	fa842783          	lw	a5,-88(s0)
2040333c:	1407a783          	lw	a5,320(a5)
20403340:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20403344:	fa842783          	lw	a5,-88(s0)
20403348:	1387a783          	lw	a5,312(a5)
2040334c:	fa442583          	lw	a1,-92(s0)
20403350:	451d                	li	a0,7
20403352:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20403354:	0001                	nop
20403356:	40f6                	lw	ra,92(sp)
20403358:	42e6                	lw	t0,88(sp)
2040335a:	4356                	lw	t1,84(sp)
2040335c:	43c6                	lw	t2,80(sp)
2040335e:	4436                	lw	s0,76(sp)
20403360:	4526                	lw	a0,72(sp)
20403362:	4596                	lw	a1,68(sp)
20403364:	4606                	lw	a2,64(sp)
20403366:	56f2                	lw	a3,60(sp)
20403368:	5762                	lw	a4,56(sp)
2040336a:	57d2                	lw	a5,52(sp)
2040336c:	5842                	lw	a6,48(sp)
2040336e:	58b2                	lw	a7,44(sp)
20403370:	5e22                	lw	t3,40(sp)
20403372:	5e92                	lw	t4,36(sp)
20403374:	5f02                	lw	t5,32(sp)
20403376:	4ff2                	lw	t6,28(sp)
20403378:	6125                	addi	sp,sp,96
2040337a:	30200073          	mret

2040337e <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
2040337e:	7179                	addi	sp,sp,-48
20403380:	d606                	sw	ra,44(sp)
20403382:	d422                	sw	s0,40(sp)
20403384:	1800                	addi	s0,sp,48
20403386:	fca42e23          	sw	a0,-36(s0)
2040338a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
2040338e:	39d1                	jal	20403062 <__metal_myhart_id>
20403390:	87aa                	mv	a5,a0
20403392:	853e                	mv	a0,a5
20403394:	314d                	jal	20403036 <__metal_driver_cpu_get>
20403396:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
2040339a:	fec42503          	lw	a0,-20(s0)
2040339e:	152010ef          	jal	ra,204044f0 <__metal_driver_cpu_mtime_get>
204033a2:	fea42023          	sw	a0,-32(s0)
204033a6:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
204033aa:	fe042783          	lw	a5,-32(s0)
204033ae:	fe442803          	lw	a6,-28(s0)
204033b2:	45a9                	li	a1,10
204033b4:	4601                	li	a2,0
204033b6:	00b786b3          	add	a3,a5,a1
204033ba:	8536                	mv	a0,a3
204033bc:	00f53533          	sltu	a0,a0,a5
204033c0:	00c80733          	add	a4,a6,a2
204033c4:	00e507b3          	add	a5,a0,a4
204033c8:	873e                	mv	a4,a5
204033ca:	87b6                	mv	a5,a3
204033cc:	883a                	mv	a6,a4
204033ce:	85be                	mv	a1,a5
204033d0:	8642                	mv	a2,a6
204033d2:	fec42503          	lw	a0,-20(s0)
204033d6:	180010ef          	jal	ra,20404556 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
204033da:	0001                	nop
204033dc:	50b2                	lw	ra,44(sp)
204033de:	5422                	lw	s0,40(sp)
204033e0:	6145                	addi	sp,sp,48
204033e2:	8082                	ret
	...

20403400 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20403400:	7119                	addi	sp,sp,-128
20403402:	de86                	sw	ra,124(sp)
20403404:	dc96                	sw	t0,120(sp)
20403406:	da9a                	sw	t1,116(sp)
20403408:	d89e                	sw	t2,112(sp)
2040340a:	d6a2                	sw	s0,108(sp)
2040340c:	d4aa                	sw	a0,104(sp)
2040340e:	d2ae                	sw	a1,100(sp)
20403410:	d0b2                	sw	a2,96(sp)
20403412:	ceb6                	sw	a3,92(sp)
20403414:	ccba                	sw	a4,88(sp)
20403416:	cabe                	sw	a5,84(sp)
20403418:	c8c2                	sw	a6,80(sp)
2040341a:	c6c6                	sw	a7,76(sp)
2040341c:	c4f2                	sw	t3,72(sp)
2040341e:	c2f6                	sw	t4,68(sp)
20403420:	c0fa                	sw	t5,64(sp)
20403422:	de7e                	sw	t6,60(sp)
20403424:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403426:	c3dff0ef          	jal	ra,20403062 <__metal_myhart_id>
2040342a:	872a                	mv	a4,a0
2040342c:	070a                	slli	a4,a4,0x2
2040342e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403432:	97ba                	add	a5,a5,a4
20403434:	439c                	lw	a5,0(a5)
20403436:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
2040343a:	342027f3          	csrr	a5,mcause
2040343e:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403442:	341027f3          	csrr	a5,mepc
20403446:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
2040344a:	343027f3          	csrr	a5,mtval
2040344e:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20403452:	305027f3          	csrr	a5,mtvec
20403456:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
2040345a:	fac42783          	lw	a5,-84(s0)
2040345e:	c7e9                	beqz	a5,20403528 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403460:	fac42503          	lw	a0,-84(s0)
20403464:	ba9ff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20403468:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
2040346c:	fa842783          	lw	a5,-88(s0)
20403470:	3ff7f793          	andi	a5,a5,1023
20403474:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20403478:	fa842783          	lw	a5,-88(s0)
2040347c:	0807d863          	bgez	a5,2040350c <__metal_exception_handler+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20403480:	f9442703          	lw	a4,-108(s0)
20403484:	47ad                	li	a5,11
20403486:	00e7d763          	bge	a5,a4,20403494 <__metal_exception_handler+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
2040348a:	f9c42783          	lw	a5,-100(s0)
2040348e:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20403492:	ef9d                	bnez	a5,204034d0 <__metal_exception_handler+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20403494:	f9842683          	lw	a3,-104(s0)
20403498:	f9442703          	lw	a4,-108(s0)
2040349c:	87ba                	mv	a5,a4
2040349e:	0786                	slli	a5,a5,0x1
204034a0:	97ba                	add	a5,a5,a4
204034a2:	078e                	slli	a5,a5,0x3
204034a4:	97b6                	add	a5,a5,a3
204034a6:	0987a783          	lw	a5,152(a5)
204034aa:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
204034ae:	f9842683          	lw	a3,-104(s0)
204034b2:	f9442703          	lw	a4,-108(s0)
204034b6:	87ba                	mv	a5,a4
204034b8:	0786                	slli	a5,a5,0x1
204034ba:	97ba                	add	a5,a5,a4
204034bc:	078e                	slli	a5,a5,0x3
204034be:	97b6                	add	a5,a5,a3
204034c0:	0907a783          	lw	a5,144(a5)
204034c4:	f8c42583          	lw	a1,-116(s0)
204034c8:	f9442503          	lw	a0,-108(s0)
204034cc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
204034ce:	a8a9                	j	20403528 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
204034d0:	f9c42783          	lw	a5,-100(s0)
204034d4:	03f7f713          	andi	a4,a5,63
204034d8:	4789                	li	a5,2
204034da:	04f71763          	bne	a4,a5,20403528 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
204034de:	307027f3          	csrr	a5,mtvt
204034e2:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204034e6:	f9842783          	lw	a5,-104(s0)
204034ea:	0dc7a783          	lw	a5,220(a5)
204034ee:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
204034f2:	f9042783          	lw	a5,-112(s0)
204034f6:	439c                	lw	a5,0(a5)
204034f8:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
204034fc:	f8842783          	lw	a5,-120(s0)
20403500:	f8c42583          	lw	a1,-116(s0)
20403504:	f9442503          	lw	a0,-108(s0)
20403508:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
2040350a:	a839                	j	20403528 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
2040350c:	f9842703          	lw	a4,-104(s0)
20403510:	f9442783          	lw	a5,-108(s0)
20403514:	0e078793          	addi	a5,a5,224
20403518:	078a                	slli	a5,a5,0x2
2040351a:	97ba                	add	a5,a5,a4
2040351c:	479c                	lw	a5,8(a5)
2040351e:	f9442583          	lw	a1,-108(s0)
20403522:	fac42503          	lw	a0,-84(s0)
20403526:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20403528:	50f6                	lw	ra,124(sp)
2040352a:	52e6                	lw	t0,120(sp)
2040352c:	5356                	lw	t1,116(sp)
2040352e:	53c6                	lw	t2,112(sp)
20403530:	5436                	lw	s0,108(sp)
20403532:	5526                	lw	a0,104(sp)
20403534:	5596                	lw	a1,100(sp)
20403536:	5606                	lw	a2,96(sp)
20403538:	46f6                	lw	a3,92(sp)
2040353a:	4766                	lw	a4,88(sp)
2040353c:	47d6                	lw	a5,84(sp)
2040353e:	4846                	lw	a6,80(sp)
20403540:	48b6                	lw	a7,76(sp)
20403542:	4e26                	lw	t3,72(sp)
20403544:	4e96                	lw	t4,68(sp)
20403546:	4f06                	lw	t5,64(sp)
20403548:	5ff2                	lw	t6,60(sp)
2040354a:	6109                	addi	sp,sp,128
2040354c:	30200073          	mret
	...

20403576 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20403576:	711d                	addi	sp,sp,-96
20403578:	ce86                	sw	ra,92(sp)
2040357a:	cc96                	sw	t0,88(sp)
2040357c:	ca9a                	sw	t1,84(sp)
2040357e:	c89e                	sw	t2,80(sp)
20403580:	c6a2                	sw	s0,76(sp)
20403582:	c4aa                	sw	a0,72(sp)
20403584:	c2ae                	sw	a1,68(sp)
20403586:	c0b2                	sw	a2,64(sp)
20403588:	de36                	sw	a3,60(sp)
2040358a:	dc3a                	sw	a4,56(sp)
2040358c:	da3e                	sw	a5,52(sp)
2040358e:	d842                	sw	a6,48(sp)
20403590:	d646                	sw	a7,44(sp)
20403592:	d472                	sw	t3,40(sp)
20403594:	d276                	sw	t4,36(sp)
20403596:	d07a                	sw	t5,32(sp)
20403598:	ce7e                	sw	t6,28(sp)
2040359a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040359c:	ac7ff0ef          	jal	ra,20403062 <__metal_myhart_id>
204035a0:	872a                	mv	a4,a0
204035a2:	070a                	slli	a4,a4,0x2
204035a4:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204035a8:	97ba                	add	a5,a5,a4
204035aa:	439c                	lw	a5,0(a5)
204035ac:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
204035b0:	fac42783          	lw	a5,-84(s0)
204035b4:	c78d                	beqz	a5,204035de <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204035b6:	fac42503          	lw	a0,-84(s0)
204035ba:	a53ff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
204035be:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
204035c2:	fa842783          	lw	a5,-88(s0)
204035c6:	2187a783          	lw	a5,536(a5)
204035ca:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
204035ce:	fa842783          	lw	a5,-88(s0)
204035d2:	2107a783          	lw	a5,528(a5)
204035d6:	fa442583          	lw	a1,-92(s0)
204035da:	4541                	li	a0,16
204035dc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
204035de:	0001                	nop
204035e0:	40f6                	lw	ra,92(sp)
204035e2:	42e6                	lw	t0,88(sp)
204035e4:	4356                	lw	t1,84(sp)
204035e6:	43c6                	lw	t2,80(sp)
204035e8:	4436                	lw	s0,76(sp)
204035ea:	4526                	lw	a0,72(sp)
204035ec:	4596                	lw	a1,68(sp)
204035ee:	4606                	lw	a2,64(sp)
204035f0:	56f2                	lw	a3,60(sp)
204035f2:	5762                	lw	a4,56(sp)
204035f4:	57d2                	lw	a5,52(sp)
204035f6:	5842                	lw	a6,48(sp)
204035f8:	58b2                	lw	a7,44(sp)
204035fa:	5e22                	lw	t3,40(sp)
204035fc:	5e92                	lw	t4,36(sp)
204035fe:	5f02                	lw	t5,32(sp)
20403600:	4ff2                	lw	t6,28(sp)
20403602:	6125                	addi	sp,sp,96
20403604:	30200073          	mret

20403608 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20403608:	711d                	addi	sp,sp,-96
2040360a:	ce86                	sw	ra,92(sp)
2040360c:	cc96                	sw	t0,88(sp)
2040360e:	ca9a                	sw	t1,84(sp)
20403610:	c89e                	sw	t2,80(sp)
20403612:	c6a2                	sw	s0,76(sp)
20403614:	c4aa                	sw	a0,72(sp)
20403616:	c2ae                	sw	a1,68(sp)
20403618:	c0b2                	sw	a2,64(sp)
2040361a:	de36                	sw	a3,60(sp)
2040361c:	dc3a                	sw	a4,56(sp)
2040361e:	da3e                	sw	a5,52(sp)
20403620:	d842                	sw	a6,48(sp)
20403622:	d646                	sw	a7,44(sp)
20403624:	d472                	sw	t3,40(sp)
20403626:	d276                	sw	t4,36(sp)
20403628:	d07a                	sw	t5,32(sp)
2040362a:	ce7e                	sw	t6,28(sp)
2040362c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040362e:	a35ff0ef          	jal	ra,20403062 <__metal_myhart_id>
20403632:	872a                	mv	a4,a0
20403634:	070a                	slli	a4,a4,0x2
20403636:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040363a:	97ba                	add	a5,a5,a4
2040363c:	439c                	lw	a5,0(a5)
2040363e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20403642:	fac42783          	lw	a5,-84(s0)
20403646:	c78d                	beqz	a5,20403670 <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403648:	fac42503          	lw	a0,-84(s0)
2040364c:	9c1ff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20403650:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20403654:	fa842783          	lw	a5,-88(s0)
20403658:	2307a783          	lw	a5,560(a5)
2040365c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20403660:	fa842783          	lw	a5,-88(s0)
20403664:	2287a783          	lw	a5,552(a5)
20403668:	fa442583          	lw	a1,-92(s0)
2040366c:	4545                	li	a0,17
2040366e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20403670:	0001                	nop
20403672:	40f6                	lw	ra,92(sp)
20403674:	42e6                	lw	t0,88(sp)
20403676:	4356                	lw	t1,84(sp)
20403678:	43c6                	lw	t2,80(sp)
2040367a:	4436                	lw	s0,76(sp)
2040367c:	4526                	lw	a0,72(sp)
2040367e:	4596                	lw	a1,68(sp)
20403680:	4606                	lw	a2,64(sp)
20403682:	56f2                	lw	a3,60(sp)
20403684:	5762                	lw	a4,56(sp)
20403686:	57d2                	lw	a5,52(sp)
20403688:	5842                	lw	a6,48(sp)
2040368a:	58b2                	lw	a7,44(sp)
2040368c:	5e22                	lw	t3,40(sp)
2040368e:	5e92                	lw	t4,36(sp)
20403690:	5f02                	lw	t5,32(sp)
20403692:	4ff2                	lw	t6,28(sp)
20403694:	6125                	addi	sp,sp,96
20403696:	30200073          	mret

2040369a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
2040369a:	711d                	addi	sp,sp,-96
2040369c:	ce86                	sw	ra,92(sp)
2040369e:	cc96                	sw	t0,88(sp)
204036a0:	ca9a                	sw	t1,84(sp)
204036a2:	c89e                	sw	t2,80(sp)
204036a4:	c6a2                	sw	s0,76(sp)
204036a6:	c4aa                	sw	a0,72(sp)
204036a8:	c2ae                	sw	a1,68(sp)
204036aa:	c0b2                	sw	a2,64(sp)
204036ac:	de36                	sw	a3,60(sp)
204036ae:	dc3a                	sw	a4,56(sp)
204036b0:	da3e                	sw	a5,52(sp)
204036b2:	d842                	sw	a6,48(sp)
204036b4:	d646                	sw	a7,44(sp)
204036b6:	d472                	sw	t3,40(sp)
204036b8:	d276                	sw	t4,36(sp)
204036ba:	d07a                	sw	t5,32(sp)
204036bc:	ce7e                	sw	t6,28(sp)
204036be:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204036c0:	9a3ff0ef          	jal	ra,20403062 <__metal_myhart_id>
204036c4:	872a                	mv	a4,a0
204036c6:	070a                	slli	a4,a4,0x2
204036c8:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204036cc:	97ba                	add	a5,a5,a4
204036ce:	439c                	lw	a5,0(a5)
204036d0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
204036d4:	fac42783          	lw	a5,-84(s0)
204036d8:	c78d                	beqz	a5,20403702 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204036da:	fac42503          	lw	a0,-84(s0)
204036de:	92fff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
204036e2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
204036e6:	fa842783          	lw	a5,-88(s0)
204036ea:	2487a783          	lw	a5,584(a5)
204036ee:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
204036f2:	fa842783          	lw	a5,-88(s0)
204036f6:	2407a783          	lw	a5,576(a5)
204036fa:	fa442583          	lw	a1,-92(s0)
204036fe:	4549                	li	a0,18
20403700:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20403702:	0001                	nop
20403704:	40f6                	lw	ra,92(sp)
20403706:	42e6                	lw	t0,88(sp)
20403708:	4356                	lw	t1,84(sp)
2040370a:	43c6                	lw	t2,80(sp)
2040370c:	4436                	lw	s0,76(sp)
2040370e:	4526                	lw	a0,72(sp)
20403710:	4596                	lw	a1,68(sp)
20403712:	4606                	lw	a2,64(sp)
20403714:	56f2                	lw	a3,60(sp)
20403716:	5762                	lw	a4,56(sp)
20403718:	57d2                	lw	a5,52(sp)
2040371a:	5842                	lw	a6,48(sp)
2040371c:	58b2                	lw	a7,44(sp)
2040371e:	5e22                	lw	t3,40(sp)
20403720:	5e92                	lw	t4,36(sp)
20403722:	5f02                	lw	t5,32(sp)
20403724:	4ff2                	lw	t6,28(sp)
20403726:	6125                	addi	sp,sp,96
20403728:	30200073          	mret

2040372c <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
2040372c:	711d                	addi	sp,sp,-96
2040372e:	ce86                	sw	ra,92(sp)
20403730:	cc96                	sw	t0,88(sp)
20403732:	ca9a                	sw	t1,84(sp)
20403734:	c89e                	sw	t2,80(sp)
20403736:	c6a2                	sw	s0,76(sp)
20403738:	c4aa                	sw	a0,72(sp)
2040373a:	c2ae                	sw	a1,68(sp)
2040373c:	c0b2                	sw	a2,64(sp)
2040373e:	de36                	sw	a3,60(sp)
20403740:	dc3a                	sw	a4,56(sp)
20403742:	da3e                	sw	a5,52(sp)
20403744:	d842                	sw	a6,48(sp)
20403746:	d646                	sw	a7,44(sp)
20403748:	d472                	sw	t3,40(sp)
2040374a:	d276                	sw	t4,36(sp)
2040374c:	d07a                	sw	t5,32(sp)
2040374e:	ce7e                	sw	t6,28(sp)
20403750:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403752:	911ff0ef          	jal	ra,20403062 <__metal_myhart_id>
20403756:	872a                	mv	a4,a0
20403758:	070a                	slli	a4,a4,0x2
2040375a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040375e:	97ba                	add	a5,a5,a4
20403760:	439c                	lw	a5,0(a5)
20403762:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20403766:	fac42783          	lw	a5,-84(s0)
2040376a:	c78d                	beqz	a5,20403794 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040376c:	fac42503          	lw	a0,-84(s0)
20403770:	89dff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20403774:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20403778:	fa842783          	lw	a5,-88(s0)
2040377c:	2607a783          	lw	a5,608(a5)
20403780:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20403784:	fa842783          	lw	a5,-88(s0)
20403788:	2587a783          	lw	a5,600(a5)
2040378c:	fa442583          	lw	a1,-92(s0)
20403790:	454d                	li	a0,19
20403792:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20403794:	0001                	nop
20403796:	40f6                	lw	ra,92(sp)
20403798:	42e6                	lw	t0,88(sp)
2040379a:	4356                	lw	t1,84(sp)
2040379c:	43c6                	lw	t2,80(sp)
2040379e:	4436                	lw	s0,76(sp)
204037a0:	4526                	lw	a0,72(sp)
204037a2:	4596                	lw	a1,68(sp)
204037a4:	4606                	lw	a2,64(sp)
204037a6:	56f2                	lw	a3,60(sp)
204037a8:	5762                	lw	a4,56(sp)
204037aa:	57d2                	lw	a5,52(sp)
204037ac:	5842                	lw	a6,48(sp)
204037ae:	58b2                	lw	a7,44(sp)
204037b0:	5e22                	lw	t3,40(sp)
204037b2:	5e92                	lw	t4,36(sp)
204037b4:	5f02                	lw	t5,32(sp)
204037b6:	4ff2                	lw	t6,28(sp)
204037b8:	6125                	addi	sp,sp,96
204037ba:	30200073          	mret

204037be <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
204037be:	711d                	addi	sp,sp,-96
204037c0:	ce86                	sw	ra,92(sp)
204037c2:	cc96                	sw	t0,88(sp)
204037c4:	ca9a                	sw	t1,84(sp)
204037c6:	c89e                	sw	t2,80(sp)
204037c8:	c6a2                	sw	s0,76(sp)
204037ca:	c4aa                	sw	a0,72(sp)
204037cc:	c2ae                	sw	a1,68(sp)
204037ce:	c0b2                	sw	a2,64(sp)
204037d0:	de36                	sw	a3,60(sp)
204037d2:	dc3a                	sw	a4,56(sp)
204037d4:	da3e                	sw	a5,52(sp)
204037d6:	d842                	sw	a6,48(sp)
204037d8:	d646                	sw	a7,44(sp)
204037da:	d472                	sw	t3,40(sp)
204037dc:	d276                	sw	t4,36(sp)
204037de:	d07a                	sw	t5,32(sp)
204037e0:	ce7e                	sw	t6,28(sp)
204037e2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204037e4:	87fff0ef          	jal	ra,20403062 <__metal_myhart_id>
204037e8:	872a                	mv	a4,a0
204037ea:	070a                	slli	a4,a4,0x2
204037ec:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204037f0:	97ba                	add	a5,a5,a4
204037f2:	439c                	lw	a5,0(a5)
204037f4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
204037f8:	fac42783          	lw	a5,-84(s0)
204037fc:	c78d                	beqz	a5,20403826 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204037fe:	fac42503          	lw	a0,-84(s0)
20403802:	80bff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20403806:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
2040380a:	fa842783          	lw	a5,-88(s0)
2040380e:	2787a783          	lw	a5,632(a5)
20403812:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20403816:	fa842783          	lw	a5,-88(s0)
2040381a:	2707a783          	lw	a5,624(a5)
2040381e:	fa442583          	lw	a1,-92(s0)
20403822:	4551                	li	a0,20
20403824:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20403826:	0001                	nop
20403828:	40f6                	lw	ra,92(sp)
2040382a:	42e6                	lw	t0,88(sp)
2040382c:	4356                	lw	t1,84(sp)
2040382e:	43c6                	lw	t2,80(sp)
20403830:	4436                	lw	s0,76(sp)
20403832:	4526                	lw	a0,72(sp)
20403834:	4596                	lw	a1,68(sp)
20403836:	4606                	lw	a2,64(sp)
20403838:	56f2                	lw	a3,60(sp)
2040383a:	5762                	lw	a4,56(sp)
2040383c:	57d2                	lw	a5,52(sp)
2040383e:	5842                	lw	a6,48(sp)
20403840:	58b2                	lw	a7,44(sp)
20403842:	5e22                	lw	t3,40(sp)
20403844:	5e92                	lw	t4,36(sp)
20403846:	5f02                	lw	t5,32(sp)
20403848:	4ff2                	lw	t6,28(sp)
2040384a:	6125                	addi	sp,sp,96
2040384c:	30200073          	mret

20403850 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20403850:	711d                	addi	sp,sp,-96
20403852:	ce86                	sw	ra,92(sp)
20403854:	cc96                	sw	t0,88(sp)
20403856:	ca9a                	sw	t1,84(sp)
20403858:	c89e                	sw	t2,80(sp)
2040385a:	c6a2                	sw	s0,76(sp)
2040385c:	c4aa                	sw	a0,72(sp)
2040385e:	c2ae                	sw	a1,68(sp)
20403860:	c0b2                	sw	a2,64(sp)
20403862:	de36                	sw	a3,60(sp)
20403864:	dc3a                	sw	a4,56(sp)
20403866:	da3e                	sw	a5,52(sp)
20403868:	d842                	sw	a6,48(sp)
2040386a:	d646                	sw	a7,44(sp)
2040386c:	d472                	sw	t3,40(sp)
2040386e:	d276                	sw	t4,36(sp)
20403870:	d07a                	sw	t5,32(sp)
20403872:	ce7e                	sw	t6,28(sp)
20403874:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403876:	fecff0ef          	jal	ra,20403062 <__metal_myhart_id>
2040387a:	872a                	mv	a4,a0
2040387c:	070a                	slli	a4,a4,0x2
2040387e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403882:	97ba                	add	a5,a5,a4
20403884:	439c                	lw	a5,0(a5)
20403886:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
2040388a:	fac42783          	lw	a5,-84(s0)
2040388e:	c78d                	beqz	a5,204038b8 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403890:	fac42503          	lw	a0,-84(s0)
20403894:	f78ff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20403898:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
2040389c:	fa842783          	lw	a5,-88(s0)
204038a0:	2907a783          	lw	a5,656(a5)
204038a4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
204038a8:	fa842783          	lw	a5,-88(s0)
204038ac:	2887a783          	lw	a5,648(a5)
204038b0:	fa442583          	lw	a1,-92(s0)
204038b4:	4555                	li	a0,21
204038b6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
204038b8:	0001                	nop
204038ba:	40f6                	lw	ra,92(sp)
204038bc:	42e6                	lw	t0,88(sp)
204038be:	4356                	lw	t1,84(sp)
204038c0:	43c6                	lw	t2,80(sp)
204038c2:	4436                	lw	s0,76(sp)
204038c4:	4526                	lw	a0,72(sp)
204038c6:	4596                	lw	a1,68(sp)
204038c8:	4606                	lw	a2,64(sp)
204038ca:	56f2                	lw	a3,60(sp)
204038cc:	5762                	lw	a4,56(sp)
204038ce:	57d2                	lw	a5,52(sp)
204038d0:	5842                	lw	a6,48(sp)
204038d2:	58b2                	lw	a7,44(sp)
204038d4:	5e22                	lw	t3,40(sp)
204038d6:	5e92                	lw	t4,36(sp)
204038d8:	5f02                	lw	t5,32(sp)
204038da:	4ff2                	lw	t6,28(sp)
204038dc:	6125                	addi	sp,sp,96
204038de:	30200073          	mret

204038e2 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
204038e2:	711d                	addi	sp,sp,-96
204038e4:	ce86                	sw	ra,92(sp)
204038e6:	cc96                	sw	t0,88(sp)
204038e8:	ca9a                	sw	t1,84(sp)
204038ea:	c89e                	sw	t2,80(sp)
204038ec:	c6a2                	sw	s0,76(sp)
204038ee:	c4aa                	sw	a0,72(sp)
204038f0:	c2ae                	sw	a1,68(sp)
204038f2:	c0b2                	sw	a2,64(sp)
204038f4:	de36                	sw	a3,60(sp)
204038f6:	dc3a                	sw	a4,56(sp)
204038f8:	da3e                	sw	a5,52(sp)
204038fa:	d842                	sw	a6,48(sp)
204038fc:	d646                	sw	a7,44(sp)
204038fe:	d472                	sw	t3,40(sp)
20403900:	d276                	sw	t4,36(sp)
20403902:	d07a                	sw	t5,32(sp)
20403904:	ce7e                	sw	t6,28(sp)
20403906:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403908:	f5aff0ef          	jal	ra,20403062 <__metal_myhart_id>
2040390c:	872a                	mv	a4,a0
2040390e:	070a                	slli	a4,a4,0x2
20403910:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403914:	97ba                	add	a5,a5,a4
20403916:	439c                	lw	a5,0(a5)
20403918:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
2040391c:	fac42783          	lw	a5,-84(s0)
20403920:	c78d                	beqz	a5,2040394a <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403922:	fac42503          	lw	a0,-84(s0)
20403926:	ee6ff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
2040392a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
2040392e:	fa842783          	lw	a5,-88(s0)
20403932:	2a87a783          	lw	a5,680(a5)
20403936:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
2040393a:	fa842783          	lw	a5,-88(s0)
2040393e:	2a07a783          	lw	a5,672(a5)
20403942:	fa442583          	lw	a1,-92(s0)
20403946:	4559                	li	a0,22
20403948:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
2040394a:	0001                	nop
2040394c:	40f6                	lw	ra,92(sp)
2040394e:	42e6                	lw	t0,88(sp)
20403950:	4356                	lw	t1,84(sp)
20403952:	43c6                	lw	t2,80(sp)
20403954:	4436                	lw	s0,76(sp)
20403956:	4526                	lw	a0,72(sp)
20403958:	4596                	lw	a1,68(sp)
2040395a:	4606                	lw	a2,64(sp)
2040395c:	56f2                	lw	a3,60(sp)
2040395e:	5762                	lw	a4,56(sp)
20403960:	57d2                	lw	a5,52(sp)
20403962:	5842                	lw	a6,48(sp)
20403964:	58b2                	lw	a7,44(sp)
20403966:	5e22                	lw	t3,40(sp)
20403968:	5e92                	lw	t4,36(sp)
2040396a:	5f02                	lw	t5,32(sp)
2040396c:	4ff2                	lw	t6,28(sp)
2040396e:	6125                	addi	sp,sp,96
20403970:	30200073          	mret

20403974 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20403974:	711d                	addi	sp,sp,-96
20403976:	ce86                	sw	ra,92(sp)
20403978:	cc96                	sw	t0,88(sp)
2040397a:	ca9a                	sw	t1,84(sp)
2040397c:	c89e                	sw	t2,80(sp)
2040397e:	c6a2                	sw	s0,76(sp)
20403980:	c4aa                	sw	a0,72(sp)
20403982:	c2ae                	sw	a1,68(sp)
20403984:	c0b2                	sw	a2,64(sp)
20403986:	de36                	sw	a3,60(sp)
20403988:	dc3a                	sw	a4,56(sp)
2040398a:	da3e                	sw	a5,52(sp)
2040398c:	d842                	sw	a6,48(sp)
2040398e:	d646                	sw	a7,44(sp)
20403990:	d472                	sw	t3,40(sp)
20403992:	d276                	sw	t4,36(sp)
20403994:	d07a                	sw	t5,32(sp)
20403996:	ce7e                	sw	t6,28(sp)
20403998:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040399a:	ec8ff0ef          	jal	ra,20403062 <__metal_myhart_id>
2040399e:	872a                	mv	a4,a0
204039a0:	070a                	slli	a4,a4,0x2
204039a2:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204039a6:	97ba                	add	a5,a5,a4
204039a8:	439c                	lw	a5,0(a5)
204039aa:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
204039ae:	fac42783          	lw	a5,-84(s0)
204039b2:	c78d                	beqz	a5,204039dc <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204039b4:	fac42503          	lw	a0,-84(s0)
204039b8:	e54ff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
204039bc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
204039c0:	fa842783          	lw	a5,-88(s0)
204039c4:	2c07a783          	lw	a5,704(a5)
204039c8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
204039cc:	fa842783          	lw	a5,-88(s0)
204039d0:	2b87a783          	lw	a5,696(a5)
204039d4:	fa442583          	lw	a1,-92(s0)
204039d8:	455d                	li	a0,23
204039da:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
204039dc:	0001                	nop
204039de:	40f6                	lw	ra,92(sp)
204039e0:	42e6                	lw	t0,88(sp)
204039e2:	4356                	lw	t1,84(sp)
204039e4:	43c6                	lw	t2,80(sp)
204039e6:	4436                	lw	s0,76(sp)
204039e8:	4526                	lw	a0,72(sp)
204039ea:	4596                	lw	a1,68(sp)
204039ec:	4606                	lw	a2,64(sp)
204039ee:	56f2                	lw	a3,60(sp)
204039f0:	5762                	lw	a4,56(sp)
204039f2:	57d2                	lw	a5,52(sp)
204039f4:	5842                	lw	a6,48(sp)
204039f6:	58b2                	lw	a7,44(sp)
204039f8:	5e22                	lw	t3,40(sp)
204039fa:	5e92                	lw	t4,36(sp)
204039fc:	5f02                	lw	t5,32(sp)
204039fe:	4ff2                	lw	t6,28(sp)
20403a00:	6125                	addi	sp,sp,96
20403a02:	30200073          	mret

20403a06 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20403a06:	711d                	addi	sp,sp,-96
20403a08:	ce86                	sw	ra,92(sp)
20403a0a:	cc96                	sw	t0,88(sp)
20403a0c:	ca9a                	sw	t1,84(sp)
20403a0e:	c89e                	sw	t2,80(sp)
20403a10:	c6a2                	sw	s0,76(sp)
20403a12:	c4aa                	sw	a0,72(sp)
20403a14:	c2ae                	sw	a1,68(sp)
20403a16:	c0b2                	sw	a2,64(sp)
20403a18:	de36                	sw	a3,60(sp)
20403a1a:	dc3a                	sw	a4,56(sp)
20403a1c:	da3e                	sw	a5,52(sp)
20403a1e:	d842                	sw	a6,48(sp)
20403a20:	d646                	sw	a7,44(sp)
20403a22:	d472                	sw	t3,40(sp)
20403a24:	d276                	sw	t4,36(sp)
20403a26:	d07a                	sw	t5,32(sp)
20403a28:	ce7e                	sw	t6,28(sp)
20403a2a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403a2c:	e36ff0ef          	jal	ra,20403062 <__metal_myhart_id>
20403a30:	872a                	mv	a4,a0
20403a32:	070a                	slli	a4,a4,0x2
20403a34:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403a38:	97ba                	add	a5,a5,a4
20403a3a:	439c                	lw	a5,0(a5)
20403a3c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20403a40:	fac42783          	lw	a5,-84(s0)
20403a44:	c78d                	beqz	a5,20403a6e <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403a46:	fac42503          	lw	a0,-84(s0)
20403a4a:	dc2ff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20403a4e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20403a52:	fa842783          	lw	a5,-88(s0)
20403a56:	2d87a783          	lw	a5,728(a5)
20403a5a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20403a5e:	fa842783          	lw	a5,-88(s0)
20403a62:	2d07a783          	lw	a5,720(a5)
20403a66:	fa442583          	lw	a1,-92(s0)
20403a6a:	4561                	li	a0,24
20403a6c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20403a6e:	0001                	nop
20403a70:	40f6                	lw	ra,92(sp)
20403a72:	42e6                	lw	t0,88(sp)
20403a74:	4356                	lw	t1,84(sp)
20403a76:	43c6                	lw	t2,80(sp)
20403a78:	4436                	lw	s0,76(sp)
20403a7a:	4526                	lw	a0,72(sp)
20403a7c:	4596                	lw	a1,68(sp)
20403a7e:	4606                	lw	a2,64(sp)
20403a80:	56f2                	lw	a3,60(sp)
20403a82:	5762                	lw	a4,56(sp)
20403a84:	57d2                	lw	a5,52(sp)
20403a86:	5842                	lw	a6,48(sp)
20403a88:	58b2                	lw	a7,44(sp)
20403a8a:	5e22                	lw	t3,40(sp)
20403a8c:	5e92                	lw	t4,36(sp)
20403a8e:	5f02                	lw	t5,32(sp)
20403a90:	4ff2                	lw	t6,28(sp)
20403a92:	6125                	addi	sp,sp,96
20403a94:	30200073          	mret

20403a98 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20403a98:	711d                	addi	sp,sp,-96
20403a9a:	ce86                	sw	ra,92(sp)
20403a9c:	cc96                	sw	t0,88(sp)
20403a9e:	ca9a                	sw	t1,84(sp)
20403aa0:	c89e                	sw	t2,80(sp)
20403aa2:	c6a2                	sw	s0,76(sp)
20403aa4:	c4aa                	sw	a0,72(sp)
20403aa6:	c2ae                	sw	a1,68(sp)
20403aa8:	c0b2                	sw	a2,64(sp)
20403aaa:	de36                	sw	a3,60(sp)
20403aac:	dc3a                	sw	a4,56(sp)
20403aae:	da3e                	sw	a5,52(sp)
20403ab0:	d842                	sw	a6,48(sp)
20403ab2:	d646                	sw	a7,44(sp)
20403ab4:	d472                	sw	t3,40(sp)
20403ab6:	d276                	sw	t4,36(sp)
20403ab8:	d07a                	sw	t5,32(sp)
20403aba:	ce7e                	sw	t6,28(sp)
20403abc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403abe:	da4ff0ef          	jal	ra,20403062 <__metal_myhart_id>
20403ac2:	872a                	mv	a4,a0
20403ac4:	070a                	slli	a4,a4,0x2
20403ac6:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403aca:	97ba                	add	a5,a5,a4
20403acc:	439c                	lw	a5,0(a5)
20403ace:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20403ad2:	fac42783          	lw	a5,-84(s0)
20403ad6:	c78d                	beqz	a5,20403b00 <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403ad8:	fac42503          	lw	a0,-84(s0)
20403adc:	d30ff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20403ae0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20403ae4:	fa842783          	lw	a5,-88(s0)
20403ae8:	2f07a783          	lw	a5,752(a5)
20403aec:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20403af0:	fa842783          	lw	a5,-88(s0)
20403af4:	2e87a783          	lw	a5,744(a5)
20403af8:	fa442583          	lw	a1,-92(s0)
20403afc:	4565                	li	a0,25
20403afe:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20403b00:	0001                	nop
20403b02:	40f6                	lw	ra,92(sp)
20403b04:	42e6                	lw	t0,88(sp)
20403b06:	4356                	lw	t1,84(sp)
20403b08:	43c6                	lw	t2,80(sp)
20403b0a:	4436                	lw	s0,76(sp)
20403b0c:	4526                	lw	a0,72(sp)
20403b0e:	4596                	lw	a1,68(sp)
20403b10:	4606                	lw	a2,64(sp)
20403b12:	56f2                	lw	a3,60(sp)
20403b14:	5762                	lw	a4,56(sp)
20403b16:	57d2                	lw	a5,52(sp)
20403b18:	5842                	lw	a6,48(sp)
20403b1a:	58b2                	lw	a7,44(sp)
20403b1c:	5e22                	lw	t3,40(sp)
20403b1e:	5e92                	lw	t4,36(sp)
20403b20:	5f02                	lw	t5,32(sp)
20403b22:	4ff2                	lw	t6,28(sp)
20403b24:	6125                	addi	sp,sp,96
20403b26:	30200073          	mret

20403b2a <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
20403b2a:	711d                	addi	sp,sp,-96
20403b2c:	ce86                	sw	ra,92(sp)
20403b2e:	cc96                	sw	t0,88(sp)
20403b30:	ca9a                	sw	t1,84(sp)
20403b32:	c89e                	sw	t2,80(sp)
20403b34:	c6a2                	sw	s0,76(sp)
20403b36:	c4aa                	sw	a0,72(sp)
20403b38:	c2ae                	sw	a1,68(sp)
20403b3a:	c0b2                	sw	a2,64(sp)
20403b3c:	de36                	sw	a3,60(sp)
20403b3e:	dc3a                	sw	a4,56(sp)
20403b40:	da3e                	sw	a5,52(sp)
20403b42:	d842                	sw	a6,48(sp)
20403b44:	d646                	sw	a7,44(sp)
20403b46:	d472                	sw	t3,40(sp)
20403b48:	d276                	sw	t4,36(sp)
20403b4a:	d07a                	sw	t5,32(sp)
20403b4c:	ce7e                	sw	t6,28(sp)
20403b4e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403b50:	d12ff0ef          	jal	ra,20403062 <__metal_myhart_id>
20403b54:	872a                	mv	a4,a0
20403b56:	070a                	slli	a4,a4,0x2
20403b58:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403b5c:	97ba                	add	a5,a5,a4
20403b5e:	439c                	lw	a5,0(a5)
20403b60:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20403b64:	fac42783          	lw	a5,-84(s0)
20403b68:	c78d                	beqz	a5,20403b92 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403b6a:	fac42503          	lw	a0,-84(s0)
20403b6e:	c9eff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20403b72:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20403b76:	fa842783          	lw	a5,-88(s0)
20403b7a:	3087a783          	lw	a5,776(a5)
20403b7e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403b82:	fa842783          	lw	a5,-88(s0)
20403b86:	3007a783          	lw	a5,768(a5)
20403b8a:	fa442583          	lw	a1,-92(s0)
20403b8e:	4569                	li	a0,26
20403b90:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403b92:	0001                	nop
20403b94:	40f6                	lw	ra,92(sp)
20403b96:	42e6                	lw	t0,88(sp)
20403b98:	4356                	lw	t1,84(sp)
20403b9a:	43c6                	lw	t2,80(sp)
20403b9c:	4436                	lw	s0,76(sp)
20403b9e:	4526                	lw	a0,72(sp)
20403ba0:	4596                	lw	a1,68(sp)
20403ba2:	4606                	lw	a2,64(sp)
20403ba4:	56f2                	lw	a3,60(sp)
20403ba6:	5762                	lw	a4,56(sp)
20403ba8:	57d2                	lw	a5,52(sp)
20403baa:	5842                	lw	a6,48(sp)
20403bac:	58b2                	lw	a7,44(sp)
20403bae:	5e22                	lw	t3,40(sp)
20403bb0:	5e92                	lw	t4,36(sp)
20403bb2:	5f02                	lw	t5,32(sp)
20403bb4:	4ff2                	lw	t6,28(sp)
20403bb6:	6125                	addi	sp,sp,96
20403bb8:	30200073          	mret

20403bbc <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
20403bbc:	711d                	addi	sp,sp,-96
20403bbe:	ce86                	sw	ra,92(sp)
20403bc0:	cc96                	sw	t0,88(sp)
20403bc2:	ca9a                	sw	t1,84(sp)
20403bc4:	c89e                	sw	t2,80(sp)
20403bc6:	c6a2                	sw	s0,76(sp)
20403bc8:	c4aa                	sw	a0,72(sp)
20403bca:	c2ae                	sw	a1,68(sp)
20403bcc:	c0b2                	sw	a2,64(sp)
20403bce:	de36                	sw	a3,60(sp)
20403bd0:	dc3a                	sw	a4,56(sp)
20403bd2:	da3e                	sw	a5,52(sp)
20403bd4:	d842                	sw	a6,48(sp)
20403bd6:	d646                	sw	a7,44(sp)
20403bd8:	d472                	sw	t3,40(sp)
20403bda:	d276                	sw	t4,36(sp)
20403bdc:	d07a                	sw	t5,32(sp)
20403bde:	ce7e                	sw	t6,28(sp)
20403be0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403be2:	c80ff0ef          	jal	ra,20403062 <__metal_myhart_id>
20403be6:	872a                	mv	a4,a0
20403be8:	070a                	slli	a4,a4,0x2
20403bea:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403bee:	97ba                	add	a5,a5,a4
20403bf0:	439c                	lw	a5,0(a5)
20403bf2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20403bf6:	fac42783          	lw	a5,-84(s0)
20403bfa:	c78d                	beqz	a5,20403c24 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403bfc:	fac42503          	lw	a0,-84(s0)
20403c00:	c0cff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20403c04:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403c08:	fa842783          	lw	a5,-88(s0)
20403c0c:	3207a783          	lw	a5,800(a5)
20403c10:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403c14:	fa842783          	lw	a5,-88(s0)
20403c18:	3187a783          	lw	a5,792(a5)
20403c1c:	fa442583          	lw	a1,-92(s0)
20403c20:	456d                	li	a0,27
20403c22:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20403c24:	0001                	nop
20403c26:	40f6                	lw	ra,92(sp)
20403c28:	42e6                	lw	t0,88(sp)
20403c2a:	4356                	lw	t1,84(sp)
20403c2c:	43c6                	lw	t2,80(sp)
20403c2e:	4436                	lw	s0,76(sp)
20403c30:	4526                	lw	a0,72(sp)
20403c32:	4596                	lw	a1,68(sp)
20403c34:	4606                	lw	a2,64(sp)
20403c36:	56f2                	lw	a3,60(sp)
20403c38:	5762                	lw	a4,56(sp)
20403c3a:	57d2                	lw	a5,52(sp)
20403c3c:	5842                	lw	a6,48(sp)
20403c3e:	58b2                	lw	a7,44(sp)
20403c40:	5e22                	lw	t3,40(sp)
20403c42:	5e92                	lw	t4,36(sp)
20403c44:	5f02                	lw	t5,32(sp)
20403c46:	4ff2                	lw	t6,28(sp)
20403c48:	6125                	addi	sp,sp,96
20403c4a:	30200073          	mret

20403c4e <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
20403c4e:	711d                	addi	sp,sp,-96
20403c50:	ce86                	sw	ra,92(sp)
20403c52:	cc96                	sw	t0,88(sp)
20403c54:	ca9a                	sw	t1,84(sp)
20403c56:	c89e                	sw	t2,80(sp)
20403c58:	c6a2                	sw	s0,76(sp)
20403c5a:	c4aa                	sw	a0,72(sp)
20403c5c:	c2ae                	sw	a1,68(sp)
20403c5e:	c0b2                	sw	a2,64(sp)
20403c60:	de36                	sw	a3,60(sp)
20403c62:	dc3a                	sw	a4,56(sp)
20403c64:	da3e                	sw	a5,52(sp)
20403c66:	d842                	sw	a6,48(sp)
20403c68:	d646                	sw	a7,44(sp)
20403c6a:	d472                	sw	t3,40(sp)
20403c6c:	d276                	sw	t4,36(sp)
20403c6e:	d07a                	sw	t5,32(sp)
20403c70:	ce7e                	sw	t6,28(sp)
20403c72:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403c74:	beeff0ef          	jal	ra,20403062 <__metal_myhart_id>
20403c78:	872a                	mv	a4,a0
20403c7a:	070a                	slli	a4,a4,0x2
20403c7c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403c80:	97ba                	add	a5,a5,a4
20403c82:	439c                	lw	a5,0(a5)
20403c84:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403c88:	fac42783          	lw	a5,-84(s0)
20403c8c:	c78d                	beqz	a5,20403cb6 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403c8e:	fac42503          	lw	a0,-84(s0)
20403c92:	b7aff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20403c96:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20403c9a:	fa842783          	lw	a5,-88(s0)
20403c9e:	3387a783          	lw	a5,824(a5)
20403ca2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20403ca6:	fa842783          	lw	a5,-88(s0)
20403caa:	3307a783          	lw	a5,816(a5)
20403cae:	fa442583          	lw	a1,-92(s0)
20403cb2:	4571                	li	a0,28
20403cb4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20403cb6:	0001                	nop
20403cb8:	40f6                	lw	ra,92(sp)
20403cba:	42e6                	lw	t0,88(sp)
20403cbc:	4356                	lw	t1,84(sp)
20403cbe:	43c6                	lw	t2,80(sp)
20403cc0:	4436                	lw	s0,76(sp)
20403cc2:	4526                	lw	a0,72(sp)
20403cc4:	4596                	lw	a1,68(sp)
20403cc6:	4606                	lw	a2,64(sp)
20403cc8:	56f2                	lw	a3,60(sp)
20403cca:	5762                	lw	a4,56(sp)
20403ccc:	57d2                	lw	a5,52(sp)
20403cce:	5842                	lw	a6,48(sp)
20403cd0:	58b2                	lw	a7,44(sp)
20403cd2:	5e22                	lw	t3,40(sp)
20403cd4:	5e92                	lw	t4,36(sp)
20403cd6:	5f02                	lw	t5,32(sp)
20403cd8:	4ff2                	lw	t6,28(sp)
20403cda:	6125                	addi	sp,sp,96
20403cdc:	30200073          	mret

20403ce0 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20403ce0:	711d                	addi	sp,sp,-96
20403ce2:	ce86                	sw	ra,92(sp)
20403ce4:	cc96                	sw	t0,88(sp)
20403ce6:	ca9a                	sw	t1,84(sp)
20403ce8:	c89e                	sw	t2,80(sp)
20403cea:	c6a2                	sw	s0,76(sp)
20403cec:	c4aa                	sw	a0,72(sp)
20403cee:	c2ae                	sw	a1,68(sp)
20403cf0:	c0b2                	sw	a2,64(sp)
20403cf2:	de36                	sw	a3,60(sp)
20403cf4:	dc3a                	sw	a4,56(sp)
20403cf6:	da3e                	sw	a5,52(sp)
20403cf8:	d842                	sw	a6,48(sp)
20403cfa:	d646                	sw	a7,44(sp)
20403cfc:	d472                	sw	t3,40(sp)
20403cfe:	d276                	sw	t4,36(sp)
20403d00:	d07a                	sw	t5,32(sp)
20403d02:	ce7e                	sw	t6,28(sp)
20403d04:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403d06:	b5cff0ef          	jal	ra,20403062 <__metal_myhart_id>
20403d0a:	872a                	mv	a4,a0
20403d0c:	070a                	slli	a4,a4,0x2
20403d0e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403d12:	97ba                	add	a5,a5,a4
20403d14:	439c                	lw	a5,0(a5)
20403d16:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20403d1a:	fac42783          	lw	a5,-84(s0)
20403d1e:	c78d                	beqz	a5,20403d48 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403d20:	fac42503          	lw	a0,-84(s0)
20403d24:	ae8ff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20403d28:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
20403d2c:	fa842783          	lw	a5,-88(s0)
20403d30:	3507a783          	lw	a5,848(a5)
20403d34:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20403d38:	fa842783          	lw	a5,-88(s0)
20403d3c:	3487a783          	lw	a5,840(a5)
20403d40:	fa442583          	lw	a1,-92(s0)
20403d44:	4575                	li	a0,29
20403d46:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20403d48:	0001                	nop
20403d4a:	40f6                	lw	ra,92(sp)
20403d4c:	42e6                	lw	t0,88(sp)
20403d4e:	4356                	lw	t1,84(sp)
20403d50:	43c6                	lw	t2,80(sp)
20403d52:	4436                	lw	s0,76(sp)
20403d54:	4526                	lw	a0,72(sp)
20403d56:	4596                	lw	a1,68(sp)
20403d58:	4606                	lw	a2,64(sp)
20403d5a:	56f2                	lw	a3,60(sp)
20403d5c:	5762                	lw	a4,56(sp)
20403d5e:	57d2                	lw	a5,52(sp)
20403d60:	5842                	lw	a6,48(sp)
20403d62:	58b2                	lw	a7,44(sp)
20403d64:	5e22                	lw	t3,40(sp)
20403d66:	5e92                	lw	t4,36(sp)
20403d68:	5f02                	lw	t5,32(sp)
20403d6a:	4ff2                	lw	t6,28(sp)
20403d6c:	6125                	addi	sp,sp,96
20403d6e:	30200073          	mret

20403d72 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20403d72:	711d                	addi	sp,sp,-96
20403d74:	ce86                	sw	ra,92(sp)
20403d76:	cc96                	sw	t0,88(sp)
20403d78:	ca9a                	sw	t1,84(sp)
20403d7a:	c89e                	sw	t2,80(sp)
20403d7c:	c6a2                	sw	s0,76(sp)
20403d7e:	c4aa                	sw	a0,72(sp)
20403d80:	c2ae                	sw	a1,68(sp)
20403d82:	c0b2                	sw	a2,64(sp)
20403d84:	de36                	sw	a3,60(sp)
20403d86:	dc3a                	sw	a4,56(sp)
20403d88:	da3e                	sw	a5,52(sp)
20403d8a:	d842                	sw	a6,48(sp)
20403d8c:	d646                	sw	a7,44(sp)
20403d8e:	d472                	sw	t3,40(sp)
20403d90:	d276                	sw	t4,36(sp)
20403d92:	d07a                	sw	t5,32(sp)
20403d94:	ce7e                	sw	t6,28(sp)
20403d96:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403d98:	acaff0ef          	jal	ra,20403062 <__metal_myhart_id>
20403d9c:	872a                	mv	a4,a0
20403d9e:	070a                	slli	a4,a4,0x2
20403da0:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403da4:	97ba                	add	a5,a5,a4
20403da6:	439c                	lw	a5,0(a5)
20403da8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
20403dac:	fac42783          	lw	a5,-84(s0)
20403db0:	c78d                	beqz	a5,20403dda <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403db2:	fac42503          	lw	a0,-84(s0)
20403db6:	a56ff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20403dba:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
20403dbe:	fa842783          	lw	a5,-88(s0)
20403dc2:	3687a783          	lw	a5,872(a5)
20403dc6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20403dca:	fa842783          	lw	a5,-88(s0)
20403dce:	3607a783          	lw	a5,864(a5)
20403dd2:	fa442583          	lw	a1,-92(s0)
20403dd6:	4579                	li	a0,30
20403dd8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20403dda:	0001                	nop
20403ddc:	40f6                	lw	ra,92(sp)
20403dde:	42e6                	lw	t0,88(sp)
20403de0:	4356                	lw	t1,84(sp)
20403de2:	43c6                	lw	t2,80(sp)
20403de4:	4436                	lw	s0,76(sp)
20403de6:	4526                	lw	a0,72(sp)
20403de8:	4596                	lw	a1,68(sp)
20403dea:	4606                	lw	a2,64(sp)
20403dec:	56f2                	lw	a3,60(sp)
20403dee:	5762                	lw	a4,56(sp)
20403df0:	57d2                	lw	a5,52(sp)
20403df2:	5842                	lw	a6,48(sp)
20403df4:	58b2                	lw	a7,44(sp)
20403df6:	5e22                	lw	t3,40(sp)
20403df8:	5e92                	lw	t4,36(sp)
20403dfa:	5f02                	lw	t5,32(sp)
20403dfc:	4ff2                	lw	t6,28(sp)
20403dfe:	6125                	addi	sp,sp,96
20403e00:	30200073          	mret

20403e04 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403e04:	711d                	addi	sp,sp,-96
20403e06:	ce86                	sw	ra,92(sp)
20403e08:	cc96                	sw	t0,88(sp)
20403e0a:	ca9a                	sw	t1,84(sp)
20403e0c:	c89e                	sw	t2,80(sp)
20403e0e:	c6a2                	sw	s0,76(sp)
20403e10:	c4aa                	sw	a0,72(sp)
20403e12:	c2ae                	sw	a1,68(sp)
20403e14:	c0b2                	sw	a2,64(sp)
20403e16:	de36                	sw	a3,60(sp)
20403e18:	dc3a                	sw	a4,56(sp)
20403e1a:	da3e                	sw	a5,52(sp)
20403e1c:	d842                	sw	a6,48(sp)
20403e1e:	d646                	sw	a7,44(sp)
20403e20:	d472                	sw	t3,40(sp)
20403e22:	d276                	sw	t4,36(sp)
20403e24:	d07a                	sw	t5,32(sp)
20403e26:	ce7e                	sw	t6,28(sp)
20403e28:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403e2a:	a38ff0ef          	jal	ra,20403062 <__metal_myhart_id>
20403e2e:	872a                	mv	a4,a0
20403e30:	070a                	slli	a4,a4,0x2
20403e32:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403e36:	97ba                	add	a5,a5,a4
20403e38:	439c                	lw	a5,0(a5)
20403e3a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
20403e3e:	fac42783          	lw	a5,-84(s0)
20403e42:	c78d                	beqz	a5,20403e6c <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403e44:	fac42503          	lw	a0,-84(s0)
20403e48:	9c4ff0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20403e4c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
20403e50:	fa842783          	lw	a5,-88(s0)
20403e54:	3807a783          	lw	a5,896(a5)
20403e58:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
20403e5c:	fa842783          	lw	a5,-88(s0)
20403e60:	3787a783          	lw	a5,888(a5)
20403e64:	fa442583          	lw	a1,-92(s0)
20403e68:	457d                	li	a0,31
20403e6a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
20403e6c:	0001                	nop
20403e6e:	40f6                	lw	ra,92(sp)
20403e70:	42e6                	lw	t0,88(sp)
20403e72:	4356                	lw	t1,84(sp)
20403e74:	43c6                	lw	t2,80(sp)
20403e76:	4436                	lw	s0,76(sp)
20403e78:	4526                	lw	a0,72(sp)
20403e7a:	4596                	lw	a1,68(sp)
20403e7c:	4606                	lw	a2,64(sp)
20403e7e:	56f2                	lw	a3,60(sp)
20403e80:	5762                	lw	a4,56(sp)
20403e82:	57d2                	lw	a5,52(sp)
20403e84:	5842                	lw	a6,48(sp)
20403e86:	58b2                	lw	a7,44(sp)
20403e88:	5e22                	lw	t3,40(sp)
20403e8a:	5e92                	lw	t4,36(sp)
20403e8c:	5f02                	lw	t5,32(sp)
20403e8e:	4ff2                	lw	t6,28(sp)
20403e90:	6125                	addi	sp,sp,96
20403e92:	30200073          	mret

20403e96 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403e96:	1101                	addi	sp,sp,-32
20403e98:	ce22                	sw	s0,28(sp)
20403e9a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20403e9c:	305027f3          	csrr	a5,mtvec
20403ea0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403ea4:	fec42783          	lw	a5,-20(s0)
20403ea8:	03f7f793          	andi	a5,a5,63
20403eac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
20403eb0:	fec42703          	lw	a4,-20(s0)
20403eb4:	4789                	li	a5,2
20403eb6:	00f70d63          	beq	a4,a5,20403ed0 <__metal_controller_interrupt_vector_mode+0x3a>
20403eba:	fec42703          	lw	a4,-20(s0)
20403ebe:	478d                	li	a5,3
20403ec0:	00f70a63          	beq	a4,a5,20403ed4 <__metal_controller_interrupt_vector_mode+0x3e>
20403ec4:	fec42703          	lw	a4,-20(s0)
20403ec8:	4785                	li	a5,1
20403eca:	00f70763          	beq	a4,a5,20403ed8 <__metal_controller_interrupt_vector_mode+0x42>
20403ece:	a039                	j	20403edc <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
20403ed0:	478d                	li	a5,3
20403ed2:	a031                	j	20403ede <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403ed4:	4791                	li	a5,4
20403ed6:	a021                	j	20403ede <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403ed8:	4785                	li	a5,1
20403eda:	a011                	j	20403ede <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
20403edc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
20403ede:	853e                	mv	a0,a5
20403ee0:	4472                	lw	s0,28(sp)
20403ee2:	6105                	addi	sp,sp,32
20403ee4:	8082                	ret

20403ee6 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403ee6:	7179                	addi	sp,sp,-48
20403ee8:	d622                	sw	s0,44(sp)
20403eea:	1800                	addi	s0,sp,48
20403eec:	fca42e23          	sw	a0,-36(s0)
20403ef0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403ef4:	305027f3          	csrr	a5,mtvec
20403ef8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
20403efc:	fec42783          	lw	a5,-20(s0)
20403f00:	fc07f793          	andi	a5,a5,-64
20403f04:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403f08:	fd842783          	lw	a5,-40(s0)
20403f0c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20403f10:	fdc42703          	lw	a4,-36(s0)
20403f14:	4791                	li	a5,4
20403f16:	06e7e063          	bltu	a5,a4,20403f76 <__metal_controller_interrupt_vector+0x90>
20403f1a:	fdc42783          	lw	a5,-36(s0)
20403f1e:	00279713          	slli	a4,a5,0x2
20403f22:	204067b7          	lui	a5,0x20406
20403f26:	ff078793          	addi	a5,a5,-16 # 20405ff0 <__metal_driver_vtable_riscv_clint0+0x4c>
20403f2a:	97ba                	add	a5,a5,a4
20403f2c:	439c                	lw	a5,0(a5)
20403f2e:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403f30:	fe842783          	lw	a5,-24(s0)
20403f34:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20403f38:	fec42783          	lw	a5,-20(s0)
20403f3c:	0027e793          	ori	a5,a5,2
20403f40:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20403f44:	a80d                	j	20403f76 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403f46:	fe842783          	lw	a5,-24(s0)
20403f4a:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
20403f4e:	fec42783          	lw	a5,-20(s0)
20403f52:	0037e793          	ori	a5,a5,3
20403f56:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
20403f5a:	a831                	j	20403f76 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
20403f5c:	fe842783          	lw	a5,-24(s0)
20403f60:	0017e793          	ori	a5,a5,1
20403f64:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20403f68:	a039                	j	20403f76 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20403f6a:	fe842783          	lw	a5,-24(s0)
20403f6e:	9bf1                	andi	a5,a5,-4
20403f70:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20403f74:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20403f76:	0001                	nop
20403f78:	5432                	lw	s0,44(sp)
20403f7a:	6145                	addi	sp,sp,48
20403f7c:	8082                	ret

20403f7e <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
20403f7e:	1101                	addi	sp,sp,-32
20403f80:	ce22                	sw	s0,28(sp)
20403f82:	1000                	addi	s0,sp,32
20403f84:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403f88:	fec42783          	lw	a5,-20(s0)
20403f8c:	17f5                	addi	a5,a5,-3
20403f8e:	4771                	li	a4,28
20403f90:	00f76d63          	bltu	a4,a5,20403faa <__metal_valid_interrupt_id+0x2c>
20403f94:	00279713          	slli	a4,a5,0x2
20403f98:	204067b7          	lui	a5,0x20406
20403f9c:	00478793          	addi	a5,a5,4 # 20406004 <__metal_driver_vtable_riscv_clint0+0x60>
20403fa0:	97ba                	add	a5,a5,a4
20403fa2:	439c                	lw	a5,0(a5)
20403fa4:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20403fa6:	4785                	li	a5,1
20403fa8:	a019                	j	20403fae <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20403faa:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
20403fac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
20403fae:	853e                	mv	a0,a5
20403fb0:	4472                	lw	s0,28(sp)
20403fb2:	6105                	addi	sp,sp,32
20403fb4:	8082                	ret

20403fb6 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20403fb6:	7179                	addi	sp,sp,-48
20403fb8:	d606                	sw	ra,44(sp)
20403fba:	d422                	sw	s0,40(sp)
20403fbc:	1800                	addi	s0,sp,48
20403fbe:	fca42e23          	sw	a0,-36(s0)
20403fc2:	fcb42c23          	sw	a1,-40(s0)
20403fc6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20403fca:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
20403fce:	fdc42783          	lw	a5,-36(s0)
20403fd2:	e399                	bnez	a5,20403fd8 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20403fd4:	57fd                	li	a5,-1
20403fd6:	a849                	j	20404068 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20403fd8:	fd842703          	lw	a4,-40(s0)
20403fdc:	47fd                	li	a5,31
20403fde:	08e7e063          	bltu	a5,a4,2040405e <__metal_local_interrupt_enable+0xa8>
20403fe2:	fd842783          	lw	a5,-40(s0)
20403fe6:	00279713          	slli	a4,a5,0x2
20403fea:	204067b7          	lui	a5,0x20406
20403fee:	07878793          	addi	a5,a5,120 # 20406078 <__metal_driver_vtable_riscv_clint0+0xd4>
20403ff2:	97ba                	add	a5,a5,a4
20403ff4:	439c                	lw	a5,0(a5)
20403ff6:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403ff8:	fd442783          	lw	a5,-44(s0)
20403ffc:	c781                	beqz	a5,20404004 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
20403ffe:	87eff0ef          	jal	ra,2040307c <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20404002:	a08d                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20404004:	890ff0ef          	jal	ra,20403094 <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20404008:	a8b1                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
2040400a:	fd442783          	lw	a5,-44(s0)
2040400e:	c781                	beqz	a5,20404016 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20404010:	89cff0ef          	jal	ra,204030ac <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20404014:	a881                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20404016:	8aeff0ef          	jal	ra,204030c4 <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
2040401a:	a0a9                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040401c:	fd442783          	lw	a5,-44(s0)
20404020:	c781                	beqz	a5,20404028 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20404022:	8baff0ef          	jal	ra,204030dc <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20404026:	a83d                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20404028:	8ceff0ef          	jal	ra,204030f6 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
2040402c:	a825                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
2040402e:	fd442783          	lw	a5,-44(s0)
20404032:	c781                	beqz	a5,2040403a <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20404034:	8dcff0ef          	jal	ra,20403110 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20404038:	a035                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
2040403a:	8f2ff0ef          	jal	ra,2040312c <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
2040403e:	a01d                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20404040:	fd442783          	lw	a5,-44(s0)
20404044:	c799                	beqz	a5,20404052 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20404046:	fd842783          	lw	a5,-40(s0)
2040404a:	853e                	mv	a0,a5
2040404c:	8fcff0ef          	jal	ra,20403148 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20404050:	a811                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20404052:	fd842783          	lw	a5,-40(s0)
20404056:	853e                	mv	a0,a5
20404058:	91cff0ef          	jal	ra,20403174 <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
2040405c:	a021                	j	20404064 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
2040405e:	57fd                	li	a5,-1
20404060:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20404064:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20404068:	853e                	mv	a0,a5
2040406a:	50b2                	lw	ra,44(sp)
2040406c:	5422                	lw	s0,40(sp)
2040406e:	6145                	addi	sp,sp,48
20404070:	8082                	ret

20404072 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20404072:	7179                	addi	sp,sp,-48
20404074:	d622                	sw	s0,44(sp)
20404076:	1800                	addi	s0,sp,48
20404078:	fca42e23          	sw	a0,-36(s0)
2040407c:	fcb42c23          	sw	a1,-40(s0)
20404080:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20404084:	fdc42783          	lw	a5,-36(s0)
20404088:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040408c:	fd842703          	lw	a4,-40(s0)
20404090:	47ad                	li	a5,11
20404092:	02e7c263          	blt	a5,a4,204040b6 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20404096:	fd442783          	lw	a5,-44(s0)
2040409a:	cf91                	beqz	a5,204040b6 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040409c:	fec42703          	lw	a4,-20(s0)
204040a0:	fd842783          	lw	a5,-40(s0)
204040a4:	0e078793          	addi	a5,a5,224
204040a8:	078a                	slli	a5,a5,0x2
204040aa:	97ba                	add	a5,a5,a4
204040ac:	fd442703          	lw	a4,-44(s0)
204040b0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
204040b2:	4781                	li	a5,0
204040b4:	a011                	j	204040b8 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
204040b6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
204040b8:	853e                	mv	a0,a5
204040ba:	5432                	lw	s0,44(sp)
204040bc:	6145                	addi	sp,sp,48
204040be:	8082                	ret

204040c0 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
204040c0:	7139                	addi	sp,sp,-64
204040c2:	de06                	sw	ra,60(sp)
204040c4:	dc22                	sw	s0,56(sp)
204040c6:	0080                	addi	s0,sp,64
204040c8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204040cc:	fcc42783          	lw	a5,-52(s0)
204040d0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
204040d4:	fe442783          	lw	a5,-28(s0)
204040d8:	43dc                	lw	a5,4(a5)
204040da:	10079d63          	bnez	a5,204041f4 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
204040de:	57fd                	li	a5,-1
204040e0:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
204040e4:	57fd                	li	a5,-1
204040e6:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
204040ea:	301027f3          	csrr	a5,misa
204040ee:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
204040f2:	fe042703          	lw	a4,-32(s0)
204040f6:	6789                	lui	a5,0x2
204040f8:	8ff9                	and	a5,a5,a4
204040fa:	e799                	bnez	a5,20404108 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
204040fc:	fe042703          	lw	a4,-32(s0)
20404100:	000407b7          	lui	a5,0x40
20404104:	8ff9                	and	a5,a5,a4
20404106:	c799                	beqz	a5,20404114 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20404108:	57fd                	li	a5,-1
2040410a:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040410e:	57fd                	li	a5,-1
20404110:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20404114:	fe042703          	lw	a4,-32(s0)
20404118:	000407b7          	lui	a5,0x40
2040411c:	8ff9                	and	a5,a5,a4
2040411e:	c781                	beqz	a5,20404126 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20404120:	57fd                	li	a5,-1
20404122:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20404126:	fe042623          	sw	zero,-20(s0)
2040412a:	a0b9                	j	20404178 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
2040412c:	fe442683          	lw	a3,-28(s0)
20404130:	fec42703          	lw	a4,-20(s0)
20404134:	87ba                	mv	a5,a4
20404136:	0786                	slli	a5,a5,0x1
20404138:	97ba                	add	a5,a5,a4
2040413a:	078e                	slli	a5,a5,0x3
2040413c:	97b6                	add	a5,a5,a3
2040413e:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20404142:	fe442683          	lw	a3,-28(s0)
20404146:	fec42703          	lw	a4,-20(s0)
2040414a:	87ba                	mv	a5,a4
2040414c:	0786                	slli	a5,a5,0x1
2040414e:	97ba                	add	a5,a5,a4
20404150:	078e                	slli	a5,a5,0x3
20404152:	97b6                	add	a5,a5,a3
20404154:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20404158:	fe442683          	lw	a3,-28(s0)
2040415c:	fec42703          	lw	a4,-20(s0)
20404160:	87ba                	mv	a5,a4
20404162:	0786                	slli	a5,a5,0x1
20404164:	97ba                	add	a5,a5,a4
20404166:	078e                	slli	a5,a5,0x3
20404168:	97b6                	add	a5,a5,a3
2040416a:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
2040416e:	fec42783          	lw	a5,-20(s0)
20404172:	0785                	addi	a5,a5,1
20404174:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20404178:	fec42703          	lw	a4,-20(s0)
2040417c:	47fd                	li	a5,31
2040417e:	fae7d7e3          	bge	a5,a4,2040412c <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20404182:	fe042423          	sw	zero,-24(s0)
20404186:	a01d                	j	204041ac <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20404188:	fe442703          	lw	a4,-28(s0)
2040418c:	fe842783          	lw	a5,-24(s0)
20404190:	0e078793          	addi	a5,a5,224
20404194:	078a                	slli	a5,a5,0x2
20404196:	97ba                	add	a5,a5,a4
20404198:	20403737          	lui	a4,0x20403
2040419c:	1a070713          	addi	a4,a4,416 # 204031a0 <__metal_default_exception_handler>
204041a0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
204041a2:	fe842783          	lw	a5,-24(s0)
204041a6:	0785                	addi	a5,a5,1
204041a8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
204041ac:	fe842703          	lw	a4,-24(s0)
204041b0:	47ad                	li	a5,11
204041b2:	fce7dbe3          	bge	a5,a4,20404188 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
204041b6:	204037b7          	lui	a5,0x20403
204041ba:	40078593          	addi	a1,a5,1024 # 20403400 <__metal_exception_handler>
204041be:	4501                	li	a0,0
204041c0:	331d                	jal	20403ee6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
204041c2:	301027f3          	csrr	a5,misa
204041c6:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
204041ca:	fdc42703          	lw	a4,-36(s0)
204041ce:	67c1                	lui	a5,0x10
204041d0:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
204041d4:	8ff9                	and	a5,a5,a4
204041d6:	cb99                	beqz	a5,204041ec <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
204041d8:	300027f3          	csrr	a5,mstatus
204041dc:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
204041e0:	fdc42703          	lw	a4,-36(s0)
204041e4:	6789                	lui	a5,0x2
204041e6:	8fd9                	or	a5,a5,a4
204041e8:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
204041ec:	fe442783          	lw	a5,-28(s0)
204041f0:	4705                	li	a4,1
204041f2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
204041f4:	0001                	nop
204041f6:	50f2                	lw	ra,60(sp)
204041f8:	5462                	lw	s0,56(sp)
204041fa:	6121                	addi	sp,sp,64
204041fc:	8082                	ret

204041fe <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
204041fe:	7179                	addi	sp,sp,-48
20404200:	d606                	sw	ra,44(sp)
20404202:	d422                	sw	s0,40(sp)
20404204:	1800                	addi	s0,sp,48
20404206:	fca42e23          	sw	a0,-36(s0)
2040420a:	fcb42c23          	sw	a1,-40(s0)
2040420e:	fcc42a23          	sw	a2,-44(s0)
20404212:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20404216:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040421a:	fdc42783          	lw	a5,-36(s0)
2040421e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20404222:	fd842503          	lw	a0,-40(s0)
20404226:	3ba1                	jal	20403f7e <__metal_valid_interrupt_id>
20404228:	87aa                	mv	a5,a0
2040422a:	e399                	bnez	a5,20404230 <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
2040422c:	57d5                	li	a5,-11
2040422e:	aa11                	j	20404342 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20404230:	fd442783          	lw	a5,-44(s0)
20404234:	cf85                	beqz	a5,2040426c <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20404236:	fe842683          	lw	a3,-24(s0)
2040423a:	fd842703          	lw	a4,-40(s0)
2040423e:	87ba                	mv	a5,a4
20404240:	0786                	slli	a5,a5,0x1
20404242:	97ba                	add	a5,a5,a4
20404244:	078e                	slli	a5,a5,0x3
20404246:	97b6                	add	a5,a5,a3
20404248:	fd442703          	lw	a4,-44(s0)
2040424c:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20404250:	fe842683          	lw	a3,-24(s0)
20404254:	fd842703          	lw	a4,-40(s0)
20404258:	87ba                	mv	a5,a4
2040425a:	0786                	slli	a5,a5,0x1
2040425c:	97ba                	add	a5,a5,a4
2040425e:	078e                	slli	a5,a5,0x3
20404260:	97b6                	add	a5,a5,a3
20404262:	fd042703          	lw	a4,-48(s0)
20404266:	08e7ac23          	sw	a4,152(a5)
2040426a:	a8d1                	j	2040433e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
2040426c:	fd842783          	lw	a5,-40(s0)
20404270:	17f5                	addi	a5,a5,-3
20404272:	4771                	li	a4,28
20404274:	0cf76263          	bltu	a4,a5,20404338 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20404278:	00279713          	slli	a4,a5,0x2
2040427c:	204067b7          	lui	a5,0x20406
20404280:	0f878793          	addi	a5,a5,248 # 204060f8 <__metal_driver_vtable_riscv_clint0+0x154>
20404284:	97ba                	add	a5,a5,a4
20404286:	439c                	lw	a5,0(a5)
20404288:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
2040428a:	fe842683          	lw	a3,-24(s0)
2040428e:	fd842703          	lw	a4,-40(s0)
20404292:	87ba                	mv	a5,a4
20404294:	0786                	slli	a5,a5,0x1
20404296:	97ba                	add	a5,a5,a4
20404298:	078e                	slli	a5,a5,0x3
2040429a:	97b6                	add	a5,a5,a3
2040429c:	20403737          	lui	a4,0x20403
204042a0:	28c70713          	addi	a4,a4,652 # 2040328c <__metal_default_sw_handler>
204042a4:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
204042a8:	fe842683          	lw	a3,-24(s0)
204042ac:	fd842703          	lw	a4,-40(s0)
204042b0:	87ba                	mv	a5,a4
204042b2:	0786                	slli	a5,a5,0x1
204042b4:	97ba                	add	a5,a5,a4
204042b6:	078e                	slli	a5,a5,0x3
204042b8:	97b6                	add	a5,a5,a3
204042ba:	fd042703          	lw	a4,-48(s0)
204042be:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
204042c2:	a8b5                	j	2040433e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
204042c4:	fe842683          	lw	a3,-24(s0)
204042c8:	fd842703          	lw	a4,-40(s0)
204042cc:	87ba                	mv	a5,a4
204042ce:	0786                	slli	a5,a5,0x1
204042d0:	97ba                	add	a5,a5,a4
204042d2:	078e                	slli	a5,a5,0x3
204042d4:	97b6                	add	a5,a5,a3
204042d6:	20403737          	lui	a4,0x20403
204042da:	37e70713          	addi	a4,a4,894 # 2040337e <__metal_default_timer_handler>
204042de:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
204042e2:	fe842683          	lw	a3,-24(s0)
204042e6:	fd842703          	lw	a4,-40(s0)
204042ea:	87ba                	mv	a5,a4
204042ec:	0786                	slli	a5,a5,0x1
204042ee:	97ba                	add	a5,a5,a4
204042f0:	078e                	slli	a5,a5,0x3
204042f2:	97b6                	add	a5,a5,a3
204042f4:	fd042703          	lw	a4,-48(s0)
204042f8:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
204042fc:	a089                	j	2040433e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
204042fe:	fe842683          	lw	a3,-24(s0)
20404302:	fd842703          	lw	a4,-40(s0)
20404306:	87ba                	mv	a5,a4
20404308:	0786                	slli	a5,a5,0x1
2040430a:	97ba                	add	a5,a5,a4
2040430c:	078e                	slli	a5,a5,0x3
2040430e:	97b6                	add	a5,a5,a3
20404310:	20403737          	lui	a4,0x20403
20404314:	1b870713          	addi	a4,a4,440 # 204031b8 <__metal_default_interrupt_handler>
20404318:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
2040431c:	fe842683          	lw	a3,-24(s0)
20404320:	fd842703          	lw	a4,-40(s0)
20404324:	87ba                	mv	a5,a4
20404326:	0786                	slli	a5,a5,0x1
20404328:	97ba                	add	a5,a5,a4
2040432a:	078e                	slli	a5,a5,0x3
2040432c:	97b6                	add	a5,a5,a3
2040432e:	fd042703          	lw	a4,-48(s0)
20404332:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20404336:	a021                	j	2040433e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20404338:	57d1                	li	a5,-12
2040433a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
2040433e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20404342:	853e                	mv	a0,a5
20404344:	50b2                	lw	ra,44(sp)
20404346:	5422                	lw	s0,40(sp)
20404348:	6145                	addi	sp,sp,48
2040434a:	8082                	ret

2040434c <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
2040434c:	1101                	addi	sp,sp,-32
2040434e:	ce06                	sw	ra,28(sp)
20404350:	cc22                	sw	s0,24(sp)
20404352:	1000                	addi	s0,sp,32
20404354:	fea42623          	sw	a0,-20(s0)
20404358:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
2040435c:	fe842783          	lw	a5,-24(s0)
20404360:	4605                	li	a2,1
20404362:	85be                	mv	a1,a5
20404364:	fec42503          	lw	a0,-20(s0)
20404368:	c4fff0ef          	jal	ra,20403fb6 <__metal_local_interrupt_enable>
2040436c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
2040436e:	853e                	mv	a0,a5
20404370:	40f2                	lw	ra,28(sp)
20404372:	4462                	lw	s0,24(sp)
20404374:	6105                	addi	sp,sp,32
20404376:	8082                	ret

20404378 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20404378:	1101                	addi	sp,sp,-32
2040437a:	ce06                	sw	ra,28(sp)
2040437c:	cc22                	sw	s0,24(sp)
2040437e:	1000                	addi	s0,sp,32
20404380:	fea42623          	sw	a0,-20(s0)
20404384:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20404388:	fe842783          	lw	a5,-24(s0)
2040438c:	4601                	li	a2,0
2040438e:	85be                	mv	a1,a5
20404390:	fec42503          	lw	a0,-20(s0)
20404394:	c23ff0ef          	jal	ra,20403fb6 <__metal_local_interrupt_enable>
20404398:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
2040439a:	853e                	mv	a0,a5
2040439c:	40f2                	lw	ra,28(sp)
2040439e:	4462                	lw	s0,24(sp)
204043a0:	6105                	addi	sp,sp,32
204043a2:	8082                	ret

204043a4 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
204043a4:	1101                	addi	sp,sp,-32
204043a6:	ce06                	sw	ra,28(sp)
204043a8:	cc22                	sw	s0,24(sp)
204043aa:	1000                	addi	s0,sp,32
204043ac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
204043b0:	ae7ff0ef          	jal	ra,20403e96 <__metal_controller_interrupt_vector_mode>
204043b4:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
204043b6:	853e                	mv	a0,a5
204043b8:	40f2                	lw	ra,28(sp)
204043ba:	4462                	lw	s0,24(sp)
204043bc:	6105                	addi	sp,sp,32
204043be:	8082                	ret

204043c0 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
204043c0:	7179                	addi	sp,sp,-48
204043c2:	d606                	sw	ra,44(sp)
204043c4:	d422                	sw	s0,40(sp)
204043c6:	1800                	addi	s0,sp,48
204043c8:	fca42e23          	sw	a0,-36(s0)
204043cc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204043d0:	fdc42783          	lw	a5,-36(s0)
204043d4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
204043d8:	fd842783          	lw	a5,-40(s0)
204043dc:	eb99                	bnez	a5,204043f2 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
204043de:	204037b7          	lui	a5,0x20403
204043e2:	40078593          	addi	a1,a5,1024 # 20403400 <__metal_exception_handler>
204043e6:	fd842503          	lw	a0,-40(s0)
204043ea:	afdff0ef          	jal	ra,20403ee6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
204043ee:	4781                	li	a5,0
204043f0:	a00d                	j	20404412 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
204043f2:	fd842703          	lw	a4,-40(s0)
204043f6:	4785                	li	a5,1
204043f8:	00f71c63          	bne	a4,a5,20404410 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
204043fc:	204067b7          	lui	a5,0x20406
20404400:	d0078593          	addi	a1,a5,-768 # 20405d00 <__metal_vector_table>
20404404:	fd842503          	lw	a0,-40(s0)
20404408:	adfff0ef          	jal	ra,20403ee6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
2040440c:	4781                	li	a5,0
2040440e:	a011                	j	20404412 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20404410:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20404412:	853e                	mv	a0,a5
20404414:	50b2                	lw	ra,44(sp)
20404416:	5422                	lw	s0,40(sp)
20404418:	6145                	addi	sp,sp,48
2040441a:	8082                	ret

2040441c <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
2040441c:	1101                	addi	sp,sp,-32
2040441e:	ce22                	sw	s0,28(sp)
20404420:	1000                	addi	s0,sp,32
20404422:	fea42623          	sw	a0,-20(s0)
20404426:	feb42423          	sw	a1,-24(s0)
2040442a:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
2040442e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
20404430:	853e                	mv	a0,a5
20404432:	4472                	lw	s0,28(sp)
20404434:	6105                	addi	sp,sp,32
20404436:	8082                	ret

20404438 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20404438:	7139                	addi	sp,sp,-64
2040443a:	de22                	sw	s0,60(sp)
2040443c:	0080                	addi	s0,sp,64
2040443e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20404442:	4301                	li	t1,0
20404444:	4381                	li	t2,0
20404446:	fe642423          	sw	t1,-24(s0)
2040444a:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
2040444e:	b8002573          	csrr	a0,mcycleh
20404452:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20404456:	b0002573          	csrr	a0,mcycle
2040445a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
2040445e:	b8002573          	csrr	a0,mcycleh
20404462:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20404466:	fe442883          	lw	a7,-28(s0)
2040446a:	fdc42503          	lw	a0,-36(s0)
2040446e:	02a89563          	bne	a7,a0,20404498 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20404472:	fe442503          	lw	a0,-28(s0)
20404476:	85aa                	mv	a1,a0
20404478:	4601                	li	a2,0
2040447a:	00059813          	slli	a6,a1,0x0
2040447e:	4781                	li	a5,0
20404480:	fe042603          	lw	a2,-32(s0)
20404484:	86b2                	mv	a3,a2
20404486:	4701                	li	a4,0
20404488:	00d7e633          	or	a2,a5,a3
2040448c:	fec42423          	sw	a2,-24(s0)
20404490:	00e867b3          	or	a5,a6,a4
20404494:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20404498:	fe842783          	lw	a5,-24(s0)
2040449c:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
204044a0:	853e                	mv	a0,a5
204044a2:	85c2                	mv	a1,a6
204044a4:	5472                	lw	s0,60(sp)
204044a6:	6121                	addi	sp,sp,64
204044a8:	8082                	ret

204044aa <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
204044aa:	7179                	addi	sp,sp,-48
204044ac:	d606                	sw	ra,44(sp)
204044ae:	d422                	sw	s0,40(sp)
204044b0:	d24a                	sw	s2,36(sp)
204044b2:	d04e                	sw	s3,32(sp)
204044b4:	1800                	addi	s0,sp,48
204044b6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
204044ba:	fdc42783          	lw	a5,-36(s0)
204044be:	e781                	bnez	a5,204044c6 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
204044c0:	4901                	li	s2,0
204044c2:	4981                	li	s3,0
204044c4:	a821                	j	204044dc <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
204044c6:	fdc42503          	lw	a0,-36(s0)
204044ca:	b19fe0ef          	jal	ra,20402fe2 <__metal_driver_cpu_timebase>
204044ce:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
204044d2:	fec42783          	lw	a5,-20(s0)
204044d6:	893e                	mv	s2,a5
204044d8:	87fd                	srai	a5,a5,0x1f
204044da:	89be                	mv	s3,a5
204044dc:	87ca                	mv	a5,s2
204044de:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
204044e0:	853e                	mv	a0,a5
204044e2:	85c2                	mv	a1,a6
204044e4:	50b2                	lw	ra,44(sp)
204044e6:	5422                	lw	s0,40(sp)
204044e8:	5912                	lw	s2,36(sp)
204044ea:	5982                	lw	s3,32(sp)
204044ec:	6145                	addi	sp,sp,48
204044ee:	8082                	ret

204044f0 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
204044f0:	7179                	addi	sp,sp,-48
204044f2:	d606                	sw	ra,44(sp)
204044f4:	d422                	sw	s0,40(sp)
204044f6:	1800                	addi	s0,sp,48
204044f8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
204044fc:	4781                	li	a5,0
204044fe:	4801                	li	a6,0
20404500:	fef42023          	sw	a5,-32(s0)
20404504:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404508:	fdc42503          	lw	a0,-36(s0)
2040450c:	b01fe0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20404510:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20404514:	fec42783          	lw	a5,-20(s0)
20404518:	c78d                	beqz	a5,20404542 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
2040451a:	fec42783          	lw	a5,-20(s0)
2040451e:	13c7a783          	lw	a5,316(a5)
20404522:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20404526:	fe842783          	lw	a5,-24(s0)
2040452a:	cf81                	beqz	a5,20404542 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
2040452c:	fe842783          	lw	a5,-24(s0)
20404530:	439c                	lw	a5,0(a5)
20404532:	43f8                	lw	a4,68(a5)
20404534:	fe040793          	addi	a5,s0,-32
20404538:	863e                	mv	a2,a5
2040453a:	4585                	li	a1,1
2040453c:	fe842503          	lw	a0,-24(s0)
20404540:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20404542:	fe042783          	lw	a5,-32(s0)
20404546:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
2040454a:	853e                	mv	a0,a5
2040454c:	85c2                	mv	a1,a6
2040454e:	50b2                	lw	ra,44(sp)
20404550:	5422                	lw	s0,40(sp)
20404552:	6145                	addi	sp,sp,48
20404554:	8082                	ret

20404556 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20404556:	7179                	addi	sp,sp,-48
20404558:	d606                	sw	ra,44(sp)
2040455a:	d422                	sw	s0,40(sp)
2040455c:	d226                	sw	s1,36(sp)
2040455e:	1800                	addi	s0,sp,48
20404560:	fca42e23          	sw	a0,-36(s0)
20404564:	fcb42823          	sw	a1,-48(s0)
20404568:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
2040456c:	57fd                	li	a5,-1
2040456e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404572:	fdc42503          	lw	a0,-36(s0)
20404576:	a97fe0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
2040457a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
2040457e:	fe842783          	lw	a5,-24(s0)
20404582:	cf8d                	beqz	a5,204045bc <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20404584:	fe842783          	lw	a5,-24(s0)
20404588:	13c7a783          	lw	a5,316(a5)
2040458c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20404590:	fe442783          	lw	a5,-28(s0)
20404594:	c785                	beqz	a5,204045bc <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20404596:	fe442783          	lw	a5,-28(s0)
2040459a:	439c                	lw	a5,0(a5)
2040459c:	47a4                	lw	s1,72(a5)
2040459e:	fdc42503          	lw	a0,-36(s0)
204045a2:	a1dfe0ef          	jal	ra,20402fbe <__metal_driver_cpu_hartid>
204045a6:	87aa                	mv	a5,a0
204045a8:	fd042603          	lw	a2,-48(s0)
204045ac:	fd442683          	lw	a3,-44(s0)
204045b0:	85be                	mv	a1,a5
204045b2:	fe442503          	lw	a0,-28(s0)
204045b6:	9482                	jalr	s1
204045b8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
204045bc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
204045c0:	853e                	mv	a0,a5
204045c2:	50b2                	lw	ra,44(sp)
204045c4:	5422                	lw	s0,40(sp)
204045c6:	5492                	lw	s1,36(sp)
204045c8:	6145                	addi	sp,sp,48
204045ca:	8082                	ret

204045cc <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
204045cc:	1101                	addi	sp,sp,-32
204045ce:	ce22                	sw	s0,28(sp)
204045d0:	1000                	addi	s0,sp,32
204045d2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
204045d6:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
204045da:	853e                	mv	a0,a5
204045dc:	4472                	lw	s0,28(sp)
204045de:	6105                	addi	sp,sp,32
204045e0:	8082                	ret

204045e2 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
204045e2:	1101                	addi	sp,sp,-32
204045e4:	ce22                	sw	s0,28(sp)
204045e6:	1000                	addi	s0,sp,32
204045e8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
204045ec:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
204045ee:	853e                	mv	a0,a5
204045f0:	4472                	lw	s0,28(sp)
204045f2:	6105                	addi	sp,sp,32
204045f4:	8082                	ret

204045f6 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
204045f6:	1101                	addi	sp,sp,-32
204045f8:	ce22                	sw	s0,28(sp)
204045fa:	1000                	addi	s0,sp,32
204045fc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20404600:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20404604:	853e                	mv	a0,a5
20404606:	4472                	lw	s0,28(sp)
20404608:	6105                	addi	sp,sp,32
2040460a:	8082                	ret

2040460c <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
2040460c:	1101                	addi	sp,sp,-32
2040460e:	ce22                	sw	s0,28(sp)
20404610:	1000                	addi	s0,sp,32
20404612:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20404616:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20404618:	853e                	mv	a0,a5
2040461a:	4472                	lw	s0,28(sp)
2040461c:	6105                	addi	sp,sp,32
2040461e:	8082                	ret

20404620 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20404620:	7179                	addi	sp,sp,-48
20404622:	d606                	sw	ra,44(sp)
20404624:	d422                	sw	s0,40(sp)
20404626:	1800                	addi	s0,sp,48
20404628:	fca42e23          	sw	a0,-36(s0)
2040462c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20404630:	57fd                	li	a5,-1
20404632:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404636:	fdc42503          	lw	a0,-36(s0)
2040463a:	9d3fe0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
2040463e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20404642:	fe842783          	lw	a5,-24(s0)
20404646:	c79d                	beqz	a5,20404674 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20404648:	fe842783          	lw	a5,-24(s0)
2040464c:	0dc7a783          	lw	a5,220(a5)
20404650:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20404654:	fe442783          	lw	a5,-28(s0)
20404658:	cf91                	beqz	a5,20404674 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
2040465a:	fe442783          	lw	a5,-28(s0)
2040465e:	439c                	lw	a5,0(a5)
20404660:	43f8                	lw	a4,68(a5)
20404662:	fd840793          	addi	a5,s0,-40
20404666:	863e                	mv	a2,a5
20404668:	458d                	li	a1,3
2040466a:	fe442503          	lw	a0,-28(s0)
2040466e:	9702                	jalr	a4
20404670:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20404674:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20404678:	853e                	mv	a0,a5
2040467a:	50b2                	lw	ra,44(sp)
2040467c:	5422                	lw	s0,40(sp)
2040467e:	6145                	addi	sp,sp,48
20404680:	8082                	ret

20404682 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20404682:	7179                	addi	sp,sp,-48
20404684:	d606                	sw	ra,44(sp)
20404686:	d422                	sw	s0,40(sp)
20404688:	1800                	addi	s0,sp,48
2040468a:	fca42e23          	sw	a0,-36(s0)
2040468e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20404692:	57fd                	li	a5,-1
20404694:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404698:	fdc42503          	lw	a0,-36(s0)
2040469c:	971fe0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
204046a0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
204046a4:	fe842783          	lw	a5,-24(s0)
204046a8:	c79d                	beqz	a5,204046d6 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204046aa:	fe842783          	lw	a5,-24(s0)
204046ae:	0dc7a783          	lw	a5,220(a5)
204046b2:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
204046b6:	fe442783          	lw	a5,-28(s0)
204046ba:	cf91                	beqz	a5,204046d6 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
204046bc:	fe442783          	lw	a5,-28(s0)
204046c0:	439c                	lw	a5,0(a5)
204046c2:	43f8                	lw	a4,68(a5)
204046c4:	fd840793          	addi	a5,s0,-40
204046c8:	863e                	mv	a2,a5
204046ca:	4589                	li	a1,2
204046cc:	fe442503          	lw	a0,-28(s0)
204046d0:	9702                	jalr	a4
204046d2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
204046d6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
204046da:	853e                	mv	a0,a5
204046dc:	50b2                	lw	ra,44(sp)
204046de:	5422                	lw	s0,40(sp)
204046e0:	6145                	addi	sp,sp,48
204046e2:	8082                	ret

204046e4 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
204046e4:	7179                	addi	sp,sp,-48
204046e6:	d606                	sw	ra,44(sp)
204046e8:	d422                	sw	s0,40(sp)
204046ea:	1800                	addi	s0,sp,48
204046ec:	fca42e23          	sw	a0,-36(s0)
204046f0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
204046f4:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204046f8:	fdc42503          	lw	a0,-36(s0)
204046fc:	911fe0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20404700:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20404704:	fe842783          	lw	a5,-24(s0)
20404708:	c79d                	beqz	a5,20404736 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040470a:	fe842783          	lw	a5,-24(s0)
2040470e:	0dc7a783          	lw	a5,220(a5)
20404712:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20404716:	fe442783          	lw	a5,-28(s0)
2040471a:	cf91                	beqz	a5,20404736 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
2040471c:	fe442783          	lw	a5,-28(s0)
20404720:	439c                	lw	a5,0(a5)
20404722:	43f8                	lw	a4,68(a5)
20404724:	fd840793          	addi	a5,s0,-40
20404728:	863e                	mv	a2,a5
2040472a:	4591                	li	a1,4
2040472c:	fe442503          	lw	a0,-28(s0)
20404730:	9702                	jalr	a4
20404732:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20404736:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
2040473a:	853e                	mv	a0,a5
2040473c:	50b2                	lw	ra,44(sp)
2040473e:	5422                	lw	s0,40(sp)
20404740:	6145                	addi	sp,sp,48
20404742:	8082                	ret

20404744 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20404744:	1101                	addi	sp,sp,-32
20404746:	ce06                	sw	ra,28(sp)
20404748:	cc22                	sw	s0,24(sp)
2040474a:	1000                	addi	s0,sp,32
2040474c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20404750:	fec42503          	lw	a0,-20(s0)
20404754:	8b9fe0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20404758:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
2040475a:	853e                	mv	a0,a5
2040475c:	40f2                	lw	ra,28(sp)
2040475e:	4462                	lw	s0,24(sp)
20404760:	6105                	addi	sp,sp,32
20404762:	8082                	ret

20404764 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20404764:	7179                	addi	sp,sp,-48
20404766:	d606                	sw	ra,44(sp)
20404768:	d422                	sw	s0,40(sp)
2040476a:	1800                	addi	s0,sp,48
2040476c:	fca42e23          	sw	a0,-36(s0)
20404770:	fcb42c23          	sw	a1,-40(s0)
20404774:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404778:	fdc42503          	lw	a0,-36(s0)
2040477c:	891fe0ef          	jal	ra,2040300c <__metal_driver_cpu_interrupt_controller>
20404780:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20404784:	fec42783          	lw	a5,-20(s0)
20404788:	cb99                	beqz	a5,2040479e <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
2040478a:	fd442603          	lw	a2,-44(s0)
2040478e:	fd842583          	lw	a1,-40(s0)
20404792:	fec42503          	lw	a0,-20(s0)
20404796:	8ddff0ef          	jal	ra,20404072 <__metal_exception_register>
2040479a:	87aa                	mv	a5,a0
2040479c:	a011                	j	204047a0 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
2040479e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
204047a0:	853e                	mv	a0,a5
204047a2:	50b2                	lw	ra,44(sp)
204047a4:	5422                	lw	s0,40(sp)
204047a6:	6145                	addi	sp,sp,48
204047a8:	8082                	ret

204047aa <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
204047aa:	1101                	addi	sp,sp,-32
204047ac:	ce22                	sw	s0,28(sp)
204047ae:	1000                	addi	s0,sp,32
204047b0:	fea42623          	sw	a0,-20(s0)
204047b4:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
204047b8:	fe842783          	lw	a5,-24(s0)
204047bc:	0007d783          	lhu	a5,0(a5)
204047c0:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
204047c4:	478d                	li	a5,3
204047c6:	00f71463          	bne	a4,a5,204047ce <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
204047ca:	4791                	li	a5,4
204047cc:	a011                	j	204047d0 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
204047ce:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
204047d0:	853e                	mv	a0,a5
204047d2:	4472                	lw	s0,28(sp)
204047d4:	6105                	addi	sp,sp,32
204047d6:	8082                	ret

204047d8 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
204047d8:	7179                	addi	sp,sp,-48
204047da:	d622                	sw	s0,44(sp)
204047dc:	1800                	addi	s0,sp,48
204047de:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204047e2:	341027f3          	csrr	a5,mepc
204047e6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
204047ea:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
204047ee:	853e                	mv	a0,a5
204047f0:	5432                	lw	s0,44(sp)
204047f2:	6145                	addi	sp,sp,48
204047f4:	8082                	ret

204047f6 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
204047f6:	1101                	addi	sp,sp,-32
204047f8:	ce22                	sw	s0,28(sp)
204047fa:	1000                	addi	s0,sp,32
204047fc:	fea42623          	sw	a0,-20(s0)
20404800:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20404804:	fe842783          	lw	a5,-24(s0)
20404808:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
2040480c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
2040480e:	853e                	mv	a0,a5
20404810:	4472                	lw	s0,28(sp)
20404812:	6105                	addi	sp,sp,32
20404814:	8082                	ret

20404816 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20404816:	1101                	addi	sp,sp,-32
20404818:	ce22                	sw	s0,28(sp)
2040481a:	1000                	addi	s0,sp,32
2040481c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20404820:	fec42703          	lw	a4,-20(s0)
20404824:	800017b7          	lui	a5,0x80001
20404828:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe034>
2040482c:	00f71563          	bne	a4,a5,20404836 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20404830:	0c0007b7          	lui	a5,0xc000
20404834:	a011                	j	20404838 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20404836:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:245
	}
}
20404838:	853e                	mv	a0,a5
2040483a:	4472                	lw	s0,28(sp)
2040483c:	6105                	addi	sp,sp,32
2040483e:	8082                	ret

20404840 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20404840:	1101                	addi	sp,sp,-32
20404842:	ce22                	sw	s0,28(sp)
20404844:	1000                	addi	s0,sp,32
20404846:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
2040484a:	fec42703          	lw	a4,-20(s0)
2040484e:	800017b7          	lui	a5,0x80001
20404852:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe034>
20404856:	00f71463          	bne	a4,a5,2040485e <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
2040485a:	47ed                	li	a5,27
2040485c:	a011                	j	20404860 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
2040485e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:265
	}
}
20404860:	853e                	mv	a0,a5
20404862:	4472                	lw	s0,28(sp)
20404864:	6105                	addi	sp,sp,32
20404866:	8082                	ret

20404868 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20404868:	1101                	addi	sp,sp,-32
2040486a:	ce22                	sw	s0,28(sp)
2040486c:	1000                	addi	s0,sp,32
2040486e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20404872:	fec42703          	lw	a4,-20(s0)
20404876:	800017b7          	lui	a5,0x80001
2040487a:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe034>
2040487e:	00f71463          	bne	a4,a5,20404886 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20404882:	479d                	li	a5,7
20404884:	a011                	j	20404888 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20404886:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:275
	}
}
20404888:	853e                	mv	a0,a5
2040488a:	4472                	lw	s0,28(sp)
2040488c:	6105                	addi	sp,sp,32
2040488e:	8082                	ret

20404890 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20404890:	1101                	addi	sp,sp,-32
20404892:	ce22                	sw	s0,28(sp)
20404894:	1000                	addi	s0,sp,32
20404896:	fea42623          	sw	a0,-20(s0)
2040489a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:279
	if (idx == 0) {
2040489e:	fe842783          	lw	a5,-24(s0)
204048a2:	e791                	bnez	a5,204048ae <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
204048a4:	800017b7          	lui	a5,0x80001
204048a8:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdc7c>
204048ac:	a011                	j	204048b0 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
204048ae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:285
	}
}
204048b0:	853e                	mv	a0,a5
204048b2:	4472                	lw	s0,28(sp)
204048b4:	6105                	addi	sp,sp,32
204048b6:	8082                	ret

204048b8 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
204048b8:	1101                	addi	sp,sp,-32
204048ba:	ce22                	sw	s0,28(sp)
204048bc:	1000                	addi	s0,sp,32
204048be:	fea42623          	sw	a0,-20(s0)
204048c2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:289
	if (idx == 0) {
204048c6:	fe842783          	lw	a5,-24(s0)
204048ca:	e399                	bnez	a5,204048d0 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:290
		return 11;
204048cc:	47ad                	li	a5,11
204048ce:	a011                	j	204048d2 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
204048d0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:295
	}
}
204048d2:	853e                	mv	a0,a5
204048d4:	4472                	lw	s0,28(sp)
204048d6:	6105                	addi	sp,sp,32
204048d8:	8082                	ret

204048da <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
204048da:	7179                	addi	sp,sp,-48
204048dc:	d606                	sw	ra,44(sp)
204048de:	d422                	sw	s0,40(sp)
204048e0:	1800                	addi	s0,sp,48
204048e2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204048e6:	fdc42503          	lw	a0,-36(s0)
204048ea:	3735                	jal	20404816 <__metal_driver_sifive_plic0_control_base>
204048ec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204048f0:	fec42703          	lw	a4,-20(s0)
204048f4:	002007b7          	lui	a5,0x200
204048f8:	0791                	addi	a5,a5,4
204048fa:	97ba                	add	a5,a5,a4
204048fc:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
204048fe:	853e                	mv	a0,a5
20404900:	50b2                	lw	ra,44(sp)
20404902:	5422                	lw	s0,40(sp)
20404904:	6145                	addi	sp,sp,48
20404906:	8082                	ret

20404908 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20404908:	7179                	addi	sp,sp,-48
2040490a:	d606                	sw	ra,44(sp)
2040490c:	d422                	sw	s0,40(sp)
2040490e:	1800                	addi	s0,sp,48
20404910:	fca42e23          	sw	a0,-36(s0)
20404914:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404918:	fdc42503          	lw	a0,-36(s0)
2040491c:	3ded                	jal	20404816 <__metal_driver_sifive_plic0_control_base>
2040491e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404922:	fec42703          	lw	a4,-20(s0)
20404926:	002007b7          	lui	a5,0x200
2040492a:	0791                	addi	a5,a5,4
2040492c:	97ba                	add	a5,a5,a4
2040492e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20404930:	fd842783          	lw	a5,-40(s0)
20404934:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20404936:	0001                	nop
20404938:	50b2                	lw	ra,44(sp)
2040493a:	5422                	lw	s0,40(sp)
2040493c:	6145                	addi	sp,sp,48
2040493e:	8082                	ret

20404940 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20404940:	7179                	addi	sp,sp,-48
20404942:	d606                	sw	ra,44(sp)
20404944:	d422                	sw	s0,40(sp)
20404946:	1800                	addi	s0,sp,48
20404948:	fca42e23          	sw	a0,-36(s0)
2040494c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404950:	fdc42503          	lw	a0,-36(s0)
20404954:	35c9                	jal	20404816 <__metal_driver_sifive_plic0_control_base>
20404956:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040495a:	fec42703          	lw	a4,-20(s0)
2040495e:	002007b7          	lui	a5,0x200
20404962:	97ba                	add	a5,a5,a4
20404964:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20404966:	fd842783          	lw	a5,-40(s0)
2040496a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
2040496c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
2040496e:	853e                	mv	a0,a5
20404970:	50b2                	lw	ra,44(sp)
20404972:	5422                	lw	s0,40(sp)
20404974:	6145                	addi	sp,sp,48
20404976:	8082                	ret

20404978 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20404978:	7179                	addi	sp,sp,-48
2040497a:	d606                	sw	ra,44(sp)
2040497c:	d422                	sw	s0,40(sp)
2040497e:	1800                	addi	s0,sp,48
20404980:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404984:	fdc42503          	lw	a0,-36(s0)
20404988:	3579                	jal	20404816 <__metal_driver_sifive_plic0_control_base>
2040498a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040498e:	fec42703          	lw	a4,-20(s0)
20404992:	002007b7          	lui	a5,0x200
20404996:	97ba                	add	a5,a5,a4
20404998:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
2040499a:	853e                	mv	a0,a5
2040499c:	50b2                	lw	ra,44(sp)
2040499e:	5422                	lw	s0,40(sp)
204049a0:	6145                	addi	sp,sp,48
204049a2:	8082                	ret

204049a4 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
204049a4:	7179                	addi	sp,sp,-48
204049a6:	d606                	sw	ra,44(sp)
204049a8:	d422                	sw	s0,40(sp)
204049aa:	1800                	addi	s0,sp,48
204049ac:	fca42e23          	sw	a0,-36(s0)
204049b0:	fcb42c23          	sw	a1,-40(s0)
204049b4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
204049b8:	fdc42503          	lw	a0,-36(s0)
204049bc:	3da9                	jal	20404816 <__metal_driver_sifive_plic0_control_base>
204049be:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
204049c2:	fdc42503          	lw	a0,-36(s0)
204049c6:	354d                	jal	20404868 <__metal_driver_sifive_plic0_max_priority>
204049c8:	87aa                	mv	a5,a0
204049ca:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
204049ce:	fe842783          	lw	a5,-24(s0)
204049d2:	c785                	beqz	a5,204049fa <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
204049d4:	fd442703          	lw	a4,-44(s0)
204049d8:	fe842783          	lw	a5,-24(s0)
204049dc:	00f77f63          	bgeu	a4,a5,204049fa <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204049e0:	fd842783          	lw	a5,-40(s0)
204049e4:	078a                	slli	a5,a5,0x2
204049e6:	873e                	mv	a4,a5
204049e8:	fec42783          	lw	a5,-20(s0)
204049ec:	97ba                	add	a5,a5,a4
204049ee:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
204049f0:	fd442783          	lw	a5,-44(s0)
204049f4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
204049f6:	4781                	li	a5,0
204049f8:	a011                	j	204049fc <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
204049fa:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
204049fc:	853e                	mv	a0,a5
204049fe:	50b2                	lw	ra,44(sp)
20404a00:	5422                	lw	s0,40(sp)
20404a02:	6145                	addi	sp,sp,48
20404a04:	8082                	ret

20404a06 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20404a06:	7179                	addi	sp,sp,-48
20404a08:	d606                	sw	ra,44(sp)
20404a0a:	d422                	sw	s0,40(sp)
20404a0c:	1800                	addi	s0,sp,48
20404a0e:	fca42e23          	sw	a0,-36(s0)
20404a12:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404a16:	fdc42503          	lw	a0,-36(s0)
20404a1a:	3bf5                	jal	20404816 <__metal_driver_sifive_plic0_control_base>
20404a1c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404a20:	fd842783          	lw	a5,-40(s0)
20404a24:	078a                	slli	a5,a5,0x2
20404a26:	873e                	mv	a4,a5
20404a28:	fec42783          	lw	a5,-20(s0)
20404a2c:	97ba                	add	a5,a5,a4
20404a2e:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20404a30:	853e                	mv	a0,a5
20404a32:	50b2                	lw	ra,44(sp)
20404a34:	5422                	lw	s0,40(sp)
20404a36:	6145                	addi	sp,sp,48
20404a38:	8082                	ret

20404a3a <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20404a3a:	7179                	addi	sp,sp,-48
20404a3c:	d606                	sw	ra,44(sp)
20404a3e:	d422                	sw	s0,40(sp)
20404a40:	1800                	addi	s0,sp,48
20404a42:	fca42e23          	sw	a0,-36(s0)
20404a46:	fcb42c23          	sw	a1,-40(s0)
20404a4a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404a4e:	fdc42503          	lw	a0,-36(s0)
20404a52:	33d1                	jal	20404816 <__metal_driver_sifive_plic0_control_base>
20404a54:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404a58:	fd842783          	lw	a5,-40(s0)
20404a5c:	8795                	srai	a5,a5,0x5
20404a5e:	078a                	slli	a5,a5,0x2
20404a60:	873e                	mv	a4,a5
20404a62:	fec42783          	lw	a5,-20(s0)
20404a66:	973e                	add	a4,a4,a5
20404a68:	6789                	lui	a5,0x2
20404a6a:	97ba                	add	a5,a5,a4
20404a6c:	439c                	lw	a5,0(a5)
20404a6e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404a72:	fd442783          	lw	a5,-44(s0)
20404a76:	cf81                	beqz	a5,20404a8e <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20404a78:	fd842783          	lw	a5,-40(s0)
20404a7c:	8bfd                	andi	a5,a5,31
20404a7e:	4705                	li	a4,1
20404a80:	00f717b3          	sll	a5,a4,a5
20404a84:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404a86:	fe842783          	lw	a5,-24(s0)
20404a8a:	8fd9                	or	a5,a5,a4
20404a8c:	a829                	j	20404aa6 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20404a8e:	fd842783          	lw	a5,-40(s0)
20404a92:	8bfd                	andi	a5,a5,31
20404a94:	4705                	li	a4,1
20404a96:	00f717b3          	sll	a5,a4,a5
20404a9a:	fff7c793          	not	a5,a5
20404a9e:	873e                	mv	a4,a5
20404aa0:	fe842783          	lw	a5,-24(s0)
20404aa4:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404aa6:	fd842703          	lw	a4,-40(s0)
20404aaa:	8715                	srai	a4,a4,0x5
20404aac:	070a                	slli	a4,a4,0x2
20404aae:	86ba                	mv	a3,a4
20404ab0:	fec42703          	lw	a4,-20(s0)
20404ab4:	96ba                	add	a3,a3,a4
20404ab6:	6709                	lui	a4,0x2
20404ab8:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20404aba:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20404abc:	0001                	nop
20404abe:	50b2                	lw	ra,44(sp)
20404ac0:	5422                	lw	s0,40(sp)
20404ac2:	6145                	addi	sp,sp,48
20404ac4:	8082                	ret

20404ac6 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20404ac6:	1101                	addi	sp,sp,-32
20404ac8:	ce06                	sw	ra,28(sp)
20404aca:	cc22                	sw	s0,24(sp)
20404acc:	1000                	addi	s0,sp,32
20404ace:	fea42623          	sw	a0,-20(s0)
20404ad2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20404ad6:	12c00513          	li	a0,300
20404ada:	1d0010ef          	jal	ra,20405caa <metal_shutdown>

20404ade <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20404ade:	7179                	addi	sp,sp,-48
20404ae0:	d606                	sw	ra,44(sp)
20404ae2:	d422                	sw	s0,40(sp)
20404ae4:	1800                	addi	s0,sp,48
20404ae6:	fca42e23          	sw	a0,-36(s0)
20404aea:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20404aee:	fd842783          	lw	a5,-40(s0)
20404af2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20404af6:	fec42503          	lw	a0,-20(s0)
20404afa:	33c5                	jal	204048da <__metal_plic0_claim_interrupt>
20404afc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20404b00:	fec42503          	lw	a0,-20(s0)
20404b04:	d3dff0ef          	jal	ra,20404840 <__metal_driver_sifive_plic0_num_interrupts>
20404b08:	87aa                	mv	a5,a0
20404b0a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20404b0e:	fe842703          	lw	a4,-24(s0)
20404b12:	fe442783          	lw	a5,-28(s0)
20404b16:	04f77263          	bgeu	a4,a5,20404b5a <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20404b1a:	fec42703          	lw	a4,-20(s0)
20404b1e:	fe842783          	lw	a5,-24(s0)
20404b22:	078a                	slli	a5,a5,0x2
20404b24:	97ba                	add	a5,a5,a4
20404b26:	479c                	lw	a5,8(a5)
20404b28:	cb8d                	beqz	a5,20404b5a <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
20404b2a:	fec42703          	lw	a4,-20(s0)
20404b2e:	fe842783          	lw	a5,-24(s0)
20404b32:	078a                	slli	a5,a5,0x2
20404b34:	97ba                	add	a5,a5,a4
20404b36:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20404b3a:	fe842603          	lw	a2,-24(s0)
20404b3e:	fec42683          	lw	a3,-20(s0)
20404b42:	fe842703          	lw	a4,-24(s0)
20404b46:	87ba                	mv	a5,a4
20404b48:	0786                	slli	a5,a5,0x1
20404b4a:	97ba                	add	a5,a5,a4
20404b4c:	078e                	slli	a5,a5,0x3
20404b4e:	97b6                	add	a5,a5,a3
20404b50:	0887a783          	lw	a5,136(a5)
20404b54:	85be                	mv	a1,a5
20404b56:	8532                	mv	a0,a2
20404b58:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20404b5a:	fe842583          	lw	a1,-24(s0)
20404b5e:	fec42503          	lw	a0,-20(s0)
20404b62:	335d                	jal	20404908 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
20404b64:	0001                	nop
20404b66:	50b2                	lw	ra,44(sp)
20404b68:	5422                	lw	s0,40(sp)
20404b6a:	6145                	addi	sp,sp,48
20404b6c:	8082                	ret

20404b6e <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20404b6e:	7139                	addi	sp,sp,-64
20404b70:	de06                	sw	ra,60(sp)
20404b72:	dc22                	sw	s0,56(sp)
20404b74:	0080                	addi	s0,sp,64
20404b76:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404b7a:	fcc42783          	lw	a5,-52(s0)
20404b7e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20404b82:	fe442783          	lw	a5,-28(s0)
20404b86:	43dc                	lw	a5,4(a5)
20404b88:	12079063          	bnez	a5,20404ca8 <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20404b8c:	fe042623          	sw	zero,-20(s0)
20404b90:	a221                	j	20404c98 <__metal_driver_riscv_plic0_init+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20404b92:	fcc42503          	lw	a0,-52(s0)
20404b96:	cabff0ef          	jal	ra,20404840 <__metal_driver_sifive_plic0_num_interrupts>
20404b9a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20404b9e:	fec42583          	lw	a1,-20(s0)
20404ba2:	fcc42503          	lw	a0,-52(s0)
20404ba6:	cebff0ef          	jal	ra,20404890 <__metal_driver_sifive_plic0_interrupt_parents>
20404baa:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20404bae:	fec42583          	lw	a1,-20(s0)
20404bb2:	fcc42503          	lw	a0,-52(s0)
20404bb6:	d03ff0ef          	jal	ra,204048b8 <__metal_driver_sifive_plic0_interrupt_lines>
20404bba:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
20404bbe:	fdc42783          	lw	a5,-36(s0)
20404bc2:	439c                	lw	a5,0(a5)
20404bc4:	439c                	lw	a5,0(a5)
20404bc6:	fdc42503          	lw	a0,-36(s0)
20404bca:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20404bcc:	fe042423          	sw	zero,-24(s0)
20404bd0:	a085                	j	20404c30 <__metal_driver_riscv_plic0_init+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20404bd2:	4601                	li	a2,0
20404bd4:	fe842583          	lw	a1,-24(s0)
20404bd8:	fe442503          	lw	a0,-28(s0)
20404bdc:	3db9                	jal	20404a3a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
20404bde:	4601                	li	a2,0
20404be0:	fe842583          	lw	a1,-24(s0)
20404be4:	fcc42503          	lw	a0,-52(s0)
20404be8:	3b75                	jal	204049a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20404bea:	fe442703          	lw	a4,-28(s0)
20404bee:	fe842783          	lw	a5,-24(s0)
20404bf2:	078a                	slli	a5,a5,0x2
20404bf4:	97ba                	add	a5,a5,a4
20404bf6:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20404bfa:	fe442683          	lw	a3,-28(s0)
20404bfe:	fe842703          	lw	a4,-24(s0)
20404c02:	87ba                	mv	a5,a4
20404c04:	0786                	slli	a5,a5,0x1
20404c06:	97ba                	add	a5,a5,a4
20404c08:	078e                	slli	a5,a5,0x3
20404c0a:	97b6                	add	a5,a5,a3
20404c0c:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20404c10:	fe442683          	lw	a3,-28(s0)
20404c14:	fe842703          	lw	a4,-24(s0)
20404c18:	87ba                	mv	a5,a4
20404c1a:	0786                	slli	a5,a5,0x1
20404c1c:	97ba                	add	a5,a5,a4
20404c1e:	078e                	slli	a5,a5,0x3
20404c20:	97b6                	add	a5,a5,a3
20404c22:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20404c26:	fe842783          	lw	a5,-24(s0)
20404c2a:	0785                	addi	a5,a5,1
20404c2c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20404c30:	fe842703          	lw	a4,-24(s0)
20404c34:	fe042783          	lw	a5,-32(s0)
20404c38:	f8f74de3          	blt	a4,a5,20404bd2 <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
20404c3c:	4581                	li	a1,0
20404c3e:	fcc42503          	lw	a0,-52(s0)
20404c42:	cffff0ef          	jal	ra,20404940 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20404c46:	fdc42783          	lw	a5,-36(s0)
20404c4a:	439c                	lw	a5,0(a5)
20404c4c:	4fdc                	lw	a5,28(a5)
20404c4e:	fe442683          	lw	a3,-28(s0)
20404c52:	4601                	li	a2,0
20404c54:	fd842583          	lw	a1,-40(s0)
20404c58:	fdc42503          	lw	a0,-36(s0)
20404c5c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
20404c5e:	fdc42783          	lw	a5,-36(s0)
20404c62:	439c                	lw	a5,0(a5)
20404c64:	4fd8                	lw	a4,28(a5)
20404c66:	fe442683          	lw	a3,-28(s0)
20404c6a:	204057b7          	lui	a5,0x20405
20404c6e:	ade78613          	addi	a2,a5,-1314 # 20404ade <__metal_plic0_handler>
20404c72:	fd842583          	lw	a1,-40(s0)
20404c76:	fdc42503          	lw	a0,-36(s0)
20404c7a:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
20404c7c:	fdc42783          	lw	a5,-36(s0)
20404c80:	439c                	lw	a5,0(a5)
20404c82:	53dc                	lw	a5,36(a5)
20404c84:	fd842583          	lw	a1,-40(s0)
20404c88:	fdc42503          	lw	a0,-36(s0)
20404c8c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20404c8e:	fec42783          	lw	a5,-20(s0)
20404c92:	0785                	addi	a5,a5,1
20404c94:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404c98:	fec42783          	lw	a5,-20(s0)
20404c9c:	eef05be3          	blez	a5,20404b92 <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20404ca0:	fe442783          	lw	a5,-28(s0)
20404ca4:	4705                	li	a4,1
20404ca6:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20404ca8:	0001                	nop
20404caa:	50f2                	lw	ra,60(sp)
20404cac:	5462                	lw	s0,56(sp)
20404cae:	6121                	addi	sp,sp,64
20404cb0:	8082                	ret

20404cb2 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20404cb2:	7179                	addi	sp,sp,-48
20404cb4:	d606                	sw	ra,44(sp)
20404cb6:	d422                	sw	s0,40(sp)
20404cb8:	1800                	addi	s0,sp,48
20404cba:	fca42e23          	sw	a0,-36(s0)
20404cbe:	fcb42c23          	sw	a1,-40(s0)
20404cc2:	fcc42a23          	sw	a2,-44(s0)
20404cc6:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404cca:	fdc42783          	lw	a5,-36(s0)
20404cce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404cd2:	fdc42503          	lw	a0,-36(s0)
20404cd6:	b6bff0ef          	jal	ra,20404840 <__metal_driver_sifive_plic0_num_interrupts>
20404cda:	872a                	mv	a4,a0
20404cdc:	fd842783          	lw	a5,-40(s0)
20404ce0:	00e7c463          	blt	a5,a4,20404ce8 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20404ce4:	57fd                	li	a5,-1
20404ce6:	a051                	j	20404d6a <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20404ce8:	fd442783          	lw	a5,-44(s0)
20404cec:	cf9d                	beqz	a5,20404d2a <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
20404cee:	4609                	li	a2,2
20404cf0:	fd842583          	lw	a1,-40(s0)
20404cf4:	fdc42503          	lw	a0,-36(s0)
20404cf8:	cadff0ef          	jal	ra,204049a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
20404cfc:	fec42703          	lw	a4,-20(s0)
20404d00:	fd842783          	lw	a5,-40(s0)
20404d04:	078a                	slli	a5,a5,0x2
20404d06:	97ba                	add	a5,a5,a4
20404d08:	fd442703          	lw	a4,-44(s0)
20404d0c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
20404d0e:	fec42683          	lw	a3,-20(s0)
20404d12:	fd842703          	lw	a4,-40(s0)
20404d16:	87ba                	mv	a5,a4
20404d18:	0786                	slli	a5,a5,0x1
20404d1a:	97ba                	add	a5,a5,a4
20404d1c:	078e                	slli	a5,a5,0x3
20404d1e:	97b6                	add	a5,a5,a3
20404d20:	fd042703          	lw	a4,-48(s0)
20404d24:	08e7a423          	sw	a4,136(a5)
20404d28:	a081                	j	20404d68 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20404d2a:	4605                	li	a2,1
20404d2c:	fd842583          	lw	a1,-40(s0)
20404d30:	fdc42503          	lw	a0,-36(s0)
20404d34:	c71ff0ef          	jal	ra,204049a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20404d38:	fec42703          	lw	a4,-20(s0)
20404d3c:	fd842783          	lw	a5,-40(s0)
20404d40:	078a                	slli	a5,a5,0x2
20404d42:	97ba                	add	a5,a5,a4
20404d44:	20405737          	lui	a4,0x20405
20404d48:	ac670713          	addi	a4,a4,-1338 # 20404ac6 <__metal_plic0_default_handler>
20404d4c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
20404d4e:	fec42683          	lw	a3,-20(s0)
20404d52:	fd842703          	lw	a4,-40(s0)
20404d56:	87ba                	mv	a5,a4
20404d58:	0786                	slli	a5,a5,0x1
20404d5a:	97ba                	add	a5,a5,a4
20404d5c:	078e                	slli	a5,a5,0x3
20404d5e:	97b6                	add	a5,a5,a3
20404d60:	fd042703          	lw	a4,-48(s0)
20404d64:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20404d68:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
20404d6a:	853e                	mv	a0,a5
20404d6c:	50b2                	lw	ra,44(sp)
20404d6e:	5422                	lw	s0,40(sp)
20404d70:	6145                	addi	sp,sp,48
20404d72:	8082                	ret

20404d74 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20404d74:	7179                	addi	sp,sp,-48
20404d76:	d606                	sw	ra,44(sp)
20404d78:	d422                	sw	s0,40(sp)
20404d7a:	1800                	addi	s0,sp,48
20404d7c:	fca42e23          	sw	a0,-36(s0)
20404d80:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404d84:	fdc42783          	lw	a5,-36(s0)
20404d88:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404d8c:	fdc42503          	lw	a0,-36(s0)
20404d90:	ab1ff0ef          	jal	ra,20404840 <__metal_driver_sifive_plic0_num_interrupts>
20404d94:	872a                	mv	a4,a0
20404d96:	fd842783          	lw	a5,-40(s0)
20404d9a:	00e7c463          	blt	a5,a4,20404da2 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
20404d9e:	57fd                	li	a5,-1
20404da0:	a809                	j	20404db2 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20404da2:	4605                	li	a2,1
20404da4:	fd842583          	lw	a1,-40(s0)
20404da8:	fec42503          	lw	a0,-20(s0)
20404dac:	c8fff0ef          	jal	ra,20404a3a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
20404db0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20404db2:	853e                	mv	a0,a5
20404db4:	50b2                	lw	ra,44(sp)
20404db6:	5422                	lw	s0,40(sp)
20404db8:	6145                	addi	sp,sp,48
20404dba:	8082                	ret

20404dbc <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20404dbc:	7179                	addi	sp,sp,-48
20404dbe:	d606                	sw	ra,44(sp)
20404dc0:	d422                	sw	s0,40(sp)
20404dc2:	1800                	addi	s0,sp,48
20404dc4:	fca42e23          	sw	a0,-36(s0)
20404dc8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404dcc:	fdc42783          	lw	a5,-36(s0)
20404dd0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404dd4:	fdc42503          	lw	a0,-36(s0)
20404dd8:	a69ff0ef          	jal	ra,20404840 <__metal_driver_sifive_plic0_num_interrupts>
20404ddc:	872a                	mv	a4,a0
20404dde:	fd842783          	lw	a5,-40(s0)
20404de2:	00e7c463          	blt	a5,a4,20404dea <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20404de6:	57fd                	li	a5,-1
20404de8:	a809                	j	20404dfa <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20404dea:	4601                	li	a2,0
20404dec:	fd842583          	lw	a1,-40(s0)
20404df0:	fec42503          	lw	a0,-20(s0)
20404df4:	c47ff0ef          	jal	ra,20404a3a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20404df8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20404dfa:	853e                	mv	a0,a5
20404dfc:	50b2                	lw	ra,44(sp)
20404dfe:	5422                	lw	s0,40(sp)
20404e00:	6145                	addi	sp,sp,48
20404e02:	8082                	ret

20404e04 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404e04:	1101                	addi	sp,sp,-32
20404e06:	ce22                	sw	s0,28(sp)
20404e08:	1000                	addi	s0,sp,32
20404e0a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404e0e:	fec42703          	lw	a4,-20(s0)
20404e12:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404e16:	00f71563          	bne	a4,a5,20404e20 <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404e1a:	100127b7          	lui	a5,0x10012
20404e1e:	a011                	j	20404e22 <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
20404e20:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:395
	}
}
20404e22:	853e                	mv	a0,a5
20404e24:	4472                	lw	s0,28(sp)
20404e26:	6105                	addi	sp,sp,32
20404e28:	8082                	ret

20404e2a <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
20404e2a:	1101                	addi	sp,sp,-32
20404e2c:	ce22                	sw	s0,28(sp)
20404e2e:	1000                	addi	s0,sp,32
20404e30:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404e34:	fec42703          	lw	a4,-20(s0)
20404e38:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404e3c:	00f71763          	bne	a4,a5,20404e4a <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404e40:	800017b7          	lui	a5,0x80001
20404e44:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe034>
20404e48:	a011                	j	20404e4c <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
20404e4a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:425
	}
}
20404e4c:	853e                	mv	a0,a5
20404e4e:	4472                	lw	s0,28(sp)
20404e50:	6105                	addi	sp,sp,32
20404e52:	8082                	ret

20404e54 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
20404e54:	1101                	addi	sp,sp,-32
20404e56:	ce22                	sw	s0,28(sp)
20404e58:	1000                	addi	s0,sp,32
20404e5a:	fea42623          	sw	a0,-20(s0)
20404e5e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20404e62:	fec42703          	lw	a4,-20(s0)
20404e66:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404e6a:	00f71763          	bne	a4,a5,20404e78 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:429 (discriminator 1)
20404e6e:	fe842783          	lw	a5,-24(s0)
20404e72:	e399                	bnez	a5,20404e78 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:430
		return 7;
20404e74:	479d                	li	a5,7
20404e76:	a269                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20404e78:	fec42703          	lw	a4,-20(s0)
20404e7c:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404e80:	00f71963          	bne	a4,a5,20404e92 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:432 (discriminator 1)
20404e84:	fe842703          	lw	a4,-24(s0)
20404e88:	4785                	li	a5,1
20404e8a:	00f71463          	bne	a4,a5,20404e92 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:433
		return 8;
20404e8e:	47a1                	li	a5,8
20404e90:	aa85                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404e92:	fec42703          	lw	a4,-20(s0)
20404e96:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404e9a:	00f71963          	bne	a4,a5,20404eac <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:435 (discriminator 1)
20404e9e:	fe842703          	lw	a4,-24(s0)
20404ea2:	4789                	li	a5,2
20404ea4:	00f71463          	bne	a4,a5,20404eac <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:436
		return 9;
20404ea8:	47a5                	li	a5,9
20404eaa:	aa99                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20404eac:	fec42703          	lw	a4,-20(s0)
20404eb0:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404eb4:	00f71963          	bne	a4,a5,20404ec6 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:438 (discriminator 1)
20404eb8:	fe842703          	lw	a4,-24(s0)
20404ebc:	478d                	li	a5,3
20404ebe:	00f71463          	bne	a4,a5,20404ec6 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:439
		return 10;
20404ec2:	47a9                	li	a5,10
20404ec4:	aa35                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404ec6:	fec42703          	lw	a4,-20(s0)
20404eca:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404ece:	00f71963          	bne	a4,a5,20404ee0 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:441 (discriminator 1)
20404ed2:	fe842703          	lw	a4,-24(s0)
20404ed6:	4791                	li	a5,4
20404ed8:	00f71463          	bne	a4,a5,20404ee0 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:442
		return 11;
20404edc:	47ad                	li	a5,11
20404ede:	a20d                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
20404ee0:	fec42703          	lw	a4,-20(s0)
20404ee4:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404ee8:	00f71963          	bne	a4,a5,20404efa <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:444 (discriminator 1)
20404eec:	fe842703          	lw	a4,-24(s0)
20404ef0:	4795                	li	a5,5
20404ef2:	00f71463          	bne	a4,a5,20404efa <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:445
		return 12;
20404ef6:	47b1                	li	a5,12
20404ef8:	a221                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20404efa:	fec42703          	lw	a4,-20(s0)
20404efe:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f02:	00f71963          	bne	a4,a5,20404f14 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:447 (discriminator 1)
20404f06:	fe842703          	lw	a4,-24(s0)
20404f0a:	4799                	li	a5,6
20404f0c:	00f71463          	bne	a4,a5,20404f14 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:448
		return 13;
20404f10:	47b5                	li	a5,13
20404f12:	a0fd                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404f14:	fec42703          	lw	a4,-20(s0)
20404f18:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f1c:	00f71963          	bne	a4,a5,20404f2e <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:450 (discriminator 1)
20404f20:	fe842703          	lw	a4,-24(s0)
20404f24:	479d                	li	a5,7
20404f26:	00f71463          	bne	a4,a5,20404f2e <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:451
		return 14;
20404f2a:	47b9                	li	a5,14
20404f2c:	a8d1                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
20404f2e:	fec42703          	lw	a4,-20(s0)
20404f32:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f36:	00f71963          	bne	a4,a5,20404f48 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:453 (discriminator 1)
20404f3a:	fe842703          	lw	a4,-24(s0)
20404f3e:	47a1                	li	a5,8
20404f40:	00f71463          	bne	a4,a5,20404f48 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:454
		return 15;
20404f44:	47bd                	li	a5,15
20404f46:	a86d                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20404f48:	fec42703          	lw	a4,-20(s0)
20404f4c:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f50:	00f71963          	bne	a4,a5,20404f62 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:456 (discriminator 1)
20404f54:	fe842703          	lw	a4,-24(s0)
20404f58:	47a5                	li	a5,9
20404f5a:	00f71463          	bne	a4,a5,20404f62 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:457
		return 16;
20404f5e:	47c1                	li	a5,16
20404f60:	a045                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20404f62:	fec42703          	lw	a4,-20(s0)
20404f66:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f6a:	00f71963          	bne	a4,a5,20404f7c <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:459 (discriminator 1)
20404f6e:	fe842703          	lw	a4,-24(s0)
20404f72:	47a9                	li	a5,10
20404f74:	00f71463          	bne	a4,a5,20404f7c <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:460
		return 17;
20404f78:	47c5                	li	a5,17
20404f7a:	a059                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
20404f7c:	fec42703          	lw	a4,-20(s0)
20404f80:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f84:	00f71963          	bne	a4,a5,20404f96 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:462 (discriminator 1)
20404f88:	fe842703          	lw	a4,-24(s0)
20404f8c:	47ad                	li	a5,11
20404f8e:	00f71463          	bne	a4,a5,20404f96 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:463
		return 18;
20404f92:	47c9                	li	a5,18
20404f94:	a0b5                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404f96:	fec42703          	lw	a4,-20(s0)
20404f9a:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f9e:	00f71963          	bne	a4,a5,20404fb0 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:465 (discriminator 1)
20404fa2:	fe842703          	lw	a4,-24(s0)
20404fa6:	47b1                	li	a5,12
20404fa8:	00f71463          	bne	a4,a5,20404fb0 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:466
		return 19;
20404fac:	47cd                	li	a5,19
20404fae:	a889                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
20404fb0:	fec42703          	lw	a4,-20(s0)
20404fb4:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404fb8:	00f71963          	bne	a4,a5,20404fca <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:468 (discriminator 1)
20404fbc:	fe842703          	lw	a4,-24(s0)
20404fc0:	47b5                	li	a5,13
20404fc2:	00f71463          	bne	a4,a5,20404fca <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:469
		return 20;
20404fc6:	47d1                	li	a5,20
20404fc8:	a825                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20404fca:	fec42703          	lw	a4,-20(s0)
20404fce:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404fd2:	00f71963          	bne	a4,a5,20404fe4 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:471 (discriminator 1)
20404fd6:	fe842703          	lw	a4,-24(s0)
20404fda:	47b9                	li	a5,14
20404fdc:	00f71463          	bne	a4,a5,20404fe4 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:472
		return 21;
20404fe0:	47d5                	li	a5,21
20404fe2:	a839                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404fe4:	fec42703          	lw	a4,-20(s0)
20404fe8:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404fec:	00f71963          	bne	a4,a5,20404ffe <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:474 (discriminator 1)
20404ff0:	fe842703          	lw	a4,-24(s0)
20404ff4:	47bd                	li	a5,15
20404ff6:	00f71463          	bne	a4,a5,20404ffe <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:475
		return 22;
20404ffa:	47d9                	li	a5,22
20404ffc:	a011                	j	20405000 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
20404ffe:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:480
	}
}
20405000:	853e                	mv	a0,a5
20405002:	4472                	lw	s0,28(sp)
20405004:	6105                	addi	sp,sp,32
20405006:	8082                	ret

20405008 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20405008:	7179                	addi	sp,sp,-48
2040500a:	d606                	sw	ra,44(sp)
2040500c:	d422                	sw	s0,40(sp)
2040500e:	1800                	addi	s0,sp,48
20405010:	fca42e23          	sw	a0,-36(s0)
20405014:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405018:	fdc42503          	lw	a0,-36(s0)
2040501c:	de9ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
20405020:	87aa                	mv	a5,a0
20405022:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20405026:	fec42783          	lw	a5,-20(s0)
2040502a:	0791                	addi	a5,a5,4
2040502c:	4398                	lw	a4,0(a5)
2040502e:	fd842783          	lw	a5,-40(s0)
20405032:	fec42683          	lw	a3,-20(s0)
20405036:	0691                	addi	a3,a3,4
20405038:	8fd9                	or	a5,a5,a4
2040503a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
2040503c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
2040503e:	853e                	mv	a0,a5
20405040:	50b2                	lw	ra,44(sp)
20405042:	5422                	lw	s0,40(sp)
20405044:	6145                	addi	sp,sp,48
20405046:	8082                	ret

20405048 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20405048:	7179                	addi	sp,sp,-48
2040504a:	d606                	sw	ra,44(sp)
2040504c:	d422                	sw	s0,40(sp)
2040504e:	1800                	addi	s0,sp,48
20405050:	fca42e23          	sw	a0,-36(s0)
20405054:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405058:	fdc42503          	lw	a0,-36(s0)
2040505c:	da9ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
20405060:	87aa                	mv	a5,a0
20405062:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
20405066:	fec42783          	lw	a5,-20(s0)
2040506a:	0791                	addi	a5,a5,4
2040506c:	439c                	lw	a5,0(a5)
2040506e:	fd842703          	lw	a4,-40(s0)
20405072:	fff74713          	not	a4,a4
20405076:	86ba                	mv	a3,a4
20405078:	fec42703          	lw	a4,-20(s0)
2040507c:	0711                	addi	a4,a4,4
2040507e:	8ff5                	and	a5,a5,a3
20405080:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
20405082:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
20405084:	853e                	mv	a0,a5
20405086:	50b2                	lw	ra,44(sp)
20405088:	5422                	lw	s0,40(sp)
2040508a:	6145                	addi	sp,sp,48
2040508c:	8082                	ret

2040508e <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
2040508e:	7179                	addi	sp,sp,-48
20405090:	d606                	sw	ra,44(sp)
20405092:	d422                	sw	s0,40(sp)
20405094:	1800                	addi	s0,sp,48
20405096:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040509a:	fdc42503          	lw	a0,-36(s0)
2040509e:	d67ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
204050a2:	87aa                	mv	a5,a0
204050a4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
204050a8:	fec42783          	lw	a5,-20(s0)
204050ac:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
204050ae:	853e                	mv	a0,a5
204050b0:	50b2                	lw	ra,44(sp)
204050b2:	5422                	lw	s0,40(sp)
204050b4:	6145                	addi	sp,sp,48
204050b6:	8082                	ret

204050b8 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
204050b8:	7179                	addi	sp,sp,-48
204050ba:	d606                	sw	ra,44(sp)
204050bc:	d422                	sw	s0,40(sp)
204050be:	1800                	addi	s0,sp,48
204050c0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204050c4:	fdc42503          	lw	a0,-36(s0)
204050c8:	d3dff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
204050cc:	87aa                	mv	a5,a0
204050ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
204050d2:	fec42783          	lw	a5,-20(s0)
204050d6:	07b1                	addi	a5,a5,12
204050d8:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
204050da:	853e                	mv	a0,a5
204050dc:	50b2                	lw	ra,44(sp)
204050de:	5422                	lw	s0,40(sp)
204050e0:	6145                	addi	sp,sp,48
204050e2:	8082                	ret

204050e4 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
204050e4:	7179                	addi	sp,sp,-48
204050e6:	d606                	sw	ra,44(sp)
204050e8:	d422                	sw	s0,40(sp)
204050ea:	1800                	addi	s0,sp,48
204050ec:	fca42e23          	sw	a0,-36(s0)
204050f0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204050f4:	fdc42503          	lw	a0,-36(s0)
204050f8:	d0dff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
204050fc:	87aa                	mv	a5,a0
204050fe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20405102:	fec42783          	lw	a5,-20(s0)
20405106:	07a1                	addi	a5,a5,8
20405108:	439c                	lw	a5,0(a5)
2040510a:	fd842703          	lw	a4,-40(s0)
2040510e:	fff74713          	not	a4,a4
20405112:	86ba                	mv	a3,a4
20405114:	fec42703          	lw	a4,-20(s0)
20405118:	0721                	addi	a4,a4,8
2040511a:	8ff5                	and	a5,a5,a3
2040511c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
2040511e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20405120:	853e                	mv	a0,a5
20405122:	50b2                	lw	ra,44(sp)
20405124:	5422                	lw	s0,40(sp)
20405126:	6145                	addi	sp,sp,48
20405128:	8082                	ret

2040512a <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
2040512a:	7179                	addi	sp,sp,-48
2040512c:	d606                	sw	ra,44(sp)
2040512e:	d422                	sw	s0,40(sp)
20405130:	1800                	addi	s0,sp,48
20405132:	fca42e23          	sw	a0,-36(s0)
20405136:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040513a:	fdc42503          	lw	a0,-36(s0)
2040513e:	cc7ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
20405142:	87aa                	mv	a5,a0
20405144:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
20405148:	fec42783          	lw	a5,-20(s0)
2040514c:	07a1                	addi	a5,a5,8
2040514e:	4398                	lw	a4,0(a5)
20405150:	fd842783          	lw	a5,-40(s0)
20405154:	fec42683          	lw	a3,-20(s0)
20405158:	06a1                	addi	a3,a3,8
2040515a:	8fd9                	or	a5,a5,a4
2040515c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
2040515e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20405160:	853e                	mv	a0,a5
20405162:	50b2                	lw	ra,44(sp)
20405164:	5422                	lw	s0,40(sp)
20405166:	6145                	addi	sp,sp,48
20405168:	8082                	ret

2040516a <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
2040516a:	7179                	addi	sp,sp,-48
2040516c:	d606                	sw	ra,44(sp)
2040516e:	d422                	sw	s0,40(sp)
20405170:	1800                	addi	s0,sp,48
20405172:	fca42e23          	sw	a0,-36(s0)
20405176:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040517a:	fdc42503          	lw	a0,-36(s0)
2040517e:	c87ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
20405182:	87aa                	mv	a5,a0
20405184:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20405188:	fec42783          	lw	a5,-20(s0)
2040518c:	07b1                	addi	a5,a5,12
2040518e:	4398                	lw	a4,0(a5)
20405190:	fd842783          	lw	a5,-40(s0)
20405194:	fec42683          	lw	a3,-20(s0)
20405198:	06b1                	addi	a3,a3,12
2040519a:	8fd9                	or	a5,a5,a4
2040519c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
2040519e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
204051a0:	853e                	mv	a0,a5
204051a2:	50b2                	lw	ra,44(sp)
204051a4:	5422                	lw	s0,40(sp)
204051a6:	6145                	addi	sp,sp,48
204051a8:	8082                	ret

204051aa <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
204051aa:	7179                	addi	sp,sp,-48
204051ac:	d606                	sw	ra,44(sp)
204051ae:	d422                	sw	s0,40(sp)
204051b0:	1800                	addi	s0,sp,48
204051b2:	fca42e23          	sw	a0,-36(s0)
204051b6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204051ba:	fdc42503          	lw	a0,-36(s0)
204051be:	c47ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
204051c2:	87aa                	mv	a5,a0
204051c4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
204051c8:	fec42783          	lw	a5,-20(s0)
204051cc:	07b1                	addi	a5,a5,12
204051ce:	439c                	lw	a5,0(a5)
204051d0:	fd842703          	lw	a4,-40(s0)
204051d4:	fff74713          	not	a4,a4
204051d8:	86ba                	mv	a3,a4
204051da:	fec42703          	lw	a4,-20(s0)
204051de:	0731                	addi	a4,a4,12
204051e0:	8ff5                	and	a5,a5,a3
204051e2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
204051e4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
204051e6:	853e                	mv	a0,a5
204051e8:	50b2                	lw	ra,44(sp)
204051ea:	5422                	lw	s0,40(sp)
204051ec:	6145                	addi	sp,sp,48
204051ee:	8082                	ret

204051f0 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
204051f0:	7179                	addi	sp,sp,-48
204051f2:	d606                	sw	ra,44(sp)
204051f4:	d422                	sw	s0,40(sp)
204051f6:	1800                	addi	s0,sp,48
204051f8:	fca42e23          	sw	a0,-36(s0)
204051fc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405200:	fdc42503          	lw	a0,-36(s0)
20405204:	c01ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
20405208:	87aa                	mv	a5,a0
2040520a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
2040520e:	fec42783          	lw	a5,-20(s0)
20405212:	07b1                	addi	a5,a5,12
20405214:	4398                	lw	a4,0(a5)
20405216:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
2040521a:	fec42683          	lw	a3,-20(s0)
2040521e:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20405220:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20405222:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20405224:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
20405226:	853e                	mv	a0,a5
20405228:	50b2                	lw	ra,44(sp)
2040522a:	5422                	lw	s0,40(sp)
2040522c:	6145                	addi	sp,sp,48
2040522e:	8082                	ret

20405230 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20405230:	7179                	addi	sp,sp,-48
20405232:	d606                	sw	ra,44(sp)
20405234:	d422                	sw	s0,40(sp)
20405236:	1800                	addi	s0,sp,48
20405238:	fca42e23          	sw	a0,-36(s0)
2040523c:	fcb42c23          	sw	a1,-40(s0)
20405240:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405244:	fdc42503          	lw	a0,-36(s0)
20405248:	bbdff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
2040524c:	87aa                	mv	a5,a0
2040524e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20405252:	fec42783          	lw	a5,-20(s0)
20405256:	03c78793          	addi	a5,a5,60
2040525a:	439c                	lw	a5,0(a5)
2040525c:	fd842703          	lw	a4,-40(s0)
20405260:	fff74713          	not	a4,a4
20405264:	86ba                	mv	a3,a4
20405266:	fec42703          	lw	a4,-20(s0)
2040526a:	03c70713          	addi	a4,a4,60
2040526e:	8ff5                	and	a5,a5,a3
20405270:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
20405272:	fec42783          	lw	a5,-20(s0)
20405276:	03878793          	addi	a5,a5,56
2040527a:	4398                	lw	a4,0(a5)
2040527c:	fd442783          	lw	a5,-44(s0)
20405280:	fec42683          	lw	a3,-20(s0)
20405284:	03868693          	addi	a3,a3,56
20405288:	8fd9                	or	a5,a5,a4
2040528a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
2040528c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
2040528e:	853e                	mv	a0,a5
20405290:	50b2                	lw	ra,44(sp)
20405292:	5422                	lw	s0,40(sp)
20405294:	6145                	addi	sp,sp,48
20405296:	8082                	ret

20405298 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20405298:	7179                	addi	sp,sp,-48
2040529a:	d606                	sw	ra,44(sp)
2040529c:	d422                	sw	s0,40(sp)
2040529e:	1800                	addi	s0,sp,48
204052a0:	fca42e23          	sw	a0,-36(s0)
204052a4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204052a8:	fdc42503          	lw	a0,-36(s0)
204052ac:	b59ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
204052b0:	87aa                	mv	a5,a0
204052b2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
204052b6:	fec42783          	lw	a5,-20(s0)
204052ba:	03878793          	addi	a5,a5,56
204052be:	439c                	lw	a5,0(a5)
204052c0:	fd842703          	lw	a4,-40(s0)
204052c4:	fff74713          	not	a4,a4
204052c8:	86ba                	mv	a3,a4
204052ca:	fec42703          	lw	a4,-20(s0)
204052ce:	03870713          	addi	a4,a4,56
204052d2:	8ff5                	and	a5,a5,a3
204052d4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
204052d6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
204052d8:	853e                	mv	a0,a5
204052da:	50b2                	lw	ra,44(sp)
204052dc:	5422                	lw	s0,40(sp)
204052de:	6145                	addi	sp,sp,48
204052e0:	8082                	ret

204052e2 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204052e2:	7179                	addi	sp,sp,-48
204052e4:	d606                	sw	ra,44(sp)
204052e6:	d422                	sw	s0,40(sp)
204052e8:	1800                	addi	s0,sp,48
204052ea:	fca42e23          	sw	a0,-36(s0)
204052ee:	fcb42c23          	sw	a1,-40(s0)
204052f2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204052f6:	fdc42503          	lw	a0,-36(s0)
204052fa:	b0bff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
204052fe:	87aa                	mv	a5,a0
20405300:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20405304:	fd442703          	lw	a4,-44(s0)
20405308:	479d                	li	a5,7
2040530a:	1ce7e963          	bltu	a5,a4,204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
2040530e:	fd442783          	lw	a5,-44(s0)
20405312:	00279713          	slli	a4,a5,0x2
20405316:	204067b7          	lui	a5,0x20406
2040531a:	24478793          	addi	a5,a5,580 # 20406244 <__metal_driver_vtable_riscv_plic0+0x4c>
2040531e:	97ba                	add	a5,a5,a4
20405320:	439c                	lw	a5,0(a5)
20405322:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20405324:	fec42783          	lw	a5,-20(s0)
20405328:	07e1                	addi	a5,a5,24
2040532a:	439c                	lw	a5,0(a5)
2040532c:	fd842703          	lw	a4,-40(s0)
20405330:	fff74713          	not	a4,a4
20405334:	86ba                	mv	a3,a4
20405336:	fec42703          	lw	a4,-20(s0)
2040533a:	0761                	addi	a4,a4,24
2040533c:	8ff5                	and	a5,a5,a3
2040533e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20405340:	fec42783          	lw	a5,-20(s0)
20405344:	02078793          	addi	a5,a5,32
20405348:	439c                	lw	a5,0(a5)
2040534a:	fd842703          	lw	a4,-40(s0)
2040534e:	fff74713          	not	a4,a4
20405352:	86ba                	mv	a3,a4
20405354:	fec42703          	lw	a4,-20(s0)
20405358:	02070713          	addi	a4,a4,32
2040535c:	8ff5                	and	a5,a5,a3
2040535e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20405360:	fec42783          	lw	a5,-20(s0)
20405364:	02878793          	addi	a5,a5,40
20405368:	439c                	lw	a5,0(a5)
2040536a:	fd842703          	lw	a4,-40(s0)
2040536e:	fff74713          	not	a4,a4
20405372:	86ba                	mv	a3,a4
20405374:	fec42703          	lw	a4,-20(s0)
20405378:	02870713          	addi	a4,a4,40
2040537c:	8ff5                	and	a5,a5,a3
2040537e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20405380:	fec42783          	lw	a5,-20(s0)
20405384:	03078793          	addi	a5,a5,48
20405388:	439c                	lw	a5,0(a5)
2040538a:	fd842703          	lw	a4,-40(s0)
2040538e:	fff74713          	not	a4,a4
20405392:	86ba                	mv	a3,a4
20405394:	fec42703          	lw	a4,-20(s0)
20405398:	03070713          	addi	a4,a4,48
2040539c:	8ff5                	and	a5,a5,a3
2040539e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
204053a0:	aa35                	j	204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204053a2:	fec42783          	lw	a5,-20(s0)
204053a6:	07e1                	addi	a5,a5,24
204053a8:	4398                	lw	a4,0(a5)
204053aa:	fd842783          	lw	a5,-40(s0)
204053ae:	fec42683          	lw	a3,-20(s0)
204053b2:	06e1                	addi	a3,a3,24
204053b4:	8fd9                	or	a5,a5,a4
204053b6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
204053b8:	a215                	j	204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204053ba:	fec42783          	lw	a5,-20(s0)
204053be:	02078793          	addi	a5,a5,32
204053c2:	4398                	lw	a4,0(a5)
204053c4:	fd842783          	lw	a5,-40(s0)
204053c8:	fec42683          	lw	a3,-20(s0)
204053cc:	02068693          	addi	a3,a3,32
204053d0:	8fd9                	or	a5,a5,a4
204053d2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
204053d4:	a221                	j	204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204053d6:	fec42783          	lw	a5,-20(s0)
204053da:	07e1                	addi	a5,a5,24
204053dc:	4398                	lw	a4,0(a5)
204053de:	fd842783          	lw	a5,-40(s0)
204053e2:	fec42683          	lw	a3,-20(s0)
204053e6:	06e1                	addi	a3,a3,24
204053e8:	8fd9                	or	a5,a5,a4
204053ea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204053ec:	fec42783          	lw	a5,-20(s0)
204053f0:	02078793          	addi	a5,a5,32
204053f4:	4398                	lw	a4,0(a5)
204053f6:	fd842783          	lw	a5,-40(s0)
204053fa:	fec42683          	lw	a3,-20(s0)
204053fe:	02068693          	addi	a3,a3,32
20405402:	8fd9                	or	a5,a5,a4
20405404:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20405406:	a8d9                	j	204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20405408:	fec42783          	lw	a5,-20(s0)
2040540c:	02878793          	addi	a5,a5,40
20405410:	4398                	lw	a4,0(a5)
20405412:	fd842783          	lw	a5,-40(s0)
20405416:	fec42683          	lw	a3,-20(s0)
2040541a:	02868693          	addi	a3,a3,40
2040541e:	8fd9                	or	a5,a5,a4
20405420:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20405422:	a86d                	j	204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20405424:	fec42783          	lw	a5,-20(s0)
20405428:	03078793          	addi	a5,a5,48
2040542c:	4398                	lw	a4,0(a5)
2040542e:	fd842783          	lw	a5,-40(s0)
20405432:	fec42683          	lw	a3,-20(s0)
20405436:	03068693          	addi	a3,a3,48
2040543a:	8fd9                	or	a5,a5,a4
2040543c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
2040543e:	a879                	j	204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20405440:	fec42783          	lw	a5,-20(s0)
20405444:	02878793          	addi	a5,a5,40
20405448:	4398                	lw	a4,0(a5)
2040544a:	fd842783          	lw	a5,-40(s0)
2040544e:	fec42683          	lw	a3,-20(s0)
20405452:	02868693          	addi	a3,a3,40
20405456:	8fd9                	or	a5,a5,a4
20405458:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
2040545a:	fec42783          	lw	a5,-20(s0)
2040545e:	03078793          	addi	a5,a5,48
20405462:	4398                	lw	a4,0(a5)
20405464:	fd842783          	lw	a5,-40(s0)
20405468:	fec42683          	lw	a3,-20(s0)
2040546c:	03068693          	addi	a3,a3,48
20405470:	8fd9                	or	a5,a5,a4
20405472:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20405474:	a0a5                	j	204054dc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20405476:	fec42783          	lw	a5,-20(s0)
2040547a:	07e1                	addi	a5,a5,24
2040547c:	4398                	lw	a4,0(a5)
2040547e:	fd842783          	lw	a5,-40(s0)
20405482:	fec42683          	lw	a3,-20(s0)
20405486:	06e1                	addi	a3,a3,24
20405488:	8fd9                	or	a5,a5,a4
2040548a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
2040548c:	fec42783          	lw	a5,-20(s0)
20405490:	02078793          	addi	a5,a5,32
20405494:	4398                	lw	a4,0(a5)
20405496:	fd842783          	lw	a5,-40(s0)
2040549a:	fec42683          	lw	a3,-20(s0)
2040549e:	02068693          	addi	a3,a3,32
204054a2:	8fd9                	or	a5,a5,a4
204054a4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204054a6:	fec42783          	lw	a5,-20(s0)
204054aa:	02878793          	addi	a5,a5,40
204054ae:	4398                	lw	a4,0(a5)
204054b0:	fd842783          	lw	a5,-40(s0)
204054b4:	fec42683          	lw	a3,-20(s0)
204054b8:	02868693          	addi	a3,a3,40
204054bc:	8fd9                	or	a5,a5,a4
204054be:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204054c0:	fec42783          	lw	a5,-20(s0)
204054c4:	03078793          	addi	a5,a5,48
204054c8:	4398                	lw	a4,0(a5)
204054ca:	fd842783          	lw	a5,-40(s0)
204054ce:	fec42683          	lw	a3,-20(s0)
204054d2:	03068693          	addi	a3,a3,48
204054d6:	8fd9                	or	a5,a5,a4
204054d8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
204054da:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
204054dc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
204054de:	853e                	mv	a0,a5
204054e0:	50b2                	lw	ra,44(sp)
204054e2:	5422                	lw	s0,40(sp)
204054e4:	6145                	addi	sp,sp,48
204054e6:	8082                	ret

204054e8 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204054e8:	7179                	addi	sp,sp,-48
204054ea:	d606                	sw	ra,44(sp)
204054ec:	d422                	sw	s0,40(sp)
204054ee:	1800                	addi	s0,sp,48
204054f0:	fca42e23          	sw	a0,-36(s0)
204054f4:	fcb42c23          	sw	a1,-40(s0)
204054f8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204054fc:	fdc42503          	lw	a0,-36(s0)
20405500:	905ff0ef          	jal	ra,20404e04 <__metal_driver_sifive_gpio0_base>
20405504:	87aa                	mv	a5,a0
20405506:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
2040550a:	fd442703          	lw	a4,-44(s0)
2040550e:	479d                	li	a5,7
20405510:	14e7ea63          	bltu	a5,a4,20405664 <__metal_driver_sifive_gpio0_clear_int+0x17c>
20405514:	fd442783          	lw	a5,-44(s0)
20405518:	00279713          	slli	a4,a5,0x2
2040551c:	204067b7          	lui	a5,0x20406
20405520:	26478793          	addi	a5,a5,612 # 20406264 <__metal_driver_vtable_riscv_plic0+0x6c>
20405524:	97ba                	add	a5,a5,a4
20405526:	439c                	lw	a5,0(a5)
20405528:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
2040552a:	fec42783          	lw	a5,-20(s0)
2040552e:	07f1                	addi	a5,a5,28
20405530:	4398                	lw	a4,0(a5)
20405532:	fd842783          	lw	a5,-40(s0)
20405536:	fec42683          	lw	a3,-20(s0)
2040553a:	06f1                	addi	a3,a3,28
2040553c:	8fd9                	or	a5,a5,a4
2040553e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20405540:	a215                	j	20405664 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20405542:	fec42783          	lw	a5,-20(s0)
20405546:	02478793          	addi	a5,a5,36
2040554a:	4398                	lw	a4,0(a5)
2040554c:	fd842783          	lw	a5,-40(s0)
20405550:	fec42683          	lw	a3,-20(s0)
20405554:	02468693          	addi	a3,a3,36
20405558:	8fd9                	or	a5,a5,a4
2040555a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
2040555c:	a221                	j	20405664 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
2040555e:	fec42783          	lw	a5,-20(s0)
20405562:	07f1                	addi	a5,a5,28
20405564:	4398                	lw	a4,0(a5)
20405566:	fd842783          	lw	a5,-40(s0)
2040556a:	fec42683          	lw	a3,-20(s0)
2040556e:	06f1                	addi	a3,a3,28
20405570:	8fd9                	or	a5,a5,a4
20405572:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20405574:	fec42783          	lw	a5,-20(s0)
20405578:	02478793          	addi	a5,a5,36
2040557c:	4398                	lw	a4,0(a5)
2040557e:	fd842783          	lw	a5,-40(s0)
20405582:	fec42683          	lw	a3,-20(s0)
20405586:	02468693          	addi	a3,a3,36
2040558a:	8fd9                	or	a5,a5,a4
2040558c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
2040558e:	a8d9                	j	20405664 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20405590:	fec42783          	lw	a5,-20(s0)
20405594:	02c78793          	addi	a5,a5,44
20405598:	4398                	lw	a4,0(a5)
2040559a:	fd842783          	lw	a5,-40(s0)
2040559e:	fec42683          	lw	a3,-20(s0)
204055a2:	02c68693          	addi	a3,a3,44
204055a6:	8fd9                	or	a5,a5,a4
204055a8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
204055aa:	a86d                	j	20405664 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204055ac:	fec42783          	lw	a5,-20(s0)
204055b0:	03478793          	addi	a5,a5,52
204055b4:	4398                	lw	a4,0(a5)
204055b6:	fd842783          	lw	a5,-40(s0)
204055ba:	fec42683          	lw	a3,-20(s0)
204055be:	03468693          	addi	a3,a3,52
204055c2:	8fd9                	or	a5,a5,a4
204055c4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
204055c6:	a879                	j	20405664 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
204055c8:	fec42783          	lw	a5,-20(s0)
204055cc:	02c78793          	addi	a5,a5,44
204055d0:	4398                	lw	a4,0(a5)
204055d2:	fd842783          	lw	a5,-40(s0)
204055d6:	fec42683          	lw	a3,-20(s0)
204055da:	02c68693          	addi	a3,a3,44
204055de:	8fd9                	or	a5,a5,a4
204055e0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204055e2:	fec42783          	lw	a5,-20(s0)
204055e6:	03478793          	addi	a5,a5,52
204055ea:	4398                	lw	a4,0(a5)
204055ec:	fd842783          	lw	a5,-40(s0)
204055f0:	fec42683          	lw	a3,-20(s0)
204055f4:	03468693          	addi	a3,a3,52
204055f8:	8fd9                	or	a5,a5,a4
204055fa:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
204055fc:	a0a5                	j	20405664 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204055fe:	fec42783          	lw	a5,-20(s0)
20405602:	07f1                	addi	a5,a5,28
20405604:	4398                	lw	a4,0(a5)
20405606:	fd842783          	lw	a5,-40(s0)
2040560a:	fec42683          	lw	a3,-20(s0)
2040560e:	06f1                	addi	a3,a3,28
20405610:	8fd9                	or	a5,a5,a4
20405612:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20405614:	fec42783          	lw	a5,-20(s0)
20405618:	02478793          	addi	a5,a5,36
2040561c:	4398                	lw	a4,0(a5)
2040561e:	fd842783          	lw	a5,-40(s0)
20405622:	fec42683          	lw	a3,-20(s0)
20405626:	02468693          	addi	a3,a3,36
2040562a:	8fd9                	or	a5,a5,a4
2040562c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
2040562e:	fec42783          	lw	a5,-20(s0)
20405632:	02c78793          	addi	a5,a5,44
20405636:	4398                	lw	a4,0(a5)
20405638:	fd842783          	lw	a5,-40(s0)
2040563c:	fec42683          	lw	a3,-20(s0)
20405640:	02c68693          	addi	a3,a3,44
20405644:	8fd9                	or	a5,a5,a4
20405646:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20405648:	fec42783          	lw	a5,-20(s0)
2040564c:	03478793          	addi	a5,a5,52
20405650:	4398                	lw	a4,0(a5)
20405652:	fd842783          	lw	a5,-40(s0)
20405656:	fec42683          	lw	a3,-20(s0)
2040565a:	03468693          	addi	a3,a3,52
2040565e:	8fd9                	or	a5,a5,a4
20405660:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20405662:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20405664:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20405666:	853e                	mv	a0,a5
20405668:	50b2                	lw	ra,44(sp)
2040566a:	5422                	lw	s0,40(sp)
2040566c:	6145                	addi	sp,sp,48
2040566e:	8082                	ret

20405670 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20405670:	1101                	addi	sp,sp,-32
20405672:	ce06                	sw	ra,28(sp)
20405674:	cc22                	sw	s0,24(sp)
20405676:	1000                	addi	s0,sp,32
20405678:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
2040567c:	fec42503          	lw	a0,-20(s0)
20405680:	faaff0ef          	jal	ra,20404e2a <__metal_driver_sifive_gpio0_interrupt_parent>
20405684:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20405686:	853e                	mv	a0,a5
20405688:	40f2                	lw	ra,28(sp)
2040568a:	4462                	lw	s0,24(sp)
2040568c:	6105                	addi	sp,sp,32
2040568e:	8082                	ret

20405690 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20405690:	7179                	addi	sp,sp,-48
20405692:	d606                	sw	ra,44(sp)
20405694:	d422                	sw	s0,40(sp)
20405696:	1800                	addi	s0,sp,48
20405698:	fca42e23          	sw	a0,-36(s0)
2040569c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
204056a0:	fd842583          	lw	a1,-40(s0)
204056a4:	fdc42503          	lw	a0,-36(s0)
204056a8:	facff0ef          	jal	ra,20404e54 <__metal_driver_sifive_gpio0_interrupt_lines>
204056ac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
204056b0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
204056b4:	853e                	mv	a0,a5
204056b6:	50b2                	lw	ra,44(sp)
204056b8:	5422                	lw	s0,40(sp)
204056ba:	6145                	addi	sp,sp,48
204056bc:	8082                	ret

204056be <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
204056be:	1101                	addi	sp,sp,-32
204056c0:	ce22                	sw	s0,28(sp)
204056c2:	1000                	addi	s0,sp,32
204056c4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204056c8:	fec42703          	lw	a4,-20(s0)
204056cc:	800017b7          	lui	a5,0x80001
204056d0:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
204056d4:	00f71563          	bne	a4,a5,204056de <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
204056d8:	100137b7          	lui	a5,0x10013
204056dc:	a011                	j	204056e0 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
204056de:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:571
	}
}
204056e0:	853e                	mv	a0,a5
204056e2:	4472                	lw	s0,28(sp)
204056e4:	6105                	addi	sp,sp,32
204056e6:	8082                	ret

204056e8 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
204056e8:	1101                	addi	sp,sp,-32
204056ea:	ce22                	sw	s0,28(sp)
204056ec:	1000                	addi	s0,sp,32
204056ee:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204056f2:	fec42703          	lw	a4,-20(s0)
204056f6:	800017b7          	lui	a5,0x80001
204056fa:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
204056fe:	00f71763          	bne	a4,a5,2040570c <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20405702:	800017b7          	lui	a5,0x80001
20405706:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe034>
2040570a:	a011                	j	2040570e <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
2040570c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:601
	}
}
2040570e:	853e                	mv	a0,a5
20405710:	4472                	lw	s0,28(sp)
20405712:	6105                	addi	sp,sp,32
20405714:	8082                	ret

20405716 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20405716:	1101                	addi	sp,sp,-32
20405718:	ce22                	sw	s0,28(sp)
2040571a:	1000                	addi	s0,sp,32
2040571c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405720:	fec42703          	lw	a4,-20(s0)
20405724:	800017b7          	lui	a5,0x80001
20405728:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
2040572c:	00f71463          	bne	a4,a5,20405734 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:606
		return 5;
20405730:	4795                	li	a5,5
20405732:	a011                	j	20405736 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20405734:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:611
	}
}
20405736:	853e                	mv	a0,a5
20405738:	4472                	lw	s0,28(sp)
2040573a:	6105                	addi	sp,sp,32
2040573c:	8082                	ret

2040573e <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
2040573e:	1101                	addi	sp,sp,-32
20405740:	ce22                	sw	s0,28(sp)
20405742:	1000                	addi	s0,sp,32
20405744:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405748:	fec42703          	lw	a4,-20(s0)
2040574c:	800017b7          	lui	a5,0x80001
20405750:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
20405754:	00f71763          	bne	a4,a5,20405762 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20405758:	800017b7          	lui	a5,0x80001
2040575c:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffdc6c>
20405760:	a011                	j	20405764 <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
20405762:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:621
	}
}
20405764:	853e                	mv	a0,a5
20405766:	4472                	lw	s0,28(sp)
20405768:	6105                	addi	sp,sp,32
2040576a:	8082                	ret

2040576c <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
2040576c:	1101                	addi	sp,sp,-32
2040576e:	ce22                	sw	s0,28(sp)
20405770:	1000                	addi	s0,sp,32
20405772:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405776:	fec42703          	lw	a4,-20(s0)
2040577a:	800017b7          	lui	a5,0x80001
2040577e:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
20405782:	00f71563          	bne	a4,a5,2040578c <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20405786:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040578a:	a011                	j	2040578e <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
2040578c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:631
	}
}
2040578e:	853e                	mv	a0,a5
20405790:	4472                	lw	s0,28(sp)
20405792:	6105                	addi	sp,sp,32
20405794:	8082                	ret

20405796 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20405796:	1101                	addi	sp,sp,-32
20405798:	ce22                	sw	s0,28(sp)
2040579a:	1000                	addi	s0,sp,32
2040579c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204057a0:	fec42703          	lw	a4,-20(s0)
204057a4:	800017b7          	lui	a5,0x80001
204057a8:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
204057ac:	00f71563          	bne	a4,a5,204057b6 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:636
		return 196608;
204057b0:	000307b7          	lui	a5,0x30
204057b4:	a011                	j	204057b8 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
204057b6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:641
	}
}
204057b8:	853e                	mv	a0,a5
204057ba:	4472                	lw	s0,28(sp)
204057bc:	6105                	addi	sp,sp,32
204057be:	8082                	ret

204057c0 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
204057c0:	1101                	addi	sp,sp,-32
204057c2:	ce22                	sw	s0,28(sp)
204057c4:	1000                	addi	s0,sp,32
204057c6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204057ca:	fec42703          	lw	a4,-20(s0)
204057ce:	800017b7          	lui	a5,0x80001
204057d2:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
204057d6:	00f71563          	bne	a4,a5,204057e0 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:646
		return 196608;
204057da:	000307b7          	lui	a5,0x30
204057de:	a011                	j	204057e2 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
204057e0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:651
	}
}
204057e2:	853e                	mv	a0,a5
204057e4:	4472                	lw	s0,28(sp)
204057e6:	6105                	addi	sp,sp,32
204057e8:	8082                	ret

204057ea <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
204057ea:	1101                	addi	sp,sp,-32
204057ec:	ce06                	sw	ra,28(sp)
204057ee:	cc22                	sw	s0,24(sp)
204057f0:	1000                	addi	s0,sp,32
204057f2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
204057f6:	fec42503          	lw	a0,-20(s0)
204057fa:	35fd                	jal	204056e8 <__metal_driver_sifive_uart0_interrupt_parent>
204057fc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
204057fe:	853e                	mv	a0,a5
20405800:	40f2                	lw	ra,28(sp)
20405802:	4462                	lw	s0,24(sp)
20405804:	6105                	addi	sp,sp,32
20405806:	8082                	ret

20405808 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20405808:	1101                	addi	sp,sp,-32
2040580a:	ce06                	sw	ra,28(sp)
2040580c:	cc22                	sw	s0,24(sp)
2040580e:	1000                	addi	s0,sp,32
20405810:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20405814:	fec42503          	lw	a0,-20(s0)
20405818:	3dfd                	jal	20405716 <__metal_driver_sifive_uart0_interrupt_line>
2040581a:	87aa                	mv	a5,a0
2040581c:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20405820:	853e                	mv	a0,a5
20405822:	40f2                	lw	ra,28(sp)
20405824:	4462                	lw	s0,24(sp)
20405826:	6105                	addi	sp,sp,32
20405828:	8082                	ret

2040582a <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
2040582a:	7179                	addi	sp,sp,-48
2040582c:	d606                	sw	ra,44(sp)
2040582e:	d422                	sw	s0,40(sp)
20405830:	1800                	addi	s0,sp,48
20405832:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405836:	fdc42503          	lw	a0,-36(s0)
2040583a:	3551                	jal	204056be <__metal_driver_sifive_uart0_control_base>
2040583c:	87aa                	mv	a5,a0
2040583e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20405842:	fec42783          	lw	a5,-20(s0)
20405846:	439c                	lw	a5,0(a5)
20405848:	fff7c793          	not	a5,a5
2040584c:	83fd                	srli	a5,a5,0x1f
2040584e:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20405852:	853e                	mv	a0,a5
20405854:	50b2                	lw	ra,44(sp)
20405856:	5422                	lw	s0,40(sp)
20405858:	6145                	addi	sp,sp,48
2040585a:	8082                	ret

2040585c <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
2040585c:	7179                	addi	sp,sp,-48
2040585e:	d606                	sw	ra,44(sp)
20405860:	d422                	sw	s0,40(sp)
20405862:	1800                	addi	s0,sp,48
20405864:	fca42e23          	sw	a0,-36(s0)
20405868:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040586c:	fdc42503          	lw	a0,-36(s0)
20405870:	e4fff0ef          	jal	ra,204056be <__metal_driver_sifive_uart0_control_base>
20405874:	87aa                	mv	a5,a0
20405876:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
2040587a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
2040587c:	fdc42503          	lw	a0,-36(s0)
20405880:	376d                	jal	2040582a <__metal_driver_sifive_uart0_txready>
20405882:	87aa                	mv	a5,a0
20405884:	dfe5                	beqz	a5,2040587c <__metal_driver_sifive_uart0_putc+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20405886:	fec42783          	lw	a5,-20(s0)
2040588a:	fd842703          	lw	a4,-40(s0)
2040588e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20405890:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20405892:	853e                	mv	a0,a5
20405894:	50b2                	lw	ra,44(sp)
20405896:	5422                	lw	s0,40(sp)
20405898:	6145                	addi	sp,sp,48
2040589a:	8082                	ret

2040589c <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
2040589c:	7179                	addi	sp,sp,-48
2040589e:	d606                	sw	ra,44(sp)
204058a0:	d422                	sw	s0,40(sp)
204058a2:	1800                	addi	s0,sp,48
204058a4:	fca42e23          	sw	a0,-36(s0)
204058a8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204058ac:	fdc42503          	lw	a0,-36(s0)
204058b0:	e0fff0ef          	jal	ra,204056be <__metal_driver_sifive_uart0_control_base>
204058b4:	87aa                	mv	a5,a0
204058b6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
204058ba:	fec42783          	lw	a5,-20(s0)
204058be:	0791                	addi	a5,a5,4
204058c0:	439c                	lw	a5,0(a5)
204058c2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
204058c6:	fe842783          	lw	a5,-24(s0)
204058ca:	0007d763          	bgez	a5,204058d8 <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
204058ce:	fd842783          	lw	a5,-40(s0)
204058d2:	577d                	li	a4,-1
204058d4:	c398                	sw	a4,0(a5)
204058d6:	a801                	j	204058e6 <__metal_driver_sifive_uart0_getc+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
204058d8:	fe842783          	lw	a5,-24(s0)
204058dc:	0ff7f713          	andi	a4,a5,255
204058e0:	fd842783          	lw	a5,-40(s0)
204058e4:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
204058e6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
204058e8:	853e                	mv	a0,a5
204058ea:	50b2                	lw	ra,44(sp)
204058ec:	5422                	lw	s0,40(sp)
204058ee:	6145                	addi	sp,sp,48
204058f0:	8082                	ret

204058f2 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
204058f2:	7179                	addi	sp,sp,-48
204058f4:	d622                	sw	s0,44(sp)
204058f6:	1800                	addi	s0,sp,48
204058f8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
204058fc:	fdc42783          	lw	a5,-36(s0)
20405900:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20405904:	fec42783          	lw	a5,-20(s0)
20405908:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
2040590a:	853e                	mv	a0,a5
2040590c:	5432                	lw	s0,44(sp)
2040590e:	6145                	addi	sp,sp,48
20405910:	8082                	ret

20405912 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20405912:	7179                	addi	sp,sp,-48
20405914:	d606                	sw	ra,44(sp)
20405916:	d422                	sw	s0,40(sp)
20405918:	1800                	addi	s0,sp,48
2040591a:	fca42e23          	sw	a0,-36(s0)
2040591e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20405922:	fdc42783          	lw	a5,-36(s0)
20405926:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
2040592a:	fdc42503          	lw	a0,-36(s0)
2040592e:	d91ff0ef          	jal	ra,204056be <__metal_driver_sifive_uart0_control_base>
20405932:	87aa                	mv	a5,a0
20405934:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405938:	fdc42503          	lw	a0,-36(s0)
2040593c:	e03ff0ef          	jal	ra,2040573e <__metal_driver_sifive_uart0_clock>
20405940:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20405944:	fd842703          	lw	a4,-40(s0)
20405948:	fec42783          	lw	a5,-20(s0)
2040594c:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
2040594e:	fe442783          	lw	a5,-28(s0)
20405952:	cbb1                	beqz	a5,204059a6 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20405954:	fe442783          	lw	a5,-28(s0)
20405958:	439c                	lw	a5,0(a5)
2040595a:	439c                	lw	a5,0(a5)
2040595c:	fe442503          	lw	a0,-28(s0)
20405960:	9782                	jalr	a5
20405962:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20405966:	fe042703          	lw	a4,-32(s0)
2040596a:	fd842783          	lw	a5,-40(s0)
2040596e:	02f747b3          	div	a5,a4,a5
20405972:	fff78713          	addi	a4,a5,-1
20405976:	fe842783          	lw	a5,-24(s0)
2040597a:	07e1                	addi	a5,a5,24
2040597c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
2040597e:	fe842783          	lw	a5,-24(s0)
20405982:	07a1                	addi	a5,a5,8
20405984:	439c                	lw	a5,0(a5)
20405986:	fe842703          	lw	a4,-24(s0)
2040598a:	0721                	addi	a4,a4,8
2040598c:	0017e793          	ori	a5,a5,1
20405990:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20405992:	fe842783          	lw	a5,-24(s0)
20405996:	07b1                	addi	a5,a5,12
20405998:	439c                	lw	a5,0(a5)
2040599a:	fe842703          	lw	a4,-24(s0)
2040599e:	0731                	addi	a4,a4,12
204059a0:	0017e793          	ori	a5,a5,1
204059a4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
204059a6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
204059a8:	853e                	mv	a0,a5
204059aa:	50b2                	lw	ra,44(sp)
204059ac:	5422                	lw	s0,40(sp)
204059ae:	6145                	addi	sp,sp,48
204059b0:	8082                	ret

204059b2 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
204059b2:	7139                	addi	sp,sp,-64
204059b4:	de06                	sw	ra,60(sp)
204059b6:	dc22                	sw	s0,56(sp)
204059b8:	0080                	addi	s0,sp,64
204059ba:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
204059be:	fcc42783          	lw	a5,-52(s0)
204059c2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
204059c6:	fcc42503          	lw	a0,-52(s0)
204059ca:	cf5ff0ef          	jal	ra,204056be <__metal_driver_sifive_uart0_control_base>
204059ce:	87aa                	mv	a5,a0
204059d0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
204059d4:	fcc42503          	lw	a0,-52(s0)
204059d8:	d67ff0ef          	jal	ra,2040573e <__metal_driver_sifive_uart0_clock>
204059dc:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
204059e0:	fe842783          	lw	a5,-24(s0)
204059e4:	07a1                	addi	a5,a5,8
204059e6:	4398                	lw	a4,0(a5)
204059e8:	fe842783          	lw	a5,-24(s0)
204059ec:	07a1                	addi	a5,a5,8
204059ee:	86be                	mv	a3,a5
204059f0:	fff907b7          	lui	a5,0xfff90
204059f4:	17fd                	addi	a5,a5,-1
204059f6:	8ff9                	and	a5,a5,a4
204059f8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
204059fa:	fe842783          	lw	a5,-24(s0)
204059fe:	07a1                	addi	a5,a5,8
20405a00:	4398                	lw	a4,0(a5)
20405a02:	fe842783          	lw	a5,-24(s0)
20405a06:	07a1                	addi	a5,a5,8
20405a08:	86be                	mv	a3,a5
20405a0a:	67c1                	lui	a5,0x10
20405a0c:	8fd9                	or	a5,a5,a4
20405a0e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20405a10:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20405a12:	fe842783          	lw	a5,-24(s0)
20405a16:	07d1                	addi	a5,a5,20
20405a18:	439c                	lw	a5,0(a5)
20405a1a:	8b85                	andi	a5,a5,1
20405a1c:	dbfd                	beqz	a5,20405a12 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20405a1e:	fe842783          	lw	a5,-24(s0)
20405a22:	07a1                	addi	a5,a5,8
20405a24:	439c                	lw	a5,0(a5)
20405a26:	8b89                	andi	a5,a5,2
20405a28:	c399                	beqz	a5,20405a2e <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20405a2a:	47a5                	li	a5,9
20405a2c:	a011                	j	20405a30 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20405a2e:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20405a30:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20405a34:	fe442783          	lw	a5,-28(s0)
20405a38:	439c                	lw	a5,0(a5)
20405a3a:	439c                	lw	a5,0(a5)
20405a3c:	fe442503          	lw	a0,-28(s0)
20405a40:	9782                	jalr	a5
20405a42:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20405a46:	fe042703          	lw	a4,-32(s0)
20405a4a:	fdc42783          	lw	a5,-36(s0)
20405a4e:	02f707b3          	mul	a5,a4,a5
20405a52:	873e                	mv	a4,a5
20405a54:	fec42783          	lw	a5,-20(s0)
20405a58:	43dc                	lw	a5,4(a5)
20405a5a:	02f757b3          	divu	a5,a4,a5
20405a5e:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20405a62:	fc042a23          	sw	zero,-44(s0)
20405a66:	a039                	j	20405a74 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20405a68:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20405a6a:	fd442783          	lw	a5,-44(s0)
20405a6e:	0785                	addi	a5,a5,1
20405a70:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20405a74:	fd442783          	lw	a5,-44(s0)
20405a78:	fd842703          	lw	a4,-40(s0)
20405a7c:	fee7c6e3          	blt	a5,a4,20405a68 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20405a80:	0001                	nop
20405a82:	50f2                	lw	ra,60(sp)
20405a84:	5462                	lw	s0,56(sp)
20405a86:	6121                	addi	sp,sp,64
20405a88:	8082                	ret

20405a8a <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20405a8a:	7179                	addi	sp,sp,-48
20405a8c:	d606                	sw	ra,44(sp)
20405a8e:	d422                	sw	s0,40(sp)
20405a90:	1800                	addi	s0,sp,48
20405a92:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20405a96:	fdc42783          	lw	a5,-36(s0)
20405a9a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20405a9e:	fec42703          	lw	a4,-20(s0)
20405aa2:	fec42783          	lw	a5,-20(s0)
20405aa6:	43dc                	lw	a5,4(a5)
20405aa8:	85be                	mv	a1,a5
20405aaa:	853a                	mv	a0,a4
20405aac:	dc9fc0ef          	jal	ra,20402874 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20405ab0:	0001                	nop
20405ab2:	50b2                	lw	ra,44(sp)
20405ab4:	5422                	lw	s0,40(sp)
20405ab6:	6145                	addi	sp,sp,48
20405ab8:	8082                	ret

20405aba <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20405aba:	7139                	addi	sp,sp,-64
20405abc:	de06                	sw	ra,60(sp)
20405abe:	dc22                	sw	s0,56(sp)
20405ac0:	0080                	addi	s0,sp,64
20405ac2:	fca42623          	sw	a0,-52(s0)
20405ac6:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20405aca:	fcc42783          	lw	a5,-52(s0)
20405ace:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405ad2:	fcc42503          	lw	a0,-52(s0)
20405ad6:	c69ff0ef          	jal	ra,2040573e <__metal_driver_sifive_uart0_clock>
20405ada:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20405ade:	fcc42503          	lw	a0,-52(s0)
20405ae2:	c8bff0ef          	jal	ra,2040576c <__metal_driver_sifive_uart0_pinmux>
20405ae6:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20405aea:	fe842783          	lw	a5,-24(s0)
20405aee:	c7b9                	beqz	a5,20405b3c <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20405af0:	fec42783          	lw	a5,-20(s0)
20405af4:	20406737          	lui	a4,0x20406
20405af8:	9b270713          	addi	a4,a4,-1614 # 204059b2 <pre_rate_change_callback_func>
20405afc:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20405afe:	fec42783          	lw	a5,-20(s0)
20405b02:	fcc42703          	lw	a4,-52(s0)
20405b06:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20405b08:	fec42783          	lw	a5,-20(s0)
20405b0c:	07a1                	addi	a5,a5,8
20405b0e:	85be                	mv	a1,a5
20405b10:	fe842503          	lw	a0,-24(s0)
20405b14:	20f1                	jal	20405be0 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20405b16:	fec42783          	lw	a5,-20(s0)
20405b1a:	20406737          	lui	a4,0x20406
20405b1e:	a8a70713          	addi	a4,a4,-1398 # 20405a8a <post_rate_change_callback_func>
20405b22:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20405b24:	fec42783          	lw	a5,-20(s0)
20405b28:	fcc42703          	lw	a4,-52(s0)
20405b2c:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
20405b2e:	fec42783          	lw	a5,-20(s0)
20405b32:	07d1                	addi	a5,a5,20
20405b34:	85be                	mv	a1,a5
20405b36:	fe842503          	lw	a0,-24(s0)
20405b3a:	28d9                	jal	20405c10 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20405b3c:	fec42783          	lw	a5,-20(s0)
20405b40:	fc842583          	lw	a1,-56(s0)
20405b44:	853e                	mv	a0,a5
20405b46:	d2ffc0ef          	jal	ra,20402874 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20405b4a:	fe442783          	lw	a5,-28(s0)
20405b4e:	cb95                	beqz	a5,20405b82 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20405b50:	fcc42503          	lw	a0,-52(s0)
20405b54:	c43ff0ef          	jal	ra,20405796 <__metal_driver_sifive_uart0_pinmux_output_selector>
20405b58:	87aa                	mv	a5,a0
20405b5a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20405b5e:	fcc42503          	lw	a0,-52(s0)
20405b62:	c5fff0ef          	jal	ra,204057c0 <__metal_driver_sifive_uart0_pinmux_source_selector>
20405b66:	87aa                	mv	a5,a0
20405b68:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20405b6c:	fe442783          	lw	a5,-28(s0)
20405b70:	439c                	lw	a5,0(a5)
20405b72:	53dc                	lw	a5,36(a5)
20405b74:	fdc42603          	lw	a2,-36(s0)
20405b78:	fe042583          	lw	a1,-32(s0)
20405b7c:	fe442503          	lw	a0,-28(s0)
20405b80:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20405b82:	0001                	nop
20405b84:	50f2                	lw	ra,60(sp)
20405b86:	5462                	lw	s0,56(sp)
20405b88:	6121                	addi	sp,sp,64
20405b8a:	8082                	ret

20405b8c <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20405b8c:	7179                	addi	sp,sp,-48
20405b8e:	d622                	sw	s0,44(sp)
20405b90:	1800                	addi	s0,sp,48
20405b92:	fca42e23          	sw	a0,-36(s0)
20405b96:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20405b9a:	fd842783          	lw	a5,-40(s0)
20405b9e:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20405ba2:	fdc42783          	lw	a5,-36(s0)
20405ba6:	e781                	bnez	a5,20405bae <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20405ba8:	fd842783          	lw	a5,-40(s0)
20405bac:	a035                	j	20405bd8 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20405bae:	fdc42783          	lw	a5,-36(s0)
20405bb2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20405bb6:	a031                	j	20405bc2 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20405bb8:	fec42783          	lw	a5,-20(s0)
20405bbc:	479c                	lw	a5,8(a5)
20405bbe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20405bc2:	fec42783          	lw	a5,-20(s0)
20405bc6:	479c                	lw	a5,8(a5)
20405bc8:	fbe5                	bnez	a5,20405bb8 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20405bca:	fec42783          	lw	a5,-20(s0)
20405bce:	fd842703          	lw	a4,-40(s0)
20405bd2:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20405bd4:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20405bd8:	853e                	mv	a0,a5
20405bda:	5432                	lw	s0,44(sp)
20405bdc:	6145                	addi	sp,sp,48
20405bde:	8082                	ret

20405be0 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405be0:	1101                	addi	sp,sp,-32
20405be2:	ce06                	sw	ra,28(sp)
20405be4:	cc22                	sw	s0,24(sp)
20405be6:	1000                	addi	s0,sp,32
20405be8:	fea42623          	sw	a0,-20(s0)
20405bec:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20405bf0:	fec42783          	lw	a5,-20(s0)
20405bf4:	43dc                	lw	a5,4(a5)
20405bf6:	fe842583          	lw	a1,-24(s0)
20405bfa:	853e                	mv	a0,a5
20405bfc:	3f41                	jal	20405b8c <_metal_clock_append_to_callbacks>
20405bfe:	872a                	mv	a4,a0
20405c00:	fec42783          	lw	a5,-20(s0)
20405c04:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20405c06:	0001                	nop
20405c08:	40f2                	lw	ra,28(sp)
20405c0a:	4462                	lw	s0,24(sp)
20405c0c:	6105                	addi	sp,sp,32
20405c0e:	8082                	ret

20405c10 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405c10:	1101                	addi	sp,sp,-32
20405c12:	ce06                	sw	ra,28(sp)
20405c14:	cc22                	sw	s0,24(sp)
20405c16:	1000                	addi	s0,sp,32
20405c18:	fea42623          	sw	a0,-20(s0)
20405c1c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20405c20:	fec42783          	lw	a5,-20(s0)
20405c24:	479c                	lw	a5,8(a5)
20405c26:	fe842583          	lw	a1,-24(s0)
20405c2a:	853e                	mv	a0,a5
20405c2c:	3785                	jal	20405b8c <_metal_clock_append_to_callbacks>
20405c2e:	872a                	mv	a4,a0
20405c30:	fec42783          	lw	a5,-20(s0)
20405c34:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20405c36:	0001                	nop
20405c38:	40f2                	lw	ra,28(sp)
20405c3a:	4462                	lw	s0,24(sp)
20405c3c:	6105                	addi	sp,sp,32
20405c3e:	8082                	ret

20405c40 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20405c40:	1101                	addi	sp,sp,-32
20405c42:	ce06                	sw	ra,28(sp)
20405c44:	cc22                	sw	s0,24(sp)
20405c46:	1000                	addi	s0,sp,32
20405c48:	fea42623          	sw	a0,-20(s0)
20405c4c:	fec42783          	lw	a5,-20(s0)
20405c50:	439c                	lw	a5,0(a5)
20405c52:	57dc                	lw	a5,44(a5)
20405c54:	fec42503          	lw	a0,-20(s0)
20405c58:	9782                	jalr	a5
20405c5a:	87aa                	mv	a5,a0
20405c5c:	853e                	mv	a0,a5
20405c5e:	40f2                	lw	ra,28(sp)
20405c60:	4462                	lw	s0,24(sp)
20405c62:	6105                	addi	sp,sp,32
20405c64:	8082                	ret

20405c66 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20405c66:	1101                	addi	sp,sp,-32
20405c68:	ce22                	sw	s0,28(sp)
20405c6a:	1000                	addi	s0,sp,32
20405c6c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20405c70:	fec42783          	lw	a5,-20(s0)
20405c74:	eb89                	bnez	a5,20405c86 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20405c76:	fec42703          	lw	a4,-20(s0)
20405c7a:	070a                	slli	a4,a4,0x2
20405c7c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20405c80:	97ba                	add	a5,a5,a4
20405c82:	439c                	lw	a5,0(a5)
20405c84:	a011                	j	20405c88 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20405c86:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20405c88:	853e                	mv	a0,a5
20405c8a:	4472                	lw	s0,28(sp)
20405c8c:	6105                	addi	sp,sp,32
20405c8e:	8082                	ret

20405c90 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20405c90:	1101                	addi	sp,sp,-32
20405c92:	ce22                	sw	s0,28(sp)
20405c94:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405c96:	f14027f3          	csrr	a5,mhartid
20405c9a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20405c9e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20405ca2:	853e                	mv	a0,a5
20405ca4:	4472                	lw	s0,28(sp)
20405ca6:	6105                	addi	sp,sp,32
20405ca8:	8082                	ret

20405caa <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
20405caa:	1101                	addi	sp,sp,-32
20405cac:	ce22                	sw	s0,28(sp)
20405cae:	1000                	addi	s0,sp,32
20405cb0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20405cb4:	0001                	nop
20405cb6:	bffd                	j	20405cb4 <metal_shutdown+0xa>
	...

20405d00 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405d00:	cd0fd06f          	j	204031d0 <metal_interrupt_vector_handler>

20405d04 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405d04:	cccfd06f          	j	204031d0 <metal_interrupt_vector_handler>

20405d08 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405d08:	cc8fd06f          	j	204031d0 <metal_interrupt_vector_handler>

20405d0c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
20405d0c:	cf2fd06f          	j	204031fe <metal_software_interrupt_vector_handler>

20405d10 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405d10:	cc0fd06f          	j	204031d0 <metal_interrupt_vector_handler>

20405d14 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405d14:	cbcfd06f          	j	204031d0 <metal_interrupt_vector_handler>

20405d18 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405d18:	cb8fd06f          	j	204031d0 <metal_interrupt_vector_handler>

20405d1c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
20405d1c:	dd4fd06f          	j	204032f0 <metal_timer_interrupt_vector_handler>

20405d20 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20405d20:	cb0fd06f          	j	204031d0 <metal_interrupt_vector_handler>

20405d24 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20405d24:	cacfd06f          	j	204031d0 <metal_interrupt_vector_handler>

20405d28 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20405d28:	ca8fd06f          	j	204031d0 <metal_interrupt_vector_handler>

20405d2c <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
20405d2c:	ca4fd06f          	j	204031d0 <metal_interrupt_vector_handler>

20405d30 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20405d30:	ca0fd06f          	j	204031d0 <metal_interrupt_vector_handler>

20405d34 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20405d34:	c9cfd06f          	j	204031d0 <metal_interrupt_vector_handler>

20405d38 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20405d38:	c98fd06f          	j	204031d0 <metal_interrupt_vector_handler>

20405d3c <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
20405d3c:	c94fd06f          	j	204031d0 <metal_interrupt_vector_handler>

20405d40 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20405d40:	837fd06f          	j	20403576 <metal_lc0_interrupt_vector_handler>

20405d44 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20405d44:	8c5fd06f          	j	20403608 <metal_lc1_interrupt_vector_handler>

20405d48 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20405d48:	953fd06f          	j	2040369a <metal_lc2_interrupt_vector_handler>

20405d4c <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
20405d4c:	9e1fd06f          	j	2040372c <metal_lc3_interrupt_vector_handler>

20405d50 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20405d50:	a6ffd06f          	j	204037be <metal_lc4_interrupt_vector_handler>

20405d54 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20405d54:	afdfd06f          	j	20403850 <metal_lc5_interrupt_vector_handler>

20405d58 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20405d58:	b8bfd06f          	j	204038e2 <metal_lc6_interrupt_vector_handler>

20405d5c <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
20405d5c:	c19fd06f          	j	20403974 <metal_lc7_interrupt_vector_handler>

20405d60 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20405d60:	ca7fd06f          	j	20403a06 <metal_lc8_interrupt_vector_handler>

20405d64 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20405d64:	d35fd06f          	j	20403a98 <metal_lc9_interrupt_vector_handler>

20405d68 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20405d68:	dc3fd06f          	j	20403b2a <metal_lc10_interrupt_vector_handler>

20405d6c <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
20405d6c:	e51fd06f          	j	20403bbc <metal_lc11_interrupt_vector_handler>

20405d70 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20405d70:	edffd06f          	j	20403c4e <metal_lc12_interrupt_vector_handler>

20405d74 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20405d74:	f6dfd06f          	j	20403ce0 <metal_lc13_interrupt_vector_handler>

20405d78 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20405d78:	ffbfd06f          	j	20403d72 <metal_lc14_interrupt_vector_handler>

20405d7c <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
20405d7c:	888fe06f          	j	20403e04 <metal_lc15_interrupt_vector_handler>

20405d80 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:120
{
20405d80:	1101                	addi	sp,sp,-32
20405d82:	ce22                	sw	s0,28(sp)
20405d84:	1000                	addi	s0,sp,32
20405d86:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
20405d8a:	fec42703          	lw	a4,-20(s0)
20405d8e:	800017b7          	lui	a5,0x80001
20405d92:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffdc6c>
20405d96:	00f71763          	bne	a4,a5,20405da4 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
20405d9a:	03dfd7b7          	lui	a5,0x3dfd
20405d9e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405da2:	a011                	j	20405da6 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:125
		return 0;
20405da4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:127
}
20405da6:	853e                	mv	a0,a5
20405da8:	4472                	lw	s0,28(sp)
20405daa:	6105                	addi	sp,sp,32
20405dac:	8082                	ret

20405dae <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
20405dae:	1101                	addi	sp,sp,-32
20405db0:	ce06                	sw	ra,28(sp)
20405db2:	cc22                	sw	s0,24(sp)
20405db4:	1000                	addi	s0,sp,32
20405db6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
20405dba:	fec42503          	lw	a0,-20(s0)
20405dbe:	37c9                	jal	20405d80 <__metal_driver_fixed_clock_rate>
20405dc0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405dc2:	853e                	mv	a0,a5
20405dc4:	40f2                	lw	ra,28(sp)
20405dc6:	4462                	lw	s0,24(sp)
20405dc8:	6105                	addi	sp,sp,32
20405dca:	8082                	ret

20405dcc <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
20405dcc:	1101                	addi	sp,sp,-32
20405dce:	ce06                	sw	ra,28(sp)
20405dd0:	cc22                	sw	s0,24(sp)
20405dd2:	1000                	addi	s0,sp,32
20405dd4:	fea42623          	sw	a0,-20(s0)
20405dd8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
20405ddc:	fec42503          	lw	a0,-20(s0)
20405de0:	37f9                	jal	20405dae <__metal_driver_fixed_clock_get_rate_hz>
20405de2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20405de4:	853e                	mv	a0,a5
20405de6:	40f2                	lw	ra,28(sp)
20405de8:	4462                	lw	s0,24(sp)
20405dea:	6105                	addi	sp,sp,32
20405dec:	8082                	ret

20405dee <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
20405dee:	1101                	addi	sp,sp,-32
20405df0:	ce06                	sw	ra,28(sp)
20405df2:	cc22                	sw	s0,24(sp)
20405df4:	1000                	addi	s0,sp,32
20405df6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
20405dfa:	fec42503          	lw	a0,-20(s0)
20405dfe:	3575                	jal	20405caa <metal_shutdown>
