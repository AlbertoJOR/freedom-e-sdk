
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/debug/AsconDec.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/debug/AsconDec.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x0000645c memsz 0x0000645c flags rwx
    LOAD off    0x00007730 vaddr 0x80001730 paddr 0x80001730 align 2**12
         filesz 0x00000000 memsz 0x00001c84 flags rw-
    LOAD off    0x00008000 vaddr 0x80000000 paddr 0x20406460 align 2**12
         filesz 0x00001730 memsz 0x00001730 flags rw-
    LOAD off    0x00009730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00009730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             0000019e  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005d02  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000554  20405f04  20405f04  00006f04  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20406458  20406458  00007458  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00001730  80000000  20406460  00008000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              00001084  80001730  80001730  00007730  2**3  ALLOC
  6 .stack            00000400  800027b4  800027b4  00007730  2**0  ALLOC
  7 .heap             00000800  80002bb4  80002bb4  00007730  2**0  ALLOC
  8 .debug_info       00014ac1  00000000  00000000  00009730  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     0000278a  00000000  00000000  0001e1f1  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    000008f8  00000000  00000000  00020980  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000790  00000000  00000000  00021278  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       0000922f  00000000  00000000  00021a08  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        000037f7  00000000  00000000  0002ac37  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002e42e  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002e456  2**0  CONTENTS, READONLY
 16 .debug_frame      00002560  00000000  00000000  0002e484  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405f04 l    d  .rodata	00000000 .rodata
20406458 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80001730 l    d  .bss	00000000 .bss
800027b4 l    d  .stack	00000000 .stack
80002bb4 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
2040013e l       .init	00000000 _skip_init
20406104 l       .rodata	00000000 argv
20406108 l       .rodata	00000000 envp
2040610c l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 AsconDec.c
20400394 l     F .text	00000404 ROUND
20400798 l     F .text	0000008e P12
20400826 l     F .text	00000052 P6
80000000 l     O .data	000007d0 asso_text.2786
800007d0 l     O .data	000007d0 plain_text.2785
8000173c l     O .bss	000007e0 cipher_text.2787
80000fa0 l     O .data	00000010 Key.2791
80000fb0 l     O .data	00000010 Nonce.2788
80001f1c l     O .bss	00000028 hash.2790
80001f44 l     O .bss	000007e0 dec_text.2789
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
2040169a l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20401bea l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80001710 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80002724 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20402904 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
204029ae l     F .text	00000026 __metal_driver_sifive_clint0_control_base
204029d4 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
204029f8 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20402a34 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20402b94 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
204030cc l     F .text	00000024 __metal_driver_cpu_hartid
204030f0 l     F .text	0000002a __metal_driver_cpu_timebase
2040311a l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
2040491a l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20404944 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
2040496c l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20404994 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
204049bc l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404f10 l     F .text	00000026 __metal_driver_sifive_gpio0_base
20404f36 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20404f60 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
204057ca l     F .text	0000002a __metal_driver_sifive_uart0_control_base
204057f4 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20405822 l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
2040584a l     F .text	0000002e __metal_driver_sifive_uart0_clock
20405878 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
204058a2 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
204058cc l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20405ac0 l     F .text	000000d8 pre_rate_change_callback_func
20405b98 l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20405e00 l       .text	00000000 IRQ_0
20405e04 l       .text	00000000 IRQ_1
20405e08 l       .text	00000000 IRQ_2
20405e0c l       .text	00000000 IRQ_3
20405e10 l       .text	00000000 IRQ_4
20405e14 l       .text	00000000 IRQ_5
20405e18 l       .text	00000000 IRQ_6
20405e1c l       .text	00000000 IRQ_7
20405e20 l       .text	00000000 IRQ_8
20405e24 l       .text	00000000 IRQ_9
20405e28 l       .text	00000000 IRQ_10
20405e2c l       .text	00000000 IRQ_11
20405e30 l       .text	00000000 IRQ_12
20405e34 l       .text	00000000 IRQ_13
20405e38 l       .text	00000000 IRQ_14
20405e3c l       .text	00000000 IRQ_15
20405e40 l       .text	00000000 IRQ_LC0
20405e44 l       .text	00000000 IRQ_LC1
20405e48 l       .text	00000000 IRQ_LC2
20405e4c l       .text	00000000 IRQ_LC3
20405e50 l       .text	00000000 IRQ_LC4
20405e54 l       .text	00000000 IRQ_LC5
20405e58 l       .text	00000000 IRQ_LC6
20405e5c l       .text	00000000 IRQ_LC7
20405e60 l       .text	00000000 IRQ_LC8
20405e64 l       .text	00000000 IRQ_LC9
20405e68 l       .text	00000000 IRQ_LC10
20405e6c l       .text	00000000 IRQ_LC11
20405e70 l       .text	00000000 IRQ_LC12
20405e74 l       .text	00000000 IRQ_LC13
20405e78 l       .text	00000000 IRQ_LC14
20405e7c l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405e80 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000fc0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
2040645c l       .init_array	00000000 __fini_array_end
2040645c l       .init_array	00000000 __fini_array_start
2040645c l       .init_array	00000000 __init_array_end
20406458 l       .init_array	00000000 __preinit_array_end
20406458 l       .init_array	00000000 __init_array_start
20406458 l       .init_array	00000000 __preinit_array_start
20401186 g     F .text	0000002c putchar
20406434 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
2040206e g     F .text	00000030 _isatty_r
204038be  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20401234 g     F .text	000000da _puts_r
20400878 g     F .text	0000007a printstate
2040209e g     F .text	00000034 _lseek_r
20405a20 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
20402d70 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
2040382c  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400f44 g     F .text	0000001e rdcycle
2040407e g     F .text	00000038 __metal_valid_interrupt_id
20401142 g     F .text	00000044 printf
204044a8 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80001f08 g       .data	00000000 __global_pointer$
20405c9a g     F .text	00000054 _metal_clock_append_to_callbacks
20404a0c g     F .text	00000038 __metal_plic0_complete_interrupt
20404300 g     F .text	00000150 __metal_driver_riscv_cpu_controller_interrupt_register
20401f9c g     F .text	00000036 __sseek
20401750 g     F .text	0000006a __sinit
2040131c g     F .text	000000c0 __swbuf_r
2040170c g     F .text	00000044 __sfmoreglue
204020ee g     F .text	00000002 __malloc_unlock
20405d74 g     F .text	0000002a metal_cpu_get
800016e8 g     O .data	00000020 __metal_dt_serial_10013000
204053a4 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20406118 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
800027b4 g       .bss	00000000 metal_segment_bss_target_end
20402a64 g     F .text	0000009a __metal_clint0_mtime_get
204048ae g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20405154 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
20402684 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20405936 g     F .text	00000034 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80001730 g       .bss	00000000 metal_segment_bss_target_start
20402afe g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
2040203c g     F .text	00000032 _fstat_r
204055f4 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
800027b0 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20405cee g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20403b98  w    F .text	00000092 metal_lc9_interrupt_vector_handler
2040636c g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
2040632c g     O .rodata	00000040 __metal_driver_vtable_cpu
20402980 g     F .text	0000002e metal_uart_set_baud_rate
20405bc8 g     F .text	000000d2 __metal_driver_sifive_uart0_init
2040453c g     F .text	00000072 __metal_driver_cpu_mcycle_get
80002bb4 g       .heap	00000000 metal_segment_heap_target_start
20401702 g     F .text	0000000a _cleanup_r
80001720 g     O .data	00000004 __metal_dt_cpu_0
20403b06  w    F .text	00000092 metal_lc8_interrupt_vector_handler
2040130e g     F .text	0000000e puts
20403de0  w    F .text	00000092 metal_lc13_interrupt_vector_handler
204032ae g     F .text	00000018 __metal_default_exception_handler
204024f4 g     F .text	00000026 _fstat
204008f2 g     F .text	00000652 crypto_aead_decrypt
20403098 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20404aa8 g     F .text	00000062 __metal_plic0_set_priority
204044c4 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20403144 g     F .text	0000002c __metal_driver_cpu_get
204062e0 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
204031a2 g     F .text	00000018 __metal_interrupt_global_disable
20403a74  w    F .text	00000092 metal_lc7_interrupt_vector_handler
20403c2a  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20401eee g     F .text	00000030 _sbrk_r
20404ec8 g     F .text	00000048 __metal_driver_riscv_plic0_disable
20404172 g     F .text	0000004e __metal_exception_register
2040249e g     F .text	00000034 _read_r
204046d0 g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20405236 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
2040339a g     F .text	00000064 __metal_default_sw_handler
20405d1e g     F .text	00000030 metal_clock_register_post_rate_change_callback
204058f6 g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
2040251a g     F .text	00000020 _isatty
204052fc g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80001728 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000170c g     O .data	00000004 _global_impure_ptr
204033fe  w    F .text	0000008e metal_timer_interrupt_vector_handler
204026f4 g     F .text	0000006a __libc_init_array
20405276 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
20403cbc  w    F .text	00000092 metal_lc11_interrupt_vector_handler
20404450 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
2040258e g     F .text	0000007e _sbrk
204051f0 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
2040017c g     F .init	00000002 _init
20403204 g     F .text	0000001a __metal_interrupt_timer_disable
204053ee g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20404786 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
204063f8 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
2040533c g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
204026bc g     F .text	00000038 __libc_fini_array
2040577c g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20404710 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20403256 g     F .text	0000002c __metal_interrupt_local_enable
20403064 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
204028b2 g     F .text	0000002c metal_tty_putc
20404bcc g     F .text	00000018 __metal_plic0_default_handler
204011b2 g     F .text	00000082 _putc_r
80001020 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20406068 g     O .rodata	00000020 __sf_fake_stderr
2040323a g     F .text	0000001c __metal_interrupt_external_disable
20405914 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20404520 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
204041c0 g     F .text	00000140 __metal_driver_riscv_cpu_controller_interrupt_init
20401c14 g     F .text	00000042 __sfputs_r
20404868 g     F .text	00000046 __metal_driver_cpu_exception_register
204031ba g     F .text	00000018 __metal_interrupt_software_enable
20403708  w    F .text	00000092 metal_lc1_interrupt_vector_handler
204020d2 g     F .text	0000001a memchr
20401a60 g     F .text	000000ac _free_r
80001738 g     O .bss	00000004 _global_atexit
20403f96 g     F .text	00000050 __metal_controller_interrupt_vector_mode
204027ea g     F .text	000000c8 __call_exitprocs
80002bb4 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
2040253a g     F .text	0000002a _lseek
20404848 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
204048dc g     F .text	0000001e __metal_driver_cpu_get_exception_pc
2040321e g     F .text	0000001c __metal_interrupt_external_enable
2040275e g     F .text	0000008c __register_exitproc
2040596a g     F .text	00000040 __metal_driver_sifive_uart0_putc
20404c78 g     F .text	00000146 __metal_driver_riscv_plic0_init
20404e80 g     F .text	00000048 __metal_driver_riscv_plic0_enable
204051c4 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20400200 g     F .text	000000be printC
204039e2  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20403170 g     F .text	0000001a __metal_myhart_id
2040579c g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
2040330c  w    F .text	0000008e metal_software_interrupt_vector_handler
2040447c g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
2040200c g     F .text	00000030 _close_r
20405a00 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20402c52 g     F .text	000000da __metal_driver_riscv_clint0_register
80001718 g     O .data	00000008 __metal_dt_clint_2000000
204013dc g     F .text	00000110 __swsetup_r
204017ba g     F .text	0000009e __sfp
20401f1e g     F .text	00000030 __sread
20405114 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
2040017e  w    F .init	00000000 secondary_main
204032de  w    F .text	0000002e metal_interrupt_vector_handler
204020ec g     F .text	00000002 __malloc_lock
20401636 g     F .text	00000064 _fflush_r
20404a7c g     F .text	0000002c __metal_plic0_get_threshold
20406088 g     O .rodata	00000020 __sf_fake_stdin
204040b6 g     F .text	000000bc __metal_local_interrupt_enable
20402f2e g     F .text	00000136 __metal_driver_riscv_clint0_command_request
204019b8 g     F .text	000000a8 memset
20403950  w    F .text	00000092 metal_lc5_interrupt_vector_handler
20400f62 g     F .text	000001e0 main
80001730 g       .data	00000000 metal_segment_data_target_end
20404724 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
204047e8 g     F .text	00000060 __metal_driver_cpu_get_msip
20405db8 g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
204048fa g     F .text	00000020 __metal_driver_cpu_set_exception_pc
204049de g     F .text	0000002e __metal_plic0_claim_interrupt
20401fd2 g     F .text	00000006 __sclose
20403d4e  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20401b0c g     F .text	000000de _malloc_r
20402d54 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
204045ae g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20405d9e g     F .text	0000001a metal_cpu_get_current_hartid
204002be g     F .text	000000d6 AEAD_DEC
20405e00 g       .text	00000000 __metal_vector_table
20406460 g       *ABS*	00000000 metal_segment_itim_source_start
80001714  w    O .data	00000004 __metal_cpu_table
80001030 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
2040017c g     F .init	00000002 _fini
20401142 g     F .text	00000044 iprintf
2040318a g     F .text	00000018 __metal_interrupt_global_enable
2040267a g     F .text	0000000a atexit
204028de g     F .text	00000026 metal_tty_putc_raw
20401fd8 g     F .text	00000034 _write_r
204031ea g     F .text	0000001a __metal_interrupt_timer_enable
204059aa g     F .text	00000056 __metal_driver_sifive_uart0_getc
20402e76 g     F .text	000000b8 __metal_driver_riscv_clint0_disable
204020f0 g     F .text	0000010c _printf_common
80001708 g     O .data	00000004 _impure_ptr
2040465a g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
204014ec g     F .text	0000014a __sflush_r
20405eae g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20402dc4 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20406460 g       *ABS*	00000000 metal_segment_data_source_start
800033b4 g       .heap	00000000 metal_segment_heap_target_end
20403fe6 g     F .text	00000098 __metal_controller_interrupt_vector
800013e8 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
204018c4 g     F .text	00000058 __swhatbuf_r
204052b6 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
2040348c g     F .text	00000066 __metal_default_timer_handler
2040260c g     F .text	0000006e _write
20404be4 g     F .text	00000094 __metal_plic0_handler
2040379a  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403f04  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20405d4e g     F .text	00000026 metal_cpu_interrupt_controller
20401f4e g     F .text	0000004e __swrite
20402690 g     F .text	0000002c exit
20401c56 g     F .text	00000298 _vfiprintf_r
20401858 g     F .text	0000006c _fwalk_reent
20405ecc g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
204060a8 g     O .rodata	00000020 __sf_fake_stdout
80001724 g     O .data	00000004 __metal_dt_gpio_10012000
204032c6 g     F .text	00000018 __metal_default_interrupt_handler
20402952 g     F .text	0000002e metal_uart_putc
20402564 g     F .text	0000002a _read
2040519a g     F .text	0000002a __metal_driver_sifive_gpio0_input
20403500 g     F .text	00000150 __metal_exception_handler
20403676  w    F .text	00000092 metal_lc0_interrupt_vector_handler
20405eee g     F .text	00000014 _exit
204045f4 g     F .text	00000066 __metal_driver_cpu_mtime_get
2040191c g     F .text	0000009c __smakebuf_r
20402d2c g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
204021fc g     F .text	000002a2 _printf_i
80001734 g     O .bss	00000004 __malloc_sbrk_start
20403e72  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20402bca g     F .text	00000088 __metal_driver_riscv_clint0_init
80001730 g     O .bss	00000004 __malloc_free_list
20401c56 g     F .text	00000298 _vfprintf_r
204046e6 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20404b3e g     F .text	0000008e __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
204046fa g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20403282 g     F .text	0000002c __metal_interrupt_local_disable
204031d2 g     F .text	00000018 __metal_interrupt_software_disable
20404b0a g     F .text	00000034 __metal_plic0_get_priority
20402926 g     F .text	0000002c metal_uart_init
20404a44 g     F .text	00000038 __metal_plic0_set_threshold
204024d2 g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20404dbe g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc02197          	auipc	gp,0x5fc02
20400004:	f0818193          	addi	gp,gp,-248 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc02197          	auipc	gp,0x5fc02
20400084:	e8818193          	addi	gp,gp,-376 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	5fc03117          	auipc	sp,0x5fc03
2040008c:	b2c10113          	addi	sp,sp,-1236 # 80002bb4 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
20400090:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
20400092:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400096:	00a28563          	beq	t0,a0,204000a0 <_start+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
2040009a:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
2040009c:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009e:	bfe5                	j	20400096 <_start+0x18>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
204000a0:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a4:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a8:	08551b63          	bne	a0,t0,2040013e <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000ac:	00006297          	auipc	t0,0x6
204000b0:	3b428293          	addi	t0,t0,948 # 20406460 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b4:	5fc00317          	auipc	t1,0x5fc00
204000b8:	f4c30313          	addi	t1,t1,-180 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000bc:	82818393          	addi	t2,gp,-2008 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000c0:	00628c63          	beq	t0,t1,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c4:	00735a63          	bge	t1,t2,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000cc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ce:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000d2:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d4:	fe734ae3          	blt	t1,t2,204000c8 <_start+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d8:	00006297          	auipc	t0,0x6
204000dc:	38828293          	addi	t0,t0,904 # 20406460 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000e0:	e7c00317          	auipc	t1,0xe7c00
204000e4:	f2030313          	addi	t1,t1,-224 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e8:	e7c00397          	auipc	t2,0xe7c00
204000ec:	f1838393          	addi	t2,t2,-232 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000f0:	00628c63          	beq	t0,t1,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f4:	00735a63          	bge	t1,t2,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000fc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fe:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
20400102:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400104:	fe734ae3          	blt	t1,t2,204000f8 <_start+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400108:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
2040010c:	5fc01317          	auipc	t1,0x5fc01
20400110:	62430313          	addi	t1,t1,1572 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400114:	5fc02397          	auipc	t2,0x5fc02
20400118:	6a038393          	addi	t2,t2,1696 # 800027b4 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
2040011c:	00735763          	bge	t1,t2,2040012a <_start+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400120:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
20400124:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
20400126:	fe734de3          	blt	t1,t2,20400120 <_start+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2040012a:	c211                	beqz	a2,2040012e <_start+0xb0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
2040012c:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
2040012e:	00002517          	auipc	a0,0x2
20400132:	58e50513          	addi	a0,a0,1422 # 204026bc <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
20400136:	544020ef          	jal	ra,2040267a <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
2040013a:	5ba020ef          	jal	ra,204026f4 <__libc_init_array>

2040013e <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
2040013e:	3f0d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400140:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
20400144:	00010737          	lui	a4,0x10
20400148:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
2040014c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
2040014e:	cb89                	beqz	a5,20400160 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400150:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
20400154:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
20400156:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400158:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
2040015c:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400160:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
20400162:	00006597          	auipc	a1,0x6
20400166:	fa258593          	addi	a1,a1,-94 # 20406104 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
2040016a:	00006617          	auipc	a2,0x6
2040016e:	f9e60613          	addi	a2,a2,-98 # 20406108 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
20400172:	2031                	jal	2040017e <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
20400174:	51c020ef          	jal	ra,20402690 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400178:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
2040017a:	8082                	ret

2040017c <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
2040017c:	8082                	ret

2040017e <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
2040017e:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400180:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
20400182:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
20400186:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
2040018a:	00628563          	beq	t0,t1,20400194 <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
2040018e:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
20400192:	bff5                	j	2040018e <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
20400194:	5cf000ef          	jal	ra,20400f62 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400198:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
2040019a:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
2040019c:	8082                	ret

Disassembly of section .text:

20400200 <printC>:
printC():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:38
             u32 *d_addr, u32 *nonce_addr,
             u32 *key_addr, u32 *tag_addr);
u32 HASH(u32 *m_addr, u32 m_len,
             u32 *c_addr );

void printC(u32 *arr, u32 a_len, int cipher, int del) {
20400200:	7179                	addi	sp,sp,-48
20400202:	d606                	sw	ra,44(sp)
20400204:	d422                	sw	s0,40(sp)
20400206:	1800                	addi	s0,sp,48
20400208:	fca42e23          	sw	a0,-36(s0)
2040020c:	fcb42c23          	sw	a1,-40(s0)
20400210:	fcc42a23          	sw	a2,-44(s0)
20400214:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:39
    int len = (a_len % 8 == 0)? (a_len /4)*2 : (a_len/4)*2 +2 ;
20400218:	fd842783          	lw	a5,-40(s0)
2040021c:	8b9d                	andi	a5,a5,7
2040021e:	e791                	bnez	a5,2040022a <printC+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:39 (discriminator 1)
20400220:	fd842783          	lw	a5,-40(s0)
20400224:	8389                	srli	a5,a5,0x2
20400226:	0786                	slli	a5,a5,0x1
20400228:	a031                	j	20400234 <printC+0x34>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:39 (discriminator 2)
2040022a:	fd842783          	lw	a5,-40(s0)
2040022e:	8389                	srli	a5,a5,0x2
20400230:	0785                	addi	a5,a5,1
20400232:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:39 (discriminator 4)
20400234:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:40 (discriminator 4)
    len =  (cipher) ? len + 4 : len;
20400238:	fd442783          	lw	a5,-44(s0)
2040023c:	c789                	beqz	a5,20400246 <printC+0x46>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:40 (discriminator 1)
2040023e:	fe842783          	lw	a5,-24(s0)
20400242:	0791                	addi	a5,a5,4
20400244:	a019                	j	2040024a <printC+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:40 (discriminator 2)
20400246:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:40 (discriminator 4)
2040024a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:41 (discriminator 4)
    for (int i = 0; i < len; i++) {
2040024e:	fe042623          	sw	zero,-20(s0)
20400252:	a881                	j	204002a2 <printC+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:42
        if (i % 2 == 0) {
20400254:	fec42783          	lw	a5,-20(s0)
20400258:	8b85                	andi	a5,a5,1
2040025a:	e781                	bnez	a5,20400262 <printC+0x62>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:43
            printf("\n");
2040025c:	4529                	li	a0,10
2040025e:	729000ef          	jal	ra,20401186 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:45
        }
        printf("%08x ", arr[i], i);
20400262:	fec42783          	lw	a5,-20(s0)
20400266:	078a                	slli	a5,a5,0x2
20400268:	fdc42703          	lw	a4,-36(s0)
2040026c:	97ba                	add	a5,a5,a4
2040026e:	439c                	lw	a5,0(a5)
20400270:	fec42603          	lw	a2,-20(s0)
20400274:	85be                	mv	a1,a5
20400276:	204067b7          	lui	a5,0x20406
2040027a:	f0478513          	addi	a0,a5,-252 # 20405f04 <_exit+0x16>
2040027e:	6c5000ef          	jal	ra,20401142 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:46
        if (del) {
20400282:	fd042783          	lw	a5,-48(s0)
20400286:	cb89                	beqz	a5,20400298 <printC+0x98>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:47
            arr[i] = 0;
20400288:	fec42783          	lw	a5,-20(s0)
2040028c:	078a                	slli	a5,a5,0x2
2040028e:	fdc42703          	lw	a4,-36(s0)
20400292:	97ba                	add	a5,a5,a4
20400294:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:41 (discriminator 2)
    for (int i = 0; i < len; i++) {
20400298:	fec42783          	lw	a5,-20(s0)
2040029c:	0785                	addi	a5,a5,1
2040029e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:41 (discriminator 1)
204002a2:	fec42703          	lw	a4,-20(s0)
204002a6:	fe842783          	lw	a5,-24(s0)
204002aa:	faf745e3          	blt	a4,a5,20400254 <printC+0x54>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:50
        }
    }
    printf("\n");
204002ae:	4529                	li	a0,10
204002b0:	6d7000ef          	jal	ra,20401186 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:51
}
204002b4:	0001                	nop
204002b6:	50b2                	lw	ra,44(sp)
204002b8:	5422                	lw	s0,40(sp)
204002ba:	6145                	addi	sp,sp,48
204002bc:	8082                	ret

204002be <AEAD_DEC>:
AEAD_DEC():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:98
}

u32 AEAD_DEC(u32 *ad_addr, u32 ad_len,
             u32 *c_addr, u32 c_len,
             u32 *d_addr, u32 *nonce_addr,
             u32 *key_addr, u32 *tag_addr){
204002be:	7139                	addi	sp,sp,-64
204002c0:	de22                	sw	s0,60(sp)
204002c2:	0080                	addi	s0,sp,64
204002c4:	fca42e23          	sw	a0,-36(s0)
204002c8:	fcb42c23          	sw	a1,-40(s0)
204002cc:	fcc42a23          	sw	a2,-44(s0)
204002d0:	fcd42823          	sw	a3,-48(s0)
204002d4:	fce42623          	sw	a4,-52(s0)
204002d8:	fcf42423          	sw	a5,-56(s0)
204002dc:	fd042223          	sw	a6,-60(s0)
204002e0:	fd142023          	sw	a7,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:99
    u32 rd = 0;
204002e4:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:101
   // printf("Init DEC\n");
    asm volatile("fence");
204002e8:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:102
    ROCC_INSTRUCTION_DS(0, rd, nonce_addr, Enc_Set_Nonce);
204002ec:	fc842783          	lw	a5,-56(s0)
204002f0:	85be                	mv	a1,a5
204002f2:	2805e50b          	0x2805e50b
204002f6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:103
    asm volatile("fence":: : "memory");
204002fa:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:106
    //printf("Set Nonce finish : %08x \n", rd);

    asm volatile("fence");
204002fe:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:107
    ROCC_INSTRUCTION_DS(0, rd, tag_addr, Dec_Load_Tag);
20400302:	fc042783          	lw	a5,-64(s0)
20400306:	85be                	mv	a1,a5
20400308:	2e05e50b          	0x2e05e50b
2040030c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:108
    asm volatile("fence":: : "memory");
20400310:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:111
    //printf("Load Tag finish : %08x \n", rd);

    asm volatile("fence");
20400314:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:112
    ROCC_INSTRUCTION_DS(0, rd, key_addr, Enc_Set_Key);
20400318:	fc442783          	lw	a5,-60(s0)
2040031c:	85be                	mv	a1,a5
2040031e:	2a05e50b          	0x2a05e50b
20400322:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:113
    asm volatile("fence":: : "memory");
20400326:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:116
    //printf("Set Key  finish : %07x \n", rd);

    asm volatile("fence");
2040032a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:117
    ROCC_INSTRUCTION_DSS(0, rd, c_addr, c_len, Enc_Set_P);
2040032e:	fd442783          	lw	a5,-44(s0)
20400332:	85be                	mv	a1,a5
20400334:	fd042603          	lw	a2,-48(s0)
20400338:	22c5f50b          	0x22c5f50b
2040033c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:118
    asm volatile("fence":: : "memory");
20400340:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:121
    //printf("Set Plain text finish length : %08x \n", rd);

    asm volatile("fence");
20400344:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:122
    ROCC_INSTRUCTION_DSS(0, rd, ad_addr, ad_len, Enc_Set_AD);
20400348:	fdc42783          	lw	a5,-36(s0)
2040034c:	85be                	mv	a1,a5
2040034e:	fd842603          	lw	a2,-40(s0)
20400352:	24c5f50b          	0x24c5f50b
20400356:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:123
    asm volatile("fence":: : "memory");
2040035a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:126
    //printf("Set Associated Data finish length: %08x \n", rd);

    asm volatile("fence");
2040035e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:127
    ROCC_INSTRUCTION_DS(0, rd, d_addr, Enc_Set_C_Tag);
20400362:	fcc42783          	lw	a5,-52(s0)
20400366:	85be                	mv	a1,a5
20400368:	2605e50b          	0x2605e50b
2040036c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:128
    asm volatile("fence":: : "memory");
20400370:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:131
    //printf("Set Dec addr: %08x \n", rd);

    asm volatile("fence");
20400374:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:132
    ROCC_INSTRUCTION_DS(0, rd, rd, Dec_Init);
20400378:	fec42583          	lw	a1,-20(s0)
2040037c:	3005e50b          	0x3005e50b
20400380:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:133
    asm volatile("fence":: : "memory");
20400384:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:135
    //printf("Finish AEAD Dec %08x \n", rd);
    return rd;
20400388:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../AsconHW/AEAD_HW.h:136
}
2040038c:	853e                	mv	a0,a5
2040038e:	5472                	lw	s0,60(sp)
20400390:	6121                	addi	sp,sp,64
20400392:	8082                	ret

20400394 <ROUND>:
ROUND():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:47
    }
    return res;

}

static inline void ROUND(ascon_state_t *s, u32 C) {
20400394:	711d                	addi	sp,sp,-96
20400396:	cea2                	sw	s0,92(sp)
20400398:	1080                	addi	s0,sp,96
2040039a:	faa42623          	sw	a0,-84(s0)
2040039e:	fab42423          	sw	a1,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:50
    ascon_state_t t;
    // addition of round constant
    s->xl[2] ^=C;
204003a2:	fac42783          	lw	a5,-84(s0)
204003a6:	4fd8                	lw	a4,28(a5)
204003a8:	fa842783          	lw	a5,-88(s0)
204003ac:	8f3d                	xor	a4,a4,a5
204003ae:	fac42783          	lw	a5,-84(s0)
204003b2:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:54
    // printstate(" round constant", s);
    // substitution layer

    s->xh[0] ^= s->xh[4];
204003b4:	fac42783          	lw	a5,-84(s0)
204003b8:	4398                	lw	a4,0(a5)
204003ba:	fac42783          	lw	a5,-84(s0)
204003be:	4b9c                	lw	a5,16(a5)
204003c0:	8f3d                	xor	a4,a4,a5
204003c2:	fac42783          	lw	a5,-84(s0)
204003c6:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:55
    s->xl[0] ^= s->xl[4];
204003c8:	fac42783          	lw	a5,-84(s0)
204003cc:	4bd8                	lw	a4,20(a5)
204003ce:	fac42783          	lw	a5,-84(s0)
204003d2:	53dc                	lw	a5,36(a5)
204003d4:	8f3d                	xor	a4,a4,a5
204003d6:	fac42783          	lw	a5,-84(s0)
204003da:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:57

    s->xh[4] ^= s->xh[3];
204003dc:	fac42783          	lw	a5,-84(s0)
204003e0:	4b98                	lw	a4,16(a5)
204003e2:	fac42783          	lw	a5,-84(s0)
204003e6:	47dc                	lw	a5,12(a5)
204003e8:	8f3d                	xor	a4,a4,a5
204003ea:	fac42783          	lw	a5,-84(s0)
204003ee:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:58
    s->xl[4] ^= s->xl[3];
204003f0:	fac42783          	lw	a5,-84(s0)
204003f4:	53d8                	lw	a4,36(a5)
204003f6:	fac42783          	lw	a5,-84(s0)
204003fa:	539c                	lw	a5,32(a5)
204003fc:	8f3d                	xor	a4,a4,a5
204003fe:	fac42783          	lw	a5,-84(s0)
20400402:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:60

    s->xh[2] ^= s->xh[1];
20400404:	fac42783          	lw	a5,-84(s0)
20400408:	4798                	lw	a4,8(a5)
2040040a:	fac42783          	lw	a5,-84(s0)
2040040e:	43dc                	lw	a5,4(a5)
20400410:	8f3d                	xor	a4,a4,a5
20400412:	fac42783          	lw	a5,-84(s0)
20400416:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:61
    s->xl[2] ^= s->xl[1];
20400418:	fac42783          	lw	a5,-84(s0)
2040041c:	4fd8                	lw	a4,28(a5)
2040041e:	fac42783          	lw	a5,-84(s0)
20400422:	4f9c                	lw	a5,24(a5)
20400424:	8f3d                	xor	a4,a4,a5
20400426:	fac42783          	lw	a5,-84(s0)
2040042a:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:63
    // start of keccak s-box
    t.xh[0] = s->xh[0] ^ (~s->xh[1] & s->xh[2]);
2040042c:	fac42783          	lw	a5,-84(s0)
20400430:	4398                	lw	a4,0(a5)
20400432:	fac42783          	lw	a5,-84(s0)
20400436:	43dc                	lw	a5,4(a5)
20400438:	fff7c693          	not	a3,a5
2040043c:	fac42783          	lw	a5,-84(s0)
20400440:	479c                	lw	a5,8(a5)
20400442:	8ff5                	and	a5,a5,a3
20400444:	8fb9                	xor	a5,a5,a4
20400446:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:64
    t.xl[0] = s->xl[0] ^ (~s->xl[1] & s->xl[2]);
2040044a:	fac42783          	lw	a5,-84(s0)
2040044e:	4bd8                	lw	a4,20(a5)
20400450:	fac42783          	lw	a5,-84(s0)
20400454:	4f9c                	lw	a5,24(a5)
20400456:	fff7c693          	not	a3,a5
2040045a:	fac42783          	lw	a5,-84(s0)
2040045e:	4fdc                	lw	a5,28(a5)
20400460:	8ff5                	and	a5,a5,a3
20400462:	8fb9                	xor	a5,a5,a4
20400464:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:66

    t.xh[1] = s->xh[1] ^ (~s->xh[2] & s->xh[3]);
20400468:	fac42783          	lw	a5,-84(s0)
2040046c:	43d8                	lw	a4,4(a5)
2040046e:	fac42783          	lw	a5,-84(s0)
20400472:	479c                	lw	a5,8(a5)
20400474:	fff7c693          	not	a3,a5
20400478:	fac42783          	lw	a5,-84(s0)
2040047c:	47dc                	lw	a5,12(a5)
2040047e:	8ff5                	and	a5,a5,a3
20400480:	8fb9                	xor	a5,a5,a4
20400482:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:67
    t.xl[1] = s->xl[1] ^ (~s->xl[2] & s->xl[3]);
20400486:	fac42783          	lw	a5,-84(s0)
2040048a:	4f98                	lw	a4,24(a5)
2040048c:	fac42783          	lw	a5,-84(s0)
20400490:	4fdc                	lw	a5,28(a5)
20400492:	fff7c693          	not	a3,a5
20400496:	fac42783          	lw	a5,-84(s0)
2040049a:	539c                	lw	a5,32(a5)
2040049c:	8ff5                	and	a5,a5,a3
2040049e:	8fb9                	xor	a5,a5,a4
204004a0:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:69

    t.xh[2] = s->xh[2] ^ (~s->xh[3] & s->xh[4]);
204004a4:	fac42783          	lw	a5,-84(s0)
204004a8:	4798                	lw	a4,8(a5)
204004aa:	fac42783          	lw	a5,-84(s0)
204004ae:	47dc                	lw	a5,12(a5)
204004b0:	fff7c693          	not	a3,a5
204004b4:	fac42783          	lw	a5,-84(s0)
204004b8:	4b9c                	lw	a5,16(a5)
204004ba:	8ff5                	and	a5,a5,a3
204004bc:	8fb9                	xor	a5,a5,a4
204004be:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:70
    t.xl[2] = s->xl[2] ^ (~s->xl[3] & s->xl[4]);
204004c2:	fac42783          	lw	a5,-84(s0)
204004c6:	4fd8                	lw	a4,28(a5)
204004c8:	fac42783          	lw	a5,-84(s0)
204004cc:	539c                	lw	a5,32(a5)
204004ce:	fff7c693          	not	a3,a5
204004d2:	fac42783          	lw	a5,-84(s0)
204004d6:	53dc                	lw	a5,36(a5)
204004d8:	8ff5                	and	a5,a5,a3
204004da:	8fb9                	xor	a5,a5,a4
204004dc:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:72

    t.xh[3] = s->xh[3] ^ (~s->xh[4] & s->xh[0]);
204004e0:	fac42783          	lw	a5,-84(s0)
204004e4:	47d8                	lw	a4,12(a5)
204004e6:	fac42783          	lw	a5,-84(s0)
204004ea:	4b9c                	lw	a5,16(a5)
204004ec:	fff7c693          	not	a3,a5
204004f0:	fac42783          	lw	a5,-84(s0)
204004f4:	439c                	lw	a5,0(a5)
204004f6:	8ff5                	and	a5,a5,a3
204004f8:	8fb9                	xor	a5,a5,a4
204004fa:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:73
    t.xl[3] = s->xl[3] ^ (~s->xl[4] & s->xl[0]);
204004fe:	fac42783          	lw	a5,-84(s0)
20400502:	5398                	lw	a4,32(a5)
20400504:	fac42783          	lw	a5,-84(s0)
20400508:	53dc                	lw	a5,36(a5)
2040050a:	fff7c693          	not	a3,a5
2040050e:	fac42783          	lw	a5,-84(s0)
20400512:	4bdc                	lw	a5,20(a5)
20400514:	8ff5                	and	a5,a5,a3
20400516:	8fb9                	xor	a5,a5,a4
20400518:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:75

    t.xh[4] = s->xh[4] ^ (~s->xh[0] & s->xh[1]);
2040051c:	fac42783          	lw	a5,-84(s0)
20400520:	4b98                	lw	a4,16(a5)
20400522:	fac42783          	lw	a5,-84(s0)
20400526:	439c                	lw	a5,0(a5)
20400528:	fff7c693          	not	a3,a5
2040052c:	fac42783          	lw	a5,-84(s0)
20400530:	43dc                	lw	a5,4(a5)
20400532:	8ff5                	and	a5,a5,a3
20400534:	8fb9                	xor	a5,a5,a4
20400536:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:76
    t.xl[4] = s->xl[4] ^ (~s->xl[0] & s->xl[1]);
2040053a:	fac42783          	lw	a5,-84(s0)
2040053e:	53d8                	lw	a4,36(a5)
20400540:	fac42783          	lw	a5,-84(s0)
20400544:	4bdc                	lw	a5,20(a5)
20400546:	fff7c693          	not	a3,a5
2040054a:	fac42783          	lw	a5,-84(s0)
2040054e:	4f9c                	lw	a5,24(a5)
20400550:	8ff5                	and	a5,a5,a3
20400552:	8fb9                	xor	a5,a5,a4
20400554:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:78
    // end of keccak s-box
    t.xh[1] ^= t.xh[0];
20400558:	fcc42703          	lw	a4,-52(s0)
2040055c:	fc842783          	lw	a5,-56(s0)
20400560:	8fb9                	xor	a5,a5,a4
20400562:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:79
    t.xh[0] ^= t.xh[4];
20400566:	fc842703          	lw	a4,-56(s0)
2040056a:	fd842783          	lw	a5,-40(s0)
2040056e:	8fb9                	xor	a5,a5,a4
20400570:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:80
    t.xh[3] ^= t.xh[2];
20400574:	fd442703          	lw	a4,-44(s0)
20400578:	fd042783          	lw	a5,-48(s0)
2040057c:	8fb9                	xor	a5,a5,a4
2040057e:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:81
    t.xh[2] = ~t.xh[2];
20400582:	fd042783          	lw	a5,-48(s0)
20400586:	fff7c793          	not	a5,a5
2040058a:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:82
    t.xl[1] ^= t.xl[0];
2040058e:	fe042703          	lw	a4,-32(s0)
20400592:	fdc42783          	lw	a5,-36(s0)
20400596:	8fb9                	xor	a5,a5,a4
20400598:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:83
    t.xl[0] ^= t.xl[4];
2040059c:	fdc42703          	lw	a4,-36(s0)
204005a0:	fec42783          	lw	a5,-20(s0)
204005a4:	8fb9                	xor	a5,a5,a4
204005a6:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:84
    t.xl[3] ^= t.xl[2];
204005aa:	fe842703          	lw	a4,-24(s0)
204005ae:	fe442783          	lw	a5,-28(s0)
204005b2:	8fb9                	xor	a5,a5,a4
204005b4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:85
    t.xl[2] = ~t.xl[2];
204005b8:	fe442783          	lw	a5,-28(s0)
204005bc:	fff7c793          	not	a5,a5
204005c0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:91
    // printstate(" substitution layer", &t);
    u64  ror1;
    u64  ror2;
    //linear diffusion layer

    s->xh[0] = t.xh[0] ^ RORH(19,t.xh[0],t.xl[0]) ^ RORH(28,t.xh[0], t.xl[0]);
204005c4:	fc842703          	lw	a4,-56(s0)
204005c8:	fdc42783          	lw	a5,-36(s0)
204005cc:	00d79693          	slli	a3,a5,0xd
204005d0:	fc842783          	lw	a5,-56(s0)
204005d4:	83cd                	srli	a5,a5,0x13
204005d6:	8fd5                	or	a5,a5,a3
204005d8:	8f3d                	xor	a4,a4,a5
204005da:	fdc42783          	lw	a5,-36(s0)
204005de:	00479693          	slli	a3,a5,0x4
204005e2:	fc842783          	lw	a5,-56(s0)
204005e6:	83f1                	srli	a5,a5,0x1c
204005e8:	8fd5                	or	a5,a5,a3
204005ea:	8f3d                	xor	a4,a4,a5
204005ec:	fac42783          	lw	a5,-84(s0)
204005f0:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:92
    s->xl[0] = t.xl[0] ^ RORL(19,t.xh[0],t.xl[0]) ^ RORL(28,t.xh[0], t.xl[0]);
204005f2:	fdc42703          	lw	a4,-36(s0)
204005f6:	fc842783          	lw	a5,-56(s0)
204005fa:	00d79693          	slli	a3,a5,0xd
204005fe:	fdc42783          	lw	a5,-36(s0)
20400602:	83cd                	srli	a5,a5,0x13
20400604:	8fd5                	or	a5,a5,a3
20400606:	8f3d                	xor	a4,a4,a5
20400608:	fc842783          	lw	a5,-56(s0)
2040060c:	00479693          	slli	a3,a5,0x4
20400610:	fdc42783          	lw	a5,-36(s0)
20400614:	83f1                	srli	a5,a5,0x1c
20400616:	8fd5                	or	a5,a5,a3
20400618:	8f3d                	xor	a4,a4,a5
2040061a:	fac42783          	lw	a5,-84(s0)
2040061e:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:94

    s->xh[1] = t.xh[1] ^ RORH(61,t.xh[1],t.xl[1]) ^ RORH(39,t.xh[1], t.xl[1]);
20400620:	fcc42703          	lw	a4,-52(s0)
20400624:	fcc42783          	lw	a5,-52(s0)
20400628:	00379693          	slli	a3,a5,0x3
2040062c:	fe042783          	lw	a5,-32(s0)
20400630:	83f5                	srli	a5,a5,0x1d
20400632:	8fd5                	or	a5,a5,a3
20400634:	8f3d                	xor	a4,a4,a5
20400636:	fcc42783          	lw	a5,-52(s0)
2040063a:	01979693          	slli	a3,a5,0x19
2040063e:	fe042783          	lw	a5,-32(s0)
20400642:	839d                	srli	a5,a5,0x7
20400644:	8fd5                	or	a5,a5,a3
20400646:	8f3d                	xor	a4,a4,a5
20400648:	fac42783          	lw	a5,-84(s0)
2040064c:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:95
    s->xl[1] = t.xl[1] ^ RORL(61,t.xh[1],t.xl[1]) ^ RORL(39,t.xh[1], t.xl[1]);
2040064e:	fe042703          	lw	a4,-32(s0)
20400652:	fe042783          	lw	a5,-32(s0)
20400656:	00379693          	slli	a3,a5,0x3
2040065a:	fcc42783          	lw	a5,-52(s0)
2040065e:	83f5                	srli	a5,a5,0x1d
20400660:	8fd5                	or	a5,a5,a3
20400662:	8f3d                	xor	a4,a4,a5
20400664:	fe042783          	lw	a5,-32(s0)
20400668:	01979693          	slli	a3,a5,0x19
2040066c:	fcc42783          	lw	a5,-52(s0)
20400670:	839d                	srli	a5,a5,0x7
20400672:	8fd5                	or	a5,a5,a3
20400674:	8f3d                	xor	a4,a4,a5
20400676:	fac42783          	lw	a5,-84(s0)
2040067a:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:97

    s->xh[2] = t.xh[2] ^ RORH(1,t.xh[2],t.xl[2]) ^ RORH(6,t.xh[2], t.xl[2]);
2040067c:	fd042703          	lw	a4,-48(s0)
20400680:	fe442783          	lw	a5,-28(s0)
20400684:	01f79693          	slli	a3,a5,0x1f
20400688:	fd042783          	lw	a5,-48(s0)
2040068c:	8385                	srli	a5,a5,0x1
2040068e:	8fd5                	or	a5,a5,a3
20400690:	8f3d                	xor	a4,a4,a5
20400692:	fe442783          	lw	a5,-28(s0)
20400696:	01a79693          	slli	a3,a5,0x1a
2040069a:	fd042783          	lw	a5,-48(s0)
2040069e:	8399                	srli	a5,a5,0x6
204006a0:	8fd5                	or	a5,a5,a3
204006a2:	8f3d                	xor	a4,a4,a5
204006a4:	fac42783          	lw	a5,-84(s0)
204006a8:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:98
    s->xl[2] = t.xl[2] ^ RORL(1,t.xh[2],t.xl[2]) ^ RORL(6,t.xh[2], t.xl[2]);
204006aa:	fe442703          	lw	a4,-28(s0)
204006ae:	fd042783          	lw	a5,-48(s0)
204006b2:	01f79693          	slli	a3,a5,0x1f
204006b6:	fe442783          	lw	a5,-28(s0)
204006ba:	8385                	srli	a5,a5,0x1
204006bc:	8fd5                	or	a5,a5,a3
204006be:	8f3d                	xor	a4,a4,a5
204006c0:	fd042783          	lw	a5,-48(s0)
204006c4:	01a79693          	slli	a3,a5,0x1a
204006c8:	fe442783          	lw	a5,-28(s0)
204006cc:	8399                	srli	a5,a5,0x6
204006ce:	8fd5                	or	a5,a5,a3
204006d0:	8f3d                	xor	a4,a4,a5
204006d2:	fac42783          	lw	a5,-84(s0)
204006d6:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:100

    s->xh[3] = t.xh[3] ^ RORH(10,t.xh[3],t.xl[3]) ^ RORH(17,t.xh[3], t.xl[3]);
204006d8:	fd442703          	lw	a4,-44(s0)
204006dc:	fe842783          	lw	a5,-24(s0)
204006e0:	01679693          	slli	a3,a5,0x16
204006e4:	fd442783          	lw	a5,-44(s0)
204006e8:	83a9                	srli	a5,a5,0xa
204006ea:	8fd5                	or	a5,a5,a3
204006ec:	8f3d                	xor	a4,a4,a5
204006ee:	fe842783          	lw	a5,-24(s0)
204006f2:	00f79693          	slli	a3,a5,0xf
204006f6:	fd442783          	lw	a5,-44(s0)
204006fa:	83c5                	srli	a5,a5,0x11
204006fc:	8fd5                	or	a5,a5,a3
204006fe:	8f3d                	xor	a4,a4,a5
20400700:	fac42783          	lw	a5,-84(s0)
20400704:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:101
    s->xl[3] = t.xl[3] ^ RORL(10,t.xh[3],t.xl[3]) ^ RORL(17,t.xh[3], t.xl[3]);
20400706:	fe842703          	lw	a4,-24(s0)
2040070a:	fd442783          	lw	a5,-44(s0)
2040070e:	01679693          	slli	a3,a5,0x16
20400712:	fe842783          	lw	a5,-24(s0)
20400716:	83a9                	srli	a5,a5,0xa
20400718:	8fd5                	or	a5,a5,a3
2040071a:	8f3d                	xor	a4,a4,a5
2040071c:	fd442783          	lw	a5,-44(s0)
20400720:	00f79693          	slli	a3,a5,0xf
20400724:	fe842783          	lw	a5,-24(s0)
20400728:	83c5                	srli	a5,a5,0x11
2040072a:	8fd5                	or	a5,a5,a3
2040072c:	8f3d                	xor	a4,a4,a5
2040072e:	fac42783          	lw	a5,-84(s0)
20400732:	d398                	sw	a4,32(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:103

    s->xh[4] = t.xh[4] ^ RORH(7,t.xh[4],t.xl[4]) ^ RORH(41,t.xh[4], t.xl[4]);
20400734:	fd842703          	lw	a4,-40(s0)
20400738:	fec42783          	lw	a5,-20(s0)
2040073c:	01979693          	slli	a3,a5,0x19
20400740:	fd842783          	lw	a5,-40(s0)
20400744:	839d                	srli	a5,a5,0x7
20400746:	8fd5                	or	a5,a5,a3
20400748:	8f3d                	xor	a4,a4,a5
2040074a:	fd842783          	lw	a5,-40(s0)
2040074e:	01779693          	slli	a3,a5,0x17
20400752:	fec42783          	lw	a5,-20(s0)
20400756:	83a5                	srli	a5,a5,0x9
20400758:	8fd5                	or	a5,a5,a3
2040075a:	8f3d                	xor	a4,a4,a5
2040075c:	fac42783          	lw	a5,-84(s0)
20400760:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:104
    s->xl[4] = t.xl[4] ^ RORL(7,t.xh[4],t.xl[4]) ^ RORL(41,t.xh[4], t.xl[4]);
20400762:	fec42703          	lw	a4,-20(s0)
20400766:	fd842783          	lw	a5,-40(s0)
2040076a:	01979693          	slli	a3,a5,0x19
2040076e:	fec42783          	lw	a5,-20(s0)
20400772:	839d                	srli	a5,a5,0x7
20400774:	8fd5                	or	a5,a5,a3
20400776:	8f3d                	xor	a4,a4,a5
20400778:	fec42783          	lw	a5,-20(s0)
2040077c:	01779693          	slli	a3,a5,0x17
20400780:	fd842783          	lw	a5,-40(s0)
20400784:	83a5                	srli	a5,a5,0x9
20400786:	8fd5                	or	a5,a5,a3
20400788:	8f3d                	xor	a4,a4,a5
2040078a:	fac42783          	lw	a5,-84(s0)
2040078e:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:107

    //printstate(" round output", s);
}
20400790:	0001                	nop
20400792:	4476                	lw	s0,92(sp)
20400794:	6125                	addi	sp,sp,96
20400796:	8082                	ret

20400798 <P12>:
P12():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:110


static inline void P12(ascon_state_t* s) {
20400798:	1101                	addi	sp,sp,-32
2040079a:	ce06                	sw	ra,28(sp)
2040079c:	cc22                	sw	s0,24(sp)
2040079e:	1000                	addi	s0,sp,32
204007a0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:111
  ROUND(s, 0xf0);
204007a4:	0f000593          	li	a1,240
204007a8:	fec42503          	lw	a0,-20(s0)
204007ac:	36e5                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:112
  ROUND(s, 0xe1);
204007ae:	0e100593          	li	a1,225
204007b2:	fec42503          	lw	a0,-20(s0)
204007b6:	3ef9                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:113
  ROUND(s, 0xd2);
204007b8:	0d200593          	li	a1,210
204007bc:	fec42503          	lw	a0,-20(s0)
204007c0:	3ed1                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:114
  ROUND(s, 0xc3);
204007c2:	0c300593          	li	a1,195
204007c6:	fec42503          	lw	a0,-20(s0)
204007ca:	36e9                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:115
  ROUND(s, 0xb4);
204007cc:	0b400593          	li	a1,180
204007d0:	fec42503          	lw	a0,-20(s0)
204007d4:	36c1                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:116
  ROUND(s, 0xa5);
204007d6:	0a500593          	li	a1,165
204007da:	fec42503          	lw	a0,-20(s0)
204007de:	3e5d                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:117
  ROUND(s, 0x96);
204007e0:	09600593          	li	a1,150
204007e4:	fec42503          	lw	a0,-20(s0)
204007e8:	3675                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:118
  ROUND(s, 0x87);
204007ea:	08700593          	li	a1,135
204007ee:	fec42503          	lw	a0,-20(s0)
204007f2:	364d                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:119
  ROUND(s, 0x78);
204007f4:	07800593          	li	a1,120
204007f8:	fec42503          	lw	a0,-20(s0)
204007fc:	3e61                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:120
  ROUND(s, 0x69);
204007fe:	06900593          	li	a1,105
20400802:	fec42503          	lw	a0,-20(s0)
20400806:	3679                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:121
  ROUND(s, 0x5a);
20400808:	05a00593          	li	a1,90
2040080c:	fec42503          	lw	a0,-20(s0)
20400810:	3651                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:122
  ROUND(s, 0x4b);
20400812:	04b00593          	li	a1,75
20400816:	fec42503          	lw	a0,-20(s0)
2040081a:	3ead                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:123
}
2040081c:	0001                	nop
2040081e:	40f2                	lw	ra,28(sp)
20400820:	4462                	lw	s0,24(sp)
20400822:	6105                	addi	sp,sp,32
20400824:	8082                	ret

20400826 <P6>:
P6():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:136
  ROUND(s, 0x69);
  ROUND(s, 0x5a);
  ROUND(s, 0x4b);
}

static inline void P6(ascon_state_t* s) {
20400826:	1101                	addi	sp,sp,-32
20400828:	ce06                	sw	ra,28(sp)
2040082a:	cc22                	sw	s0,24(sp)
2040082c:	1000                	addi	s0,sp,32
2040082e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:137
  ROUND(s, 0x96);
20400832:	09600593          	li	a1,150
20400836:	fec42503          	lw	a0,-20(s0)
2040083a:	3ea9                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:138
  ROUND(s, 0x87);
2040083c:	08700593          	li	a1,135
20400840:	fec42503          	lw	a0,-20(s0)
20400844:	3e81                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:139
  ROUND(s, 0x78);
20400846:	07800593          	li	a1,120
2040084a:	fec42503          	lw	a0,-20(s0)
2040084e:	3699                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:140
  ROUND(s, 0x69);
20400850:	06900593          	li	a1,105
20400854:	fec42503          	lw	a0,-20(s0)
20400858:	3e35                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:141
  ROUND(s, 0x5a);
2040085a:	05a00593          	li	a1,90
2040085e:	fec42503          	lw	a0,-20(s0)
20400862:	3e0d                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:142
  ROUND(s, 0x4b);
20400864:	04b00593          	li	a1,75
20400868:	fec42503          	lw	a0,-20(s0)
2040086c:	3625                	jal	20400394 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/round.h:143
}
2040086e:	0001                	nop
20400870:	40f2                	lw	ra,28(sp)
20400872:	4462                	lw	s0,24(sp)
20400874:	6105                	addi	sp,sp,32
20400876:	8082                	ret

20400878 <printstate>:
printstate():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/util.h:57
        mask.xl = 0x00000000;
    }
    return mask;
}*/

void printstate(const char *text, const ascon_state_t *s, int debug) {
20400878:	7179                	addi	sp,sp,-48
2040087a:	d606                	sw	ra,44(sp)
2040087c:	d422                	sw	s0,40(sp)
2040087e:	1800                	addi	s0,sp,48
20400880:	fca42e23          	sw	a0,-36(s0)
20400884:	fcb42c23          	sw	a1,-40(s0)
20400888:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/util.h:58
    if(debug){
2040088c:	fd442783          	lw	a5,-44(s0)
20400890:	cfa1                	beqz	a5,204008e8 <printstate+0x70>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/util.h:59
    printf("%s\n", text);
20400892:	fdc42503          	lw	a0,-36(s0)
20400896:	279000ef          	jal	ra,2040130e <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/util.h:60
    for (int i = 0; i < 5; i++) {
2040089a:	fe042623          	sw	zero,-20(s0)
2040089e:	a82d                	j	204008d8 <printstate+0x60>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/util.h:61 (discriminator 3)
        printf("%08X %08X \n", s->xh[i], s->xl[i]);
204008a0:	fd842703          	lw	a4,-40(s0)
204008a4:	fec42783          	lw	a5,-20(s0)
204008a8:	078a                	slli	a5,a5,0x2
204008aa:	97ba                	add	a5,a5,a4
204008ac:	4394                	lw	a3,0(a5)
204008ae:	fd842703          	lw	a4,-40(s0)
204008b2:	fec42783          	lw	a5,-20(s0)
204008b6:	0791                	addi	a5,a5,4
204008b8:	078a                	slli	a5,a5,0x2
204008ba:	97ba                	add	a5,a5,a4
204008bc:	43dc                	lw	a5,4(a5)
204008be:	863e                	mv	a2,a5
204008c0:	85b6                	mv	a1,a3
204008c2:	204067b7          	lui	a5,0x20406
204008c6:	f0c78513          	addi	a0,a5,-244 # 20405f0c <_exit+0x1e>
204008ca:	079000ef          	jal	ra,20401142 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/util.h:60 (discriminator 3)
    for (int i = 0; i < 5; i++) {
204008ce:	fec42783          	lw	a5,-20(s0)
204008d2:	0785                	addi	a5,a5,1
204008d4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/util.h:60 (discriminator 1)
204008d8:	fec42703          	lw	a4,-20(s0)
204008dc:	4791                	li	a5,4
204008de:	fce7d1e3          	bge	a5,a4,204008a0 <printstate+0x28>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/util.h:63
    }
    printf("\n");}
204008e2:	4529                	li	a0,10
204008e4:	0a3000ef          	jal	ra,20401186 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/util.h:64
}
204008e8:	0001                	nop
204008ea:	50b2                	lw	ra,44(sp)
204008ec:	5422                	lw	s0,40(sp)
204008ee:	6145                	addi	sp,sp,48
204008f0:	8082                	ret

204008f2 <crypto_aead_decrypt>:
crypto_aead_decrypt():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:126
    c++;
    *c = s.xl[4];
    return 0;
}

int crypto_aead_decrypt(u32 *m, u32 *mlen, u32 *c, u32 clen, u32 *ad, u32 adlen, u32 *npub, u32 *k, int debug) {
204008f2:	7135                	addi	sp,sp,-160
204008f4:	cf06                	sw	ra,156(sp)
204008f6:	cd22                	sw	s0,152(sp)
204008f8:	1100                	addi	s0,sp,160
204008fa:	f6a42e23          	sw	a0,-132(s0)
204008fe:	f6b42c23          	sw	a1,-136(s0)
20400902:	f6c42a23          	sw	a2,-140(s0)
20400906:	f6d42823          	sw	a3,-144(s0)
2040090a:	f6e42623          	sw	a4,-148(s0)
2040090e:	f6f42423          	sw	a5,-152(s0)
20400912:	f7042223          	sw	a6,-156(s0)
20400916:	f7142023          	sw	a7,-160(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:128
    /* set plaintext size */
    *mlen = clen;
2040091a:	f7842783          	lw	a5,-136(s0)
2040091e:	f7042703          	lw	a4,-144(s0)
20400922:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:131
    /* load key and nonce */
    u64 K0, K1, N0, N1;
    K0.xh = k[0];
20400924:	f6042783          	lw	a5,-160(s0)
20400928:	439c                	lw	a5,0(a5)
2040092a:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:132
    K0.xl = k[1];
2040092e:	f6042783          	lw	a5,-160(s0)
20400932:	43dc                	lw	a5,4(a5)
20400934:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:133
    K1.xh = k[2];
20400938:	f6042783          	lw	a5,-160(s0)
2040093c:	479c                	lw	a5,8(a5)
2040093e:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:134
    K1.xl = k[3];
20400942:	f6042783          	lw	a5,-160(s0)
20400946:	47dc                	lw	a5,12(a5)
20400948:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:135
    N0.xh = npub[0];
2040094c:	f6442783          	lw	a5,-156(s0)
20400950:	439c                	lw	a5,0(a5)
20400952:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:136
    N0.xl = npub[1];
20400956:	f6442783          	lw	a5,-156(s0)
2040095a:	43dc                	lw	a5,4(a5)
2040095c:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:137
    N1.xh = npub[2];
20400960:	f6442783          	lw	a5,-156(s0)
20400964:	479c                	lw	a5,8(a5)
20400966:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:138
    N1.xl = npub[3];
2040096a:	f6442783          	lw	a5,-156(s0)
2040096e:	47dc                	lw	a5,12(a5)
20400970:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:142

    /* initialize */
    ascon_state_t s;
    s.xh[0] = A_128_IV_H;
20400974:	804017b7          	lui	a5,0x80401
20400978:	c0678793          	addi	a5,a5,-1018 # 80400c06 <metal_segment_heap_target_end+0x3fd852>
2040097c:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:143
    s.xl[0] = A_128_IV_L;
20400980:	fa042823          	sw	zero,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:144
    s.xh[1] = K0.xh;
20400984:	fdc42783          	lw	a5,-36(s0)
20400988:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:145
    s.xl[1] = K0.xl;
2040098c:	fe042783          	lw	a5,-32(s0)
20400990:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:146
    s.xh[2] = K1.xh;
20400994:	fd442783          	lw	a5,-44(s0)
20400998:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:147
    s.xl[2] = K1.xl;
2040099c:	fd842783          	lw	a5,-40(s0)
204009a0:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:148
    s.xh[3] = N0.xh;
204009a4:	fcc42783          	lw	a5,-52(s0)
204009a8:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:149
    s.xl[3] = N0.xl;
204009ac:	fd042783          	lw	a5,-48(s0)
204009b0:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:150
    s.xh[4] = N1.xh;
204009b4:	fc442783          	lw	a5,-60(s0)
204009b8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:151
    s.xl[4] = N1.xl;
204009bc:	fc842783          	lw	a5,-56(s0)
204009c0:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:152
    printstate("After init", &s, debug);
204009c4:	f9c40793          	addi	a5,s0,-100
204009c8:	4010                	lw	a2,0(s0)
204009ca:	85be                	mv	a1,a5
204009cc:	204067b7          	lui	a5,0x20406
204009d0:	f1878513          	addi	a0,a5,-232 # 20405f18 <_exit+0x2a>
204009d4:	3555                	jal	20400878 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:153
    P12(&s);
204009d6:	f9c40793          	addi	a5,s0,-100
204009da:	853e                	mv	a0,a5
204009dc:	3b75                	jal	20400798 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:155

    s.xh[3] ^= K0.xh;
204009de:	fa842703          	lw	a4,-88(s0)
204009e2:	fdc42783          	lw	a5,-36(s0)
204009e6:	8fb9                	xor	a5,a5,a4
204009e8:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:156
    s.xl[3] ^= K0.xl;
204009ec:	fbc42703          	lw	a4,-68(s0)
204009f0:	fe042783          	lw	a5,-32(s0)
204009f4:	8fb9                	xor	a5,a5,a4
204009f6:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:157
    s.xh[4] ^= K1.xh;
204009fa:	fac42703          	lw	a4,-84(s0)
204009fe:	fd442783          	lw	a5,-44(s0)
20400a02:	8fb9                	xor	a5,a5,a4
20400a04:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:158
    s.xl[4] ^= K1.xl;
20400a08:	fc042703          	lw	a4,-64(s0)
20400a0c:	fd842783          	lw	a5,-40(s0)
20400a10:	8fb9                	xor	a5,a5,a4
20400a12:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:159
    printstate("Xor 2 key", &s, debug);
20400a16:	f9c40793          	addi	a5,s0,-100
20400a1a:	4010                	lw	a2,0(s0)
20400a1c:	85be                	mv	a1,a5
20400a1e:	204067b7          	lui	a5,0x20406
20400a22:	f2478513          	addi	a0,a5,-220 # 20405f24 <_exit+0x36>
20400a26:	3d89                	jal	20400878 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:161

    if (adlen) {
20400a28:	f6842783          	lw	a5,-152(s0)
20400a2c:	16078263          	beqz	a5,20400b90 <crypto_aead_decrypt+0x29e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:162
        while (adlen >= 8) {
20400a30:	a8a9                	j	20400a8a <crypto_aead_decrypt+0x198>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:163
            s.xh[0] ^= *ad;
20400a32:	f9c42703          	lw	a4,-100(s0)
20400a36:	f6c42783          	lw	a5,-148(s0)
20400a3a:	439c                	lw	a5,0(a5)
20400a3c:	8fb9                	xor	a5,a5,a4
20400a3e:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:164
            ad++;
20400a42:	f6c42783          	lw	a5,-148(s0)
20400a46:	0791                	addi	a5,a5,4
20400a48:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:165
            s.xl[0] ^= *ad;
20400a4c:	fb042703          	lw	a4,-80(s0)
20400a50:	f6c42783          	lw	a5,-148(s0)
20400a54:	439c                	lw	a5,0(a5)
20400a56:	8fb9                	xor	a5,a5,a4
20400a58:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:166
            ad++;
20400a5c:	f6c42783          	lw	a5,-148(s0)
20400a60:	0791                	addi	a5,a5,4
20400a62:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:167
            P6(&s);
20400a66:	f9c40793          	addi	a5,s0,-100
20400a6a:	853e                	mv	a0,a5
20400a6c:	3b6d                	jal	20400826 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:168
            printstate("Absorb AD", &s, debug);
20400a6e:	f9c40793          	addi	a5,s0,-100
20400a72:	4010                	lw	a2,0(s0)
20400a74:	85be                	mv	a1,a5
20400a76:	204067b7          	lui	a5,0x20406
20400a7a:	f3078513          	addi	a0,a5,-208 # 20405f30 <_exit+0x42>
20400a7e:	3bed                	jal	20400878 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:169
            adlen -= 8;
20400a80:	f6842783          	lw	a5,-152(s0)
20400a84:	17e1                	addi	a5,a5,-8
20400a86:	f6f42423          	sw	a5,-152(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:162
        while (adlen >= 8) {
20400a8a:	f6842703          	lw	a4,-152(s0)
20400a8e:	479d                	li	a5,7
20400a90:	fae7e1e3          	bltu	a5,a4,20400a32 <crypto_aead_decrypt+0x140>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:171
        }
        s.xh[0] ^= TRUNH(adlen, *ad);
20400a94:	f9c42703          	lw	a4,-100(s0)
20400a98:	f6842683          	lw	a3,-152(s0)
20400a9c:	4791                	li	a5,4
20400a9e:	00d7f663          	bgeu	a5,a3,20400aaa <crypto_aead_decrypt+0x1b8>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:171 (discriminator 1)
20400aa2:	f6c42783          	lw	a5,-148(s0)
20400aa6:	439c                	lw	a5,0(a5)
20400aa8:	a025                	j	20400ad0 <crypto_aead_decrypt+0x1de>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:171 (discriminator 2)
20400aaa:	f6842783          	lw	a5,-152(s0)
20400aae:	c385                	beqz	a5,20400ace <crypto_aead_decrypt+0x1dc>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:171 (discriminator 4)
20400ab0:	f6c42783          	lw	a5,-148(s0)
20400ab4:	4394                	lw	a3,0(a5)
20400ab6:	f6842603          	lw	a2,-152(s0)
20400aba:	4781                	li	a5,0
20400abc:	8f91                	sub	a5,a5,a2
20400abe:	078e                	slli	a5,a5,0x3
20400ac0:	02078793          	addi	a5,a5,32
20400ac4:	567d                	li	a2,-1
20400ac6:	00f617b3          	sll	a5,a2,a5
20400aca:	8ff5                	and	a5,a5,a3
20400acc:	a011                	j	20400ad0 <crypto_aead_decrypt+0x1de>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:171 (discriminator 5)
20400ace:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:171 (discriminator 8)
20400ad0:	8fb9                	xor	a5,a5,a4
20400ad2:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:172 (discriminator 8)
        ad++;
20400ad6:	f6c42783          	lw	a5,-148(s0)
20400ada:	0791                	addi	a5,a5,4
20400adc:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:173 (discriminator 8)
        s.xl[0] ^= TRUNL(adlen, *ad);
20400ae0:	fb042703          	lw	a4,-80(s0)
20400ae4:	f6842683          	lw	a3,-152(s0)
20400ae8:	4791                	li	a5,4
20400aea:	02d7f163          	bgeu	a5,a3,20400b0c <crypto_aead_decrypt+0x21a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:173 (discriminator 1)
20400aee:	f6c42783          	lw	a5,-148(s0)
20400af2:	4394                	lw	a3,0(a5)
20400af4:	f6842603          	lw	a2,-152(s0)
20400af8:	4781                	li	a5,0
20400afa:	8f91                	sub	a5,a5,a2
20400afc:	078e                	slli	a5,a5,0x3
20400afe:	04078793          	addi	a5,a5,64
20400b02:	567d                	li	a2,-1
20400b04:	00f617b3          	sll	a5,a2,a5
20400b08:	8ff5                	and	a5,a5,a3
20400b0a:	a011                	j	20400b0e <crypto_aead_decrypt+0x21c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:173 (discriminator 2)
20400b0c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:173 (discriminator 4)
20400b0e:	8fb9                	xor	a5,a5,a4
20400b10:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:175 (discriminator 4)

        s.xh[0] ^= PADH(adlen);
20400b14:	f9c42703          	lw	a4,-100(s0)
20400b18:	f6842683          	lw	a3,-152(s0)
20400b1c:	478d                	li	a5,3
20400b1e:	00d7ea63          	bltu	a5,a3,20400b32 <crypto_aead_decrypt+0x240>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:175 (discriminator 1)
20400b22:	f6842783          	lw	a5,-152(s0)
20400b26:	078e                	slli	a5,a5,0x3
20400b28:	800006b7          	lui	a3,0x80000
20400b2c:	00f6d7b3          	srl	a5,a3,a5
20400b30:	a011                	j	20400b34 <crypto_aead_decrypt+0x242>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:175 (discriminator 2)
20400b32:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:175 (discriminator 4)
20400b34:	8fb9                	xor	a5,a5,a4
20400b36:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:176 (discriminator 4)
        s.xl[0] ^= PADL(adlen);
20400b3a:	fb042703          	lw	a4,-80(s0)
20400b3e:	f6842683          	lw	a3,-152(s0)
20400b42:	478d                	li	a5,3
20400b44:	02d7f563          	bgeu	a5,a3,20400b6e <crypto_aead_decrypt+0x27c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:176 (discriminator 1)
20400b48:	f6842683          	lw	a3,-152(s0)
20400b4c:	47a1                	li	a5,8
20400b4e:	00f68e63          	beq	a3,a5,20400b6a <crypto_aead_decrypt+0x278>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:176 (discriminator 3)
20400b52:	f6842683          	lw	a3,-152(s0)
20400b56:	200007b7          	lui	a5,0x20000
20400b5a:	17f1                	addi	a5,a5,-4
20400b5c:	97b6                	add	a5,a5,a3
20400b5e:	078e                	slli	a5,a5,0x3
20400b60:	800006b7          	lui	a3,0x80000
20400b64:	00f6d7b3          	srl	a5,a3,a5
20400b68:	a021                	j	20400b70 <crypto_aead_decrypt+0x27e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:176 (discriminator 4)
20400b6a:	4781                	li	a5,0
20400b6c:	a011                	j	20400b70 <crypto_aead_decrypt+0x27e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:176 (discriminator 2)
20400b6e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:176 (discriminator 8)
20400b70:	8fb9                	xor	a5,a5,a4
20400b72:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:177 (discriminator 8)
        printstate("Padded AD", &s, debug);
20400b76:	f9c40793          	addi	a5,s0,-100
20400b7a:	4010                	lw	a2,0(s0)
20400b7c:	85be                	mv	a1,a5
20400b7e:	204067b7          	lui	a5,0x20406
20400b82:	f3c78513          	addi	a0,a5,-196 # 20405f3c <_exit+0x4e>
20400b86:	39cd                	jal	20400878 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:178 (discriminator 8)
        P6(&s);
20400b88:	f9c40793          	addi	a5,s0,-100
20400b8c:	853e                	mv	a0,a5
20400b8e:	3961                	jal	20400826 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:181
    }
    /* domain separation */
    s.xl[4] ^= 1;
20400b90:	fc042783          	lw	a5,-64(s0)
20400b94:	0017c793          	xori	a5,a5,1
20400b98:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:182
    printstate("Domain Separation", &s, debug);
20400b9c:	f9c40793          	addi	a5,s0,-100
20400ba0:	4010                	lw	a2,0(s0)
20400ba2:	85be                	mv	a1,a5
20400ba4:	204067b7          	lui	a5,0x20406
20400ba8:	f4878513          	addi	a0,a5,-184 # 20405f48 <_exit+0x5a>
20400bac:	31f1                	jal	20400878 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:184
    u32 ch, cl;
    while (clen >= 8) {
20400bae:	a849                	j	20400c40 <crypto_aead_decrypt+0x34e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:186
        // printf("clen %d\n", clen);
        ch = *c;
20400bb0:	f7442783          	lw	a5,-140(s0)
20400bb4:	439c                	lw	a5,0(a5)
20400bb6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:187
        c++;
20400bba:	f7442783          	lw	a5,-140(s0)
20400bbe:	0791                	addi	a5,a5,4
20400bc0:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:188
        cl = *c;
20400bc4:	f7442783          	lw	a5,-140(s0)
20400bc8:	439c                	lw	a5,0(a5)
20400bca:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:189
        c++;
20400bce:	f7442783          	lw	a5,-140(s0)
20400bd2:	0791                	addi	a5,a5,4
20400bd4:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:190
        *m = s.xh[0] ^ ch;
20400bd8:	f9c42703          	lw	a4,-100(s0)
20400bdc:	fec42783          	lw	a5,-20(s0)
20400be0:	8f3d                	xor	a4,a4,a5
20400be2:	f7c42783          	lw	a5,-132(s0)
20400be6:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:191
        m++;
20400be8:	f7c42783          	lw	a5,-132(s0)
20400bec:	0791                	addi	a5,a5,4
20400bee:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:192
        *m = s.xl[0] ^ cl;
20400bf2:	fb042703          	lw	a4,-80(s0)
20400bf6:	fe842783          	lw	a5,-24(s0)
20400bfa:	8f3d                	xor	a4,a4,a5
20400bfc:	f7c42783          	lw	a5,-132(s0)
20400c00:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:193
        m++;
20400c02:	f7c42783          	lw	a5,-132(s0)
20400c06:	0791                	addi	a5,a5,4
20400c08:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:195

        s.xh[0] = ch;
20400c0c:	fec42783          	lw	a5,-20(s0)
20400c10:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:196
        s.xl[0] = cl;
20400c14:	fe842783          	lw	a5,-24(s0)
20400c18:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:197
        clen -= 8;
20400c1c:	f7042783          	lw	a5,-144(s0)
20400c20:	17e1                	addi	a5,a5,-8
20400c22:	f6f42823          	sw	a5,-144(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:198
        printstate("Absorb M", &s, debug);
20400c26:	f9c40793          	addi	a5,s0,-100
20400c2a:	4010                	lw	a2,0(s0)
20400c2c:	85be                	mv	a1,a5
20400c2e:	204067b7          	lui	a5,0x20406
20400c32:	f5c78513          	addi	a0,a5,-164 # 20405f5c <_exit+0x6e>
20400c36:	3189                	jal	20400878 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:199
        P6(&s);
20400c38:	f9c40793          	addi	a5,s0,-100
20400c3c:	853e                	mv	a0,a5
20400c3e:	36e5                	jal	20400826 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:184
    while (clen >= 8) {
20400c40:	f7042703          	lw	a4,-144(s0)
20400c44:	479d                	li	a5,7
20400c46:	f6e7e5e3          	bltu	a5,a4,20400bb0 <crypto_aead_decrypt+0x2be>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:202
    }
    /* final block*/
    ch = 0;
20400c4a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:203
    cl = 0;
20400c4e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:204
    if (clen) {
20400c52:	f7042783          	lw	a5,-144(s0)
20400c56:	10078863          	beqz	a5,20400d66 <crypto_aead_decrypt+0x474>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:205
        ch = TRUNH(clen, *c);
20400c5a:	f7042703          	lw	a4,-144(s0)
20400c5e:	4791                	li	a5,4
20400c60:	00e7f663          	bgeu	a5,a4,20400c6c <crypto_aead_decrypt+0x37a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:205 (discriminator 1)
20400c64:	f7442783          	lw	a5,-140(s0)
20400c68:	439c                	lw	a5,0(a5)
20400c6a:	a025                	j	20400c92 <crypto_aead_decrypt+0x3a0>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:205 (discriminator 2)
20400c6c:	f7042783          	lw	a5,-144(s0)
20400c70:	c385                	beqz	a5,20400c90 <crypto_aead_decrypt+0x39e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:205 (discriminator 4)
20400c72:	f7442783          	lw	a5,-140(s0)
20400c76:	4398                	lw	a4,0(a5)
20400c78:	f7042683          	lw	a3,-144(s0)
20400c7c:	4781                	li	a5,0
20400c7e:	8f95                	sub	a5,a5,a3
20400c80:	078e                	slli	a5,a5,0x3
20400c82:	02078793          	addi	a5,a5,32
20400c86:	56fd                	li	a3,-1
20400c88:	00f697b3          	sll	a5,a3,a5
20400c8c:	8ff9                	and	a5,a5,a4
20400c8e:	a011                	j	20400c92 <crypto_aead_decrypt+0x3a0>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:205 (discriminator 5)
20400c90:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:205 (discriminator 8)
20400c92:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:206 (discriminator 8)
        c++;
20400c96:	f7442783          	lw	a5,-140(s0)
20400c9a:	0791                	addi	a5,a5,4
20400c9c:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:207 (discriminator 8)
        cl = TRUNL(clen, *c);
20400ca0:	f7042703          	lw	a4,-144(s0)
20400ca4:	4791                	li	a5,4
20400ca6:	02e7f163          	bgeu	a5,a4,20400cc8 <crypto_aead_decrypt+0x3d6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:207 (discriminator 1)
20400caa:	f7442783          	lw	a5,-140(s0)
20400cae:	4398                	lw	a4,0(a5)
20400cb0:	f7042683          	lw	a3,-144(s0)
20400cb4:	4781                	li	a5,0
20400cb6:	8f95                	sub	a5,a5,a3
20400cb8:	078e                	slli	a5,a5,0x3
20400cba:	04078793          	addi	a5,a5,64
20400cbe:	56fd                	li	a3,-1
20400cc0:	00f697b3          	sll	a5,a3,a5
20400cc4:	8ff9                	and	a5,a5,a4
20400cc6:	a011                	j	20400cca <crypto_aead_decrypt+0x3d8>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:207 (discriminator 2)
20400cc8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:207 (discriminator 4)
20400cca:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:208 (discriminator 4)
        c++;
20400cce:	f7442783          	lw	a5,-140(s0)
20400cd2:	0791                	addi	a5,a5,4
20400cd4:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:209 (discriminator 4)
        *m = TRUNH(clen, s.xh[0] ^ ch);
20400cd8:	f7042703          	lw	a4,-144(s0)
20400cdc:	4791                	li	a5,4
20400cde:	00e7f863          	bgeu	a5,a4,20400cee <crypto_aead_decrypt+0x3fc>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:209 (discriminator 1)
20400ce2:	f9c42703          	lw	a4,-100(s0)
20400ce6:	fec42783          	lw	a5,-20(s0)
20400cea:	8fb9                	xor	a5,a5,a4
20400cec:	a035                	j	20400d18 <crypto_aead_decrypt+0x426>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:209 (discriminator 2)
20400cee:	f7042783          	lw	a5,-144(s0)
20400cf2:	c395                	beqz	a5,20400d16 <crypto_aead_decrypt+0x424>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:209 (discriminator 4)
20400cf4:	f9c42703          	lw	a4,-100(s0)
20400cf8:	fec42783          	lw	a5,-20(s0)
20400cfc:	8f3d                	xor	a4,a4,a5
20400cfe:	f7042683          	lw	a3,-144(s0)
20400d02:	4781                	li	a5,0
20400d04:	8f95                	sub	a5,a5,a3
20400d06:	078e                	slli	a5,a5,0x3
20400d08:	02078793          	addi	a5,a5,32
20400d0c:	56fd                	li	a3,-1
20400d0e:	00f697b3          	sll	a5,a3,a5
20400d12:	8ff9                	and	a5,a5,a4
20400d14:	a011                	j	20400d18 <crypto_aead_decrypt+0x426>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:209 (discriminator 5)
20400d16:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:209 (discriminator 8)
20400d18:	f7c42703          	lw	a4,-132(s0)
20400d1c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:210 (discriminator 8)
        m++;
20400d1e:	f7c42783          	lw	a5,-132(s0)
20400d22:	0791                	addi	a5,a5,4
20400d24:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:211 (discriminator 8)
        *m = TRUNL(clen, s.xl[0] ^ cl);
20400d28:	f7042703          	lw	a4,-144(s0)
20400d2c:	4791                	li	a5,4
20400d2e:	02e7f363          	bgeu	a5,a4,20400d54 <crypto_aead_decrypt+0x462>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:211 (discriminator 1)
20400d32:	fb042703          	lw	a4,-80(s0)
20400d36:	fe842783          	lw	a5,-24(s0)
20400d3a:	8f3d                	xor	a4,a4,a5
20400d3c:	f7042683          	lw	a3,-144(s0)
20400d40:	4781                	li	a5,0
20400d42:	8f95                	sub	a5,a5,a3
20400d44:	078e                	slli	a5,a5,0x3
20400d46:	04078793          	addi	a5,a5,64
20400d4a:	56fd                	li	a3,-1
20400d4c:	00f697b3          	sll	a5,a3,a5
20400d50:	8ff9                	and	a5,a5,a4
20400d52:	a011                	j	20400d56 <crypto_aead_decrypt+0x464>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:211 (discriminator 2)
20400d54:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:211 (discriminator 4)
20400d56:	f7c42703          	lw	a4,-132(s0)
20400d5a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:212 (discriminator 4)
        m++;
20400d5c:	f7c42783          	lw	a5,-132(s0)
20400d60:	0791                	addi	a5,a5,4
20400d62:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:214
    }
    s.xh[0] = CLEARH(clen, s.xh[0]);
20400d66:	f7042703          	lw	a4,-144(s0)
20400d6a:	4791                	li	a5,4
20400d6c:	02e7e863          	bltu	a5,a4,20400d9c <crypto_aead_decrypt+0x4aa>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:214 (discriminator 1)
20400d70:	f7042783          	lw	a5,-144(s0)
20400d74:	e781                	bnez	a5,20400d7c <crypto_aead_decrypt+0x48a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:214 (discriminator 3)
20400d76:	f9c42783          	lw	a5,-100(s0)
20400d7a:	a015                	j	20400d9e <crypto_aead_decrypt+0x4ac>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:214 (discriminator 4)
20400d7c:	f9c42703          	lw	a4,-100(s0)
20400d80:	f7042683          	lw	a3,-144(s0)
20400d84:	4781                	li	a5,0
20400d86:	8f95                	sub	a5,a5,a3
20400d88:	078e                	slli	a5,a5,0x3
20400d8a:	02078793          	addi	a5,a5,32
20400d8e:	56fd                	li	a3,-1
20400d90:	00f697b3          	sll	a5,a3,a5
20400d94:	fff7c793          	not	a5,a5
20400d98:	8ff9                	and	a5,a5,a4
20400d9a:	a011                	j	20400d9e <crypto_aead_decrypt+0x4ac>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:214 (discriminator 2)
20400d9c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:214 (discriminator 8)
20400d9e:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:215 (discriminator 8)
    s.xl[0] = CLEARL(clen, s.xl[0]);
20400da2:	f7042703          	lw	a4,-144(s0)
20400da6:	4791                	li	a5,4
20400da8:	02e7f263          	bgeu	a5,a4,20400dcc <crypto_aead_decrypt+0x4da>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:215 (discriminator 1)
20400dac:	fb042703          	lw	a4,-80(s0)
20400db0:	f7042683          	lw	a3,-144(s0)
20400db4:	4781                	li	a5,0
20400db6:	8f95                	sub	a5,a5,a3
20400db8:	078e                	slli	a5,a5,0x3
20400dba:	04078793          	addi	a5,a5,64
20400dbe:	56fd                	li	a3,-1
20400dc0:	00f697b3          	sll	a5,a3,a5
20400dc4:	fff7c793          	not	a5,a5
20400dc8:	8ff9                	and	a5,a5,a4
20400dca:	a019                	j	20400dd0 <crypto_aead_decrypt+0x4de>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:215 (discriminator 2)
20400dcc:	fb042783          	lw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:215 (discriminator 4)
20400dd0:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:216 (discriminator 4)
    printstate("clear bytes", &s, debug);
20400dd4:	f9c40793          	addi	a5,s0,-100
20400dd8:	4010                	lw	a2,0(s0)
20400dda:	85be                	mv	a1,a5
20400ddc:	204067b7          	lui	a5,0x20406
20400de0:	f8878513          	addi	a0,a5,-120 # 20405f88 <_exit+0x9a>
20400de4:	3c51                	jal	20400878 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:217 (discriminator 4)
    s.xh[0] |= ch;
20400de6:	f9c42703          	lw	a4,-100(s0)
20400dea:	fec42783          	lw	a5,-20(s0)
20400dee:	8fd9                	or	a5,a5,a4
20400df0:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:218 (discriminator 4)
    s.xl[0] |= cl;
20400df4:	fb042703          	lw	a4,-80(s0)
20400df8:	fe842783          	lw	a5,-24(s0)
20400dfc:	8fd9                	or	a5,a5,a4
20400dfe:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:219 (discriminator 4)
    s.xh[0] ^= PADH(clen);
20400e02:	f9c42703          	lw	a4,-100(s0)
20400e06:	f7042683          	lw	a3,-144(s0)
20400e0a:	478d                	li	a5,3
20400e0c:	00d7ea63          	bltu	a5,a3,20400e20 <crypto_aead_decrypt+0x52e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:219 (discriminator 1)
20400e10:	f7042783          	lw	a5,-144(s0)
20400e14:	078e                	slli	a5,a5,0x3
20400e16:	800006b7          	lui	a3,0x80000
20400e1a:	00f6d7b3          	srl	a5,a3,a5
20400e1e:	a011                	j	20400e22 <crypto_aead_decrypt+0x530>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:219 (discriminator 2)
20400e20:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:219 (discriminator 4)
20400e22:	8fb9                	xor	a5,a5,a4
20400e24:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:220 (discriminator 4)
    s.xl[0] ^= PADL(clen);
20400e28:	fb042703          	lw	a4,-80(s0)
20400e2c:	f7042683          	lw	a3,-144(s0)
20400e30:	478d                	li	a5,3
20400e32:	02d7f563          	bgeu	a5,a3,20400e5c <crypto_aead_decrypt+0x56a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:220 (discriminator 1)
20400e36:	f7042683          	lw	a3,-144(s0)
20400e3a:	47a1                	li	a5,8
20400e3c:	00f68e63          	beq	a3,a5,20400e58 <crypto_aead_decrypt+0x566>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:220 (discriminator 3)
20400e40:	f7042683          	lw	a3,-144(s0)
20400e44:	200007b7          	lui	a5,0x20000
20400e48:	17f1                	addi	a5,a5,-4
20400e4a:	97b6                	add	a5,a5,a3
20400e4c:	078e                	slli	a5,a5,0x3
20400e4e:	800006b7          	lui	a3,0x80000
20400e52:	00f6d7b3          	srl	a5,a3,a5
20400e56:	a021                	j	20400e5e <crypto_aead_decrypt+0x56c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:220 (discriminator 4)
20400e58:	4781                	li	a5,0
20400e5a:	a011                	j	20400e5e <crypto_aead_decrypt+0x56c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:220 (discriminator 2)
20400e5c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:220 (discriminator 8)
20400e5e:	8fb9                	xor	a5,a5,a4
20400e60:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:221 (discriminator 8)
    printstate("Pad M", &s, debug);
20400e64:	f9c40793          	addi	a5,s0,-100
20400e68:	4010                	lw	a2,0(s0)
20400e6a:	85be                	mv	a1,a5
20400e6c:	204067b7          	lui	a5,0x20406
20400e70:	f6878513          	addi	a0,a5,-152 # 20405f68 <_exit+0x7a>
20400e74:	3411                	jal	20400878 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:223 (discriminator 8)
    /* Ending */
    s.xh[1] ^= K0.xh;
20400e76:	fa042703          	lw	a4,-96(s0)
20400e7a:	fdc42783          	lw	a5,-36(s0)
20400e7e:	8fb9                	xor	a5,a5,a4
20400e80:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:224 (discriminator 8)
    s.xl[1] ^= K0.xl;
20400e84:	fb442703          	lw	a4,-76(s0)
20400e88:	fe042783          	lw	a5,-32(s0)
20400e8c:	8fb9                	xor	a5,a5,a4
20400e8e:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:225 (discriminator 8)
    s.xh[2] ^= K1.xh;
20400e92:	fa442703          	lw	a4,-92(s0)
20400e96:	fd442783          	lw	a5,-44(s0)
20400e9a:	8fb9                	xor	a5,a5,a4
20400e9c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:226 (discriminator 8)
    s.xl[2] ^= K1.xl;
20400ea0:	fb842703          	lw	a4,-72(s0)
20400ea4:	fd842783          	lw	a5,-40(s0)
20400ea8:	8fb9                	xor	a5,a5,a4
20400eaa:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:227 (discriminator 8)
    printstate("Xor key 1", &s, debug);
20400eae:	f9c40793          	addi	a5,s0,-100
20400eb2:	4010                	lw	a2,0(s0)
20400eb4:	85be                	mv	a1,a5
20400eb6:	204067b7          	lui	a5,0x20406
20400eba:	f7078513          	addi	a0,a5,-144 # 20405f70 <_exit+0x82>
20400ebe:	3a6d                	jal	20400878 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:229 (discriminator 8)

    P12(&s);
20400ec0:	f9c40793          	addi	a5,s0,-100
20400ec4:	853e                	mv	a0,a5
20400ec6:	38c9                	jal	20400798 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:230 (discriminator 8)
    s.xh[3] ^= K0.xh;
20400ec8:	fa842703          	lw	a4,-88(s0)
20400ecc:	fdc42783          	lw	a5,-36(s0)
20400ed0:	8fb9                	xor	a5,a5,a4
20400ed2:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:231 (discriminator 8)
    s.xl[3] ^= K0.xl;
20400ed6:	fbc42703          	lw	a4,-68(s0)
20400eda:	fe042783          	lw	a5,-32(s0)
20400ede:	8fb9                	xor	a5,a5,a4
20400ee0:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:232 (discriminator 8)
    s.xh[4] ^= K1.xh;
20400ee4:	fac42703          	lw	a4,-84(s0)
20400ee8:	fd442783          	lw	a5,-44(s0)
20400eec:	8fb9                	xor	a5,a5,a4
20400eee:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:233 (discriminator 8)
    s.xl[4] ^= K1.xl;
20400ef2:	fc042703          	lw	a4,-64(s0)
20400ef6:	fd842783          	lw	a5,-40(s0)
20400efa:	8fb9                	xor	a5,a5,a4
20400efc:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:234 (discriminator 8)
    printstate("Xor key 2", &s, debug);
20400f00:	f9c40793          	addi	a5,s0,-100
20400f04:	4010                	lw	a2,0(s0)
20400f06:	85be                	mv	a1,a5
20400f08:	204067b7          	lui	a5,0x20406
20400f0c:	f7c78513          	addi	a0,a5,-132 # 20405f7c <_exit+0x8e>
20400f10:	32a5                	jal	20400878 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:238 (discriminator 8)

    /* TAG*/
    u32 Tag[4];
    Tag[0] = s.xh[3];
20400f12:	fa842783          	lw	a5,-88(s0)
20400f16:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:239 (discriminator 8)
    Tag[1] = s.xl[3];
20400f1a:	fbc42783          	lw	a5,-68(s0)
20400f1e:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:240 (discriminator 8)
    Tag[2] = s.xh[4];
20400f22:	fac42783          	lw	a5,-84(s0)
20400f26:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:241 (discriminator 8)
    Tag[3] = s.xl[4];
20400f2a:	fc042783          	lw	a5,-64(s0)
20400f2e:	f8f42c23          	sw	a5,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:242 (discriminator 8)
    int res = 0;
20400f32:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:247 (discriminator 8)
    /*for(int i = 0 ; i < 4; i ++){
        res |= c[i] ^ Tag[i];
        printf("%08x  %08x\n", c[i], Tag[i]);
    }*/
    return res;
20400f36:	fe442783          	lw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../Asconref/aead.h:248 (discriminator 8)
}
20400f3a:	853e                	mv	a0,a5
20400f3c:	40fa                	lw	ra,156(sp)
20400f3e:	446a                	lw	s0,152(sp)
20400f40:	610d                	addi	sp,sp,160
20400f42:	8082                	ret

20400f44 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../RoCCcommon/csr.h:49

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
20400f44:	1101                	addi	sp,sp,-32
20400f46:	ce22                	sw	s0,28(sp)
20400f48:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../RoCCcommon/csr.h:50
    int tmp = 0;
20400f4a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../RoCCcommon/csr.h:51
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
20400f4e:	b00027f3          	csrr	a5,mcycle
20400f52:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../RoCCcommon/csr.h:52
    return tmp;
20400f56:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/../RoCCcommon/csr.h:53
}
20400f5a:	853e                	mv	a0,a5
20400f5c:	4472                	lw	s0,28(sp)
20400f5e:	6105                	addi	sp,sp,32
20400f60:	8082                	ret

20400f62 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:6
#include "../AsconHW/AEAD_HW.h"
#include "../Asconref/aead.h"
#include <stdio.h>
#include "../RoCCcommon/csr.h"

int main(void) {
20400f62:	7139                	addi	sp,sp,-64
20400f64:	de06                	sw	ra,60(sp)
20400f66:	dc22                	sw	s0,56(sp)
20400f68:	0080                	addi	s0,sp,64
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:7
    u32 plain_len = 32;
20400f6a:	02000793          	li	a5,32
20400f6e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:8
    u32 asso_len = 32; /// CReo que asignaste a memoria
20400f72:	02000793          	li	a5,32
20400f76:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:9
    u32 clen = 0;
20400f7a:	fc042a23          	sw	zero,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:10
    u32 plain_len_int = plain_len / 8;
20400f7e:	fec42783          	lw	a5,-20(s0)
20400f82:	838d                	srli	a5,a5,0x3
20400f84:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:11
    plain_len_int = (plain_len % 8 == 0) ? plain_len_int*2 : plain_len_int*2 +2;
20400f88:	fec42783          	lw	a5,-20(s0)
20400f8c:	8b9d                	andi	a5,a5,7
20400f8e:	e789                	bnez	a5,20400f98 <main+0x36>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:11 (discriminator 1)
20400f90:	fe442783          	lw	a5,-28(s0)
20400f94:	0786                	slli	a5,a5,0x1
20400f96:	a029                	j	20400fa0 <main+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:11 (discriminator 2)
20400f98:	fe442783          	lw	a5,-28(s0)
20400f9c:	0785                	addi	a5,a5,1
20400f9e:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:11 (discriminator 4)
20400fa0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:26 (discriminator 4)
    static u32 Key[4] = {0x11111111, 0x22222222, 0x33333333, 0x44444445};

    static u32 *tag_addr;


    printf("Init Ascon Dec \n");
20400fa4:	204067b7          	lui	a5,0x20406
20400fa8:	fa078513          	addi	a0,a5,-96 # 20405fa0 <_exit+0xb2>
20400fac:	268d                	jal	2040130e <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:27 (discriminator 4)
    printf("Ad addr = %08x\n", asso_text);
20400fae:	800007b7          	lui	a5,0x80000
20400fb2:	00078593          	mv	a1,a5
20400fb6:	204067b7          	lui	a5,0x20406
20400fba:	fb078513          	addi	a0,a5,-80 # 20405fb0 <_exit+0xc2>
20400fbe:	2251                	jal	20401142 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:28 (discriminator 4)
    printf("Pl addr = %08x\n", plain_text);
20400fc0:	800007b7          	lui	a5,0x80000
20400fc4:	7d078593          	addi	a1,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd41c>
20400fc8:	204067b7          	lui	a5,0x20406
20400fcc:	fc078513          	addi	a0,a5,-64 # 20405fc0 <_exit+0xd2>
20400fd0:	2a8d                	jal	20401142 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:29 (discriminator 4)
    printf("Ct addr = %08x\n", cipher_text);
20400fd2:	800017b7          	lui	a5,0x80001
20400fd6:	73c78593          	addi	a1,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffe388>
20400fda:	204067b7          	lui	a5,0x20406
20400fde:	fd078513          	addi	a0,a5,-48 # 20405fd0 <_exit+0xe2>
20400fe2:	2285                	jal	20401142 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:30 (discriminator 4)
    printf("Ke addr = %08x\n", Key);
20400fe4:	800017b7          	lui	a5,0x80001
20400fe8:	fa078593          	addi	a1,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdbec>
20400fec:	204067b7          	lui	a5,0x20406
20400ff0:	fe078513          	addi	a0,a5,-32 # 20405fe0 <_exit+0xf2>
20400ff4:	22b9                	jal	20401142 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:31 (discriminator 4)
    printf("Np addr = %08x\n", Nonce);
20400ff6:	800017b7          	lui	a5,0x80001
20400ffa:	fb078593          	addi	a1,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdbfc>
20400ffe:	204067b7          	lui	a5,0x20406
20401002:	ff078513          	addi	a0,a5,-16 # 20405ff0 <_exit+0x102>
20401006:	2a35                	jal	20401142 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:32 (discriminator 4)
    printf("hash addr = %08x\n", hash);
20401008:	01418593          	addi	a1,gp,20 # 80001f1c <hash.2790>
2040100c:	204067b7          	lui	a5,0x20406
20401010:	00078513          	mv	a0,a5
20401014:	223d                	jal	20401142 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:34 (discriminator 4)
    unsigned start, end, HWcycles;
    int rd = 0;
20401016:	fe042023          	sw	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:36 (discriminator 4)
    // RoCC
    write_csr(mstatus, MSTATUS_XS);
2040101a:	67e1                	lui	a5,0x18
2040101c:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:44 (discriminator 4)
    HASH(plain_text,plain_len,hash);
    printf(" Finish Hash: %07x \n", rd);
    printC(hash,9,0,1);*/


    printf("Dec HW: \n");
20401020:	204067b7          	lui	a5,0x20406
20401024:	01478513          	addi	a0,a5,20 # 20406014 <_exit+0x126>
20401028:	24dd                	jal	2040130e <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:45 (discriminator 4)
    start = rdcycle();
2040102a:	3f29                	jal	20400f44 <rdcycle>
2040102c:	87aa                	mv	a5,a0
2040102e:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:46 (discriminator 4)
    AEAD_DEC(asso_text, asso_len, plain_text, plain_len, cipher_text, Nonce, Key, dec_text);
20401032:	800027b7          	lui	a5,0x80002
20401036:	f4478893          	addi	a7,a5,-188 # 80001f44 <metal_segment_heap_target_end+0xffffeb90>
2040103a:	800017b7          	lui	a5,0x80001
2040103e:	fa078813          	addi	a6,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdbec>
20401042:	800017b7          	lui	a5,0x80001
20401046:	fb078793          	addi	a5,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdbfc>
2040104a:	80001737          	lui	a4,0x80001
2040104e:	73c70713          	addi	a4,a4,1852 # 8000173c <metal_segment_heap_target_end+0xffffe388>
20401052:	fec42683          	lw	a3,-20(s0)
20401056:	80000637          	lui	a2,0x80000
2040105a:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd41c>
2040105e:	fe842583          	lw	a1,-24(s0)
20401062:	80000537          	lui	a0,0x80000
20401066:	00050513          	mv	a0,a0
2040106a:	a54ff0ef          	jal	ra,204002be <AEAD_DEC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:47 (discriminator 4)
    end = rdcycle();
2040106e:	3dd9                	jal	20400f44 <rdcycle>
20401070:	87aa                	mv	a5,a0
20401072:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:48 (discriminator 4)
    printf("Total time HW = %d cycles\n",end-start);
20401076:	fd842703          	lw	a4,-40(s0)
2040107a:	fdc42783          	lw	a5,-36(s0)
2040107e:	40f707b3          	sub	a5,a4,a5
20401082:	85be                	mv	a1,a5
20401084:	204067b7          	lui	a5,0x20406
20401088:	02078513          	addi	a0,a5,32 # 20406020 <_exit+0x132>
2040108c:	285d                	jal	20401142 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:49 (discriminator 4)
    printC(cipher_text, plain_len_int, 1, 1);
2040108e:	4685                	li	a3,1
20401090:	4605                	li	a2,1
20401092:	fe442583          	lw	a1,-28(s0)
20401096:	800017b7          	lui	a5,0x80001
2040109a:	73c78513          	addi	a0,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffe388>
2040109e:	962ff0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:50 (discriminator 4)
    printf("\nX\n");
204010a2:	204067b7          	lui	a5,0x20406
204010a6:	03c78513          	addi	a0,a5,60 # 2040603c <_exit+0x14e>
204010aa:	2495                	jal	2040130e <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:51 (discriminator 4)
    printf("Dec SW: \n");
204010ac:	204067b7          	lui	a5,0x20406
204010b0:	04078513          	addi	a0,a5,64 # 20406040 <_exit+0x152>
204010b4:	2ca9                	jal	2040130e <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:52 (discriminator 4)
    start = rdcycle();
204010b6:	3579                	jal	20400f44 <rdcycle>
204010b8:	87aa                	mv	a5,a0
204010ba:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:53 (discriminator 4)
    crypto_aead_decrypt(cipher_text, &clen,plain_text,plain_len,asso_text,asso_len,Nonce,   Key,0);
204010be:	fd440593          	addi	a1,s0,-44
204010c2:	c002                	sw	zero,0(sp)
204010c4:	800017b7          	lui	a5,0x80001
204010c8:	fa078893          	addi	a7,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffdbec>
204010cc:	800017b7          	lui	a5,0x80001
204010d0:	fb078813          	addi	a6,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffdbfc>
204010d4:	fe842783          	lw	a5,-24(s0)
204010d8:	80000737          	lui	a4,0x80000
204010dc:	00070713          	mv	a4,a4
204010e0:	fec42683          	lw	a3,-20(s0)
204010e4:	80000637          	lui	a2,0x80000
204010e8:	7d060613          	addi	a2,a2,2000 # 800007d0 <metal_segment_heap_target_end+0xffffd41c>
204010ec:	80001537          	lui	a0,0x80001
204010f0:	73c50513          	addi	a0,a0,1852 # 8000173c <metal_segment_heap_target_end+0xffffe388>
204010f4:	ffeff0ef          	jal	ra,204008f2 <crypto_aead_decrypt>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:54 (discriminator 4)
    end = rdcycle();
204010f8:	35b1                	jal	20400f44 <rdcycle>
204010fa:	87aa                	mv	a5,a0
204010fc:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:55 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20401100:	fd842703          	lw	a4,-40(s0)
20401104:	fdc42783          	lw	a5,-36(s0)
20401108:	40f707b3          	sub	a5,a4,a5
2040110c:	85be                	mv	a1,a5
2040110e:	204067b7          	lui	a5,0x20406
20401112:	04c78513          	addi	a0,a5,76 # 2040604c <_exit+0x15e>
20401116:	2035                	jal	20401142 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:56 (discriminator 4)
    printC(cipher_text, plain_len_int, 1, 1);
20401118:	4685                	li	a3,1
2040111a:	4605                	li	a2,1
2040111c:	fe442583          	lw	a1,-28(s0)
20401120:	800017b7          	lui	a5,0x80001
20401124:	73c78513          	addi	a0,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffe388>
20401128:	8d8ff0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:57 (discriminator 4)
    printf("\nX\n");
2040112c:	204067b7          	lui	a5,0x20406
20401130:	03c78513          	addi	a0,a5,60 # 2040603c <_exit+0x14e>
20401134:	2ae9                	jal	2040130e <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:60 (discriminator 4)


    return 0;
20401136:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconDec/AsconDec.c:63 (discriminator 4)


20401138:	853e                	mv	a0,a5
2040113a:	50f2                	lw	ra,60(sp)
2040113c:	5462                	lw	s0,56(sp)
2040113e:	6121                	addi	sp,sp,64
20401140:	8082                	ret

20401142 <iprintf>:
printf():
20401142:	7139                	addi	sp,sp,-64
20401144:	da3e                	sw	a5,52(sp)
20401146:	d22e                	sw	a1,36(sp)
20401148:	d432                	sw	a2,40(sp)
2040114a:	d636                	sw	a3,44(sp)
2040114c:	d83a                	sw	a4,48(sp)
2040114e:	dc42                	sw	a6,56(sp)
20401150:	de46                	sw	a7,60(sp)
20401152:	5fc00797          	auipc	a5,0x5fc00
20401156:	5b678793          	addi	a5,a5,1462 # 80001708 <_impure_ptr>
2040115a:	cc22                	sw	s0,24(sp)
2040115c:	4380                	lw	s0,0(a5)
2040115e:	ca26                	sw	s1,20(sp)
20401160:	ce06                	sw	ra,28(sp)
20401162:	84aa                	mv	s1,a0
20401164:	c409                	beqz	s0,2040116e <iprintf+0x2c>
20401166:	4c1c                	lw	a5,24(s0)
20401168:	e399                	bnez	a5,2040116e <iprintf+0x2c>
2040116a:	8522                	mv	a0,s0
2040116c:	23d5                	jal	20401750 <__sinit>
2040116e:	440c                	lw	a1,8(s0)
20401170:	1054                	addi	a3,sp,36
20401172:	8626                	mv	a2,s1
20401174:	8522                	mv	a0,s0
20401176:	c636                	sw	a3,12(sp)
20401178:	2df000ef          	jal	ra,20401c56 <_vfiprintf_r>
2040117c:	40f2                	lw	ra,28(sp)
2040117e:	4462                	lw	s0,24(sp)
20401180:	44d2                	lw	s1,20(sp)
20401182:	6121                	addi	sp,sp,64
20401184:	8082                	ret

20401186 <putchar>:
putchar():
20401186:	1101                	addi	sp,sp,-32
20401188:	5fc00797          	auipc	a5,0x5fc00
2040118c:	58078793          	addi	a5,a5,1408 # 80001708 <_impure_ptr>
20401190:	cc22                	sw	s0,24(sp)
20401192:	4380                	lw	s0,0(a5)
20401194:	ce06                	sw	ra,28(sp)
20401196:	85aa                	mv	a1,a0
20401198:	c419                	beqz	s0,204011a6 <putchar+0x20>
2040119a:	4c1c                	lw	a5,24(s0)
2040119c:	e789                	bnez	a5,204011a6 <putchar+0x20>
2040119e:	c62a                	sw	a0,12(sp)
204011a0:	8522                	mv	a0,s0
204011a2:	237d                	jal	20401750 <__sinit>
204011a4:	45b2                	lw	a1,12(sp)
204011a6:	4410                	lw	a2,8(s0)
204011a8:	8522                	mv	a0,s0
204011aa:	4462                	lw	s0,24(sp)
204011ac:	40f2                	lw	ra,28(sp)
204011ae:	6105                	addi	sp,sp,32
204011b0:	a009                	j	204011b2 <_putc_r>

204011b2 <_putc_r>:
_putc_r():
204011b2:	1101                	addi	sp,sp,-32
204011b4:	cc22                	sw	s0,24(sp)
204011b6:	ce06                	sw	ra,28(sp)
204011b8:	842a                	mv	s0,a0
204011ba:	c901                	beqz	a0,204011ca <_putc_r+0x18>
204011bc:	4d1c                	lw	a5,24(a0)
204011be:	e791                	bnez	a5,204011ca <_putc_r+0x18>
204011c0:	c632                	sw	a2,12(sp)
204011c2:	c42e                	sw	a1,8(sp)
204011c4:	2371                	jal	20401750 <__sinit>
204011c6:	4632                	lw	a2,12(sp)
204011c8:	45a2                	lw	a1,8(sp)
204011ca:	00005797          	auipc	a5,0x5
204011ce:	ebe78793          	addi	a5,a5,-322 # 20406088 <__sf_fake_stdin>
204011d2:	02f61563          	bne	a2,a5,204011fc <_putc_r+0x4a>
204011d6:	4050                	lw	a2,4(s0)
204011d8:	461c                	lw	a5,8(a2)
204011da:	17fd                	addi	a5,a5,-1
204011dc:	c61c                	sw	a5,8(a2)
204011de:	0207df63          	bgez	a5,2040121c <_putc_r+0x6a>
204011e2:	4e18                	lw	a4,24(a2)
204011e4:	00e7c763          	blt	a5,a4,204011f2 <_putc_r+0x40>
204011e8:	0ff5f793          	andi	a5,a1,255
204011ec:	4729                	li	a4,10
204011ee:	02e79763          	bne	a5,a4,2040121c <_putc_r+0x6a>
204011f2:	8522                	mv	a0,s0
204011f4:	4462                	lw	s0,24(sp)
204011f6:	40f2                	lw	ra,28(sp)
204011f8:	6105                	addi	sp,sp,32
204011fa:	a20d                	j	2040131c <__swbuf_r>
204011fc:	00005797          	auipc	a5,0x5
20401200:	eac78793          	addi	a5,a5,-340 # 204060a8 <__sf_fake_stdout>
20401204:	00f61463          	bne	a2,a5,2040120c <_putc_r+0x5a>
20401208:	4410                	lw	a2,8(s0)
2040120a:	b7f9                	j	204011d8 <_putc_r+0x26>
2040120c:	00005797          	auipc	a5,0x5
20401210:	e5c78793          	addi	a5,a5,-420 # 20406068 <__sf_fake_stderr>
20401214:	fcf612e3          	bne	a2,a5,204011d8 <_putc_r+0x26>
20401218:	4450                	lw	a2,12(s0)
2040121a:	bf7d                	j	204011d8 <_putc_r+0x26>
2040121c:	421c                	lw	a5,0(a2)
2040121e:	0ff5f513          	andi	a0,a1,255
20401222:	00178713          	addi	a4,a5,1
20401226:	c218                	sw	a4,0(a2)
20401228:	00b78023          	sb	a1,0(a5)
2040122c:	40f2                	lw	ra,28(sp)
2040122e:	4462                	lw	s0,24(sp)
20401230:	6105                	addi	sp,sp,32
20401232:	8082                	ret

20401234 <_puts_r>:
_puts_r():
20401234:	1101                	addi	sp,sp,-32
20401236:	ca26                	sw	s1,20(sp)
20401238:	c84a                	sw	s2,16(sp)
2040123a:	ce06                	sw	ra,28(sp)
2040123c:	cc22                	sw	s0,24(sp)
2040123e:	c64e                	sw	s3,12(sp)
20401240:	c452                	sw	s4,8(sp)
20401242:	84aa                	mv	s1,a0
20401244:	892e                	mv	s2,a1
20401246:	c501                	beqz	a0,2040124e <_puts_r+0x1a>
20401248:	4d1c                	lw	a5,24(a0)
2040124a:	e391                	bnez	a5,2040124e <_puts_r+0x1a>
2040124c:	2311                	jal	20401750 <__sinit>
2040124e:	4c9c                	lw	a5,24(s1)
20401250:	4480                	lw	s0,8(s1)
20401252:	e399                	bnez	a5,20401258 <_puts_r+0x24>
20401254:	8526                	mv	a0,s1
20401256:	29ed                	jal	20401750 <__sinit>
20401258:	00005797          	auipc	a5,0x5
2040125c:	e3078793          	addi	a5,a5,-464 # 20406088 <__sf_fake_stdin>
20401260:	02f41c63          	bne	s0,a5,20401298 <_puts_r+0x64>
20401264:	40c0                	lw	s0,4(s1)
20401266:	00c45783          	lhu	a5,12(s0)
2040126a:	8ba1                	andi	a5,a5,8
2040126c:	c7b1                	beqz	a5,204012b8 <_puts_r+0x84>
2040126e:	481c                	lw	a5,16(s0)
20401270:	c7a1                	beqz	a5,204012b8 <_puts_r+0x84>
20401272:	59fd                	li	s3,-1
20401274:	4a29                	li	s4,10
20401276:	441c                	lw	a5,8(s0)
20401278:	00094583          	lbu	a1,0(s2)
2040127c:	17fd                	addi	a5,a5,-1
2040127e:	e9b1                	bnez	a1,204012d2 <_puts_r+0x9e>
20401280:	c41c                	sw	a5,8(s0)
20401282:	0607de63          	bgez	a5,204012fe <_puts_r+0xca>
20401286:	8622                	mv	a2,s0
20401288:	45a9                	li	a1,10
2040128a:	8526                	mv	a0,s1
2040128c:	2841                	jal	2040131c <__swbuf_r>
2040128e:	57fd                	li	a5,-1
20401290:	02f50863          	beq	a0,a5,204012c0 <_puts_r+0x8c>
20401294:	4529                	li	a0,10
20401296:	a035                	j	204012c2 <_puts_r+0x8e>
20401298:	00005797          	auipc	a5,0x5
2040129c:	e1078793          	addi	a5,a5,-496 # 204060a8 <__sf_fake_stdout>
204012a0:	00f41463          	bne	s0,a5,204012a8 <_puts_r+0x74>
204012a4:	4480                	lw	s0,8(s1)
204012a6:	b7c1                	j	20401266 <_puts_r+0x32>
204012a8:	00005797          	auipc	a5,0x5
204012ac:	dc078793          	addi	a5,a5,-576 # 20406068 <__sf_fake_stderr>
204012b0:	faf41be3          	bne	s0,a5,20401266 <_puts_r+0x32>
204012b4:	44c0                	lw	s0,12(s1)
204012b6:	bf45                	j	20401266 <_puts_r+0x32>
204012b8:	85a2                	mv	a1,s0
204012ba:	8526                	mv	a0,s1
204012bc:	2205                	jal	204013dc <__swsetup_r>
204012be:	d955                	beqz	a0,20401272 <_puts_r+0x3e>
204012c0:	557d                	li	a0,-1
204012c2:	40f2                	lw	ra,28(sp)
204012c4:	4462                	lw	s0,24(sp)
204012c6:	44d2                	lw	s1,20(sp)
204012c8:	4942                	lw	s2,16(sp)
204012ca:	49b2                	lw	s3,12(sp)
204012cc:	4a22                	lw	s4,8(sp)
204012ce:	6105                	addi	sp,sp,32
204012d0:	8082                	ret
204012d2:	c41c                	sw	a5,8(s0)
204012d4:	0905                	addi	s2,s2,1
204012d6:	0007d763          	bgez	a5,204012e4 <_puts_r+0xb0>
204012da:	4c18                	lw	a4,24(s0)
204012dc:	00e7cb63          	blt	a5,a4,204012f2 <_puts_r+0xbe>
204012e0:	01458963          	beq	a1,s4,204012f2 <_puts_r+0xbe>
204012e4:	401c                	lw	a5,0(s0)
204012e6:	00178713          	addi	a4,a5,1
204012ea:	c018                	sw	a4,0(s0)
204012ec:	00b78023          	sb	a1,0(a5)
204012f0:	b759                	j	20401276 <_puts_r+0x42>
204012f2:	8622                	mv	a2,s0
204012f4:	8526                	mv	a0,s1
204012f6:	201d                	jal	2040131c <__swbuf_r>
204012f8:	f7351fe3          	bne	a0,s3,20401276 <_puts_r+0x42>
204012fc:	b7d1                	j	204012c0 <_puts_r+0x8c>
204012fe:	401c                	lw	a5,0(s0)
20401300:	00178713          	addi	a4,a5,1
20401304:	c018                	sw	a4,0(s0)
20401306:	4729                	li	a4,10
20401308:	00e78023          	sb	a4,0(a5)
2040130c:	b761                	j	20401294 <_puts_r+0x60>

2040130e <puts>:
puts():
2040130e:	5fc00797          	auipc	a5,0x5fc00
20401312:	3fa78793          	addi	a5,a5,1018 # 80001708 <_impure_ptr>
20401316:	85aa                	mv	a1,a0
20401318:	4388                	lw	a0,0(a5)
2040131a:	bf29                	j	20401234 <_puts_r>

2040131c <__swbuf_r>:
__swbuf_r():
2040131c:	1101                	addi	sp,sp,-32
2040131e:	cc22                	sw	s0,24(sp)
20401320:	ca26                	sw	s1,20(sp)
20401322:	c84a                	sw	s2,16(sp)
20401324:	ce06                	sw	ra,28(sp)
20401326:	c64e                	sw	s3,12(sp)
20401328:	84aa                	mv	s1,a0
2040132a:	892e                	mv	s2,a1
2040132c:	8432                	mv	s0,a2
2040132e:	c501                	beqz	a0,20401336 <__swbuf_r+0x1a>
20401330:	4d1c                	lw	a5,24(a0)
20401332:	e391                	bnez	a5,20401336 <__swbuf_r+0x1a>
20401334:	2931                	jal	20401750 <__sinit>
20401336:	00005797          	auipc	a5,0x5
2040133a:	d5278793          	addi	a5,a5,-686 # 20406088 <__sf_fake_stdin>
2040133e:	06f41963          	bne	s0,a5,204013b0 <__swbuf_r+0x94>
20401342:	40c0                	lw	s0,4(s1)
20401344:	4c1c                	lw	a5,24(s0)
20401346:	c41c                	sw	a5,8(s0)
20401348:	00c45783          	lhu	a5,12(s0)
2040134c:	8ba1                	andi	a5,a5,8
2040134e:	c3c9                	beqz	a5,204013d0 <__swbuf_r+0xb4>
20401350:	481c                	lw	a5,16(s0)
20401352:	cfbd                	beqz	a5,204013d0 <__swbuf_r+0xb4>
20401354:	481c                	lw	a5,16(s0)
20401356:	4008                	lw	a0,0(s0)
20401358:	0ff97993          	andi	s3,s2,255
2040135c:	0ff97913          	andi	s2,s2,255
20401360:	8d1d                	sub	a0,a0,a5
20401362:	485c                	lw	a5,20(s0)
20401364:	00f54663          	blt	a0,a5,20401370 <__swbuf_r+0x54>
20401368:	85a2                	mv	a1,s0
2040136a:	8526                	mv	a0,s1
2040136c:	24e9                	jal	20401636 <_fflush_r>
2040136e:	e52d                	bnez	a0,204013d8 <__swbuf_r+0xbc>
20401370:	441c                	lw	a5,8(s0)
20401372:	0505                	addi	a0,a0,1
20401374:	17fd                	addi	a5,a5,-1
20401376:	c41c                	sw	a5,8(s0)
20401378:	401c                	lw	a5,0(s0)
2040137a:	00178713          	addi	a4,a5,1
2040137e:	c018                	sw	a4,0(s0)
20401380:	01378023          	sb	s3,0(a5)
20401384:	485c                	lw	a5,20(s0)
20401386:	00a78963          	beq	a5,a0,20401398 <__swbuf_r+0x7c>
2040138a:	00c45783          	lhu	a5,12(s0)
2040138e:	8b85                	andi	a5,a5,1
20401390:	cb81                	beqz	a5,204013a0 <__swbuf_r+0x84>
20401392:	47a9                	li	a5,10
20401394:	00f91663          	bne	s2,a5,204013a0 <__swbuf_r+0x84>
20401398:	85a2                	mv	a1,s0
2040139a:	8526                	mv	a0,s1
2040139c:	2c69                	jal	20401636 <_fflush_r>
2040139e:	ed0d                	bnez	a0,204013d8 <__swbuf_r+0xbc>
204013a0:	40f2                	lw	ra,28(sp)
204013a2:	4462                	lw	s0,24(sp)
204013a4:	854a                	mv	a0,s2
204013a6:	44d2                	lw	s1,20(sp)
204013a8:	4942                	lw	s2,16(sp)
204013aa:	49b2                	lw	s3,12(sp)
204013ac:	6105                	addi	sp,sp,32
204013ae:	8082                	ret
204013b0:	00005797          	auipc	a5,0x5
204013b4:	cf878793          	addi	a5,a5,-776 # 204060a8 <__sf_fake_stdout>
204013b8:	00f41463          	bne	s0,a5,204013c0 <__swbuf_r+0xa4>
204013bc:	4480                	lw	s0,8(s1)
204013be:	b759                	j	20401344 <__swbuf_r+0x28>
204013c0:	00005797          	auipc	a5,0x5
204013c4:	ca878793          	addi	a5,a5,-856 # 20406068 <__sf_fake_stderr>
204013c8:	f6f41ee3          	bne	s0,a5,20401344 <__swbuf_r+0x28>
204013cc:	44c0                	lw	s0,12(s1)
204013ce:	bf9d                	j	20401344 <__swbuf_r+0x28>
204013d0:	85a2                	mv	a1,s0
204013d2:	8526                	mv	a0,s1
204013d4:	2021                	jal	204013dc <__swsetup_r>
204013d6:	dd3d                	beqz	a0,20401354 <__swbuf_r+0x38>
204013d8:	597d                	li	s2,-1
204013da:	b7d9                	j	204013a0 <__swbuf_r+0x84>

204013dc <__swsetup_r>:
__swsetup_r():
204013dc:	1141                	addi	sp,sp,-16
204013de:	5fc00797          	auipc	a5,0x5fc00
204013e2:	32a78793          	addi	a5,a5,810 # 80001708 <_impure_ptr>
204013e6:	c226                	sw	s1,4(sp)
204013e8:	4384                	lw	s1,0(a5)
204013ea:	c422                	sw	s0,8(sp)
204013ec:	c04a                	sw	s2,0(sp)
204013ee:	c606                	sw	ra,12(sp)
204013f0:	892a                	mv	s2,a0
204013f2:	842e                	mv	s0,a1
204013f4:	c489                	beqz	s1,204013fe <__swsetup_r+0x22>
204013f6:	4c9c                	lw	a5,24(s1)
204013f8:	e399                	bnez	a5,204013fe <__swsetup_r+0x22>
204013fa:	8526                	mv	a0,s1
204013fc:	2e91                	jal	20401750 <__sinit>
204013fe:	00005797          	auipc	a5,0x5
20401402:	c8a78793          	addi	a5,a5,-886 # 20406088 <__sf_fake_stdin>
20401406:	02f41c63          	bne	s0,a5,2040143e <__swsetup_r+0x62>
2040140a:	40c0                	lw	s0,4(s1)
2040140c:	00c41703          	lh	a4,12(s0)
20401410:	01071793          	slli	a5,a4,0x10
20401414:	83c1                	srli	a5,a5,0x10
20401416:	0087f693          	andi	a3,a5,8
2040141a:	eeb5                	bnez	a3,20401496 <__swsetup_r+0xba>
2040141c:	0107f693          	andi	a3,a5,16
20401420:	ee9d                	bnez	a3,2040145e <__swsetup_r+0x82>
20401422:	47a5                	li	a5,9
20401424:	00f92023          	sw	a5,0(s2)
20401428:	04076713          	ori	a4,a4,64
2040142c:	00e41623          	sh	a4,12(s0)
20401430:	557d                	li	a0,-1
20401432:	40b2                	lw	ra,12(sp)
20401434:	4422                	lw	s0,8(sp)
20401436:	4492                	lw	s1,4(sp)
20401438:	4902                	lw	s2,0(sp)
2040143a:	0141                	addi	sp,sp,16
2040143c:	8082                	ret
2040143e:	00005797          	auipc	a5,0x5
20401442:	c6a78793          	addi	a5,a5,-918 # 204060a8 <__sf_fake_stdout>
20401446:	00f41463          	bne	s0,a5,2040144e <__swsetup_r+0x72>
2040144a:	4480                	lw	s0,8(s1)
2040144c:	b7c1                	j	2040140c <__swsetup_r+0x30>
2040144e:	00005797          	auipc	a5,0x5
20401452:	c1a78793          	addi	a5,a5,-998 # 20406068 <__sf_fake_stderr>
20401456:	faf41be3          	bne	s0,a5,2040140c <__swsetup_r+0x30>
2040145a:	44c0                	lw	s0,12(s1)
2040145c:	bf45                	j	2040140c <__swsetup_r+0x30>
2040145e:	8b91                	andi	a5,a5,4
20401460:	c78d                	beqz	a5,2040148a <__swsetup_r+0xae>
20401462:	584c                	lw	a1,52(s0)
20401464:	c989                	beqz	a1,20401476 <__swsetup_r+0x9a>
20401466:	04440793          	addi	a5,s0,68
2040146a:	00f58463          	beq	a1,a5,20401472 <__swsetup_r+0x96>
2040146e:	854a                	mv	a0,s2
20401470:	2bc5                	jal	20401a60 <_free_r>
20401472:	02042a23          	sw	zero,52(s0)
20401476:	00c45783          	lhu	a5,12(s0)
2040147a:	00042223          	sw	zero,4(s0)
2040147e:	fdb7f793          	andi	a5,a5,-37
20401482:	00f41623          	sh	a5,12(s0)
20401486:	481c                	lw	a5,16(s0)
20401488:	c01c                	sw	a5,0(s0)
2040148a:	00c45783          	lhu	a5,12(s0)
2040148e:	0087e793          	ori	a5,a5,8
20401492:	00f41623          	sh	a5,12(s0)
20401496:	481c                	lw	a5,16(s0)
20401498:	ef81                	bnez	a5,204014b0 <__swsetup_r+0xd4>
2040149a:	00c45783          	lhu	a5,12(s0)
2040149e:	20000713          	li	a4,512
204014a2:	2807f793          	andi	a5,a5,640
204014a6:	00e78563          	beq	a5,a4,204014b0 <__swsetup_r+0xd4>
204014aa:	85a2                	mv	a1,s0
204014ac:	854a                	mv	a0,s2
204014ae:	21bd                	jal	2040191c <__smakebuf_r>
204014b0:	00c45783          	lhu	a5,12(s0)
204014b4:	0017f713          	andi	a4,a5,1
204014b8:	c705                	beqz	a4,204014e0 <__swsetup_r+0x104>
204014ba:	485c                	lw	a5,20(s0)
204014bc:	00042423          	sw	zero,8(s0)
204014c0:	40f007b3          	neg	a5,a5
204014c4:	cc1c                	sw	a5,24(s0)
204014c6:	481c                	lw	a5,16(s0)
204014c8:	4501                	li	a0,0
204014ca:	f7a5                	bnez	a5,20401432 <__swsetup_r+0x56>
204014cc:	00c41783          	lh	a5,12(s0)
204014d0:	0807f713          	andi	a4,a5,128
204014d4:	df39                	beqz	a4,20401432 <__swsetup_r+0x56>
204014d6:	0407e793          	ori	a5,a5,64
204014da:	00f41623          	sh	a5,12(s0)
204014de:	bf89                	j	20401430 <__swsetup_r+0x54>
204014e0:	8b89                	andi	a5,a5,2
204014e2:	4701                	li	a4,0
204014e4:	e391                	bnez	a5,204014e8 <__swsetup_r+0x10c>
204014e6:	4858                	lw	a4,20(s0)
204014e8:	c418                	sw	a4,8(s0)
204014ea:	bff1                	j	204014c6 <__swsetup_r+0xea>

204014ec <__sflush_r>:
__sflush_r():
204014ec:	00c5d783          	lhu	a5,12(a1)
204014f0:	1101                	addi	sp,sp,-32
204014f2:	cc22                	sw	s0,24(sp)
204014f4:	ca26                	sw	s1,20(sp)
204014f6:	ce06                	sw	ra,28(sp)
204014f8:	c84a                	sw	s2,16(sp)
204014fa:	c64e                	sw	s3,12(sp)
204014fc:	0087f713          	andi	a4,a5,8
20401500:	84aa                	mv	s1,a0
20401502:	842e                	mv	s0,a1
20401504:	e765                	bnez	a4,204015ec <__sflush_r+0x100>
20401506:	41d8                	lw	a4,4(a1)
20401508:	00e04763          	bgtz	a4,20401516 <__sflush_r+0x2a>
2040150c:	41b8                	lw	a4,64(a1)
2040150e:	00e04463          	bgtz	a4,20401516 <__sflush_r+0x2a>
20401512:	4501                	li	a0,0
20401514:	a0c1                	j	204015d4 <__sflush_r+0xe8>
20401516:	5458                	lw	a4,44(s0)
20401518:	df6d                	beqz	a4,20401512 <__sflush_r+0x26>
2040151a:	0004a903          	lw	s2,0(s1)
2040151e:	01379693          	slli	a3,a5,0x13
20401522:	0004a023          	sw	zero,0(s1)
20401526:	0606de63          	bgez	a3,204015a2 <__sflush_r+0xb6>
2040152a:	4868                	lw	a0,84(s0)
2040152c:	00c45783          	lhu	a5,12(s0)
20401530:	8b91                	andi	a5,a5,4
20401532:	c799                	beqz	a5,20401540 <__sflush_r+0x54>
20401534:	405c                	lw	a5,4(s0)
20401536:	8d1d                	sub	a0,a0,a5
20401538:	585c                	lw	a5,52(s0)
2040153a:	c399                	beqz	a5,20401540 <__sflush_r+0x54>
2040153c:	403c                	lw	a5,64(s0)
2040153e:	8d1d                	sub	a0,a0,a5
20401540:	545c                	lw	a5,44(s0)
20401542:	500c                	lw	a1,32(s0)
20401544:	862a                	mv	a2,a0
20401546:	4681                	li	a3,0
20401548:	8526                	mv	a0,s1
2040154a:	9782                	jalr	a5
2040154c:	57fd                	li	a5,-1
2040154e:	00c45703          	lhu	a4,12(s0)
20401552:	00f51d63          	bne	a0,a5,2040156c <__sflush_r+0x80>
20401556:	4094                	lw	a3,0(s1)
20401558:	47f5                	li	a5,29
2040155a:	08d7e463          	bltu	a5,a3,204015e2 <__sflush_r+0xf6>
2040155e:	204007b7          	lui	a5,0x20400
20401562:	0785                	addi	a5,a5,1
20401564:	00d7d7b3          	srl	a5,a5,a3
20401568:	8b85                	andi	a5,a5,1
2040156a:	cfa5                	beqz	a5,204015e2 <__sflush_r+0xf6>
2040156c:	481c                	lw	a5,16(s0)
2040156e:	00042223          	sw	zero,4(s0)
20401572:	c01c                	sw	a5,0(s0)
20401574:	01371793          	slli	a5,a4,0x13
20401578:	0007d863          	bgez	a5,20401588 <__sflush_r+0x9c>
2040157c:	57fd                	li	a5,-1
2040157e:	00f51463          	bne	a0,a5,20401586 <__sflush_r+0x9a>
20401582:	409c                	lw	a5,0(s1)
20401584:	e391                	bnez	a5,20401588 <__sflush_r+0x9c>
20401586:	c868                	sw	a0,84(s0)
20401588:	584c                	lw	a1,52(s0)
2040158a:	0124a023          	sw	s2,0(s1)
2040158e:	d1d1                	beqz	a1,20401512 <__sflush_r+0x26>
20401590:	04440793          	addi	a5,s0,68
20401594:	00f58463          	beq	a1,a5,2040159c <__sflush_r+0xb0>
20401598:	8526                	mv	a0,s1
2040159a:	21d9                	jal	20401a60 <_free_r>
2040159c:	02042a23          	sw	zero,52(s0)
204015a0:	bf8d                	j	20401512 <__sflush_r+0x26>
204015a2:	500c                	lw	a1,32(s0)
204015a4:	4685                	li	a3,1
204015a6:	4601                	li	a2,0
204015a8:	8526                	mv	a0,s1
204015aa:	9702                	jalr	a4
204015ac:	57fd                	li	a5,-1
204015ae:	f6f51fe3          	bne	a0,a5,2040152c <__sflush_r+0x40>
204015b2:	409c                	lw	a5,0(s1)
204015b4:	dfa5                	beqz	a5,2040152c <__sflush_r+0x40>
204015b6:	4775                	li	a4,29
204015b8:	00e78563          	beq	a5,a4,204015c2 <__sflush_r+0xd6>
204015bc:	4759                	li	a4,22
204015be:	00e79563          	bne	a5,a4,204015c8 <__sflush_r+0xdc>
204015c2:	0124a023          	sw	s2,0(s1)
204015c6:	b7b1                	j	20401512 <__sflush_r+0x26>
204015c8:	00c45783          	lhu	a5,12(s0)
204015cc:	0407e793          	ori	a5,a5,64
204015d0:	00f41623          	sh	a5,12(s0)
204015d4:	40f2                	lw	ra,28(sp)
204015d6:	4462                	lw	s0,24(sp)
204015d8:	44d2                	lw	s1,20(sp)
204015da:	4942                	lw	s2,16(sp)
204015dc:	49b2                	lw	s3,12(sp)
204015de:	6105                	addi	sp,sp,32
204015e0:	8082                	ret
204015e2:	04076713          	ori	a4,a4,64
204015e6:	00e41623          	sh	a4,12(s0)
204015ea:	b7ed                	j	204015d4 <__sflush_r+0xe8>
204015ec:	0105a983          	lw	s3,16(a1)
204015f0:	f20981e3          	beqz	s3,20401512 <__sflush_r+0x26>
204015f4:	0005a903          	lw	s2,0(a1)
204015f8:	8b8d                	andi	a5,a5,3
204015fa:	0135a023          	sw	s3,0(a1)
204015fe:	41390933          	sub	s2,s2,s3
20401602:	4701                	li	a4,0
20401604:	e391                	bnez	a5,20401608 <__sflush_r+0x11c>
20401606:	49d8                	lw	a4,20(a1)
20401608:	c418                	sw	a4,8(s0)
2040160a:	f12054e3          	blez	s2,20401512 <__sflush_r+0x26>
2040160e:	541c                	lw	a5,40(s0)
20401610:	500c                	lw	a1,32(s0)
20401612:	86ca                	mv	a3,s2
20401614:	864e                	mv	a2,s3
20401616:	8526                	mv	a0,s1
20401618:	9782                	jalr	a5
2040161a:	00a04a63          	bgtz	a0,2040162e <__sflush_r+0x142>
2040161e:	00c45783          	lhu	a5,12(s0)
20401622:	557d                	li	a0,-1
20401624:	0407e793          	ori	a5,a5,64
20401628:	00f41623          	sh	a5,12(s0)
2040162c:	b765                	j	204015d4 <__sflush_r+0xe8>
2040162e:	99aa                	add	s3,s3,a0
20401630:	40a90933          	sub	s2,s2,a0
20401634:	bfd9                	j	2040160a <__sflush_r+0x11e>

20401636 <_fflush_r>:
_fflush_r():
20401636:	499c                	lw	a5,16(a1)
20401638:	cfb9                	beqz	a5,20401696 <_fflush_r+0x60>
2040163a:	1101                	addi	sp,sp,-32
2040163c:	cc22                	sw	s0,24(sp)
2040163e:	ce06                	sw	ra,28(sp)
20401640:	842a                	mv	s0,a0
20401642:	c511                	beqz	a0,2040164e <_fflush_r+0x18>
20401644:	4d1c                	lw	a5,24(a0)
20401646:	e781                	bnez	a5,2040164e <_fflush_r+0x18>
20401648:	c62e                	sw	a1,12(sp)
2040164a:	2219                	jal	20401750 <__sinit>
2040164c:	45b2                	lw	a1,12(sp)
2040164e:	00005797          	auipc	a5,0x5
20401652:	a3a78793          	addi	a5,a5,-1478 # 20406088 <__sf_fake_stdin>
20401656:	00f59b63          	bne	a1,a5,2040166c <_fflush_r+0x36>
2040165a:	404c                	lw	a1,4(s0)
2040165c:	00c59783          	lh	a5,12(a1)
20401660:	c795                	beqz	a5,2040168c <_fflush_r+0x56>
20401662:	8522                	mv	a0,s0
20401664:	4462                	lw	s0,24(sp)
20401666:	40f2                	lw	ra,28(sp)
20401668:	6105                	addi	sp,sp,32
2040166a:	b549                	j	204014ec <__sflush_r>
2040166c:	00005797          	auipc	a5,0x5
20401670:	a3c78793          	addi	a5,a5,-1476 # 204060a8 <__sf_fake_stdout>
20401674:	00f59463          	bne	a1,a5,2040167c <_fflush_r+0x46>
20401678:	440c                	lw	a1,8(s0)
2040167a:	b7cd                	j	2040165c <_fflush_r+0x26>
2040167c:	00005797          	auipc	a5,0x5
20401680:	9ec78793          	addi	a5,a5,-1556 # 20406068 <__sf_fake_stderr>
20401684:	fcf59ce3          	bne	a1,a5,2040165c <_fflush_r+0x26>
20401688:	444c                	lw	a1,12(s0)
2040168a:	bfc9                	j	2040165c <_fflush_r+0x26>
2040168c:	40f2                	lw	ra,28(sp)
2040168e:	4462                	lw	s0,24(sp)
20401690:	4501                	li	a0,0
20401692:	6105                	addi	sp,sp,32
20401694:	8082                	ret
20401696:	4501                	li	a0,0
20401698:	8082                	ret

2040169a <std>:
std():
2040169a:	1141                	addi	sp,sp,-16
2040169c:	c422                	sw	s0,8(sp)
2040169e:	c606                	sw	ra,12(sp)
204016a0:	842a                	mv	s0,a0
204016a2:	00b51623          	sh	a1,12(a0)
204016a6:	00c51723          	sh	a2,14(a0)
204016aa:	00052023          	sw	zero,0(a0)
204016ae:	00052223          	sw	zero,4(a0)
204016b2:	00052423          	sw	zero,8(a0)
204016b6:	06052223          	sw	zero,100(a0)
204016ba:	00052823          	sw	zero,16(a0)
204016be:	00052a23          	sw	zero,20(a0)
204016c2:	00052c23          	sw	zero,24(a0)
204016c6:	4621                	li	a2,8
204016c8:	4581                	li	a1,0
204016ca:	05c50513          	addi	a0,a0,92
204016ce:	24ed                	jal	204019b8 <memset>
204016d0:	00001797          	auipc	a5,0x1
204016d4:	84e78793          	addi	a5,a5,-1970 # 20401f1e <__sread>
204016d8:	d05c                	sw	a5,36(s0)
204016da:	00001797          	auipc	a5,0x1
204016de:	87478793          	addi	a5,a5,-1932 # 20401f4e <__swrite>
204016e2:	d41c                	sw	a5,40(s0)
204016e4:	00001797          	auipc	a5,0x1
204016e8:	8b878793          	addi	a5,a5,-1864 # 20401f9c <__sseek>
204016ec:	d45c                	sw	a5,44(s0)
204016ee:	00001797          	auipc	a5,0x1
204016f2:	8e478793          	addi	a5,a5,-1820 # 20401fd2 <__sclose>
204016f6:	d000                	sw	s0,32(s0)
204016f8:	d81c                	sw	a5,48(s0)
204016fa:	40b2                	lw	ra,12(sp)
204016fc:	4422                	lw	s0,8(sp)
204016fe:	0141                	addi	sp,sp,16
20401700:	8082                	ret

20401702 <_cleanup_r>:
_cleanup_r():
20401702:	00000597          	auipc	a1,0x0
20401706:	f3458593          	addi	a1,a1,-204 # 20401636 <_fflush_r>
2040170a:	a2b9                	j	20401858 <_fwalk_reent>

2040170c <__sfmoreglue>:
__sfmoreglue():
2040170c:	1141                	addi	sp,sp,-16
2040170e:	c226                	sw	s1,4(sp)
20401710:	06800613          	li	a2,104
20401714:	fff58493          	addi	s1,a1,-1
20401718:	02c484b3          	mul	s1,s1,a2
2040171c:	c04a                	sw	s2,0(sp)
2040171e:	892e                	mv	s2,a1
20401720:	c422                	sw	s0,8(sp)
20401722:	c606                	sw	ra,12(sp)
20401724:	07448593          	addi	a1,s1,116
20401728:	26d5                	jal	20401b0c <_malloc_r>
2040172a:	842a                	mv	s0,a0
2040172c:	c919                	beqz	a0,20401742 <__sfmoreglue+0x36>
2040172e:	00052023          	sw	zero,0(a0)
20401732:	01252223          	sw	s2,4(a0)
20401736:	0531                	addi	a0,a0,12
20401738:	c408                	sw	a0,8(s0)
2040173a:	06848613          	addi	a2,s1,104
2040173e:	4581                	li	a1,0
20401740:	2ca5                	jal	204019b8 <memset>
20401742:	8522                	mv	a0,s0
20401744:	40b2                	lw	ra,12(sp)
20401746:	4422                	lw	s0,8(sp)
20401748:	4492                	lw	s1,4(sp)
2040174a:	4902                	lw	s2,0(sp)
2040174c:	0141                	addi	sp,sp,16
2040174e:	8082                	ret

20401750 <__sinit>:
__sinit():
20401750:	4d1c                	lw	a5,24(a0)
20401752:	e3bd                	bnez	a5,204017b8 <__sinit+0x68>
20401754:	1141                	addi	sp,sp,-16
20401756:	c606                	sw	ra,12(sp)
20401758:	c422                	sw	s0,8(sp)
2040175a:	00000797          	auipc	a5,0x0
2040175e:	fa878793          	addi	a5,a5,-88 # 20401702 <_cleanup_r>
20401762:	d51c                	sw	a5,40(a0)
20401764:	5fc00797          	auipc	a5,0x5fc00
20401768:	fa878793          	addi	a5,a5,-88 # 8000170c <_global_impure_ptr>
2040176c:	439c                	lw	a5,0(a5)
2040176e:	04052423          	sw	zero,72(a0)
20401772:	04052623          	sw	zero,76(a0)
20401776:	04052823          	sw	zero,80(a0)
2040177a:	00f51463          	bne	a0,a5,20401782 <__sinit+0x32>
2040177e:	4785                	li	a5,1
20401780:	cd1c                	sw	a5,24(a0)
20401782:	842a                	mv	s0,a0
20401784:	281d                	jal	204017ba <__sfp>
20401786:	c048                	sw	a0,4(s0)
20401788:	8522                	mv	a0,s0
2040178a:	2805                	jal	204017ba <__sfp>
2040178c:	c408                	sw	a0,8(s0)
2040178e:	8522                	mv	a0,s0
20401790:	202d                	jal	204017ba <__sfp>
20401792:	c448                	sw	a0,12(s0)
20401794:	4048                	lw	a0,4(s0)
20401796:	4601                	li	a2,0
20401798:	4591                	li	a1,4
2040179a:	3701                	jal	2040169a <std>
2040179c:	4408                	lw	a0,8(s0)
2040179e:	4605                	li	a2,1
204017a0:	45a5                	li	a1,9
204017a2:	3de5                	jal	2040169a <std>
204017a4:	4448                	lw	a0,12(s0)
204017a6:	4609                	li	a2,2
204017a8:	45c9                	li	a1,18
204017aa:	3dc5                	jal	2040169a <std>
204017ac:	4785                	li	a5,1
204017ae:	cc1c                	sw	a5,24(s0)
204017b0:	40b2                	lw	ra,12(sp)
204017b2:	4422                	lw	s0,8(sp)
204017b4:	0141                	addi	sp,sp,16
204017b6:	8082                	ret
204017b8:	8082                	ret

204017ba <__sfp>:
__sfp():
204017ba:	1141                	addi	sp,sp,-16
204017bc:	5fc00797          	auipc	a5,0x5fc00
204017c0:	f5078793          	addi	a5,a5,-176 # 8000170c <_global_impure_ptr>
204017c4:	c226                	sw	s1,4(sp)
204017c6:	4384                	lw	s1,0(a5)
204017c8:	c04a                	sw	s2,0(sp)
204017ca:	c606                	sw	ra,12(sp)
204017cc:	4c9c                	lw	a5,24(s1)
204017ce:	c422                	sw	s0,8(sp)
204017d0:	892a                	mv	s2,a0
204017d2:	e399                	bnez	a5,204017d8 <__sfp+0x1e>
204017d4:	8526                	mv	a0,s1
204017d6:	3fad                	jal	20401750 <__sinit>
204017d8:	04848493          	addi	s1,s1,72
204017dc:	4480                	lw	s0,8(s1)
204017de:	40dc                	lw	a5,4(s1)
204017e0:	17fd                	addi	a5,a5,-1
204017e2:	0007d663          	bgez	a5,204017ee <__sfp+0x34>
204017e6:	409c                	lw	a5,0(s1)
204017e8:	cfb1                	beqz	a5,20401844 <__sfp+0x8a>
204017ea:	4084                	lw	s1,0(s1)
204017ec:	bfc5                	j	204017dc <__sfp+0x22>
204017ee:	00c41703          	lh	a4,12(s0)
204017f2:	e731                	bnez	a4,2040183e <__sfp+0x84>
204017f4:	77c1                	lui	a5,0xffff0
204017f6:	0785                	addi	a5,a5,1
204017f8:	06042223          	sw	zero,100(s0)
204017fc:	00042023          	sw	zero,0(s0)
20401800:	00042223          	sw	zero,4(s0)
20401804:	00042423          	sw	zero,8(s0)
20401808:	c45c                	sw	a5,12(s0)
2040180a:	00042823          	sw	zero,16(s0)
2040180e:	00042a23          	sw	zero,20(s0)
20401812:	00042c23          	sw	zero,24(s0)
20401816:	4621                	li	a2,8
20401818:	4581                	li	a1,0
2040181a:	05c40513          	addi	a0,s0,92
2040181e:	2a69                	jal	204019b8 <memset>
20401820:	02042a23          	sw	zero,52(s0)
20401824:	02042c23          	sw	zero,56(s0)
20401828:	04042423          	sw	zero,72(s0)
2040182c:	04042623          	sw	zero,76(s0)
20401830:	8522                	mv	a0,s0
20401832:	40b2                	lw	ra,12(sp)
20401834:	4422                	lw	s0,8(sp)
20401836:	4492                	lw	s1,4(sp)
20401838:	4902                	lw	s2,0(sp)
2040183a:	0141                	addi	sp,sp,16
2040183c:	8082                	ret
2040183e:	06840413          	addi	s0,s0,104
20401842:	bf79                	j	204017e0 <__sfp+0x26>
20401844:	4591                	li	a1,4
20401846:	854a                	mv	a0,s2
20401848:	35d1                	jal	2040170c <__sfmoreglue>
2040184a:	c088                	sw	a0,0(s1)
2040184c:	842a                	mv	s0,a0
2040184e:	fd51                	bnez	a0,204017ea <__sfp+0x30>
20401850:	47b1                	li	a5,12
20401852:	00f92023          	sw	a5,0(s2)
20401856:	bfe9                	j	20401830 <__sfp+0x76>

20401858 <_fwalk_reent>:
_fwalk_reent():
20401858:	7179                	addi	sp,sp,-48
2040185a:	d422                	sw	s0,40(sp)
2040185c:	d04a                	sw	s2,32(sp)
2040185e:	cc52                	sw	s4,24(sp)
20401860:	ca56                	sw	s5,20(sp)
20401862:	c85a                	sw	s6,16(sp)
20401864:	c65e                	sw	s7,12(sp)
20401866:	d606                	sw	ra,44(sp)
20401868:	d226                	sw	s1,36(sp)
2040186a:	ce4e                	sw	s3,28(sp)
2040186c:	8a2a                	mv	s4,a0
2040186e:	8aae                	mv	s5,a1
20401870:	04850413          	addi	s0,a0,72
20401874:	4901                	li	s2,0
20401876:	4b05                	li	s6,1
20401878:	5bfd                	li	s7,-1
2040187a:	ec09                	bnez	s0,20401894 <_fwalk_reent+0x3c>
2040187c:	50b2                	lw	ra,44(sp)
2040187e:	5422                	lw	s0,40(sp)
20401880:	854a                	mv	a0,s2
20401882:	5492                	lw	s1,36(sp)
20401884:	5902                	lw	s2,32(sp)
20401886:	49f2                	lw	s3,28(sp)
20401888:	4a62                	lw	s4,24(sp)
2040188a:	4ad2                	lw	s5,20(sp)
2040188c:	4b42                	lw	s6,16(sp)
2040188e:	4bb2                	lw	s7,12(sp)
20401890:	6145                	addi	sp,sp,48
20401892:	8082                	ret
20401894:	4404                	lw	s1,8(s0)
20401896:	00442983          	lw	s3,4(s0)
2040189a:	19fd                	addi	s3,s3,-1
2040189c:	0009d463          	bgez	s3,204018a4 <_fwalk_reent+0x4c>
204018a0:	4000                	lw	s0,0(s0)
204018a2:	bfe1                	j	2040187a <_fwalk_reent+0x22>
204018a4:	00c4d783          	lhu	a5,12(s1)
204018a8:	00fb7b63          	bgeu	s6,a5,204018be <_fwalk_reent+0x66>
204018ac:	00e49783          	lh	a5,14(s1)
204018b0:	01778763          	beq	a5,s7,204018be <_fwalk_reent+0x66>
204018b4:	85a6                	mv	a1,s1
204018b6:	8552                	mv	a0,s4
204018b8:	9a82                	jalr	s5
204018ba:	00a96933          	or	s2,s2,a0
204018be:	06848493          	addi	s1,s1,104
204018c2:	bfe1                	j	2040189a <_fwalk_reent+0x42>

204018c4 <__swhatbuf_r>:
__swhatbuf_r():
204018c4:	7119                	addi	sp,sp,-128
204018c6:	daa6                	sw	s1,116(sp)
204018c8:	84ae                	mv	s1,a1
204018ca:	00e59583          	lh	a1,14(a1)
204018ce:	dca2                	sw	s0,120(sp)
204018d0:	de86                	sw	ra,124(sp)
204018d2:	8432                	mv	s0,a2
204018d4:	0005dc63          	bgez	a1,204018ec <__swhatbuf_r+0x28>
204018d8:	00c4d783          	lhu	a5,12(s1)
204018dc:	0006a023          	sw	zero,0(a3) # 80000000 <metal_segment_heap_target_end+0xffffcc4c>
204018e0:	0807f793          	andi	a5,a5,128
204018e4:	e39d                	bnez	a5,2040190a <__swhatbuf_r+0x46>
204018e6:	40000793          	li	a5,1024
204018ea:	a015                	j	2040190e <__swhatbuf_r+0x4a>
204018ec:	0830                	addi	a2,sp,24
204018ee:	c636                	sw	a3,12(sp)
204018f0:	27b1                	jal	2040203c <_fstat_r>
204018f2:	46b2                	lw	a3,12(sp)
204018f4:	fe0542e3          	bltz	a0,204018d8 <__swhatbuf_r+0x14>
204018f8:	4772                	lw	a4,28(sp)
204018fa:	67bd                	lui	a5,0xf
204018fc:	8ff9                	and	a5,a5,a4
204018fe:	7779                	lui	a4,0xffffe
20401900:	97ba                	add	a5,a5,a4
20401902:	0017b793          	seqz	a5,a5
20401906:	c29c                	sw	a5,0(a3)
20401908:	bff9                	j	204018e6 <__swhatbuf_r+0x22>
2040190a:	04000793          	li	a5,64
2040190e:	c01c                	sw	a5,0(s0)
20401910:	50f6                	lw	ra,124(sp)
20401912:	5466                	lw	s0,120(sp)
20401914:	54d6                	lw	s1,116(sp)
20401916:	4501                	li	a0,0
20401918:	6109                	addi	sp,sp,128
2040191a:	8082                	ret

2040191c <__smakebuf_r>:
__smakebuf_r():
2040191c:	00c5d783          	lhu	a5,12(a1)
20401920:	1101                	addi	sp,sp,-32
20401922:	cc22                	sw	s0,24(sp)
20401924:	ce06                	sw	ra,28(sp)
20401926:	ca26                	sw	s1,20(sp)
20401928:	c84a                	sw	s2,16(sp)
2040192a:	8b89                	andi	a5,a5,2
2040192c:	842e                	mv	s0,a1
2040192e:	cf89                	beqz	a5,20401948 <__smakebuf_r+0x2c>
20401930:	04740793          	addi	a5,s0,71
20401934:	c01c                	sw	a5,0(s0)
20401936:	c81c                	sw	a5,16(s0)
20401938:	4785                	li	a5,1
2040193a:	c85c                	sw	a5,20(s0)
2040193c:	40f2                	lw	ra,28(sp)
2040193e:	4462                	lw	s0,24(sp)
20401940:	44d2                	lw	s1,20(sp)
20401942:	4942                	lw	s2,16(sp)
20401944:	6105                	addi	sp,sp,32
20401946:	8082                	ret
20401948:	0074                	addi	a3,sp,12
2040194a:	0030                	addi	a2,sp,8
2040194c:	84aa                	mv	s1,a0
2040194e:	3f9d                	jal	204018c4 <__swhatbuf_r>
20401950:	45a2                	lw	a1,8(sp)
20401952:	892a                	mv	s2,a0
20401954:	8526                	mv	a0,s1
20401956:	2a5d                	jal	20401b0c <_malloc_r>
20401958:	ed01                	bnez	a0,20401970 <__smakebuf_r+0x54>
2040195a:	00c41783          	lh	a5,12(s0)
2040195e:	2007f713          	andi	a4,a5,512
20401962:	ff69                	bnez	a4,2040193c <__smakebuf_r+0x20>
20401964:	9bf1                	andi	a5,a5,-4
20401966:	0027e793          	ori	a5,a5,2
2040196a:	00f41623          	sh	a5,12(s0)
2040196e:	b7c9                	j	20401930 <__smakebuf_r+0x14>
20401970:	00000797          	auipc	a5,0x0
20401974:	d9278793          	addi	a5,a5,-622 # 20401702 <_cleanup_r>
20401978:	d49c                	sw	a5,40(s1)
2040197a:	00c45783          	lhu	a5,12(s0)
2040197e:	c008                	sw	a0,0(s0)
20401980:	c808                	sw	a0,16(s0)
20401982:	0807e793          	ori	a5,a5,128
20401986:	00f41623          	sh	a5,12(s0)
2040198a:	47a2                	lw	a5,8(sp)
2040198c:	c85c                	sw	a5,20(s0)
2040198e:	47b2                	lw	a5,12(sp)
20401990:	cf89                	beqz	a5,204019aa <__smakebuf_r+0x8e>
20401992:	00e41583          	lh	a1,14(s0)
20401996:	8526                	mv	a0,s1
20401998:	2dd9                	jal	2040206e <_isatty_r>
2040199a:	c901                	beqz	a0,204019aa <__smakebuf_r+0x8e>
2040199c:	00c45783          	lhu	a5,12(s0)
204019a0:	9bf1                	andi	a5,a5,-4
204019a2:	0017e793          	ori	a5,a5,1
204019a6:	00f41623          	sh	a5,12(s0)
204019aa:	00c45783          	lhu	a5,12(s0)
204019ae:	00f96933          	or	s2,s2,a5
204019b2:	01241623          	sh	s2,12(s0)
204019b6:	b759                	j	2040193c <__smakebuf_r+0x20>

204019b8 <memset>:
memset():
204019b8:	433d                	li	t1,15
204019ba:	872a                	mv	a4,a0
204019bc:	02c37363          	bgeu	t1,a2,204019e2 <memset+0x2a>
204019c0:	00f77793          	andi	a5,a4,15
204019c4:	efbd                	bnez	a5,20401a42 <memset+0x8a>
204019c6:	e5ad                	bnez	a1,20401a30 <memset+0x78>
204019c8:	ff067693          	andi	a3,a2,-16
204019cc:	8a3d                	andi	a2,a2,15
204019ce:	96ba                	add	a3,a3,a4
204019d0:	c30c                	sw	a1,0(a4)
204019d2:	c34c                	sw	a1,4(a4)
204019d4:	c70c                	sw	a1,8(a4)
204019d6:	c74c                	sw	a1,12(a4)
204019d8:	0741                	addi	a4,a4,16
204019da:	fed76be3          	bltu	a4,a3,204019d0 <memset+0x18>
204019de:	e211                	bnez	a2,204019e2 <memset+0x2a>
204019e0:	8082                	ret
204019e2:	40c306b3          	sub	a3,t1,a2
204019e6:	068a                	slli	a3,a3,0x2
204019e8:	00000297          	auipc	t0,0x0
204019ec:	9696                	add	a3,a3,t0
204019ee:	00a68067          	jr	10(a3)
204019f2:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffac5a>
204019f6:	00b706a3          	sb	a1,13(a4)
204019fa:	00b70623          	sb	a1,12(a4)
204019fe:	00b705a3          	sb	a1,11(a4)
20401a02:	00b70523          	sb	a1,10(a4)
20401a06:	00b704a3          	sb	a1,9(a4)
20401a0a:	00b70423          	sb	a1,8(a4)
20401a0e:	00b703a3          	sb	a1,7(a4)
20401a12:	00b70323          	sb	a1,6(a4)
20401a16:	00b702a3          	sb	a1,5(a4)
20401a1a:	00b70223          	sb	a1,4(a4)
20401a1e:	00b701a3          	sb	a1,3(a4)
20401a22:	00b70123          	sb	a1,2(a4)
20401a26:	00b700a3          	sb	a1,1(a4)
20401a2a:	00b70023          	sb	a1,0(a4)
20401a2e:	8082                	ret
20401a30:	0ff5f593          	andi	a1,a1,255
20401a34:	00859693          	slli	a3,a1,0x8
20401a38:	8dd5                	or	a1,a1,a3
20401a3a:	01059693          	slli	a3,a1,0x10
20401a3e:	8dd5                	or	a1,a1,a3
20401a40:	b761                	j	204019c8 <memset+0x10>
20401a42:	00279693          	slli	a3,a5,0x2
20401a46:	00000297          	auipc	t0,0x0
20401a4a:	9696                	add	a3,a3,t0
20401a4c:	8286                	mv	t0,ra
20401a4e:	fa8680e7          	jalr	-88(a3)
20401a52:	8096                	mv	ra,t0
20401a54:	17c1                	addi	a5,a5,-16
20401a56:	8f1d                	sub	a4,a4,a5
20401a58:	963e                	add	a2,a2,a5
20401a5a:	f8c374e3          	bgeu	t1,a2,204019e2 <memset+0x2a>
20401a5e:	b7a5                	j	204019c6 <memset+0xe>

20401a60 <_free_r>:
_free_r():
20401a60:	c5cd                	beqz	a1,20401b0a <_free_r+0xaa>
20401a62:	ffc5a783          	lw	a5,-4(a1)
20401a66:	1141                	addi	sp,sp,-16
20401a68:	c422                	sw	s0,8(sp)
20401a6a:	c606                	sw	ra,12(sp)
20401a6c:	c226                	sw	s1,4(sp)
20401a6e:	ffc58413          	addi	s0,a1,-4
20401a72:	0007d363          	bgez	a5,20401a78 <_free_r+0x18>
20401a76:	943e                	add	s0,s0,a5
20401a78:	84aa                	mv	s1,a0
20401a7a:	2d8d                	jal	204020ec <__malloc_lock>
20401a7c:	5fc00797          	auipc	a5,0x5fc00
20401a80:	cb478793          	addi	a5,a5,-844 # 80001730 <metal_segment_data_target_end>
20401a84:	439c                	lw	a5,0(a5)
20401a86:	ef89                	bnez	a5,20401aa0 <_free_r+0x40>
20401a88:	00042223          	sw	zero,4(s0)
20401a8c:	5fc00797          	auipc	a5,0x5fc00
20401a90:	ca87a223          	sw	s0,-860(a5) # 80001730 <metal_segment_data_target_end>
20401a94:	4422                	lw	s0,8(sp)
20401a96:	40b2                	lw	ra,12(sp)
20401a98:	8526                	mv	a0,s1
20401a9a:	4492                	lw	s1,4(sp)
20401a9c:	0141                	addi	sp,sp,16
20401a9e:	ad81                	j	204020ee <__malloc_unlock>
20401aa0:	00f47e63          	bgeu	s0,a5,20401abc <_free_r+0x5c>
20401aa4:	4014                	lw	a3,0(s0)
20401aa6:	00d40733          	add	a4,s0,a3
20401aaa:	00e79663          	bne	a5,a4,20401ab6 <_free_r+0x56>
20401aae:	4398                	lw	a4,0(a5)
20401ab0:	43dc                	lw	a5,4(a5)
20401ab2:	9736                	add	a4,a4,a3
20401ab4:	c018                	sw	a4,0(s0)
20401ab6:	c05c                	sw	a5,4(s0)
20401ab8:	bfd1                	j	20401a8c <_free_r+0x2c>
20401aba:	87ba                	mv	a5,a4
20401abc:	43d8                	lw	a4,4(a5)
20401abe:	c319                	beqz	a4,20401ac4 <_free_r+0x64>
20401ac0:	fee47de3          	bgeu	s0,a4,20401aba <_free_r+0x5a>
20401ac4:	4394                	lw	a3,0(a5)
20401ac6:	00d78633          	add	a2,a5,a3
20401aca:	00861f63          	bne	a2,s0,20401ae8 <_free_r+0x88>
20401ace:	4010                	lw	a2,0(s0)
20401ad0:	96b2                	add	a3,a3,a2
20401ad2:	c394                	sw	a3,0(a5)
20401ad4:	00d78633          	add	a2,a5,a3
20401ad8:	fac71ee3          	bne	a4,a2,20401a94 <_free_r+0x34>
20401adc:	4310                	lw	a2,0(a4)
20401ade:	4358                	lw	a4,4(a4)
20401ae0:	96b2                	add	a3,a3,a2
20401ae2:	c394                	sw	a3,0(a5)
20401ae4:	c3d8                	sw	a4,4(a5)
20401ae6:	b77d                	j	20401a94 <_free_r+0x34>
20401ae8:	00c47563          	bgeu	s0,a2,20401af2 <_free_r+0x92>
20401aec:	47b1                	li	a5,12
20401aee:	c09c                	sw	a5,0(s1)
20401af0:	b755                	j	20401a94 <_free_r+0x34>
20401af2:	4010                	lw	a2,0(s0)
20401af4:	00c406b3          	add	a3,s0,a2
20401af8:	00d71663          	bne	a4,a3,20401b04 <_free_r+0xa4>
20401afc:	4314                	lw	a3,0(a4)
20401afe:	4358                	lw	a4,4(a4)
20401b00:	96b2                	add	a3,a3,a2
20401b02:	c014                	sw	a3,0(s0)
20401b04:	c058                	sw	a4,4(s0)
20401b06:	c3c0                	sw	s0,4(a5)
20401b08:	b771                	j	20401a94 <_free_r+0x34>
20401b0a:	8082                	ret

20401b0c <_malloc_r>:
_malloc_r():
20401b0c:	1101                	addi	sp,sp,-32
20401b0e:	ca26                	sw	s1,20(sp)
20401b10:	00358493          	addi	s1,a1,3
20401b14:	98f1                	andi	s1,s1,-4
20401b16:	ce06                	sw	ra,28(sp)
20401b18:	cc22                	sw	s0,24(sp)
20401b1a:	c84a                	sw	s2,16(sp)
20401b1c:	c64e                	sw	s3,12(sp)
20401b1e:	04a1                	addi	s1,s1,8
20401b20:	47b1                	li	a5,12
20401b22:	04f4f763          	bgeu	s1,a5,20401b70 <_malloc_r+0x64>
20401b26:	44b1                	li	s1,12
20401b28:	04b4e663          	bltu	s1,a1,20401b74 <_malloc_r+0x68>
20401b2c:	892a                	mv	s2,a0
20401b2e:	2b7d                	jal	204020ec <__malloc_lock>
20401b30:	5fc00797          	auipc	a5,0x5fc00
20401b34:	c0078793          	addi	a5,a5,-1024 # 80001730 <metal_segment_data_target_end>
20401b38:	4398                	lw	a4,0(a5)
20401b3a:	843a                	mv	s0,a4
20401b3c:	e431                	bnez	s0,20401b88 <_malloc_r+0x7c>
20401b3e:	5fc00797          	auipc	a5,0x5fc00
20401b42:	bf678793          	addi	a5,a5,-1034 # 80001734 <__malloc_sbrk_start>
20401b46:	439c                	lw	a5,0(a5)
20401b48:	eb81                	bnez	a5,20401b58 <_malloc_r+0x4c>
20401b4a:	4581                	li	a1,0
20401b4c:	854a                	mv	a0,s2
20401b4e:	2645                	jal	20401eee <_sbrk_r>
20401b50:	5fc00797          	auipc	a5,0x5fc00
20401b54:	bea7a223          	sw	a0,-1052(a5) # 80001734 <__malloc_sbrk_start>
20401b58:	85a6                	mv	a1,s1
20401b5a:	854a                	mv	a0,s2
20401b5c:	2e49                	jal	20401eee <_sbrk_r>
20401b5e:	59fd                	li	s3,-1
20401b60:	07351963          	bne	a0,s3,20401bd2 <_malloc_r+0xc6>
20401b64:	47b1                	li	a5,12
20401b66:	00f92023          	sw	a5,0(s2)
20401b6a:	854a                	mv	a0,s2
20401b6c:	2349                	jal	204020ee <__malloc_unlock>
20401b6e:	a029                	j	20401b78 <_malloc_r+0x6c>
20401b70:	fa04dce3          	bgez	s1,20401b28 <_malloc_r+0x1c>
20401b74:	47b1                	li	a5,12
20401b76:	c11c                	sw	a5,0(a0)
20401b78:	4501                	li	a0,0
20401b7a:	40f2                	lw	ra,28(sp)
20401b7c:	4462                	lw	s0,24(sp)
20401b7e:	44d2                	lw	s1,20(sp)
20401b80:	4942                	lw	s2,16(sp)
20401b82:	49b2                	lw	s3,12(sp)
20401b84:	6105                	addi	sp,sp,32
20401b86:	8082                	ret
20401b88:	401c                	lw	a5,0(s0)
20401b8a:	8f85                	sub	a5,a5,s1
20401b8c:	0407c063          	bltz	a5,20401bcc <_malloc_r+0xc0>
20401b90:	46ad                	li	a3,11
20401b92:	00f6f663          	bgeu	a3,a5,20401b9e <_malloc_r+0x92>
20401b96:	c01c                	sw	a5,0(s0)
20401b98:	943e                	add	s0,s0,a5
20401b9a:	c004                	sw	s1,0(s0)
20401b9c:	a801                	j	20401bac <_malloc_r+0xa0>
20401b9e:	405c                	lw	a5,4(s0)
20401ba0:	02871463          	bne	a4,s0,20401bc8 <_malloc_r+0xbc>
20401ba4:	5fc00717          	auipc	a4,0x5fc00
20401ba8:	b8f72623          	sw	a5,-1140(a4) # 80001730 <metal_segment_data_target_end>
20401bac:	854a                	mv	a0,s2
20401bae:	2381                	jal	204020ee <__malloc_unlock>
20401bb0:	00b40513          	addi	a0,s0,11
20401bb4:	00440793          	addi	a5,s0,4
20401bb8:	9961                	andi	a0,a0,-8
20401bba:	40f50733          	sub	a4,a0,a5
20401bbe:	df55                	beqz	a4,20401b7a <_malloc_r+0x6e>
20401bc0:	943a                	add	s0,s0,a4
20401bc2:	8f89                	sub	a5,a5,a0
20401bc4:	c01c                	sw	a5,0(s0)
20401bc6:	bf55                	j	20401b7a <_malloc_r+0x6e>
20401bc8:	c35c                	sw	a5,4(a4)
20401bca:	b7cd                	j	20401bac <_malloc_r+0xa0>
20401bcc:	8722                	mv	a4,s0
20401bce:	4040                	lw	s0,4(s0)
20401bd0:	b7b5                	j	20401b3c <_malloc_r+0x30>
20401bd2:	00350413          	addi	s0,a0,3
20401bd6:	9871                	andi	s0,s0,-4
20401bd8:	fc8501e3          	beq	a0,s0,20401b9a <_malloc_r+0x8e>
20401bdc:	40a405b3          	sub	a1,s0,a0
20401be0:	854a                	mv	a0,s2
20401be2:	2631                	jal	20401eee <_sbrk_r>
20401be4:	fb351be3          	bne	a0,s3,20401b9a <_malloc_r+0x8e>
20401be8:	bfb5                	j	20401b64 <_malloc_r+0x58>

20401bea <__sfputc_r>:
__sfputc_r():
20401bea:	461c                	lw	a5,8(a2)
20401bec:	17fd                	addi	a5,a5,-1
20401bee:	c61c                	sw	a5,8(a2)
20401bf0:	0007da63          	bgez	a5,20401c04 <__sfputc_r+0x1a>
20401bf4:	4e18                	lw	a4,24(a2)
20401bf6:	00e7c563          	blt	a5,a4,20401c00 <__sfputc_r+0x16>
20401bfa:	47a9                	li	a5,10
20401bfc:	00f59463          	bne	a1,a5,20401c04 <__sfputc_r+0x1a>
20401c00:	f1cff06f          	j	2040131c <__swbuf_r>
20401c04:	421c                	lw	a5,0(a2)
20401c06:	852e                	mv	a0,a1
20401c08:	00178713          	addi	a4,a5,1
20401c0c:	c218                	sw	a4,0(a2)
20401c0e:	00b78023          	sb	a1,0(a5)
20401c12:	8082                	ret

20401c14 <__sfputs_r>:
__sfputs_r():
20401c14:	1101                	addi	sp,sp,-32
20401c16:	cc22                	sw	s0,24(sp)
20401c18:	ca26                	sw	s1,20(sp)
20401c1a:	c84a                	sw	s2,16(sp)
20401c1c:	c64e                	sw	s3,12(sp)
20401c1e:	c452                	sw	s4,8(sp)
20401c20:	ce06                	sw	ra,28(sp)
20401c22:	892a                	mv	s2,a0
20401c24:	89ae                	mv	s3,a1
20401c26:	8432                	mv	s0,a2
20401c28:	00d604b3          	add	s1,a2,a3
20401c2c:	5a7d                	li	s4,-1
20401c2e:	00941463          	bne	s0,s1,20401c36 <__sfputs_r+0x22>
20401c32:	4501                	li	a0,0
20401c34:	a809                	j	20401c46 <__sfputs_r+0x32>
20401c36:	00044583          	lbu	a1,0(s0)
20401c3a:	864e                	mv	a2,s3
20401c3c:	854a                	mv	a0,s2
20401c3e:	3775                	jal	20401bea <__sfputc_r>
20401c40:	0405                	addi	s0,s0,1
20401c42:	ff4516e3          	bne	a0,s4,20401c2e <__sfputs_r+0x1a>
20401c46:	40f2                	lw	ra,28(sp)
20401c48:	4462                	lw	s0,24(sp)
20401c4a:	44d2                	lw	s1,20(sp)
20401c4c:	4942                	lw	s2,16(sp)
20401c4e:	49b2                	lw	s3,12(sp)
20401c50:	4a22                	lw	s4,8(sp)
20401c52:	6105                	addi	sp,sp,32
20401c54:	8082                	ret

20401c56 <_vfiprintf_r>:
_vfiprintf_r():
20401c56:	7135                	addi	sp,sp,-160
20401c58:	cd22                	sw	s0,152(sp)
20401c5a:	cb26                	sw	s1,148(sp)
20401c5c:	c94a                	sw	s2,144(sp)
20401c5e:	c74e                	sw	s3,140(sp)
20401c60:	cf06                	sw	ra,156(sp)
20401c62:	c552                	sw	s4,136(sp)
20401c64:	c356                	sw	s5,132(sp)
20401c66:	c15a                	sw	s6,128(sp)
20401c68:	dede                	sw	s7,124(sp)
20401c6a:	dce2                	sw	s8,120(sp)
20401c6c:	dae6                	sw	s9,116(sp)
20401c6e:	89aa                	mv	s3,a0
20401c70:	84ae                	mv	s1,a1
20401c72:	8932                	mv	s2,a2
20401c74:	8436                	mv	s0,a3
20401c76:	c501                	beqz	a0,20401c7e <_vfiprintf_r+0x28>
20401c78:	4d1c                	lw	a5,24(a0)
20401c7a:	e391                	bnez	a5,20401c7e <_vfiprintf_r+0x28>
20401c7c:	3cd1                	jal	20401750 <__sinit>
20401c7e:	00004797          	auipc	a5,0x4
20401c82:	40a78793          	addi	a5,a5,1034 # 20406088 <__sf_fake_stdin>
20401c86:	0cf49b63          	bne	s1,a5,20401d5c <_vfiprintf_r+0x106>
20401c8a:	0049a483          	lw	s1,4(s3)
20401c8e:	00c4d783          	lhu	a5,12(s1)
20401c92:	8ba1                	andi	a5,a5,8
20401c94:	c7f5                	beqz	a5,20401d80 <_vfiprintf_r+0x12a>
20401c96:	489c                	lw	a5,16(s1)
20401c98:	c7e5                	beqz	a5,20401d80 <_vfiprintf_r+0x12a>
20401c9a:	02000793          	li	a5,32
20401c9e:	02f104a3          	sb	a5,41(sp)
20401ca2:	03000793          	li	a5,48
20401ca6:	d202                	sw	zero,36(sp)
20401ca8:	02f10523          	sb	a5,42(sp)
20401cac:	c622                	sw	s0,12(sp)
20401cae:	02500b93          	li	s7,37
20401cb2:	00004a97          	auipc	s5,0x4
20401cb6:	416a8a93          	addi	s5,s5,1046 # 204060c8 <__sf_fake_stdout+0x20>
20401cba:	4c05                	li	s8,1
20401cbc:	4b29                	li	s6,10
20401cbe:	844a                	mv	s0,s2
20401cc0:	00044783          	lbu	a5,0(s0)
20401cc4:	c399                	beqz	a5,20401cca <_vfiprintf_r+0x74>
20401cc6:	0f779063          	bne	a5,s7,20401da6 <_vfiprintf_r+0x150>
20401cca:	41240cb3          	sub	s9,s0,s2
20401cce:	000c8d63          	beqz	s9,20401ce8 <_vfiprintf_r+0x92>
20401cd2:	86e6                	mv	a3,s9
20401cd4:	864a                	mv	a2,s2
20401cd6:	85a6                	mv	a1,s1
20401cd8:	854e                	mv	a0,s3
20401cda:	3f2d                	jal	20401c14 <__sfputs_r>
20401cdc:	57fd                	li	a5,-1
20401cde:	1ef50663          	beq	a0,a5,20401eca <_vfiprintf_r+0x274>
20401ce2:	5692                	lw	a3,36(sp)
20401ce4:	96e6                	add	a3,a3,s9
20401ce6:	d236                	sw	a3,36(sp)
20401ce8:	00044783          	lbu	a5,0(s0)
20401cec:	1c078f63          	beqz	a5,20401eca <_vfiprintf_r+0x274>
20401cf0:	57fd                	li	a5,-1
20401cf2:	00140913          	addi	s2,s0,1
20401cf6:	c802                	sw	zero,16(sp)
20401cf8:	ce02                	sw	zero,28(sp)
20401cfa:	ca3e                	sw	a5,20(sp)
20401cfc:	cc02                	sw	zero,24(sp)
20401cfe:	040109a3          	sb	zero,83(sp)
20401d02:	d482                	sw	zero,104(sp)
20401d04:	00094583          	lbu	a1,0(s2)
20401d08:	4615                	li	a2,5
20401d0a:	8556                	mv	a0,s5
20401d0c:	26d9                	jal	204020d2 <memchr>
20401d0e:	00190413          	addi	s0,s2,1
20401d12:	47c2                	lw	a5,16(sp)
20401d14:	e959                	bnez	a0,20401daa <_vfiprintf_r+0x154>
20401d16:	0107f713          	andi	a4,a5,16
20401d1a:	c709                	beqz	a4,20401d24 <_vfiprintf_r+0xce>
20401d1c:	02000713          	li	a4,32
20401d20:	04e109a3          	sb	a4,83(sp)
20401d24:	0087f713          	andi	a4,a5,8
20401d28:	c709                	beqz	a4,20401d32 <_vfiprintf_r+0xdc>
20401d2a:	02b00713          	li	a4,43
20401d2e:	04e109a3          	sb	a4,83(sp)
20401d32:	00094683          	lbu	a3,0(s2)
20401d36:	02a00713          	li	a4,42
20401d3a:	08e68063          	beq	a3,a4,20401dba <_vfiprintf_r+0x164>
20401d3e:	47f2                	lw	a5,28(sp)
20401d40:	844a                	mv	s0,s2
20401d42:	4681                	li	a3,0
20401d44:	4625                	li	a2,9
20401d46:	00044703          	lbu	a4,0(s0)
20401d4a:	00140593          	addi	a1,s0,1
20401d4e:	fd070713          	addi	a4,a4,-48
20401d52:	0ae67963          	bgeu	a2,a4,20401e04 <_vfiprintf_r+0x1ae>
20401d56:	cab5                	beqz	a3,20401dca <_vfiprintf_r+0x174>
20401d58:	ce3e                	sw	a5,28(sp)
20401d5a:	a885                	j	20401dca <_vfiprintf_r+0x174>
20401d5c:	00004797          	auipc	a5,0x4
20401d60:	34c78793          	addi	a5,a5,844 # 204060a8 <__sf_fake_stdout>
20401d64:	00f49563          	bne	s1,a5,20401d6e <_vfiprintf_r+0x118>
20401d68:	0089a483          	lw	s1,8(s3)
20401d6c:	b70d                	j	20401c8e <_vfiprintf_r+0x38>
20401d6e:	00004797          	auipc	a5,0x4
20401d72:	2fa78793          	addi	a5,a5,762 # 20406068 <__sf_fake_stderr>
20401d76:	f0f49ce3          	bne	s1,a5,20401c8e <_vfiprintf_r+0x38>
20401d7a:	00c9a483          	lw	s1,12(s3)
20401d7e:	bf01                	j	20401c8e <_vfiprintf_r+0x38>
20401d80:	85a6                	mv	a1,s1
20401d82:	854e                	mv	a0,s3
20401d84:	e58ff0ef          	jal	ra,204013dc <__swsetup_r>
20401d88:	d909                	beqz	a0,20401c9a <_vfiprintf_r+0x44>
20401d8a:	557d                	li	a0,-1
20401d8c:	40fa                	lw	ra,156(sp)
20401d8e:	446a                	lw	s0,152(sp)
20401d90:	44da                	lw	s1,148(sp)
20401d92:	494a                	lw	s2,144(sp)
20401d94:	49ba                	lw	s3,140(sp)
20401d96:	4a2a                	lw	s4,136(sp)
20401d98:	4a9a                	lw	s5,132(sp)
20401d9a:	4b0a                	lw	s6,128(sp)
20401d9c:	5bf6                	lw	s7,124(sp)
20401d9e:	5c66                	lw	s8,120(sp)
20401da0:	5cd6                	lw	s9,116(sp)
20401da2:	610d                	addi	sp,sp,160
20401da4:	8082                	ret
20401da6:	0405                	addi	s0,s0,1
20401da8:	bf21                	j	20401cc0 <_vfiprintf_r+0x6a>
20401daa:	41550533          	sub	a0,a0,s5
20401dae:	00ac1533          	sll	a0,s8,a0
20401db2:	8fc9                	or	a5,a5,a0
20401db4:	c83e                	sw	a5,16(sp)
20401db6:	8922                	mv	s2,s0
20401db8:	b7b1                	j	20401d04 <_vfiprintf_r+0xae>
20401dba:	4732                	lw	a4,12(sp)
20401dbc:	00470693          	addi	a3,a4,4
20401dc0:	4318                	lw	a4,0(a4)
20401dc2:	c636                	sw	a3,12(sp)
20401dc4:	02074963          	bltz	a4,20401df6 <_vfiprintf_r+0x1a0>
20401dc8:	ce3a                	sw	a4,28(sp)
20401dca:	00044703          	lbu	a4,0(s0)
20401dce:	02e00793          	li	a5,46
20401dd2:	04f71f63          	bne	a4,a5,20401e30 <_vfiprintf_r+0x1da>
20401dd6:	00144703          	lbu	a4,1(s0)
20401dda:	02a00793          	li	a5,42
20401dde:	02f71b63          	bne	a4,a5,20401e14 <_vfiprintf_r+0x1be>
20401de2:	47b2                	lw	a5,12(sp)
20401de4:	0409                	addi	s0,s0,2
20401de6:	00478713          	addi	a4,a5,4
20401dea:	439c                	lw	a5,0(a5)
20401dec:	c63a                	sw	a4,12(sp)
20401dee:	0207c163          	bltz	a5,20401e10 <_vfiprintf_r+0x1ba>
20401df2:	ca3e                	sw	a5,20(sp)
20401df4:	a835                	j	20401e30 <_vfiprintf_r+0x1da>
20401df6:	40e00733          	neg	a4,a4
20401dfa:	0027e793          	ori	a5,a5,2
20401dfe:	ce3a                	sw	a4,28(sp)
20401e00:	c83e                	sw	a5,16(sp)
20401e02:	b7e1                	j	20401dca <_vfiprintf_r+0x174>
20401e04:	036787b3          	mul	a5,a5,s6
20401e08:	4685                	li	a3,1
20401e0a:	842e                	mv	s0,a1
20401e0c:	97ba                	add	a5,a5,a4
20401e0e:	bf25                	j	20401d46 <_vfiprintf_r+0xf0>
20401e10:	57fd                	li	a5,-1
20401e12:	b7c5                	j	20401df2 <_vfiprintf_r+0x19c>
20401e14:	0405                	addi	s0,s0,1
20401e16:	ca02                	sw	zero,20(sp)
20401e18:	4681                	li	a3,0
20401e1a:	4781                	li	a5,0
20401e1c:	4625                	li	a2,9
20401e1e:	00044703          	lbu	a4,0(s0)
20401e22:	00140593          	addi	a1,s0,1
20401e26:	fd070713          	addi	a4,a4,-48
20401e2a:	06e67663          	bgeu	a2,a4,20401e96 <_vfiprintf_r+0x240>
20401e2e:	f2f1                	bnez	a3,20401df2 <_vfiprintf_r+0x19c>
20401e30:	00044583          	lbu	a1,0(s0)
20401e34:	460d                	li	a2,3
20401e36:	00004517          	auipc	a0,0x4
20401e3a:	29a50513          	addi	a0,a0,666 # 204060d0 <__sf_fake_stdout+0x28>
20401e3e:	2c51                	jal	204020d2 <memchr>
20401e40:	cd11                	beqz	a0,20401e5c <_vfiprintf_r+0x206>
20401e42:	00004797          	auipc	a5,0x4
20401e46:	28e78793          	addi	a5,a5,654 # 204060d0 <__sf_fake_stdout+0x28>
20401e4a:	8d1d                	sub	a0,a0,a5
20401e4c:	04000793          	li	a5,64
20401e50:	00a797b3          	sll	a5,a5,a0
20401e54:	4542                	lw	a0,16(sp)
20401e56:	0405                	addi	s0,s0,1
20401e58:	8d5d                	or	a0,a0,a5
20401e5a:	c82a                	sw	a0,16(sp)
20401e5c:	00044583          	lbu	a1,0(s0)
20401e60:	4619                	li	a2,6
20401e62:	00004517          	auipc	a0,0x4
20401e66:	27250513          	addi	a0,a0,626 # 204060d4 <__sf_fake_stdout+0x2c>
20401e6a:	00140913          	addi	s2,s0,1
20401e6e:	02b10423          	sb	a1,40(sp)
20401e72:	2485                	jal	204020d2 <memchr>
20401e74:	c13d                	beqz	a0,20401eda <_vfiprintf_r+0x284>
20401e76:	dfbfe797          	auipc	a5,0xdfbfe
20401e7a:	18a78793          	addi	a5,a5,394 # 0 <__metal_boot_hart>
20401e7e:	e795                	bnez	a5,20401eaa <_vfiprintf_r+0x254>
20401e80:	4742                	lw	a4,16(sp)
20401e82:	47b2                	lw	a5,12(sp)
20401e84:	10077713          	andi	a4,a4,256
20401e88:	cf09                	beqz	a4,20401ea2 <_vfiprintf_r+0x24c>
20401e8a:	0791                	addi	a5,a5,4
20401e8c:	c63e                	sw	a5,12(sp)
20401e8e:	5792                	lw	a5,36(sp)
20401e90:	97d2                	add	a5,a5,s4
20401e92:	d23e                	sw	a5,36(sp)
20401e94:	b52d                	j	20401cbe <_vfiprintf_r+0x68>
20401e96:	036787b3          	mul	a5,a5,s6
20401e9a:	4685                	li	a3,1
20401e9c:	842e                	mv	s0,a1
20401e9e:	97ba                	add	a5,a5,a4
20401ea0:	bfbd                	j	20401e1e <_vfiprintf_r+0x1c8>
20401ea2:	079d                	addi	a5,a5,7
20401ea4:	9be1                	andi	a5,a5,-8
20401ea6:	07a1                	addi	a5,a5,8
20401ea8:	b7d5                	j	20401e8c <_vfiprintf_r+0x236>
20401eaa:	0078                	addi	a4,sp,12
20401eac:	00000697          	auipc	a3,0x0
20401eb0:	d6868693          	addi	a3,a3,-664 # 20401c14 <__sfputs_r>
20401eb4:	8626                	mv	a2,s1
20401eb6:	080c                	addi	a1,sp,16
20401eb8:	854e                	mv	a0,s3
20401eba:	00000097          	auipc	ra,0x0
20401ebe:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
20401ec2:	57fd                	li	a5,-1
20401ec4:	8a2a                	mv	s4,a0
20401ec6:	fcf514e3          	bne	a0,a5,20401e8e <_vfiprintf_r+0x238>
20401eca:	00c4d783          	lhu	a5,12(s1)
20401ece:	0407f793          	andi	a5,a5,64
20401ed2:	ea079ce3          	bnez	a5,20401d8a <_vfiprintf_r+0x134>
20401ed6:	5512                	lw	a0,36(sp)
20401ed8:	bd55                	j	20401d8c <_vfiprintf_r+0x136>
20401eda:	0078                	addi	a4,sp,12
20401edc:	00000697          	auipc	a3,0x0
20401ee0:	d3868693          	addi	a3,a3,-712 # 20401c14 <__sfputs_r>
20401ee4:	8626                	mv	a2,s1
20401ee6:	080c                	addi	a1,sp,16
20401ee8:	854e                	mv	a0,s3
20401eea:	2e09                	jal	204021fc <_printf_i>
20401eec:	bfd9                	j	20401ec2 <_vfiprintf_r+0x26c>

20401eee <_sbrk_r>:
_sbrk_r():
20401eee:	1141                	addi	sp,sp,-16
20401ef0:	c422                	sw	s0,8(sp)
20401ef2:	842a                	mv	s0,a0
20401ef4:	852e                	mv	a0,a1
20401ef6:	5fc01797          	auipc	a5,0x5fc01
20401efa:	8a07ad23          	sw	zero,-1862(a5) # 800027b0 <errno>
20401efe:	c606                	sw	ra,12(sp)
20401f00:	2579                	jal	2040258e <_sbrk>
20401f02:	57fd                	li	a5,-1
20401f04:	00f51963          	bne	a0,a5,20401f16 <_sbrk_r+0x28>
20401f08:	5fc01797          	auipc	a5,0x5fc01
20401f0c:	8a878793          	addi	a5,a5,-1880 # 800027b0 <errno>
20401f10:	439c                	lw	a5,0(a5)
20401f12:	c391                	beqz	a5,20401f16 <_sbrk_r+0x28>
20401f14:	c01c                	sw	a5,0(s0)
20401f16:	40b2                	lw	ra,12(sp)
20401f18:	4422                	lw	s0,8(sp)
20401f1a:	0141                	addi	sp,sp,16
20401f1c:	8082                	ret

20401f1e <__sread>:
__sread():
20401f1e:	1141                	addi	sp,sp,-16
20401f20:	c422                	sw	s0,8(sp)
20401f22:	842e                	mv	s0,a1
20401f24:	00e59583          	lh	a1,14(a1)
20401f28:	c606                	sw	ra,12(sp)
20401f2a:	2b95                	jal	2040249e <_read_r>
20401f2c:	00054963          	bltz	a0,20401f3e <__sread+0x20>
20401f30:	487c                	lw	a5,84(s0)
20401f32:	97aa                	add	a5,a5,a0
20401f34:	c87c                	sw	a5,84(s0)
20401f36:	40b2                	lw	ra,12(sp)
20401f38:	4422                	lw	s0,8(sp)
20401f3a:	0141                	addi	sp,sp,16
20401f3c:	8082                	ret
20401f3e:	00c45783          	lhu	a5,12(s0)
20401f42:	777d                	lui	a4,0xfffff
20401f44:	177d                	addi	a4,a4,-1
20401f46:	8ff9                	and	a5,a5,a4
20401f48:	00f41623          	sh	a5,12(s0)
20401f4c:	b7ed                	j	20401f36 <__sread+0x18>

20401f4e <__swrite>:
__swrite():
20401f4e:	00c5d783          	lhu	a5,12(a1)
20401f52:	1101                	addi	sp,sp,-32
20401f54:	cc22                	sw	s0,24(sp)
20401f56:	ca26                	sw	s1,20(sp)
20401f58:	c84a                	sw	s2,16(sp)
20401f5a:	c64e                	sw	s3,12(sp)
20401f5c:	ce06                	sw	ra,28(sp)
20401f5e:	1007f793          	andi	a5,a5,256
20401f62:	84aa                	mv	s1,a0
20401f64:	842e                	mv	s0,a1
20401f66:	8932                	mv	s2,a2
20401f68:	89b6                	mv	s3,a3
20401f6a:	c791                	beqz	a5,20401f76 <__swrite+0x28>
20401f6c:	00e59583          	lh	a1,14(a1)
20401f70:	4689                	li	a3,2
20401f72:	4601                	li	a2,0
20401f74:	222d                	jal	2040209e <_lseek_r>
20401f76:	00c45783          	lhu	a5,12(s0)
20401f7a:	777d                	lui	a4,0xfffff
20401f7c:	177d                	addi	a4,a4,-1
20401f7e:	8ff9                	and	a5,a5,a4
20401f80:	00f41623          	sh	a5,12(s0)
20401f84:	00e41583          	lh	a1,14(s0)
20401f88:	4462                	lw	s0,24(sp)
20401f8a:	40f2                	lw	ra,28(sp)
20401f8c:	86ce                	mv	a3,s3
20401f8e:	864a                	mv	a2,s2
20401f90:	49b2                	lw	s3,12(sp)
20401f92:	4942                	lw	s2,16(sp)
20401f94:	8526                	mv	a0,s1
20401f96:	44d2                	lw	s1,20(sp)
20401f98:	6105                	addi	sp,sp,32
20401f9a:	a83d                	j	20401fd8 <_write_r>

20401f9c <__sseek>:
__sseek():
20401f9c:	1141                	addi	sp,sp,-16
20401f9e:	c422                	sw	s0,8(sp)
20401fa0:	842e                	mv	s0,a1
20401fa2:	00e59583          	lh	a1,14(a1)
20401fa6:	c606                	sw	ra,12(sp)
20401fa8:	28dd                	jal	2040209e <_lseek_r>
20401faa:	57fd                	li	a5,-1
20401fac:	00c45703          	lhu	a4,12(s0)
20401fb0:	00f51b63          	bne	a0,a5,20401fc6 <__sseek+0x2a>
20401fb4:	77fd                	lui	a5,0xfffff
20401fb6:	17fd                	addi	a5,a5,-1
20401fb8:	8ff9                	and	a5,a5,a4
20401fba:	00f41623          	sh	a5,12(s0)
20401fbe:	40b2                	lw	ra,12(sp)
20401fc0:	4422                	lw	s0,8(sp)
20401fc2:	0141                	addi	sp,sp,16
20401fc4:	8082                	ret
20401fc6:	6785                	lui	a5,0x1
20401fc8:	8fd9                	or	a5,a5,a4
20401fca:	00f41623          	sh	a5,12(s0)
20401fce:	c868                	sw	a0,84(s0)
20401fd0:	b7fd                	j	20401fbe <__sseek+0x22>

20401fd2 <__sclose>:
__sclose():
20401fd2:	00e59583          	lh	a1,14(a1)
20401fd6:	a81d                	j	2040200c <_close_r>

20401fd8 <_write_r>:
_write_r():
20401fd8:	1141                	addi	sp,sp,-16
20401fda:	c422                	sw	s0,8(sp)
20401fdc:	842a                	mv	s0,a0
20401fde:	852e                	mv	a0,a1
20401fe0:	85b2                	mv	a1,a2
20401fe2:	8636                	mv	a2,a3
20401fe4:	5fc00797          	auipc	a5,0x5fc00
20401fe8:	7c07a623          	sw	zero,1996(a5) # 800027b0 <errno>
20401fec:	c606                	sw	ra,12(sp)
20401fee:	2d39                	jal	2040260c <_write>
20401ff0:	57fd                	li	a5,-1
20401ff2:	00f51963          	bne	a0,a5,20402004 <_write_r+0x2c>
20401ff6:	5fc00797          	auipc	a5,0x5fc00
20401ffa:	7ba78793          	addi	a5,a5,1978 # 800027b0 <errno>
20401ffe:	439c                	lw	a5,0(a5)
20402000:	c391                	beqz	a5,20402004 <_write_r+0x2c>
20402002:	c01c                	sw	a5,0(s0)
20402004:	40b2                	lw	ra,12(sp)
20402006:	4422                	lw	s0,8(sp)
20402008:	0141                	addi	sp,sp,16
2040200a:	8082                	ret

2040200c <_close_r>:
_close_r():
2040200c:	1141                	addi	sp,sp,-16
2040200e:	c422                	sw	s0,8(sp)
20402010:	842a                	mv	s0,a0
20402012:	852e                	mv	a0,a1
20402014:	5fc00797          	auipc	a5,0x5fc00
20402018:	7807ae23          	sw	zero,1948(a5) # 800027b0 <errno>
2040201c:	c606                	sw	ra,12(sp)
2040201e:	2955                	jal	204024d2 <_close>
20402020:	57fd                	li	a5,-1
20402022:	00f51963          	bne	a0,a5,20402034 <_close_r+0x28>
20402026:	5fc00797          	auipc	a5,0x5fc00
2040202a:	78a78793          	addi	a5,a5,1930 # 800027b0 <errno>
2040202e:	439c                	lw	a5,0(a5)
20402030:	c391                	beqz	a5,20402034 <_close_r+0x28>
20402032:	c01c                	sw	a5,0(s0)
20402034:	40b2                	lw	ra,12(sp)
20402036:	4422                	lw	s0,8(sp)
20402038:	0141                	addi	sp,sp,16
2040203a:	8082                	ret

2040203c <_fstat_r>:
_fstat_r():
2040203c:	1141                	addi	sp,sp,-16
2040203e:	c422                	sw	s0,8(sp)
20402040:	842a                	mv	s0,a0
20402042:	852e                	mv	a0,a1
20402044:	85b2                	mv	a1,a2
20402046:	5fc00797          	auipc	a5,0x5fc00
2040204a:	7607a523          	sw	zero,1898(a5) # 800027b0 <errno>
2040204e:	c606                	sw	ra,12(sp)
20402050:	2155                	jal	204024f4 <_fstat>
20402052:	57fd                	li	a5,-1
20402054:	00f51963          	bne	a0,a5,20402066 <_fstat_r+0x2a>
20402058:	5fc00797          	auipc	a5,0x5fc00
2040205c:	75878793          	addi	a5,a5,1880 # 800027b0 <errno>
20402060:	439c                	lw	a5,0(a5)
20402062:	c391                	beqz	a5,20402066 <_fstat_r+0x2a>
20402064:	c01c                	sw	a5,0(s0)
20402066:	40b2                	lw	ra,12(sp)
20402068:	4422                	lw	s0,8(sp)
2040206a:	0141                	addi	sp,sp,16
2040206c:	8082                	ret

2040206e <_isatty_r>:
_isatty_r():
2040206e:	1141                	addi	sp,sp,-16
20402070:	c422                	sw	s0,8(sp)
20402072:	842a                	mv	s0,a0
20402074:	852e                	mv	a0,a1
20402076:	5fc00797          	auipc	a5,0x5fc00
2040207a:	7207ad23          	sw	zero,1850(a5) # 800027b0 <errno>
2040207e:	c606                	sw	ra,12(sp)
20402080:	2969                	jal	2040251a <_isatty>
20402082:	57fd                	li	a5,-1
20402084:	00f51963          	bne	a0,a5,20402096 <_isatty_r+0x28>
20402088:	5fc00797          	auipc	a5,0x5fc00
2040208c:	72878793          	addi	a5,a5,1832 # 800027b0 <errno>
20402090:	439c                	lw	a5,0(a5)
20402092:	c391                	beqz	a5,20402096 <_isatty_r+0x28>
20402094:	c01c                	sw	a5,0(s0)
20402096:	40b2                	lw	ra,12(sp)
20402098:	4422                	lw	s0,8(sp)
2040209a:	0141                	addi	sp,sp,16
2040209c:	8082                	ret

2040209e <_lseek_r>:
_lseek_r():
2040209e:	1141                	addi	sp,sp,-16
204020a0:	c422                	sw	s0,8(sp)
204020a2:	842a                	mv	s0,a0
204020a4:	852e                	mv	a0,a1
204020a6:	85b2                	mv	a1,a2
204020a8:	8636                	mv	a2,a3
204020aa:	5fc00797          	auipc	a5,0x5fc00
204020ae:	7007a323          	sw	zero,1798(a5) # 800027b0 <errno>
204020b2:	c606                	sw	ra,12(sp)
204020b4:	2159                	jal	2040253a <_lseek>
204020b6:	57fd                	li	a5,-1
204020b8:	00f51963          	bne	a0,a5,204020ca <_lseek_r+0x2c>
204020bc:	5fc00797          	auipc	a5,0x5fc00
204020c0:	6f478793          	addi	a5,a5,1780 # 800027b0 <errno>
204020c4:	439c                	lw	a5,0(a5)
204020c6:	c391                	beqz	a5,204020ca <_lseek_r+0x2c>
204020c8:	c01c                	sw	a5,0(s0)
204020ca:	40b2                	lw	ra,12(sp)
204020cc:	4422                	lw	s0,8(sp)
204020ce:	0141                	addi	sp,sp,16
204020d0:	8082                	ret

204020d2 <memchr>:
memchr():
204020d2:	0ff5f593          	andi	a1,a1,255
204020d6:	962a                	add	a2,a2,a0
204020d8:	00c51463          	bne	a0,a2,204020e0 <memchr+0xe>
204020dc:	4501                	li	a0,0
204020de:	8082                	ret
204020e0:	00054783          	lbu	a5,0(a0)
204020e4:	feb78de3          	beq	a5,a1,204020de <memchr+0xc>
204020e8:	0505                	addi	a0,a0,1
204020ea:	b7fd                	j	204020d8 <memchr+0x6>

204020ec <__malloc_lock>:
__malloc_lock():
204020ec:	8082                	ret

204020ee <__malloc_unlock>:
__malloc_unlock():
204020ee:	8082                	ret

204020f0 <_printf_common>:
_printf_common():
204020f0:	7179                	addi	sp,sp,-48
204020f2:	ca56                	sw	s5,20(sp)
204020f4:	499c                	lw	a5,16(a1)
204020f6:	8aba                	mv	s5,a4
204020f8:	4598                	lw	a4,8(a1)
204020fa:	d422                	sw	s0,40(sp)
204020fc:	d226                	sw	s1,36(sp)
204020fe:	ce4e                	sw	s3,28(sp)
20402100:	cc52                	sw	s4,24(sp)
20402102:	d606                	sw	ra,44(sp)
20402104:	d04a                	sw	s2,32(sp)
20402106:	c85a                	sw	s6,16(sp)
20402108:	c65e                	sw	s7,12(sp)
2040210a:	89aa                	mv	s3,a0
2040210c:	842e                	mv	s0,a1
2040210e:	84b2                	mv	s1,a2
20402110:	8a36                	mv	s4,a3
20402112:	00e7d363          	bge	a5,a4,20402118 <_printf_common+0x28>
20402116:	87ba                	mv	a5,a4
20402118:	c09c                	sw	a5,0(s1)
2040211a:	04344703          	lbu	a4,67(s0)
2040211e:	c319                	beqz	a4,20402124 <_printf_common+0x34>
20402120:	0785                	addi	a5,a5,1
20402122:	c09c                	sw	a5,0(s1)
20402124:	401c                	lw	a5,0(s0)
20402126:	0207f793          	andi	a5,a5,32
2040212a:	c781                	beqz	a5,20402132 <_printf_common+0x42>
2040212c:	409c                	lw	a5,0(s1)
2040212e:	0789                	addi	a5,a5,2
20402130:	c09c                	sw	a5,0(s1)
20402132:	00042903          	lw	s2,0(s0)
20402136:	00697913          	andi	s2,s2,6
2040213a:	00091a63          	bnez	s2,2040214e <_printf_common+0x5e>
2040213e:	01940b13          	addi	s6,s0,25
20402142:	5bfd                	li	s7,-1
20402144:	445c                	lw	a5,12(s0)
20402146:	4098                	lw	a4,0(s1)
20402148:	8f99                	sub	a5,a5,a4
2040214a:	04f94c63          	blt	s2,a5,204021a2 <_printf_common+0xb2>
2040214e:	401c                	lw	a5,0(s0)
20402150:	04344683          	lbu	a3,67(s0)
20402154:	0207f793          	andi	a5,a5,32
20402158:	00d036b3          	snez	a3,a3
2040215c:	eba5                	bnez	a5,204021cc <_printf_common+0xdc>
2040215e:	04340613          	addi	a2,s0,67
20402162:	85d2                	mv	a1,s4
20402164:	854e                	mv	a0,s3
20402166:	9a82                	jalr	s5
20402168:	57fd                	li	a5,-1
2040216a:	04f50363          	beq	a0,a5,204021b0 <_printf_common+0xc0>
2040216e:	401c                	lw	a5,0(s0)
20402170:	4611                	li	a2,4
20402172:	4098                	lw	a4,0(s1)
20402174:	8b99                	andi	a5,a5,6
20402176:	4454                	lw	a3,12(s0)
20402178:	4481                	li	s1,0
2040217a:	00c79763          	bne	a5,a2,20402188 <_printf_common+0x98>
2040217e:	40e684b3          	sub	s1,a3,a4
20402182:	0004d363          	bgez	s1,20402188 <_printf_common+0x98>
20402186:	4481                	li	s1,0
20402188:	441c                	lw	a5,8(s0)
2040218a:	4818                	lw	a4,16(s0)
2040218c:	00f75463          	bge	a4,a5,20402194 <_printf_common+0xa4>
20402190:	8f99                	sub	a5,a5,a4
20402192:	94be                	add	s1,s1,a5
20402194:	4901                	li	s2,0
20402196:	0469                	addi	s0,s0,26
20402198:	5b7d                	li	s6,-1
2040219a:	05249863          	bne	s1,s2,204021ea <_printf_common+0xfa>
2040219e:	4501                	li	a0,0
204021a0:	a809                	j	204021b2 <_printf_common+0xc2>
204021a2:	4685                	li	a3,1
204021a4:	865a                	mv	a2,s6
204021a6:	85d2                	mv	a1,s4
204021a8:	854e                	mv	a0,s3
204021aa:	9a82                	jalr	s5
204021ac:	01751e63          	bne	a0,s7,204021c8 <_printf_common+0xd8>
204021b0:	557d                	li	a0,-1
204021b2:	50b2                	lw	ra,44(sp)
204021b4:	5422                	lw	s0,40(sp)
204021b6:	5492                	lw	s1,36(sp)
204021b8:	5902                	lw	s2,32(sp)
204021ba:	49f2                	lw	s3,28(sp)
204021bc:	4a62                	lw	s4,24(sp)
204021be:	4ad2                	lw	s5,20(sp)
204021c0:	4b42                	lw	s6,16(sp)
204021c2:	4bb2                	lw	s7,12(sp)
204021c4:	6145                	addi	sp,sp,48
204021c6:	8082                	ret
204021c8:	0905                	addi	s2,s2,1
204021ca:	bfad                	j	20402144 <_printf_common+0x54>
204021cc:	00d40733          	add	a4,s0,a3
204021d0:	03000613          	li	a2,48
204021d4:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffbc8f>
204021d8:	04544703          	lbu	a4,69(s0)
204021dc:	00168793          	addi	a5,a3,1
204021e0:	97a2                	add	a5,a5,s0
204021e2:	0689                	addi	a3,a3,2
204021e4:	04e781a3          	sb	a4,67(a5)
204021e8:	bf9d                	j	2040215e <_printf_common+0x6e>
204021ea:	4685                	li	a3,1
204021ec:	8622                	mv	a2,s0
204021ee:	85d2                	mv	a1,s4
204021f0:	854e                	mv	a0,s3
204021f2:	9a82                	jalr	s5
204021f4:	fb650ee3          	beq	a0,s6,204021b0 <_printf_common+0xc0>
204021f8:	0905                	addi	s2,s2,1
204021fa:	b745                	j	2040219a <_printf_common+0xaa>

204021fc <_printf_i>:
_printf_i():
204021fc:	7179                	addi	sp,sp,-48
204021fe:	d422                	sw	s0,40(sp)
20402200:	d226                	sw	s1,36(sp)
20402202:	d04a                	sw	s2,32(sp)
20402204:	ce4e                	sw	s3,28(sp)
20402206:	d606                	sw	ra,44(sp)
20402208:	cc52                	sw	s4,24(sp)
2040220a:	ca56                	sw	s5,20(sp)
2040220c:	c85a                	sw	s6,16(sp)
2040220e:	89b6                	mv	s3,a3
20402210:	0185c683          	lbu	a3,24(a1)
20402214:	06e00793          	li	a5,110
20402218:	8932                	mv	s2,a2
2040221a:	84aa                	mv	s1,a0
2040221c:	842e                	mv	s0,a1
2040221e:	04358613          	addi	a2,a1,67
20402222:	1ef68063          	beq	a3,a5,20402402 <_printf_i+0x206>
20402226:	06d7e263          	bltu	a5,a3,2040228a <_printf_i+0x8e>
2040222a:	06300793          	li	a5,99
2040222e:	0af68263          	beq	a3,a5,204022d2 <_printf_i+0xd6>
20402232:	00d7ed63          	bltu	a5,a3,2040224c <_printf_i+0x50>
20402236:	1e068a63          	beqz	a3,2040242a <_printf_i+0x22e>
2040223a:	05800793          	li	a5,88
2040223e:	16f68663          	beq	a3,a5,204023aa <_printf_i+0x1ae>
20402242:	04240a93          	addi	s5,s0,66
20402246:	04d40123          	sb	a3,66(s0)
2040224a:	a869                	j	204022e4 <_printf_i+0xe8>
2040224c:	06400793          	li	a5,100
20402250:	00f68663          	beq	a3,a5,2040225c <_printf_i+0x60>
20402254:	06900793          	li	a5,105
20402258:	fef695e3          	bne	a3,a5,20402242 <_printf_i+0x46>
2040225c:	401c                	lw	a5,0(s0)
2040225e:	4308                	lw	a0,0(a4)
20402260:	0807f693          	andi	a3,a5,128
20402264:	00450593          	addi	a1,a0,4
20402268:	c2c1                	beqz	a3,204022e8 <_printf_i+0xec>
2040226a:	411c                	lw	a5,0(a0)
2040226c:	c30c                	sw	a1,0(a4)
2040226e:	0007d863          	bgez	a5,2040227e <_printf_i+0x82>
20402272:	02d00713          	li	a4,45
20402276:	40f007b3          	neg	a5,a5
2040227a:	04e401a3          	sb	a4,67(s0)
2040227e:	00004697          	auipc	a3,0x4
20402282:	e5e68693          	addi	a3,a3,-418 # 204060dc <__sf_fake_stdout+0x34>
20402286:	4729                	li	a4,10
20402288:	a065                	j	20402330 <_printf_i+0x134>
2040228a:	07300793          	li	a5,115
2040228e:	1af68263          	beq	a3,a5,20402432 <_printf_i+0x236>
20402292:	00d7ef63          	bltu	a5,a3,204022b0 <_printf_i+0xb4>
20402296:	06f00793          	li	a5,111
2040229a:	04f68f63          	beq	a3,a5,204022f8 <_printf_i+0xfc>
2040229e:	07000793          	li	a5,112
204022a2:	faf690e3          	bne	a3,a5,20402242 <_printf_i+0x46>
204022a6:	419c                	lw	a5,0(a1)
204022a8:	0207e793          	ori	a5,a5,32
204022ac:	c19c                	sw	a5,0(a1)
204022ae:	a809                	j	204022c0 <_printf_i+0xc4>
204022b0:	07500793          	li	a5,117
204022b4:	04f68263          	beq	a3,a5,204022f8 <_printf_i+0xfc>
204022b8:	07800793          	li	a5,120
204022bc:	f8f693e3          	bne	a3,a5,20402242 <_printf_i+0x46>
204022c0:	07800793          	li	a5,120
204022c4:	04f402a3          	sb	a5,69(s0)
204022c8:	00004697          	auipc	a3,0x4
204022cc:	e2868693          	addi	a3,a3,-472 # 204060f0 <__sf_fake_stdout+0x48>
204022d0:	a0dd                	j	204023b6 <_printf_i+0x1ba>
204022d2:	431c                	lw	a5,0(a4)
204022d4:	04258a93          	addi	s5,a1,66
204022d8:	00478693          	addi	a3,a5,4
204022dc:	439c                	lw	a5,0(a5)
204022de:	c314                	sw	a3,0(a4)
204022e0:	04f58123          	sb	a5,66(a1)
204022e4:	4785                	li	a5,1
204022e6:	a2ad                	j	20402450 <_printf_i+0x254>
204022e8:	0407f693          	andi	a3,a5,64
204022ec:	411c                	lw	a5,0(a0)
204022ee:	c30c                	sw	a1,0(a4)
204022f0:	debd                	beqz	a3,2040226e <_printf_i+0x72>
204022f2:	07c2                	slli	a5,a5,0x10
204022f4:	87c1                	srai	a5,a5,0x10
204022f6:	bfa5                	j	2040226e <_printf_i+0x72>
204022f8:	400c                	lw	a1,0(s0)
204022fa:	431c                	lw	a5,0(a4)
204022fc:	0805f813          	andi	a6,a1,128
20402300:	00478513          	addi	a0,a5,4
20402304:	00080563          	beqz	a6,2040230e <_printf_i+0x112>
20402308:	c308                	sw	a0,0(a4)
2040230a:	439c                	lw	a5,0(a5)
2040230c:	a039                	j	2040231a <_printf_i+0x11e>
2040230e:	0405f593          	andi	a1,a1,64
20402312:	c308                	sw	a0,0(a4)
20402314:	d9fd                	beqz	a1,2040230a <_printf_i+0x10e>
20402316:	0007d783          	lhu	a5,0(a5)
2040231a:	06f00713          	li	a4,111
2040231e:	0ce68a63          	beq	a3,a4,204023f2 <_printf_i+0x1f6>
20402322:	00004697          	auipc	a3,0x4
20402326:	dba68693          	addi	a3,a3,-582 # 204060dc <__sf_fake_stdout+0x34>
2040232a:	4729                	li	a4,10
2040232c:	040401a3          	sb	zero,67(s0)
20402330:	404c                	lw	a1,4(s0)
20402332:	c40c                	sw	a1,8(s0)
20402334:	0005c563          	bltz	a1,2040233e <_printf_i+0x142>
20402338:	4008                	lw	a0,0(s0)
2040233a:	996d                	andi	a0,a0,-5
2040233c:	c008                	sw	a0,0(s0)
2040233e:	e399                	bnez	a5,20402344 <_printf_i+0x148>
20402340:	8ab2                	mv	s5,a2
20402342:	cd91                	beqz	a1,2040235e <_printf_i+0x162>
20402344:	8ab2                	mv	s5,a2
20402346:	02e7f5b3          	remu	a1,a5,a4
2040234a:	1afd                	addi	s5,s5,-1
2040234c:	95b6                	add	a1,a1,a3
2040234e:	0005c583          	lbu	a1,0(a1)
20402352:	00ba8023          	sb	a1,0(s5)
20402356:	02e7d5b3          	divu	a1,a5,a4
2040235a:	0ae7f263          	bgeu	a5,a4,204023fe <_printf_i+0x202>
2040235e:	47a1                	li	a5,8
20402360:	00f71e63          	bne	a4,a5,2040237c <_printf_i+0x180>
20402364:	401c                	lw	a5,0(s0)
20402366:	8b85                	andi	a5,a5,1
20402368:	cb91                	beqz	a5,2040237c <_printf_i+0x180>
2040236a:	4058                	lw	a4,4(s0)
2040236c:	481c                	lw	a5,16(s0)
2040236e:	00e7c763          	blt	a5,a4,2040237c <_printf_i+0x180>
20402372:	03000793          	li	a5,48
20402376:	fefa8fa3          	sb	a5,-1(s5)
2040237a:	1afd                	addi	s5,s5,-1
2040237c:	41560633          	sub	a2,a2,s5
20402380:	c810                	sw	a2,16(s0)
20402382:	874e                	mv	a4,s3
20402384:	86ca                	mv	a3,s2
20402386:	0070                	addi	a2,sp,12
20402388:	85a2                	mv	a1,s0
2040238a:	8526                	mv	a0,s1
2040238c:	3395                	jal	204020f0 <_printf_common>
2040238e:	5a7d                	li	s4,-1
20402390:	0d451463          	bne	a0,s4,20402458 <_printf_i+0x25c>
20402394:	557d                	li	a0,-1
20402396:	50b2                	lw	ra,44(sp)
20402398:	5422                	lw	s0,40(sp)
2040239a:	5492                	lw	s1,36(sp)
2040239c:	5902                	lw	s2,32(sp)
2040239e:	49f2                	lw	s3,28(sp)
204023a0:	4a62                	lw	s4,24(sp)
204023a2:	4ad2                	lw	s5,20(sp)
204023a4:	4b42                	lw	s6,16(sp)
204023a6:	6145                	addi	sp,sp,48
204023a8:	8082                	ret
204023aa:	04d582a3          	sb	a3,69(a1)
204023ae:	00004697          	auipc	a3,0x4
204023b2:	d2e68693          	addi	a3,a3,-722 # 204060dc <__sf_fake_stdout+0x34>
204023b6:	400c                	lw	a1,0(s0)
204023b8:	4308                	lw	a0,0(a4)
204023ba:	0805f813          	andi	a6,a1,128
204023be:	411c                	lw	a5,0(a0)
204023c0:	0511                	addi	a0,a0,4
204023c2:	02080063          	beqz	a6,204023e2 <_printf_i+0x1e6>
204023c6:	c308                	sw	a0,0(a4)
204023c8:	0015f713          	andi	a4,a1,1
204023cc:	c701                	beqz	a4,204023d4 <_printf_i+0x1d8>
204023ce:	0205e593          	ori	a1,a1,32
204023d2:	c00c                	sw	a1,0(s0)
204023d4:	4741                	li	a4,16
204023d6:	fbb9                	bnez	a5,2040232c <_printf_i+0x130>
204023d8:	400c                	lw	a1,0(s0)
204023da:	fdf5f593          	andi	a1,a1,-33
204023de:	c00c                	sw	a1,0(s0)
204023e0:	b7b1                	j	2040232c <_printf_i+0x130>
204023e2:	0405f813          	andi	a6,a1,64
204023e6:	c308                	sw	a0,0(a4)
204023e8:	fe0800e3          	beqz	a6,204023c8 <_printf_i+0x1cc>
204023ec:	07c2                	slli	a5,a5,0x10
204023ee:	83c1                	srli	a5,a5,0x10
204023f0:	bfe1                	j	204023c8 <_printf_i+0x1cc>
204023f2:	00004697          	auipc	a3,0x4
204023f6:	cea68693          	addi	a3,a3,-790 # 204060dc <__sf_fake_stdout+0x34>
204023fa:	4721                	li	a4,8
204023fc:	bf05                	j	2040232c <_printf_i+0x130>
204023fe:	87ae                	mv	a5,a1
20402400:	b799                	j	20402346 <_printf_i+0x14a>
20402402:	4194                	lw	a3,0(a1)
20402404:	431c                	lw	a5,0(a4)
20402406:	49cc                	lw	a1,20(a1)
20402408:	0806f813          	andi	a6,a3,128
2040240c:	00478513          	addi	a0,a5,4
20402410:	00080663          	beqz	a6,2040241c <_printf_i+0x220>
20402414:	c308                	sw	a0,0(a4)
20402416:	439c                	lw	a5,0(a5)
20402418:	c38c                	sw	a1,0(a5)
2040241a:	a801                	j	2040242a <_printf_i+0x22e>
2040241c:	c308                	sw	a0,0(a4)
2040241e:	0406f693          	andi	a3,a3,64
20402422:	439c                	lw	a5,0(a5)
20402424:	daf5                	beqz	a3,20402418 <_printf_i+0x21c>
20402426:	00b79023          	sh	a1,0(a5)
2040242a:	00042823          	sw	zero,16(s0)
2040242e:	8ab2                	mv	s5,a2
20402430:	bf89                	j	20402382 <_printf_i+0x186>
20402432:	431c                	lw	a5,0(a4)
20402434:	41d0                	lw	a2,4(a1)
20402436:	4581                	li	a1,0
20402438:	00478693          	addi	a3,a5,4
2040243c:	c314                	sw	a3,0(a4)
2040243e:	0007aa83          	lw	s5,0(a5)
20402442:	8556                	mv	a0,s5
20402444:	3179                	jal	204020d2 <memchr>
20402446:	c501                	beqz	a0,2040244e <_printf_i+0x252>
20402448:	41550533          	sub	a0,a0,s5
2040244c:	c048                	sw	a0,4(s0)
2040244e:	405c                	lw	a5,4(s0)
20402450:	c81c                	sw	a5,16(s0)
20402452:	040401a3          	sb	zero,67(s0)
20402456:	b735                	j	20402382 <_printf_i+0x186>
20402458:	4814                	lw	a3,16(s0)
2040245a:	8656                	mv	a2,s5
2040245c:	85ca                	mv	a1,s2
2040245e:	8526                	mv	a0,s1
20402460:	9982                	jalr	s3
20402462:	f34509e3          	beq	a0,s4,20402394 <_printf_i+0x198>
20402466:	401c                	lw	a5,0(s0)
20402468:	8b89                	andi	a5,a5,2
2040246a:	e78d                	bnez	a5,20402494 <_printf_i+0x298>
2040246c:	47b2                	lw	a5,12(sp)
2040246e:	4448                	lw	a0,12(s0)
20402470:	f2f553e3          	bge	a0,a5,20402396 <_printf_i+0x19a>
20402474:	853e                	mv	a0,a5
20402476:	b705                	j	20402396 <_printf_i+0x19a>
20402478:	4685                	li	a3,1
2040247a:	8656                	mv	a2,s5
2040247c:	85ca                	mv	a1,s2
2040247e:	8526                	mv	a0,s1
20402480:	9982                	jalr	s3
20402482:	f16509e3          	beq	a0,s6,20402394 <_printf_i+0x198>
20402486:	0a05                	addi	s4,s4,1
20402488:	445c                	lw	a5,12(s0)
2040248a:	4732                	lw	a4,12(sp)
2040248c:	8f99                	sub	a5,a5,a4
2040248e:	fefa45e3          	blt	s4,a5,20402478 <_printf_i+0x27c>
20402492:	bfe9                	j	2040246c <_printf_i+0x270>
20402494:	4a01                	li	s4,0
20402496:	01940a93          	addi	s5,s0,25
2040249a:	5b7d                	li	s6,-1
2040249c:	b7f5                	j	20402488 <_printf_i+0x28c>

2040249e <_read_r>:
_read_r():
2040249e:	1141                	addi	sp,sp,-16
204024a0:	c422                	sw	s0,8(sp)
204024a2:	842a                	mv	s0,a0
204024a4:	852e                	mv	a0,a1
204024a6:	85b2                	mv	a1,a2
204024a8:	8636                	mv	a2,a3
204024aa:	5fc00797          	auipc	a5,0x5fc00
204024ae:	3007a323          	sw	zero,774(a5) # 800027b0 <errno>
204024b2:	c606                	sw	ra,12(sp)
204024b4:	2845                	jal	20402564 <_read>
204024b6:	57fd                	li	a5,-1
204024b8:	00f51963          	bne	a0,a5,204024ca <_read_r+0x2c>
204024bc:	5fc00797          	auipc	a5,0x5fc00
204024c0:	2f478793          	addi	a5,a5,756 # 800027b0 <errno>
204024c4:	439c                	lw	a5,0(a5)
204024c6:	c391                	beqz	a5,204024ca <_read_r+0x2c>
204024c8:	c01c                	sw	a5,0(s0)
204024ca:	40b2                	lw	ra,12(sp)
204024cc:	4422                	lw	s0,8(sp)
204024ce:	0141                	addi	sp,sp,16
204024d0:	8082                	ret

204024d2 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
204024d2:	1101                	addi	sp,sp,-32
204024d4:	ce06                	sw	ra,28(sp)
204024d6:	cc22                	sw	s0,24(sp)
204024d8:	1000                	addi	s0,sp,32
204024da:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
204024de:	225d                	jal	20402684 <__errno>
204024e0:	872a                	mv	a4,a0
204024e2:	05800793          	li	a5,88
204024e6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
204024e8:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
204024ea:	853e                	mv	a0,a5
204024ec:	40f2                	lw	ra,28(sp)
204024ee:	4462                	lw	s0,24(sp)
204024f0:	6105                	addi	sp,sp,32
204024f2:	8082                	ret

204024f4 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
204024f4:	1101                	addi	sp,sp,-32
204024f6:	ce06                	sw	ra,28(sp)
204024f8:	cc22                	sw	s0,24(sp)
204024fa:	1000                	addi	s0,sp,32
204024fc:	fea42623          	sw	a0,-20(s0)
20402500:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20402504:	2241                	jal	20402684 <__errno>
20402506:	872a                	mv	a4,a0
20402508:	fa800793          	li	a5,-88
2040250c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
2040250e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20402510:	853e                	mv	a0,a5
20402512:	40f2                	lw	ra,28(sp)
20402514:	4462                	lw	s0,24(sp)
20402516:	6105                	addi	sp,sp,32
20402518:	8082                	ret

2040251a <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
2040251a:	1101                	addi	sp,sp,-32
2040251c:	ce22                	sw	s0,28(sp)
2040251e:	1000                	addi	s0,sp,32
20402520:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20402524:	fec42783          	lw	a5,-20(s0)
20402528:	17fd                	addi	a5,a5,-1
2040252a:	0017b793          	seqz	a5,a5
2040252e:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20402532:	853e                	mv	a0,a5
20402534:	4472                	lw	s0,28(sp)
20402536:	6105                	addi	sp,sp,32
20402538:	8082                	ret

2040253a <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
2040253a:	1101                	addi	sp,sp,-32
2040253c:	ce06                	sw	ra,28(sp)
2040253e:	cc22                	sw	s0,24(sp)
20402540:	1000                	addi	s0,sp,32
20402542:	fea42623          	sw	a0,-20(s0)
20402546:	feb42423          	sw	a1,-24(s0)
2040254a:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
2040254e:	2a1d                	jal	20402684 <__errno>
20402550:	872a                	mv	a4,a0
20402552:	05800793          	li	a5,88
20402556:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20402558:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
2040255a:	853e                	mv	a0,a5
2040255c:	40f2                	lw	ra,28(sp)
2040255e:	4462                	lw	s0,24(sp)
20402560:	6105                	addi	sp,sp,32
20402562:	8082                	ret

20402564 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20402564:	1101                	addi	sp,sp,-32
20402566:	ce06                	sw	ra,28(sp)
20402568:	cc22                	sw	s0,24(sp)
2040256a:	1000                	addi	s0,sp,32
2040256c:	fea42623          	sw	a0,-20(s0)
20402570:	feb42423          	sw	a1,-24(s0)
20402574:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20402578:	2231                	jal	20402684 <__errno>
2040257a:	872a                	mv	a4,a0
2040257c:	05800793          	li	a5,88
20402580:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20402582:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20402584:	853e                	mv	a0,a5
20402586:	40f2                	lw	ra,28(sp)
20402588:	4462                	lw	s0,24(sp)
2040258a:	6105                	addi	sp,sp,32
2040258c:	8082                	ret

2040258e <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
2040258e:	7179                	addi	sp,sp,-48
20402590:	d622                	sw	s0,44(sp)
20402592:	1800                	addi	s0,sp,48
20402594:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20402598:	800017b7          	lui	a5,0x80001
2040259c:	7107a783          	lw	a5,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe35c>
204025a0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
204025a4:	800037b7          	lui	a5,0x80003
204025a8:	bb478713          	addi	a4,a5,-1100 # 80002bb4 <metal_segment_heap_target_end+0xfffff800>
204025ac:	800037b7          	lui	a5,0x80003
204025b0:	3b478793          	addi	a5,a5,948 # 800033b4 <metal_segment_heap_target_end+0x0>
204025b4:	00f71463          	bne	a4,a5,204025bc <_sbrk+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
204025b8:	57fd                	li	a5,-1
204025ba:	a0a9                	j	20402604 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
204025bc:	800017b7          	lui	a5,0x80001
204025c0:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe35c>
204025c4:	fdc42783          	lw	a5,-36(s0)
204025c8:	973e                	add	a4,a4,a5
204025ca:	800037b7          	lui	a5,0x80003
204025ce:	3b478793          	addi	a5,a5,948 # 800033b4 <metal_segment_heap_target_end+0x0>
204025d2:	02f77063          	bgeu	a4,a5,204025f2 <_sbrk+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
204025d6:	800017b7          	lui	a5,0x80001
204025da:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe35c>
204025de:	fdc42783          	lw	a5,-36(s0)
204025e2:	973e                	add	a4,a4,a5
204025e4:	800017b7          	lui	a5,0x80001
204025e8:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe35c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
204025ec:	fec42783          	lw	a5,-20(s0)
204025f0:	a811                	j	20402604 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
204025f2:	800017b7          	lui	a5,0x80001
204025f6:	80003737          	lui	a4,0x80003
204025fa:	3b470713          	addi	a4,a4,948 # 800033b4 <metal_segment_heap_target_end+0x0>
204025fe:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffe35c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20402602:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20402604:	853e                	mv	a0,a5
20402606:	5432                	lw	s0,44(sp)
20402608:	6145                	addi	sp,sp,48
2040260a:	8082                	ret

2040260c <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
2040260c:	7179                	addi	sp,sp,-48
2040260e:	d606                	sw	ra,44(sp)
20402610:	d422                	sw	s0,40(sp)
20402612:	1800                	addi	s0,sp,48
20402614:	fca42e23          	sw	a0,-36(s0)
20402618:	fcb42c23          	sw	a1,-40(s0)
2040261c:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20402620:	fdc42703          	lw	a4,-36(s0)
20402624:	4785                	li	a5,1
20402626:	00f70963          	beq	a4,a5,20402638 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
2040262a:	28a9                	jal	20402684 <__errno>
2040262c:	872a                	mv	a4,a0
2040262e:	05800793          	li	a5,88
20402632:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20402634:	57fd                	li	a5,-1
20402636:	a82d                	j	20402670 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20402638:	fd842783          	lw	a5,-40(s0)
2040263c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20402640:	fe042623          	sw	zero,-20(s0)
20402644:	a839                	j	20402662 <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20402646:	fe842703          	lw	a4,-24(s0)
2040264a:	fec42783          	lw	a5,-20(s0)
2040264e:	97ba                	add	a5,a5,a4
20402650:	0007c783          	lbu	a5,0(a5)
20402654:	853e                	mv	a0,a5
20402656:	2cb1                	jal	204028b2 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20402658:	fec42783          	lw	a5,-20(s0)
2040265c:	0785                	addi	a5,a5,1
2040265e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20402662:	fec42703          	lw	a4,-20(s0)
20402666:	fd442783          	lw	a5,-44(s0)
2040266a:	fcf76ee3          	bltu	a4,a5,20402646 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
2040266e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20402670:	853e                	mv	a0,a5
20402672:	50b2                	lw	ra,44(sp)
20402674:	5422                	lw	s0,40(sp)
20402676:	6145                	addi	sp,sp,48
20402678:	8082                	ret

2040267a <atexit>:
atexit():
2040267a:	85aa                	mv	a1,a0
2040267c:	4681                	li	a3,0
2040267e:	4601                	li	a2,0
20402680:	4501                	li	a0,0
20402682:	a8f1                	j	2040275e <__register_exitproc>

20402684 <__errno>:
__errno():
20402684:	5fbff797          	auipc	a5,0x5fbff
20402688:	08478793          	addi	a5,a5,132 # 80001708 <_impure_ptr>
2040268c:	4388                	lw	a0,0(a5)
2040268e:	8082                	ret

20402690 <exit>:
exit():
20402690:	1141                	addi	sp,sp,-16
20402692:	c422                	sw	s0,8(sp)
20402694:	c606                	sw	ra,12(sp)
20402696:	00000797          	auipc	a5,0x0
2040269a:	15478793          	addi	a5,a5,340 # 204027ea <__call_exitprocs>
2040269e:	842a                	mv	s0,a0
204026a0:	c399                	beqz	a5,204026a6 <exit+0x16>
204026a2:	4581                	li	a1,0
204026a4:	2299                	jal	204027ea <__call_exitprocs>
204026a6:	5fbff797          	auipc	a5,0x5fbff
204026aa:	06678793          	addi	a5,a5,102 # 8000170c <_global_impure_ptr>
204026ae:	4388                	lw	a0,0(a5)
204026b0:	551c                	lw	a5,40(a0)
204026b2:	c391                	beqz	a5,204026b6 <exit+0x26>
204026b4:	9782                	jalr	a5
204026b6:	8522                	mv	a0,s0
204026b8:	037030ef          	jal	ra,20405eee <_exit>

204026bc <__libc_fini_array>:
__libc_fini_array():
204026bc:	1141                	addi	sp,sp,-16
204026be:	00004797          	auipc	a5,0x4
204026c2:	d9e78793          	addi	a5,a5,-610 # 2040645c <__fini_array_end>
204026c6:	c422                	sw	s0,8(sp)
204026c8:	00004417          	auipc	s0,0x4
204026cc:	d9440413          	addi	s0,s0,-620 # 2040645c <__fini_array_end>
204026d0:	8c1d                	sub	s0,s0,a5
204026d2:	c226                	sw	s1,4(sp)
204026d4:	c606                	sw	ra,12(sp)
204026d6:	8409                	srai	s0,s0,0x2
204026d8:	84be                	mv	s1,a5
204026da:	e411                	bnez	s0,204026e6 <__libc_fini_array+0x2a>
204026dc:	40b2                	lw	ra,12(sp)
204026de:	4422                	lw	s0,8(sp)
204026e0:	4492                	lw	s1,4(sp)
204026e2:	0141                	addi	sp,sp,16
204026e4:	8082                	ret
204026e6:	147d                	addi	s0,s0,-1
204026e8:	00241793          	slli	a5,s0,0x2
204026ec:	97a6                	add	a5,a5,s1
204026ee:	439c                	lw	a5,0(a5)
204026f0:	9782                	jalr	a5
204026f2:	b7e5                	j	204026da <__libc_fini_array+0x1e>

204026f4 <__libc_init_array>:
__libc_init_array():
204026f4:	1141                	addi	sp,sp,-16
204026f6:	00004797          	auipc	a5,0x4
204026fa:	d6278793          	addi	a5,a5,-670 # 20406458 <__init_array_start>
204026fe:	c422                	sw	s0,8(sp)
20402700:	00004417          	auipc	s0,0x4
20402704:	d5840413          	addi	s0,s0,-680 # 20406458 <__init_array_start>
20402708:	8c1d                	sub	s0,s0,a5
2040270a:	c226                	sw	s1,4(sp)
2040270c:	c04a                	sw	s2,0(sp)
2040270e:	c606                	sw	ra,12(sp)
20402710:	8409                	srai	s0,s0,0x2
20402712:	4481                	li	s1,0
20402714:	893e                	mv	s2,a5
20402716:	02849663          	bne	s1,s0,20402742 <__libc_init_array+0x4e>
2040271a:	00004797          	auipc	a5,0x4
2040271e:	d3e78793          	addi	a5,a5,-706 # 20406458 <__init_array_start>
20402722:	00004417          	auipc	s0,0x4
20402726:	d3a40413          	addi	s0,s0,-710 # 2040645c <__fini_array_end>
2040272a:	8c1d                	sub	s0,s0,a5
2040272c:	8409                	srai	s0,s0,0x2
2040272e:	4481                	li	s1,0
20402730:	893e                	mv	s2,a5
20402732:	00849f63          	bne	s1,s0,20402750 <__libc_init_array+0x5c>
20402736:	40b2                	lw	ra,12(sp)
20402738:	4422                	lw	s0,8(sp)
2040273a:	4492                	lw	s1,4(sp)
2040273c:	4902                	lw	s2,0(sp)
2040273e:	0141                	addi	sp,sp,16
20402740:	8082                	ret
20402742:	00249793          	slli	a5,s1,0x2
20402746:	97ca                	add	a5,a5,s2
20402748:	439c                	lw	a5,0(a5)
2040274a:	0485                	addi	s1,s1,1
2040274c:	9782                	jalr	a5
2040274e:	b7e1                	j	20402716 <__libc_init_array+0x22>
20402750:	00249793          	slli	a5,s1,0x2
20402754:	97ca                	add	a5,a5,s2
20402756:	439c                	lw	a5,0(a5)
20402758:	0485                	addi	s1,s1,1
2040275a:	9782                	jalr	a5
2040275c:	bfd9                	j	20402732 <__libc_init_array+0x3e>

2040275e <__register_exitproc>:
__register_exitproc():
2040275e:	5fbff797          	auipc	a5,0x5fbff
20402762:	fda78793          	addi	a5,a5,-38 # 80001738 <_global_atexit>
20402766:	439c                	lw	a5,0(a5)
20402768:	8e2a                	mv	t3,a0
2040276a:	e78d                	bnez	a5,20402794 <__register_exitproc+0x36>
2040276c:	5fc00717          	auipc	a4,0x5fc00
20402770:	fb870713          	addi	a4,a4,-72 # 80002724 <_global_atexit0>
20402774:	5fbff797          	auipc	a5,0x5fbff
20402778:	fce7a223          	sw	a4,-60(a5) # 80001738 <_global_atexit>
2040277c:	dfbfe517          	auipc	a0,0xdfbfe
20402780:	88450513          	addi	a0,a0,-1916 # 0 <__metal_boot_hart>
20402784:	87ba                	mv	a5,a4
20402786:	c519                	beqz	a0,20402794 <__register_exitproc+0x36>
20402788:	411c                	lw	a5,0(a0)
2040278a:	5fc00517          	auipc	a0,0x5fc00
2040278e:	02f52123          	sw	a5,34(a0) # 800027ac <_global_atexit0+0x88>
20402792:	87ba                	mv	a5,a4
20402794:	43d8                	lw	a4,4(a5)
20402796:	487d                	li	a6,31
20402798:	557d                	li	a0,-1
2040279a:	04e84763          	blt	a6,a4,204027e8 <__register_exitproc+0x8a>
2040279e:	020e0e63          	beqz	t3,204027da <__register_exitproc+0x7c>
204027a2:	0887a803          	lw	a6,136(a5)
204027a6:	04080163          	beqz	a6,204027e8 <__register_exitproc+0x8a>
204027aa:	00271893          	slli	a7,a4,0x2
204027ae:	98c2                	add	a7,a7,a6
204027b0:	00c8a023          	sw	a2,0(a7)
204027b4:	10082303          	lw	t1,256(a6)
204027b8:	4605                	li	a2,1
204027ba:	00e61633          	sll	a2,a2,a4
204027be:	00c36333          	or	t1,t1,a2
204027c2:	10682023          	sw	t1,256(a6)
204027c6:	08d8a023          	sw	a3,128(a7)
204027ca:	4689                	li	a3,2
204027cc:	00de1763          	bne	t3,a3,204027da <__register_exitproc+0x7c>
204027d0:	10482683          	lw	a3,260(a6)
204027d4:	8e55                	or	a2,a2,a3
204027d6:	10c82223          	sw	a2,260(a6)
204027da:	00170693          	addi	a3,a4,1
204027de:	070a                	slli	a4,a4,0x2
204027e0:	c3d4                	sw	a3,4(a5)
204027e2:	97ba                	add	a5,a5,a4
204027e4:	c78c                	sw	a1,8(a5)
204027e6:	4501                	li	a0,0
204027e8:	8082                	ret

204027ea <__call_exitprocs>:
__call_exitprocs():
204027ea:	7179                	addi	sp,sp,-48
204027ec:	cc52                	sw	s4,24(sp)
204027ee:	ca56                	sw	s5,20(sp)
204027f0:	c85a                	sw	s6,16(sp)
204027f2:	c65e                	sw	s7,12(sp)
204027f4:	d606                	sw	ra,44(sp)
204027f6:	d422                	sw	s0,40(sp)
204027f8:	d226                	sw	s1,36(sp)
204027fa:	d04a                	sw	s2,32(sp)
204027fc:	ce4e                	sw	s3,28(sp)
204027fe:	c462                	sw	s8,8(sp)
20402800:	8b2a                	mv	s6,a0
20402802:	8a2e                	mv	s4,a1
20402804:	5fbffa97          	auipc	s5,0x5fbff
20402808:	f34a8a93          	addi	s5,s5,-204 # 80001738 <_global_atexit>
2040280c:	4b85                	li	s7,1
2040280e:	000aa403          	lw	s0,0(s5)
20402812:	c811                	beqz	s0,20402826 <__call_exitprocs+0x3c>
20402814:	4044                	lw	s1,4(s0)
20402816:	08842983          	lw	s3,136(s0)
2040281a:	fff48913          	addi	s2,s1,-1
2040281e:	048a                	slli	s1,s1,0x2
20402820:	94a2                	add	s1,s1,s0
20402822:	00095e63          	bgez	s2,2040283e <__call_exitprocs+0x54>
20402826:	50b2                	lw	ra,44(sp)
20402828:	5422                	lw	s0,40(sp)
2040282a:	5492                	lw	s1,36(sp)
2040282c:	5902                	lw	s2,32(sp)
2040282e:	49f2                	lw	s3,28(sp)
20402830:	4a62                	lw	s4,24(sp)
20402832:	4ad2                	lw	s5,20(sp)
20402834:	4b42                	lw	s6,16(sp)
20402836:	4bb2                	lw	s7,12(sp)
20402838:	4c22                	lw	s8,8(sp)
2040283a:	6145                	addi	sp,sp,48
2040283c:	8082                	ret
2040283e:	000a0e63          	beqz	s4,2040285a <__call_exitprocs+0x70>
20402842:	00099563          	bnez	s3,2040284c <__call_exitprocs+0x62>
20402846:	197d                	addi	s2,s2,-1
20402848:	14f1                	addi	s1,s1,-4
2040284a:	bfe1                	j	20402822 <__call_exitprocs+0x38>
2040284c:	00291793          	slli	a5,s2,0x2
20402850:	97ce                	add	a5,a5,s3
20402852:	0807a783          	lw	a5,128(a5)
20402856:	ff4798e3          	bne	a5,s4,20402846 <__call_exitprocs+0x5c>
2040285a:	4058                	lw	a4,4(s0)
2040285c:	40dc                	lw	a5,4(s1)
2040285e:	177d                	addi	a4,a4,-1
20402860:	03271863          	bne	a4,s2,20402890 <__call_exitprocs+0xa6>
20402864:	01242223          	sw	s2,4(s0)
20402868:	dff9                	beqz	a5,20402846 <__call_exitprocs+0x5c>
2040286a:	00442c03          	lw	s8,4(s0)
2040286e:	00098863          	beqz	s3,2040287e <__call_exitprocs+0x94>
20402872:	1009a683          	lw	a3,256(s3)
20402876:	012b9733          	sll	a4,s7,s2
2040287a:	8ef9                	and	a3,a3,a4
2040287c:	ee89                	bnez	a3,20402896 <__call_exitprocs+0xac>
2040287e:	9782                	jalr	a5
20402880:	4058                	lw	a4,4(s0)
20402882:	000aa783          	lw	a5,0(s5)
20402886:	f98714e3          	bne	a4,s8,2040280e <__call_exitprocs+0x24>
2040288a:	faf40ee3          	beq	s0,a5,20402846 <__call_exitprocs+0x5c>
2040288e:	b741                	j	2040280e <__call_exitprocs+0x24>
20402890:	0004a223          	sw	zero,4(s1)
20402894:	bfd1                	j	20402868 <__call_exitprocs+0x7e>
20402896:	00291693          	slli	a3,s2,0x2
2040289a:	96ce                	add	a3,a3,s3
2040289c:	428c                	lw	a1,0(a3)
2040289e:	1049a683          	lw	a3,260(s3)
204028a2:	8f75                	and	a4,a4,a3
204028a4:	e701                	bnez	a4,204028ac <__call_exitprocs+0xc2>
204028a6:	855a                	mv	a0,s6
204028a8:	9782                	jalr	a5
204028aa:	bfd9                	j	20402880 <__call_exitprocs+0x96>
204028ac:	852e                	mv	a0,a1
204028ae:	9782                	jalr	a5
204028b0:	bfc1                	j	20402880 <__call_exitprocs+0x96>

204028b2 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
204028b2:	1101                	addi	sp,sp,-32
204028b4:	ce06                	sw	ra,28(sp)
204028b6:	cc22                	sw	s0,24(sp)
204028b8:	1000                	addi	s0,sp,32
204028ba:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
204028be:	fec42703          	lw	a4,-20(s0)
204028c2:	47a9                	li	a5,10
204028c4:	00f71463          	bne	a4,a5,204028cc <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
204028c8:	4535                	li	a0,13
204028ca:	2811                	jal	204028de <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
204028cc:	fec42503          	lw	a0,-20(s0)
204028d0:	2039                	jal	204028de <metal_tty_putc_raw>
204028d2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
204028d4:	853e                	mv	a0,a5
204028d6:	40f2                	lw	ra,28(sp)
204028d8:	4462                	lw	s0,24(sp)
204028da:	6105                	addi	sp,sp,32
204028dc:	8082                	ret

204028de <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
204028de:	1101                	addi	sp,sp,-32
204028e0:	ce06                	sw	ra,28(sp)
204028e2:	cc22                	sw	s0,24(sp)
204028e4:	1000                	addi	s0,sp,32
204028e6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
204028ea:	fec42583          	lw	a1,-20(s0)
204028ee:	800017b7          	lui	a5,0x80001
204028f2:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
204028f6:	28b1                	jal	20402952 <metal_uart_putc>
204028f8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
204028fa:	853e                	mv	a0,a5
204028fc:	40f2                	lw	ra,28(sp)
204028fe:	4462                	lw	s0,24(sp)
20402900:	6105                	addi	sp,sp,32
20402902:	8082                	ret

20402904 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20402904:	1141                	addi	sp,sp,-16
20402906:	c606                	sw	ra,12(sp)
20402908:	c422                	sw	s0,8(sp)
2040290a:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
2040290c:	67f1                	lui	a5,0x1c
2040290e:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20402912:	800017b7          	lui	a5,0x80001
20402916:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
2040291a:	2031                	jal	20402926 <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
2040291c:	0001                	nop
2040291e:	40b2                	lw	ra,12(sp)
20402920:	4422                	lw	s0,8(sp)
20402922:	0141                	addi	sp,sp,16
20402924:	8082                	ret

20402926 <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20402926:	1101                	addi	sp,sp,-32
20402928:	ce06                	sw	ra,28(sp)
2040292a:	cc22                	sw	s0,24(sp)
2040292c:	1000                	addi	s0,sp,32
2040292e:	fea42623          	sw	a0,-20(s0)
20402932:	feb42423          	sw	a1,-24(s0)
20402936:	fec42783          	lw	a5,-20(s0)
2040293a:	439c                	lw	a5,0(a5)
2040293c:	439c                	lw	a5,0(a5)
2040293e:	fe842583          	lw	a1,-24(s0)
20402942:	fec42503          	lw	a0,-20(s0)
20402946:	9782                	jalr	a5
20402948:	0001                	nop
2040294a:	40f2                	lw	ra,28(sp)
2040294c:	4462                	lw	s0,24(sp)
2040294e:	6105                	addi	sp,sp,32
20402950:	8082                	ret

20402952 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20402952:	1101                	addi	sp,sp,-32
20402954:	ce06                	sw	ra,28(sp)
20402956:	cc22                	sw	s0,24(sp)
20402958:	1000                	addi	s0,sp,32
2040295a:	fea42623          	sw	a0,-20(s0)
2040295e:	feb42423          	sw	a1,-24(s0)
20402962:	fec42783          	lw	a5,-20(s0)
20402966:	439c                	lw	a5,0(a5)
20402968:	43dc                	lw	a5,4(a5)
2040296a:	fe842583          	lw	a1,-24(s0)
2040296e:	fec42503          	lw	a0,-20(s0)
20402972:	9782                	jalr	a5
20402974:	87aa                	mv	a5,a0
20402976:	853e                	mv	a0,a5
20402978:	40f2                	lw	ra,28(sp)
2040297a:	4462                	lw	s0,24(sp)
2040297c:	6105                	addi	sp,sp,32
2040297e:	8082                	ret

20402980 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20402980:	1101                	addi	sp,sp,-32
20402982:	ce06                	sw	ra,28(sp)
20402984:	cc22                	sw	s0,24(sp)
20402986:	1000                	addi	s0,sp,32
20402988:	fea42623          	sw	a0,-20(s0)
2040298c:	feb42423          	sw	a1,-24(s0)
20402990:	fec42783          	lw	a5,-20(s0)
20402994:	439c                	lw	a5,0(a5)
20402996:	4bdc                	lw	a5,20(a5)
20402998:	fe842583          	lw	a1,-24(s0)
2040299c:	fec42503          	lw	a0,-20(s0)
204029a0:	9782                	jalr	a5
204029a2:	87aa                	mv	a5,a0
204029a4:	853e                	mv	a0,a5
204029a6:	40f2                	lw	ra,28(sp)
204029a8:	4462                	lw	s0,24(sp)
204029aa:	6105                	addi	sp,sp,32
204029ac:	8082                	ret

204029ae <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
204029ae:	1101                	addi	sp,sp,-32
204029b0:	ce22                	sw	s0,28(sp)
204029b2:	1000                	addi	s0,sp,32
204029b4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204029b8:	fec42703          	lw	a4,-20(s0)
204029bc:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
204029c0:	00f71563          	bne	a4,a5,204029ca <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
204029c4:	020007b7          	lui	a5,0x2000
204029c8:	a011                	j	204029cc <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
204029ca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
204029cc:	853e                	mv	a0,a5
204029ce:	4472                	lw	s0,28(sp)
204029d0:	6105                	addi	sp,sp,32
204029d2:	8082                	ret

204029d4 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
204029d4:	1101                	addi	sp,sp,-32
204029d6:	ce22                	sw	s0,28(sp)
204029d8:	1000                	addi	s0,sp,32
204029da:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204029de:	fec42703          	lw	a4,-20(s0)
204029e2:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
204029e6:	00f71463          	bne	a4,a5,204029ee <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
204029ea:	4789                	li	a5,2
204029ec:	a011                	j	204029f0 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
204029ee:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
204029f0:	853e                	mv	a0,a5
204029f2:	4472                	lw	s0,28(sp)
204029f4:	6105                	addi	sp,sp,32
204029f6:	8082                	ret

204029f8 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
204029f8:	1101                	addi	sp,sp,-32
204029fa:	ce22                	sw	s0,28(sp)
204029fc:	1000                	addi	s0,sp,32
204029fe:	fea42623          	sw	a0,-20(s0)
20402a02:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
20402a06:	fe842783          	lw	a5,-24(s0)
20402a0a:	e791                	bnez	a5,20402a16 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20402a0c:	800017b7          	lui	a5,0x80001
20402a10:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdc7c>
20402a14:	a821                	j	20402a2c <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20402a16:	fe842703          	lw	a4,-24(s0)
20402a1a:	4785                	li	a5,1
20402a1c:	00f71763          	bne	a4,a5,20402a2a <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20402a20:	800017b7          	lui	a5,0x80001
20402a24:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdc7c>
20402a28:	a011                	j	20402a2c <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
20402a2a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
20402a2c:	853e                	mv	a0,a5
20402a2e:	4472                	lw	s0,28(sp)
20402a30:	6105                	addi	sp,sp,32
20402a32:	8082                	ret

20402a34 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20402a34:	1101                	addi	sp,sp,-32
20402a36:	ce22                	sw	s0,28(sp)
20402a38:	1000                	addi	s0,sp,32
20402a3a:	fea42623          	sw	a0,-20(s0)
20402a3e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
20402a42:	fe842783          	lw	a5,-24(s0)
20402a46:	e399                	bnez	a5,20402a4c <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
20402a48:	478d                	li	a5,3
20402a4a:	a809                	j	20402a5c <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
20402a4c:	fe842703          	lw	a4,-24(s0)
20402a50:	4785                	li	a5,1
20402a52:	00f71463          	bne	a4,a5,20402a5a <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
20402a56:	479d                	li	a5,7
20402a58:	a011                	j	20402a5c <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
20402a5a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
20402a5c:	853e                	mv	a0,a5
20402a5e:	4472                	lw	s0,28(sp)
20402a60:	6105                	addi	sp,sp,32
20402a62:	8082                	ret

20402a64 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20402a64:	715d                	addi	sp,sp,-80
20402a66:	c686                	sw	ra,76(sp)
20402a68:	c4a2                	sw	s0,72(sp)
20402a6a:	c2ca                	sw	s2,68(sp)
20402a6c:	c0ce                	sw	s3,64(sp)
20402a6e:	de52                	sw	s4,60(sp)
20402a70:	dc56                	sw	s5,56(sp)
20402a72:	da5a                	sw	s6,52(sp)
20402a74:	d85e                	sw	s7,48(sp)
20402a76:	d662                	sw	s8,44(sp)
20402a78:	d466                	sw	s9,40(sp)
20402a7a:	0880                	addi	s0,sp,80
20402a7c:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402a80:	fbc42783          	lw	a5,-68(s0)
20402a84:	853e                	mv	a0,a5
20402a86:	3725                	jal	204029ae <__metal_driver_sifive_clint0_control_base>
20402a88:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20402a8c:	fcc42703          	lw	a4,-52(s0)
20402a90:	67b1                	lui	a5,0xc
20402a92:	17f1                	addi	a5,a5,-4
20402a94:	97ba                	add	a5,a5,a4
20402a96:	439c                	lw	a5,0(a5)
20402a98:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20402a9c:	fcc42703          	lw	a4,-52(s0)
20402aa0:	67b1                	lui	a5,0xc
20402aa2:	17e1                	addi	a5,a5,-8
20402aa4:	97ba                	add	a5,a5,a4
20402aa6:	439c                	lw	a5,0(a5)
20402aa8:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20402aac:	fcc42703          	lw	a4,-52(s0)
20402ab0:	67b1                	lui	a5,0xc
20402ab2:	17f1                	addi	a5,a5,-4
20402ab4:	97ba                	add	a5,a5,a4
20402ab6:	439c                	lw	a5,0(a5)
20402ab8:	fc842703          	lw	a4,-56(s0)
20402abc:	fcf718e3          	bne	a4,a5,20402a8c <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20402ac0:	fc842783          	lw	a5,-56(s0)
20402ac4:	8c3e                	mv	s8,a5
20402ac6:	4c81                	li	s9,0
20402ac8:	000c1993          	slli	s3,s8,0x0
20402acc:	4901                	li	s2,0
20402ace:	fc442783          	lw	a5,-60(s0)
20402ad2:	8a3e                	mv	s4,a5
20402ad4:	4a81                	li	s5,0
20402ad6:	01496b33          	or	s6,s2,s4
20402ada:	0159ebb3          	or	s7,s3,s5
20402ade:	87da                	mv	a5,s6
20402ae0:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
20402ae2:	853e                	mv	a0,a5
20402ae4:	85c2                	mv	a1,a6
20402ae6:	40b6                	lw	ra,76(sp)
20402ae8:	4426                	lw	s0,72(sp)
20402aea:	4916                	lw	s2,68(sp)
20402aec:	4986                	lw	s3,64(sp)
20402aee:	5a72                	lw	s4,60(sp)
20402af0:	5ae2                	lw	s5,56(sp)
20402af2:	5b52                	lw	s6,52(sp)
20402af4:	5bc2                	lw	s7,48(sp)
20402af6:	5c32                	lw	s8,44(sp)
20402af8:	5ca2                	lw	s9,40(sp)
20402afa:	6161                	addi	sp,sp,80
20402afc:	8082                	ret

20402afe <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20402afe:	7179                	addi	sp,sp,-48
20402b00:	d606                	sw	ra,44(sp)
20402b02:	d422                	sw	s0,40(sp)
20402b04:	d24a                	sw	s2,36(sp)
20402b06:	d04e                	sw	s3,32(sp)
20402b08:	1800                	addi	s0,sp,48
20402b0a:	fca42e23          	sw	a0,-36(s0)
20402b0e:	fcb42c23          	sw	a1,-40(s0)
20402b12:	fcc42823          	sw	a2,-48(s0)
20402b16:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20402b1a:	fdc42783          	lw	a5,-36(s0)
20402b1e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402b22:	fec42783          	lw	a5,-20(s0)
20402b26:	853e                	mv	a0,a5
20402b28:	3559                	jal	204029ae <__metal_driver_sifive_clint0_control_base>
20402b2a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20402b2e:	fd842783          	lw	a5,-40(s0)
20402b32:	078e                	slli	a5,a5,0x3
20402b34:	873e                	mv	a4,a5
20402b36:	fe842783          	lw	a5,-24(s0)
20402b3a:	973e                	add	a4,a4,a5
20402b3c:	6791                	lui	a5,0x4
20402b3e:	0791                	addi	a5,a5,4
20402b40:	97ba                	add	a5,a5,a4
20402b42:	873e                	mv	a4,a5
20402b44:	57fd                	li	a5,-1
20402b46:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20402b48:	fd842783          	lw	a5,-40(s0)
20402b4c:	078e                	slli	a5,a5,0x3
20402b4e:	873e                	mv	a4,a5
20402b50:	fe842783          	lw	a5,-24(s0)
20402b54:	973e                	add	a4,a4,a5
20402b56:	6791                	lui	a5,0x4
20402b58:	97ba                	add	a5,a5,a4
20402b5a:	873e                	mv	a4,a5
20402b5c:	fd042783          	lw	a5,-48(s0)
20402b60:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20402b62:	fd442783          	lw	a5,-44(s0)
20402b66:	0007d913          	srli	s2,a5,0x0
20402b6a:	4981                	li	s3,0
20402b6c:	fd842783          	lw	a5,-40(s0)
20402b70:	078e                	slli	a5,a5,0x3
20402b72:	873e                	mv	a4,a5
20402b74:	fe842783          	lw	a5,-24(s0)
20402b78:	973e                	add	a4,a4,a5
20402b7a:	6791                	lui	a5,0x4
20402b7c:	0791                	addi	a5,a5,4
20402b7e:	97ba                	add	a5,a5,a4
20402b80:	874a                	mv	a4,s2
20402b82:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20402b84:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20402b86:	853e                	mv	a0,a5
20402b88:	50b2                	lw	ra,44(sp)
20402b8a:	5422                	lw	s0,40(sp)
20402b8c:	5912                	lw	s2,36(sp)
20402b8e:	5982                	lw	s3,32(sp)
20402b90:	6145                	addi	sp,sp,48
20402b92:	8082                	ret

20402b94 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20402b94:	1101                	addi	sp,sp,-32
20402b96:	ce06                	sw	ra,28(sp)
20402b98:	cc22                	sw	s0,24(sp)
20402b9a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20402b9c:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20402ba0:	f14027f3          	csrr	a5,mhartid
20402ba4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20402ba8:	fec42783          	lw	a5,-20(s0)
20402bac:	853e                	mv	a0,a5
20402bae:	1c6030ef          	jal	ra,20405d74 <metal_cpu_get>
20402bb2:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20402bb6:	fe842503          	lw	a0,-24(s0)
20402bba:	194030ef          	jal	ra,20405d4e <metal_cpu_interrupt_controller>
20402bbe:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20402bc0:	853e                	mv	a0,a5
20402bc2:	40f2                	lw	ra,28(sp)
20402bc4:	4462                	lw	s0,24(sp)
20402bc6:	6105                	addi	sp,sp,32
20402bc8:	8082                	ret

20402bca <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20402bca:	7139                	addi	sp,sp,-64
20402bcc:	de06                	sw	ra,60(sp)
20402bce:	dc22                	sw	s0,56(sp)
20402bd0:	0080                	addi	s0,sp,64
20402bd2:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402bd6:	fcc42503          	lw	a0,-52(s0)
20402bda:	3bed                	jal	204029d4 <__metal_driver_sifive_clint0_num_interrupts>
20402bdc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20402be0:	fcc42783          	lw	a5,-52(s0)
20402be4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20402be8:	fe442783          	lw	a5,-28(s0)
20402bec:	43dc                	lw	a5,4(a5)
20402bee:	efa9                	bnez	a5,20402c48 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20402bf0:	fe042623          	sw	zero,-20(s0)
20402bf4:	a081                	j	20402c34 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402bf6:	fec42583          	lw	a1,-20(s0)
20402bfa:	fcc42503          	lw	a0,-52(s0)
20402bfe:	3bed                	jal	204029f8 <__metal_driver_sifive_clint0_interrupt_parents>
20402c00:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402c04:	fec42583          	lw	a1,-20(s0)
20402c08:	fcc42503          	lw	a0,-52(s0)
20402c0c:	3525                	jal	20402a34 <__metal_driver_sifive_clint0_interrupt_lines>
20402c0e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20402c12:	fe042783          	lw	a5,-32(s0)
20402c16:	439c                	lw	a5,0(a5)
20402c18:	4fdc                	lw	a5,28(a5)
20402c1a:	fcc42683          	lw	a3,-52(s0)
20402c1e:	4601                	li	a2,0
20402c20:	fdc42583          	lw	a1,-36(s0)
20402c24:	fe042503          	lw	a0,-32(s0)
20402c28:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20402c2a:	fec42783          	lw	a5,-20(s0)
20402c2e:	0785                	addi	a5,a5,1
20402c30:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20402c34:	fec42703          	lw	a4,-20(s0)
20402c38:	fe842783          	lw	a5,-24(s0)
20402c3c:	faf74de3          	blt	a4,a5,20402bf6 <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20402c40:	fe442783          	lw	a5,-28(s0)
20402c44:	4705                	li	a4,1
20402c46:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20402c48:	0001                	nop
20402c4a:	50f2                	lw	ra,60(sp)
20402c4c:	5462                	lw	s0,56(sp)
20402c4e:	6121                	addi	sp,sp,64
20402c50:	8082                	ret

20402c52 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20402c52:	7139                	addi	sp,sp,-64
20402c54:	de06                	sw	ra,60(sp)
20402c56:	dc22                	sw	s0,56(sp)
20402c58:	0080                	addi	s0,sp,64
20402c5a:	fca42623          	sw	a0,-52(s0)
20402c5e:	fcb42423          	sw	a1,-56(s0)
20402c62:	fcc42223          	sw	a2,-60(s0)
20402c66:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20402c6a:	57fd                	li	a5,-1
20402c6c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20402c70:	326010ef          	jal	ra,20403f96 <__metal_controller_interrupt_vector_mode>
20402c74:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
20402c78:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402c7c:	3f21                	jal	20402b94 <_get_cpu_intc>
20402c7e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402c82:	fcc42503          	lw	a0,-52(s0)
20402c86:	33b9                	jal	204029d4 <__metal_driver_sifive_clint0_num_interrupts>
20402c88:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20402c8c:	fe042703          	lw	a4,-32(s0)
20402c90:	4785                	li	a5,1
20402c92:	00f70863          	beq	a4,a5,20402ca2 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20402c96:	fe042783          	lw	a5,-32(s0)
20402c9a:	c781                	beqz	a5,20402ca2 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20402c9c:	fec42783          	lw	a5,-20(s0)
20402ca0:	a049                	j	20402d22 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20402ca2:	fe042223          	sw	zero,-28(s0)
20402ca6:	a091                	j	20402cea <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402ca8:	fe442583          	lw	a1,-28(s0)
20402cac:	fcc42503          	lw	a0,-52(s0)
20402cb0:	3351                	jal	20402a34 <__metal_driver_sifive_clint0_interrupt_lines>
20402cb2:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402cb6:	fe442583          	lw	a1,-28(s0)
20402cba:	fcc42503          	lw	a0,-52(s0)
20402cbe:	3b2d                	jal	204029f8 <__metal_driver_sifive_clint0_interrupt_parents>
20402cc0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20402cc4:	fdc42703          	lw	a4,-36(s0)
20402cc8:	fe842783          	lw	a5,-24(s0)
20402ccc:	00f71863          	bne	a4,a5,20402cdc <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20402cd0:	fc842703          	lw	a4,-56(s0)
20402cd4:	fd442783          	lw	a5,-44(s0)
20402cd8:	02f70063          	beq	a4,a5,20402cf8 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20402cdc:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20402ce0:	fe442783          	lw	a5,-28(s0)
20402ce4:	0785                	addi	a5,a5,1
20402ce6:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20402cea:	fe442703          	lw	a4,-28(s0)
20402cee:	fd842783          	lw	a5,-40(s0)
20402cf2:	faf74be3          	blt	a4,a5,20402ca8 <__metal_driver_riscv_clint0_register+0x56>
20402cf6:	a011                	j	20402cfa <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20402cf8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20402cfa:	fe842783          	lw	a5,-24(s0)
20402cfe:	c385                	beqz	a5,20402d1e <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20402d00:	fe842783          	lw	a5,-24(s0)
20402d04:	439c                	lw	a5,0(a5)
20402d06:	4fdc                	lw	a5,28(a5)
20402d08:	fc042683          	lw	a3,-64(s0)
20402d0c:	fc442603          	lw	a2,-60(s0)
20402d10:	fc842583          	lw	a1,-56(s0)
20402d14:	fe842503          	lw	a0,-24(s0)
20402d18:	9782                	jalr	a5
20402d1a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20402d1e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20402d22:	853e                	mv	a0,a5
20402d24:	50f2                	lw	ra,60(sp)
20402d26:	5462                	lw	s0,56(sp)
20402d28:	6121                	addi	sp,sp,64
20402d2a:	8082                	ret

20402d2c <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20402d2c:	7179                	addi	sp,sp,-48
20402d2e:	d622                	sw	s0,44(sp)
20402d30:	1800                	addi	s0,sp,48
20402d32:	fca42e23          	sw	a0,-36(s0)
20402d36:	fcb42c23          	sw	a1,-40(s0)
20402d3a:	fcc42a23          	sw	a2,-44(s0)
20402d3e:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20402d42:	57fd                	li	a5,-1
20402d44:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20402d48:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20402d4c:	853e                	mv	a0,a5
20402d4e:	5432                	lw	s0,44(sp)
20402d50:	6145                	addi	sp,sp,48
20402d52:	8082                	ret

20402d54 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20402d54:	1101                	addi	sp,sp,-32
20402d56:	ce06                	sw	ra,28(sp)
20402d58:	cc22                	sw	s0,24(sp)
20402d5a:	1000                	addi	s0,sp,32
20402d5c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20402d60:	236010ef          	jal	ra,20403f96 <__metal_controller_interrupt_vector_mode>
20402d64:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
20402d66:	853e                	mv	a0,a5
20402d68:	40f2                	lw	ra,28(sp)
20402d6a:	4462                	lw	s0,24(sp)
20402d6c:	6105                	addi	sp,sp,32
20402d6e:	8082                	ret

20402d70 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20402d70:	7179                	addi	sp,sp,-48
20402d72:	d606                	sw	ra,44(sp)
20402d74:	d422                	sw	s0,40(sp)
20402d76:	1800                	addi	s0,sp,48
20402d78:	fca42e23          	sw	a0,-36(s0)
20402d7c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20402d80:	57fd                	li	a5,-1
20402d82:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20402d86:	3539                	jal	20402b94 <_get_cpu_intc>
20402d88:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20402d8c:	fe842783          	lw	a5,-24(s0)
20402d90:	c395                	beqz	a5,20402db4 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20402d92:	fd842703          	lw	a4,-40(s0)
20402d96:	4785                	li	a5,1
20402d98:	00e7ef63          	bltu	a5,a4,20402db6 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20402d9c:	fe842783          	lw	a5,-24(s0)
20402da0:	439c                	lw	a5,0(a5)
20402da2:	43dc                	lw	a5,4(a5)
20402da4:	fd842583          	lw	a1,-40(s0)
20402da8:	fe842503          	lw	a0,-24(s0)
20402dac:	9782                	jalr	a5
20402dae:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
20402db2:	a011                	j	20402db6 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20402db4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
20402db6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20402dba:	853e                	mv	a0,a5
20402dbc:	50b2                	lw	ra,44(sp)
20402dbe:	5422                	lw	s0,40(sp)
20402dc0:	6145                	addi	sp,sp,48
20402dc2:	8082                	ret

20402dc4 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20402dc4:	7139                	addi	sp,sp,-64
20402dc6:	de06                	sw	ra,60(sp)
20402dc8:	dc22                	sw	s0,56(sp)
20402dca:	0080                	addi	s0,sp,64
20402dcc:	fca42623          	sw	a0,-52(s0)
20402dd0:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20402dd4:	57fd                	li	a5,-1
20402dd6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20402dda:	fc842783          	lw	a5,-56(s0)
20402dde:	c7c9                	beqz	a5,20402e68 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20402de0:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402de4:	3b45                	jal	20402b94 <_get_cpu_intc>
20402de6:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402dea:	fcc42503          	lw	a0,-52(s0)
20402dee:	36dd                	jal	204029d4 <__metal_driver_sifive_clint0_num_interrupts>
20402df0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20402df4:	fe042223          	sw	zero,-28(s0)
20402df8:	a091                	j	20402e3c <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402dfa:	fe442583          	lw	a1,-28(s0)
20402dfe:	fcc42503          	lw	a0,-52(s0)
20402e02:	390d                	jal	20402a34 <__metal_driver_sifive_clint0_interrupt_lines>
20402e04:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402e08:	fe442583          	lw	a1,-28(s0)
20402e0c:	fcc42503          	lw	a0,-52(s0)
20402e10:	36e5                	jal	204029f8 <__metal_driver_sifive_clint0_interrupt_parents>
20402e12:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20402e16:	fe042703          	lw	a4,-32(s0)
20402e1a:	fe842783          	lw	a5,-24(s0)
20402e1e:	00f71863          	bne	a4,a5,20402e2e <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20402e22:	fc842703          	lw	a4,-56(s0)
20402e26:	fd842783          	lw	a5,-40(s0)
20402e2a:	02f70063          	beq	a4,a5,20402e4a <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20402e2e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402e32:	fe442783          	lw	a5,-28(s0)
20402e36:	0785                	addi	a5,a5,1
20402e38:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20402e3c:	fe442703          	lw	a4,-28(s0)
20402e40:	fdc42783          	lw	a5,-36(s0)
20402e44:	faf74be3          	blt	a4,a5,20402dfa <__metal_driver_riscv_clint0_enable+0x36>
20402e48:	a011                	j	20402e4c <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20402e4a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20402e4c:	fe842783          	lw	a5,-24(s0)
20402e50:	cf81                	beqz	a5,20402e68 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20402e52:	fe842783          	lw	a5,-24(s0)
20402e56:	439c                	lw	a5,0(a5)
20402e58:	53dc                	lw	a5,36(a5)
20402e5a:	fc842583          	lw	a1,-56(s0)
20402e5e:	fe842503          	lw	a0,-24(s0)
20402e62:	9782                	jalr	a5
20402e64:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20402e68:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20402e6c:	853e                	mv	a0,a5
20402e6e:	50f2                	lw	ra,60(sp)
20402e70:	5462                	lw	s0,56(sp)
20402e72:	6121                	addi	sp,sp,64
20402e74:	8082                	ret

20402e76 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20402e76:	7139                	addi	sp,sp,-64
20402e78:	de06                	sw	ra,60(sp)
20402e7a:	dc22                	sw	s0,56(sp)
20402e7c:	0080                	addi	s0,sp,64
20402e7e:	fca42623          	sw	a0,-52(s0)
20402e82:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20402e86:	57fd                	li	a5,-1
20402e88:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20402e8c:	fc842783          	lw	a5,-56(s0)
20402e90:	cbc1                	beqz	a5,20402f20 <__metal_driver_riscv_clint0_disable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20402e92:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402e96:	39fd                	jal	20402b94 <_get_cpu_intc>
20402e98:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402e9c:	fcc42503          	lw	a0,-52(s0)
20402ea0:	b35ff0ef          	jal	ra,204029d4 <__metal_driver_sifive_clint0_num_interrupts>
20402ea4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20402ea8:	fe042223          	sw	zero,-28(s0)
20402eac:	a0a1                	j	20402ef4 <__metal_driver_riscv_clint0_disable+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402eae:	fe442583          	lw	a1,-28(s0)
20402eb2:	fcc42503          	lw	a0,-52(s0)
20402eb6:	b7fff0ef          	jal	ra,20402a34 <__metal_driver_sifive_clint0_interrupt_lines>
20402eba:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402ebe:	fe442583          	lw	a1,-28(s0)
20402ec2:	fcc42503          	lw	a0,-52(s0)
20402ec6:	b33ff0ef          	jal	ra,204029f8 <__metal_driver_sifive_clint0_interrupt_parents>
20402eca:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20402ece:	fe042703          	lw	a4,-32(s0)
20402ed2:	fe842783          	lw	a5,-24(s0)
20402ed6:	00f71863          	bne	a4,a5,20402ee6 <__metal_driver_riscv_clint0_disable+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20402eda:	fc842703          	lw	a4,-56(s0)
20402ede:	fd842783          	lw	a5,-40(s0)
20402ee2:	02f70063          	beq	a4,a5,20402f02 <__metal_driver_riscv_clint0_disable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20402ee6:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402eea:	fe442783          	lw	a5,-28(s0)
20402eee:	0785                	addi	a5,a5,1
20402ef0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20402ef4:	fe442703          	lw	a4,-28(s0)
20402ef8:	fdc42783          	lw	a5,-36(s0)
20402efc:	faf749e3          	blt	a4,a5,20402eae <__metal_driver_riscv_clint0_disable+0x38>
20402f00:	a011                	j	20402f04 <__metal_driver_riscv_clint0_disable+0x8e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20402f02:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20402f04:	fe842783          	lw	a5,-24(s0)
20402f08:	cf81                	beqz	a5,20402f20 <__metal_driver_riscv_clint0_disable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20402f0a:	fe842783          	lw	a5,-24(s0)
20402f0e:	439c                	lw	a5,0(a5)
20402f10:	579c                	lw	a5,40(a5)
20402f12:	fc842583          	lw	a1,-56(s0)
20402f16:	fe842503          	lw	a0,-24(s0)
20402f1a:	9782                	jalr	a5
20402f1c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20402f20:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
20402f24:	853e                	mv	a0,a5
20402f26:	50f2                	lw	ra,60(sp)
20402f28:	5462                	lw	s0,56(sp)
20402f2a:	6121                	addi	sp,sp,64
20402f2c:	8082                	ret

20402f2e <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20402f2e:	7179                	addi	sp,sp,-48
20402f30:	d606                	sw	ra,44(sp)
20402f32:	d422                	sw	s0,40(sp)
20402f34:	1800                	addi	s0,sp,48
20402f36:	fca42e23          	sw	a0,-36(s0)
20402f3a:	fcb42c23          	sw	a1,-40(s0)
20402f3e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
20402f42:	57fd                	li	a5,-1
20402f44:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20402f48:	fdc42783          	lw	a5,-36(s0)
20402f4c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20402f50:	fdc42503          	lw	a0,-36(s0)
20402f54:	a5bff0ef          	jal	ra,204029ae <__metal_driver_sifive_clint0_control_base>
20402f58:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20402f5c:	fd842703          	lw	a4,-40(s0)
20402f60:	4789                	li	a5,2
20402f62:	04f70963          	beq	a4,a5,20402fb4 <__metal_driver_riscv_clint0_command_request+0x86>
20402f66:	fd842703          	lw	a4,-40(s0)
20402f6a:	4789                	li	a5,2
20402f6c:	00e7c863          	blt	a5,a4,20402f7c <__metal_driver_riscv_clint0_command_request+0x4e>
20402f70:	fd842703          	lw	a4,-40(s0)
20402f74:	4785                	li	a5,1
20402f76:	00f70e63          	beq	a4,a5,20402f92 <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20402f7a:	a8f1                	j	20403056 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20402f7c:	fd842703          	lw	a4,-40(s0)
20402f80:	478d                	li	a5,3
20402f82:	04f70d63          	beq	a4,a5,20402fdc <__metal_driver_riscv_clint0_command_request+0xae>
20402f86:	fd842703          	lw	a4,-40(s0)
20402f8a:	4791                	li	a5,4
20402f8c:	08f70963          	beq	a4,a5,2040301e <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20402f90:	a0d9                	j	20403056 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20402f92:	fd442783          	lw	a5,-44(s0)
20402f96:	cbcd                	beqz	a5,20403048 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20402f98:	fe842503          	lw	a0,-24(s0)
20402f9c:	ac9ff0ef          	jal	ra,20402a64 <__metal_clint0_mtime_get>
20402fa0:	87aa                	mv	a5,a0
20402fa2:	882e                	mv	a6,a1
20402fa4:	fd442703          	lw	a4,-44(s0)
20402fa8:	c31c                	sw	a5,0(a4)
20402faa:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20402fae:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402fb2:	a859                	j	20403048 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20402fb4:	fd442783          	lw	a5,-44(s0)
20402fb8:	cbd1                	beqz	a5,2040304c <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20402fba:	fd442783          	lw	a5,-44(s0)
20402fbe:	439c                	lw	a5,0(a5)
20402fc0:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402fc4:	fe042783          	lw	a5,-32(s0)
20402fc8:	078a                	slli	a5,a5,0x2
20402fca:	873e                	mv	a4,a5
20402fcc:	fe442783          	lw	a5,-28(s0)
20402fd0:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20402fd2:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20402fd6:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402fda:	a88d                	j	2040304c <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20402fdc:	fd442783          	lw	a5,-44(s0)
20402fe0:	cba5                	beqz	a5,20403050 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20402fe2:	fd442783          	lw	a5,-44(s0)
20402fe6:	439c                	lw	a5,0(a5)
20402fe8:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402fec:	fe042783          	lw	a5,-32(s0)
20402ff0:	078a                	slli	a5,a5,0x2
20402ff2:	873e                	mv	a4,a5
20402ff4:	fe442783          	lw	a5,-28(s0)
20402ff8:	97ba                	add	a5,a5,a4
20402ffa:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20402ffc:	4785                	li	a5,1
20402ffe:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20403000:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403004:	fe042783          	lw	a5,-32(s0)
20403008:	078a                	slli	a5,a5,0x2
2040300a:	873e                	mv	a4,a5
2040300c:	fe442783          	lw	a5,-28(s0)
20403010:	97ba                	add	a5,a5,a4
20403012:	439c                	lw	a5,0(a5)
20403014:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20403018:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
2040301c:	a815                	j	20403050 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
2040301e:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20403022:	fd442783          	lw	a5,-44(s0)
20403026:	c79d                	beqz	a5,20403054 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20403028:	fd442783          	lw	a5,-44(s0)
2040302c:	439c                	lw	a5,0(a5)
2040302e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403032:	fe042783          	lw	a5,-32(s0)
20403036:	078a                	slli	a5,a5,0x2
20403038:	873e                	mv	a4,a5
2040303a:	fe442783          	lw	a5,-28(s0)
2040303e:	97ba                	add	a5,a5,a4
20403040:	439c                	lw	a5,0(a5)
20403042:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20403046:	a039                	j	20403054 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20403048:	0001                	nop
2040304a:	a031                	j	20403056 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
2040304c:	0001                	nop
2040304e:	a021                	j	20403056 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20403050:	0001                	nop
20403052:	a011                	j	20403056 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20403054:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20403056:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
2040305a:	853e                	mv	a0,a5
2040305c:	50b2                	lw	ra,44(sp)
2040305e:	5422                	lw	s0,40(sp)
20403060:	6145                	addi	sp,sp,48
20403062:	8082                	ret

20403064 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20403064:	7179                	addi	sp,sp,-48
20403066:	d606                	sw	ra,44(sp)
20403068:	d422                	sw	s0,40(sp)
2040306a:	1800                	addi	s0,sp,48
2040306c:	fca42e23          	sw	a0,-36(s0)
20403070:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20403074:	52b020ef          	jal	ra,20405d9e <metal_cpu_get_current_hartid>
20403078:	87aa                	mv	a5,a0
2040307a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
2040307e:	fec40793          	addi	a5,s0,-20
20403082:	863e                	mv	a2,a5
20403084:	4589                	li	a1,2
20403086:	fdc42503          	lw	a0,-36(s0)
2040308a:	3555                	jal	20402f2e <__metal_driver_riscv_clint0_command_request>
2040308c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
2040308e:	853e                	mv	a0,a5
20403090:	50b2                	lw	ra,44(sp)
20403092:	5422                	lw	s0,40(sp)
20403094:	6145                	addi	sp,sp,48
20403096:	8082                	ret

20403098 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20403098:	7179                	addi	sp,sp,-48
2040309a:	d606                	sw	ra,44(sp)
2040309c:	d422                	sw	s0,40(sp)
2040309e:	1800                	addi	s0,sp,48
204030a0:	fca42e23          	sw	a0,-36(s0)
204030a4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
204030a8:	4f7020ef          	jal	ra,20405d9e <metal_cpu_get_current_hartid>
204030ac:	87aa                	mv	a5,a0
204030ae:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
204030b2:	fec40793          	addi	a5,s0,-20
204030b6:	863e                	mv	a2,a5
204030b8:	458d                	li	a1,3
204030ba:	fdc42503          	lw	a0,-36(s0)
204030be:	3d85                	jal	20402f2e <__metal_driver_riscv_clint0_command_request>
204030c0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
204030c2:	853e                	mv	a0,a5
204030c4:	50b2                	lw	ra,44(sp)
204030c6:	5422                	lw	s0,40(sp)
204030c8:	6145                	addi	sp,sp,48
204030ca:	8082                	ret

204030cc <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
204030cc:	1101                	addi	sp,sp,-32
204030ce:	ce22                	sw	s0,28(sp)
204030d0:	1000                	addi	s0,sp,32
204030d2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204030d6:	fec42703          	lw	a4,-20(s0)
204030da:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
204030de:	00f71463          	bne	a4,a5,204030e6 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
204030e2:	4781                	li	a5,0
204030e4:	a011                	j	204030e8 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
204030e6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
204030e8:	853e                	mv	a0,a5
204030ea:	4472                	lw	s0,28(sp)
204030ec:	6105                	addi	sp,sp,32
204030ee:	8082                	ret

204030f0 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
204030f0:	1101                	addi	sp,sp,-32
204030f2:	ce22                	sw	s0,28(sp)
204030f4:	1000                	addi	s0,sp,32
204030f6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204030fa:	fec42703          	lw	a4,-20(s0)
204030fe:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20403102:	00f71763          	bne	a4,a5,20403110 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
20403106:	000f47b7          	lui	a5,0xf4
2040310a:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
2040310e:	a011                	j	20403112 <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
20403110:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
20403112:	853e                	mv	a0,a5
20403114:	4472                	lw	s0,28(sp)
20403116:	6105                	addi	sp,sp,32
20403118:	8082                	ret

2040311a <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
2040311a:	1101                	addi	sp,sp,-32
2040311c:	ce22                	sw	s0,28(sp)
2040311e:	1000                	addi	s0,sp,32
20403120:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20403124:	fec42703          	lw	a4,-20(s0)
20403128:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
2040312c:	00f71763          	bne	a4,a5,2040313a <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20403130:	800017b7          	lui	a5,0x80001
20403134:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdc7c>
20403138:	a011                	j	2040313c <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
2040313a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
2040313c:	853e                	mv	a0,a5
2040313e:	4472                	lw	s0,28(sp)
20403140:	6105                	addi	sp,sp,32
20403142:	8082                	ret

20403144 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20403144:	1101                	addi	sp,sp,-32
20403146:	ce22                	sw	s0,28(sp)
20403148:	1000                	addi	s0,sp,32
2040314a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
2040314e:	fec42783          	lw	a5,-20(s0)
20403152:	00f04a63          	bgtz	a5,20403166 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20403156:	fec42703          	lw	a4,-20(s0)
2040315a:	070a                	slli	a4,a4,0x2
2040315c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403160:	97ba                	add	a5,a5,a4
20403162:	439c                	lw	a5,0(a5)
20403164:	a011                	j	20403168 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20403166:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20403168:	853e                	mv	a0,a5
2040316a:	4472                	lw	s0,28(sp)
2040316c:	6105                	addi	sp,sp,32
2040316e:	8082                	ret

20403170 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20403170:	1101                	addi	sp,sp,-32
20403172:	ce22                	sw	s0,28(sp)
20403174:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20403176:	f14027f3          	csrr	a5,mhartid
2040317a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
2040317e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20403182:	853e                	mv	a0,a5
20403184:	4472                	lw	s0,28(sp)
20403186:	6105                	addi	sp,sp,32
20403188:	8082                	ret

2040318a <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
2040318a:	1101                	addi	sp,sp,-32
2040318c:	ce22                	sw	s0,28(sp)
2040318e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20403190:	47a1                	li	a5,8
20403192:	3007a7f3          	csrrs	a5,mstatus,a5
20403196:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
2040319a:	0001                	nop
2040319c:	4472                	lw	s0,28(sp)
2040319e:	6105                	addi	sp,sp,32
204031a0:	8082                	ret

204031a2 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
204031a2:	1101                	addi	sp,sp,-32
204031a4:	ce22                	sw	s0,28(sp)
204031a6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204031a8:	47a1                	li	a5,8
204031aa:	3007b7f3          	csrrc	a5,mstatus,a5
204031ae:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
204031b2:	0001                	nop
204031b4:	4472                	lw	s0,28(sp)
204031b6:	6105                	addi	sp,sp,32
204031b8:	8082                	ret

204031ba <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
204031ba:	1101                	addi	sp,sp,-32
204031bc:	ce22                	sw	s0,28(sp)
204031be:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204031c0:	47a1                	li	a5,8
204031c2:	3047a7f3          	csrrs	a5,mie,a5
204031c6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
204031ca:	0001                	nop
204031cc:	4472                	lw	s0,28(sp)
204031ce:	6105                	addi	sp,sp,32
204031d0:	8082                	ret

204031d2 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
204031d2:	1101                	addi	sp,sp,-32
204031d4:	ce22                	sw	s0,28(sp)
204031d6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204031d8:	47a1                	li	a5,8
204031da:	3047b7f3          	csrrc	a5,mie,a5
204031de:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
204031e2:	0001                	nop
204031e4:	4472                	lw	s0,28(sp)
204031e6:	6105                	addi	sp,sp,32
204031e8:	8082                	ret

204031ea <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
204031ea:	1101                	addi	sp,sp,-32
204031ec:	ce22                	sw	s0,28(sp)
204031ee:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204031f0:	08000793          	li	a5,128
204031f4:	3047a7f3          	csrrs	a5,mie,a5
204031f8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
204031fc:	0001                	nop
204031fe:	4472                	lw	s0,28(sp)
20403200:	6105                	addi	sp,sp,32
20403202:	8082                	ret

20403204 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20403204:	1101                	addi	sp,sp,-32
20403206:	ce22                	sw	s0,28(sp)
20403208:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
2040320a:	08000793          	li	a5,128
2040320e:	3047b7f3          	csrrc	a5,mie,a5
20403212:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20403216:	0001                	nop
20403218:	4472                	lw	s0,28(sp)
2040321a:	6105                	addi	sp,sp,32
2040321c:	8082                	ret

2040321e <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
2040321e:	1101                	addi	sp,sp,-32
20403220:	ce22                	sw	s0,28(sp)
20403222:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20403224:	6785                	lui	a5,0x1
20403226:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
2040322a:	3047a7f3          	csrrs	a5,mie,a5
2040322e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20403232:	0001                	nop
20403234:	4472                	lw	s0,28(sp)
20403236:	6105                	addi	sp,sp,32
20403238:	8082                	ret

2040323a <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
2040323a:	1101                	addi	sp,sp,-32
2040323c:	ce22                	sw	s0,28(sp)
2040323e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20403240:	6785                	lui	a5,0x1
20403242:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20403246:	3047b7f3          	csrrc	a5,mie,a5
2040324a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
2040324e:	0001                	nop
20403250:	4472                	lw	s0,28(sp)
20403252:	6105                	addi	sp,sp,32
20403254:	8082                	ret

20403256 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20403256:	7179                	addi	sp,sp,-48
20403258:	d622                	sw	s0,44(sp)
2040325a:	1800                	addi	s0,sp,48
2040325c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20403260:	fdc42783          	lw	a5,-36(s0)
20403264:	4705                	li	a4,1
20403266:	00f717b3          	sll	a5,a4,a5
2040326a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
2040326e:	fec42783          	lw	a5,-20(s0)
20403272:	3047a7f3          	csrrs	a5,mie,a5
20403276:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
2040327a:	0001                	nop
2040327c:	5432                	lw	s0,44(sp)
2040327e:	6145                	addi	sp,sp,48
20403280:	8082                	ret

20403282 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20403282:	7179                	addi	sp,sp,-48
20403284:	d622                	sw	s0,44(sp)
20403286:	1800                	addi	s0,sp,48
20403288:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
2040328c:	fdc42783          	lw	a5,-36(s0)
20403290:	4705                	li	a4,1
20403292:	00f717b3          	sll	a5,a4,a5
20403296:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
2040329a:	fec42783          	lw	a5,-20(s0)
2040329e:	3047b7f3          	csrrc	a5,mie,a5
204032a2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
204032a6:	0001                	nop
204032a8:	5432                	lw	s0,44(sp)
204032aa:	6145                	addi	sp,sp,48
204032ac:	8082                	ret

204032ae <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
204032ae:	1101                	addi	sp,sp,-32
204032b0:	ce06                	sw	ra,28(sp)
204032b2:	cc22                	sw	s0,24(sp)
204032b4:	1000                	addi	s0,sp,32
204032b6:	fea42623          	sw	a0,-20(s0)
204032ba:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
204032be:	06400513          	li	a0,100
204032c2:	2f7020ef          	jal	ra,20405db8 <metal_shutdown>

204032c6 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
204032c6:	1101                	addi	sp,sp,-32
204032c8:	ce06                	sw	ra,28(sp)
204032ca:	cc22                	sw	s0,24(sp)
204032cc:	1000                	addi	s0,sp,32
204032ce:	fea42623          	sw	a0,-20(s0)
204032d2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
204032d6:	0c800513          	li	a0,200
204032da:	2df020ef          	jal	ra,20405db8 <metal_shutdown>

204032de <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
204032de:	715d                	addi	sp,sp,-80
204032e0:	c686                	sw	ra,76(sp)
204032e2:	c496                	sw	t0,72(sp)
204032e4:	c29a                	sw	t1,68(sp)
204032e6:	c09e                	sw	t2,64(sp)
204032e8:	de22                	sw	s0,60(sp)
204032ea:	dc2a                	sw	a0,56(sp)
204032ec:	da2e                	sw	a1,52(sp)
204032ee:	d832                	sw	a2,48(sp)
204032f0:	d636                	sw	a3,44(sp)
204032f2:	d43a                	sw	a4,40(sp)
204032f4:	d23e                	sw	a5,36(sp)
204032f6:	d042                	sw	a6,32(sp)
204032f8:	ce46                	sw	a7,28(sp)
204032fa:	cc72                	sw	t3,24(sp)
204032fc:	ca76                	sw	t4,20(sp)
204032fe:	c87a                	sw	t5,16(sp)
20403300:	c67e                	sw	t6,12(sp)
20403302:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20403304:	12c00513          	li	a0,300
20403308:	2b1020ef          	jal	ra,20405db8 <metal_shutdown>

2040330c <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
2040330c:	711d                	addi	sp,sp,-96
2040330e:	ce86                	sw	ra,92(sp)
20403310:	cc96                	sw	t0,88(sp)
20403312:	ca9a                	sw	t1,84(sp)
20403314:	c89e                	sw	t2,80(sp)
20403316:	c6a2                	sw	s0,76(sp)
20403318:	c4aa                	sw	a0,72(sp)
2040331a:	c2ae                	sw	a1,68(sp)
2040331c:	c0b2                	sw	a2,64(sp)
2040331e:	de36                	sw	a3,60(sp)
20403320:	dc3a                	sw	a4,56(sp)
20403322:	da3e                	sw	a5,52(sp)
20403324:	d842                	sw	a6,48(sp)
20403326:	d646                	sw	a7,44(sp)
20403328:	d472                	sw	t3,40(sp)
2040332a:	d276                	sw	t4,36(sp)
2040332c:	d07a                	sw	t5,32(sp)
2040332e:	ce7e                	sw	t6,28(sp)
20403330:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403332:	3d3d                	jal	20403170 <__metal_myhart_id>
20403334:	872a                	mv	a4,a0
20403336:	070a                	slli	a4,a4,0x2
20403338:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040333c:	97ba                	add	a5,a5,a4
2040333e:	439c                	lw	a5,0(a5)
20403340:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20403344:	fac42783          	lw	a5,-84(s0)
20403348:	c785                	beqz	a5,20403370 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040334a:	fac42503          	lw	a0,-84(s0)
2040334e:	33f1                	jal	2040311a <__metal_driver_cpu_interrupt_controller>
20403350:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20403354:	fa842783          	lw	a5,-88(s0)
20403358:	0e07a783          	lw	a5,224(a5)
2040335c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20403360:	fa842783          	lw	a5,-88(s0)
20403364:	0d87a783          	lw	a5,216(a5)
20403368:	fa442583          	lw	a1,-92(s0)
2040336c:	450d                	li	a0,3
2040336e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20403370:	0001                	nop
20403372:	40f6                	lw	ra,92(sp)
20403374:	42e6                	lw	t0,88(sp)
20403376:	4356                	lw	t1,84(sp)
20403378:	43c6                	lw	t2,80(sp)
2040337a:	4436                	lw	s0,76(sp)
2040337c:	4526                	lw	a0,72(sp)
2040337e:	4596                	lw	a1,68(sp)
20403380:	4606                	lw	a2,64(sp)
20403382:	56f2                	lw	a3,60(sp)
20403384:	5762                	lw	a4,56(sp)
20403386:	57d2                	lw	a5,52(sp)
20403388:	5842                	lw	a6,48(sp)
2040338a:	58b2                	lw	a7,44(sp)
2040338c:	5e22                	lw	t3,40(sp)
2040338e:	5e92                	lw	t4,36(sp)
20403390:	5f02                	lw	t5,32(sp)
20403392:	4ff2                	lw	t6,28(sp)
20403394:	6125                	addi	sp,sp,96
20403396:	30200073          	mret

2040339a <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
2040339a:	7179                	addi	sp,sp,-48
2040339c:	d606                	sw	ra,44(sp)
2040339e:	d422                	sw	s0,40(sp)
204033a0:	1800                	addi	s0,sp,48
204033a2:	fca42e23          	sw	a0,-36(s0)
204033a6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204033aa:	33d9                	jal	20403170 <__metal_myhart_id>
204033ac:	872a                	mv	a4,a0
204033ae:	070a                	slli	a4,a4,0x2
204033b0:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204033b4:	97ba                	add	a5,a5,a4
204033b6:	439c                	lw	a5,0(a5)
204033b8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204033bc:	342027f3          	csrr	a5,mcause
204033c0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
204033c4:	fec42783          	lw	a5,-20(s0)
204033c8:	c795                	beqz	a5,204033f4 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204033ca:	fec42503          	lw	a0,-20(s0)
204033ce:	33b1                	jal	2040311a <__metal_driver_cpu_interrupt_controller>
204033d0:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
204033d4:	fe842783          	lw	a5,-24(s0)
204033d8:	3ff7f793          	andi	a5,a5,1023
204033dc:	fe442703          	lw	a4,-28(s0)
204033e0:	0e078793          	addi	a5,a5,224
204033e4:	078a                	slli	a5,a5,0x2
204033e6:	97ba                	add	a5,a5,a4
204033e8:	479c                	lw	a5,8(a5)
204033ea:	fdc42583          	lw	a1,-36(s0)
204033ee:	fec42503          	lw	a0,-20(s0)
204033f2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
204033f4:	0001                	nop
204033f6:	50b2                	lw	ra,44(sp)
204033f8:	5422                	lw	s0,40(sp)
204033fa:	6145                	addi	sp,sp,48
204033fc:	8082                	ret

204033fe <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
204033fe:	711d                	addi	sp,sp,-96
20403400:	ce86                	sw	ra,92(sp)
20403402:	cc96                	sw	t0,88(sp)
20403404:	ca9a                	sw	t1,84(sp)
20403406:	c89e                	sw	t2,80(sp)
20403408:	c6a2                	sw	s0,76(sp)
2040340a:	c4aa                	sw	a0,72(sp)
2040340c:	c2ae                	sw	a1,68(sp)
2040340e:	c0b2                	sw	a2,64(sp)
20403410:	de36                	sw	a3,60(sp)
20403412:	dc3a                	sw	a4,56(sp)
20403414:	da3e                	sw	a5,52(sp)
20403416:	d842                	sw	a6,48(sp)
20403418:	d646                	sw	a7,44(sp)
2040341a:	d472                	sw	t3,40(sp)
2040341c:	d276                	sw	t4,36(sp)
2040341e:	d07a                	sw	t5,32(sp)
20403420:	ce7e                	sw	t6,28(sp)
20403422:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403424:	33b1                	jal	20403170 <__metal_myhart_id>
20403426:	872a                	mv	a4,a0
20403428:	070a                	slli	a4,a4,0x2
2040342a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040342e:	97ba                	add	a5,a5,a4
20403430:	439c                	lw	a5,0(a5)
20403432:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20403436:	fac42783          	lw	a5,-84(s0)
2040343a:	c785                	beqz	a5,20403462 <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040343c:	fac42503          	lw	a0,-84(s0)
20403440:	39e9                	jal	2040311a <__metal_driver_cpu_interrupt_controller>
20403442:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20403446:	fa842783          	lw	a5,-88(s0)
2040344a:	1407a783          	lw	a5,320(a5)
2040344e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20403452:	fa842783          	lw	a5,-88(s0)
20403456:	1387a783          	lw	a5,312(a5)
2040345a:	fa442583          	lw	a1,-92(s0)
2040345e:	451d                	li	a0,7
20403460:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20403462:	0001                	nop
20403464:	40f6                	lw	ra,92(sp)
20403466:	42e6                	lw	t0,88(sp)
20403468:	4356                	lw	t1,84(sp)
2040346a:	43c6                	lw	t2,80(sp)
2040346c:	4436                	lw	s0,76(sp)
2040346e:	4526                	lw	a0,72(sp)
20403470:	4596                	lw	a1,68(sp)
20403472:	4606                	lw	a2,64(sp)
20403474:	56f2                	lw	a3,60(sp)
20403476:	5762                	lw	a4,56(sp)
20403478:	57d2                	lw	a5,52(sp)
2040347a:	5842                	lw	a6,48(sp)
2040347c:	58b2                	lw	a7,44(sp)
2040347e:	5e22                	lw	t3,40(sp)
20403480:	5e92                	lw	t4,36(sp)
20403482:	5f02                	lw	t5,32(sp)
20403484:	4ff2                	lw	t6,28(sp)
20403486:	6125                	addi	sp,sp,96
20403488:	30200073          	mret

2040348c <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
2040348c:	7179                	addi	sp,sp,-48
2040348e:	d606                	sw	ra,44(sp)
20403490:	d422                	sw	s0,40(sp)
20403492:	1800                	addi	s0,sp,48
20403494:	fca42e23          	sw	a0,-36(s0)
20403498:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
2040349c:	39d1                	jal	20403170 <__metal_myhart_id>
2040349e:	87aa                	mv	a5,a0
204034a0:	853e                	mv	a0,a5
204034a2:	314d                	jal	20403144 <__metal_driver_cpu_get>
204034a4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
204034a8:	fec42503          	lw	a0,-20(s0)
204034ac:	148010ef          	jal	ra,204045f4 <__metal_driver_cpu_mtime_get>
204034b0:	fea42023          	sw	a0,-32(s0)
204034b4:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
204034b8:	fe042783          	lw	a5,-32(s0)
204034bc:	fe442803          	lw	a6,-28(s0)
204034c0:	45a9                	li	a1,10
204034c2:	4601                	li	a2,0
204034c4:	00b786b3          	add	a3,a5,a1
204034c8:	8536                	mv	a0,a3
204034ca:	00f53533          	sltu	a0,a0,a5
204034ce:	00c80733          	add	a4,a6,a2
204034d2:	00e507b3          	add	a5,a0,a4
204034d6:	873e                	mv	a4,a5
204034d8:	87b6                	mv	a5,a3
204034da:	883a                	mv	a6,a4
204034dc:	85be                	mv	a1,a5
204034de:	8642                	mv	a2,a6
204034e0:	fec42503          	lw	a0,-20(s0)
204034e4:	176010ef          	jal	ra,2040465a <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
204034e8:	0001                	nop
204034ea:	50b2                	lw	ra,44(sp)
204034ec:	5422                	lw	s0,40(sp)
204034ee:	6145                	addi	sp,sp,48
204034f0:	8082                	ret
	...

20403500 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20403500:	7119                	addi	sp,sp,-128
20403502:	de86                	sw	ra,124(sp)
20403504:	dc96                	sw	t0,120(sp)
20403506:	da9a                	sw	t1,116(sp)
20403508:	d89e                	sw	t2,112(sp)
2040350a:	d6a2                	sw	s0,108(sp)
2040350c:	d4aa                	sw	a0,104(sp)
2040350e:	d2ae                	sw	a1,100(sp)
20403510:	d0b2                	sw	a2,96(sp)
20403512:	ceb6                	sw	a3,92(sp)
20403514:	ccba                	sw	a4,88(sp)
20403516:	cabe                	sw	a5,84(sp)
20403518:	c8c2                	sw	a6,80(sp)
2040351a:	c6c6                	sw	a7,76(sp)
2040351c:	c4f2                	sw	t3,72(sp)
2040351e:	c2f6                	sw	t4,68(sp)
20403520:	c0fa                	sw	t5,64(sp)
20403522:	de7e                	sw	t6,60(sp)
20403524:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403526:	c4bff0ef          	jal	ra,20403170 <__metal_myhart_id>
2040352a:	872a                	mv	a4,a0
2040352c:	070a                	slli	a4,a4,0x2
2040352e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403532:	97ba                	add	a5,a5,a4
20403534:	439c                	lw	a5,0(a5)
20403536:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
2040353a:	342027f3          	csrr	a5,mcause
2040353e:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403542:	341027f3          	csrr	a5,mepc
20403546:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
2040354a:	343027f3          	csrr	a5,mtval
2040354e:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20403552:	305027f3          	csrr	a5,mtvec
20403556:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
2040355a:	fac42783          	lw	a5,-84(s0)
2040355e:	c7e9                	beqz	a5,20403628 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403560:	fac42503          	lw	a0,-84(s0)
20403564:	bb7ff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403568:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
2040356c:	fa842783          	lw	a5,-88(s0)
20403570:	3ff7f793          	andi	a5,a5,1023
20403574:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20403578:	fa842783          	lw	a5,-88(s0)
2040357c:	0807d863          	bgez	a5,2040360c <__metal_exception_handler+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20403580:	f9442703          	lw	a4,-108(s0)
20403584:	47ad                	li	a5,11
20403586:	00e7d763          	bge	a5,a4,20403594 <__metal_exception_handler+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
2040358a:	f9c42783          	lw	a5,-100(s0)
2040358e:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20403592:	ef9d                	bnez	a5,204035d0 <__metal_exception_handler+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20403594:	f9842683          	lw	a3,-104(s0)
20403598:	f9442703          	lw	a4,-108(s0)
2040359c:	87ba                	mv	a5,a4
2040359e:	0786                	slli	a5,a5,0x1
204035a0:	97ba                	add	a5,a5,a4
204035a2:	078e                	slli	a5,a5,0x3
204035a4:	97b6                	add	a5,a5,a3
204035a6:	0987a783          	lw	a5,152(a5)
204035aa:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
204035ae:	f9842683          	lw	a3,-104(s0)
204035b2:	f9442703          	lw	a4,-108(s0)
204035b6:	87ba                	mv	a5,a4
204035b8:	0786                	slli	a5,a5,0x1
204035ba:	97ba                	add	a5,a5,a4
204035bc:	078e                	slli	a5,a5,0x3
204035be:	97b6                	add	a5,a5,a3
204035c0:	0907a783          	lw	a5,144(a5)
204035c4:	f8c42583          	lw	a1,-116(s0)
204035c8:	f9442503          	lw	a0,-108(s0)
204035cc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
204035ce:	a8a9                	j	20403628 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
204035d0:	f9c42783          	lw	a5,-100(s0)
204035d4:	03f7f713          	andi	a4,a5,63
204035d8:	4789                	li	a5,2
204035da:	04f71763          	bne	a4,a5,20403628 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
204035de:	307027f3          	csrr	a5,mtvt
204035e2:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204035e6:	f9842783          	lw	a5,-104(s0)
204035ea:	0dc7a783          	lw	a5,220(a5)
204035ee:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
204035f2:	f9042783          	lw	a5,-112(s0)
204035f6:	439c                	lw	a5,0(a5)
204035f8:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
204035fc:	f8842783          	lw	a5,-120(s0)
20403600:	f8c42583          	lw	a1,-116(s0)
20403604:	f9442503          	lw	a0,-108(s0)
20403608:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
2040360a:	a839                	j	20403628 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
2040360c:	f9842703          	lw	a4,-104(s0)
20403610:	f9442783          	lw	a5,-108(s0)
20403614:	0e078793          	addi	a5,a5,224
20403618:	078a                	slli	a5,a5,0x2
2040361a:	97ba                	add	a5,a5,a4
2040361c:	479c                	lw	a5,8(a5)
2040361e:	f9442583          	lw	a1,-108(s0)
20403622:	fac42503          	lw	a0,-84(s0)
20403626:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20403628:	50f6                	lw	ra,124(sp)
2040362a:	52e6                	lw	t0,120(sp)
2040362c:	5356                	lw	t1,116(sp)
2040362e:	53c6                	lw	t2,112(sp)
20403630:	5436                	lw	s0,108(sp)
20403632:	5526                	lw	a0,104(sp)
20403634:	5596                	lw	a1,100(sp)
20403636:	5606                	lw	a2,96(sp)
20403638:	46f6                	lw	a3,92(sp)
2040363a:	4766                	lw	a4,88(sp)
2040363c:	47d6                	lw	a5,84(sp)
2040363e:	4846                	lw	a6,80(sp)
20403640:	48b6                	lw	a7,76(sp)
20403642:	4e26                	lw	t3,72(sp)
20403644:	4e96                	lw	t4,68(sp)
20403646:	4f06                	lw	t5,64(sp)
20403648:	5ff2                	lw	t6,60(sp)
2040364a:	6109                	addi	sp,sp,128
2040364c:	30200073          	mret
	...

20403676 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20403676:	711d                	addi	sp,sp,-96
20403678:	ce86                	sw	ra,92(sp)
2040367a:	cc96                	sw	t0,88(sp)
2040367c:	ca9a                	sw	t1,84(sp)
2040367e:	c89e                	sw	t2,80(sp)
20403680:	c6a2                	sw	s0,76(sp)
20403682:	c4aa                	sw	a0,72(sp)
20403684:	c2ae                	sw	a1,68(sp)
20403686:	c0b2                	sw	a2,64(sp)
20403688:	de36                	sw	a3,60(sp)
2040368a:	dc3a                	sw	a4,56(sp)
2040368c:	da3e                	sw	a5,52(sp)
2040368e:	d842                	sw	a6,48(sp)
20403690:	d646                	sw	a7,44(sp)
20403692:	d472                	sw	t3,40(sp)
20403694:	d276                	sw	t4,36(sp)
20403696:	d07a                	sw	t5,32(sp)
20403698:	ce7e                	sw	t6,28(sp)
2040369a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040369c:	ad5ff0ef          	jal	ra,20403170 <__metal_myhart_id>
204036a0:	872a                	mv	a4,a0
204036a2:	070a                	slli	a4,a4,0x2
204036a4:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204036a8:	97ba                	add	a5,a5,a4
204036aa:	439c                	lw	a5,0(a5)
204036ac:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
204036b0:	fac42783          	lw	a5,-84(s0)
204036b4:	c78d                	beqz	a5,204036de <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204036b6:	fac42503          	lw	a0,-84(s0)
204036ba:	a61ff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
204036be:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
204036c2:	fa842783          	lw	a5,-88(s0)
204036c6:	2187a783          	lw	a5,536(a5)
204036ca:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
204036ce:	fa842783          	lw	a5,-88(s0)
204036d2:	2107a783          	lw	a5,528(a5)
204036d6:	fa442583          	lw	a1,-92(s0)
204036da:	4541                	li	a0,16
204036dc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
204036de:	0001                	nop
204036e0:	40f6                	lw	ra,92(sp)
204036e2:	42e6                	lw	t0,88(sp)
204036e4:	4356                	lw	t1,84(sp)
204036e6:	43c6                	lw	t2,80(sp)
204036e8:	4436                	lw	s0,76(sp)
204036ea:	4526                	lw	a0,72(sp)
204036ec:	4596                	lw	a1,68(sp)
204036ee:	4606                	lw	a2,64(sp)
204036f0:	56f2                	lw	a3,60(sp)
204036f2:	5762                	lw	a4,56(sp)
204036f4:	57d2                	lw	a5,52(sp)
204036f6:	5842                	lw	a6,48(sp)
204036f8:	58b2                	lw	a7,44(sp)
204036fa:	5e22                	lw	t3,40(sp)
204036fc:	5e92                	lw	t4,36(sp)
204036fe:	5f02                	lw	t5,32(sp)
20403700:	4ff2                	lw	t6,28(sp)
20403702:	6125                	addi	sp,sp,96
20403704:	30200073          	mret

20403708 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20403708:	711d                	addi	sp,sp,-96
2040370a:	ce86                	sw	ra,92(sp)
2040370c:	cc96                	sw	t0,88(sp)
2040370e:	ca9a                	sw	t1,84(sp)
20403710:	c89e                	sw	t2,80(sp)
20403712:	c6a2                	sw	s0,76(sp)
20403714:	c4aa                	sw	a0,72(sp)
20403716:	c2ae                	sw	a1,68(sp)
20403718:	c0b2                	sw	a2,64(sp)
2040371a:	de36                	sw	a3,60(sp)
2040371c:	dc3a                	sw	a4,56(sp)
2040371e:	da3e                	sw	a5,52(sp)
20403720:	d842                	sw	a6,48(sp)
20403722:	d646                	sw	a7,44(sp)
20403724:	d472                	sw	t3,40(sp)
20403726:	d276                	sw	t4,36(sp)
20403728:	d07a                	sw	t5,32(sp)
2040372a:	ce7e                	sw	t6,28(sp)
2040372c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040372e:	a43ff0ef          	jal	ra,20403170 <__metal_myhart_id>
20403732:	872a                	mv	a4,a0
20403734:	070a                	slli	a4,a4,0x2
20403736:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040373a:	97ba                	add	a5,a5,a4
2040373c:	439c                	lw	a5,0(a5)
2040373e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20403742:	fac42783          	lw	a5,-84(s0)
20403746:	c78d                	beqz	a5,20403770 <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403748:	fac42503          	lw	a0,-84(s0)
2040374c:	9cfff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403750:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20403754:	fa842783          	lw	a5,-88(s0)
20403758:	2307a783          	lw	a5,560(a5)
2040375c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20403760:	fa842783          	lw	a5,-88(s0)
20403764:	2287a783          	lw	a5,552(a5)
20403768:	fa442583          	lw	a1,-92(s0)
2040376c:	4545                	li	a0,17
2040376e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20403770:	0001                	nop
20403772:	40f6                	lw	ra,92(sp)
20403774:	42e6                	lw	t0,88(sp)
20403776:	4356                	lw	t1,84(sp)
20403778:	43c6                	lw	t2,80(sp)
2040377a:	4436                	lw	s0,76(sp)
2040377c:	4526                	lw	a0,72(sp)
2040377e:	4596                	lw	a1,68(sp)
20403780:	4606                	lw	a2,64(sp)
20403782:	56f2                	lw	a3,60(sp)
20403784:	5762                	lw	a4,56(sp)
20403786:	57d2                	lw	a5,52(sp)
20403788:	5842                	lw	a6,48(sp)
2040378a:	58b2                	lw	a7,44(sp)
2040378c:	5e22                	lw	t3,40(sp)
2040378e:	5e92                	lw	t4,36(sp)
20403790:	5f02                	lw	t5,32(sp)
20403792:	4ff2                	lw	t6,28(sp)
20403794:	6125                	addi	sp,sp,96
20403796:	30200073          	mret

2040379a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
2040379a:	711d                	addi	sp,sp,-96
2040379c:	ce86                	sw	ra,92(sp)
2040379e:	cc96                	sw	t0,88(sp)
204037a0:	ca9a                	sw	t1,84(sp)
204037a2:	c89e                	sw	t2,80(sp)
204037a4:	c6a2                	sw	s0,76(sp)
204037a6:	c4aa                	sw	a0,72(sp)
204037a8:	c2ae                	sw	a1,68(sp)
204037aa:	c0b2                	sw	a2,64(sp)
204037ac:	de36                	sw	a3,60(sp)
204037ae:	dc3a                	sw	a4,56(sp)
204037b0:	da3e                	sw	a5,52(sp)
204037b2:	d842                	sw	a6,48(sp)
204037b4:	d646                	sw	a7,44(sp)
204037b6:	d472                	sw	t3,40(sp)
204037b8:	d276                	sw	t4,36(sp)
204037ba:	d07a                	sw	t5,32(sp)
204037bc:	ce7e                	sw	t6,28(sp)
204037be:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204037c0:	9b1ff0ef          	jal	ra,20403170 <__metal_myhart_id>
204037c4:	872a                	mv	a4,a0
204037c6:	070a                	slli	a4,a4,0x2
204037c8:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204037cc:	97ba                	add	a5,a5,a4
204037ce:	439c                	lw	a5,0(a5)
204037d0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
204037d4:	fac42783          	lw	a5,-84(s0)
204037d8:	c78d                	beqz	a5,20403802 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204037da:	fac42503          	lw	a0,-84(s0)
204037de:	93dff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
204037e2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
204037e6:	fa842783          	lw	a5,-88(s0)
204037ea:	2487a783          	lw	a5,584(a5)
204037ee:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
204037f2:	fa842783          	lw	a5,-88(s0)
204037f6:	2407a783          	lw	a5,576(a5)
204037fa:	fa442583          	lw	a1,-92(s0)
204037fe:	4549                	li	a0,18
20403800:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20403802:	0001                	nop
20403804:	40f6                	lw	ra,92(sp)
20403806:	42e6                	lw	t0,88(sp)
20403808:	4356                	lw	t1,84(sp)
2040380a:	43c6                	lw	t2,80(sp)
2040380c:	4436                	lw	s0,76(sp)
2040380e:	4526                	lw	a0,72(sp)
20403810:	4596                	lw	a1,68(sp)
20403812:	4606                	lw	a2,64(sp)
20403814:	56f2                	lw	a3,60(sp)
20403816:	5762                	lw	a4,56(sp)
20403818:	57d2                	lw	a5,52(sp)
2040381a:	5842                	lw	a6,48(sp)
2040381c:	58b2                	lw	a7,44(sp)
2040381e:	5e22                	lw	t3,40(sp)
20403820:	5e92                	lw	t4,36(sp)
20403822:	5f02                	lw	t5,32(sp)
20403824:	4ff2                	lw	t6,28(sp)
20403826:	6125                	addi	sp,sp,96
20403828:	30200073          	mret

2040382c <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
2040382c:	711d                	addi	sp,sp,-96
2040382e:	ce86                	sw	ra,92(sp)
20403830:	cc96                	sw	t0,88(sp)
20403832:	ca9a                	sw	t1,84(sp)
20403834:	c89e                	sw	t2,80(sp)
20403836:	c6a2                	sw	s0,76(sp)
20403838:	c4aa                	sw	a0,72(sp)
2040383a:	c2ae                	sw	a1,68(sp)
2040383c:	c0b2                	sw	a2,64(sp)
2040383e:	de36                	sw	a3,60(sp)
20403840:	dc3a                	sw	a4,56(sp)
20403842:	da3e                	sw	a5,52(sp)
20403844:	d842                	sw	a6,48(sp)
20403846:	d646                	sw	a7,44(sp)
20403848:	d472                	sw	t3,40(sp)
2040384a:	d276                	sw	t4,36(sp)
2040384c:	d07a                	sw	t5,32(sp)
2040384e:	ce7e                	sw	t6,28(sp)
20403850:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403852:	91fff0ef          	jal	ra,20403170 <__metal_myhart_id>
20403856:	872a                	mv	a4,a0
20403858:	070a                	slli	a4,a4,0x2
2040385a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040385e:	97ba                	add	a5,a5,a4
20403860:	439c                	lw	a5,0(a5)
20403862:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20403866:	fac42783          	lw	a5,-84(s0)
2040386a:	c78d                	beqz	a5,20403894 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040386c:	fac42503          	lw	a0,-84(s0)
20403870:	8abff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403874:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20403878:	fa842783          	lw	a5,-88(s0)
2040387c:	2607a783          	lw	a5,608(a5)
20403880:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20403884:	fa842783          	lw	a5,-88(s0)
20403888:	2587a783          	lw	a5,600(a5)
2040388c:	fa442583          	lw	a1,-92(s0)
20403890:	454d                	li	a0,19
20403892:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20403894:	0001                	nop
20403896:	40f6                	lw	ra,92(sp)
20403898:	42e6                	lw	t0,88(sp)
2040389a:	4356                	lw	t1,84(sp)
2040389c:	43c6                	lw	t2,80(sp)
2040389e:	4436                	lw	s0,76(sp)
204038a0:	4526                	lw	a0,72(sp)
204038a2:	4596                	lw	a1,68(sp)
204038a4:	4606                	lw	a2,64(sp)
204038a6:	56f2                	lw	a3,60(sp)
204038a8:	5762                	lw	a4,56(sp)
204038aa:	57d2                	lw	a5,52(sp)
204038ac:	5842                	lw	a6,48(sp)
204038ae:	58b2                	lw	a7,44(sp)
204038b0:	5e22                	lw	t3,40(sp)
204038b2:	5e92                	lw	t4,36(sp)
204038b4:	5f02                	lw	t5,32(sp)
204038b6:	4ff2                	lw	t6,28(sp)
204038b8:	6125                	addi	sp,sp,96
204038ba:	30200073          	mret

204038be <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
204038be:	711d                	addi	sp,sp,-96
204038c0:	ce86                	sw	ra,92(sp)
204038c2:	cc96                	sw	t0,88(sp)
204038c4:	ca9a                	sw	t1,84(sp)
204038c6:	c89e                	sw	t2,80(sp)
204038c8:	c6a2                	sw	s0,76(sp)
204038ca:	c4aa                	sw	a0,72(sp)
204038cc:	c2ae                	sw	a1,68(sp)
204038ce:	c0b2                	sw	a2,64(sp)
204038d0:	de36                	sw	a3,60(sp)
204038d2:	dc3a                	sw	a4,56(sp)
204038d4:	da3e                	sw	a5,52(sp)
204038d6:	d842                	sw	a6,48(sp)
204038d8:	d646                	sw	a7,44(sp)
204038da:	d472                	sw	t3,40(sp)
204038dc:	d276                	sw	t4,36(sp)
204038de:	d07a                	sw	t5,32(sp)
204038e0:	ce7e                	sw	t6,28(sp)
204038e2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204038e4:	88dff0ef          	jal	ra,20403170 <__metal_myhart_id>
204038e8:	872a                	mv	a4,a0
204038ea:	070a                	slli	a4,a4,0x2
204038ec:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204038f0:	97ba                	add	a5,a5,a4
204038f2:	439c                	lw	a5,0(a5)
204038f4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
204038f8:	fac42783          	lw	a5,-84(s0)
204038fc:	c78d                	beqz	a5,20403926 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204038fe:	fac42503          	lw	a0,-84(s0)
20403902:	819ff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403906:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
2040390a:	fa842783          	lw	a5,-88(s0)
2040390e:	2787a783          	lw	a5,632(a5)
20403912:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20403916:	fa842783          	lw	a5,-88(s0)
2040391a:	2707a783          	lw	a5,624(a5)
2040391e:	fa442583          	lw	a1,-92(s0)
20403922:	4551                	li	a0,20
20403924:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20403926:	0001                	nop
20403928:	40f6                	lw	ra,92(sp)
2040392a:	42e6                	lw	t0,88(sp)
2040392c:	4356                	lw	t1,84(sp)
2040392e:	43c6                	lw	t2,80(sp)
20403930:	4436                	lw	s0,76(sp)
20403932:	4526                	lw	a0,72(sp)
20403934:	4596                	lw	a1,68(sp)
20403936:	4606                	lw	a2,64(sp)
20403938:	56f2                	lw	a3,60(sp)
2040393a:	5762                	lw	a4,56(sp)
2040393c:	57d2                	lw	a5,52(sp)
2040393e:	5842                	lw	a6,48(sp)
20403940:	58b2                	lw	a7,44(sp)
20403942:	5e22                	lw	t3,40(sp)
20403944:	5e92                	lw	t4,36(sp)
20403946:	5f02                	lw	t5,32(sp)
20403948:	4ff2                	lw	t6,28(sp)
2040394a:	6125                	addi	sp,sp,96
2040394c:	30200073          	mret

20403950 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20403950:	711d                	addi	sp,sp,-96
20403952:	ce86                	sw	ra,92(sp)
20403954:	cc96                	sw	t0,88(sp)
20403956:	ca9a                	sw	t1,84(sp)
20403958:	c89e                	sw	t2,80(sp)
2040395a:	c6a2                	sw	s0,76(sp)
2040395c:	c4aa                	sw	a0,72(sp)
2040395e:	c2ae                	sw	a1,68(sp)
20403960:	c0b2                	sw	a2,64(sp)
20403962:	de36                	sw	a3,60(sp)
20403964:	dc3a                	sw	a4,56(sp)
20403966:	da3e                	sw	a5,52(sp)
20403968:	d842                	sw	a6,48(sp)
2040396a:	d646                	sw	a7,44(sp)
2040396c:	d472                	sw	t3,40(sp)
2040396e:	d276                	sw	t4,36(sp)
20403970:	d07a                	sw	t5,32(sp)
20403972:	ce7e                	sw	t6,28(sp)
20403974:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403976:	ffaff0ef          	jal	ra,20403170 <__metal_myhart_id>
2040397a:	872a                	mv	a4,a0
2040397c:	070a                	slli	a4,a4,0x2
2040397e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403982:	97ba                	add	a5,a5,a4
20403984:	439c                	lw	a5,0(a5)
20403986:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
2040398a:	fac42783          	lw	a5,-84(s0)
2040398e:	c78d                	beqz	a5,204039b8 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403990:	fac42503          	lw	a0,-84(s0)
20403994:	f86ff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403998:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
2040399c:	fa842783          	lw	a5,-88(s0)
204039a0:	2907a783          	lw	a5,656(a5)
204039a4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
204039a8:	fa842783          	lw	a5,-88(s0)
204039ac:	2887a783          	lw	a5,648(a5)
204039b0:	fa442583          	lw	a1,-92(s0)
204039b4:	4555                	li	a0,21
204039b6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
204039b8:	0001                	nop
204039ba:	40f6                	lw	ra,92(sp)
204039bc:	42e6                	lw	t0,88(sp)
204039be:	4356                	lw	t1,84(sp)
204039c0:	43c6                	lw	t2,80(sp)
204039c2:	4436                	lw	s0,76(sp)
204039c4:	4526                	lw	a0,72(sp)
204039c6:	4596                	lw	a1,68(sp)
204039c8:	4606                	lw	a2,64(sp)
204039ca:	56f2                	lw	a3,60(sp)
204039cc:	5762                	lw	a4,56(sp)
204039ce:	57d2                	lw	a5,52(sp)
204039d0:	5842                	lw	a6,48(sp)
204039d2:	58b2                	lw	a7,44(sp)
204039d4:	5e22                	lw	t3,40(sp)
204039d6:	5e92                	lw	t4,36(sp)
204039d8:	5f02                	lw	t5,32(sp)
204039da:	4ff2                	lw	t6,28(sp)
204039dc:	6125                	addi	sp,sp,96
204039de:	30200073          	mret

204039e2 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
204039e2:	711d                	addi	sp,sp,-96
204039e4:	ce86                	sw	ra,92(sp)
204039e6:	cc96                	sw	t0,88(sp)
204039e8:	ca9a                	sw	t1,84(sp)
204039ea:	c89e                	sw	t2,80(sp)
204039ec:	c6a2                	sw	s0,76(sp)
204039ee:	c4aa                	sw	a0,72(sp)
204039f0:	c2ae                	sw	a1,68(sp)
204039f2:	c0b2                	sw	a2,64(sp)
204039f4:	de36                	sw	a3,60(sp)
204039f6:	dc3a                	sw	a4,56(sp)
204039f8:	da3e                	sw	a5,52(sp)
204039fa:	d842                	sw	a6,48(sp)
204039fc:	d646                	sw	a7,44(sp)
204039fe:	d472                	sw	t3,40(sp)
20403a00:	d276                	sw	t4,36(sp)
20403a02:	d07a                	sw	t5,32(sp)
20403a04:	ce7e                	sw	t6,28(sp)
20403a06:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403a08:	f68ff0ef          	jal	ra,20403170 <__metal_myhart_id>
20403a0c:	872a                	mv	a4,a0
20403a0e:	070a                	slli	a4,a4,0x2
20403a10:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403a14:	97ba                	add	a5,a5,a4
20403a16:	439c                	lw	a5,0(a5)
20403a18:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
20403a1c:	fac42783          	lw	a5,-84(s0)
20403a20:	c78d                	beqz	a5,20403a4a <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403a22:	fac42503          	lw	a0,-84(s0)
20403a26:	ef4ff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403a2a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
20403a2e:	fa842783          	lw	a5,-88(s0)
20403a32:	2a87a783          	lw	a5,680(a5)
20403a36:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
20403a3a:	fa842783          	lw	a5,-88(s0)
20403a3e:	2a07a783          	lw	a5,672(a5)
20403a42:	fa442583          	lw	a1,-92(s0)
20403a46:	4559                	li	a0,22
20403a48:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
20403a4a:	0001                	nop
20403a4c:	40f6                	lw	ra,92(sp)
20403a4e:	42e6                	lw	t0,88(sp)
20403a50:	4356                	lw	t1,84(sp)
20403a52:	43c6                	lw	t2,80(sp)
20403a54:	4436                	lw	s0,76(sp)
20403a56:	4526                	lw	a0,72(sp)
20403a58:	4596                	lw	a1,68(sp)
20403a5a:	4606                	lw	a2,64(sp)
20403a5c:	56f2                	lw	a3,60(sp)
20403a5e:	5762                	lw	a4,56(sp)
20403a60:	57d2                	lw	a5,52(sp)
20403a62:	5842                	lw	a6,48(sp)
20403a64:	58b2                	lw	a7,44(sp)
20403a66:	5e22                	lw	t3,40(sp)
20403a68:	5e92                	lw	t4,36(sp)
20403a6a:	5f02                	lw	t5,32(sp)
20403a6c:	4ff2                	lw	t6,28(sp)
20403a6e:	6125                	addi	sp,sp,96
20403a70:	30200073          	mret

20403a74 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20403a74:	711d                	addi	sp,sp,-96
20403a76:	ce86                	sw	ra,92(sp)
20403a78:	cc96                	sw	t0,88(sp)
20403a7a:	ca9a                	sw	t1,84(sp)
20403a7c:	c89e                	sw	t2,80(sp)
20403a7e:	c6a2                	sw	s0,76(sp)
20403a80:	c4aa                	sw	a0,72(sp)
20403a82:	c2ae                	sw	a1,68(sp)
20403a84:	c0b2                	sw	a2,64(sp)
20403a86:	de36                	sw	a3,60(sp)
20403a88:	dc3a                	sw	a4,56(sp)
20403a8a:	da3e                	sw	a5,52(sp)
20403a8c:	d842                	sw	a6,48(sp)
20403a8e:	d646                	sw	a7,44(sp)
20403a90:	d472                	sw	t3,40(sp)
20403a92:	d276                	sw	t4,36(sp)
20403a94:	d07a                	sw	t5,32(sp)
20403a96:	ce7e                	sw	t6,28(sp)
20403a98:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403a9a:	ed6ff0ef          	jal	ra,20403170 <__metal_myhart_id>
20403a9e:	872a                	mv	a4,a0
20403aa0:	070a                	slli	a4,a4,0x2
20403aa2:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403aa6:	97ba                	add	a5,a5,a4
20403aa8:	439c                	lw	a5,0(a5)
20403aaa:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
20403aae:	fac42783          	lw	a5,-84(s0)
20403ab2:	c78d                	beqz	a5,20403adc <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403ab4:	fac42503          	lw	a0,-84(s0)
20403ab8:	e62ff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403abc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20403ac0:	fa842783          	lw	a5,-88(s0)
20403ac4:	2c07a783          	lw	a5,704(a5)
20403ac8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
20403acc:	fa842783          	lw	a5,-88(s0)
20403ad0:	2b87a783          	lw	a5,696(a5)
20403ad4:	fa442583          	lw	a1,-92(s0)
20403ad8:	455d                	li	a0,23
20403ada:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
20403adc:	0001                	nop
20403ade:	40f6                	lw	ra,92(sp)
20403ae0:	42e6                	lw	t0,88(sp)
20403ae2:	4356                	lw	t1,84(sp)
20403ae4:	43c6                	lw	t2,80(sp)
20403ae6:	4436                	lw	s0,76(sp)
20403ae8:	4526                	lw	a0,72(sp)
20403aea:	4596                	lw	a1,68(sp)
20403aec:	4606                	lw	a2,64(sp)
20403aee:	56f2                	lw	a3,60(sp)
20403af0:	5762                	lw	a4,56(sp)
20403af2:	57d2                	lw	a5,52(sp)
20403af4:	5842                	lw	a6,48(sp)
20403af6:	58b2                	lw	a7,44(sp)
20403af8:	5e22                	lw	t3,40(sp)
20403afa:	5e92                	lw	t4,36(sp)
20403afc:	5f02                	lw	t5,32(sp)
20403afe:	4ff2                	lw	t6,28(sp)
20403b00:	6125                	addi	sp,sp,96
20403b02:	30200073          	mret

20403b06 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20403b06:	711d                	addi	sp,sp,-96
20403b08:	ce86                	sw	ra,92(sp)
20403b0a:	cc96                	sw	t0,88(sp)
20403b0c:	ca9a                	sw	t1,84(sp)
20403b0e:	c89e                	sw	t2,80(sp)
20403b10:	c6a2                	sw	s0,76(sp)
20403b12:	c4aa                	sw	a0,72(sp)
20403b14:	c2ae                	sw	a1,68(sp)
20403b16:	c0b2                	sw	a2,64(sp)
20403b18:	de36                	sw	a3,60(sp)
20403b1a:	dc3a                	sw	a4,56(sp)
20403b1c:	da3e                	sw	a5,52(sp)
20403b1e:	d842                	sw	a6,48(sp)
20403b20:	d646                	sw	a7,44(sp)
20403b22:	d472                	sw	t3,40(sp)
20403b24:	d276                	sw	t4,36(sp)
20403b26:	d07a                	sw	t5,32(sp)
20403b28:	ce7e                	sw	t6,28(sp)
20403b2a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403b2c:	e44ff0ef          	jal	ra,20403170 <__metal_myhart_id>
20403b30:	872a                	mv	a4,a0
20403b32:	070a                	slli	a4,a4,0x2
20403b34:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403b38:	97ba                	add	a5,a5,a4
20403b3a:	439c                	lw	a5,0(a5)
20403b3c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20403b40:	fac42783          	lw	a5,-84(s0)
20403b44:	c78d                	beqz	a5,20403b6e <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403b46:	fac42503          	lw	a0,-84(s0)
20403b4a:	dd0ff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403b4e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20403b52:	fa842783          	lw	a5,-88(s0)
20403b56:	2d87a783          	lw	a5,728(a5)
20403b5a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20403b5e:	fa842783          	lw	a5,-88(s0)
20403b62:	2d07a783          	lw	a5,720(a5)
20403b66:	fa442583          	lw	a1,-92(s0)
20403b6a:	4561                	li	a0,24
20403b6c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20403b6e:	0001                	nop
20403b70:	40f6                	lw	ra,92(sp)
20403b72:	42e6                	lw	t0,88(sp)
20403b74:	4356                	lw	t1,84(sp)
20403b76:	43c6                	lw	t2,80(sp)
20403b78:	4436                	lw	s0,76(sp)
20403b7a:	4526                	lw	a0,72(sp)
20403b7c:	4596                	lw	a1,68(sp)
20403b7e:	4606                	lw	a2,64(sp)
20403b80:	56f2                	lw	a3,60(sp)
20403b82:	5762                	lw	a4,56(sp)
20403b84:	57d2                	lw	a5,52(sp)
20403b86:	5842                	lw	a6,48(sp)
20403b88:	58b2                	lw	a7,44(sp)
20403b8a:	5e22                	lw	t3,40(sp)
20403b8c:	5e92                	lw	t4,36(sp)
20403b8e:	5f02                	lw	t5,32(sp)
20403b90:	4ff2                	lw	t6,28(sp)
20403b92:	6125                	addi	sp,sp,96
20403b94:	30200073          	mret

20403b98 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20403b98:	711d                	addi	sp,sp,-96
20403b9a:	ce86                	sw	ra,92(sp)
20403b9c:	cc96                	sw	t0,88(sp)
20403b9e:	ca9a                	sw	t1,84(sp)
20403ba0:	c89e                	sw	t2,80(sp)
20403ba2:	c6a2                	sw	s0,76(sp)
20403ba4:	c4aa                	sw	a0,72(sp)
20403ba6:	c2ae                	sw	a1,68(sp)
20403ba8:	c0b2                	sw	a2,64(sp)
20403baa:	de36                	sw	a3,60(sp)
20403bac:	dc3a                	sw	a4,56(sp)
20403bae:	da3e                	sw	a5,52(sp)
20403bb0:	d842                	sw	a6,48(sp)
20403bb2:	d646                	sw	a7,44(sp)
20403bb4:	d472                	sw	t3,40(sp)
20403bb6:	d276                	sw	t4,36(sp)
20403bb8:	d07a                	sw	t5,32(sp)
20403bba:	ce7e                	sw	t6,28(sp)
20403bbc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403bbe:	db2ff0ef          	jal	ra,20403170 <__metal_myhart_id>
20403bc2:	872a                	mv	a4,a0
20403bc4:	070a                	slli	a4,a4,0x2
20403bc6:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403bca:	97ba                	add	a5,a5,a4
20403bcc:	439c                	lw	a5,0(a5)
20403bce:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20403bd2:	fac42783          	lw	a5,-84(s0)
20403bd6:	c78d                	beqz	a5,20403c00 <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403bd8:	fac42503          	lw	a0,-84(s0)
20403bdc:	d3eff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403be0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20403be4:	fa842783          	lw	a5,-88(s0)
20403be8:	2f07a783          	lw	a5,752(a5)
20403bec:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20403bf0:	fa842783          	lw	a5,-88(s0)
20403bf4:	2e87a783          	lw	a5,744(a5)
20403bf8:	fa442583          	lw	a1,-92(s0)
20403bfc:	4565                	li	a0,25
20403bfe:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20403c00:	0001                	nop
20403c02:	40f6                	lw	ra,92(sp)
20403c04:	42e6                	lw	t0,88(sp)
20403c06:	4356                	lw	t1,84(sp)
20403c08:	43c6                	lw	t2,80(sp)
20403c0a:	4436                	lw	s0,76(sp)
20403c0c:	4526                	lw	a0,72(sp)
20403c0e:	4596                	lw	a1,68(sp)
20403c10:	4606                	lw	a2,64(sp)
20403c12:	56f2                	lw	a3,60(sp)
20403c14:	5762                	lw	a4,56(sp)
20403c16:	57d2                	lw	a5,52(sp)
20403c18:	5842                	lw	a6,48(sp)
20403c1a:	58b2                	lw	a7,44(sp)
20403c1c:	5e22                	lw	t3,40(sp)
20403c1e:	5e92                	lw	t4,36(sp)
20403c20:	5f02                	lw	t5,32(sp)
20403c22:	4ff2                	lw	t6,28(sp)
20403c24:	6125                	addi	sp,sp,96
20403c26:	30200073          	mret

20403c2a <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
20403c2a:	711d                	addi	sp,sp,-96
20403c2c:	ce86                	sw	ra,92(sp)
20403c2e:	cc96                	sw	t0,88(sp)
20403c30:	ca9a                	sw	t1,84(sp)
20403c32:	c89e                	sw	t2,80(sp)
20403c34:	c6a2                	sw	s0,76(sp)
20403c36:	c4aa                	sw	a0,72(sp)
20403c38:	c2ae                	sw	a1,68(sp)
20403c3a:	c0b2                	sw	a2,64(sp)
20403c3c:	de36                	sw	a3,60(sp)
20403c3e:	dc3a                	sw	a4,56(sp)
20403c40:	da3e                	sw	a5,52(sp)
20403c42:	d842                	sw	a6,48(sp)
20403c44:	d646                	sw	a7,44(sp)
20403c46:	d472                	sw	t3,40(sp)
20403c48:	d276                	sw	t4,36(sp)
20403c4a:	d07a                	sw	t5,32(sp)
20403c4c:	ce7e                	sw	t6,28(sp)
20403c4e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403c50:	d20ff0ef          	jal	ra,20403170 <__metal_myhart_id>
20403c54:	872a                	mv	a4,a0
20403c56:	070a                	slli	a4,a4,0x2
20403c58:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403c5c:	97ba                	add	a5,a5,a4
20403c5e:	439c                	lw	a5,0(a5)
20403c60:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20403c64:	fac42783          	lw	a5,-84(s0)
20403c68:	c78d                	beqz	a5,20403c92 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403c6a:	fac42503          	lw	a0,-84(s0)
20403c6e:	cacff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403c72:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20403c76:	fa842783          	lw	a5,-88(s0)
20403c7a:	3087a783          	lw	a5,776(a5)
20403c7e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403c82:	fa842783          	lw	a5,-88(s0)
20403c86:	3007a783          	lw	a5,768(a5)
20403c8a:	fa442583          	lw	a1,-92(s0)
20403c8e:	4569                	li	a0,26
20403c90:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403c92:	0001                	nop
20403c94:	40f6                	lw	ra,92(sp)
20403c96:	42e6                	lw	t0,88(sp)
20403c98:	4356                	lw	t1,84(sp)
20403c9a:	43c6                	lw	t2,80(sp)
20403c9c:	4436                	lw	s0,76(sp)
20403c9e:	4526                	lw	a0,72(sp)
20403ca0:	4596                	lw	a1,68(sp)
20403ca2:	4606                	lw	a2,64(sp)
20403ca4:	56f2                	lw	a3,60(sp)
20403ca6:	5762                	lw	a4,56(sp)
20403ca8:	57d2                	lw	a5,52(sp)
20403caa:	5842                	lw	a6,48(sp)
20403cac:	58b2                	lw	a7,44(sp)
20403cae:	5e22                	lw	t3,40(sp)
20403cb0:	5e92                	lw	t4,36(sp)
20403cb2:	5f02                	lw	t5,32(sp)
20403cb4:	4ff2                	lw	t6,28(sp)
20403cb6:	6125                	addi	sp,sp,96
20403cb8:	30200073          	mret

20403cbc <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
20403cbc:	711d                	addi	sp,sp,-96
20403cbe:	ce86                	sw	ra,92(sp)
20403cc0:	cc96                	sw	t0,88(sp)
20403cc2:	ca9a                	sw	t1,84(sp)
20403cc4:	c89e                	sw	t2,80(sp)
20403cc6:	c6a2                	sw	s0,76(sp)
20403cc8:	c4aa                	sw	a0,72(sp)
20403cca:	c2ae                	sw	a1,68(sp)
20403ccc:	c0b2                	sw	a2,64(sp)
20403cce:	de36                	sw	a3,60(sp)
20403cd0:	dc3a                	sw	a4,56(sp)
20403cd2:	da3e                	sw	a5,52(sp)
20403cd4:	d842                	sw	a6,48(sp)
20403cd6:	d646                	sw	a7,44(sp)
20403cd8:	d472                	sw	t3,40(sp)
20403cda:	d276                	sw	t4,36(sp)
20403cdc:	d07a                	sw	t5,32(sp)
20403cde:	ce7e                	sw	t6,28(sp)
20403ce0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403ce2:	c8eff0ef          	jal	ra,20403170 <__metal_myhart_id>
20403ce6:	872a                	mv	a4,a0
20403ce8:	070a                	slli	a4,a4,0x2
20403cea:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403cee:	97ba                	add	a5,a5,a4
20403cf0:	439c                	lw	a5,0(a5)
20403cf2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20403cf6:	fac42783          	lw	a5,-84(s0)
20403cfa:	c78d                	beqz	a5,20403d24 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403cfc:	fac42503          	lw	a0,-84(s0)
20403d00:	c1aff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403d04:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403d08:	fa842783          	lw	a5,-88(s0)
20403d0c:	3207a783          	lw	a5,800(a5)
20403d10:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403d14:	fa842783          	lw	a5,-88(s0)
20403d18:	3187a783          	lw	a5,792(a5)
20403d1c:	fa442583          	lw	a1,-92(s0)
20403d20:	456d                	li	a0,27
20403d22:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20403d24:	0001                	nop
20403d26:	40f6                	lw	ra,92(sp)
20403d28:	42e6                	lw	t0,88(sp)
20403d2a:	4356                	lw	t1,84(sp)
20403d2c:	43c6                	lw	t2,80(sp)
20403d2e:	4436                	lw	s0,76(sp)
20403d30:	4526                	lw	a0,72(sp)
20403d32:	4596                	lw	a1,68(sp)
20403d34:	4606                	lw	a2,64(sp)
20403d36:	56f2                	lw	a3,60(sp)
20403d38:	5762                	lw	a4,56(sp)
20403d3a:	57d2                	lw	a5,52(sp)
20403d3c:	5842                	lw	a6,48(sp)
20403d3e:	58b2                	lw	a7,44(sp)
20403d40:	5e22                	lw	t3,40(sp)
20403d42:	5e92                	lw	t4,36(sp)
20403d44:	5f02                	lw	t5,32(sp)
20403d46:	4ff2                	lw	t6,28(sp)
20403d48:	6125                	addi	sp,sp,96
20403d4a:	30200073          	mret

20403d4e <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
20403d4e:	711d                	addi	sp,sp,-96
20403d50:	ce86                	sw	ra,92(sp)
20403d52:	cc96                	sw	t0,88(sp)
20403d54:	ca9a                	sw	t1,84(sp)
20403d56:	c89e                	sw	t2,80(sp)
20403d58:	c6a2                	sw	s0,76(sp)
20403d5a:	c4aa                	sw	a0,72(sp)
20403d5c:	c2ae                	sw	a1,68(sp)
20403d5e:	c0b2                	sw	a2,64(sp)
20403d60:	de36                	sw	a3,60(sp)
20403d62:	dc3a                	sw	a4,56(sp)
20403d64:	da3e                	sw	a5,52(sp)
20403d66:	d842                	sw	a6,48(sp)
20403d68:	d646                	sw	a7,44(sp)
20403d6a:	d472                	sw	t3,40(sp)
20403d6c:	d276                	sw	t4,36(sp)
20403d6e:	d07a                	sw	t5,32(sp)
20403d70:	ce7e                	sw	t6,28(sp)
20403d72:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403d74:	bfcff0ef          	jal	ra,20403170 <__metal_myhart_id>
20403d78:	872a                	mv	a4,a0
20403d7a:	070a                	slli	a4,a4,0x2
20403d7c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403d80:	97ba                	add	a5,a5,a4
20403d82:	439c                	lw	a5,0(a5)
20403d84:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403d88:	fac42783          	lw	a5,-84(s0)
20403d8c:	c78d                	beqz	a5,20403db6 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403d8e:	fac42503          	lw	a0,-84(s0)
20403d92:	b88ff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403d96:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20403d9a:	fa842783          	lw	a5,-88(s0)
20403d9e:	3387a783          	lw	a5,824(a5)
20403da2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20403da6:	fa842783          	lw	a5,-88(s0)
20403daa:	3307a783          	lw	a5,816(a5)
20403dae:	fa442583          	lw	a1,-92(s0)
20403db2:	4571                	li	a0,28
20403db4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20403db6:	0001                	nop
20403db8:	40f6                	lw	ra,92(sp)
20403dba:	42e6                	lw	t0,88(sp)
20403dbc:	4356                	lw	t1,84(sp)
20403dbe:	43c6                	lw	t2,80(sp)
20403dc0:	4436                	lw	s0,76(sp)
20403dc2:	4526                	lw	a0,72(sp)
20403dc4:	4596                	lw	a1,68(sp)
20403dc6:	4606                	lw	a2,64(sp)
20403dc8:	56f2                	lw	a3,60(sp)
20403dca:	5762                	lw	a4,56(sp)
20403dcc:	57d2                	lw	a5,52(sp)
20403dce:	5842                	lw	a6,48(sp)
20403dd0:	58b2                	lw	a7,44(sp)
20403dd2:	5e22                	lw	t3,40(sp)
20403dd4:	5e92                	lw	t4,36(sp)
20403dd6:	5f02                	lw	t5,32(sp)
20403dd8:	4ff2                	lw	t6,28(sp)
20403dda:	6125                	addi	sp,sp,96
20403ddc:	30200073          	mret

20403de0 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20403de0:	711d                	addi	sp,sp,-96
20403de2:	ce86                	sw	ra,92(sp)
20403de4:	cc96                	sw	t0,88(sp)
20403de6:	ca9a                	sw	t1,84(sp)
20403de8:	c89e                	sw	t2,80(sp)
20403dea:	c6a2                	sw	s0,76(sp)
20403dec:	c4aa                	sw	a0,72(sp)
20403dee:	c2ae                	sw	a1,68(sp)
20403df0:	c0b2                	sw	a2,64(sp)
20403df2:	de36                	sw	a3,60(sp)
20403df4:	dc3a                	sw	a4,56(sp)
20403df6:	da3e                	sw	a5,52(sp)
20403df8:	d842                	sw	a6,48(sp)
20403dfa:	d646                	sw	a7,44(sp)
20403dfc:	d472                	sw	t3,40(sp)
20403dfe:	d276                	sw	t4,36(sp)
20403e00:	d07a                	sw	t5,32(sp)
20403e02:	ce7e                	sw	t6,28(sp)
20403e04:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403e06:	b6aff0ef          	jal	ra,20403170 <__metal_myhart_id>
20403e0a:	872a                	mv	a4,a0
20403e0c:	070a                	slli	a4,a4,0x2
20403e0e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403e12:	97ba                	add	a5,a5,a4
20403e14:	439c                	lw	a5,0(a5)
20403e16:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20403e1a:	fac42783          	lw	a5,-84(s0)
20403e1e:	c78d                	beqz	a5,20403e48 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403e20:	fac42503          	lw	a0,-84(s0)
20403e24:	af6ff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403e28:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
20403e2c:	fa842783          	lw	a5,-88(s0)
20403e30:	3507a783          	lw	a5,848(a5)
20403e34:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20403e38:	fa842783          	lw	a5,-88(s0)
20403e3c:	3487a783          	lw	a5,840(a5)
20403e40:	fa442583          	lw	a1,-92(s0)
20403e44:	4575                	li	a0,29
20403e46:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20403e48:	0001                	nop
20403e4a:	40f6                	lw	ra,92(sp)
20403e4c:	42e6                	lw	t0,88(sp)
20403e4e:	4356                	lw	t1,84(sp)
20403e50:	43c6                	lw	t2,80(sp)
20403e52:	4436                	lw	s0,76(sp)
20403e54:	4526                	lw	a0,72(sp)
20403e56:	4596                	lw	a1,68(sp)
20403e58:	4606                	lw	a2,64(sp)
20403e5a:	56f2                	lw	a3,60(sp)
20403e5c:	5762                	lw	a4,56(sp)
20403e5e:	57d2                	lw	a5,52(sp)
20403e60:	5842                	lw	a6,48(sp)
20403e62:	58b2                	lw	a7,44(sp)
20403e64:	5e22                	lw	t3,40(sp)
20403e66:	5e92                	lw	t4,36(sp)
20403e68:	5f02                	lw	t5,32(sp)
20403e6a:	4ff2                	lw	t6,28(sp)
20403e6c:	6125                	addi	sp,sp,96
20403e6e:	30200073          	mret

20403e72 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20403e72:	711d                	addi	sp,sp,-96
20403e74:	ce86                	sw	ra,92(sp)
20403e76:	cc96                	sw	t0,88(sp)
20403e78:	ca9a                	sw	t1,84(sp)
20403e7a:	c89e                	sw	t2,80(sp)
20403e7c:	c6a2                	sw	s0,76(sp)
20403e7e:	c4aa                	sw	a0,72(sp)
20403e80:	c2ae                	sw	a1,68(sp)
20403e82:	c0b2                	sw	a2,64(sp)
20403e84:	de36                	sw	a3,60(sp)
20403e86:	dc3a                	sw	a4,56(sp)
20403e88:	da3e                	sw	a5,52(sp)
20403e8a:	d842                	sw	a6,48(sp)
20403e8c:	d646                	sw	a7,44(sp)
20403e8e:	d472                	sw	t3,40(sp)
20403e90:	d276                	sw	t4,36(sp)
20403e92:	d07a                	sw	t5,32(sp)
20403e94:	ce7e                	sw	t6,28(sp)
20403e96:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403e98:	ad8ff0ef          	jal	ra,20403170 <__metal_myhart_id>
20403e9c:	872a                	mv	a4,a0
20403e9e:	070a                	slli	a4,a4,0x2
20403ea0:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403ea4:	97ba                	add	a5,a5,a4
20403ea6:	439c                	lw	a5,0(a5)
20403ea8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
20403eac:	fac42783          	lw	a5,-84(s0)
20403eb0:	c78d                	beqz	a5,20403eda <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403eb2:	fac42503          	lw	a0,-84(s0)
20403eb6:	a64ff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403eba:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
20403ebe:	fa842783          	lw	a5,-88(s0)
20403ec2:	3687a783          	lw	a5,872(a5)
20403ec6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20403eca:	fa842783          	lw	a5,-88(s0)
20403ece:	3607a783          	lw	a5,864(a5)
20403ed2:	fa442583          	lw	a1,-92(s0)
20403ed6:	4579                	li	a0,30
20403ed8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20403eda:	0001                	nop
20403edc:	40f6                	lw	ra,92(sp)
20403ede:	42e6                	lw	t0,88(sp)
20403ee0:	4356                	lw	t1,84(sp)
20403ee2:	43c6                	lw	t2,80(sp)
20403ee4:	4436                	lw	s0,76(sp)
20403ee6:	4526                	lw	a0,72(sp)
20403ee8:	4596                	lw	a1,68(sp)
20403eea:	4606                	lw	a2,64(sp)
20403eec:	56f2                	lw	a3,60(sp)
20403eee:	5762                	lw	a4,56(sp)
20403ef0:	57d2                	lw	a5,52(sp)
20403ef2:	5842                	lw	a6,48(sp)
20403ef4:	58b2                	lw	a7,44(sp)
20403ef6:	5e22                	lw	t3,40(sp)
20403ef8:	5e92                	lw	t4,36(sp)
20403efa:	5f02                	lw	t5,32(sp)
20403efc:	4ff2                	lw	t6,28(sp)
20403efe:	6125                	addi	sp,sp,96
20403f00:	30200073          	mret

20403f04 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403f04:	711d                	addi	sp,sp,-96
20403f06:	ce86                	sw	ra,92(sp)
20403f08:	cc96                	sw	t0,88(sp)
20403f0a:	ca9a                	sw	t1,84(sp)
20403f0c:	c89e                	sw	t2,80(sp)
20403f0e:	c6a2                	sw	s0,76(sp)
20403f10:	c4aa                	sw	a0,72(sp)
20403f12:	c2ae                	sw	a1,68(sp)
20403f14:	c0b2                	sw	a2,64(sp)
20403f16:	de36                	sw	a3,60(sp)
20403f18:	dc3a                	sw	a4,56(sp)
20403f1a:	da3e                	sw	a5,52(sp)
20403f1c:	d842                	sw	a6,48(sp)
20403f1e:	d646                	sw	a7,44(sp)
20403f20:	d472                	sw	t3,40(sp)
20403f22:	d276                	sw	t4,36(sp)
20403f24:	d07a                	sw	t5,32(sp)
20403f26:	ce7e                	sw	t6,28(sp)
20403f28:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403f2a:	a46ff0ef          	jal	ra,20403170 <__metal_myhart_id>
20403f2e:	872a                	mv	a4,a0
20403f30:	070a                	slli	a4,a4,0x2
20403f32:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403f36:	97ba                	add	a5,a5,a4
20403f38:	439c                	lw	a5,0(a5)
20403f3a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
20403f3e:	fac42783          	lw	a5,-84(s0)
20403f42:	c78d                	beqz	a5,20403f6c <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403f44:	fac42503          	lw	a0,-84(s0)
20403f48:	9d2ff0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20403f4c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
20403f50:	fa842783          	lw	a5,-88(s0)
20403f54:	3807a783          	lw	a5,896(a5)
20403f58:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
20403f5c:	fa842783          	lw	a5,-88(s0)
20403f60:	3787a783          	lw	a5,888(a5)
20403f64:	fa442583          	lw	a1,-92(s0)
20403f68:	457d                	li	a0,31
20403f6a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
20403f6c:	0001                	nop
20403f6e:	40f6                	lw	ra,92(sp)
20403f70:	42e6                	lw	t0,88(sp)
20403f72:	4356                	lw	t1,84(sp)
20403f74:	43c6                	lw	t2,80(sp)
20403f76:	4436                	lw	s0,76(sp)
20403f78:	4526                	lw	a0,72(sp)
20403f7a:	4596                	lw	a1,68(sp)
20403f7c:	4606                	lw	a2,64(sp)
20403f7e:	56f2                	lw	a3,60(sp)
20403f80:	5762                	lw	a4,56(sp)
20403f82:	57d2                	lw	a5,52(sp)
20403f84:	5842                	lw	a6,48(sp)
20403f86:	58b2                	lw	a7,44(sp)
20403f88:	5e22                	lw	t3,40(sp)
20403f8a:	5e92                	lw	t4,36(sp)
20403f8c:	5f02                	lw	t5,32(sp)
20403f8e:	4ff2                	lw	t6,28(sp)
20403f90:	6125                	addi	sp,sp,96
20403f92:	30200073          	mret

20403f96 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403f96:	1101                	addi	sp,sp,-32
20403f98:	ce22                	sw	s0,28(sp)
20403f9a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20403f9c:	305027f3          	csrr	a5,mtvec
20403fa0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403fa4:	fec42783          	lw	a5,-20(s0)
20403fa8:	03f7f793          	andi	a5,a5,63
20403fac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
20403fb0:	fec42703          	lw	a4,-20(s0)
20403fb4:	4789                	li	a5,2
20403fb6:	00f70d63          	beq	a4,a5,20403fd0 <__metal_controller_interrupt_vector_mode+0x3a>
20403fba:	fec42703          	lw	a4,-20(s0)
20403fbe:	478d                	li	a5,3
20403fc0:	00f70a63          	beq	a4,a5,20403fd4 <__metal_controller_interrupt_vector_mode+0x3e>
20403fc4:	fec42703          	lw	a4,-20(s0)
20403fc8:	4785                	li	a5,1
20403fca:	00f70763          	beq	a4,a5,20403fd8 <__metal_controller_interrupt_vector_mode+0x42>
20403fce:	a039                	j	20403fdc <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
20403fd0:	478d                	li	a5,3
20403fd2:	a031                	j	20403fde <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403fd4:	4791                	li	a5,4
20403fd6:	a021                	j	20403fde <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403fd8:	4785                	li	a5,1
20403fda:	a011                	j	20403fde <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
20403fdc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
20403fde:	853e                	mv	a0,a5
20403fe0:	4472                	lw	s0,28(sp)
20403fe2:	6105                	addi	sp,sp,32
20403fe4:	8082                	ret

20403fe6 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403fe6:	7179                	addi	sp,sp,-48
20403fe8:	d622                	sw	s0,44(sp)
20403fea:	1800                	addi	s0,sp,48
20403fec:	fca42e23          	sw	a0,-36(s0)
20403ff0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403ff4:	305027f3          	csrr	a5,mtvec
20403ff8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
20403ffc:	fec42783          	lw	a5,-20(s0)
20404000:	fc07f793          	andi	a5,a5,-64
20404004:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20404008:	fd842783          	lw	a5,-40(s0)
2040400c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20404010:	fdc42703          	lw	a4,-36(s0)
20404014:	4791                	li	a5,4
20404016:	06e7e063          	bltu	a5,a4,20404076 <__metal_controller_interrupt_vector+0x90>
2040401a:	fdc42783          	lw	a5,-36(s0)
2040401e:	00279713          	slli	a4,a5,0x2
20404022:	204067b7          	lui	a5,0x20406
20404026:	16478793          	addi	a5,a5,356 # 20406164 <__metal_driver_vtable_riscv_clint0+0x4c>
2040402a:	97ba                	add	a5,a5,a4
2040402c:	439c                	lw	a5,0(a5)
2040402e:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20404030:	fe842783          	lw	a5,-24(s0)
20404034:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20404038:	fec42783          	lw	a5,-20(s0)
2040403c:	0027e793          	ori	a5,a5,2
20404040:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20404044:	a80d                	j	20404076 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20404046:	fe842783          	lw	a5,-24(s0)
2040404a:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
2040404e:	fec42783          	lw	a5,-20(s0)
20404052:	0037e793          	ori	a5,a5,3
20404056:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
2040405a:	a831                	j	20404076 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
2040405c:	fe842783          	lw	a5,-24(s0)
20404060:	0017e793          	ori	a5,a5,1
20404064:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20404068:	a039                	j	20404076 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
2040406a:	fe842783          	lw	a5,-24(s0)
2040406e:	9bf1                	andi	a5,a5,-4
20404070:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20404074:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20404076:	0001                	nop
20404078:	5432                	lw	s0,44(sp)
2040407a:	6145                	addi	sp,sp,48
2040407c:	8082                	ret

2040407e <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
2040407e:	1101                	addi	sp,sp,-32
20404080:	ce22                	sw	s0,28(sp)
20404082:	1000                	addi	s0,sp,32
20404084:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20404088:	fec42783          	lw	a5,-20(s0)
2040408c:	17f5                	addi	a5,a5,-3
2040408e:	4771                	li	a4,28
20404090:	00f76d63          	bltu	a4,a5,204040aa <__metal_valid_interrupt_id+0x2c>
20404094:	00279713          	slli	a4,a5,0x2
20404098:	204067b7          	lui	a5,0x20406
2040409c:	17878793          	addi	a5,a5,376 # 20406178 <__metal_driver_vtable_riscv_clint0+0x60>
204040a0:	97ba                	add	a5,a5,a4
204040a2:	439c                	lw	a5,0(a5)
204040a4:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
204040a6:	4785                	li	a5,1
204040a8:	a019                	j	204040ae <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
204040aa:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
204040ac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
204040ae:	853e                	mv	a0,a5
204040b0:	4472                	lw	s0,28(sp)
204040b2:	6105                	addi	sp,sp,32
204040b4:	8082                	ret

204040b6 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
204040b6:	7179                	addi	sp,sp,-48
204040b8:	d606                	sw	ra,44(sp)
204040ba:	d422                	sw	s0,40(sp)
204040bc:	1800                	addi	s0,sp,48
204040be:	fca42e23          	sw	a0,-36(s0)
204040c2:	fcb42c23          	sw	a1,-40(s0)
204040c6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
204040ca:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
204040ce:	fdc42783          	lw	a5,-36(s0)
204040d2:	e399                	bnez	a5,204040d8 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
204040d4:	57fd                	li	a5,-1
204040d6:	a849                	j	20404168 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
204040d8:	fd842703          	lw	a4,-40(s0)
204040dc:	47fd                	li	a5,31
204040de:	08e7e063          	bltu	a5,a4,2040415e <__metal_local_interrupt_enable+0xa8>
204040e2:	fd842783          	lw	a5,-40(s0)
204040e6:	00279713          	slli	a4,a5,0x2
204040ea:	204067b7          	lui	a5,0x20406
204040ee:	1ec78793          	addi	a5,a5,492 # 204061ec <__metal_driver_vtable_riscv_clint0+0xd4>
204040f2:	97ba                	add	a5,a5,a4
204040f4:	439c                	lw	a5,0(a5)
204040f6:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
204040f8:	fd442783          	lw	a5,-44(s0)
204040fc:	c781                	beqz	a5,20404104 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
204040fe:	88cff0ef          	jal	ra,2040318a <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20404102:	a08d                	j	20404164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20404104:	89eff0ef          	jal	ra,204031a2 <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20404108:	a8b1                	j	20404164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
2040410a:	fd442783          	lw	a5,-44(s0)
2040410e:	c781                	beqz	a5,20404116 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20404110:	8aaff0ef          	jal	ra,204031ba <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20404114:	a881                	j	20404164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20404116:	8bcff0ef          	jal	ra,204031d2 <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
2040411a:	a0a9                	j	20404164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040411c:	fd442783          	lw	a5,-44(s0)
20404120:	c781                	beqz	a5,20404128 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20404122:	8c8ff0ef          	jal	ra,204031ea <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20404126:	a83d                	j	20404164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20404128:	8dcff0ef          	jal	ra,20403204 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
2040412c:	a825                	j	20404164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
2040412e:	fd442783          	lw	a5,-44(s0)
20404132:	c781                	beqz	a5,2040413a <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20404134:	8eaff0ef          	jal	ra,2040321e <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20404138:	a035                	j	20404164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
2040413a:	900ff0ef          	jal	ra,2040323a <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
2040413e:	a01d                	j	20404164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20404140:	fd442783          	lw	a5,-44(s0)
20404144:	c799                	beqz	a5,20404152 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20404146:	fd842783          	lw	a5,-40(s0)
2040414a:	853e                	mv	a0,a5
2040414c:	90aff0ef          	jal	ra,20403256 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20404150:	a811                	j	20404164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20404152:	fd842783          	lw	a5,-40(s0)
20404156:	853e                	mv	a0,a5
20404158:	92aff0ef          	jal	ra,20403282 <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
2040415c:	a021                	j	20404164 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
2040415e:	57fd                	li	a5,-1
20404160:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20404164:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20404168:	853e                	mv	a0,a5
2040416a:	50b2                	lw	ra,44(sp)
2040416c:	5422                	lw	s0,40(sp)
2040416e:	6145                	addi	sp,sp,48
20404170:	8082                	ret

20404172 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20404172:	7179                	addi	sp,sp,-48
20404174:	d622                	sw	s0,44(sp)
20404176:	1800                	addi	s0,sp,48
20404178:	fca42e23          	sw	a0,-36(s0)
2040417c:	fcb42c23          	sw	a1,-40(s0)
20404180:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20404184:	fdc42783          	lw	a5,-36(s0)
20404188:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040418c:	fd842703          	lw	a4,-40(s0)
20404190:	47ad                	li	a5,11
20404192:	02e7c263          	blt	a5,a4,204041b6 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20404196:	fd442783          	lw	a5,-44(s0)
2040419a:	cf91                	beqz	a5,204041b6 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040419c:	fec42703          	lw	a4,-20(s0)
204041a0:	fd842783          	lw	a5,-40(s0)
204041a4:	0e078793          	addi	a5,a5,224
204041a8:	078a                	slli	a5,a5,0x2
204041aa:	97ba                	add	a5,a5,a4
204041ac:	fd442703          	lw	a4,-44(s0)
204041b0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
204041b2:	4781                	li	a5,0
204041b4:	a011                	j	204041b8 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
204041b6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
204041b8:	853e                	mv	a0,a5
204041ba:	5432                	lw	s0,44(sp)
204041bc:	6145                	addi	sp,sp,48
204041be:	8082                	ret

204041c0 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
204041c0:	7139                	addi	sp,sp,-64
204041c2:	de06                	sw	ra,60(sp)
204041c4:	dc22                	sw	s0,56(sp)
204041c6:	0080                	addi	s0,sp,64
204041c8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204041cc:	fcc42783          	lw	a5,-52(s0)
204041d0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
204041d4:	fe442783          	lw	a5,-28(s0)
204041d8:	43dc                	lw	a5,4(a5)
204041da:	10079e63          	bnez	a5,204042f6 <__metal_driver_riscv_cpu_controller_interrupt_init+0x136>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
204041de:	57fd                	li	a5,-1
204041e0:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
204041e4:	57fd                	li	a5,-1
204041e6:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
204041ea:	301027f3          	csrr	a5,misa
204041ee:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
204041f2:	fe042703          	lw	a4,-32(s0)
204041f6:	6789                	lui	a5,0x2
204041f8:	8ff9                	and	a5,a5,a4
204041fa:	e799                	bnez	a5,20404208 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
204041fc:	fe042703          	lw	a4,-32(s0)
20404200:	000407b7          	lui	a5,0x40
20404204:	8ff9                	and	a5,a5,a4
20404206:	c799                	beqz	a5,20404214 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20404208:	57fd                	li	a5,-1
2040420a:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040420e:	57fd                	li	a5,-1
20404210:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20404214:	fe042703          	lw	a4,-32(s0)
20404218:	000407b7          	lui	a5,0x40
2040421c:	8ff9                	and	a5,a5,a4
2040421e:	c781                	beqz	a5,20404226 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20404220:	57fd                	li	a5,-1
20404222:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20404226:	fe042623          	sw	zero,-20(s0)
2040422a:	a0b9                	j	20404278 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
2040422c:	fe442683          	lw	a3,-28(s0)
20404230:	fec42703          	lw	a4,-20(s0)
20404234:	87ba                	mv	a5,a4
20404236:	0786                	slli	a5,a5,0x1
20404238:	97ba                	add	a5,a5,a4
2040423a:	078e                	slli	a5,a5,0x3
2040423c:	97b6                	add	a5,a5,a3
2040423e:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20404242:	fe442683          	lw	a3,-28(s0)
20404246:	fec42703          	lw	a4,-20(s0)
2040424a:	87ba                	mv	a5,a4
2040424c:	0786                	slli	a5,a5,0x1
2040424e:	97ba                	add	a5,a5,a4
20404250:	078e                	slli	a5,a5,0x3
20404252:	97b6                	add	a5,a5,a3
20404254:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20404258:	fe442683          	lw	a3,-28(s0)
2040425c:	fec42703          	lw	a4,-20(s0)
20404260:	87ba                	mv	a5,a4
20404262:	0786                	slli	a5,a5,0x1
20404264:	97ba                	add	a5,a5,a4
20404266:	078e                	slli	a5,a5,0x3
20404268:	97b6                	add	a5,a5,a3
2040426a:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
2040426e:	fec42783          	lw	a5,-20(s0)
20404272:	0785                	addi	a5,a5,1
20404274:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20404278:	fec42703          	lw	a4,-20(s0)
2040427c:	47fd                	li	a5,31
2040427e:	fae7d7e3          	bge	a5,a4,2040422c <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20404282:	fe042423          	sw	zero,-24(s0)
20404286:	a01d                	j	204042ac <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20404288:	fe442703          	lw	a4,-28(s0)
2040428c:	fe842783          	lw	a5,-24(s0)
20404290:	0e078793          	addi	a5,a5,224
20404294:	078a                	slli	a5,a5,0x2
20404296:	97ba                	add	a5,a5,a4
20404298:	20403737          	lui	a4,0x20403
2040429c:	2ae70713          	addi	a4,a4,686 # 204032ae <__metal_default_exception_handler>
204042a0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
204042a2:	fe842783          	lw	a5,-24(s0)
204042a6:	0785                	addi	a5,a5,1
204042a8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
204042ac:	fe842703          	lw	a4,-24(s0)
204042b0:	47ad                	li	a5,11
204042b2:	fce7dbe3          	bge	a5,a4,20404288 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
204042b6:	204037b7          	lui	a5,0x20403
204042ba:	50078593          	addi	a1,a5,1280 # 20403500 <__metal_exception_handler>
204042be:	4501                	li	a0,0
204042c0:	d27ff0ef          	jal	ra,20403fe6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
204042c4:	301027f3          	csrr	a5,misa
204042c8:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
204042cc:	fdc42703          	lw	a4,-36(s0)
204042d0:	67c1                	lui	a5,0x10
204042d2:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
204042d6:	8ff9                	and	a5,a5,a4
204042d8:	cb99                	beqz	a5,204042ee <__metal_driver_riscv_cpu_controller_interrupt_init+0x12e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
204042da:	300027f3          	csrr	a5,mstatus
204042de:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
204042e2:	fdc42703          	lw	a4,-36(s0)
204042e6:	6789                	lui	a5,0x2
204042e8:	8fd9                	or	a5,a5,a4
204042ea:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
204042ee:	fe442783          	lw	a5,-28(s0)
204042f2:	4705                	li	a4,1
204042f4:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
204042f6:	0001                	nop
204042f8:	50f2                	lw	ra,60(sp)
204042fa:	5462                	lw	s0,56(sp)
204042fc:	6121                	addi	sp,sp,64
204042fe:	8082                	ret

20404300 <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20404300:	7179                	addi	sp,sp,-48
20404302:	d606                	sw	ra,44(sp)
20404304:	d422                	sw	s0,40(sp)
20404306:	1800                	addi	s0,sp,48
20404308:	fca42e23          	sw	a0,-36(s0)
2040430c:	fcb42c23          	sw	a1,-40(s0)
20404310:	fcc42a23          	sw	a2,-44(s0)
20404314:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20404318:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040431c:	fdc42783          	lw	a5,-36(s0)
20404320:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20404324:	fd842503          	lw	a0,-40(s0)
20404328:	d57ff0ef          	jal	ra,2040407e <__metal_valid_interrupt_id>
2040432c:	87aa                	mv	a5,a0
2040432e:	e399                	bnez	a5,20404334 <__metal_driver_riscv_cpu_controller_interrupt_register+0x34>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
20404330:	57d5                	li	a5,-11
20404332:	aa11                	j	20404446 <__metal_driver_riscv_cpu_controller_interrupt_register+0x146>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20404334:	fd442783          	lw	a5,-44(s0)
20404338:	cf85                	beqz	a5,20404370 <__metal_driver_riscv_cpu_controller_interrupt_register+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
2040433a:	fe842683          	lw	a3,-24(s0)
2040433e:	fd842703          	lw	a4,-40(s0)
20404342:	87ba                	mv	a5,a4
20404344:	0786                	slli	a5,a5,0x1
20404346:	97ba                	add	a5,a5,a4
20404348:	078e                	slli	a5,a5,0x3
2040434a:	97b6                	add	a5,a5,a3
2040434c:	fd442703          	lw	a4,-44(s0)
20404350:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20404354:	fe842683          	lw	a3,-24(s0)
20404358:	fd842703          	lw	a4,-40(s0)
2040435c:	87ba                	mv	a5,a4
2040435e:	0786                	slli	a5,a5,0x1
20404360:	97ba                	add	a5,a5,a4
20404362:	078e                	slli	a5,a5,0x3
20404364:	97b6                	add	a5,a5,a3
20404366:	fd042703          	lw	a4,-48(s0)
2040436a:	08e7ac23          	sw	a4,152(a5)
2040436e:	a8d1                	j	20404442 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
20404370:	fd842783          	lw	a5,-40(s0)
20404374:	17f5                	addi	a5,a5,-3
20404376:	4771                	li	a4,28
20404378:	0cf76263          	bltu	a4,a5,2040443c <__metal_driver_riscv_cpu_controller_interrupt_register+0x13c>
2040437c:	00279713          	slli	a4,a5,0x2
20404380:	204067b7          	lui	a5,0x20406
20404384:	26c78793          	addi	a5,a5,620 # 2040626c <__metal_driver_vtable_riscv_clint0+0x154>
20404388:	97ba                	add	a5,a5,a4
2040438a:	439c                	lw	a5,0(a5)
2040438c:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
2040438e:	fe842683          	lw	a3,-24(s0)
20404392:	fd842703          	lw	a4,-40(s0)
20404396:	87ba                	mv	a5,a4
20404398:	0786                	slli	a5,a5,0x1
2040439a:	97ba                	add	a5,a5,a4
2040439c:	078e                	slli	a5,a5,0x3
2040439e:	97b6                	add	a5,a5,a3
204043a0:	20403737          	lui	a4,0x20403
204043a4:	39a70713          	addi	a4,a4,922 # 2040339a <__metal_default_sw_handler>
204043a8:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
204043ac:	fe842683          	lw	a3,-24(s0)
204043b0:	fd842703          	lw	a4,-40(s0)
204043b4:	87ba                	mv	a5,a4
204043b6:	0786                	slli	a5,a5,0x1
204043b8:	97ba                	add	a5,a5,a4
204043ba:	078e                	slli	a5,a5,0x3
204043bc:	97b6                	add	a5,a5,a3
204043be:	fd042703          	lw	a4,-48(s0)
204043c2:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
204043c6:	a8b5                	j	20404442 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
204043c8:	fe842683          	lw	a3,-24(s0)
204043cc:	fd842703          	lw	a4,-40(s0)
204043d0:	87ba                	mv	a5,a4
204043d2:	0786                	slli	a5,a5,0x1
204043d4:	97ba                	add	a5,a5,a4
204043d6:	078e                	slli	a5,a5,0x3
204043d8:	97b6                	add	a5,a5,a3
204043da:	20403737          	lui	a4,0x20403
204043de:	48c70713          	addi	a4,a4,1164 # 2040348c <__metal_default_timer_handler>
204043e2:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
204043e6:	fe842683          	lw	a3,-24(s0)
204043ea:	fd842703          	lw	a4,-40(s0)
204043ee:	87ba                	mv	a5,a4
204043f0:	0786                	slli	a5,a5,0x1
204043f2:	97ba                	add	a5,a5,a4
204043f4:	078e                	slli	a5,a5,0x3
204043f6:	97b6                	add	a5,a5,a3
204043f8:	fd042703          	lw	a4,-48(s0)
204043fc:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20404400:	a089                	j	20404442 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20404402:	fe842683          	lw	a3,-24(s0)
20404406:	fd842703          	lw	a4,-40(s0)
2040440a:	87ba                	mv	a5,a4
2040440c:	0786                	slli	a5,a5,0x1
2040440e:	97ba                	add	a5,a5,a4
20404410:	078e                	slli	a5,a5,0x3
20404412:	97b6                	add	a5,a5,a3
20404414:	20403737          	lui	a4,0x20403
20404418:	2c670713          	addi	a4,a4,710 # 204032c6 <__metal_default_interrupt_handler>
2040441c:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20404420:	fe842683          	lw	a3,-24(s0)
20404424:	fd842703          	lw	a4,-40(s0)
20404428:	87ba                	mv	a5,a4
2040442a:	0786                	slli	a5,a5,0x1
2040442c:	97ba                	add	a5,a5,a4
2040442e:	078e                	slli	a5,a5,0x3
20404430:	97b6                	add	a5,a5,a3
20404432:	fd042703          	lw	a4,-48(s0)
20404436:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
2040443a:	a021                	j	20404442 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
2040443c:	57d1                	li	a5,-12
2040443e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
20404442:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20404446:	853e                	mv	a0,a5
20404448:	50b2                	lw	ra,44(sp)
2040444a:	5422                	lw	s0,40(sp)
2040444c:	6145                	addi	sp,sp,48
2040444e:	8082                	ret

20404450 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20404450:	1101                	addi	sp,sp,-32
20404452:	ce06                	sw	ra,28(sp)
20404454:	cc22                	sw	s0,24(sp)
20404456:	1000                	addi	s0,sp,32
20404458:	fea42623          	sw	a0,-20(s0)
2040445c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20404460:	fe842783          	lw	a5,-24(s0)
20404464:	4605                	li	a2,1
20404466:	85be                	mv	a1,a5
20404468:	fec42503          	lw	a0,-20(s0)
2040446c:	c4bff0ef          	jal	ra,204040b6 <__metal_local_interrupt_enable>
20404470:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
20404472:	853e                	mv	a0,a5
20404474:	40f2                	lw	ra,28(sp)
20404476:	4462                	lw	s0,24(sp)
20404478:	6105                	addi	sp,sp,32
2040447a:	8082                	ret

2040447c <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
2040447c:	1101                	addi	sp,sp,-32
2040447e:	ce06                	sw	ra,28(sp)
20404480:	cc22                	sw	s0,24(sp)
20404482:	1000                	addi	s0,sp,32
20404484:	fea42623          	sw	a0,-20(s0)
20404488:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
2040448c:	fe842783          	lw	a5,-24(s0)
20404490:	4601                	li	a2,0
20404492:	85be                	mv	a1,a5
20404494:	fec42503          	lw	a0,-20(s0)
20404498:	c1fff0ef          	jal	ra,204040b6 <__metal_local_interrupt_enable>
2040449c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
2040449e:	853e                	mv	a0,a5
204044a0:	40f2                	lw	ra,28(sp)
204044a2:	4462                	lw	s0,24(sp)
204044a4:	6105                	addi	sp,sp,32
204044a6:	8082                	ret

204044a8 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
204044a8:	1101                	addi	sp,sp,-32
204044aa:	ce06                	sw	ra,28(sp)
204044ac:	cc22                	sw	s0,24(sp)
204044ae:	1000                	addi	s0,sp,32
204044b0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
204044b4:	ae3ff0ef          	jal	ra,20403f96 <__metal_controller_interrupt_vector_mode>
204044b8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
204044ba:	853e                	mv	a0,a5
204044bc:	40f2                	lw	ra,28(sp)
204044be:	4462                	lw	s0,24(sp)
204044c0:	6105                	addi	sp,sp,32
204044c2:	8082                	ret

204044c4 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
204044c4:	7179                	addi	sp,sp,-48
204044c6:	d606                	sw	ra,44(sp)
204044c8:	d422                	sw	s0,40(sp)
204044ca:	1800                	addi	s0,sp,48
204044cc:	fca42e23          	sw	a0,-36(s0)
204044d0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204044d4:	fdc42783          	lw	a5,-36(s0)
204044d8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
204044dc:	fd842783          	lw	a5,-40(s0)
204044e0:	eb99                	bnez	a5,204044f6 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
204044e2:	204037b7          	lui	a5,0x20403
204044e6:	50078593          	addi	a1,a5,1280 # 20403500 <__metal_exception_handler>
204044ea:	fd842503          	lw	a0,-40(s0)
204044ee:	af9ff0ef          	jal	ra,20403fe6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
204044f2:	4781                	li	a5,0
204044f4:	a00d                	j	20404516 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
204044f6:	fd842703          	lw	a4,-40(s0)
204044fa:	4785                	li	a5,1
204044fc:	00f71c63          	bne	a4,a5,20404514 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20404500:	204067b7          	lui	a5,0x20406
20404504:	e0078593          	addi	a1,a5,-512 # 20405e00 <__metal_vector_table>
20404508:	fd842503          	lw	a0,-40(s0)
2040450c:	adbff0ef          	jal	ra,20403fe6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20404510:	4781                	li	a5,0
20404512:	a011                	j	20404516 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20404514:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20404516:	853e                	mv	a0,a5
20404518:	50b2                	lw	ra,44(sp)
2040451a:	5422                	lw	s0,40(sp)
2040451c:	6145                	addi	sp,sp,48
2040451e:	8082                	ret

20404520 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20404520:	1101                	addi	sp,sp,-32
20404522:	ce22                	sw	s0,28(sp)
20404524:	1000                	addi	s0,sp,32
20404526:	fea42623          	sw	a0,-20(s0)
2040452a:	feb42423          	sw	a1,-24(s0)
2040452e:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20404532:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
20404534:	853e                	mv	a0,a5
20404536:	4472                	lw	s0,28(sp)
20404538:	6105                	addi	sp,sp,32
2040453a:	8082                	ret

2040453c <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
2040453c:	7139                	addi	sp,sp,-64
2040453e:	de22                	sw	s0,60(sp)
20404540:	0080                	addi	s0,sp,64
20404542:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20404546:	4301                	li	t1,0
20404548:	4381                	li	t2,0
2040454a:	fe642423          	sw	t1,-24(s0)
2040454e:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20404552:	b8002573          	csrr	a0,mcycleh
20404556:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
2040455a:	b0002573          	csrr	a0,mcycle
2040455e:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20404562:	b8002573          	csrr	a0,mcycleh
20404566:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
2040456a:	fe442883          	lw	a7,-28(s0)
2040456e:	fdc42503          	lw	a0,-36(s0)
20404572:	02a89563          	bne	a7,a0,2040459c <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20404576:	fe442503          	lw	a0,-28(s0)
2040457a:	85aa                	mv	a1,a0
2040457c:	4601                	li	a2,0
2040457e:	00059813          	slli	a6,a1,0x0
20404582:	4781                	li	a5,0
20404584:	fe042603          	lw	a2,-32(s0)
20404588:	86b2                	mv	a3,a2
2040458a:	4701                	li	a4,0
2040458c:	00d7e633          	or	a2,a5,a3
20404590:	fec42423          	sw	a2,-24(s0)
20404594:	00e867b3          	or	a5,a6,a4
20404598:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
2040459c:	fe842783          	lw	a5,-24(s0)
204045a0:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
204045a4:	853e                	mv	a0,a5
204045a6:	85c2                	mv	a1,a6
204045a8:	5472                	lw	s0,60(sp)
204045aa:	6121                	addi	sp,sp,64
204045ac:	8082                	ret

204045ae <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
204045ae:	7179                	addi	sp,sp,-48
204045b0:	d606                	sw	ra,44(sp)
204045b2:	d422                	sw	s0,40(sp)
204045b4:	d24a                	sw	s2,36(sp)
204045b6:	d04e                	sw	s3,32(sp)
204045b8:	1800                	addi	s0,sp,48
204045ba:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
204045be:	fdc42783          	lw	a5,-36(s0)
204045c2:	e781                	bnez	a5,204045ca <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
204045c4:	4901                	li	s2,0
204045c6:	4981                	li	s3,0
204045c8:	a821                	j	204045e0 <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
204045ca:	fdc42503          	lw	a0,-36(s0)
204045ce:	b23fe0ef          	jal	ra,204030f0 <__metal_driver_cpu_timebase>
204045d2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
204045d6:	fec42783          	lw	a5,-20(s0)
204045da:	893e                	mv	s2,a5
204045dc:	87fd                	srai	a5,a5,0x1f
204045de:	89be                	mv	s3,a5
204045e0:	87ca                	mv	a5,s2
204045e2:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
204045e4:	853e                	mv	a0,a5
204045e6:	85c2                	mv	a1,a6
204045e8:	50b2                	lw	ra,44(sp)
204045ea:	5422                	lw	s0,40(sp)
204045ec:	5912                	lw	s2,36(sp)
204045ee:	5982                	lw	s3,32(sp)
204045f0:	6145                	addi	sp,sp,48
204045f2:	8082                	ret

204045f4 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
204045f4:	7179                	addi	sp,sp,-48
204045f6:	d606                	sw	ra,44(sp)
204045f8:	d422                	sw	s0,40(sp)
204045fa:	1800                	addi	s0,sp,48
204045fc:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20404600:	4781                	li	a5,0
20404602:	4801                	li	a6,0
20404604:	fef42023          	sw	a5,-32(s0)
20404608:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040460c:	fdc42503          	lw	a0,-36(s0)
20404610:	b0bfe0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20404614:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20404618:	fec42783          	lw	a5,-20(s0)
2040461c:	c78d                	beqz	a5,20404646 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
2040461e:	fec42783          	lw	a5,-20(s0)
20404622:	13c7a783          	lw	a5,316(a5)
20404626:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
2040462a:	fe842783          	lw	a5,-24(s0)
2040462e:	cf81                	beqz	a5,20404646 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20404630:	fe842783          	lw	a5,-24(s0)
20404634:	439c                	lw	a5,0(a5)
20404636:	43f8                	lw	a4,68(a5)
20404638:	fe040793          	addi	a5,s0,-32
2040463c:	863e                	mv	a2,a5
2040463e:	4585                	li	a1,1
20404640:	fe842503          	lw	a0,-24(s0)
20404644:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20404646:	fe042783          	lw	a5,-32(s0)
2040464a:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
2040464e:	853e                	mv	a0,a5
20404650:	85c2                	mv	a1,a6
20404652:	50b2                	lw	ra,44(sp)
20404654:	5422                	lw	s0,40(sp)
20404656:	6145                	addi	sp,sp,48
20404658:	8082                	ret

2040465a <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
2040465a:	7179                	addi	sp,sp,-48
2040465c:	d606                	sw	ra,44(sp)
2040465e:	d422                	sw	s0,40(sp)
20404660:	d226                	sw	s1,36(sp)
20404662:	1800                	addi	s0,sp,48
20404664:	fca42e23          	sw	a0,-36(s0)
20404668:	fcb42823          	sw	a1,-48(s0)
2040466c:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20404670:	57fd                	li	a5,-1
20404672:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404676:	fdc42503          	lw	a0,-36(s0)
2040467a:	aa1fe0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
2040467e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20404682:	fe842783          	lw	a5,-24(s0)
20404686:	cf8d                	beqz	a5,204046c0 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20404688:	fe842783          	lw	a5,-24(s0)
2040468c:	13c7a783          	lw	a5,316(a5)
20404690:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20404694:	fe442783          	lw	a5,-28(s0)
20404698:	c785                	beqz	a5,204046c0 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
2040469a:	fe442783          	lw	a5,-28(s0)
2040469e:	439c                	lw	a5,0(a5)
204046a0:	47a4                	lw	s1,72(a5)
204046a2:	fdc42503          	lw	a0,-36(s0)
204046a6:	a27fe0ef          	jal	ra,204030cc <__metal_driver_cpu_hartid>
204046aa:	87aa                	mv	a5,a0
204046ac:	fd042603          	lw	a2,-48(s0)
204046b0:	fd442683          	lw	a3,-44(s0)
204046b4:	85be                	mv	a1,a5
204046b6:	fe442503          	lw	a0,-28(s0)
204046ba:	9482                	jalr	s1
204046bc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
204046c0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
204046c4:	853e                	mv	a0,a5
204046c6:	50b2                	lw	ra,44(sp)
204046c8:	5422                	lw	s0,40(sp)
204046ca:	5492                	lw	s1,36(sp)
204046cc:	6145                	addi	sp,sp,48
204046ce:	8082                	ret

204046d0 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
204046d0:	1101                	addi	sp,sp,-32
204046d2:	ce22                	sw	s0,28(sp)
204046d4:	1000                	addi	s0,sp,32
204046d6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
204046da:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
204046de:	853e                	mv	a0,a5
204046e0:	4472                	lw	s0,28(sp)
204046e2:	6105                	addi	sp,sp,32
204046e4:	8082                	ret

204046e6 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
204046e6:	1101                	addi	sp,sp,-32
204046e8:	ce22                	sw	s0,28(sp)
204046ea:	1000                	addi	s0,sp,32
204046ec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
204046f0:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
204046f2:	853e                	mv	a0,a5
204046f4:	4472                	lw	s0,28(sp)
204046f6:	6105                	addi	sp,sp,32
204046f8:	8082                	ret

204046fa <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
204046fa:	1101                	addi	sp,sp,-32
204046fc:	ce22                	sw	s0,28(sp)
204046fe:	1000                	addi	s0,sp,32
20404700:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20404704:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20404708:	853e                	mv	a0,a5
2040470a:	4472                	lw	s0,28(sp)
2040470c:	6105                	addi	sp,sp,32
2040470e:	8082                	ret

20404710 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20404710:	1101                	addi	sp,sp,-32
20404712:	ce22                	sw	s0,28(sp)
20404714:	1000                	addi	s0,sp,32
20404716:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
2040471a:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
2040471c:	853e                	mv	a0,a5
2040471e:	4472                	lw	s0,28(sp)
20404720:	6105                	addi	sp,sp,32
20404722:	8082                	ret

20404724 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20404724:	7179                	addi	sp,sp,-48
20404726:	d606                	sw	ra,44(sp)
20404728:	d422                	sw	s0,40(sp)
2040472a:	1800                	addi	s0,sp,48
2040472c:	fca42e23          	sw	a0,-36(s0)
20404730:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20404734:	57fd                	li	a5,-1
20404736:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040473a:	fdc42503          	lw	a0,-36(s0)
2040473e:	9ddfe0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20404742:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20404746:	fe842783          	lw	a5,-24(s0)
2040474a:	c79d                	beqz	a5,20404778 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040474c:	fe842783          	lw	a5,-24(s0)
20404750:	0dc7a783          	lw	a5,220(a5)
20404754:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20404758:	fe442783          	lw	a5,-28(s0)
2040475c:	cf91                	beqz	a5,20404778 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
2040475e:	fe442783          	lw	a5,-28(s0)
20404762:	439c                	lw	a5,0(a5)
20404764:	43f8                	lw	a4,68(a5)
20404766:	fd840793          	addi	a5,s0,-40
2040476a:	863e                	mv	a2,a5
2040476c:	458d                	li	a1,3
2040476e:	fe442503          	lw	a0,-28(s0)
20404772:	9702                	jalr	a4
20404774:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20404778:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
2040477c:	853e                	mv	a0,a5
2040477e:	50b2                	lw	ra,44(sp)
20404780:	5422                	lw	s0,40(sp)
20404782:	6145                	addi	sp,sp,48
20404784:	8082                	ret

20404786 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20404786:	7179                	addi	sp,sp,-48
20404788:	d606                	sw	ra,44(sp)
2040478a:	d422                	sw	s0,40(sp)
2040478c:	1800                	addi	s0,sp,48
2040478e:	fca42e23          	sw	a0,-36(s0)
20404792:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20404796:	57fd                	li	a5,-1
20404798:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040479c:	fdc42503          	lw	a0,-36(s0)
204047a0:	97bfe0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
204047a4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
204047a8:	fe842783          	lw	a5,-24(s0)
204047ac:	c79d                	beqz	a5,204047da <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204047ae:	fe842783          	lw	a5,-24(s0)
204047b2:	0dc7a783          	lw	a5,220(a5)
204047b6:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
204047ba:	fe442783          	lw	a5,-28(s0)
204047be:	cf91                	beqz	a5,204047da <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
204047c0:	fe442783          	lw	a5,-28(s0)
204047c4:	439c                	lw	a5,0(a5)
204047c6:	43f8                	lw	a4,68(a5)
204047c8:	fd840793          	addi	a5,s0,-40
204047cc:	863e                	mv	a2,a5
204047ce:	4589                	li	a1,2
204047d0:	fe442503          	lw	a0,-28(s0)
204047d4:	9702                	jalr	a4
204047d6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
204047da:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
204047de:	853e                	mv	a0,a5
204047e0:	50b2                	lw	ra,44(sp)
204047e2:	5422                	lw	s0,40(sp)
204047e4:	6145                	addi	sp,sp,48
204047e6:	8082                	ret

204047e8 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
204047e8:	7179                	addi	sp,sp,-48
204047ea:	d606                	sw	ra,44(sp)
204047ec:	d422                	sw	s0,40(sp)
204047ee:	1800                	addi	s0,sp,48
204047f0:	fca42e23          	sw	a0,-36(s0)
204047f4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
204047f8:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204047fc:	fdc42503          	lw	a0,-36(s0)
20404800:	91bfe0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20404804:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20404808:	fe842783          	lw	a5,-24(s0)
2040480c:	c79d                	beqz	a5,2040483a <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040480e:	fe842783          	lw	a5,-24(s0)
20404812:	0dc7a783          	lw	a5,220(a5)
20404816:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
2040481a:	fe442783          	lw	a5,-28(s0)
2040481e:	cf91                	beqz	a5,2040483a <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20404820:	fe442783          	lw	a5,-28(s0)
20404824:	439c                	lw	a5,0(a5)
20404826:	43f8                	lw	a4,68(a5)
20404828:	fd840793          	addi	a5,s0,-40
2040482c:	863e                	mv	a2,a5
2040482e:	4591                	li	a1,4
20404830:	fe442503          	lw	a0,-28(s0)
20404834:	9702                	jalr	a4
20404836:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
2040483a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
2040483e:	853e                	mv	a0,a5
20404840:	50b2                	lw	ra,44(sp)
20404842:	5422                	lw	s0,40(sp)
20404844:	6145                	addi	sp,sp,48
20404846:	8082                	ret

20404848 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20404848:	1101                	addi	sp,sp,-32
2040484a:	ce06                	sw	ra,28(sp)
2040484c:	cc22                	sw	s0,24(sp)
2040484e:	1000                	addi	s0,sp,32
20404850:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20404854:	fec42503          	lw	a0,-20(s0)
20404858:	8c3fe0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
2040485c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
2040485e:	853e                	mv	a0,a5
20404860:	40f2                	lw	ra,28(sp)
20404862:	4462                	lw	s0,24(sp)
20404864:	6105                	addi	sp,sp,32
20404866:	8082                	ret

20404868 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20404868:	7179                	addi	sp,sp,-48
2040486a:	d606                	sw	ra,44(sp)
2040486c:	d422                	sw	s0,40(sp)
2040486e:	1800                	addi	s0,sp,48
20404870:	fca42e23          	sw	a0,-36(s0)
20404874:	fcb42c23          	sw	a1,-40(s0)
20404878:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040487c:	fdc42503          	lw	a0,-36(s0)
20404880:	89bfe0ef          	jal	ra,2040311a <__metal_driver_cpu_interrupt_controller>
20404884:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20404888:	fec42783          	lw	a5,-20(s0)
2040488c:	cb99                	beqz	a5,204048a2 <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
2040488e:	fd442603          	lw	a2,-44(s0)
20404892:	fd842583          	lw	a1,-40(s0)
20404896:	fec42503          	lw	a0,-20(s0)
2040489a:	8d9ff0ef          	jal	ra,20404172 <__metal_exception_register>
2040489e:	87aa                	mv	a5,a0
204048a0:	a011                	j	204048a4 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
204048a2:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
204048a4:	853e                	mv	a0,a5
204048a6:	50b2                	lw	ra,44(sp)
204048a8:	5422                	lw	s0,40(sp)
204048aa:	6145                	addi	sp,sp,48
204048ac:	8082                	ret

204048ae <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
204048ae:	1101                	addi	sp,sp,-32
204048b0:	ce22                	sw	s0,28(sp)
204048b2:	1000                	addi	s0,sp,32
204048b4:	fea42623          	sw	a0,-20(s0)
204048b8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
204048bc:	fe842783          	lw	a5,-24(s0)
204048c0:	0007d783          	lhu	a5,0(a5)
204048c4:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
204048c8:	478d                	li	a5,3
204048ca:	00f71463          	bne	a4,a5,204048d2 <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
204048ce:	4791                	li	a5,4
204048d0:	a011                	j	204048d4 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
204048d2:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
204048d4:	853e                	mv	a0,a5
204048d6:	4472                	lw	s0,28(sp)
204048d8:	6105                	addi	sp,sp,32
204048da:	8082                	ret

204048dc <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
204048dc:	7179                	addi	sp,sp,-48
204048de:	d622                	sw	s0,44(sp)
204048e0:	1800                	addi	s0,sp,48
204048e2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204048e6:	341027f3          	csrr	a5,mepc
204048ea:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
204048ee:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
204048f2:	853e                	mv	a0,a5
204048f4:	5432                	lw	s0,44(sp)
204048f6:	6145                	addi	sp,sp,48
204048f8:	8082                	ret

204048fa <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
204048fa:	1101                	addi	sp,sp,-32
204048fc:	ce22                	sw	s0,28(sp)
204048fe:	1000                	addi	s0,sp,32
20404900:	fea42623          	sw	a0,-20(s0)
20404904:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20404908:	fe842783          	lw	a5,-24(s0)
2040490c:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20404910:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20404912:	853e                	mv	a0,a5
20404914:	4472                	lw	s0,28(sp)
20404916:	6105                	addi	sp,sp,32
20404918:	8082                	ret

2040491a <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
2040491a:	1101                	addi	sp,sp,-32
2040491c:	ce22                	sw	s0,28(sp)
2040491e:	1000                	addi	s0,sp,32
20404920:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20404924:	fec42703          	lw	a4,-20(s0)
20404928:	800017b7          	lui	a5,0x80001
2040492c:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe034>
20404930:	00f71563          	bne	a4,a5,2040493a <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20404934:	0c0007b7          	lui	a5,0xc000
20404938:	a011                	j	2040493c <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
2040493a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
2040493c:	853e                	mv	a0,a5
2040493e:	4472                	lw	s0,28(sp)
20404940:	6105                	addi	sp,sp,32
20404942:	8082                	ret

20404944 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20404944:	1101                	addi	sp,sp,-32
20404946:	ce22                	sw	s0,28(sp)
20404948:	1000                	addi	s0,sp,32
2040494a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
2040494e:	fec42703          	lw	a4,-20(s0)
20404952:	800017b7          	lui	a5,0x80001
20404956:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe034>
2040495a:	00f71463          	bne	a4,a5,20404962 <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
2040495e:	47ed                	li	a5,27
20404960:	a011                	j	20404964 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
20404962:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
20404964:	853e                	mv	a0,a5
20404966:	4472                	lw	s0,28(sp)
20404968:	6105                	addi	sp,sp,32
2040496a:	8082                	ret

2040496c <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
2040496c:	1101                	addi	sp,sp,-32
2040496e:	ce22                	sw	s0,28(sp)
20404970:	1000                	addi	s0,sp,32
20404972:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20404976:	fec42703          	lw	a4,-20(s0)
2040497a:	800017b7          	lui	a5,0x80001
2040497e:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe034>
20404982:	00f71463          	bne	a4,a5,2040498a <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20404986:	479d                	li	a5,7
20404988:	a011                	j	2040498c <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
2040498a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
2040498c:	853e                	mv	a0,a5
2040498e:	4472                	lw	s0,28(sp)
20404990:	6105                	addi	sp,sp,32
20404992:	8082                	ret

20404994 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20404994:	1101                	addi	sp,sp,-32
20404996:	ce22                	sw	s0,28(sp)
20404998:	1000                	addi	s0,sp,32
2040499a:	fea42623          	sw	a0,-20(s0)
2040499e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
204049a2:	fe842783          	lw	a5,-24(s0)
204049a6:	e791                	bnez	a5,204049b2 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
204049a8:	800017b7          	lui	a5,0x80001
204049ac:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffdc7c>
204049b0:	a011                	j	204049b4 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
204049b2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
204049b4:	853e                	mv	a0,a5
204049b6:	4472                	lw	s0,28(sp)
204049b8:	6105                	addi	sp,sp,32
204049ba:	8082                	ret

204049bc <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
204049bc:	1101                	addi	sp,sp,-32
204049be:	ce22                	sw	s0,28(sp)
204049c0:	1000                	addi	s0,sp,32
204049c2:	fea42623          	sw	a0,-20(s0)
204049c6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
204049ca:	fe842783          	lw	a5,-24(s0)
204049ce:	e399                	bnez	a5,204049d4 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
204049d0:	47ad                	li	a5,11
204049d2:	a011                	j	204049d6 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
204049d4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
204049d6:	853e                	mv	a0,a5
204049d8:	4472                	lw	s0,28(sp)
204049da:	6105                	addi	sp,sp,32
204049dc:	8082                	ret

204049de <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
204049de:	7179                	addi	sp,sp,-48
204049e0:	d606                	sw	ra,44(sp)
204049e2:	d422                	sw	s0,40(sp)
204049e4:	1800                	addi	s0,sp,48
204049e6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204049ea:	fdc42503          	lw	a0,-36(s0)
204049ee:	3735                	jal	2040491a <__metal_driver_sifive_plic0_control_base>
204049f0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204049f4:	fec42703          	lw	a4,-20(s0)
204049f8:	002007b7          	lui	a5,0x200
204049fc:	0791                	addi	a5,a5,4
204049fe:	97ba                	add	a5,a5,a4
20404a00:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20404a02:	853e                	mv	a0,a5
20404a04:	50b2                	lw	ra,44(sp)
20404a06:	5422                	lw	s0,40(sp)
20404a08:	6145                	addi	sp,sp,48
20404a0a:	8082                	ret

20404a0c <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20404a0c:	7179                	addi	sp,sp,-48
20404a0e:	d606                	sw	ra,44(sp)
20404a10:	d422                	sw	s0,40(sp)
20404a12:	1800                	addi	s0,sp,48
20404a14:	fca42e23          	sw	a0,-36(s0)
20404a18:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404a1c:	fdc42503          	lw	a0,-36(s0)
20404a20:	3ded                	jal	2040491a <__metal_driver_sifive_plic0_control_base>
20404a22:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404a26:	fec42703          	lw	a4,-20(s0)
20404a2a:	002007b7          	lui	a5,0x200
20404a2e:	0791                	addi	a5,a5,4
20404a30:	97ba                	add	a5,a5,a4
20404a32:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20404a34:	fd842783          	lw	a5,-40(s0)
20404a38:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20404a3a:	0001                	nop
20404a3c:	50b2                	lw	ra,44(sp)
20404a3e:	5422                	lw	s0,40(sp)
20404a40:	6145                	addi	sp,sp,48
20404a42:	8082                	ret

20404a44 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20404a44:	7179                	addi	sp,sp,-48
20404a46:	d606                	sw	ra,44(sp)
20404a48:	d422                	sw	s0,40(sp)
20404a4a:	1800                	addi	s0,sp,48
20404a4c:	fca42e23          	sw	a0,-36(s0)
20404a50:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404a54:	fdc42503          	lw	a0,-36(s0)
20404a58:	35c9                	jal	2040491a <__metal_driver_sifive_plic0_control_base>
20404a5a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404a5e:	fec42703          	lw	a4,-20(s0)
20404a62:	002007b7          	lui	a5,0x200
20404a66:	97ba                	add	a5,a5,a4
20404a68:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20404a6a:	fd842783          	lw	a5,-40(s0)
20404a6e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
20404a70:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
20404a72:	853e                	mv	a0,a5
20404a74:	50b2                	lw	ra,44(sp)
20404a76:	5422                	lw	s0,40(sp)
20404a78:	6145                	addi	sp,sp,48
20404a7a:	8082                	ret

20404a7c <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20404a7c:	7179                	addi	sp,sp,-48
20404a7e:	d606                	sw	ra,44(sp)
20404a80:	d422                	sw	s0,40(sp)
20404a82:	1800                	addi	s0,sp,48
20404a84:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404a88:	fdc42503          	lw	a0,-36(s0)
20404a8c:	3579                	jal	2040491a <__metal_driver_sifive_plic0_control_base>
20404a8e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404a92:	fec42703          	lw	a4,-20(s0)
20404a96:	002007b7          	lui	a5,0x200
20404a9a:	97ba                	add	a5,a5,a4
20404a9c:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20404a9e:	853e                	mv	a0,a5
20404aa0:	50b2                	lw	ra,44(sp)
20404aa2:	5422                	lw	s0,40(sp)
20404aa4:	6145                	addi	sp,sp,48
20404aa6:	8082                	ret

20404aa8 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20404aa8:	7179                	addi	sp,sp,-48
20404aaa:	d606                	sw	ra,44(sp)
20404aac:	d422                	sw	s0,40(sp)
20404aae:	1800                	addi	s0,sp,48
20404ab0:	fca42e23          	sw	a0,-36(s0)
20404ab4:	fcb42c23          	sw	a1,-40(s0)
20404ab8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20404abc:	fdc42503          	lw	a0,-36(s0)
20404ac0:	3da9                	jal	2040491a <__metal_driver_sifive_plic0_control_base>
20404ac2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20404ac6:	fdc42503          	lw	a0,-36(s0)
20404aca:	354d                	jal	2040496c <__metal_driver_sifive_plic0_max_priority>
20404acc:	87aa                	mv	a5,a0
20404ace:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20404ad2:	fe842783          	lw	a5,-24(s0)
20404ad6:	c785                	beqz	a5,20404afe <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20404ad8:	fd442703          	lw	a4,-44(s0)
20404adc:	fe842783          	lw	a5,-24(s0)
20404ae0:	00f77f63          	bgeu	a4,a5,20404afe <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404ae4:	fd842783          	lw	a5,-40(s0)
20404ae8:	078a                	slli	a5,a5,0x2
20404aea:	873e                	mv	a4,a5
20404aec:	fec42783          	lw	a5,-20(s0)
20404af0:	97ba                	add	a5,a5,a4
20404af2:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20404af4:	fd442783          	lw	a5,-44(s0)
20404af8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20404afa:	4781                	li	a5,0
20404afc:	a011                	j	20404b00 <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20404afe:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
20404b00:	853e                	mv	a0,a5
20404b02:	50b2                	lw	ra,44(sp)
20404b04:	5422                	lw	s0,40(sp)
20404b06:	6145                	addi	sp,sp,48
20404b08:	8082                	ret

20404b0a <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20404b0a:	7179                	addi	sp,sp,-48
20404b0c:	d606                	sw	ra,44(sp)
20404b0e:	d422                	sw	s0,40(sp)
20404b10:	1800                	addi	s0,sp,48
20404b12:	fca42e23          	sw	a0,-36(s0)
20404b16:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404b1a:	fdc42503          	lw	a0,-36(s0)
20404b1e:	3bf5                	jal	2040491a <__metal_driver_sifive_plic0_control_base>
20404b20:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404b24:	fd842783          	lw	a5,-40(s0)
20404b28:	078a                	slli	a5,a5,0x2
20404b2a:	873e                	mv	a4,a5
20404b2c:	fec42783          	lw	a5,-20(s0)
20404b30:	97ba                	add	a5,a5,a4
20404b32:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20404b34:	853e                	mv	a0,a5
20404b36:	50b2                	lw	ra,44(sp)
20404b38:	5422                	lw	s0,40(sp)
20404b3a:	6145                	addi	sp,sp,48
20404b3c:	8082                	ret

20404b3e <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20404b3e:	7179                	addi	sp,sp,-48
20404b40:	d606                	sw	ra,44(sp)
20404b42:	d422                	sw	s0,40(sp)
20404b44:	1800                	addi	s0,sp,48
20404b46:	fca42e23          	sw	a0,-36(s0)
20404b4a:	fcb42c23          	sw	a1,-40(s0)
20404b4e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404b52:	fdc42503          	lw	a0,-36(s0)
20404b56:	dc5ff0ef          	jal	ra,2040491a <__metal_driver_sifive_plic0_control_base>
20404b5a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404b5e:	fd842783          	lw	a5,-40(s0)
20404b62:	8795                	srai	a5,a5,0x5
20404b64:	078a                	slli	a5,a5,0x2
20404b66:	873e                	mv	a4,a5
20404b68:	fec42783          	lw	a5,-20(s0)
20404b6c:	973e                	add	a4,a4,a5
20404b6e:	6789                	lui	a5,0x2
20404b70:	97ba                	add	a5,a5,a4
20404b72:	439c                	lw	a5,0(a5)
20404b74:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404b78:	fd442783          	lw	a5,-44(s0)
20404b7c:	cf81                	beqz	a5,20404b94 <__metal_plic0_enable+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20404b7e:	fd842783          	lw	a5,-40(s0)
20404b82:	8bfd                	andi	a5,a5,31
20404b84:	4705                	li	a4,1
20404b86:	00f717b3          	sll	a5,a4,a5
20404b8a:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404b8c:	fe842783          	lw	a5,-24(s0)
20404b90:	8fd9                	or	a5,a5,a4
20404b92:	a829                	j	20404bac <__metal_plic0_enable+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20404b94:	fd842783          	lw	a5,-40(s0)
20404b98:	8bfd                	andi	a5,a5,31
20404b9a:	4705                	li	a4,1
20404b9c:	00f717b3          	sll	a5,a4,a5
20404ba0:	fff7c793          	not	a5,a5
20404ba4:	873e                	mv	a4,a5
20404ba6:	fe842783          	lw	a5,-24(s0)
20404baa:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404bac:	fd842703          	lw	a4,-40(s0)
20404bb0:	8715                	srai	a4,a4,0x5
20404bb2:	070a                	slli	a4,a4,0x2
20404bb4:	86ba                	mv	a3,a4
20404bb6:	fec42703          	lw	a4,-20(s0)
20404bba:	96ba                	add	a3,a3,a4
20404bbc:	6709                	lui	a4,0x2
20404bbe:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20404bc0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20404bc2:	0001                	nop
20404bc4:	50b2                	lw	ra,44(sp)
20404bc6:	5422                	lw	s0,40(sp)
20404bc8:	6145                	addi	sp,sp,48
20404bca:	8082                	ret

20404bcc <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20404bcc:	1101                	addi	sp,sp,-32
20404bce:	ce06                	sw	ra,28(sp)
20404bd0:	cc22                	sw	s0,24(sp)
20404bd2:	1000                	addi	s0,sp,32
20404bd4:	fea42623          	sw	a0,-20(s0)
20404bd8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20404bdc:	12c00513          	li	a0,300
20404be0:	1d8010ef          	jal	ra,20405db8 <metal_shutdown>

20404be4 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20404be4:	7179                	addi	sp,sp,-48
20404be6:	d606                	sw	ra,44(sp)
20404be8:	d422                	sw	s0,40(sp)
20404bea:	1800                	addi	s0,sp,48
20404bec:	fca42e23          	sw	a0,-36(s0)
20404bf0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20404bf4:	fd842783          	lw	a5,-40(s0)
20404bf8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20404bfc:	fec42503          	lw	a0,-20(s0)
20404c00:	ddfff0ef          	jal	ra,204049de <__metal_plic0_claim_interrupt>
20404c04:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20404c08:	fec42503          	lw	a0,-20(s0)
20404c0c:	d39ff0ef          	jal	ra,20404944 <__metal_driver_sifive_plic0_num_interrupts>
20404c10:	87aa                	mv	a5,a0
20404c12:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20404c16:	fe842703          	lw	a4,-24(s0)
20404c1a:	fe442783          	lw	a5,-28(s0)
20404c1e:	04f77263          	bgeu	a4,a5,20404c62 <__metal_plic0_handler+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20404c22:	fec42703          	lw	a4,-20(s0)
20404c26:	fe842783          	lw	a5,-24(s0)
20404c2a:	078a                	slli	a5,a5,0x2
20404c2c:	97ba                	add	a5,a5,a4
20404c2e:	479c                	lw	a5,8(a5)
20404c30:	cb8d                	beqz	a5,20404c62 <__metal_plic0_handler+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
20404c32:	fec42703          	lw	a4,-20(s0)
20404c36:	fe842783          	lw	a5,-24(s0)
20404c3a:	078a                	slli	a5,a5,0x2
20404c3c:	97ba                	add	a5,a5,a4
20404c3e:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20404c42:	fe842603          	lw	a2,-24(s0)
20404c46:	fec42683          	lw	a3,-20(s0)
20404c4a:	fe842703          	lw	a4,-24(s0)
20404c4e:	87ba                	mv	a5,a4
20404c50:	0786                	slli	a5,a5,0x1
20404c52:	97ba                	add	a5,a5,a4
20404c54:	078e                	slli	a5,a5,0x3
20404c56:	97b6                	add	a5,a5,a3
20404c58:	0887a783          	lw	a5,136(a5)
20404c5c:	85be                	mv	a1,a5
20404c5e:	8532                	mv	a0,a2
20404c60:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20404c62:	fe842583          	lw	a1,-24(s0)
20404c66:	fec42503          	lw	a0,-20(s0)
20404c6a:	da3ff0ef          	jal	ra,20404a0c <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
20404c6e:	0001                	nop
20404c70:	50b2                	lw	ra,44(sp)
20404c72:	5422                	lw	s0,40(sp)
20404c74:	6145                	addi	sp,sp,48
20404c76:	8082                	ret

20404c78 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20404c78:	7139                	addi	sp,sp,-64
20404c7a:	de06                	sw	ra,60(sp)
20404c7c:	dc22                	sw	s0,56(sp)
20404c7e:	0080                	addi	s0,sp,64
20404c80:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404c84:	fcc42783          	lw	a5,-52(s0)
20404c88:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20404c8c:	fe442783          	lw	a5,-28(s0)
20404c90:	43dc                	lw	a5,4(a5)
20404c92:	12079163          	bnez	a5,20404db4 <__metal_driver_riscv_plic0_init+0x13c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20404c96:	fe042623          	sw	zero,-20(s0)
20404c9a:	a229                	j	20404da4 <__metal_driver_riscv_plic0_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20404c9c:	fcc42503          	lw	a0,-52(s0)
20404ca0:	ca5ff0ef          	jal	ra,20404944 <__metal_driver_sifive_plic0_num_interrupts>
20404ca4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20404ca8:	fec42583          	lw	a1,-20(s0)
20404cac:	fcc42503          	lw	a0,-52(s0)
20404cb0:	ce5ff0ef          	jal	ra,20404994 <__metal_driver_sifive_plic0_interrupt_parents>
20404cb4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20404cb8:	fec42583          	lw	a1,-20(s0)
20404cbc:	fcc42503          	lw	a0,-52(s0)
20404cc0:	cfdff0ef          	jal	ra,204049bc <__metal_driver_sifive_plic0_interrupt_lines>
20404cc4:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
20404cc8:	fdc42783          	lw	a5,-36(s0)
20404ccc:	439c                	lw	a5,0(a5)
20404cce:	439c                	lw	a5,0(a5)
20404cd0:	fdc42503          	lw	a0,-36(s0)
20404cd4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20404cd6:	fe042423          	sw	zero,-24(s0)
20404cda:	a08d                	j	20404d3c <__metal_driver_riscv_plic0_init+0xc4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20404cdc:	4601                	li	a2,0
20404cde:	fe842583          	lw	a1,-24(s0)
20404ce2:	fe442503          	lw	a0,-28(s0)
20404ce6:	3da1                	jal	20404b3e <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
20404ce8:	4601                	li	a2,0
20404cea:	fe842583          	lw	a1,-24(s0)
20404cee:	fcc42503          	lw	a0,-52(s0)
20404cf2:	db7ff0ef          	jal	ra,20404aa8 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20404cf6:	fe442703          	lw	a4,-28(s0)
20404cfa:	fe842783          	lw	a5,-24(s0)
20404cfe:	078a                	slli	a5,a5,0x2
20404d00:	97ba                	add	a5,a5,a4
20404d02:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20404d06:	fe442683          	lw	a3,-28(s0)
20404d0a:	fe842703          	lw	a4,-24(s0)
20404d0e:	87ba                	mv	a5,a4
20404d10:	0786                	slli	a5,a5,0x1
20404d12:	97ba                	add	a5,a5,a4
20404d14:	078e                	slli	a5,a5,0x3
20404d16:	97b6                	add	a5,a5,a3
20404d18:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20404d1c:	fe442683          	lw	a3,-28(s0)
20404d20:	fe842703          	lw	a4,-24(s0)
20404d24:	87ba                	mv	a5,a4
20404d26:	0786                	slli	a5,a5,0x1
20404d28:	97ba                	add	a5,a5,a4
20404d2a:	078e                	slli	a5,a5,0x3
20404d2c:	97b6                	add	a5,a5,a3
20404d2e:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20404d32:	fe842783          	lw	a5,-24(s0)
20404d36:	0785                	addi	a5,a5,1
20404d38:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20404d3c:	fe842703          	lw	a4,-24(s0)
20404d40:	fe042783          	lw	a5,-32(s0)
20404d44:	f8f74ce3          	blt	a4,a5,20404cdc <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
20404d48:	4581                	li	a1,0
20404d4a:	fcc42503          	lw	a0,-52(s0)
20404d4e:	cf7ff0ef          	jal	ra,20404a44 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20404d52:	fdc42783          	lw	a5,-36(s0)
20404d56:	439c                	lw	a5,0(a5)
20404d58:	4fdc                	lw	a5,28(a5)
20404d5a:	fe442683          	lw	a3,-28(s0)
20404d5e:	4601                	li	a2,0
20404d60:	fd842583          	lw	a1,-40(s0)
20404d64:	fdc42503          	lw	a0,-36(s0)
20404d68:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
20404d6a:	fdc42783          	lw	a5,-36(s0)
20404d6e:	439c                	lw	a5,0(a5)
20404d70:	4fd8                	lw	a4,28(a5)
20404d72:	fe442683          	lw	a3,-28(s0)
20404d76:	204057b7          	lui	a5,0x20405
20404d7a:	be478613          	addi	a2,a5,-1052 # 20404be4 <__metal_plic0_handler>
20404d7e:	fd842583          	lw	a1,-40(s0)
20404d82:	fdc42503          	lw	a0,-36(s0)
20404d86:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
20404d88:	fdc42783          	lw	a5,-36(s0)
20404d8c:	439c                	lw	a5,0(a5)
20404d8e:	53dc                	lw	a5,36(a5)
20404d90:	fd842583          	lw	a1,-40(s0)
20404d94:	fdc42503          	lw	a0,-36(s0)
20404d98:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20404d9a:	fec42783          	lw	a5,-20(s0)
20404d9e:	0785                	addi	a5,a5,1
20404da0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404da4:	fec42783          	lw	a5,-20(s0)
20404da8:	eef05ae3          	blez	a5,20404c9c <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20404dac:	fe442783          	lw	a5,-28(s0)
20404db0:	4705                	li	a4,1
20404db2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20404db4:	0001                	nop
20404db6:	50f2                	lw	ra,60(sp)
20404db8:	5462                	lw	s0,56(sp)
20404dba:	6121                	addi	sp,sp,64
20404dbc:	8082                	ret

20404dbe <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20404dbe:	7179                	addi	sp,sp,-48
20404dc0:	d606                	sw	ra,44(sp)
20404dc2:	d422                	sw	s0,40(sp)
20404dc4:	1800                	addi	s0,sp,48
20404dc6:	fca42e23          	sw	a0,-36(s0)
20404dca:	fcb42c23          	sw	a1,-40(s0)
20404dce:	fcc42a23          	sw	a2,-44(s0)
20404dd2:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404dd6:	fdc42783          	lw	a5,-36(s0)
20404dda:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404dde:	fdc42503          	lw	a0,-36(s0)
20404de2:	b63ff0ef          	jal	ra,20404944 <__metal_driver_sifive_plic0_num_interrupts>
20404de6:	872a                	mv	a4,a0
20404de8:	fd842783          	lw	a5,-40(s0)
20404dec:	00e7c463          	blt	a5,a4,20404df4 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20404df0:	57fd                	li	a5,-1
20404df2:	a051                	j	20404e76 <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20404df4:	fd442783          	lw	a5,-44(s0)
20404df8:	cf9d                	beqz	a5,20404e36 <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
20404dfa:	4609                	li	a2,2
20404dfc:	fd842583          	lw	a1,-40(s0)
20404e00:	fdc42503          	lw	a0,-36(s0)
20404e04:	ca5ff0ef          	jal	ra,20404aa8 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
20404e08:	fec42703          	lw	a4,-20(s0)
20404e0c:	fd842783          	lw	a5,-40(s0)
20404e10:	078a                	slli	a5,a5,0x2
20404e12:	97ba                	add	a5,a5,a4
20404e14:	fd442703          	lw	a4,-44(s0)
20404e18:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
20404e1a:	fec42683          	lw	a3,-20(s0)
20404e1e:	fd842703          	lw	a4,-40(s0)
20404e22:	87ba                	mv	a5,a4
20404e24:	0786                	slli	a5,a5,0x1
20404e26:	97ba                	add	a5,a5,a4
20404e28:	078e                	slli	a5,a5,0x3
20404e2a:	97b6                	add	a5,a5,a3
20404e2c:	fd042703          	lw	a4,-48(s0)
20404e30:	08e7a423          	sw	a4,136(a5)
20404e34:	a081                	j	20404e74 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20404e36:	4605                	li	a2,1
20404e38:	fd842583          	lw	a1,-40(s0)
20404e3c:	fdc42503          	lw	a0,-36(s0)
20404e40:	c69ff0ef          	jal	ra,20404aa8 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20404e44:	fec42703          	lw	a4,-20(s0)
20404e48:	fd842783          	lw	a5,-40(s0)
20404e4c:	078a                	slli	a5,a5,0x2
20404e4e:	97ba                	add	a5,a5,a4
20404e50:	20405737          	lui	a4,0x20405
20404e54:	bcc70713          	addi	a4,a4,-1076 # 20404bcc <__metal_plic0_default_handler>
20404e58:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
20404e5a:	fec42683          	lw	a3,-20(s0)
20404e5e:	fd842703          	lw	a4,-40(s0)
20404e62:	87ba                	mv	a5,a4
20404e64:	0786                	slli	a5,a5,0x1
20404e66:	97ba                	add	a5,a5,a4
20404e68:	078e                	slli	a5,a5,0x3
20404e6a:	97b6                	add	a5,a5,a3
20404e6c:	fd042703          	lw	a4,-48(s0)
20404e70:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20404e74:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
20404e76:	853e                	mv	a0,a5
20404e78:	50b2                	lw	ra,44(sp)
20404e7a:	5422                	lw	s0,40(sp)
20404e7c:	6145                	addi	sp,sp,48
20404e7e:	8082                	ret

20404e80 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20404e80:	7179                	addi	sp,sp,-48
20404e82:	d606                	sw	ra,44(sp)
20404e84:	d422                	sw	s0,40(sp)
20404e86:	1800                	addi	s0,sp,48
20404e88:	fca42e23          	sw	a0,-36(s0)
20404e8c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404e90:	fdc42783          	lw	a5,-36(s0)
20404e94:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404e98:	fdc42503          	lw	a0,-36(s0)
20404e9c:	aa9ff0ef          	jal	ra,20404944 <__metal_driver_sifive_plic0_num_interrupts>
20404ea0:	872a                	mv	a4,a0
20404ea2:	fd842783          	lw	a5,-40(s0)
20404ea6:	00e7c463          	blt	a5,a4,20404eae <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
20404eaa:	57fd                	li	a5,-1
20404eac:	a809                	j	20404ebe <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20404eae:	4605                	li	a2,1
20404eb0:	fd842583          	lw	a1,-40(s0)
20404eb4:	fec42503          	lw	a0,-20(s0)
20404eb8:	c87ff0ef          	jal	ra,20404b3e <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
20404ebc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20404ebe:	853e                	mv	a0,a5
20404ec0:	50b2                	lw	ra,44(sp)
20404ec2:	5422                	lw	s0,40(sp)
20404ec4:	6145                	addi	sp,sp,48
20404ec6:	8082                	ret

20404ec8 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20404ec8:	7179                	addi	sp,sp,-48
20404eca:	d606                	sw	ra,44(sp)
20404ecc:	d422                	sw	s0,40(sp)
20404ece:	1800                	addi	s0,sp,48
20404ed0:	fca42e23          	sw	a0,-36(s0)
20404ed4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404ed8:	fdc42783          	lw	a5,-36(s0)
20404edc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404ee0:	fdc42503          	lw	a0,-36(s0)
20404ee4:	a61ff0ef          	jal	ra,20404944 <__metal_driver_sifive_plic0_num_interrupts>
20404ee8:	872a                	mv	a4,a0
20404eea:	fd842783          	lw	a5,-40(s0)
20404eee:	00e7c463          	blt	a5,a4,20404ef6 <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20404ef2:	57fd                	li	a5,-1
20404ef4:	a809                	j	20404f06 <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20404ef6:	4601                	li	a2,0
20404ef8:	fd842583          	lw	a1,-40(s0)
20404efc:	fec42503          	lw	a0,-20(s0)
20404f00:	c3fff0ef          	jal	ra,20404b3e <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20404f04:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20404f06:	853e                	mv	a0,a5
20404f08:	50b2                	lw	ra,44(sp)
20404f0a:	5422                	lw	s0,40(sp)
20404f0c:	6145                	addi	sp,sp,48
20404f0e:	8082                	ret

20404f10 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404f10:	1101                	addi	sp,sp,-32
20404f12:	ce22                	sw	s0,28(sp)
20404f14:	1000                	addi	s0,sp,32
20404f16:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404f1a:	fec42703          	lw	a4,-20(s0)
20404f1e:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f22:	00f71563          	bne	a4,a5,20404f2c <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404f26:	100127b7          	lui	a5,0x10012
20404f2a:	a011                	j	20404f2e <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
20404f2c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
20404f2e:	853e                	mv	a0,a5
20404f30:	4472                	lw	s0,28(sp)
20404f32:	6105                	addi	sp,sp,32
20404f34:	8082                	ret

20404f36 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
20404f36:	1101                	addi	sp,sp,-32
20404f38:	ce22                	sw	s0,28(sp)
20404f3a:	1000                	addi	s0,sp,32
20404f3c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404f40:	fec42703          	lw	a4,-20(s0)
20404f44:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f48:	00f71763          	bne	a4,a5,20404f56 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404f4c:	800017b7          	lui	a5,0x80001
20404f50:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe034>
20404f54:	a011                	j	20404f58 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
20404f56:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
20404f58:	853e                	mv	a0,a5
20404f5a:	4472                	lw	s0,28(sp)
20404f5c:	6105                	addi	sp,sp,32
20404f5e:	8082                	ret

20404f60 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
20404f60:	1101                	addi	sp,sp,-32
20404f62:	ce22                	sw	s0,28(sp)
20404f64:	1000                	addi	s0,sp,32
20404f66:	fea42623          	sw	a0,-20(s0)
20404f6a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20404f6e:	fec42703          	lw	a4,-20(s0)
20404f72:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f76:	00f71763          	bne	a4,a5,20404f84 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
20404f7a:	fe842783          	lw	a5,-24(s0)
20404f7e:	e399                	bnez	a5,20404f84 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
20404f80:	479d                	li	a5,7
20404f82:	a269                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20404f84:	fec42703          	lw	a4,-20(s0)
20404f88:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404f8c:	00f71963          	bne	a4,a5,20404f9e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
20404f90:	fe842703          	lw	a4,-24(s0)
20404f94:	4785                	li	a5,1
20404f96:	00f71463          	bne	a4,a5,20404f9e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
20404f9a:	47a1                	li	a5,8
20404f9c:	aa85                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404f9e:	fec42703          	lw	a4,-20(s0)
20404fa2:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404fa6:	00f71963          	bne	a4,a5,20404fb8 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
20404faa:	fe842703          	lw	a4,-24(s0)
20404fae:	4789                	li	a5,2
20404fb0:	00f71463          	bne	a4,a5,20404fb8 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
20404fb4:	47a5                	li	a5,9
20404fb6:	aa99                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20404fb8:	fec42703          	lw	a4,-20(s0)
20404fbc:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404fc0:	00f71963          	bne	a4,a5,20404fd2 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
20404fc4:	fe842703          	lw	a4,-24(s0)
20404fc8:	478d                	li	a5,3
20404fca:	00f71463          	bne	a4,a5,20404fd2 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
20404fce:	47a9                	li	a5,10
20404fd0:	aa35                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404fd2:	fec42703          	lw	a4,-20(s0)
20404fd6:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404fda:	00f71963          	bne	a4,a5,20404fec <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
20404fde:	fe842703          	lw	a4,-24(s0)
20404fe2:	4791                	li	a5,4
20404fe4:	00f71463          	bne	a4,a5,20404fec <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
20404fe8:	47ad                	li	a5,11
20404fea:	a20d                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
20404fec:	fec42703          	lw	a4,-20(s0)
20404ff0:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404ff4:	00f71963          	bne	a4,a5,20405006 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
20404ff8:	fe842703          	lw	a4,-24(s0)
20404ffc:	4795                	li	a5,5
20404ffe:	00f71463          	bne	a4,a5,20405006 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
20405002:	47b1                	li	a5,12
20405004:	a221                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20405006:	fec42703          	lw	a4,-20(s0)
2040500a:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040500e:	00f71963          	bne	a4,a5,20405020 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
20405012:	fe842703          	lw	a4,-24(s0)
20405016:	4799                	li	a5,6
20405018:	00f71463          	bne	a4,a5,20405020 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
2040501c:	47b5                	li	a5,13
2040501e:	a0fd                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20405020:	fec42703          	lw	a4,-20(s0)
20405024:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405028:	00f71963          	bne	a4,a5,2040503a <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
2040502c:	fe842703          	lw	a4,-24(s0)
20405030:	479d                	li	a5,7
20405032:	00f71463          	bne	a4,a5,2040503a <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
20405036:	47b9                	li	a5,14
20405038:	a8d1                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
2040503a:	fec42703          	lw	a4,-20(s0)
2040503e:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405042:	00f71963          	bne	a4,a5,20405054 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
20405046:	fe842703          	lw	a4,-24(s0)
2040504a:	47a1                	li	a5,8
2040504c:	00f71463          	bne	a4,a5,20405054 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
20405050:	47bd                	li	a5,15
20405052:	a86d                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20405054:	fec42703          	lw	a4,-20(s0)
20405058:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040505c:	00f71963          	bne	a4,a5,2040506e <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
20405060:	fe842703          	lw	a4,-24(s0)
20405064:	47a5                	li	a5,9
20405066:	00f71463          	bne	a4,a5,2040506e <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
2040506a:	47c1                	li	a5,16
2040506c:	a045                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
2040506e:	fec42703          	lw	a4,-20(s0)
20405072:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405076:	00f71963          	bne	a4,a5,20405088 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
2040507a:	fe842703          	lw	a4,-24(s0)
2040507e:	47a9                	li	a5,10
20405080:	00f71463          	bne	a4,a5,20405088 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
20405084:	47c5                	li	a5,17
20405086:	a059                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
20405088:	fec42703          	lw	a4,-20(s0)
2040508c:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405090:	00f71963          	bne	a4,a5,204050a2 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
20405094:	fe842703          	lw	a4,-24(s0)
20405098:	47ad                	li	a5,11
2040509a:	00f71463          	bne	a4,a5,204050a2 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
2040509e:	47c9                	li	a5,18
204050a0:	a0b5                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
204050a2:	fec42703          	lw	a4,-20(s0)
204050a6:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204050aa:	00f71963          	bne	a4,a5,204050bc <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
204050ae:	fe842703          	lw	a4,-24(s0)
204050b2:	47b1                	li	a5,12
204050b4:	00f71463          	bne	a4,a5,204050bc <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
204050b8:	47cd                	li	a5,19
204050ba:	a889                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
204050bc:	fec42703          	lw	a4,-20(s0)
204050c0:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204050c4:	00f71963          	bne	a4,a5,204050d6 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
204050c8:	fe842703          	lw	a4,-24(s0)
204050cc:	47b5                	li	a5,13
204050ce:	00f71463          	bne	a4,a5,204050d6 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
204050d2:	47d1                	li	a5,20
204050d4:	a825                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
204050d6:	fec42703          	lw	a4,-20(s0)
204050da:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204050de:	00f71963          	bne	a4,a5,204050f0 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
204050e2:	fe842703          	lw	a4,-24(s0)
204050e6:	47b9                	li	a5,14
204050e8:	00f71463          	bne	a4,a5,204050f0 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
204050ec:	47d5                	li	a5,21
204050ee:	a839                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
204050f0:	fec42703          	lw	a4,-20(s0)
204050f4:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204050f8:	00f71963          	bne	a4,a5,2040510a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
204050fc:	fe842703          	lw	a4,-24(s0)
20405100:	47bd                	li	a5,15
20405102:	00f71463          	bne	a4,a5,2040510a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
20405106:	47d9                	li	a5,22
20405108:	a011                	j	2040510c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
2040510a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
2040510c:	853e                	mv	a0,a5
2040510e:	4472                	lw	s0,28(sp)
20405110:	6105                	addi	sp,sp,32
20405112:	8082                	ret

20405114 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20405114:	7179                	addi	sp,sp,-48
20405116:	d606                	sw	ra,44(sp)
20405118:	d422                	sw	s0,40(sp)
2040511a:	1800                	addi	s0,sp,48
2040511c:	fca42e23          	sw	a0,-36(s0)
20405120:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405124:	fdc42503          	lw	a0,-36(s0)
20405128:	de9ff0ef          	jal	ra,20404f10 <__metal_driver_sifive_gpio0_base>
2040512c:	87aa                	mv	a5,a0
2040512e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20405132:	fec42783          	lw	a5,-20(s0)
20405136:	0791                	addi	a5,a5,4
20405138:	4398                	lw	a4,0(a5)
2040513a:	fd842783          	lw	a5,-40(s0)
2040513e:	fec42683          	lw	a3,-20(s0)
20405142:	0691                	addi	a3,a3,4
20405144:	8fd9                	or	a5,a5,a4
20405146:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
20405148:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
2040514a:	853e                	mv	a0,a5
2040514c:	50b2                	lw	ra,44(sp)
2040514e:	5422                	lw	s0,40(sp)
20405150:	6145                	addi	sp,sp,48
20405152:	8082                	ret

20405154 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20405154:	7179                	addi	sp,sp,-48
20405156:	d606                	sw	ra,44(sp)
20405158:	d422                	sw	s0,40(sp)
2040515a:	1800                	addi	s0,sp,48
2040515c:	fca42e23          	sw	a0,-36(s0)
20405160:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405164:	fdc42503          	lw	a0,-36(s0)
20405168:	da9ff0ef          	jal	ra,20404f10 <__metal_driver_sifive_gpio0_base>
2040516c:	87aa                	mv	a5,a0
2040516e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
20405172:	fec42783          	lw	a5,-20(s0)
20405176:	0791                	addi	a5,a5,4
20405178:	439c                	lw	a5,0(a5)
2040517a:	fd842703          	lw	a4,-40(s0)
2040517e:	fff74713          	not	a4,a4
20405182:	86ba                	mv	a3,a4
20405184:	fec42703          	lw	a4,-20(s0)
20405188:	0711                	addi	a4,a4,4
2040518a:	8ff5                	and	a5,a5,a3
2040518c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
2040518e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
20405190:	853e                	mv	a0,a5
20405192:	50b2                	lw	ra,44(sp)
20405194:	5422                	lw	s0,40(sp)
20405196:	6145                	addi	sp,sp,48
20405198:	8082                	ret

2040519a <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
2040519a:	7179                	addi	sp,sp,-48
2040519c:	d606                	sw	ra,44(sp)
2040519e:	d422                	sw	s0,40(sp)
204051a0:	1800                	addi	s0,sp,48
204051a2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204051a6:	fdc42503          	lw	a0,-36(s0)
204051aa:	d67ff0ef          	jal	ra,20404f10 <__metal_driver_sifive_gpio0_base>
204051ae:	87aa                	mv	a5,a0
204051b0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
204051b4:	fec42783          	lw	a5,-20(s0)
204051b8:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
204051ba:	853e                	mv	a0,a5
204051bc:	50b2                	lw	ra,44(sp)
204051be:	5422                	lw	s0,40(sp)
204051c0:	6145                	addi	sp,sp,48
204051c2:	8082                	ret

204051c4 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
204051c4:	7179                	addi	sp,sp,-48
204051c6:	d606                	sw	ra,44(sp)
204051c8:	d422                	sw	s0,40(sp)
204051ca:	1800                	addi	s0,sp,48
204051cc:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204051d0:	fdc42503          	lw	a0,-36(s0)
204051d4:	d3dff0ef          	jal	ra,20404f10 <__metal_driver_sifive_gpio0_base>
204051d8:	87aa                	mv	a5,a0
204051da:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
204051de:	fec42783          	lw	a5,-20(s0)
204051e2:	07b1                	addi	a5,a5,12
204051e4:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
204051e6:	853e                	mv	a0,a5
204051e8:	50b2                	lw	ra,44(sp)
204051ea:	5422                	lw	s0,40(sp)
204051ec:	6145                	addi	sp,sp,48
204051ee:	8082                	ret

204051f0 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
204051f0:	7179                	addi	sp,sp,-48
204051f2:	d606                	sw	ra,44(sp)
204051f4:	d422                	sw	s0,40(sp)
204051f6:	1800                	addi	s0,sp,48
204051f8:	fca42e23          	sw	a0,-36(s0)
204051fc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405200:	fdc42503          	lw	a0,-36(s0)
20405204:	d0dff0ef          	jal	ra,20404f10 <__metal_driver_sifive_gpio0_base>
20405208:	87aa                	mv	a5,a0
2040520a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
2040520e:	fec42783          	lw	a5,-20(s0)
20405212:	07a1                	addi	a5,a5,8
20405214:	439c                	lw	a5,0(a5)
20405216:	fd842703          	lw	a4,-40(s0)
2040521a:	fff74713          	not	a4,a4
2040521e:	86ba                	mv	a3,a4
20405220:	fec42703          	lw	a4,-20(s0)
20405224:	0721                	addi	a4,a4,8
20405226:	8ff5                	and	a5,a5,a3
20405228:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
2040522a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
2040522c:	853e                	mv	a0,a5
2040522e:	50b2                	lw	ra,44(sp)
20405230:	5422                	lw	s0,40(sp)
20405232:	6145                	addi	sp,sp,48
20405234:	8082                	ret

20405236 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20405236:	7179                	addi	sp,sp,-48
20405238:	d606                	sw	ra,44(sp)
2040523a:	d422                	sw	s0,40(sp)
2040523c:	1800                	addi	s0,sp,48
2040523e:	fca42e23          	sw	a0,-36(s0)
20405242:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405246:	fdc42503          	lw	a0,-36(s0)
2040524a:	cc7ff0ef          	jal	ra,20404f10 <__metal_driver_sifive_gpio0_base>
2040524e:	87aa                	mv	a5,a0
20405250:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
20405254:	fec42783          	lw	a5,-20(s0)
20405258:	07a1                	addi	a5,a5,8
2040525a:	4398                	lw	a4,0(a5)
2040525c:	fd842783          	lw	a5,-40(s0)
20405260:	fec42683          	lw	a3,-20(s0)
20405264:	06a1                	addi	a3,a3,8
20405266:	8fd9                	or	a5,a5,a4
20405268:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
2040526a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
2040526c:	853e                	mv	a0,a5
2040526e:	50b2                	lw	ra,44(sp)
20405270:	5422                	lw	s0,40(sp)
20405272:	6145                	addi	sp,sp,48
20405274:	8082                	ret

20405276 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20405276:	7179                	addi	sp,sp,-48
20405278:	d606                	sw	ra,44(sp)
2040527a:	d422                	sw	s0,40(sp)
2040527c:	1800                	addi	s0,sp,48
2040527e:	fca42e23          	sw	a0,-36(s0)
20405282:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405286:	fdc42503          	lw	a0,-36(s0)
2040528a:	c87ff0ef          	jal	ra,20404f10 <__metal_driver_sifive_gpio0_base>
2040528e:	87aa                	mv	a5,a0
20405290:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20405294:	fec42783          	lw	a5,-20(s0)
20405298:	07b1                	addi	a5,a5,12
2040529a:	4398                	lw	a4,0(a5)
2040529c:	fd842783          	lw	a5,-40(s0)
204052a0:	fec42683          	lw	a3,-20(s0)
204052a4:	06b1                	addi	a3,a3,12
204052a6:	8fd9                	or	a5,a5,a4
204052a8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
204052aa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
204052ac:	853e                	mv	a0,a5
204052ae:	50b2                	lw	ra,44(sp)
204052b0:	5422                	lw	s0,40(sp)
204052b2:	6145                	addi	sp,sp,48
204052b4:	8082                	ret

204052b6 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
204052b6:	7179                	addi	sp,sp,-48
204052b8:	d606                	sw	ra,44(sp)
204052ba:	d422                	sw	s0,40(sp)
204052bc:	1800                	addi	s0,sp,48
204052be:	fca42e23          	sw	a0,-36(s0)
204052c2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204052c6:	fdc42503          	lw	a0,-36(s0)
204052ca:	c47ff0ef          	jal	ra,20404f10 <__metal_driver_sifive_gpio0_base>
204052ce:	87aa                	mv	a5,a0
204052d0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
204052d4:	fec42783          	lw	a5,-20(s0)
204052d8:	07b1                	addi	a5,a5,12
204052da:	439c                	lw	a5,0(a5)
204052dc:	fd842703          	lw	a4,-40(s0)
204052e0:	fff74713          	not	a4,a4
204052e4:	86ba                	mv	a3,a4
204052e6:	fec42703          	lw	a4,-20(s0)
204052ea:	0731                	addi	a4,a4,12
204052ec:	8ff5                	and	a5,a5,a3
204052ee:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
204052f0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
204052f2:	853e                	mv	a0,a5
204052f4:	50b2                	lw	ra,44(sp)
204052f6:	5422                	lw	s0,40(sp)
204052f8:	6145                	addi	sp,sp,48
204052fa:	8082                	ret

204052fc <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
204052fc:	7179                	addi	sp,sp,-48
204052fe:	d606                	sw	ra,44(sp)
20405300:	d422                	sw	s0,40(sp)
20405302:	1800                	addi	s0,sp,48
20405304:	fca42e23          	sw	a0,-36(s0)
20405308:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040530c:	fdc42503          	lw	a0,-36(s0)
20405310:	c01ff0ef          	jal	ra,20404f10 <__metal_driver_sifive_gpio0_base>
20405314:	87aa                	mv	a5,a0
20405316:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
2040531a:	fec42783          	lw	a5,-20(s0)
2040531e:	07b1                	addi	a5,a5,12
20405320:	4398                	lw	a4,0(a5)
20405322:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20405326:	fec42683          	lw	a3,-20(s0)
2040532a:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
2040532c:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
2040532e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20405330:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
20405332:	853e                	mv	a0,a5
20405334:	50b2                	lw	ra,44(sp)
20405336:	5422                	lw	s0,40(sp)
20405338:	6145                	addi	sp,sp,48
2040533a:	8082                	ret

2040533c <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
2040533c:	7179                	addi	sp,sp,-48
2040533e:	d606                	sw	ra,44(sp)
20405340:	d422                	sw	s0,40(sp)
20405342:	1800                	addi	s0,sp,48
20405344:	fca42e23          	sw	a0,-36(s0)
20405348:	fcb42c23          	sw	a1,-40(s0)
2040534c:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405350:	fdc42503          	lw	a0,-36(s0)
20405354:	bbdff0ef          	jal	ra,20404f10 <__metal_driver_sifive_gpio0_base>
20405358:	87aa                	mv	a5,a0
2040535a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
2040535e:	fec42783          	lw	a5,-20(s0)
20405362:	03c78793          	addi	a5,a5,60
20405366:	439c                	lw	a5,0(a5)
20405368:	fd842703          	lw	a4,-40(s0)
2040536c:	fff74713          	not	a4,a4
20405370:	86ba                	mv	a3,a4
20405372:	fec42703          	lw	a4,-20(s0)
20405376:	03c70713          	addi	a4,a4,60
2040537a:	8ff5                	and	a5,a5,a3
2040537c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
2040537e:	fec42783          	lw	a5,-20(s0)
20405382:	03878793          	addi	a5,a5,56
20405386:	4398                	lw	a4,0(a5)
20405388:	fd442783          	lw	a5,-44(s0)
2040538c:	fec42683          	lw	a3,-20(s0)
20405390:	03868693          	addi	a3,a3,56
20405394:	8fd9                	or	a5,a5,a4
20405396:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20405398:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
2040539a:	853e                	mv	a0,a5
2040539c:	50b2                	lw	ra,44(sp)
2040539e:	5422                	lw	s0,40(sp)
204053a0:	6145                	addi	sp,sp,48
204053a2:	8082                	ret

204053a4 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
204053a4:	7179                	addi	sp,sp,-48
204053a6:	d606                	sw	ra,44(sp)
204053a8:	d422                	sw	s0,40(sp)
204053aa:	1800                	addi	s0,sp,48
204053ac:	fca42e23          	sw	a0,-36(s0)
204053b0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204053b4:	fdc42503          	lw	a0,-36(s0)
204053b8:	b59ff0ef          	jal	ra,20404f10 <__metal_driver_sifive_gpio0_base>
204053bc:	87aa                	mv	a5,a0
204053be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
204053c2:	fec42783          	lw	a5,-20(s0)
204053c6:	03878793          	addi	a5,a5,56
204053ca:	439c                	lw	a5,0(a5)
204053cc:	fd842703          	lw	a4,-40(s0)
204053d0:	fff74713          	not	a4,a4
204053d4:	86ba                	mv	a3,a4
204053d6:	fec42703          	lw	a4,-20(s0)
204053da:	03870713          	addi	a4,a4,56
204053de:	8ff5                	and	a5,a5,a3
204053e0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
204053e2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
204053e4:	853e                	mv	a0,a5
204053e6:	50b2                	lw	ra,44(sp)
204053e8:	5422                	lw	s0,40(sp)
204053ea:	6145                	addi	sp,sp,48
204053ec:	8082                	ret

204053ee <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204053ee:	7179                	addi	sp,sp,-48
204053f0:	d606                	sw	ra,44(sp)
204053f2:	d422                	sw	s0,40(sp)
204053f4:	1800                	addi	s0,sp,48
204053f6:	fca42e23          	sw	a0,-36(s0)
204053fa:	fcb42c23          	sw	a1,-40(s0)
204053fe:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405402:	fdc42503          	lw	a0,-36(s0)
20405406:	b0bff0ef          	jal	ra,20404f10 <__metal_driver_sifive_gpio0_base>
2040540a:	87aa                	mv	a5,a0
2040540c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20405410:	fd442703          	lw	a4,-44(s0)
20405414:	479d                	li	a5,7
20405416:	1ce7e963          	bltu	a5,a4,204055e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
2040541a:	fd442783          	lw	a5,-44(s0)
2040541e:	00279713          	slli	a4,a5,0x2
20405422:	204067b7          	lui	a5,0x20406
20405426:	3b878793          	addi	a5,a5,952 # 204063b8 <__metal_driver_vtable_riscv_plic0+0x4c>
2040542a:	97ba                	add	a5,a5,a4
2040542c:	439c                	lw	a5,0(a5)
2040542e:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20405430:	fec42783          	lw	a5,-20(s0)
20405434:	07e1                	addi	a5,a5,24
20405436:	439c                	lw	a5,0(a5)
20405438:	fd842703          	lw	a4,-40(s0)
2040543c:	fff74713          	not	a4,a4
20405440:	86ba                	mv	a3,a4
20405442:	fec42703          	lw	a4,-20(s0)
20405446:	0761                	addi	a4,a4,24
20405448:	8ff5                	and	a5,a5,a3
2040544a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
2040544c:	fec42783          	lw	a5,-20(s0)
20405450:	02078793          	addi	a5,a5,32
20405454:	439c                	lw	a5,0(a5)
20405456:	fd842703          	lw	a4,-40(s0)
2040545a:	fff74713          	not	a4,a4
2040545e:	86ba                	mv	a3,a4
20405460:	fec42703          	lw	a4,-20(s0)
20405464:	02070713          	addi	a4,a4,32
20405468:	8ff5                	and	a5,a5,a3
2040546a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
2040546c:	fec42783          	lw	a5,-20(s0)
20405470:	02878793          	addi	a5,a5,40
20405474:	439c                	lw	a5,0(a5)
20405476:	fd842703          	lw	a4,-40(s0)
2040547a:	fff74713          	not	a4,a4
2040547e:	86ba                	mv	a3,a4
20405480:	fec42703          	lw	a4,-20(s0)
20405484:	02870713          	addi	a4,a4,40
20405488:	8ff5                	and	a5,a5,a3
2040548a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
2040548c:	fec42783          	lw	a5,-20(s0)
20405490:	03078793          	addi	a5,a5,48
20405494:	439c                	lw	a5,0(a5)
20405496:	fd842703          	lw	a4,-40(s0)
2040549a:	fff74713          	not	a4,a4
2040549e:	86ba                	mv	a3,a4
204054a0:	fec42703          	lw	a4,-20(s0)
204054a4:	03070713          	addi	a4,a4,48
204054a8:	8ff5                	and	a5,a5,a3
204054aa:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
204054ac:	aa35                	j	204055e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204054ae:	fec42783          	lw	a5,-20(s0)
204054b2:	07e1                	addi	a5,a5,24
204054b4:	4398                	lw	a4,0(a5)
204054b6:	fd842783          	lw	a5,-40(s0)
204054ba:	fec42683          	lw	a3,-20(s0)
204054be:	06e1                	addi	a3,a3,24
204054c0:	8fd9                	or	a5,a5,a4
204054c2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
204054c4:	a215                	j	204055e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204054c6:	fec42783          	lw	a5,-20(s0)
204054ca:	02078793          	addi	a5,a5,32
204054ce:	4398                	lw	a4,0(a5)
204054d0:	fd842783          	lw	a5,-40(s0)
204054d4:	fec42683          	lw	a3,-20(s0)
204054d8:	02068693          	addi	a3,a3,32
204054dc:	8fd9                	or	a5,a5,a4
204054de:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
204054e0:	a221                	j	204055e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204054e2:	fec42783          	lw	a5,-20(s0)
204054e6:	07e1                	addi	a5,a5,24
204054e8:	4398                	lw	a4,0(a5)
204054ea:	fd842783          	lw	a5,-40(s0)
204054ee:	fec42683          	lw	a3,-20(s0)
204054f2:	06e1                	addi	a3,a3,24
204054f4:	8fd9                	or	a5,a5,a4
204054f6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204054f8:	fec42783          	lw	a5,-20(s0)
204054fc:	02078793          	addi	a5,a5,32
20405500:	4398                	lw	a4,0(a5)
20405502:	fd842783          	lw	a5,-40(s0)
20405506:	fec42683          	lw	a3,-20(s0)
2040550a:	02068693          	addi	a3,a3,32
2040550e:	8fd9                	or	a5,a5,a4
20405510:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20405512:	a8d9                	j	204055e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20405514:	fec42783          	lw	a5,-20(s0)
20405518:	02878793          	addi	a5,a5,40
2040551c:	4398                	lw	a4,0(a5)
2040551e:	fd842783          	lw	a5,-40(s0)
20405522:	fec42683          	lw	a3,-20(s0)
20405526:	02868693          	addi	a3,a3,40
2040552a:	8fd9                	or	a5,a5,a4
2040552c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
2040552e:	a86d                	j	204055e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20405530:	fec42783          	lw	a5,-20(s0)
20405534:	03078793          	addi	a5,a5,48
20405538:	4398                	lw	a4,0(a5)
2040553a:	fd842783          	lw	a5,-40(s0)
2040553e:	fec42683          	lw	a3,-20(s0)
20405542:	03068693          	addi	a3,a3,48
20405546:	8fd9                	or	a5,a5,a4
20405548:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
2040554a:	a879                	j	204055e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
2040554c:	fec42783          	lw	a5,-20(s0)
20405550:	02878793          	addi	a5,a5,40
20405554:	4398                	lw	a4,0(a5)
20405556:	fd842783          	lw	a5,-40(s0)
2040555a:	fec42683          	lw	a3,-20(s0)
2040555e:	02868693          	addi	a3,a3,40
20405562:	8fd9                	or	a5,a5,a4
20405564:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20405566:	fec42783          	lw	a5,-20(s0)
2040556a:	03078793          	addi	a5,a5,48
2040556e:	4398                	lw	a4,0(a5)
20405570:	fd842783          	lw	a5,-40(s0)
20405574:	fec42683          	lw	a3,-20(s0)
20405578:	03068693          	addi	a3,a3,48
2040557c:	8fd9                	or	a5,a5,a4
2040557e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20405580:	a0a5                	j	204055e8 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20405582:	fec42783          	lw	a5,-20(s0)
20405586:	07e1                	addi	a5,a5,24
20405588:	4398                	lw	a4,0(a5)
2040558a:	fd842783          	lw	a5,-40(s0)
2040558e:	fec42683          	lw	a3,-20(s0)
20405592:	06e1                	addi	a3,a3,24
20405594:	8fd9                	or	a5,a5,a4
20405596:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20405598:	fec42783          	lw	a5,-20(s0)
2040559c:	02078793          	addi	a5,a5,32
204055a0:	4398                	lw	a4,0(a5)
204055a2:	fd842783          	lw	a5,-40(s0)
204055a6:	fec42683          	lw	a3,-20(s0)
204055aa:	02068693          	addi	a3,a3,32
204055ae:	8fd9                	or	a5,a5,a4
204055b0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204055b2:	fec42783          	lw	a5,-20(s0)
204055b6:	02878793          	addi	a5,a5,40
204055ba:	4398                	lw	a4,0(a5)
204055bc:	fd842783          	lw	a5,-40(s0)
204055c0:	fec42683          	lw	a3,-20(s0)
204055c4:	02868693          	addi	a3,a3,40
204055c8:	8fd9                	or	a5,a5,a4
204055ca:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204055cc:	fec42783          	lw	a5,-20(s0)
204055d0:	03078793          	addi	a5,a5,48
204055d4:	4398                	lw	a4,0(a5)
204055d6:	fd842783          	lw	a5,-40(s0)
204055da:	fec42683          	lw	a3,-20(s0)
204055de:	03068693          	addi	a3,a3,48
204055e2:	8fd9                	or	a5,a5,a4
204055e4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
204055e6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
204055e8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
204055ea:	853e                	mv	a0,a5
204055ec:	50b2                	lw	ra,44(sp)
204055ee:	5422                	lw	s0,40(sp)
204055f0:	6145                	addi	sp,sp,48
204055f2:	8082                	ret

204055f4 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204055f4:	7179                	addi	sp,sp,-48
204055f6:	d606                	sw	ra,44(sp)
204055f8:	d422                	sw	s0,40(sp)
204055fa:	1800                	addi	s0,sp,48
204055fc:	fca42e23          	sw	a0,-36(s0)
20405600:	fcb42c23          	sw	a1,-40(s0)
20405604:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405608:	fdc42503          	lw	a0,-36(s0)
2040560c:	905ff0ef          	jal	ra,20404f10 <__metal_driver_sifive_gpio0_base>
20405610:	87aa                	mv	a5,a0
20405612:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20405616:	fd442703          	lw	a4,-44(s0)
2040561a:	479d                	li	a5,7
2040561c:	14e7ea63          	bltu	a5,a4,20405770 <__metal_driver_sifive_gpio0_clear_int+0x17c>
20405620:	fd442783          	lw	a5,-44(s0)
20405624:	00279713          	slli	a4,a5,0x2
20405628:	204067b7          	lui	a5,0x20406
2040562c:	3d878793          	addi	a5,a5,984 # 204063d8 <__metal_driver_vtable_riscv_plic0+0x6c>
20405630:	97ba                	add	a5,a5,a4
20405632:	439c                	lw	a5,0(a5)
20405634:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20405636:	fec42783          	lw	a5,-20(s0)
2040563a:	07f1                	addi	a5,a5,28
2040563c:	4398                	lw	a4,0(a5)
2040563e:	fd842783          	lw	a5,-40(s0)
20405642:	fec42683          	lw	a3,-20(s0)
20405646:	06f1                	addi	a3,a3,28
20405648:	8fd9                	or	a5,a5,a4
2040564a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
2040564c:	a215                	j	20405770 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
2040564e:	fec42783          	lw	a5,-20(s0)
20405652:	02478793          	addi	a5,a5,36
20405656:	4398                	lw	a4,0(a5)
20405658:	fd842783          	lw	a5,-40(s0)
2040565c:	fec42683          	lw	a3,-20(s0)
20405660:	02468693          	addi	a3,a3,36
20405664:	8fd9                	or	a5,a5,a4
20405666:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20405668:	a221                	j	20405770 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
2040566a:	fec42783          	lw	a5,-20(s0)
2040566e:	07f1                	addi	a5,a5,28
20405670:	4398                	lw	a4,0(a5)
20405672:	fd842783          	lw	a5,-40(s0)
20405676:	fec42683          	lw	a3,-20(s0)
2040567a:	06f1                	addi	a3,a3,28
2040567c:	8fd9                	or	a5,a5,a4
2040567e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20405680:	fec42783          	lw	a5,-20(s0)
20405684:	02478793          	addi	a5,a5,36
20405688:	4398                	lw	a4,0(a5)
2040568a:	fd842783          	lw	a5,-40(s0)
2040568e:	fec42683          	lw	a3,-20(s0)
20405692:	02468693          	addi	a3,a3,36
20405696:	8fd9                	or	a5,a5,a4
20405698:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
2040569a:	a8d9                	j	20405770 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
2040569c:	fec42783          	lw	a5,-20(s0)
204056a0:	02c78793          	addi	a5,a5,44
204056a4:	4398                	lw	a4,0(a5)
204056a6:	fd842783          	lw	a5,-40(s0)
204056aa:	fec42683          	lw	a3,-20(s0)
204056ae:	02c68693          	addi	a3,a3,44
204056b2:	8fd9                	or	a5,a5,a4
204056b4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
204056b6:	a86d                	j	20405770 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204056b8:	fec42783          	lw	a5,-20(s0)
204056bc:	03478793          	addi	a5,a5,52
204056c0:	4398                	lw	a4,0(a5)
204056c2:	fd842783          	lw	a5,-40(s0)
204056c6:	fec42683          	lw	a3,-20(s0)
204056ca:	03468693          	addi	a3,a3,52
204056ce:	8fd9                	or	a5,a5,a4
204056d0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
204056d2:	a879                	j	20405770 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
204056d4:	fec42783          	lw	a5,-20(s0)
204056d8:	02c78793          	addi	a5,a5,44
204056dc:	4398                	lw	a4,0(a5)
204056de:	fd842783          	lw	a5,-40(s0)
204056e2:	fec42683          	lw	a3,-20(s0)
204056e6:	02c68693          	addi	a3,a3,44
204056ea:	8fd9                	or	a5,a5,a4
204056ec:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204056ee:	fec42783          	lw	a5,-20(s0)
204056f2:	03478793          	addi	a5,a5,52
204056f6:	4398                	lw	a4,0(a5)
204056f8:	fd842783          	lw	a5,-40(s0)
204056fc:	fec42683          	lw	a3,-20(s0)
20405700:	03468693          	addi	a3,a3,52
20405704:	8fd9                	or	a5,a5,a4
20405706:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20405708:	a0a5                	j	20405770 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
2040570a:	fec42783          	lw	a5,-20(s0)
2040570e:	07f1                	addi	a5,a5,28
20405710:	4398                	lw	a4,0(a5)
20405712:	fd842783          	lw	a5,-40(s0)
20405716:	fec42683          	lw	a3,-20(s0)
2040571a:	06f1                	addi	a3,a3,28
2040571c:	8fd9                	or	a5,a5,a4
2040571e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20405720:	fec42783          	lw	a5,-20(s0)
20405724:	02478793          	addi	a5,a5,36
20405728:	4398                	lw	a4,0(a5)
2040572a:	fd842783          	lw	a5,-40(s0)
2040572e:	fec42683          	lw	a3,-20(s0)
20405732:	02468693          	addi	a3,a3,36
20405736:	8fd9                	or	a5,a5,a4
20405738:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
2040573a:	fec42783          	lw	a5,-20(s0)
2040573e:	02c78793          	addi	a5,a5,44
20405742:	4398                	lw	a4,0(a5)
20405744:	fd842783          	lw	a5,-40(s0)
20405748:	fec42683          	lw	a3,-20(s0)
2040574c:	02c68693          	addi	a3,a3,44
20405750:	8fd9                	or	a5,a5,a4
20405752:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20405754:	fec42783          	lw	a5,-20(s0)
20405758:	03478793          	addi	a5,a5,52
2040575c:	4398                	lw	a4,0(a5)
2040575e:	fd842783          	lw	a5,-40(s0)
20405762:	fec42683          	lw	a3,-20(s0)
20405766:	03468693          	addi	a3,a3,52
2040576a:	8fd9                	or	a5,a5,a4
2040576c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
2040576e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20405770:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20405772:	853e                	mv	a0,a5
20405774:	50b2                	lw	ra,44(sp)
20405776:	5422                	lw	s0,40(sp)
20405778:	6145                	addi	sp,sp,48
2040577a:	8082                	ret

2040577c <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
2040577c:	1101                	addi	sp,sp,-32
2040577e:	ce06                	sw	ra,28(sp)
20405780:	cc22                	sw	s0,24(sp)
20405782:	1000                	addi	s0,sp,32
20405784:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20405788:	fec42503          	lw	a0,-20(s0)
2040578c:	faaff0ef          	jal	ra,20404f36 <__metal_driver_sifive_gpio0_interrupt_parent>
20405790:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20405792:	853e                	mv	a0,a5
20405794:	40f2                	lw	ra,28(sp)
20405796:	4462                	lw	s0,24(sp)
20405798:	6105                	addi	sp,sp,32
2040579a:	8082                	ret

2040579c <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
2040579c:	7179                	addi	sp,sp,-48
2040579e:	d606                	sw	ra,44(sp)
204057a0:	d422                	sw	s0,40(sp)
204057a2:	1800                	addi	s0,sp,48
204057a4:	fca42e23          	sw	a0,-36(s0)
204057a8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
204057ac:	fd842583          	lw	a1,-40(s0)
204057b0:	fdc42503          	lw	a0,-36(s0)
204057b4:	facff0ef          	jal	ra,20404f60 <__metal_driver_sifive_gpio0_interrupt_lines>
204057b8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
204057bc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
204057c0:	853e                	mv	a0,a5
204057c2:	50b2                	lw	ra,44(sp)
204057c4:	5422                	lw	s0,40(sp)
204057c6:	6145                	addi	sp,sp,48
204057c8:	8082                	ret

204057ca <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
204057ca:	1101                	addi	sp,sp,-32
204057cc:	ce22                	sw	s0,28(sp)
204057ce:	1000                	addi	s0,sp,32
204057d0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204057d4:	fec42703          	lw	a4,-20(s0)
204057d8:	800017b7          	lui	a5,0x80001
204057dc:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
204057e0:	00f71563          	bne	a4,a5,204057ea <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
204057e4:	100137b7          	lui	a5,0x10013
204057e8:	a011                	j	204057ec <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
204057ea:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
204057ec:	853e                	mv	a0,a5
204057ee:	4472                	lw	s0,28(sp)
204057f0:	6105                	addi	sp,sp,32
204057f2:	8082                	ret

204057f4 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
204057f4:	1101                	addi	sp,sp,-32
204057f6:	ce22                	sw	s0,28(sp)
204057f8:	1000                	addi	s0,sp,32
204057fa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204057fe:	fec42703          	lw	a4,-20(s0)
20405802:	800017b7          	lui	a5,0x80001
20405806:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
2040580a:	00f71763          	bne	a4,a5,20405818 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
2040580e:	800017b7          	lui	a5,0x80001
20405812:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe034>
20405816:	a011                	j	2040581a <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20405818:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
2040581a:	853e                	mv	a0,a5
2040581c:	4472                	lw	s0,28(sp)
2040581e:	6105                	addi	sp,sp,32
20405820:	8082                	ret

20405822 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20405822:	1101                	addi	sp,sp,-32
20405824:	ce22                	sw	s0,28(sp)
20405826:	1000                	addi	s0,sp,32
20405828:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040582c:	fec42703          	lw	a4,-20(s0)
20405830:	800017b7          	lui	a5,0x80001
20405834:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
20405838:	00f71463          	bne	a4,a5,20405840 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
2040583c:	4795                	li	a5,5
2040583e:	a011                	j	20405842 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20405840:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
20405842:	853e                	mv	a0,a5
20405844:	4472                	lw	s0,28(sp)
20405846:	6105                	addi	sp,sp,32
20405848:	8082                	ret

2040584a <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
2040584a:	1101                	addi	sp,sp,-32
2040584c:	ce22                	sw	s0,28(sp)
2040584e:	1000                	addi	s0,sp,32
20405850:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405854:	fec42703          	lw	a4,-20(s0)
20405858:	800017b7          	lui	a5,0x80001
2040585c:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
20405860:	00f71763          	bne	a4,a5,2040586e <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20405864:	800017b7          	lui	a5,0x80001
20405868:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffdc6c>
2040586c:	a011                	j	20405870 <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
2040586e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
20405870:	853e                	mv	a0,a5
20405872:	4472                	lw	s0,28(sp)
20405874:	6105                	addi	sp,sp,32
20405876:	8082                	ret

20405878 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20405878:	1101                	addi	sp,sp,-32
2040587a:	ce22                	sw	s0,28(sp)
2040587c:	1000                	addi	s0,sp,32
2040587e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405882:	fec42703          	lw	a4,-20(s0)
20405886:	800017b7          	lui	a5,0x80001
2040588a:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
2040588e:	00f71563          	bne	a4,a5,20405898 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20405892:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20405896:	a011                	j	2040589a <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20405898:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
2040589a:	853e                	mv	a0,a5
2040589c:	4472                	lw	s0,28(sp)
2040589e:	6105                	addi	sp,sp,32
204058a0:	8082                	ret

204058a2 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
204058a2:	1101                	addi	sp,sp,-32
204058a4:	ce22                	sw	s0,28(sp)
204058a6:	1000                	addi	s0,sp,32
204058a8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204058ac:	fec42703          	lw	a4,-20(s0)
204058b0:	800017b7          	lui	a5,0x80001
204058b4:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
204058b8:	00f71563          	bne	a4,a5,204058c2 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
204058bc:	000307b7          	lui	a5,0x30
204058c0:	a011                	j	204058c4 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
204058c2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
204058c4:	853e                	mv	a0,a5
204058c6:	4472                	lw	s0,28(sp)
204058c8:	6105                	addi	sp,sp,32
204058ca:	8082                	ret

204058cc <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
204058cc:	1101                	addi	sp,sp,-32
204058ce:	ce22                	sw	s0,28(sp)
204058d0:	1000                	addi	s0,sp,32
204058d2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204058d6:	fec42703          	lw	a4,-20(s0)
204058da:	800017b7          	lui	a5,0x80001
204058de:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffe334>
204058e2:	00f71563          	bne	a4,a5,204058ec <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
204058e6:	000307b7          	lui	a5,0x30
204058ea:	a011                	j	204058ee <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
204058ec:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
204058ee:	853e                	mv	a0,a5
204058f0:	4472                	lw	s0,28(sp)
204058f2:	6105                	addi	sp,sp,32
204058f4:	8082                	ret

204058f6 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
204058f6:	1101                	addi	sp,sp,-32
204058f8:	ce06                	sw	ra,28(sp)
204058fa:	cc22                	sw	s0,24(sp)
204058fc:	1000                	addi	s0,sp,32
204058fe:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20405902:	fec42503          	lw	a0,-20(s0)
20405906:	35fd                	jal	204057f4 <__metal_driver_sifive_uart0_interrupt_parent>
20405908:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
2040590a:	853e                	mv	a0,a5
2040590c:	40f2                	lw	ra,28(sp)
2040590e:	4462                	lw	s0,24(sp)
20405910:	6105                	addi	sp,sp,32
20405912:	8082                	ret

20405914 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20405914:	1101                	addi	sp,sp,-32
20405916:	ce06                	sw	ra,28(sp)
20405918:	cc22                	sw	s0,24(sp)
2040591a:	1000                	addi	s0,sp,32
2040591c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20405920:	fec42503          	lw	a0,-20(s0)
20405924:	3dfd                	jal	20405822 <__metal_driver_sifive_uart0_interrupt_line>
20405926:	87aa                	mv	a5,a0
20405928:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
2040592c:	853e                	mv	a0,a5
2040592e:	40f2                	lw	ra,28(sp)
20405930:	4462                	lw	s0,24(sp)
20405932:	6105                	addi	sp,sp,32
20405934:	8082                	ret

20405936 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20405936:	7179                	addi	sp,sp,-48
20405938:	d606                	sw	ra,44(sp)
2040593a:	d422                	sw	s0,40(sp)
2040593c:	1800                	addi	s0,sp,48
2040593e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405942:	fdc42503          	lw	a0,-36(s0)
20405946:	e85ff0ef          	jal	ra,204057ca <__metal_driver_sifive_uart0_control_base>
2040594a:	87aa                	mv	a5,a0
2040594c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20405950:	fec42783          	lw	a5,-20(s0)
20405954:	439c                	lw	a5,0(a5)
20405956:	fff7c793          	not	a5,a5
2040595a:	83fd                	srli	a5,a5,0x1f
2040595c:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20405960:	853e                	mv	a0,a5
20405962:	50b2                	lw	ra,44(sp)
20405964:	5422                	lw	s0,40(sp)
20405966:	6145                	addi	sp,sp,48
20405968:	8082                	ret

2040596a <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
2040596a:	7179                	addi	sp,sp,-48
2040596c:	d606                	sw	ra,44(sp)
2040596e:	d422                	sw	s0,40(sp)
20405970:	1800                	addi	s0,sp,48
20405972:	fca42e23          	sw	a0,-36(s0)
20405976:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040597a:	fdc42503          	lw	a0,-36(s0)
2040597e:	e4dff0ef          	jal	ra,204057ca <__metal_driver_sifive_uart0_control_base>
20405982:	87aa                	mv	a5,a0
20405984:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20405988:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
2040598a:	fdc42503          	lw	a0,-36(s0)
2040598e:	3765                	jal	20405936 <__metal_driver_sifive_uart0_txready>
20405990:	87aa                	mv	a5,a0
20405992:	dfe5                	beqz	a5,2040598a <__metal_driver_sifive_uart0_putc+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20405994:	fec42783          	lw	a5,-20(s0)
20405998:	fd842703          	lw	a4,-40(s0)
2040599c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
2040599e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
204059a0:	853e                	mv	a0,a5
204059a2:	50b2                	lw	ra,44(sp)
204059a4:	5422                	lw	s0,40(sp)
204059a6:	6145                	addi	sp,sp,48
204059a8:	8082                	ret

204059aa <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
204059aa:	7179                	addi	sp,sp,-48
204059ac:	d606                	sw	ra,44(sp)
204059ae:	d422                	sw	s0,40(sp)
204059b0:	1800                	addi	s0,sp,48
204059b2:	fca42e23          	sw	a0,-36(s0)
204059b6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204059ba:	fdc42503          	lw	a0,-36(s0)
204059be:	e0dff0ef          	jal	ra,204057ca <__metal_driver_sifive_uart0_control_base>
204059c2:	87aa                	mv	a5,a0
204059c4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
204059c8:	fec42783          	lw	a5,-20(s0)
204059cc:	0791                	addi	a5,a5,4
204059ce:	439c                	lw	a5,0(a5)
204059d0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
204059d4:	fe842783          	lw	a5,-24(s0)
204059d8:	0007d763          	bgez	a5,204059e6 <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
204059dc:	fd842783          	lw	a5,-40(s0)
204059e0:	577d                	li	a4,-1
204059e2:	c398                	sw	a4,0(a5)
204059e4:	a801                	j	204059f4 <__metal_driver_sifive_uart0_getc+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
204059e6:	fe842783          	lw	a5,-24(s0)
204059ea:	0ff7f713          	andi	a4,a5,255
204059ee:	fd842783          	lw	a5,-40(s0)
204059f2:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
204059f4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
204059f6:	853e                	mv	a0,a5
204059f8:	50b2                	lw	ra,44(sp)
204059fa:	5422                	lw	s0,40(sp)
204059fc:	6145                	addi	sp,sp,48
204059fe:	8082                	ret

20405a00 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20405a00:	7179                	addi	sp,sp,-48
20405a02:	d622                	sw	s0,44(sp)
20405a04:	1800                	addi	s0,sp,48
20405a06:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20405a0a:	fdc42783          	lw	a5,-36(s0)
20405a0e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20405a12:	fec42783          	lw	a5,-20(s0)
20405a16:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
20405a18:	853e                	mv	a0,a5
20405a1a:	5432                	lw	s0,44(sp)
20405a1c:	6145                	addi	sp,sp,48
20405a1e:	8082                	ret

20405a20 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20405a20:	7179                	addi	sp,sp,-48
20405a22:	d606                	sw	ra,44(sp)
20405a24:	d422                	sw	s0,40(sp)
20405a26:	1800                	addi	s0,sp,48
20405a28:	fca42e23          	sw	a0,-36(s0)
20405a2c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20405a30:	fdc42783          	lw	a5,-36(s0)
20405a34:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20405a38:	fdc42503          	lw	a0,-36(s0)
20405a3c:	d8fff0ef          	jal	ra,204057ca <__metal_driver_sifive_uart0_control_base>
20405a40:	87aa                	mv	a5,a0
20405a42:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405a46:	fdc42503          	lw	a0,-36(s0)
20405a4a:	e01ff0ef          	jal	ra,2040584a <__metal_driver_sifive_uart0_clock>
20405a4e:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20405a52:	fd842703          	lw	a4,-40(s0)
20405a56:	fec42783          	lw	a5,-20(s0)
20405a5a:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
20405a5c:	fe442783          	lw	a5,-28(s0)
20405a60:	cbb1                	beqz	a5,20405ab4 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20405a62:	fe442783          	lw	a5,-28(s0)
20405a66:	439c                	lw	a5,0(a5)
20405a68:	439c                	lw	a5,0(a5)
20405a6a:	fe442503          	lw	a0,-28(s0)
20405a6e:	9782                	jalr	a5
20405a70:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20405a74:	fe042703          	lw	a4,-32(s0)
20405a78:	fd842783          	lw	a5,-40(s0)
20405a7c:	02f747b3          	div	a5,a4,a5
20405a80:	fff78713          	addi	a4,a5,-1
20405a84:	fe842783          	lw	a5,-24(s0)
20405a88:	07e1                	addi	a5,a5,24
20405a8a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20405a8c:	fe842783          	lw	a5,-24(s0)
20405a90:	07a1                	addi	a5,a5,8
20405a92:	439c                	lw	a5,0(a5)
20405a94:	fe842703          	lw	a4,-24(s0)
20405a98:	0721                	addi	a4,a4,8
20405a9a:	0017e793          	ori	a5,a5,1
20405a9e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20405aa0:	fe842783          	lw	a5,-24(s0)
20405aa4:	07b1                	addi	a5,a5,12
20405aa6:	439c                	lw	a5,0(a5)
20405aa8:	fe842703          	lw	a4,-24(s0)
20405aac:	0731                	addi	a4,a4,12
20405aae:	0017e793          	ori	a5,a5,1
20405ab2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20405ab4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20405ab6:	853e                	mv	a0,a5
20405ab8:	50b2                	lw	ra,44(sp)
20405aba:	5422                	lw	s0,40(sp)
20405abc:	6145                	addi	sp,sp,48
20405abe:	8082                	ret

20405ac0 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20405ac0:	7139                	addi	sp,sp,-64
20405ac2:	de06                	sw	ra,60(sp)
20405ac4:	dc22                	sw	s0,56(sp)
20405ac6:	0080                	addi	s0,sp,64
20405ac8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20405acc:	fcc42783          	lw	a5,-52(s0)
20405ad0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20405ad4:	fcc42503          	lw	a0,-52(s0)
20405ad8:	cf3ff0ef          	jal	ra,204057ca <__metal_driver_sifive_uart0_control_base>
20405adc:	87aa                	mv	a5,a0
20405ade:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20405ae2:	fcc42503          	lw	a0,-52(s0)
20405ae6:	d65ff0ef          	jal	ra,2040584a <__metal_driver_sifive_uart0_clock>
20405aea:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20405aee:	fe842783          	lw	a5,-24(s0)
20405af2:	07a1                	addi	a5,a5,8
20405af4:	4398                	lw	a4,0(a5)
20405af6:	fe842783          	lw	a5,-24(s0)
20405afa:	07a1                	addi	a5,a5,8
20405afc:	86be                	mv	a3,a5
20405afe:	fff907b7          	lui	a5,0xfff90
20405b02:	17fd                	addi	a5,a5,-1
20405b04:	8ff9                	and	a5,a5,a4
20405b06:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20405b08:	fe842783          	lw	a5,-24(s0)
20405b0c:	07a1                	addi	a5,a5,8
20405b0e:	4398                	lw	a4,0(a5)
20405b10:	fe842783          	lw	a5,-24(s0)
20405b14:	07a1                	addi	a5,a5,8
20405b16:	86be                	mv	a3,a5
20405b18:	67c1                	lui	a5,0x10
20405b1a:	8fd9                	or	a5,a5,a4
20405b1c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20405b1e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20405b20:	fe842783          	lw	a5,-24(s0)
20405b24:	07d1                	addi	a5,a5,20
20405b26:	439c                	lw	a5,0(a5)
20405b28:	8b85                	andi	a5,a5,1
20405b2a:	dbfd                	beqz	a5,20405b20 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20405b2c:	fe842783          	lw	a5,-24(s0)
20405b30:	07a1                	addi	a5,a5,8
20405b32:	439c                	lw	a5,0(a5)
20405b34:	8b89                	andi	a5,a5,2
20405b36:	c399                	beqz	a5,20405b3c <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20405b38:	47a5                	li	a5,9
20405b3a:	a011                	j	20405b3e <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20405b3c:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20405b3e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20405b42:	fe442783          	lw	a5,-28(s0)
20405b46:	439c                	lw	a5,0(a5)
20405b48:	439c                	lw	a5,0(a5)
20405b4a:	fe442503          	lw	a0,-28(s0)
20405b4e:	9782                	jalr	a5
20405b50:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20405b54:	fe042703          	lw	a4,-32(s0)
20405b58:	fdc42783          	lw	a5,-36(s0)
20405b5c:	02f707b3          	mul	a5,a4,a5
20405b60:	873e                	mv	a4,a5
20405b62:	fec42783          	lw	a5,-20(s0)
20405b66:	43dc                	lw	a5,4(a5)
20405b68:	02f757b3          	divu	a5,a4,a5
20405b6c:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20405b70:	fc042a23          	sw	zero,-44(s0)
20405b74:	a039                	j	20405b82 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20405b76:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20405b78:	fd442783          	lw	a5,-44(s0)
20405b7c:	0785                	addi	a5,a5,1
20405b7e:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20405b82:	fd442783          	lw	a5,-44(s0)
20405b86:	fd842703          	lw	a4,-40(s0)
20405b8a:	fee7c6e3          	blt	a5,a4,20405b76 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20405b8e:	0001                	nop
20405b90:	50f2                	lw	ra,60(sp)
20405b92:	5462                	lw	s0,56(sp)
20405b94:	6121                	addi	sp,sp,64
20405b96:	8082                	ret

20405b98 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20405b98:	7179                	addi	sp,sp,-48
20405b9a:	d606                	sw	ra,44(sp)
20405b9c:	d422                	sw	s0,40(sp)
20405b9e:	1800                	addi	s0,sp,48
20405ba0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20405ba4:	fdc42783          	lw	a5,-36(s0)
20405ba8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20405bac:	fec42703          	lw	a4,-20(s0)
20405bb0:	fec42783          	lw	a5,-20(s0)
20405bb4:	43dc                	lw	a5,4(a5)
20405bb6:	85be                	mv	a1,a5
20405bb8:	853a                	mv	a0,a4
20405bba:	dc7fc0ef          	jal	ra,20402980 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20405bbe:	0001                	nop
20405bc0:	50b2                	lw	ra,44(sp)
20405bc2:	5422                	lw	s0,40(sp)
20405bc4:	6145                	addi	sp,sp,48
20405bc6:	8082                	ret

20405bc8 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20405bc8:	7139                	addi	sp,sp,-64
20405bca:	de06                	sw	ra,60(sp)
20405bcc:	dc22                	sw	s0,56(sp)
20405bce:	0080                	addi	s0,sp,64
20405bd0:	fca42623          	sw	a0,-52(s0)
20405bd4:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20405bd8:	fcc42783          	lw	a5,-52(s0)
20405bdc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405be0:	fcc42503          	lw	a0,-52(s0)
20405be4:	c67ff0ef          	jal	ra,2040584a <__metal_driver_sifive_uart0_clock>
20405be8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20405bec:	fcc42503          	lw	a0,-52(s0)
20405bf0:	c89ff0ef          	jal	ra,20405878 <__metal_driver_sifive_uart0_pinmux>
20405bf4:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20405bf8:	fe842783          	lw	a5,-24(s0)
20405bfc:	c7b9                	beqz	a5,20405c4a <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20405bfe:	fec42783          	lw	a5,-20(s0)
20405c02:	20406737          	lui	a4,0x20406
20405c06:	ac070713          	addi	a4,a4,-1344 # 20405ac0 <pre_rate_change_callback_func>
20405c0a:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20405c0c:	fec42783          	lw	a5,-20(s0)
20405c10:	fcc42703          	lw	a4,-52(s0)
20405c14:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20405c16:	fec42783          	lw	a5,-20(s0)
20405c1a:	07a1                	addi	a5,a5,8
20405c1c:	85be                	mv	a1,a5
20405c1e:	fe842503          	lw	a0,-24(s0)
20405c22:	20f1                	jal	20405cee <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20405c24:	fec42783          	lw	a5,-20(s0)
20405c28:	20406737          	lui	a4,0x20406
20405c2c:	b9870713          	addi	a4,a4,-1128 # 20405b98 <post_rate_change_callback_func>
20405c30:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20405c32:	fec42783          	lw	a5,-20(s0)
20405c36:	fcc42703          	lw	a4,-52(s0)
20405c3a:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
20405c3c:	fec42783          	lw	a5,-20(s0)
20405c40:	07d1                	addi	a5,a5,20
20405c42:	85be                	mv	a1,a5
20405c44:	fe842503          	lw	a0,-24(s0)
20405c48:	28d9                	jal	20405d1e <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20405c4a:	fec42783          	lw	a5,-20(s0)
20405c4e:	fc842583          	lw	a1,-56(s0)
20405c52:	853e                	mv	a0,a5
20405c54:	d2dfc0ef          	jal	ra,20402980 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20405c58:	fe442783          	lw	a5,-28(s0)
20405c5c:	cb95                	beqz	a5,20405c90 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20405c5e:	fcc42503          	lw	a0,-52(s0)
20405c62:	c41ff0ef          	jal	ra,204058a2 <__metal_driver_sifive_uart0_pinmux_output_selector>
20405c66:	87aa                	mv	a5,a0
20405c68:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20405c6c:	fcc42503          	lw	a0,-52(s0)
20405c70:	c5dff0ef          	jal	ra,204058cc <__metal_driver_sifive_uart0_pinmux_source_selector>
20405c74:	87aa                	mv	a5,a0
20405c76:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20405c7a:	fe442783          	lw	a5,-28(s0)
20405c7e:	439c                	lw	a5,0(a5)
20405c80:	53dc                	lw	a5,36(a5)
20405c82:	fdc42603          	lw	a2,-36(s0)
20405c86:	fe042583          	lw	a1,-32(s0)
20405c8a:	fe442503          	lw	a0,-28(s0)
20405c8e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20405c90:	0001                	nop
20405c92:	50f2                	lw	ra,60(sp)
20405c94:	5462                	lw	s0,56(sp)
20405c96:	6121                	addi	sp,sp,64
20405c98:	8082                	ret

20405c9a <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20405c9a:	7179                	addi	sp,sp,-48
20405c9c:	d622                	sw	s0,44(sp)
20405c9e:	1800                	addi	s0,sp,48
20405ca0:	fca42e23          	sw	a0,-36(s0)
20405ca4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20405ca8:	fd842783          	lw	a5,-40(s0)
20405cac:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20405cb0:	fdc42783          	lw	a5,-36(s0)
20405cb4:	e781                	bnez	a5,20405cbc <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20405cb6:	fd842783          	lw	a5,-40(s0)
20405cba:	a035                	j	20405ce6 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20405cbc:	fdc42783          	lw	a5,-36(s0)
20405cc0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20405cc4:	a031                	j	20405cd0 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20405cc6:	fec42783          	lw	a5,-20(s0)
20405cca:	479c                	lw	a5,8(a5)
20405ccc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20405cd0:	fec42783          	lw	a5,-20(s0)
20405cd4:	479c                	lw	a5,8(a5)
20405cd6:	fbe5                	bnez	a5,20405cc6 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20405cd8:	fec42783          	lw	a5,-20(s0)
20405cdc:	fd842703          	lw	a4,-40(s0)
20405ce0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20405ce2:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20405ce6:	853e                	mv	a0,a5
20405ce8:	5432                	lw	s0,44(sp)
20405cea:	6145                	addi	sp,sp,48
20405cec:	8082                	ret

20405cee <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405cee:	1101                	addi	sp,sp,-32
20405cf0:	ce06                	sw	ra,28(sp)
20405cf2:	cc22                	sw	s0,24(sp)
20405cf4:	1000                	addi	s0,sp,32
20405cf6:	fea42623          	sw	a0,-20(s0)
20405cfa:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20405cfe:	fec42783          	lw	a5,-20(s0)
20405d02:	43dc                	lw	a5,4(a5)
20405d04:	fe842583          	lw	a1,-24(s0)
20405d08:	853e                	mv	a0,a5
20405d0a:	3f41                	jal	20405c9a <_metal_clock_append_to_callbacks>
20405d0c:	872a                	mv	a4,a0
20405d0e:	fec42783          	lw	a5,-20(s0)
20405d12:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20405d14:	0001                	nop
20405d16:	40f2                	lw	ra,28(sp)
20405d18:	4462                	lw	s0,24(sp)
20405d1a:	6105                	addi	sp,sp,32
20405d1c:	8082                	ret

20405d1e <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405d1e:	1101                	addi	sp,sp,-32
20405d20:	ce06                	sw	ra,28(sp)
20405d22:	cc22                	sw	s0,24(sp)
20405d24:	1000                	addi	s0,sp,32
20405d26:	fea42623          	sw	a0,-20(s0)
20405d2a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20405d2e:	fec42783          	lw	a5,-20(s0)
20405d32:	479c                	lw	a5,8(a5)
20405d34:	fe842583          	lw	a1,-24(s0)
20405d38:	853e                	mv	a0,a5
20405d3a:	3785                	jal	20405c9a <_metal_clock_append_to_callbacks>
20405d3c:	872a                	mv	a4,a0
20405d3e:	fec42783          	lw	a5,-20(s0)
20405d42:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20405d44:	0001                	nop
20405d46:	40f2                	lw	ra,28(sp)
20405d48:	4462                	lw	s0,24(sp)
20405d4a:	6105                	addi	sp,sp,32
20405d4c:	8082                	ret

20405d4e <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20405d4e:	1101                	addi	sp,sp,-32
20405d50:	ce06                	sw	ra,28(sp)
20405d52:	cc22                	sw	s0,24(sp)
20405d54:	1000                	addi	s0,sp,32
20405d56:	fea42623          	sw	a0,-20(s0)
20405d5a:	fec42783          	lw	a5,-20(s0)
20405d5e:	439c                	lw	a5,0(a5)
20405d60:	57dc                	lw	a5,44(a5)
20405d62:	fec42503          	lw	a0,-20(s0)
20405d66:	9782                	jalr	a5
20405d68:	87aa                	mv	a5,a0
20405d6a:	853e                	mv	a0,a5
20405d6c:	40f2                	lw	ra,28(sp)
20405d6e:	4462                	lw	s0,24(sp)
20405d70:	6105                	addi	sp,sp,32
20405d72:	8082                	ret

20405d74 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20405d74:	1101                	addi	sp,sp,-32
20405d76:	ce22                	sw	s0,28(sp)
20405d78:	1000                	addi	s0,sp,32
20405d7a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20405d7e:	fec42783          	lw	a5,-20(s0)
20405d82:	eb89                	bnez	a5,20405d94 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20405d84:	fec42703          	lw	a4,-20(s0)
20405d88:	070a                	slli	a4,a4,0x2
20405d8a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20405d8e:	97ba                	add	a5,a5,a4
20405d90:	439c                	lw	a5,0(a5)
20405d92:	a011                	j	20405d96 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20405d94:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20405d96:	853e                	mv	a0,a5
20405d98:	4472                	lw	s0,28(sp)
20405d9a:	6105                	addi	sp,sp,32
20405d9c:	8082                	ret

20405d9e <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20405d9e:	1101                	addi	sp,sp,-32
20405da0:	ce22                	sw	s0,28(sp)
20405da2:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405da4:	f14027f3          	csrr	a5,mhartid
20405da8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20405dac:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20405db0:	853e                	mv	a0,a5
20405db2:	4472                	lw	s0,28(sp)
20405db4:	6105                	addi	sp,sp,32
20405db6:	8082                	ret

20405db8 <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
20405db8:	1101                	addi	sp,sp,-32
20405dba:	ce22                	sw	s0,28(sp)
20405dbc:	1000                	addi	s0,sp,32
20405dbe:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20405dc2:	0001                	nop
20405dc4:	bffd                	j	20405dc2 <metal_shutdown+0xa>
	...

20405e00 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405e00:	cdefd06f          	j	204032de <metal_interrupt_vector_handler>

20405e04 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405e04:	cdafd06f          	j	204032de <metal_interrupt_vector_handler>

20405e08 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405e08:	cd6fd06f          	j	204032de <metal_interrupt_vector_handler>

20405e0c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
20405e0c:	d00fd06f          	j	2040330c <metal_software_interrupt_vector_handler>

20405e10 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405e10:	ccefd06f          	j	204032de <metal_interrupt_vector_handler>

20405e14 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405e14:	ccafd06f          	j	204032de <metal_interrupt_vector_handler>

20405e18 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405e18:	cc6fd06f          	j	204032de <metal_interrupt_vector_handler>

20405e1c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
20405e1c:	de2fd06f          	j	204033fe <metal_timer_interrupt_vector_handler>

20405e20 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20405e20:	cbefd06f          	j	204032de <metal_interrupt_vector_handler>

20405e24 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20405e24:	cbafd06f          	j	204032de <metal_interrupt_vector_handler>

20405e28 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20405e28:	cb6fd06f          	j	204032de <metal_interrupt_vector_handler>

20405e2c <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
20405e2c:	cb2fd06f          	j	204032de <metal_interrupt_vector_handler>

20405e30 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20405e30:	caefd06f          	j	204032de <metal_interrupt_vector_handler>

20405e34 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20405e34:	caafd06f          	j	204032de <metal_interrupt_vector_handler>

20405e38 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20405e38:	ca6fd06f          	j	204032de <metal_interrupt_vector_handler>

20405e3c <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
20405e3c:	ca2fd06f          	j	204032de <metal_interrupt_vector_handler>

20405e40 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20405e40:	837fd06f          	j	20403676 <metal_lc0_interrupt_vector_handler>

20405e44 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20405e44:	8c5fd06f          	j	20403708 <metal_lc1_interrupt_vector_handler>

20405e48 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20405e48:	953fd06f          	j	2040379a <metal_lc2_interrupt_vector_handler>

20405e4c <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
20405e4c:	9e1fd06f          	j	2040382c <metal_lc3_interrupt_vector_handler>

20405e50 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20405e50:	a6ffd06f          	j	204038be <metal_lc4_interrupt_vector_handler>

20405e54 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20405e54:	afdfd06f          	j	20403950 <metal_lc5_interrupt_vector_handler>

20405e58 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20405e58:	b8bfd06f          	j	204039e2 <metal_lc6_interrupt_vector_handler>

20405e5c <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
20405e5c:	c19fd06f          	j	20403a74 <metal_lc7_interrupt_vector_handler>

20405e60 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20405e60:	ca7fd06f          	j	20403b06 <metal_lc8_interrupt_vector_handler>

20405e64 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20405e64:	d35fd06f          	j	20403b98 <metal_lc9_interrupt_vector_handler>

20405e68 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20405e68:	dc3fd06f          	j	20403c2a <metal_lc10_interrupt_vector_handler>

20405e6c <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
20405e6c:	e51fd06f          	j	20403cbc <metal_lc11_interrupt_vector_handler>

20405e70 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20405e70:	edffd06f          	j	20403d4e <metal_lc12_interrupt_vector_handler>

20405e74 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20405e74:	f6dfd06f          	j	20403de0 <metal_lc13_interrupt_vector_handler>

20405e78 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20405e78:	ffbfd06f          	j	20403e72 <metal_lc14_interrupt_vector_handler>

20405e7c <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
20405e7c:	888fe06f          	j	20403f04 <metal_lc15_interrupt_vector_handler>

20405e80 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405e80:	1101                	addi	sp,sp,-32
20405e82:	ce22                	sw	s0,28(sp)
20405e84:	1000                	addi	s0,sp,32
20405e86:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
20405e8a:	fec42703          	lw	a4,-20(s0)
20405e8e:	800017b7          	lui	a5,0x80001
20405e92:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffdc6c>
20405e96:	00f71763          	bne	a4,a5,20405ea4 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
20405e9a:	03dfd7b7          	lui	a5,0x3dfd
20405e9e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405ea2:	a011                	j	20405ea6 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
20405ea4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
20405ea6:	853e                	mv	a0,a5
20405ea8:	4472                	lw	s0,28(sp)
20405eaa:	6105                	addi	sp,sp,32
20405eac:	8082                	ret

20405eae <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
20405eae:	1101                	addi	sp,sp,-32
20405eb0:	ce06                	sw	ra,28(sp)
20405eb2:	cc22                	sw	s0,24(sp)
20405eb4:	1000                	addi	s0,sp,32
20405eb6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
20405eba:	fec42503          	lw	a0,-20(s0)
20405ebe:	37c9                	jal	20405e80 <__metal_driver_fixed_clock_rate>
20405ec0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405ec2:	853e                	mv	a0,a5
20405ec4:	40f2                	lw	ra,28(sp)
20405ec6:	4462                	lw	s0,24(sp)
20405ec8:	6105                	addi	sp,sp,32
20405eca:	8082                	ret

20405ecc <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
20405ecc:	1101                	addi	sp,sp,-32
20405ece:	ce06                	sw	ra,28(sp)
20405ed0:	cc22                	sw	s0,24(sp)
20405ed2:	1000                	addi	s0,sp,32
20405ed4:	fea42623          	sw	a0,-20(s0)
20405ed8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
20405edc:	fec42503          	lw	a0,-20(s0)
20405ee0:	37f9                	jal	20405eae <__metal_driver_fixed_clock_get_rate_hz>
20405ee2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20405ee4:	853e                	mv	a0,a5
20405ee6:	40f2                	lw	ra,28(sp)
20405ee8:	4462                	lw	s0,24(sp)
20405eea:	6105                	addi	sp,sp,32
20405eec:	8082                	ret

20405eee <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
20405eee:	1101                	addi	sp,sp,-32
20405ef0:	ce06                	sw	ra,28(sp)
20405ef2:	cc22                	sw	s0,24(sp)
20405ef4:	1000                	addi	s0,sp,32
20405ef6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
20405efa:	fec42503          	lw	a0,-20(s0)
20405efe:	ebbff0ef          	jal	ra,20405db8 <metal_shutdown>
